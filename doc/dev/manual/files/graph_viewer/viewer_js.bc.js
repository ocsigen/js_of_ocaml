// Generated by js_of_ocaml
//# buildInfo:effects=disabled, kind=unknown, use-js-string=true, version=6.2.0+5859d56
//# 7 ".viewer_js.eobjs/jsoo/viewer_js.bc.runtime.js"
(function
  (Object){
   typeof globalThis !== "object"
   &&
    (this
      ? get()
      : (Object.defineProperty
         (Object.prototype, "_T_", {configurable: true, get: get}),
        _T_));
   function get(){
    var global = this || self;
    global.globalThis = global;
    delete Object.prototype._T_;
   }
  }
  (Object));
(function(globalThis){
   "use strict";
   function caml_string_of_jsbytes(x){return x;}
   class JsStringReader{
      constructor(s, i){this.s = s; this.i = i;}
      read8u(){return this.s.charCodeAt(this.i++);}
      read8s(){return this.s.charCodeAt(this.i++) << 24 >> 24;}
      read16u(){
       var s = this.s, i = this.i;
       this.i = i + 2;
       return s.charCodeAt(i) << 8 | s.charCodeAt(i + 1);
      }
      read16s(){
       var s = this.s, i = this.i;
       this.i = i + 2;
       return s.charCodeAt(i) << 24 >> 16 | s.charCodeAt(i + 1);
      }
      read32u(){
       var s = this.s, i = this.i;
       this.i = i + 4;
       return (s.charCodeAt(i) << 24 | s.charCodeAt(i + 1) << 16
              | s.charCodeAt(i + 2) << 8
              | s.charCodeAt(i + 3))
              >>> 0;
      }
      read32s(){
       var s = this.s, i = this.i;
       this.i = i + 4;
       return s.charCodeAt(i) << 24 | s.charCodeAt(i + 1) << 16
              | s.charCodeAt(i + 2) << 8
              | s.charCodeAt(i + 3);
      }
      readstr(len){
       var i = this.i;
       this.i = i + len;
       return caml_string_of_jsbytes(this.s.slice(i, i + len));
      }
      readuint8array(len){
       var b = new Uint8Array(len), s = this.s, i = this.i;
       for(var j = 0; j < len; j++) b[j] = s.charCodeAt(i + j);
       this.i = i + len;
       return b;
      }
    }
   var jsoo_text_decoder = new TextDecoder();
   function caml_convert_bytes_to_array(s){
    var a = new Uint8Array(s.l), b = s.c, l = b.length, i = 0;
    for(; i < l; i++) a[i] = b.charCodeAt(i);
    for(l = s.l; i < l; i++) a[i] = 0;
    s.c = a;
    s.t = 4;
    return a;
   }
   function caml_uint8_array_of_bytes(s){
    if(s.t !== 4) caml_convert_bytes_to_array(s);
    return s.c;
   }
   function caml_str_repeat(n, s){return s.repeat(n);}
   function caml_sub_uint8_array_to_jsbytes(a, i, len){
    var f = String.fromCharCode;
    if(i === 0 && len <= 4096 && len === a.length) return f.apply(null, a);
    var s = "";
    for(; 0 < len; i += 1024, len -= 1024)
     s += f.apply(null, a.subarray(i, i + Math.min(len, 1024)));
    return s;
   }
   function caml_convert_string_to_bytes(s){
    if(s.t === 2)
     s.c += caml_str_repeat(s.l - s.c.length, "\0");
    else
     s.c = caml_sub_uint8_array_to_jsbytes(s.c, 0, s.c.length);
    s.t = 0;
   }
   function jsoo_is_ascii(s){
    if(s.length < 24){
     for(var i = 0; i < s.length; i++) if(s.charCodeAt(i) > 127) return false;
     return true;
    }
    else
     return ! /[^\x00-\x7f]/.test(s);
   }
   class MlBytes{
      constructor(tag, contents, length){
       this.t = tag;
       this.c = contents;
       this.l = length;
      }
      toString(){
       switch(this.t){
         case 9:
         case 8:
          return this.c;
         case 4:
         case 2:
          caml_convert_string_to_bytes(this);
         case 0:
          if(jsoo_is_ascii(this.c)) this.t = 9; else this.t = 8;
          return this.c;
       }
      }
      toUtf16(){
       if(this.t === 9) return this.c;
       var a = caml_uint8_array_of_bytes(this);
       return jsoo_text_decoder.decode(a);
      }
      slice(){
       var content = this.t === 4 ? this.c.slice() : this.c;
       return new MlBytes(this.t, content, this.l);
      }
    }
   function MlChanid(id){this.id = id;}
   var jsoo_static_env = {};
   function jsoo_sys_getenv(n){
    if(jsoo_static_env[n]) return jsoo_static_env[n];
    var process = globalThis.process;
    if(process && process.env && process.env[n] !== undefined)
     return process.env[n];
    if(globalThis.jsoo_env && typeof globalThis.jsoo_env[n] === "string")
     return globalThis.jsoo_env[n];
   }
   var caml_record_backtrace_env_flag = 0;
   (function(){
      var r = jsoo_sys_getenv("OCAMLRUNPARAM");
      if(r !== undefined){
       var l = r.split(",");
       for(var i = 0; i < l.length; i++)
        if(l[i] === "b"){
         caml_record_backtrace_env_flag = 1;
         break;
        }
        else if(l[i].startsWith("b="))
         caml_record_backtrace_env_flag = + l[i].slice(2);
        else
         continue;
      }
     }
     ());
   var
    caml_record_backtrace_runtime_flag = caml_record_backtrace_env_flag,
    caml_global_data = [0];
   function caml_exn_with_js_backtrace(exn, force){
    if(! exn.js_error || force || exn[0] === 248)
     exn.js_error = new globalThis.Error("Js exception containing backtrace");
    return exn;
   }
   function caml_maybe_attach_backtrace(exn, force){
    return caml_record_backtrace_env_flag
            && caml_record_backtrace_runtime_flag
            ? caml_exn_with_js_backtrace(exn, force)
            : exn;
   }
   function caml_raise_with_arg(tag, arg){
    throw caml_maybe_attach_backtrace([0, tag, arg]);
   }
   var jsoo_text_encoder = new TextEncoder();
   function caml_subarray_to_jsbytes(a, i, len){
    var f = String.fromCharCode;
    if(i === 0 && len <= 4096 && len === a.length) return f.apply(null, a);
    var s = "";
    for(; 0 < len; i += 1024, len -= 1024)
     s += f.apply(null, a.slice(i, i + Math.min(len, 1024)));
    return s;
   }
   function caml_string_of_array(a){
    return caml_string_of_jsbytes(caml_subarray_to_jsbytes(a, 0, a.length));
   }
   function caml_string_of_jsstring(s){
    if(jsoo_is_ascii(s)) return caml_string_of_jsbytes(s);
    var a = jsoo_text_encoder.encode(s);
    return caml_string_of_array(a);
   }
   function caml_raise_sys_error(msg){
    caml_raise_with_arg
     (caml_global_data.Sys_error, caml_string_of_jsstring(msg));
   }
   function caml_raise_with_args(tag, args){
    throw caml_maybe_attach_backtrace([0, tag].concat(args));
   }
   var
    unix_error =
      ["E2BIG",
       "EACCES",
       "EAGAIN",
       "EBADF",
       "EBUSY",
       "ECHILD",
       "EDEADLK",
       "EDOM",
       "EEXIST",
       "EFAULT",
       "EFBIG",
       "EINTR",
       "EINVAL",
       "EIO",
       "EISDIR",
       "EMFILE",
       "EMLINK",
       "ENAMETOOLONG",
       "ENFILE",
       "ENODEV",
       "ENOENT",
       "ENOEXEC",
       "ENOLCK",
       "ENOMEM",
       "ENOSPC",
       "ENOSYS",
       "ENOTDIR",
       "ENOTEMPTY",
       "ENOTTY",
       "ENXIO",
       "EPERM",
       "EPIPE",
       "ERANGE",
       "EROFS",
       "ESPIPE",
       "ESRCH",
       "EXDEV",
       "EWOULDBLOCK",
       "EINPROGRESS",
       "EALREADY",
       "ENOTSOCK",
       "EDESTADDRREQ",
       "EMSGSIZE",
       "EPROTOTYPE",
       "ENOPROTOOPT",
       "EPROTONOSUPPORT",
       "ESOCKTNOSUPPORT",
       "EOPNOTSUPP",
       "EPFNOSUPPORT",
       "EAFNOSUPPORT",
       "EADDRINUSE",
       "EADDRNOTAVAIL",
       "ENETDOWN",
       "ENETUNREACH",
       "ENETRESET",
       "ECONNABORTED",
       "ECONNRESET",
       "ENOBUFS",
       "EISCONN",
       "ENOTCONN",
       "ESHUTDOWN",
       "ETOOMANYREFS",
       "ETIMEDOUT",
       "ECONNREFUSED",
       "EHOSTDOWN",
       "EHOSTUNREACH",
       "ELOOP",
       "EOVERFLOW"];
   function make_unix_err_args(code, syscall, path, errno){
    var variant = unix_error.indexOf(code);
    if(variant < 0){if(errno == null) errno = - 9999; variant = [0, - errno];}
    var
     args =
       [variant,
        caml_string_of_jsstring(syscall || ""),
        caml_string_of_jsstring(path || "")];
    return args;
   }
   var caml_named_values = {};
   function caml_named_value(nm){return caml_named_values[nm];}
   function caml_raise_system_error(raise_unix, code, cmd, msg, path){
    var unix_error = caml_named_value("Unix.Unix_error");
    if(raise_unix && unix_error)
     caml_raise_with_args(unix_error, make_unix_err_args(code, cmd, path));
    else{
     var msg = code + ": " + msg + ", " + cmd;
     if(path !== undefined) msg += " '" + path + "'";
     caml_raise_sys_error(msg);
    }
   }
   function caml_is_ml_bytes(s){return s instanceof MlBytes;}
   function caml_is_ml_string(s){
    return typeof s === "string" && ! /[^\x00-\xff]/.test(s);
   }
   function caml_bytes_of_array(a){
    if(! (a instanceof Uint8Array)) a = new Uint8Array(a);
    return new MlBytes(4, a, a.length);
   }
   function caml_bytes_of_jsbytes(s){return new MlBytes(0, s, s.length);}
   function caml_jsbytes_of_string(x){return x;}
   function caml_bytes_of_string(s){
    return caml_bytes_of_jsbytes(caml_jsbytes_of_string(s));
   }
   function caml_raise_no_such_file(name, raise_unix){
    caml_raise_system_error
     (raise_unix, "ENOENT", "no such file or directory", name);
   }
   function caml_bytes_of_uint8_array(a){return new MlBytes(4, a, a.length);}
   function caml_raise_with_string(tag, msg){
    caml_raise_with_arg(tag, caml_string_of_jsbytes(msg));
   }
   function caml_invalid_argument(msg){
    caml_raise_with_string(caml_global_data.Invalid_argument, msg);
   }
   function caml_create_bytes(len){
    if(len < 0) caml_invalid_argument("Bytes.create");
    return new MlBytes(len ? 2 : 9, "", len);
   }
   function caml_ml_bytes_length(s){return s.l;}
   function caml_blit_bytes(s1, i1, s2, i2, len){
    if(len === 0) return 0;
    if(i2 === 0 && (len >= s2.l || s2.t === 2 && len >= s2.c.length)){
     s2.c =
      s1.t === 4
       ? caml_sub_uint8_array_to_jsbytes(s1.c, i1, len)
       : i1 === 0 && s1.c.length === len ? s1.c : s1.c.slice(i1, i1 + len);
     s2.t = s2.c.length === s2.l ? 0 : 2;
    }
    else if(s2.t === 2 && i2 === s2.c.length){
     s2.c +=
      s1.t === 4
       ? caml_sub_uint8_array_to_jsbytes(s1.c, i1, len)
       : i1 === 0 && s1.c.length === len ? s1.c : s1.c.slice(i1, i1 + len);
     s2.t = s2.c.length === s2.l ? 0 : 2;
    }
    else{
     if(s2.t !== 4) caml_convert_bytes_to_array(s2);
     var c1 = s1.c, c2 = s2.c;
     if(s1.t === 4)
      if(i2 <= i1)
       for(var i = 0; i < len; i++) c2[i2 + i] = c1[i1 + i];
      else
       for(var i = len - 1; i >= 0; i--) c2[i2 + i] = c1[i1 + i];
     else{
      var l = Math.min(len, c1.length - i1);
      for(var i = 0; i < l; i++) c2[i2 + i] = c1.charCodeAt(i1 + i);
      for(; i < len; i++) c2[i2 + i] = 0;
     }
    }
    return 0;
   }
   function MlFile(){}
   class MlFakeFile extends MlFile {
      constructor(content){super(); this.data = content;}
      truncate(len){
       var old = this.data;
       this.data = caml_create_bytes(len | 0);
       caml_blit_bytes(old, 0, this.data, 0, len);
      }
      length(){return caml_ml_bytes_length(this.data);}
      write(offset, buf, pos, len){
       var clen = this.length();
       if(offset + len >= clen){
        var new_str = caml_create_bytes(offset + len), old_data = this.data;
        this.data = new_str;
        caml_blit_bytes(old_data, 0, this.data, 0, clen);
       }
       caml_blit_bytes
        (caml_bytes_of_uint8_array(buf), pos, this.data, offset, len);
       return len;
      }
      read(offset, buf, pos, len){
       var clen = this.length();
       if(offset + len >= clen) len = clen - offset;
       if(len){
        var data = caml_create_bytes(len | 0);
        caml_blit_bytes(this.data, offset, data, 0, len);
        buf.set(caml_uint8_array_of_bytes(data), pos);
       }
       return len;
      }
    }
   class MlFakeFd{
      constructor(name, file, flags){
       this.file = file;
       this.name = name;
       this.flags = flags;
       this.offset = 0;
       this.seeked = false;
      }
      err_closed(cmd, raise_unix){
       caml_raise_system_error
        (raise_unix, "EBADF", cmd, "bad file descriptor");
      }
      length(){
       if(this.file) return this.file.length();
       this.err_closed("length");
      }
      truncate(len, raise_unix){
       if(this.file){
        if(! (this.flags.wronly || this.flags.rdwr))
         caml_raise_system_error
          (raise_unix, "EINVAL", "truncate", "invalid argument");
        return this.file.truncate(len);
       }
       this.err_closed("truncate", raise_unix);
      }
      write(buf, pos, len, raise_unix){
       if(this.file && (this.flags.wronly || this.flags.rdwr)){
        var offset = this.offset;
        len = this.file.write(offset, buf, pos, len);
        this.offset += len;
        return len;
       }
       this.err_closed("write", raise_unix);
      }
      read(buf, pos, len, raise_unix){
       if(this.file && ! this.flags.wronly){
        var offset = this.offset;
        len = this.file.read(offset, buf, pos, len);
        this.offset += len;
        return len;
       }
       this.err_closed("read", raise_unix);
      }
      seek(offset, whence, raise_unix){
       switch(whence){
         case 0: break;
         case 1:
          offset += this.offset; break;
         case 2:
          offset += this.length(); break;
       }
       if(offset < 0)
        caml_raise_system_error
         (raise_unix, "EINVAL", "lseek", "invalid argument");
       this.offset = offset;
       this.seeked = true;
      }
      close(){
       if(! this.file) this.err_closed("close");
       this.file = undefined;
      }
      check_stream_semantics(cmd){
       if(! this.file) return this.err_closed(cmd, 1);
      }
    }
   class MlFakeDevice{
      constructor(root, f){
       this.content = {};
       this.root = root;
       this.lookupFun = f;
      }
      nm(name){return this.root + name;}
      create_dir_if_needed(name){
       var comp = name.split("/"), res = "";
       for(var i = 0; i < comp.length - 1; i++){
        res += comp[i] + "/";
        if(this.content[res]) continue;
        this.content[res] = Symbol("directory");
       }
      }
      slash(name){return /\/$/.test(name) ? name : name + "/";}
      lookup(name){
       if(! this.content[name] && this.lookupFun){
        var
         res =
           this.lookupFun
            (caml_string_of_jsstring(this.root),
             caml_string_of_jsstring(name));
        if(res !== 0){
         this.create_dir_if_needed(name);
         this.content[name] = new MlFakeFile(caml_bytes_of_string(res[1]));
        }
       }
      }
      exists(name, do_not_lookup){
       if(name === "") return 1;
       var name_slash = this.slash(name);
       if(this.content[name_slash]) return 1;
       if(! do_not_lookup) this.lookup(name);
       return this.content[name] ? 1 : 0;
      }
      isFile(name){return this.exists(name) && ! this.is_dir(name) ? 1 : 0;}
      rename_dir(oldname, newname){
       if(this.exists(newname)){
        if(! this.is_dir(newname))
         caml_raise_sys_error
          (this.nm(newname) + " : file already exists and is not a directory");
        if(this.readdir(newname).length > 0)
         caml_raise_sys_error(this.nm(newname) + " : directory not empty");
       }
       var old_slash = this.slash(oldname), new_slash = this.slash(newname);
       this.create_dir_if_needed(new_slash);
       for(const f of this.readdir(oldname))
        this.rename(old_slash + f, new_slash + f);
       delete this.content[old_slash];
      }
      rename(oldname, newname){
       if(! this.exists(oldname))
        caml_raise_sys_error
         (this.nm(oldname) + " : no such file or directory");
       if(this.is_dir(oldname))
        this.rename_dir(oldname, newname);
       else{
        if(this.exists(newname) && this.is_dir(newname))
         caml_raise_sys_error
          (this.nm(newname) + " : file already exists and is a directory");
        this.content[newname] = this.content[oldname];
        delete this.content[oldname];
       }
      }
      mkdir(name, _mode, raise_unix){
       if(this.exists(name))
        caml_raise_system_error
         (raise_unix, "EEXIST", "mkdir", "file already exists", this.nm(name));
       var parent = /^(.*)\/[^/]+/.exec(name);
       parent = parent?.[1] || "";
       if(! this.exists(parent))
        caml_raise_system_error
         (raise_unix,
          "ENOENT",
          "mkdir",
          "no such file or directory",
          this.nm(name));
       if(! this.is_dir(parent))
        caml_raise_system_error
         (raise_unix, "ENOTDIR", "mkdir", "not a directory", this.nm(name));
       this.create_dir_if_needed(this.slash(name));
      }
      rmdir(name, raise_unix){
       var
        name_slash = name === "" ? "" : this.slash(name),
        r = new RegExp("^" + name_slash + "([^/]+)");
       if(! this.exists(name))
        caml_raise_system_error
         (raise_unix,
          "ENOENT",
          "rmdir",
          "no such file or directory",
          this.nm(name));
       if(! this.is_dir(name))
        caml_raise_system_error
         (raise_unix, "ENOTDIR", "rmdir", "not a directory", this.nm(name));
       for(var n in this.content)
        if(n.match(r))
         caml_raise_system_error
          (raise_unix,
           "ENOTEMPTY",
           "rmdir",
           "directory not empty",
           this.nm(name));
       delete this.content[name_slash];
      }
      readdir(name){
       var name_slash = name === "" ? "" : this.slash(name);
       if(! this.exists(name))
        caml_raise_sys_error(name + ": No such file or directory");
       if(! this.is_dir(name))
        caml_raise_sys_error(name + ": Not a directory");
       var r = new RegExp("^" + name_slash + "([^/]+)"), seen = {}, a = [];
       for(var n in this.content){
        var m = n.match(r);
        if(m && ! seen[m[1]]){seen[m[1]] = true; a.push(m[1]);}
       }
       return a;
      }
      opendir(name, raise_unix){
       var a = this.readdir(name), c = false, i = 0;
       return {readSync:
               function(){
                if(c)
                 caml_raise_system_error
                  (raise_unix, "EBADF", "readdir", "bad file descriptor");
                if(i === a.length) return null;
                var entry = a[i];
                i++;
                return {name: entry};
               },
               closeSync:
               function(){
                if(c)
                 caml_raise_system_error
                  (raise_unix, "EBADF", "readdir", "bad file descriptor");
                c = true;
                a = [];
               }};
      }
      is_dir(name){
       if(name === "") return true;
       var name_slash = this.slash(name);
       return this.content[name_slash] ? 1 : 0;
      }
      unlink(name, raise_unix){
       if(! this.exists(name, true))
        caml_raise_system_error
         (raise_unix, "ENOENT", "unlink", "no such file or directory", name);
       delete this.content[name];
       return 0;
      }
      access(name, _flags, raise_unix){
       this.lookup(name);
       if(this.content[name]){
        if(this.is_dir(name))
         caml_raise_system_error
          (raise_unix,
           "EACCESS",
           "access",
           "permission denied,",
           this.nm(name));
       }
       else
        caml_raise_no_such_file(this.nm(name), raise_unix);
       return 0;
      }
      open(name, f, _perms, raise_unix){
       var file;
       this.lookup(name);
       if(this.content[name]){
        if(this.is_dir(name))
         caml_raise_system_error
          (raise_unix,
           "EISDIR",
           "open",
           "illegal operation on a directory",
           this.nm(name));
        if(f.create && f.excl)
         caml_raise_system_error
          (raise_unix, "EEXIST", "open", "file already exists", this.nm(name));
        file = this.content[name];
        if(f.truncate) file.truncate();
       }
       else if(f.create){
        this.create_dir_if_needed(name);
        this.content[name] = new MlFakeFile(caml_create_bytes(0));
        file = this.content[name];
       }
       else
        caml_raise_no_such_file(this.nm(name), raise_unix);
       return new MlFakeFd(this.nm(name), file, f);
      }
      truncate(name, len, raise_unix){
       var file;
       this.lookup(name);
       if(this.content[name]){
        if(this.is_dir(name))
         caml_raise_system_error
          (raise_unix,
           "EISDIR",
           "open",
           "illegal operation on a directory",
           this.nm(name));
        file = this.content[name];
        file.truncate(len);
       }
       else
        caml_raise_no_such_file(this.nm(name), raise_unix);
      }
      register(name, content){
       var file;
       if(this.content[name])
        caml_raise_sys_error(this.nm(name) + " : file already exists");
       if(caml_is_ml_bytes(content)) file = new MlFakeFile(content);
       if(caml_is_ml_string(content))
        file = new MlFakeFile(caml_bytes_of_string(content));
       else if(Array.isArray(content))
        file = new MlFakeFile(caml_bytes_of_array(content));
       else if(typeof content === "string")
        file = new MlFakeFile(caml_bytes_of_jsbytes(content));
       else if(content.toString){
        var
         bytes =
           caml_bytes_of_string(caml_string_of_jsstring(content.toString()));
        file = new MlFakeFile(bytes);
       }
       if(file){
        this.create_dir_if_needed(name);
        this.content[name] = file;
       }
       else
        caml_raise_sys_error
         (this.nm(name) + " : registering file with invalid content type");
      }
    }
   class MlFakeFd_out extends MlFakeFile {
      constructor(fd, flags){
       super(caml_create_bytes(0));
       this.log = function(_s){return 0;};
       if(fd === 1 && typeof console.log === "function")
        this.log = console.log;
       else if(fd === 2 && typeof console.error === "function")
        this.log = console.error;
       else if(typeof console.log === "function") this.log = console.log;
       this.flags = flags;
      }
      length(){return 0;}
      truncate(_len, raise_unix){
       caml_raise_system_error
        (raise_unix, "EINVAL", "ftruncate", "invalid argument");
      }
      write(buf, pos, len, raise_unix){
       var written = len;
       if(this.log){
        if
         (len > 0 && pos >= 0 && pos + len <= buf.length
          && buf[pos + len - 1] === 10)
         len--;
        var src = caml_create_bytes(len);
        caml_blit_bytes(caml_bytes_of_uint8_array(buf), pos, src, 0, len);
        this.log(src.toUtf16());
        return written;
       }
       caml_raise_system_error
        (raise_unix, "EBADF", "write", "bad file descriptor");
      }
      read(_buf, _pos, _len, raise_unix){
       caml_raise_system_error
        (raise_unix, "EBADF", "read", "bad file descriptor");
      }
      seek(_len, _whence, raise_unix){
       caml_raise_system_error(raise_unix, "ESPIPE", "lseek", "illegal seek");
      }
      close(){this.log = undefined;}
      check_stream_semantics(_cmd){}
    }
   var caml_int64_offset = Math.pow(2, - 24);
   function caml_raise_constant(tag){throw tag;}
   function caml_raise_zero_divide(){
    caml_raise_constant(caml_global_data.Division_by_zero);
   }
   class MlInt64{
      constructor(lo, mi, hi){
       this.lo = lo & 0xffffff;
       this.mi = mi & 0xffffff;
       this.hi = hi & 0xffff;
       this.caml_custom = "_j";
      }
      static UNSIGNED_MAX = new MlInt64(0xffffff, 0xffffff, 0xffff);
      static SIGNED_MAX = new MlInt64(0xffffff, 0xffffff, 0x7fff);
      static SIGNED_MIN = new MlInt64(0x000000, 0x000000, 0x8000);
      slice(){return new MlInt64(this.lo, this.mi, this.hi);}
      ucompare(x){
       if(this.hi > x.hi) return 1;
       if(this.hi < x.hi) return - 1;
       if(this.mi > x.mi) return 1;
       if(this.mi < x.mi) return - 1;
       if(this.lo > x.lo) return 1;
       if(this.lo < x.lo) return - 1;
       return 0;
      }
      compare(x){
       var hi = this.hi << 16, xhi = x.hi << 16;
       if(hi > xhi) return 1;
       if(hi < xhi) return - 1;
       if(this.mi > x.mi) return 1;
       if(this.mi < x.mi) return - 1;
       if(this.lo > x.lo) return 1;
       if(this.lo < x.lo) return - 1;
       return 0;
      }
      neg(){
       var
        lo = - this.lo,
        mi = - this.mi + (lo >> 24),
        hi = - this.hi + (mi >> 24);
       return new MlInt64(lo, mi, hi);
      }
      add(x){
       var
        lo = this.lo + x.lo,
        mi = this.mi + x.mi + (lo >> 24),
        hi = this.hi + x.hi + (mi >> 24);
       return new MlInt64(lo, mi, hi);
      }
      sub(x){
       var
        lo = this.lo - x.lo,
        mi = this.mi - x.mi + (lo >> 24),
        hi = this.hi - x.hi + (mi >> 24);
       return new MlInt64(lo, mi, hi);
      }
      mul(x){
       var
        lo = this.lo * x.lo,
        mi = (lo * caml_int64_offset | 0) + this.mi * x.lo + this.lo * x.mi,
        hi =
          (mi * caml_int64_offset | 0) + this.hi * x.lo + this.mi * x.mi
          + this.lo * x.hi;
       return new MlInt64(lo, mi, hi);
      }
      isZero(){return (this.lo | this.mi | this.hi) === 0;}
      isNeg(){return this.hi << 16 < 0;}
      and(x){
       return new MlInt64(this.lo & x.lo, this.mi & x.mi, this.hi & x.hi);
      }
      or(x){
       return new MlInt64(this.lo | x.lo, this.mi | x.mi, this.hi | x.hi);
      }
      xor(x){
       return new MlInt64(this.lo ^ x.lo, this.mi ^ x.mi, this.hi ^ x.hi);
      }
      shift_left(s){
       s = s & 63;
       if(s === 0) return this;
       if(s < 24)
        return new
                MlInt64
                (this.lo << s,
                 this.mi << s | this.lo >> 24 - s,
                 this.hi << s | this.mi >> 24 - s);
       if(s < 48)
        return new
                MlInt64
                (0, this.lo << s - 24, this.mi << s - 24 | this.lo >> 48 - s);
       return new MlInt64(0, 0, this.lo << s - 48);
      }
      shift_right_unsigned(s){
       s = s & 63;
       if(s === 0) return this;
       if(s < 24)
        return new
                MlInt64
                (this.lo >> s | this.mi << 24 - s,
                 this.mi >> s | this.hi << 24 - s,
                 this.hi >> s);
       if(s < 48)
        return new
                MlInt64
                (this.mi >> s - 24 | this.hi << 48 - s, this.hi >> s - 24, 0);
       return new MlInt64(this.hi >> s - 48, 0, 0);
      }
      shift_right(s){
       s = s & 63;
       if(s === 0) return this;
       var h = this.hi << 16 >> 16;
       if(s < 24)
        return new
                MlInt64
                (this.lo >> s | this.mi << 24 - s,
                 this.mi >> s | h << 24 - s,
                 this.hi << 16 >> s >>> 16);
       var sign = this.hi << 16 >> 31;
       if(s < 48)
        return new
                MlInt64
                (this.mi >> s - 24 | this.hi << 48 - s,
                 this.hi << 16 >> s - 24 >> 16,
                 sign & 0xffff);
       return new MlInt64(this.hi << 16 >> s - 32, sign, sign);
      }
      lsl1(){
       this.hi = this.hi << 1 | this.mi >> 23;
       this.mi = (this.mi << 1 | this.lo >> 23) & 0xffffff;
       this.lo = this.lo << 1 & 0xffffff;
      }
      lsr1(){
       this.lo = (this.lo >>> 1 | this.mi << 23) & 0xffffff;
       this.mi = (this.mi >>> 1 | this.hi << 23) & 0xffffff;
       this.hi = this.hi >>> 1;
      }
      udivmod(x){
       var
        offset = 0,
        modulus = this.slice(),
        divisor = x.slice(),
        quotient = new MlInt64(0, 0, 0);
       while(modulus.ucompare(divisor) > 0){offset++; divisor.lsl1();}
       while(offset >= 0){
        offset--;
        quotient.lsl1();
        if(modulus.ucompare(divisor) >= 0){
         quotient.lo++;
         modulus = modulus.sub(divisor);
        }
        divisor.lsr1();
       }
       return {quotient: quotient, modulus: modulus};
      }
      div(y){
       var x = this;
       if(y.isZero()) caml_raise_zero_divide();
       var sign = x.hi ^ y.hi;
       if(x.hi & 0x8000) x = x.neg();
       if(y.hi & 0x8000) y = y.neg();
       var q = x.udivmod(y).quotient;
       if(sign & 0x8000) q = q.neg();
       return q;
      }
      mod(y){
       var x = this;
       if(y.isZero()) caml_raise_zero_divide();
       var sign = x.hi;
       if(x.hi & 0x8000) x = x.neg();
       if(y.hi & 0x8000) y = y.neg();
       var r = x.udivmod(y).modulus;
       if(sign & 0x8000) r = r.neg();
       return r;
      }
      toInt(){return this.lo | this.mi << 24;}
      toFloat(){
       return (this.hi << 16) * Math.pow(2, 32) + this.mi * Math.pow(2, 24)
              + this.lo;
      }
      toArray(){
       return [this.hi >> 8,
               this.hi & 0xff,
               this.mi >> 16,
               this.mi >> 8 & 0xff,
               this.mi & 0xff,
               this.lo >> 16,
               this.lo >> 8 & 0xff,
               this.lo & 0xff];
      }
      lo32(){return this.lo | (this.mi & 0xff) << 24;}
      hi32(){return this.mi >>> 8 & 0xffff | this.hi << 16;}
    }
   class MlMutex{constructor(){this.locked = false;}}
   class MlNat{
      constructor(x){
       this.data = new Int32Array(x);
       this.length = this.data.length + 2;
       this.caml_custom = "_nat";
      }
    }
   function caml_raise_nodejs_error(err, raise_unix, cmd){
    var unix_error = caml_named_value("Unix.Unix_error");
    if(raise_unix && unix_error){
     var
      args =
        make_unix_err_args(err.code, cmd || err.syscall, err.path, err.errno);
     caml_raise_with_args(unix_error, args);
    }
    else
     caml_raise_sys_error(err.toString());
   }
   function caml_int64_of_float(x){
    if(x < 0) x = Math.ceil(x);
    return new
            MlInt64
            (x & 0xffffff,
             Math.floor(x * caml_int64_offset) & 0xffffff,
             Math.floor(x * caml_int64_offset * caml_int64_offset) & 0xffff);
   }
   function fs_node_stats_from_js(js_stats, large){
    var file_kind;
    if(js_stats.isFile())
     file_kind = 0;
    else if(js_stats.isDirectory())
     file_kind = 1;
    else if(js_stats.isCharacterDevice())
     file_kind = 2;
    else if(js_stats.isBlockDevice())
     file_kind = 3;
    else if(js_stats.isSymbolicLink())
     file_kind = 4;
    else if(js_stats.isFIFO())
     file_kind = 5;
    else if(js_stats.isSocket()) file_kind = 6;
    return [0,
            js_stats.dev,
            js_stats.ino | 0,
            file_kind,
            js_stats.mode,
            js_stats.nlink,
            js_stats.uid,
            js_stats.gid,
            js_stats.rdev,
            large ? caml_int64_of_float(js_stats.size) : js_stats.size | 0,
            js_stats.atimeMs / 1000,
            js_stats.mtimeMs / 1000,
            js_stats.ctimeMs / 1000];
   }
   function caml_ml_string_length(s){return s.length;}
   function caml_string_unsafe_get(s, i){return s.charCodeAt(i);}
   function caml_uint8_array_of_string(s){
    var l = caml_ml_string_length(s), a = new Uint8Array(l), i = 0;
    for(; i < l; i++) a[i] = caml_string_unsafe_get(s, i);
    return a;
   }
   function caml_bytes_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_bytes_unsafe_set(s, i, c){
    c &= 0xff;
    if(s.t !== 4){
     if(i === s.c.length){
      s.c += String.fromCharCode(c);
      if(i + 1 === s.l) s.t = 0;
      return 0;
     }
     caml_convert_bytes_to_array(s);
    }
    s.c[i] = c;
    return 0;
   }
   function caml_bytes_set(s, i, c){
    if(i >>> 0 >= s.l) caml_bytes_bound_error();
    return caml_bytes_unsafe_set(s, i, c);
   }
   class MlNodeFd extends MlFile {
      constructor(fd, flags){
       super();
       this.fs = require("node:fs");
       this.fd = fd;
       this.flags = flags;
       try{
        var stats = this.fs.fstatSync(fd);
        flags.noSeek =
         stats.isCharacterDevice() || stats.isFIFO() || stats.isSocket();
       }
       catch(err){flags.noSeek = true;}
       this.offset = this.flags.append ? stats.size : 0;
       this.seeked = false;
      }
      truncate(len, raise_unix){
       try{
        this.fs.ftruncateSync(this.fd, len | 0);
        if(this.offset > len) this.offset = len;
       }
       catch(err){caml_raise_nodejs_error(err, raise_unix);}
      }
      length(){
       try{return this.fs.fstatSync(this.fd).size;}
       catch(err){caml_raise_sys_error(err.toString());}
      }
      write(buf, buf_offset, len, raise_unix){
       try{
        if(this.flags.noSeek || ! this.seeked)
         var written = this.fs.writeSync(this.fd, buf, buf_offset, len);
        else
         var
          written =
            this.fs.writeSync(this.fd, buf, buf_offset, len, this.offset);
        this.offset += written;
       }
       catch(err){caml_raise_nodejs_error(err, raise_unix);}
       return written;
      }
      read(a, buf_offset, len, raise_unix){
       try{
        if(this.flags.noSeek || ! this.seeked)
         var read = this.fs.readSync(this.fd, a, buf_offset, len);
        else
         var
          read = this.fs.readSync(this.fd, a, buf_offset, len, this.offset);
        this.offset += read;
        return read;
       }
       catch(err){caml_raise_nodejs_error(err, raise_unix);}
      }
      seek(offset, whence, raise_unix){
       if(this.flags.noSeek)
        caml_raise_system_error(raise_unix, "ESPIPE", "lseek", "illegal seek");
       switch(whence){
         case 0: break;
         case 1:
          offset += this.offset; break;
         case 2:
          offset += this.length(); break;
       }
       if(offset < 0)
        caml_raise_system_error
         (raise_unix, "EINVAL", "lseek", "invalid argument");
       this.offset = offset;
       this.seeked = true;
       return this.offset;
      }
      stat(large){
       try{
        var js_stats = this.fs.fstatSync(this.fd);
        return fs_node_stats_from_js(js_stats, large);
       }
       catch(err){caml_raise_nodejs_error(err, 1);}
      }
      chmod(perms){
       try{this.fs.fchmodSync(this.fd, perms); return 0;}
       catch(err){caml_raise_nodejs_error(err, 1);}
      }
      sync(){
       try{this.fs.fsyncSync(this.fd); return 0;}
       catch(err){caml_raise_nodejs_error(err, 1);}
      }
      close(raise_unix){
       try{this.fs.closeSync(this.fd); return 0;}
       catch(err){caml_raise_nodejs_error(err, raise_unix);}
      }
      check_stream_semantics(cmd){
       try{var js_stats = this.fs.fstatSync(this.fd);}
       catch(err){caml_raise_nodejs_error(err, 1, cmd);}
       if
        (!
         (js_stats.isFile() || js_stats.isCharacterDevice()
         || js_stats.isFIFO()
         || js_stats.isSocket()))
        caml_raise_system_error(1, "EINVAL", cmd, "invalid argument");
      }
    }
   class MlNodeDevice{
      constructor(root){this.fs = require("node:fs"); this.root = root;}
      nm(name){return this.root + name;}
      exists(name){
       try{return this.fs.existsSync(this.nm(name)) ? 1 : 0;}
       catch(err){return 0;}
      }
      isFile(name){
       try{return this.fs.statSync(this.nm(name)).isFile() ? 1 : 0;}
       catch(err){caml_raise_sys_error(err.toString());}
      }
      mkdir(name, mode, raise_unix){
       try{this.fs.mkdirSync(this.nm(name), {mode: mode}); return 0;}
       catch(err){caml_raise_nodejs_error(err, raise_unix);}
      }
      rmdir(name, raise_unix){
       try{this.fs.rmdirSync(this.nm(name)); return 0;}
       catch(err){caml_raise_nodejs_error(err, raise_unix);}
      }
      readdir(name, raise_unix){
       try{return this.fs.readdirSync(this.nm(name));}
       catch(err){caml_raise_nodejs_error(err, raise_unix);}
      }
      is_dir(name){
       try{return this.fs.statSync(this.nm(name)).isDirectory() ? 1 : 0;}
       catch(err){caml_raise_sys_error(err.toString());}
      }
      unlink(name, raise_unix){
       try{this.fs.unlinkSync(this.nm(name)); return 0;}
       catch(err){caml_raise_nodejs_error(err, raise_unix);}
      }
      utimes(name, atime, mtime, raise_unix){
       try{
        if(atime === 0 && mtime === 0){
         atime = new Date().getTime() / 1000;
         mtime = atime;
        }
        this.fs.utimesSync(this.nm(name), atime, mtime);
        return 0;
       }
       catch(err){caml_raise_nodejs_error(err, raise_unix);}
      }
      truncate(name, len, raise_unix){
       try{this.fs.truncateSync(this.nm(name), len | 0); return 0;}
       catch(err){caml_raise_nodejs_error(err, raise_unix);}
      }
      access(name, f, raise_unix){
       var consts = require("node:fs").constants, res = 0;
       for(var key in f)
        switch(key){
          case "r":
           res |= consts.R_OK; break;
          case "w":
           res |= consts.W_OK; break;
          case "x":
           res |=
            globalThis.process?.platform === "win32"
             ? consts.R_OK
             : consts.X_OK;
           break;
          case "f":
           res |= consts.F_OK; break;
        }
       try{this.fs.accessSync(this.nm(name), res); return 0;}
       catch(err){caml_raise_nodejs_error(err, raise_unix);}
      }
      open(name, f, perms, raise_unix){
       var consts = require("node:fs").constants, res = 0;
       for(var key in f)
        switch(key){
          case "rdonly":
           res |= consts.O_RDONLY; break;
          case "wronly":
           res |= consts.O_WRONLY; break;
          case "rdwr":
           res |= consts.O_RDWR; break;
          case "append":
           res |= consts.O_APPEND; break;
          case "create":
           res |= consts.O_CREAT; break;
          case "truncate":
           res |= consts.O_TRUNC; break;
          case "excl":
           res |= consts.O_EXCL; break;
          case "binary":
           res |= consts.O_BINARY; break;
          case "text":
           res |= consts.O_TEXT; break;
          case "nonblock":
           res |= consts.O_NONBLOCK; break;
          case "noctty":
           res |= consts.O_NOCTTY; break;
          case "dsync":
           res |= consts.O_DSYNC; break;
          case "sync":
           res |= consts.O_SYNC; break;
        }
       try{
        var fd = this.fs.openSync(this.nm(name), res, perms);
        return new MlNodeFd(fd, f);
       }
       catch(err){caml_raise_nodejs_error(err, raise_unix);}
      }
      slash(name){return /\/$/.test(name) ? name : name + "/";}
      rename(o, n, raise_unix){
       if(globalThis.process?.platform === "win32")
        try{
         var
          target = this.nm(n),
          source = this.nm(o),
          target_stats,
          source_stats;
         if
          ((target_stats = this.fs.statSync(target, {throwIfNoEntry: false}))
           &&
            (source_stats = this.fs.statSync(source, {throwIfNoEntry: false}))
           && source_stats.isDirectory())
          if(target_stats.isDirectory()){
           if(! this.slash(target).startsWith(this.slash(source)))
            try{this.fs.rmdirSync(target);}catch{}
          }
          else{
           var
            err =
              new
               Error
               (`ENOTDIR: not a directory, rename '${source}' -> '${target}'`);
           throw Object.assign
                  (err,
                   {errno: - 20,
                    code: "ENOTDIR",
                    syscall: "rename",
                    path: target});
          }
         this.fs.renameSync(this.nm(o), this.nm(n));
        }
        catch(err){caml_raise_nodejs_error(err, raise_unix);}
       else
        try{this.fs.renameSync(this.nm(o), this.nm(n));}
        catch(err){caml_raise_nodejs_error(err, raise_unix);}
      }
      stat(name, large, raise_unix){
       try{
        var js_stats = this.fs.statSync(this.nm(name));
        return fs_node_stats_from_js(js_stats, large);
       }
       catch(err){caml_raise_nodejs_error(err, raise_unix);}
      }
      lstat(name, large, raise_unix){
       try{
        var js_stats = this.fs.lstatSync(this.nm(name));
        return fs_node_stats_from_js(js_stats, large);
       }
       catch(err){caml_raise_nodejs_error(err, raise_unix);}
      }
      chmod(name, perms, raise_unix){
       try{this.fs.chmodSync(this.nm(name), perms); return 0;}
       catch(err){caml_raise_nodejs_error(err, raise_unix);}
      }
      link(target, path, raise_unix){
       try{this.fs.linkSync(this.nm(target), this.nm(path)); return 0;}
       catch(err){caml_raise_nodejs_error(err, raise_unix);}
      }
      symlink(to_dir, target, path, raise_unix){
       try{
        this.fs.symlinkSync
         (target,
          this.nm(path),
          to_dir === 0 ? null : to_dir[1] ? "dir" : "file");
        return 0;
       }
       catch(err){caml_raise_nodejs_error(err, raise_unix);}
      }
      readlink(name, raise_unix){
       try{
        var link = this.fs.readlinkSync(this.nm(name), "utf8");
        return caml_string_of_jsstring(link);
       }
       catch(err){caml_raise_nodejs_error(err, raise_unix);}
      }
      opendir(name, raise_unix){
       try{return this.fs.opendirSync(this.nm(name));}
       catch(err){caml_raise_nodejs_error(err, raise_unix);}
      }
    }
   class MlObjectTable{
      constructor(){this.objs = []; this.lookup = new globalThis.Map();}
      store(v){this.lookup.set(v, this.objs.length); this.objs.push(v);}
      recall(v){
       var i = this.lookup.get(v);
       return i === undefined ? undefined : this.objs.length - i;
      }
    }
   var
    caml_packFloat16 =
      function(){
        const INVERSE_OF_EPSILON = 1 / Number.EPSILON;
        function roundTiesToEven(num){
         return num + INVERSE_OF_EPSILON - INVERSE_OF_EPSILON;
        }
        const
         FLOAT16_MIN_VALUE = 6.103515625e-5,
         FLOAT16_MAX_VALUE = 65504,
         FLOAT16_EPSILON = 0.0009765625,
         FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE = FLOAT16_EPSILON * FLOAT16_MIN_VALUE,
         FLOAT16_EPSILON_DEVIDED_BY_EPSILON =
           FLOAT16_EPSILON * INVERSE_OF_EPSILON;
        function roundToFloat16(num){
         const number = + num;
         if(! Number.isFinite(number) || number === 0) return number;
         const sign = number > 0 ? 1 : - 1, absolute = Math.abs(number);
         if(absolute < FLOAT16_MIN_VALUE)
          return sign
                 *
                  roundTiesToEven
                   (absolute / FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE)
                 * FLOAT16_EPSILON_MULTIPLIED_BY_FLOAT16_MIN_VALUE;
         const
          temp = (1 + FLOAT16_EPSILON_DEVIDED_BY_EPSILON) * absolute,
          result = temp - (temp - absolute);
         if(result > FLOAT16_MAX_VALUE || Number.isNaN(result))
          return sign * Number.POSITIVE_INFINITY;
         return sign * result;
        }
        const
         baseTable = new Uint16Array(512),
         shiftTable = new Uint8Array(512);
        for(let i = 0; i < 256; ++i){
         const e = i - 127;
         if(e < - 24){
          baseTable[i] = 0x0000;
          baseTable[i | 0x100] = 0x8000;
          shiftTable[i] = 24;
          shiftTable[i | 0x100] = 24;
         }
         else if(e < - 14){
          baseTable[i] = 0x0400 >> - e - 14;
          baseTable[i | 0x100] = 0x0400 >> - e - 14 | 0x8000;
          shiftTable[i] = - e - 1;
          shiftTable[i | 0x100] = - e - 1;
         }
         else if(e <= 15){
          baseTable[i] = e + 15 << 10;
          baseTable[i | 0x100] = e + 15 << 10 | 0x8000;
          shiftTable[i] = 13;
          shiftTable[i | 0x100] = 13;
         }
         else if(e < 128){
          baseTable[i] = 0x7c00;
          baseTable[i | 0x100] = 0xfc00;
          shiftTable[i] = 24;
          shiftTable[i | 0x100] = 24;
         }
         else{
          baseTable[i] = 0x7c00;
          baseTable[i | 0x100] = 0xfc00;
          shiftTable[i] = 13;
          shiftTable[i | 0x100] = 13;
         }
        }
        const
         buffer = new ArrayBuffer(4),
         floatView = new Float32Array(buffer),
         uint32View = new Uint32Array(buffer);
        return function(num){
         floatView[0] = roundToFloat16(num);
         const f = uint32View[0], e = f >> 23 & 0x1ff;
         return baseTable[e] + ((f & 0x007fffff) >> shiftTable[e]);};
       }
       (),
    caml_unpackFloat16 =
      function(){
        var
         pow = Math.pow,
         EXP_MASK16 = 31,
         SIGNIFICAND_MASK16 = 1023,
         MIN_SUBNORMAL16 = pow(2, - 24),
         SIGNIFICAND_DENOM16 = 0.0009765625;
        return function(bytes){
         var
          sign = bytes >>> 15,
          exponent = bytes >>> 10 & EXP_MASK16,
          significand = bytes & SIGNIFICAND_MASK16;
         if(exponent === EXP_MASK16)
          return significand === 0
                  ? sign
                    === 0
                    ? Number.POSITIVE_INFINITY
                    : Number.NEGATIVE_INFINITY
                  : Number.NaN;
         if(exponent === 0)
          return significand
                 * (sign === 0 ? MIN_SUBNORMAL16 : - MIN_SUBNORMAL16);
         var
          r =
            pow(2, exponent - 15)
            *
             (sign === 0
               ? 1 + significand * SIGNIFICAND_DENOM16
               : - 1 - significand * SIGNIFICAND_DENOM16);
         return r;};
       }
       ();
   function caml_int64_create_lo_hi(lo, hi){
    return new
            MlInt64
            (lo & 0xffffff,
             lo >>> 24 & 0xff | (hi & 0xffff) << 8,
             hi >>> 16 & 0xffff);
   }
   function caml_int64_hi32(v){return v.hi32();}
   function caml_int64_lo32(v){return v.lo32();}
   function caml_array_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   var caml_ba_custom_name = "_bigarr02";
   class Ml_Bigarray{
      constructor(kind, layout, dims, buffer){
       this.kind = kind;
       this.layout = layout;
       this.dims = dims;
       this.data = buffer;
       this.caml_custom = caml_ba_custom_name;
      }
      offset(arg){
       var ofs = 0;
       if(typeof arg === "number") arg = [arg];
       if(! Array.isArray(arg))
        caml_invalid_argument("bigarray.js: invalid offset");
       if(this.dims.length !== arg.length)
        caml_invalid_argument("Bigarray.get/set: bad number of dimensions");
       if(this.layout === 0)
        for(var i = 0; i < this.dims.length; i++){
         if(arg[i] < 0 || arg[i] >= this.dims[i]) caml_array_bound_error();
         ofs = ofs * this.dims[i] + arg[i];
        }
       else
        for(var i = this.dims.length - 1; i >= 0; i--){
         if(arg[i] < 1 || arg[i] > this.dims[i]) caml_array_bound_error();
         ofs = ofs * this.dims[i] + (arg[i] - 1);
        }
       return ofs;
      }
      get(ofs){
       switch(this.kind){
         case 7:
          var l = this.data[ofs * 2 + 0], h = this.data[ofs * 2 + 1];
          return caml_int64_create_lo_hi(l, h);
         case 10:
         case 11:
          var r = this.data[ofs * 2 + 0], i = this.data[ofs * 2 + 1];
          return [254, r, i];
         case 13:
          return caml_unpackFloat16(this.data[ofs]);
         default: return this.data[ofs];
       }
      }
      set(ofs, v){
       switch(this.kind){
         case 7:
          this.data[ofs * 2 + 0] = caml_int64_lo32(v);
          this.data[ofs * 2 + 1] = caml_int64_hi32(v);
          break;
         case 10:
         case 11:
          this.data[ofs * 2 + 0] = v[1]; this.data[ofs * 2 + 1] = v[2]; break;
         case 13:
          this.data[ofs] = caml_packFloat16(v); break;
         default: this.data[ofs] = v; break;
       }
       return 0;
      }
      fill(v){
       switch(this.kind){
         case 7:
          var a = caml_int64_lo32(v), b = caml_int64_hi32(v);
          if(a === b)
           this.data.fill(a);
          else
           for(var i = 0; i < this.data.length; i++)
            this.data[i] = i % 2 === 0 ? a : b;
          break;
         case 10:
         case 11:
          var im = v[1], re = v[2];
          if(im === re)
           this.data.fill(im);
          else
           for(var i = 0; i < this.data.length; i++)
            this.data[i] = i % 2 === 0 ? im : re;
          break;
         case 13:
          this.data.fill(caml_packFloat16(v)); break;
         default: this.data.fill(v); break;
       }
      }
      compare(b, total){
       if(this.layout !== b.layout || this.kind !== b.kind){
        var k1 = this.kind | this.layout << 8, k2 = b.kind | b.layout << 8;
        return k2 - k1;
       }
       if(this.dims.length !== b.dims.length)
        return b.dims.length - this.dims.length;
       for(var i = 0; i < this.dims.length; i++)
        if(this.dims[i] !== b.dims[i])
         return this.dims[i] < b.dims[i] ? - 1 : 1;
       switch(this.kind){
         case 0:
         case 1:
         case 10:
         case 11:
          var x, y;
          for(var i = 0; i < this.data.length; i++){
           x = this.data[i];
           y = b.data[i];
           if(x < y) return - 1;
           if(x > y) return 1;
           if(x !== y){
            if(! total) return Number.NaN;
            if(! Number.isNaN(x)) return 1;
            if(! Number.isNaN(y)) return - 1;
           }
          }
          break;
         case 7:
          for(var i = 0; i < this.data.length; i += 2){
           if(this.data[i + 1] < b.data[i + 1]) return - 1;
           if(this.data[i + 1] > b.data[i + 1]) return 1;
           if(this.data[i] >>> 0 < b.data[i] >>> 0) return - 1;
           if(this.data[i] >>> 0 > b.data[i] >>> 0) return 1;
          }
          break;
         case 13:
          for(var i = 0; i < this.data.length; i++){
           var
            aa = caml_unpackFloat16(this.data[i]),
            bb = caml_unpackFloat16(b.data[i]);
           if(aa < bb) return - 1;
           if(aa > bb) return 1;
          }
          break;
         case 2:
         case 3:
         case 4:
         case 5:
         case 6:
         case 8:
         case 9:
         case 12:
          for(var i = 0; i < this.data.length; i++){
           if(this.data[i] < b.data[i]) return - 1;
           if(this.data[i] > b.data[i]) return 1;
          }
          break;
       }
       return 0;
      }
    }
   class Ml_Bigarray_c_1_1 extends Ml_Bigarray {
      offset(arg){
       if(typeof arg !== "number")
        if(Array.isArray(arg) && arg.length === 1)
         arg = arg[0];
        else
         caml_invalid_argument("Ml_Bigarray_c_1_1.offset");
       if(arg < 0 || arg >= this.dims[0]) caml_array_bound_error();
       return arg;
      }
      get(ofs){return this.data[ofs];}
      set(ofs, v){this.data[ofs] = v; return 0;}
      fill(v){this.data.fill(v); return 0;}
    }
   function caml_string_of_uint8_array(a){
    return caml_sub_uint8_array_to_jsbytes(a, 0, a.length);
   }
   class UInt8ArrayReader{
      constructor(s, i){this.s = s; this.i = i;}
      read8u(){return this.s[this.i++];}
      read8s(){return this.s[this.i++] << 24 >> 24;}
      read16u(){
       var s = this.s, i = this.i;
       this.i = i + 2;
       return s[i] << 8 | s[i + 1];
      }
      read16s(){
       var s = this.s, i = this.i;
       this.i = i + 2;
       return s[i] << 24 >> 16 | s[i + 1];
      }
      read32u(){
       var s = this.s, i = this.i;
       this.i = i + 4;
       return (s[i] << 24 | s[i + 1] << 16 | s[i + 2] << 8 | s[i + 3]) >>> 0;
      }
      read32s(){
       var s = this.s, i = this.i;
       this.i = i + 4;
       return s[i] << 24 | s[i + 1] << 16 | s[i + 2] << 8 | s[i + 3];
      }
      readstr(len){
       var i = this.i;
       this.i = i + len;
       return caml_string_of_uint8_array(this.s.subarray(i, i + len));
      }
      readuint8array(len){
       var i = this.i;
       this.i = i + len;
       return this.s.subarray(i, i + len);
      }
    }
   function incr_nat(nat, ofs, len, carry_in){
    var carry = carry_in;
    for(var i = 0; i < len; i++){
     var x = (nat.data[ofs + i] >>> 0) + carry;
     nat.data[ofs + i] = x | 0;
     if(x === x >>> 0){carry = 0; break;} else carry = 1;
    }
    return carry;
   }
   function add_nat(nat1, ofs1, len1, nat2, ofs2, len2, carry_in){
    var carry = carry_in;
    for(var i = 0; i < len2; i++){
     var
      x = (nat1.data[ofs1 + i] >>> 0) + (nat2.data[ofs2 + i] >>> 0) + carry;
     nat1.data[ofs1 + i] = x;
     if(x === x >>> 0) carry = 0; else carry = 1;
    }
    return incr_nat(nat1, ofs1 + len2, len1 - len2, carry);
   }
   function caml_ba_get_size(dims){
    var n_dims = dims.length, size = 1;
    for(var i = 0; i < n_dims; i++){
     if(dims[i] < 0)
      caml_invalid_argument("Bigarray.create: negative dimension");
     size = size * dims[i];
    }
    return size;
   }
   function caml_ba_get_size_per_element(kind){
    switch(kind){case 7:case 10:case 11: return 2;default: return 1;
    }
   }
   function caml_ba_create_unsafe(kind, layout, dims, data){
    var size_per_element = caml_ba_get_size_per_element(kind);
    if(caml_ba_get_size(dims) * size_per_element !== data.length)
     caml_invalid_argument("length doesn't match dims");
    if
     (layout === 0 && dims.length === 1 && size_per_element === 1
      && kind !== 13)
     return new Ml_Bigarray_c_1_1(kind, layout, dims, data);
    return new Ml_Bigarray(kind, layout, dims, data);
   }
   function bigstring_of_array_buffer(ab){
    var ta = new Uint8Array(ab);
    return caml_ba_create_unsafe(12, 0, [ta.length], ta);
   }
   function bigstring_of_typed_array(ba){
    var
     ta =
       new
        Uint8Array
        (ba.buffer, ba.byteOffset, ba.length * ba.BYTES_PER_ELEMENT);
    return caml_ba_create_unsafe(12, 0, [ta.length], ta);
   }
   function bigstring_to_array_buffer(bs){return bs.data.buffer;}
   function bigstring_to_typed_array(bs){return bs.data;}
   var
    blake2b =
      function(){
        function ADD64AA(v, a, b){
         const o0 = v[a] + v[b];
         let o1 = v[a + 1] + v[b + 1];
         if(o0 >= 0x100000000) o1++;
         v[a] = o0;
         v[a + 1] = o1;
        }
        function ADD64AC(v, a, b0, b1){
         let o0 = v[a] + b0;
         if(b0 < 0) o0 += 0x100000000;
         let o1 = v[a + 1] + b1;
         if(o0 >= 0x100000000) o1++;
         v[a] = o0;
         v[a + 1] = o1;
        }
        function B2B_GET32(arr, i){
         return arr[i] ^ arr[i + 1] << 8 ^ arr[i + 2] << 16 ^ arr[i + 3] << 24;
        }
        function B2B_G(a, b, c, d, ix, iy){
         const x0 = m[ix], x1 = m[ix + 1], y0 = m[iy], y1 = m[iy + 1];
         ADD64AA(v, a, b);
         ADD64AC(v, a, x0, x1);
         let xor0 = v[d] ^ v[a], xor1 = v[d + 1] ^ v[a + 1];
         v[d] = xor1;
         v[d + 1] = xor0;
         ADD64AA(v, c, d);
         xor0 = v[b] ^ v[c];
         xor1 = v[b + 1] ^ v[c + 1];
         v[b] = xor0 >>> 24 ^ xor1 << 8;
         v[b + 1] = xor1 >>> 24 ^ xor0 << 8;
         ADD64AA(v, a, b);
         ADD64AC(v, a, y0, y1);
         xor0 = v[d] ^ v[a];
         xor1 = v[d + 1] ^ v[a + 1];
         v[d] = xor0 >>> 16 ^ xor1 << 16;
         v[d + 1] = xor1 >>> 16 ^ xor0 << 16;
         ADD64AA(v, c, d);
         xor0 = v[b] ^ v[c];
         xor1 = v[b + 1] ^ v[c + 1];
         v[b] = xor1 >>> 31 ^ xor0 << 1;
         v[b + 1] = xor0 >>> 31 ^ xor1 << 1;
        }
        const
         BLAKE2B_IV32 =
           new
            Uint32Array
            ([0xf3bcc908,
              0x6a09e667,
              0x84caa73b,
              0xbb67ae85,
              0xfe94f82b,
              0x3c6ef372,
              0x5f1d36f1,
              0xa54ff53a,
              0xade682d1,
              0x510e527f,
              0x2b3e6c1f,
              0x9b05688c,
              0xfb41bd6b,
              0x1f83d9ab,
              0x137e2179,
              0x5be0cd19]),
         SIGMA8 =
           [0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            14,
            10,
            4,
            8,
            9,
            15,
            13,
            6,
            1,
            12,
            0,
            2,
            11,
            7,
            5,
            3,
            11,
            8,
            12,
            0,
            5,
            2,
            15,
            13,
            10,
            14,
            3,
            6,
            7,
            1,
            9,
            4,
            7,
            9,
            3,
            1,
            13,
            12,
            11,
            14,
            2,
            6,
            5,
            10,
            4,
            0,
            15,
            8,
            9,
            0,
            5,
            7,
            2,
            4,
            10,
            15,
            14,
            1,
            11,
            12,
            6,
            8,
            3,
            13,
            2,
            12,
            6,
            10,
            0,
            11,
            8,
            3,
            4,
            13,
            7,
            5,
            15,
            14,
            1,
            9,
            12,
            5,
            1,
            15,
            14,
            13,
            4,
            10,
            0,
            7,
            6,
            3,
            9,
            2,
            8,
            11,
            13,
            11,
            7,
            14,
            12,
            1,
            3,
            9,
            5,
            0,
            15,
            4,
            8,
            6,
            2,
            10,
            6,
            15,
            14,
            9,
            11,
            3,
            0,
            8,
            12,
            2,
            13,
            7,
            1,
            4,
            10,
            5,
            10,
            2,
            8,
            4,
            7,
            6,
            1,
            5,
            15,
            11,
            9,
            14,
            3,
            12,
            13,
            0,
            0,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            9,
            10,
            11,
            12,
            13,
            14,
            15,
            14,
            10,
            4,
            8,
            9,
            15,
            13,
            6,
            1,
            12,
            0,
            2,
            11,
            7,
            5,
            3],
         SIGMA82 = new Uint8Array(SIGMA8.map(function(x){return x * 2;})),
         v = new Uint32Array(32),
         m = new Uint32Array(32);
        function blake2bCompress(ctx, last){
         let i = 0;
         for(i = 0; i < 16; i++){
          v[i] = ctx.h[i];
          v[i + 16] = BLAKE2B_IV32[i];
         }
         v[24] = v[24] ^ ctx.t;
         v[25] = v[25] ^ ctx.t / 0x100000000;
         if(last){v[28] = ~ v[28]; v[29] = ~ v[29];}
         for(i = 0; i < 32; i++) m[i] = B2B_GET32(ctx.b, 4 * i);
         for(i = 0; i < 12; i++){
          B2B_G(0, 8, 16, 24, SIGMA82[i * 16 + 0], SIGMA82[i * 16 + 1]);
          B2B_G(2, 10, 18, 26, SIGMA82[i * 16 + 2], SIGMA82[i * 16 + 3]);
          B2B_G(4, 12, 20, 28, SIGMA82[i * 16 + 4], SIGMA82[i * 16 + 5]);
          B2B_G(6, 14, 22, 30, SIGMA82[i * 16 + 6], SIGMA82[i * 16 + 7]);
          B2B_G(0, 10, 20, 30, SIGMA82[i * 16 + 8], SIGMA82[i * 16 + 9]);
          B2B_G(2, 12, 22, 24, SIGMA82[i * 16 + 10], SIGMA82[i * 16 + 11]);
          B2B_G(4, 14, 16, 26, SIGMA82[i * 16 + 12], SIGMA82[i * 16 + 13]);
          B2B_G(6, 8, 18, 28, SIGMA82[i * 16 + 14], SIGMA82[i * 16 + 15]);
         }
         for(i = 0; i < 16; i++) ctx.h[i] = ctx.h[i] ^ v[i] ^ v[i + 16];
        }
        const
         parameterBlock =
           new
            Uint8Array
            ([0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0]);
        function blake2bInit(outlen, key){
         if(outlen === 0 || outlen > 64)
          throw new Error("Illegal output length, expected 0 < length <= 64");
         if(key.length > 64)
          throw new
                 Error
                 ("Illegal key, expected Uint8Array with 0 < length <= 64");
         const
          ctx =
            {b: new Uint8Array(128),
             h: new Uint32Array(16),
             t: 0,
             c: 0,
             outlen: outlen};
         parameterBlock.fill(0);
         parameterBlock[0] = outlen;
         parameterBlock[1] = key.length;
         parameterBlock[2] = 1;
         parameterBlock[3] = 1;
         for(let i = 0; i < 16; i++)
          ctx.h[i] = BLAKE2B_IV32[i] ^ B2B_GET32(parameterBlock, i * 4);
         if(key.length > 0){blake2bUpdate(ctx, key); ctx.c = 128;}
         return ctx;
        }
        function blake2bUpdate(ctx, input){
         for(let i = 0; i < input.length; i++){
          if(ctx.c === 128){
           ctx.t += ctx.c;
           blake2bCompress(ctx, false);
           ctx.c = 0;
          }
          ctx.b[ctx.c++] = input[i];
         }
        }
        function blake2bFinal(ctx){
         ctx.t += ctx.c;
         while(ctx.c < 128) ctx.b[ctx.c++] = 0;
         blake2bCompress(ctx, true);
         const out = new Uint8Array(ctx.outlen);
         for(let i = 0; i < ctx.outlen; i++)
          out[i] = ctx.h[i >> 2] >> 8 * (i & 3);
         return out;
        }
        return {Init: blake2bInit, Update: blake2bUpdate, Final: blake2bFinal};
       }
       ();
   function blit_nat(nat1, ofs1, nat2, ofs2, len){
    for(var i = 0; i < len; i++) nat1.data[ofs1 + i] = nat2.data[ofs2 + i];
    return 0;
   }
   var
    caml_MD5Transform =
      function(){
        function add(x, y){return x + y | 0;}
        function xx(q, a, b, x, s, t){
         a = add(add(a, q), add(x, t));
         return add(a << s | a >>> 32 - s, b);
        }
        function ff(a, b, c, d, x, s, t){
         return xx(b & c | ~ b & d, a, b, x, s, t);
        }
        function gg(a, b, c, d, x, s, t){
         return xx(b & d | c & ~ d, a, b, x, s, t);
        }
        function hh(a, b, c, d, x, s, t){return xx(b ^ c ^ d, a, b, x, s, t);}
        function ii(a, b, c, d, x, s, t){
         return xx(c ^ (b | ~ d), a, b, x, s, t);
        }
        return function(w, buffer){
         var a = w[0], b = w[1], c = w[2], d = w[3];
         a = ff(a, b, c, d, buffer[0], 7, 0xd76aa478);
         d = ff(d, a, b, c, buffer[1], 12, 0xe8c7b756);
         c = ff(c, d, a, b, buffer[2], 17, 0x242070db);
         b = ff(b, c, d, a, buffer[3], 22, 0xc1bdceee);
         a = ff(a, b, c, d, buffer[4], 7, 0xf57c0faf);
         d = ff(d, a, b, c, buffer[5], 12, 0x4787c62a);
         c = ff(c, d, a, b, buffer[6], 17, 0xa8304613);
         b = ff(b, c, d, a, buffer[7], 22, 0xfd469501);
         a = ff(a, b, c, d, buffer[8], 7, 0x698098d8);
         d = ff(d, a, b, c, buffer[9], 12, 0x8b44f7af);
         c = ff(c, d, a, b, buffer[10], 17, 0xffff5bb1);
         b = ff(b, c, d, a, buffer[11], 22, 0x895cd7be);
         a = ff(a, b, c, d, buffer[12], 7, 0x6b901122);
         d = ff(d, a, b, c, buffer[13], 12, 0xfd987193);
         c = ff(c, d, a, b, buffer[14], 17, 0xa679438e);
         b = ff(b, c, d, a, buffer[15], 22, 0x49b40821);
         a = gg(a, b, c, d, buffer[1], 5, 0xf61e2562);
         d = gg(d, a, b, c, buffer[6], 9, 0xc040b340);
         c = gg(c, d, a, b, buffer[11], 14, 0x265e5a51);
         b = gg(b, c, d, a, buffer[0], 20, 0xe9b6c7aa);
         a = gg(a, b, c, d, buffer[5], 5, 0xd62f105d);
         d = gg(d, a, b, c, buffer[10], 9, 0x02441453);
         c = gg(c, d, a, b, buffer[15], 14, 0xd8a1e681);
         b = gg(b, c, d, a, buffer[4], 20, 0xe7d3fbc8);
         a = gg(a, b, c, d, buffer[9], 5, 0x21e1cde6);
         d = gg(d, a, b, c, buffer[14], 9, 0xc33707d6);
         c = gg(c, d, a, b, buffer[3], 14, 0xf4d50d87);
         b = gg(b, c, d, a, buffer[8], 20, 0x455a14ed);
         a = gg(a, b, c, d, buffer[13], 5, 0xa9e3e905);
         d = gg(d, a, b, c, buffer[2], 9, 0xfcefa3f8);
         c = gg(c, d, a, b, buffer[7], 14, 0x676f02d9);
         b = gg(b, c, d, a, buffer[12], 20, 0x8d2a4c8a);
         a = hh(a, b, c, d, buffer[5], 4, 0xfffa3942);
         d = hh(d, a, b, c, buffer[8], 11, 0x8771f681);
         c = hh(c, d, a, b, buffer[11], 16, 0x6d9d6122);
         b = hh(b, c, d, a, buffer[14], 23, 0xfde5380c);
         a = hh(a, b, c, d, buffer[1], 4, 0xa4beea44);
         d = hh(d, a, b, c, buffer[4], 11, 0x4bdecfa9);
         c = hh(c, d, a, b, buffer[7], 16, 0xf6bb4b60);
         b = hh(b, c, d, a, buffer[10], 23, 0xbebfbc70);
         a = hh(a, b, c, d, buffer[13], 4, 0x289b7ec6);
         d = hh(d, a, b, c, buffer[0], 11, 0xeaa127fa);
         c = hh(c, d, a, b, buffer[3], 16, 0xd4ef3085);
         b = hh(b, c, d, a, buffer[6], 23, 0x04881d05);
         a = hh(a, b, c, d, buffer[9], 4, 0xd9d4d039);
         d = hh(d, a, b, c, buffer[12], 11, 0xe6db99e5);
         c = hh(c, d, a, b, buffer[15], 16, 0x1fa27cf8);
         b = hh(b, c, d, a, buffer[2], 23, 0xc4ac5665);
         a = ii(a, b, c, d, buffer[0], 6, 0xf4292244);
         d = ii(d, a, b, c, buffer[7], 10, 0x432aff97);
         c = ii(c, d, a, b, buffer[14], 15, 0xab9423a7);
         b = ii(b, c, d, a, buffer[5], 21, 0xfc93a039);
         a = ii(a, b, c, d, buffer[12], 6, 0x655b59c3);
         d = ii(d, a, b, c, buffer[3], 10, 0x8f0ccc92);
         c = ii(c, d, a, b, buffer[10], 15, 0xffeff47d);
         b = ii(b, c, d, a, buffer[1], 21, 0x85845dd1);
         a = ii(a, b, c, d, buffer[8], 6, 0x6fa87e4f);
         d = ii(d, a, b, c, buffer[15], 10, 0xfe2ce6e0);
         c = ii(c, d, a, b, buffer[6], 15, 0xa3014314);
         b = ii(b, c, d, a, buffer[13], 21, 0x4e0811a1);
         a = ii(a, b, c, d, buffer[4], 6, 0xf7537e82);
         d = ii(d, a, b, c, buffer[11], 10, 0xbd3af235);
         c = ii(c, d, a, b, buffer[2], 15, 0x2ad7d2bb);
         b = ii(b, c, d, a, buffer[9], 21, 0xeb86d391);
         w[0] = add(a, w[0]);
         w[1] = add(b, w[1]);
         w[2] = add(c, w[2]);
         w[3] = add(d, w[3]);};
       }
       ();
   function caml_MD5Final(ctx){
    var in_buf = ctx.len & 0x3f;
    ctx.b8[in_buf] = 0x80;
    in_buf++;
    if(in_buf > 56){
     for(var j = in_buf; j < 64; j++) ctx.b8[j] = 0;
     caml_MD5Transform(ctx.w, ctx.b32);
     for(var j = 0; j < 56; j++) ctx.b8[j] = 0;
    }
    else
     for(var j = in_buf; j < 56; j++) ctx.b8[j] = 0;
    ctx.b32[14] = ctx.len << 3;
    ctx.b32[15] = ctx.len >> 29 & 0x1fffffff;
    caml_MD5Transform(ctx.w, ctx.b32);
    var t = new Uint8Array(16);
    for(var i = 0; i < 4; i++)
     for(var j = 0; j < 4; j++) t[i * 4 + j] = ctx.w[i] >> 8 * j & 0xff;
    return t;
   }
   function caml_MD5Init(){
    var
     buffer = new ArrayBuffer(64),
     b32 = new Uint32Array(buffer),
     b8 = new Uint8Array(buffer);
    return {len: 0,
            w:
            new Uint32Array([0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476]),
            b32: b32,
            b8: b8};
   }
   function caml_MD5Update(ctx, input, input_len){
    var in_buf = ctx.len & 0x3f, input_pos = 0;
    ctx.len += input_len;
    if(in_buf){
     var missing = 64 - in_buf;
     if(input_len < missing){
      ctx.b8.set(input.subarray(0, input_len), in_buf);
      return;
     }
     ctx.b8.set(input.subarray(0, missing), in_buf);
     caml_MD5Transform(ctx.w, ctx.b32);
     input_len -= missing;
     input_pos += missing;
    }
    while(input_len >= 64){
     ctx.b8.set(input.subarray(input_pos, input_pos + 64), 0);
     caml_MD5Transform(ctx.w, ctx.b32);
     input_len -= 64;
     input_pos += 64;
    }
    if(input_len)
     ctx.b8.set(input.subarray(input_pos, input_pos + input_len), 0);
   }
   function caml_acosh_float(x){return Math.acosh(x);}
   function caml_call_gen(f, args){
    var
     n = f.l >= 0 ? f.l : f.l = f.length,
     argsLen = args.length,
     d = n - argsLen;
    if(d === 0)
     return f(...args);
    else if(d < 0){
     var g = f(...args.slice(0, n));
     if(typeof g !== "function") return g;
     return caml_call_gen(g, args.slice(n));
    }
    else{
     switch(d){
       case 1:
        {
         var
          g =
            function(x){
             var nargs = new Array(argsLen + 1);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             return f(...nargs);
            };
         break;
        }
       case 2:
        {
         var
          g =
            function(x, y){
             var nargs = new Array(argsLen + 2);
             for(var i = 0; i < argsLen; i++) nargs[i] = args[i];
             nargs[argsLen] = x;
             nargs[argsLen + 1] = y;
             return f(...nargs);
            };
         break;
        }
       default:
        var
         g =
           function(...extra_args){
            if(extra_args.length === 0) extra_args = [undefined];
            return caml_call_gen(f, args.concat(extra_args));
           };
     }
     g.l = d;
     return g;
    }
   }
   function caml_alloc_dummy_infix(){
    return function f(x){return caml_call_gen(f.fun, [x]);};
   }
   function caml_alloc_stack(_hv, _hx, _hf){return 0;}
   var
    caml_argv =
      function(){
        var process = globalThis.process, main = "a.out", args = [];
        if(process?.argv?.length > 1){
         var argv = process.argv;
         main = argv[1];
         args = argv.slice(2);
        }
        var p = caml_string_of_jsstring(main), args2 = [0, p];
        for(var i = 0; i < args.length; i++)
         args2.push(caml_string_of_jsstring(args[i]));
        return args2;
       }
       ();
   function caml_array_append(a1, a2){
    var l1 = a1.length, l2 = a2.length, l = l1 + l2 - 1, a = new Array(l);
    a[0] = 0;
    var i = 1, j = 1;
    for(; i < l1; i++) a[i] = a1[i];
    for(; i < l; i++, j++) a[i] = a2[j];
    return a;
   }
   function caml_array_blit(a1, i1, a2, i2, len){
    if(i2 <= i1)
     for(var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];
    else
     for(var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];
    return 0;
   }
   function caml_array_concat(l){
    var a = [0];
    while(l !== 0){
     var b = l[1];
     for(var i = 1; i < b.length; i++) a.push(b[i]);
     l = l[2];
    }
    return a;
   }
   function caml_array_create_float(len){
    if(len >>> 0 >= (0x7fffffff / 8 | 0)) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 254;
    for(var i = 1; i < len; i++) b[i] = 0;
    return b;
   }
   function caml_array_fill(array, ofs, len, v){
    for(var i = 0; i < len; i++) array[ofs + i + 1] = v;
    return 0;
   }
   function caml_array_get(array, index){
    if(index < 0 || index >= array.length - 1) caml_array_bound_error();
    return array[index + 1];
   }
   function caml_array_make(len, init){
    if(len >>> 0 >= (0x7fffffff / 4 | 0)) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 0;
    for(var i = 1; i < len; i++) b[i] = init;
    return b;
   }
   function caml_array_of_bytes(x){return caml_uint8_array_of_bytes(x);}
   function caml_array_of_string(x){return caml_uint8_array_of_string(x);}
   function caml_array_set(array, index, newval){
    if(index < 0 || index >= array.length - 1) caml_array_bound_error();
    array[index + 1] = newval;
    return 0;
   }
   function caml_array_sub(a, i, len){
    var a2 = new Array(len + 1);
    a2[0] = 0;
    for(var i2 = 1, i1 = i + 1; i2 <= len; i2++, i1++) a2[i2] = a[i1];
    return a2;
   }
   function caml_asinh_float(x){return Math.asinh(x);}
   function caml_atanh_float(x){return Math.atanh(x);}
   function caml_atomic_cas(ref, o, n){
    if(ref[1] === o){ref[1] = n; return 1;}
    return 0;
   }
   function caml_atomic_exchange(ref, v){
    var r = ref[1];
    ref[1] = v;
    return r;
   }
   function caml_atomic_fetch_add(ref, i){
    var old = ref[1];
    ref[1] += i;
    return old;
   }
   function caml_atomic_load(ref){return ref[1];}
   function caml_atomic_make_contended(a){return [0, a];}
   function caml_ba_blit(src, dst){
    if(dst.dims.length !== src.dims.length)
     caml_invalid_argument("Bigarray.blit: dimension mismatch");
    for(var i = 0; i < dst.dims.length; i++)
     if(dst.dims[i] !== src.dims[i])
      caml_invalid_argument("Bigarray.blit: dimension mismatch");
    dst.data.set(src.data);
    return 0;
   }
   function caml_ba_change_layout(ba, layout){
    if(ba.layout === layout) return ba;
    var new_dims = [];
    for(var i = 0; i < ba.dims.length; i++)
     new_dims[i] = ba.dims[ba.dims.length - i - 1];
    return caml_ba_create_unsafe(ba.kind, layout, new_dims, ba.data);
   }
   function caml_ba_compare(a, b, total){return a.compare(b, total);}
   function caml_ba_create_buffer(kind, size){
    var view;
    switch(kind){
      case 0:
       view = Float32Array; break;
      case 1:
       view = Float64Array; break;
      case 2:
       view = Int8Array; break;
      case 3:
       view = Uint8Array; break;
      case 4:
       view = Int16Array; break;
      case 5:
       view = Uint16Array; break;
      case 6:
       view = Int32Array; break;
      case 7:
       view = Int32Array; break;
      case 8:
       view = Int32Array; break;
      case 9:
       view = Int32Array; break;
      case 10:
       view = Float32Array; break;
      case 11:
       view = Float64Array; break;
      case 12:
       view = Uint8Array; break;
      case 13:
       view = Uint16Array; break;
    }
    if(! view) caml_invalid_argument("Bigarray.create: unsupported kind");
    var data = new view(size * caml_ba_get_size_per_element(kind));
    return data;
   }
   function caml_js_from_array(a){return a.slice(1);}
   function caml_ba_create(kind, layout, dims_ml){
    var
     dims = caml_js_from_array(dims_ml),
     data = caml_ba_create_buffer(kind, caml_ba_get_size(dims));
    return caml_ba_create_unsafe(kind, layout, dims, data);
   }
   function caml_ba_create_from(data1, data2, _jstyp, kind, layout, dims){
    if(data2 || caml_ba_get_size_per_element(kind) === 2)
     caml_invalid_argument
      ("caml_ba_create_from: use return caml_ba_create_unsafe");
    return caml_ba_create_unsafe(kind, layout, dims, data1);
   }
   var jsoo_dataview = new DataView(new ArrayBuffer(8));
   function caml_int32_float_of_bits(x){
    jsoo_dataview.setUint32(0, x, true);
    return jsoo_dataview.getFloat32(0, true);
   }
   function caml_int64_of_bytes(a){
    return new
            MlInt64
            (a[7] << 0 | a[6] << 8 | a[5] << 16,
             a[4] << 0 | a[3] << 8 | a[2] << 16,
             a[1] << 0 | a[0] << 8);
   }
   function caml_int64_float_of_bits(x){
    var lo = x.lo, mi = x.mi, hi = x.hi;
    jsoo_dataview.setUint32(0, lo | mi << 24, true);
    jsoo_dataview.setUint32(4, mi >>> 8 | hi << 16, true);
    return jsoo_dataview.getFloat64(0, true);
   }
   function caml_failwith(msg){
    if(! caml_global_data.Failure)
     caml_global_data.Failure = [248, caml_string_of_jsbytes("Failure"), - 3];
    caml_raise_with_string(caml_global_data.Failure, msg);
   }
   function caml_ba_deserialize(reader, sz, name){
    var num_dims = reader.read32s();
    if(num_dims < 0 || num_dims > 16)
     caml_failwith("input_value: wrong number of bigarray dimensions");
    var
     tag = reader.read32s(),
     kind = tag & 0xff,
     layout = tag >> 8 & 1,
     dims = [];
    if(name === "_bigarr02")
     for(var i = 0; i < num_dims; i++){
      var size_dim = reader.read16u();
      if(size_dim === 0xffff){
       var size_dim_hi = reader.read32u(), size_dim_lo = reader.read32u();
       if(size_dim_hi !== 0)
        caml_failwith("input_value: bigarray dimension overflow in 32bit");
       size_dim = size_dim_lo;
      }
      dims.push(size_dim);
     }
    else
     for(var i = 0; i < num_dims; i++) dims.push(reader.read32u());
    var
     size = caml_ba_get_size(dims),
     data = caml_ba_create_buffer(kind, size),
     ba = caml_ba_create_unsafe(kind, layout, dims, data);
    switch(kind){
      case 2:
       for(var i = 0; i < size; i++) data[i] = reader.read8s(); break;
      case 3:
      case 12:
       for(var i = 0; i < size; i++) data[i] = reader.read8u(); break;
      case 4:
       for(var i = 0; i < size; i++) data[i] = reader.read16s(); break;
      case 5:
       for(var i = 0; i < size; i++) data[i] = reader.read16u(); break;
      case 6:
       for(var i = 0; i < size; i++) data[i] = reader.read32s(); break;
      case 8:
      case 9:
       var sixty = reader.read8u();
       if(sixty)
        caml_failwith
         ("input_value: cannot read bigarray with 64-bit OCaml ints");
       for(var i = 0; i < size; i++) data[i] = reader.read32s();
       break;
      case 7:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var int64 = caml_int64_of_bytes(t);
        ba.set(i, int64);
       }
       break;
      case 1:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var f = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, f);
       }
       break;
      case 13:
       for(var i = 0; i < size; i++) data[i] = reader.read16u(); break;
      case 0:
       for(var i = 0; i < size; i++){
        var f = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, f);
       }
       break;
      case 10:
       for(var i = 0; i < size; i++){
        var
         re = caml_int32_float_of_bits(reader.read32s()),
         im = caml_int32_float_of_bits(reader.read32s());
        ba.set(i, [254, re, im]);
       }
       break;
      case 11:
       var t = new Array(8);
       for(var i = 0; i < size; i++){
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var re = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        for(var j = 0; j < 8; j++) t[j] = reader.read8u();
        var im = caml_int64_float_of_bits(caml_int64_of_bytes(t));
        ba.set(i, [254, re, im]);
       }
       break;
    }
    sz[0] = (4 + num_dims) * 4;
    return caml_ba_create_unsafe(kind, layout, dims, data);
   }
   function caml_ba_dim(ba, i){
    if(i < 0 || i >= ba.dims.length) caml_invalid_argument("Bigarray.dim");
    return ba.dims[i];
   }
   function caml_ba_dim_1(ba){return caml_ba_dim(ba, 0);}
   function caml_ba_dim_2(ba){return caml_ba_dim(ba, 1);}
   function caml_ba_dim_3(ba){return caml_ba_dim(ba, 2);}
   function caml_ba_fill(ba, v){ba.fill(v); return 0;}
   function caml_ba_kind_of_typed_array(ta){
    var kind;
    if(ta instanceof Float32Array)
     kind = 0;
    else if(ta instanceof Float64Array)
     kind = 1;
    else if(ta instanceof Int8Array)
     kind = 2;
    else if(ta instanceof Uint8Array)
     kind = 3;
    else if(ta instanceof Uint8ClampedArray)
     kind = 3;
    else if(ta instanceof Int16Array)
     kind = 4;
    else if(ta instanceof Uint16Array)
     kind = 5;
    else if(ta instanceof Int32Array)
     kind = 6;
    else if(ta instanceof Uint32Array)
     kind = 6;
    else
     caml_invalid_argument("caml_ba_kind_of_typed_array: unsupported kind");
    return kind;
   }
   function caml_ba_from_typed_array(ta){
    var
     kind = caml_ba_kind_of_typed_array(ta),
     ta =
       ta instanceof Uint32Array
        ? new Int32Array(ta.buffer, ta.byteOffset, ta.length)
        : ta;
    return caml_ba_create_unsafe(kind, 0, [ta.length], ta);
   }
   function caml_ba_get_1(ba, i0){return ba.get(ba.offset(i0));}
   function caml_ba_get_2(ba, i0, i1){return ba.get(ba.offset([i0, i1]));}
   function caml_ba_get_3(ba, i0, i1, i2){
    return ba.get(ba.offset([i0, i1, i2]));
   }
   function caml_ba_get_generic(ba, i){
    var ofs = ba.offset(caml_js_from_array(i));
    return ba.get(ofs);
   }
   function caml_mul(a, b){return Math.imul(a, b);}
   function caml_hash_mix_int(h, d){
    d = caml_mul(d, 0xcc9e2d51 | 0);
    d = d << 15 | d >>> 32 - 15;
    d = caml_mul(d, 0x1b873593);
    h ^= d;
    h = h << 13 | h >>> 32 - 13;
    return (h + (h << 2) | 0) + (0xe6546b64 | 0) | 0;
   }
   function caml_hash_mix_float16(hash, d){
    if((d & 0x7c00) === 0x7c00 && (d & 0x03ff) !== 0)
     d = 0x7c01;
    else if(d === 0x8000) d = 0;
    return caml_hash_mix_int(hash, d);
   }
   function caml_int32_bits_of_float(x){
    jsoo_dataview.setFloat32(0, x, true);
    return jsoo_dataview.getUint32(0, true) | 0;
   }
   function caml_hash_mix_float32(hash, v){
    var i = caml_int32_bits_of_float(v);
    if((i & 0x7f800000) === 0x7f800000 && (i & 0x7fffff) !== 0)
     i = 0x7f800001;
    else if(i === (0x80000000 | 0)) i = 0;
    hash = caml_hash_mix_int(hash, i);
    return hash;
   }
   function caml_int64_create_lo_mi_hi(lo, mi, hi){return new MlInt64(lo, mi, hi);
   }
   function caml_int64_bits_of_float(x){
    jsoo_dataview.setFloat64(0, x, true);
    var
     lo32 = jsoo_dataview.getUint32(0, true),
     hi32 = jsoo_dataview.getUint32(4, true),
     r1 = lo32 & 0xffffff,
     r2 = lo32 >>> 24 | hi32 << 8 & 0xffffff,
     r3 = hi32 >>> 16 & 0xffff;
    return caml_int64_create_lo_mi_hi(r1, r2, r3);
   }
   function caml_hash_mix_float(hash, v0){
    var
     i64 = caml_int64_bits_of_float(v0),
     l = caml_int64_lo32(i64),
     h = caml_int64_hi32(i64);
    if((h & 0x7ff00000) === 0x7ff00000 && (l | h & 0xfffff) !== 0){h = 0x7ff00000; l = 0x00000001;}
    else if(h === (0x80000000 | 0) && l === 0) h = 0;
    hash = caml_hash_mix_int(hash, l);
    hash = caml_hash_mix_int(hash, h);
    return hash;
   }
   function caml_ba_hash(ba){
    var num_elts = caml_ba_get_size(ba.dims), h = 0;
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       if(num_elts > 256) num_elts = 256;
       var w = 0, i = 0;
       for(i = 0; i + 4 <= num_elts; i += 4){
        w =
         ba.data[i + 0] & 0xff | (ba.data[i + 1] & 0xff) << 8
         | (ba.data[i + 2] & 0xff) << 16
         | ba.data[i + 3] << 24;
        h = caml_hash_mix_int(h, w);
       }
       w = 0;
       switch(num_elts & 3){
         case 3:
          w = ba.data[i + 2] << 16;
         case 2:
          w |= ba.data[i + 1] << 8;
         case 1:
          w |= ba.data[i + 0]; h = caml_hash_mix_int(h, w);
       }
       break;
      case 4:
      case 5:
       if(num_elts > 128) num_elts = 128;
       var w = 0, i = 0;
       for(i = 0; i + 2 <= num_elts; i += 2){
        w = ba.data[i + 0] & 0xffff | ba.data[i + 1] << 16;
        h = caml_hash_mix_int(h, w);
       }
       if((num_elts & 1) !== 0) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 6:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 8:
      case 9:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 7:
       if(num_elts > 32) num_elts = 32;
       num_elts *= 2;
       for(var i = 0; i < num_elts; i++) h = caml_hash_mix_int(h, ba.data[i]);
       break;
      case 10:
       num_elts *= 2;
      case 0:
       if(num_elts > 64) num_elts = 64;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float32(h, ba.data[i]);
       break;
      case 11:
       num_elts *= 2;
      case 1:
       if(num_elts > 32) num_elts = 32;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float(h, ba.data[i]);
       break;
      case 13:
       if(num_elts > 128) num_elts = 128;
       for(var i = 0; i < num_elts; i++)
        h = caml_hash_mix_float16(h, ba.data[i]);
       break;
    }
    return h;
   }
   function caml_ba_init(){return 0;}
   function caml_ba_kind(ba){return ba.kind;}
   function caml_ba_layout(ba){return ba.layout;}
   function caml_ba_map_file(_vfd, _kind, _layout, _shared, _dims, _pos){caml_failwith("caml_ba_map_file not implemented");
   }
   function caml_ba_map_file_bytecode(argv, _argn){
    return caml_ba_map_file
            (argv[0], argv[1], argv[2], argv[3], argv[4], argv[5]);
   }
   function caml_ba_num_dims(ba){return ba.dims.length;}
   function caml_ba_reshape(ba, vind){
    vind = caml_js_from_array(vind);
    var new_dim = [], num_dims = vind.length;
    if(num_dims < 0 || num_dims > 16)
     caml_invalid_argument("Bigarray.reshape: bad number of dimensions");
    var num_elts = 1;
    for(var i = 0; i < num_dims; i++){
     new_dim[i] = vind[i];
     if(new_dim[i] < 0)
      caml_invalid_argument("Bigarray.reshape: negative dimension");
     num_elts = num_elts * new_dim[i];
    }
    var size = caml_ba_get_size(ba.dims);
    if(num_elts !== size)
     caml_invalid_argument("Bigarray.reshape: size mismatch");
    return caml_ba_create_unsafe(ba.kind, ba.layout, new_dim, ba.data);
   }
   function caml_int64_to_bytes(x){return x.toArray();}
   function caml_ba_serialize(writer, ba, sz){
    writer.write(32, ba.dims.length);
    writer.write(32, ba.kind | ba.layout << 8);
    if(ba.caml_custom === "_bigarr02")
     for(var i = 0; i < ba.dims.length; i++)
      if(ba.dims[i] < 0xffff)
       writer.write(16, ba.dims[i]);
      else{
       writer.write(16, 0xffff);
       writer.write(32, 0);
       writer.write(32, ba.dims[i]);
      }
    else
     for(var i = 0; i < ba.dims.length; i++) writer.write(32, ba.dims[i]);
    switch(ba.kind){
      case 2:
      case 3:
      case 12:
       for(var i = 0; i < ba.data.length; i++) writer.write(8, ba.data[i]);
       break;
      case 4:
      case 5:
       for(var i = 0; i < ba.data.length; i++) writer.write(16, ba.data[i]);
       break;
      case 6:
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 8:
      case 9:
       writer.write(8, 0);
       for(var i = 0; i < ba.data.length; i++) writer.write(32, ba.data[i]);
       break;
      case 7:
       for(var i = 0; i < ba.data.length / 2; i++){
        var b = caml_int64_to_bytes(ba.get(i));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 1:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(ba.get(i)));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
      case 13:
       for(var i = 0; i < ba.data.length; i++) writer.write(16, ba.data[i]);
       break;
      case 0:
       for(var i = 0; i < ba.data.length; i++){
        var b = caml_int32_bits_of_float(ba.get(i));
        writer.write(32, b);
       }
       break;
      case 10:
       for(var i = 0; i < ba.data.length / 2; i++){
        var j = ba.get(i);
        writer.write(32, caml_int32_bits_of_float(j[1]));
        writer.write(32, caml_int32_bits_of_float(j[2]));
       }
       break;
      case 11:
       for(var i = 0; i < ba.data.length / 2; i++){
        var
         complex = ba.get(i),
         b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[1]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
        var b = caml_int64_to_bytes(caml_int64_bits_of_float(complex[2]));
        for(var j = 0; j < 8; j++) writer.write(8, b[j]);
       }
       break;
    }
    sz[0] = (4 + ba.dims.length) * 4;
    sz[1] = (4 + ba.dims.length) * 8;
   }
   function caml_ba_set_1(ba, i0, v){ba.set(ba.offset(i0), v); return 0;}
   function caml_ba_set_2(ba, i0, i1, v){
    ba.set(ba.offset([i0, i1]), v);
    return 0;
   }
   function caml_ba_set_3(ba, i0, i1, i2, v){
    ba.set(ba.offset([i0, i1, i2]), v);
    return 0;
   }
   function caml_ba_set_generic(ba, i, v){
    ba.set(ba.offset(caml_js_from_array(i)), v);
    return 0;
   }
   function caml_ba_slice(ba, vind){
    vind = caml_js_from_array(vind);
    var num_inds = vind.length, index = [], sub_dims = [], ofs;
    if(num_inds > ba.dims.length)
     caml_invalid_argument("Bigarray.slice: too many indices");
    if(ba.layout === 0){
     for(var i = 0; i < num_inds; i++) index[i] = vind[i];
     for(; i < ba.dims.length; i++) index[i] = 0;
     sub_dims = ba.dims.slice(num_inds);
    }
    else{
     for(var i = 0; i < num_inds; i++)
      index[ba.dims.length - num_inds + i] = vind[i];
     for(var i = 0; i < ba.dims.length - num_inds; i++) index[i] = 1;
     sub_dims = ba.dims.slice(0, ba.dims.length - num_inds);
    }
    ofs = ba.offset(index);
    var
     size = caml_ba_get_size(sub_dims),
     size_per_element = caml_ba_get_size_per_element(ba.kind),
     new_data =
       ba.data.subarray
        (ofs * size_per_element, (ofs + size) * size_per_element);
    return caml_ba_create_unsafe(ba.kind, ba.layout, sub_dims, new_data);
   }
   function caml_ba_sub(ba, ofs, len){
    var changed_dim, mul = 1;
    if(ba.layout === 0){
     for(var i = 1; i < ba.dims.length; i++) mul = mul * ba.dims[i];
     changed_dim = 0;
    }
    else{
     for(var i = 0; i < ba.dims.length - 1; i++) mul = mul * ba.dims[i];
     changed_dim = ba.dims.length - 1;
     ofs = ofs - 1;
    }
    if(ofs < 0 || len < 0 || ofs + len > ba.dims[changed_dim])
     caml_invalid_argument("Bigarray.sub: bad sub-array");
    var new_dims = [];
    for(var i = 0; i < ba.dims.length; i++) new_dims[i] = ba.dims[i];
    new_dims[changed_dim] = len;
    mul *= caml_ba_get_size_per_element(ba.kind);
    var new_data = ba.data.subarray(ofs * mul, (ofs + len) * mul);
    return caml_ba_create_unsafe(ba.kind, ba.layout, new_dims, new_data);
   }
   function caml_ba_to_typed_array(ba){return ba.data;}
   function caml_ba_uint8_get16(ba, i0){
    var ofs = ba.offset(i0);
    if(ofs + 1 >= ba.data.length) caml_array_bound_error();
    var b1 = ba.get(ofs), b2 = ba.get(ofs + 1);
    return b1 | b2 << 8;
   }
   function caml_ba_uint8_get32(ba, i0){
    var ofs = ba.offset(i0);
    if(ofs + 3 >= ba.data.length) caml_array_bound_error();
    var
     b1 = ba.get(ofs + 0),
     b2 = ba.get(ofs + 1),
     b3 = ba.get(ofs + 2),
     b4 = ba.get(ofs + 3);
    return b1 << 0 | b2 << 8 | b3 << 16 | b4 << 24;
   }
   function caml_ba_uint8_get64(ba, i0){
    var ofs = ba.offset(i0);
    if(ofs + 7 >= ba.data.length) caml_array_bound_error();
    var
     b1 = ba.get(ofs + 0),
     b2 = ba.get(ofs + 1),
     b3 = ba.get(ofs + 2),
     b4 = ba.get(ofs + 3),
     b5 = ba.get(ofs + 4),
     b6 = ba.get(ofs + 5),
     b7 = ba.get(ofs + 6),
     b8 = ba.get(ofs + 7);
    return caml_int64_of_bytes([b8, b7, b6, b5, b4, b3, b2, b1]);
   }
   function caml_ba_uint8_set16(ba, i0, v){
    var ofs = ba.offset(i0);
    if(ofs + 1 >= ba.data.length) caml_array_bound_error();
    ba.set(ofs + 0, v & 0xff);
    ba.set(ofs + 1, v >>> 8 & 0xff);
    return 0;
   }
   function caml_ba_uint8_set32(ba, i0, v){
    var ofs = ba.offset(i0);
    if(ofs + 3 >= ba.data.length) caml_array_bound_error();
    ba.set(ofs + 0, v & 0xff);
    ba.set(ofs + 1, v >>> 8 & 0xff);
    ba.set(ofs + 2, v >>> 16 & 0xff);
    ba.set(ofs + 3, v >>> 24 & 0xff);
    return 0;
   }
   function caml_ba_uint8_set64(ba, i0, v){
    var ofs = ba.offset(i0);
    if(ofs + 7 >= ba.data.length) caml_array_bound_error();
    var v = caml_int64_to_bytes(v);
    for(var i = 0; i < 8; i++) ba.set(ofs + i, v[7 - i]);
    return 0;
   }
   function caml_backtrace_status(_unit){
    return caml_record_backtrace_runtime_flag ? 1 : 0;
   }
   function caml_bigstring_blit_ba_to_ba(ba1, pos1, ba2, pos2, len){
    if(12 !== ba1.kind)
     caml_invalid_argument("caml_bigstring_blit_ba_to_ba: kind mismatch");
    if(12 !== ba2.kind)
     caml_invalid_argument("caml_bigstring_blit_ba_to_ba: kind mismatch");
    if(len === 0) return 0;
    var ofs1 = ba1.offset(pos1), ofs2 = ba2.offset(pos2);
    if(ofs1 + len > ba1.data.length) caml_array_bound_error();
    if(ofs2 + len > ba2.data.length) caml_array_bound_error();
    var slice = ba1.data.subarray(ofs1, ofs1 + len);
    ba2.data.set(slice, pos2);
    return 0;
   }
   function caml_bigstring_blit_ba_to_bytes(ba1, pos1, bytes2, pos2, len){
    if(12 !== ba1.kind)
     caml_invalid_argument("caml_bigstring_blit_string_to_ba: kind mismatch");
    if(len === 0) return 0;
    var ofs1 = ba1.offset(pos1);
    if(ofs1 + len > ba1.data.length) caml_array_bound_error();
    if(pos2 + len > caml_ml_bytes_length(bytes2)) caml_array_bound_error();
    var slice = ba1.data.subarray(ofs1, ofs1 + len);
    caml_blit_bytes(caml_bytes_of_uint8_array(slice), 0, bytes2, pos2, len);
    return 0;
   }
   function caml_bigstring_blit_bytes_to_ba(str1, pos1, ba2, pos2, len){
    if(12 !== ba2.kind)
     caml_invalid_argument("caml_bigstring_blit_string_to_ba: kind mismatch");
    if(len === 0) return 0;
    var ofs2 = ba2.offset(pos2);
    if(pos1 + len > caml_ml_bytes_length(str1)) caml_array_bound_error();
    if(ofs2 + len > ba2.data.length) caml_array_bound_error();
    var slice = caml_uint8_array_of_bytes(str1).subarray(pos1, pos1 + len);
    ba2.data.set(slice, ofs2);
    return 0;
   }
   function caml_bigstring_blit_string_to_ba(str1, pos1, ba2, pos2, len){
    if(12 !== ba2.kind)
     caml_invalid_argument("caml_bigstring_blit_string_to_ba: kind mismatch");
    if(len === 0) return 0;
    var ofs2 = ba2.offset(pos2);
    if(pos1 + len > caml_ml_string_length(str1)) caml_array_bound_error();
    if(ofs2 + len > ba2.data.length) caml_array_bound_error();
    var slice = caml_uint8_array_of_string(str1).subarray(pos1, pos1 + len);
    ba2.data.set(slice, ofs2);
    return 0;
   }
   function caml_bigstring_memcmp(s1, pos1, s2, pos2, len){
    for(var i = 0; i < len; i++){
     var a = caml_ba_get_1(s1, pos1 + i), b = caml_ba_get_1(s2, pos2 + i);
     if(a < b) return - 1;
     if(a > b) return 1;
    }
    return 0;
   }
   function caml_blake2_final(ctx, _hashlen){
    var r = blake2b.Final(ctx);
    return caml_string_of_uint8_array(r);
   }
   function caml_blake2_update(ctx, buf, ofs, len){
    var input = caml_uint8_array_of_bytes(buf);
    input = input.subarray(ofs, ofs + len);
    blake2b.Update(ctx, input);
    return 0;
   }
   function caml_blake2_create(hashlen, key){
    key = caml_uint8_array_of_string(key);
    if(key.length > 64) key.subarray(0, 64);
    return blake2b.Init(hashlen, key);
   }
   function caml_blake2_bytes(hashlen, key, buf, ofs, len){
    var ctx = caml_blake2_create(hashlen, key);
    caml_blake2_update(ctx, buf, ofs, len);
    return caml_blake2_final(ctx, hashlen);
   }
   function caml_blake2_string(hashlen, key, buf_str, ofs, len){
    var
     ctx = caml_blake2_create(hashlen, key),
     buf = caml_bytes_of_string(buf_str);
    caml_blake2_update(ctx, buf, ofs, len);
    return caml_blake2_final(ctx, hashlen);
   }
   function caml_blit_string(a, b, c, d, e){
    caml_blit_bytes(caml_bytes_of_string(a), b, c, d, e);
    return 0;
   }
   function caml_bswap16(x){return (x & 0x00ff) << 8 | (x & 0xff00) >> 8;}
   var jsoo_text_decoder_buff = new ArrayBuffer(1024);
   function caml_jsstring_of_string(s){
    if(jsoo_is_ascii(s)) return s;
    var
     a =
       s.length <= jsoo_text_decoder_buff.length
        ? new Uint8Array(jsoo_text_decoder_buff, 0, s.length)
        : new Uint8Array(s.length);
    for(var i = 0; i < s.length; i++) a[i] = s.charCodeAt(i);
    return jsoo_text_decoder.decode(a);
   }
   function caml_build_symbols(symb){
    var r = {}, max = - 1;
    if(symb)
     for(var i = 1; i < symb.length; i++){
      var idx = symb[i][2];
      max = Math.max(max, idx);
      r[caml_jsstring_of_string(symb[i][1])] = idx;
     }
    r.next_idx = max + 1;
    return r;
   }
   function caml_bytes_compare(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c < s2.c ? - 1 : s1.c > s2.c ? 1 : 0;
   }
   function caml_bytes_equal(s1, s2){
    if(s1 === s2) return 1;
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c === s2.c ? 1 : 0;
   }
   function caml_bytes_unsafe_get(s, i){
    switch(s.t & 6){
      case 0:
       return s.c.charCodeAt(i);
      case 2:
       if(i >= s.c.length) return 0; return s.c.charCodeAt(i);
      case 4:
       return s.c[i];
    }
   }
   function caml_bytes_get(s, i){
    if(i >>> 0 >= s.l) caml_bytes_bound_error();
    return caml_bytes_unsafe_get(s, i);
   }
   function caml_bytes_get16(s, i){
    if(i >>> 0 >= s.l - 1) caml_bytes_bound_error();
    var
     b1 = caml_bytes_unsafe_get(s, i),
     b2 = caml_bytes_unsafe_get(s, i + 1);
    return b2 << 8 | b1;
   }
   function caml_bytes_get32(s, i){
    if(i >>> 0 >= s.l - 3) caml_bytes_bound_error();
    var
     b1 = caml_bytes_unsafe_get(s, i),
     b2 = caml_bytes_unsafe_get(s, i + 1),
     b3 = caml_bytes_unsafe_get(s, i + 2),
     b4 = caml_bytes_unsafe_get(s, i + 3);
    return b4 << 24 | b3 << 16 | b2 << 8 | b1;
   }
   function caml_bytes_get64(s, i){
    if(i >>> 0 >= s.l - 7) caml_bytes_bound_error();
    var a = new Array(8);
    for(var j = 0; j < 8; j++) a[7 - j] = caml_bytes_unsafe_get(s, i + j);
    return caml_int64_of_bytes(a);
   }
   function caml_bytes_lessequal(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c <= s2.c ? 1 : 0;
   }
   function caml_bytes_greaterequal(s1, s2){return caml_bytes_lessequal(s2, s1);
   }
   function caml_bytes_lessthan(s1, s2){
    s1.t & 6 && caml_convert_string_to_bytes(s1);
    s2.t & 6 && caml_convert_string_to_bytes(s2);
    return s1.c < s2.c ? 1 : 0;
   }
   function caml_bytes_greaterthan(s1, s2){return caml_bytes_lessthan(s2, s1);
   }
   function caml_bytes_notequal(s1, s2){return 1 - caml_bytes_equal(s1, s2);}
   function caml_bytes_of_utf16_jsstring(s){
    if(jsoo_is_ascii(s))
     return new MlBytes(9, s, s.length);
    else{
     var a = jsoo_text_encoder.encode(s);
     return new MlBytes(4, a, a.length);
    }
   }
   function caml_bytes_set16(s, i, i16){
    if(i >>> 0 >= s.l - 1) caml_bytes_bound_error();
    var b2 = 0xff & i16 >> 8, b1 = 0xff & i16;
    caml_bytes_unsafe_set(s, i + 0, b1);
    caml_bytes_unsafe_set(s, i + 1, b2);
    return 0;
   }
   function caml_bytes_set32(s, i, i32){
    if(i >>> 0 >= s.l - 3) caml_bytes_bound_error();
    var
     b4 = 0xff & i32 >> 24,
     b3 = 0xff & i32 >> 16,
     b2 = 0xff & i32 >> 8,
     b1 = 0xff & i32;
    caml_bytes_unsafe_set(s, i + 0, b1);
    caml_bytes_unsafe_set(s, i + 1, b2);
    caml_bytes_unsafe_set(s, i + 2, b3);
    caml_bytes_unsafe_set(s, i + 3, b4);
    return 0;
   }
   function caml_bytes_set64(s, i, i64){
    if(i >>> 0 >= s.l - 7) caml_bytes_bound_error();
    var a = caml_int64_to_bytes(i64);
    for(var j = 0; j < 8; j++) caml_bytes_unsafe_set(s, i + 7 - j, a[j]);
    return 0;
   }
   var caml_callback = caml_call_gen;
   function caml_cbrt_float(x){return Math.cbrt(x);}
   class caml_ml_channels_state{
      constructor(){
       this.map = new globalThis.WeakMap();
       this.opened = new globalThis.Set();
      }
      close(chanid){this.opened.delete(chanid);}
      get(chanid){return this.map.get(chanid);}
      set(chanid, val){
       if(val.opened) this.opened.add(chanid);
       return this.map.set(chanid, val);
      }
      all(){return this.opened.values();}
    }
   var caml_ml_channels = new caml_ml_channels_state();
   function caml_ml_channel_get(id){return caml_ml_channels.get(id);}
   function caml_channel_descriptor(chanid){
    var chan = caml_ml_channel_get(chanid);
    return chan.fd;
   }
   function caml_check_bound(array, index){
    if(index >>> 0 >= array.length - 1) caml_array_bound_error();
    return array;
   }
   function caml_classify_float(x){
    if(Number.isFinite(x)){
     if(Math.abs(x) >= 2.2250738585072014e-308) return 0;
     if(x !== 0) return 1;
     return 2;
    }
    return Number.isNaN(x) ? 4 : 3;
   }
   function caml_is_continuation_tag(t){return t === 245 ? 1 : 0;}
   function caml_int32_unmarshal(reader, size){size[0] = 4; return reader.read32s();
   }
   function caml_nativeint_unmarshal(reader, size){
    switch(reader.read8u()){
      case 1:
       size[0] = 4; return reader.read32s();
      case 2:
       caml_failwith("input_value: native integer value too large"); break;
      default: caml_failwith("input_value: ill-formed native integer");
    }
   }
   function caml_int64_unmarshal(reader, size){
    var t = new Array(8);
    for(var j = 0; j < 8; j++) t[j] = reader.read8u();
    size[0] = 8;
    return caml_int64_of_bytes(t);
   }
   function caml_int64_marshal(writer, v, sizes){
    var b = caml_int64_to_bytes(v);
    for(var i = 0; i < 8; i++) writer.write(8, b[i]);
    sizes[0] = 8;
    sizes[1] = 8;
   }
   function caml_int64_compare(x, y, _total){return x.compare(y);}
   function caml_int64_hash(v){return v.lo32() ^ v.hi32();}
   var
    caml_custom_ops =
      {_j:
       {deserialize: caml_int64_unmarshal,
        serialize: caml_int64_marshal,
        fixed_length: 8,
        compare: caml_int64_compare,
        hash: caml_int64_hash},
       _i: {deserialize: caml_int32_unmarshal, fixed_length: 4},
       _n: {deserialize: caml_nativeint_unmarshal, fixed_length: 4},
       _bigarray:
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarray");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash},
       _bigarr02:
       {deserialize:
        function(reader, sz){
         return caml_ba_deserialize(reader, sz, "_bigarr02");
        },
        serialize: caml_ba_serialize,
        compare: caml_ba_compare,
        hash: caml_ba_hash}};
   function caml_compare_val_get_custom(a){
    return caml_custom_ops[a.caml_custom]
           && caml_custom_ops[a.caml_custom].compare;
   }
   function caml_compare_val_number_custom(num, custom, swap, total){
    var comp = caml_compare_val_get_custom(custom);
    if(comp){
     var x = swap > 0 ? comp(custom, num, total) : comp(num, custom, total);
     if(total && Number.isNaN(x)) return swap;
     if(Number.isNaN(+ x)) return + x;
     if((x | 0) !== 0) return x | 0;
    }
    return swap;
   }
   function caml_compare_val_tag(a){
    if(typeof a === "number")
     return 1000;
    else if(caml_is_ml_bytes(a))
     return 252;
    else if(caml_is_ml_string(a))
     return 1252;
    else if(Array.isArray(a) && a[0] === a[0] >>> 0 && a[0] <= 255){var tag = a[0] | 0; return tag === 254 ? 0 : tag;}
    else if(a instanceof String)
     return 12520;
    else if(typeof a === "string")
     return 12520;
    else if(a instanceof Number)
     return 1000;
    else if(a?.caml_custom)
     return 1255;
    else if(a?.compare)
     return 1256;
    else if(typeof a === "function")
     return 1247;
    else if(typeof a === "symbol") return 1251;
    return 1001;
   }
   function caml_int_compare(a, b){
    if(a < b) return - 1;
    if(a === b) return 0;
    return 1;
   }
   function caml_string_compare(s1, s2){
    return s1 < s2 ? - 1 : s1 > s2 ? 1 : 0;
   }
   function caml_compare_val(a, b, total){
    var stack = [];
    for(;;){
     if(! (total && a === b)){
      var tag_a = caml_compare_val_tag(a);
      if(tag_a === 250){a = a[1]; continue;}
      var tag_b = caml_compare_val_tag(b);
      if(tag_b === 250){b = b[1]; continue;}
      if(tag_a !== tag_b){
       if(tag_a === 1000){
        if(tag_b === 1255)
         return caml_compare_val_number_custom(a, b, - 1, total);
        return - 1;
       }
       if(tag_b === 1000){
        if(tag_a === 1255)
         return caml_compare_val_number_custom(b, a, 1, total);
        return 1;
       }
       return tag_a < tag_b ? - 1 : 1;
      }
      switch(tag_a){
        case 247:
         caml_invalid_argument("compare: functional value"); break;
        case 248:
         var x = caml_int_compare(a[2], b[2]) | 0;
         if(x !== 0) return x;
         break;
        case 249:
         caml_invalid_argument("compare: functional value"); break;
        case 250:
         caml_invalid_argument("equal: got Forward_tag, should not happen");
         break;
        case 251:
         caml_invalid_argument("equal: abstract value"); break;
        case 252:
         if(a !== b){
          var x = caml_bytes_compare(a, b) | 0;
          if(x !== 0) return x;
         }
         break;
        case 253:
         caml_invalid_argument("equal: got Double_tag, should not happen");
         break;
        case 254:
         caml_invalid_argument
          ("equal: got Double_array_tag, should not happen");
         break;
        case 255:
         caml_invalid_argument("equal: got Custom_tag, should not happen");
         break;
        case 1247:
         caml_invalid_argument("compare: functional value"); break;
        case 1255:
         var comp = caml_compare_val_get_custom(a);
         if(comp !== caml_compare_val_get_custom(b))
          return a.caml_custom < b.caml_custom ? - 1 : 1;
         if(! comp) caml_invalid_argument("compare: abstract value");
         var x = comp(a, b, total);
         if(Number.isNaN(x)) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x !== 0) return x | 0;
         break;
        case 1256:
         var x = a.compare(b, total);
         if(Number.isNaN(x)) return total ? - 1 : x;
         if(x !== (x | 0)) return - 1;
         if(x !== 0) return x | 0;
         break;
        case 1000:
         a = + a;
         b = + b;
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a !== b){
          if(! total) return Number.NaN;
          if(! Number.isNaN(a)) return 1;
          if(! Number.isNaN(b)) return - 1;
         }
         break;
        case 1001:
         if(a < b) return - 1;
         if(a > b) return 1;
         if(a !== b) return total ? 1 : Number.NaN;
         break;
        case 1251:
         if(a !== b) return total ? 1 : Number.NaN; break;
        case 1252:
         var a = caml_jsbytes_of_string(a), b = caml_jsbytes_of_string(b);
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        case 12520:
         var a = a.toString(), b = b.toString();
         if(a !== b){if(a < b) return - 1; if(a > b) return 1;}
         break;
        default:
         if(caml_is_continuation_tag(tag_a)){
          caml_invalid_argument("compare: continuation value");
          break;
         }
         if(a.length !== b.length) return a.length < b.length ? - 1 : 1;
         if(a.length > 1) stack.push(a, b, 1);
         break;
      }
     }
     if(stack.length === 0) return 0;
     var i = stack.pop();
     b = stack.pop();
     a = stack.pop();
     if(i + 1 < a.length) stack.push(a, b, i + 1);
     a = a[i];
     b = b[i];
    }
   }
   function caml_compare(a, b){return caml_compare_val(a, b, true);}
   function caml_continuation_use_noexc(cont){
    var stack = cont[1];
    cont[1] = 0;
    return stack;
   }
   function caml_continuation_use_and_update_handler_noexc
   (cont, hval, hexn, heff){
    var stack = caml_continuation_use_noexc(cont);
    if(stack === 0) return stack;
    var last = cont[2];
    last.h[1] = hval;
    last.h[2] = hexn;
    last.h[3] = heff;
    return stack;
   }
   function caml_convert_raw_backtrace(){return [0];}
   function caml_convert_raw_backtrace_slot(_rbt){
    caml_failwith("caml_convert_raw_backtrace_slot");
   }
   function caml_copysign_float(x, y){
    if(y === 0) y = 1 / y;
    x = Math.abs(x);
    return y < 0 ? - x : x;
   }
   function caml_cosh_float(x){return Math.cosh(x);}
   function fs_node_supported(){
    return globalThis.process?.versions?.node !== undefined;
   }
   function make_path_is_absolute(){
    function posix(path){
     if(path.charAt(0) === "/") return ["", path.slice(1)];
     return;
    }
    function win32(path){
     var
      splitDeviceRe =
        /^([a-zA-Z]:|[\\/]{2}[^\\/]+[\\/]+[^\\/]+)?([\\/])?([\s\S]*?)$/,
      result = splitDeviceRe.exec(path),
      device = result[1] || "",
      isUnc = device.length > 0 && device.charAt(1) !== ":";
     if(result[2] || isUnc){
      var root = result[1] || "", sep = result[2] || "";
      return [root, path.slice(root.length + sep.length)];
     }
     return;
    }
    return fs_node_supported() && globalThis.process
            && globalThis.process.platform
            ? globalThis.process.platform === "win32" ? win32 : posix
            : posix;
   }
   var path_is_absolute = make_path_is_absolute();
   function caml_trailing_slash(name){
    return name.slice(- 1) !== "/" ? name + "/" : name;
   }
   if(fs_node_supported() && globalThis.process && globalThis.process.cwd)
    var caml_current_dir = globalThis.process.cwd().replace(/\\/g, "/");
   else
    var caml_current_dir = "/static";
   caml_current_dir = caml_trailing_slash(caml_current_dir);
   function caml_make_path(name){
    name = caml_jsstring_of_string(name);
    if(! path_is_absolute(name)) name = caml_current_dir + name;
    var
     comp0 = path_is_absolute(name),
     comp = comp0[1].split(/[/\\]/),
     ncomp = [];
    for(var i = 0; i < comp.length; i++)
     switch(comp[i]){
       case "..":
        ncomp.pop(); break;
       case ".": break;
       case "": break;
       default: ncomp.push(comp[i]); break;
     }
    ncomp.unshift(comp0[0]);
    ncomp.orig = name;
    return ncomp;
   }
   function caml_get_root(path){
    var x = path_is_absolute(path);
    if(! x) return;
    return x[0] + "/";
   }
   var
    caml_root =
      caml_get_root(caml_current_dir)
      || caml_failwith("unable to compute caml_root"),
    jsoo_mount_point = [];
   if(fs_node_supported())
    jsoo_mount_point.push
     ({path: caml_root, device: new MlNodeDevice(caml_root)});
   else
    jsoo_mount_point.push
     ({path: caml_root, device: new MlFakeDevice(caml_root)});
   jsoo_mount_point.push
    ({path: "/static/", device: new MlFakeDevice("/static/")});
   function resolve_fs_device(name){
    var
     path = caml_make_path(name),
     name = path.join("/"),
     name_slash = caml_trailing_slash(name),
     res;
    for(var i = 0; i < jsoo_mount_point.length; i++){
     var m = jsoo_mount_point[i];
     if
      (name_slash.search(m.path) === 0
       && (! res || res.path.length < m.path.length))
      res =
       {path: m.path,
        device: m.device,
        rest: name.slice(m.path.length, name.length)};
    }
    if(! res && fs_node_supported()){
     var root = caml_get_root(name);
     if(root?.match(/^[a-zA-Z]:\/$/)){
      var m = {path: root, device: new MlNodeDevice(root)};
      jsoo_mount_point.push(m);
      res =
       {path: m.path,
        device: m.device,
        rest: name.slice(m.path.length, name.length)};
     }
    }
    if(res) return res;
    caml_raise_sys_error("no device found for " + name_slash);
   }
   function caml_create_file(name, content){
    var root = resolve_fs_device(name);
    if(! root.device.register) caml_failwith("cannot register file");
    root.device.register(root.rest, content);
    return 0;
   }
   function caml_create_string(_len){caml_invalid_argument("String.create");}
   var caml_custom_event_index = 0;
   function caml_custom_identifier(o){
    return caml_string_of_jsstring(o.caml_custom);
   }
   var
    zstd_decompress =
      function(){
        var
         ab = ArrayBuffer,
         u8 = Uint8Array,
         u16 = Uint16Array,
         i16 = Int16Array,
         i32 = Int32Array;
        function slc(v, s, e){
         if(u8.prototype.slice) return u8.prototype.slice.call(v, s, e);
         if(s == null || s < 0) s = 0;
         if(e == null || e > v.length) e = v.length;
         var n = new u8(e - s);
         n.set(v.subarray(s, e));
         return n;
        }
        function fill(v, n, s, e){
         if(u8.prototype.fill) return u8.prototype.fill.call(v, n, s, e);
         if(s == null || s < 0) s = 0;
         if(e == null || e > v.length) e = v.length;
         for(; s < e; ++s) v[s] = n;
         return v;
        }
        function cpw(v, t, s, e){
         if(u8.prototype.copyWithin)
          return u8.prototype.copyWithin.call(v, t, s, e);
         if(s == null || s < 0) s = 0;
         if(e == null || e > v.length) e = v.length;
         while(s < e) v[t++] = v[s++];
        }
        var
         ec =
           ["invalid zstd data",
            "window size too large (>2046MB)",
            "invalid block type",
            "FSE accuracy too high",
            "match distance too far back",
            "unexpected EOF"];
        function err(ind, msg, nt){
         var e = new Error(msg || ec[ind]);
         e.code = ind;
         if(! nt) throw e;
         return e;
        }
        function rb(d, b, n){
         var i = 0, o = 0;
         for(; i < n; ++i) o |= d[b++] << (i << 3);
         return o;
        }
        function b4(d, b){
         return (d[b] | d[b + 1] << 8 | d[b + 2] << 16 | d[b + 3] << 24) >>> 0;
        }
        function rzfh(dat, w){
         var n3 = dat[0] | dat[1] << 8 | dat[2] << 16;
         if(n3 === 0x2fb528 && dat[3] === 253){
          var
           flg = dat[4],
           ss = flg >> 5 & 1,
           cc = flg >> 2 & 1,
           df = flg & 3,
           fcf = flg >> 6;
          if(flg & 8) err(0);
          var bt = 6 - ss, db = df === 3 ? 4 : df, di = rb(dat, bt, db);
          bt += db;
          var
           fsb = fcf ? 1 << fcf : ss,
           fss = rb(dat, bt, fsb) + (fcf === 1 && 256),
           ws = fss;
          if(! ss){
           var wb = 1 << 10 + (dat[5] >> 3);
           ws = wb + (wb >> 3) * (dat[5] & 7);
          }
          if(ws > 2145386496) err(1);
          var buf = new u8((w === 1 ? fss || ws : w ? 0 : ws) + 12);
          buf[0] = 1, buf[4] = 4, buf[8] = 8;
          return {b: bt + fsb,
                  y: 0,
                  l: 0,
                  d: di,
                  w: w && w !== 1 ? w : buf.subarray(12),
                  e: ws,
                  o: new i32(buf.buffer, 0, 3),
                  u: fss,
                  c: cc,
                  m: Math.min(131072, ws)};
         }
         else if((n3 >> 4 | dat[3] << 20) === 0x184d2a5)
          return b4(dat, 4) + 8;
         err(0);
        }
        function msb(val){
         var bits = 0;
         for(; 1 << bits <= val; ++bits) ;
         return bits - 1;
        }
        function rfse(dat, bt, mal){
         var tpos = (bt << 3) + 4, al = (dat[bt] & 15) + 5;
         if(al > mal) err(3);
         var
          sz = 1 << al,
          probs = sz,
          sym = - 1,
          re = - 1,
          i = - 1,
          ht = sz,
          buf = new ab(512 + (sz << 2)),
          freq = new i16(buf, 0, 256),
          dstate = new u16(buf, 0, 256),
          nstate = new u16(buf, 512, sz),
          bb1 = 512 + (sz << 1),
          syms = new u8(buf, bb1, sz),
          nbits = new u8(buf, bb1 + sz);
         while(sym < 255 && probs > 0){
          var
           bits = msb(probs + 1),
           cbt = tpos >> 3,
           msk = (1 << bits + 1) - 1,
           val =
             (dat[cbt] | dat[cbt + 1] << 8 | dat[cbt + 2] << 16) >> (tpos & 7)
             & msk,
           msk1fb = (1 << bits) - 1,
           msv = msk - probs - 1,
           sval = val & msk1fb;
          if(sval < msv)
           tpos += bits, val = sval;
          else{tpos += bits + 1; if(val > msk1fb) val -= msv;}
          freq[++sym] = --val;
          if(val === - 1){probs += val; syms[--ht] = sym;} else probs -= val;
          if(! val)
           do{
            var rbt = tpos >> 3;
            re = (dat[rbt] | dat[rbt + 1] << 8) >> (tpos & 7) & 3;
            tpos += 2;
            sym += re;
           }
           while
            (re === 3);
         }
         if(sym > 255 || probs) err(0);
         var sympos = 0, sstep = (sz >> 1) + (sz >> 3) + 3, smask = sz - 1;
         for(var s = 0; s <= sym; ++s){
          var sf = freq[s];
          if(sf < 1){dstate[s] = - sf; continue;}
          for(i = 0; i < sf; ++i){
           syms[sympos] = s;
           do sympos = sympos + sstep & smask;while(sympos >= ht);
          }
         }
         if(sympos) err(0);
         for(i = 0; i < sz; ++i){
          var ns = dstate[syms[i]]++, nb = nbits[i] = al - msb(ns);
          nstate[i] = (ns << nb) - sz;
         }
         return [tpos + 7 >> 3, {b: al, s: syms, n: nbits, t: nstate}];
        }
        function rhu(dat, bt){
         var
          i = 0,
          wc = - 1,
          buf = new u8(292),
          hb = dat[bt],
          hw = buf.subarray(0, 256),
          rc = buf.subarray(256, 268),
          ri = new u16(buf.buffer, 268);
         if(hb < 128){
          var _a = rfse(dat, bt + 1, 6), ebt = _a[0], fdt = _a[1];
          bt += hb;
          var epos = ebt << 3, lb = dat[bt];
          if(! lb) err(0);
          var
           st1 = 0,
           st2 = 0,
           btr1 = fdt.b,
           btr2 = btr1,
           fpos = (++bt << 3) - 8 + msb(lb);
          for(;;){
           fpos -= btr1;
           if(fpos < epos) break;
           var cbt = fpos >> 3;
           st1 +=
            (dat[cbt] | dat[cbt + 1] << 8) >> (fpos & 7) & (1 << btr1) - 1;
           hw[++wc] = fdt.s[st1];
           fpos -= btr2;
           if(fpos < epos) break;
           cbt = fpos >> 3;
           st2 +=
            (dat[cbt] | dat[cbt + 1] << 8) >> (fpos & 7) & (1 << btr2) - 1;
           hw[++wc] = fdt.s[st2];
           btr1 = fdt.n[st1];
           st1 = fdt.t[st1];
           btr2 = fdt.n[st2];
           st2 = fdt.t[st2];
          }
          if(++wc > 255) err(0);
         }
         else{
          wc = hb - 127;
          for(; i < wc; i += 2){
           var byte = dat[++bt];
           hw[i] = byte >> 4;
           hw[i + 1] = byte & 15;
          }
          ++bt;
         }
         var wes = 0;
         for(i = 0; i < wc; ++i){
          var wt = hw[i];
          if(wt > 11) err(0);
          wes += wt && 1 << wt - 1;
         }
         var mb = msb(wes) + 1, ts = 1 << mb, rem = ts - wes;
         if(rem & rem - 1) err(0);
         hw[wc++] = msb(rem) + 1;
         for(i = 0; i < wc; ++i){
          var wt = hw[i];
          ++rc[hw[i] = wt && mb + 1 - wt];
         }
         var
          hbuf = new u8(ts << 1),
          syms = hbuf.subarray(0, ts),
          nb = hbuf.subarray(ts);
         ri[mb] = 0;
         for(i = mb; i > 0; --i){
          var pv = ri[i];
          fill(nb, i, pv, ri[i - 1] = pv + rc[i] * (1 << mb - i));
         }
         if(ri[0] !== ts) err(0);
         for(i = 0; i < wc; ++i){
          var bits = hw[i];
          if(bits){
           var code = ri[bits];
           fill(syms, i, code, ri[bits] = code + (1 << mb - bits));
          }
         }
         return [bt, {n: nb, b: mb, s: syms}];
        }
        var
         dllt =
           rfse
             (new
               u8
               ([81,
                 16,
                 99,
                 140,
                 49,
                 198,
                 24,
                 99,
                 12,
                 33,
                 196,
                 24,
                 99,
                 102,
                 102,
                 134,
                 70,
                 146,
                 4]),
              0,
              6)
            [1],
         dmlt =
           rfse
             (new
               u8
               ([33,
                 20,
                 196,
                 24,
                 99,
                 140,
                 33,
                 132,
                 16,
                 66,
                 8,
                 33,
                 132,
                 16,
                 66,
                 8,
                 33,
                 68,
                 68,
                 68,
                 68,
                 68,
                 68,
                 68,
                 68,
                 36,
                 9]),
              0,
              6)
            [1],
         doct =
           rfse
             (new u8([32, 132, 16, 66, 102, 70, 68, 68, 68, 68, 36, 73, 2]),
              0,
              5)
            [1];
        function b2bl(b, s){
         var len = b.length, bl = new i32(len);
         for(var i = 0; i < len; ++i){bl[i] = s; s += 1 << b[i];}
         return bl;
        }
        var
         llb =
           new
            u8
            (new
              i32
              ([0,
                0,
                0,
                0,
                16843009,
                50528770,
                134678020,
                202050057,
                269422093]).buffer,
             0,
             36),
         llbl = b2bl(llb, 0),
         mlb =
           new
            u8
            (new
              i32
              ([0,
                0,
                0,
                0,
                0,
                0,
                0,
                0,
                16843009,
                50528770,
                117769220,
                185207048,
                252579084,
                16]).buffer,
             0,
             53),
         mlbl = b2bl(mlb, 3);
        function dhu(dat, out, hu){
         var
          len = dat.length,
          ss = out.length,
          lb = dat[len - 1],
          msk = (1 << hu.b) - 1,
          eb = - hu.b;
         if(! lb) err(0);
         var
          st = 0,
          btr = hu.b,
          pos = (len << 3) - 8 + msb(lb) - btr,
          i = - 1;
         while(pos > eb && i < ss){
          var
           cbt = pos >> 3,
           val =
             (dat[cbt] | dat[cbt + 1] << 8 | dat[cbt + 2] << 16) >> (pos & 7);
          st = (st << btr | val) & msk;
          out[++i] = hu.s[st];
          pos -= btr = hu.n[st];
         }
         if(pos !== eb || i + 1 !== ss) err(0);
        }
        function dhu4(dat, out, hu){
         var
          bt = 6,
          ss = out.length,
          sz1 = ss + 3 >> 2,
          sz2 = sz1 << 1,
          sz3 = sz1 + sz2;
         dhu
          (dat.subarray(bt, bt += dat[0] | dat[1] << 8),
           out.subarray(0, sz1),
           hu);
         dhu
          (dat.subarray(bt, bt += dat[2] | dat[3] << 8),
           out.subarray(sz1, sz2),
           hu);
         dhu
          (dat.subarray(bt, bt += dat[4] | dat[5] << 8),
           out.subarray(sz2, sz3),
           hu);
         dhu(dat.subarray(bt), out.subarray(sz3), hu);
        }
        function rzb(dat, st, out){
         var _a, bt = st.b, b0 = dat[bt], btype = b0 >> 1 & 3;
         st.l = b0 & 1;
         var
          sz = b0 >> 3 | dat[bt + 1] << 5 | dat[bt + 2] << 13,
          ebt = (bt += 3) + sz;
         if(btype === 1){
          if(bt >= dat.length) return;
          st.b = bt + 1;
          if(out){fill(out, dat[bt], st.y, st.y += sz); return out;}
          return fill(new u8(sz), dat[bt]);
         }
         if(ebt > dat.length) return;
         if(btype === 0){
          st.b = ebt;
          if(out){
           out.set(dat.subarray(bt, ebt), st.y);
           st.y += sz;
           return out;
          }
          return slc(dat, bt, ebt);
         }
         if(btype === 2){
          var
           b3 = dat[bt],
           lbt = b3 & 3,
           sf = b3 >> 2 & 3,
           lss = b3 >> 4,
           lcs = 0,
           s4 = 0;
          if(lbt < 2)
           if(sf & 1)
            lss |= dat[++bt] << 4 | (sf & 2 && dat[++bt] << 12);
           else
            lss = b3 >> 3;
          else{
           s4 = sf;
           if(sf < 2)
            lss |= (dat[++bt] & 63) << 4, lcs = dat[bt] >> 6 | dat[++bt] << 2;
           else if(sf === 2)
            lss |= dat[++bt] << 4 | (dat[++bt] & 3) << 12,
            lcs = dat[bt] >> 2 | dat[++bt] << 6;
           else
            lss |= dat[++bt] << 4 | (dat[++bt] & 63) << 12,
            lcs = dat[bt] >> 6 | dat[++bt] << 2 | dat[++bt] << 10;
          }
          ++bt;
          var
           buf = out ? out.subarray(st.y, st.y + st.m) : new u8(st.m),
           spl = buf.length - lss;
          if(lbt === 0)
           buf.set(dat.subarray(bt, bt += lss), spl);
          else if(lbt === 1)
           fill(buf, dat[bt++], spl);
          else{
           var hu = st.h;
           if(lbt === 2){
            var hud = rhu(dat, bt);
            lcs += bt - (bt = hud[0]);
            st.h = hu = hud[1];
           }
           else if(! hu) err(0);
           (s4 ? dhu4 : dhu)
            (dat.subarray(bt, bt += lcs), buf.subarray(spl), hu);
          }
          var ns = dat[bt++];
          if(ns){
           if(ns === 255)
            ns = (dat[bt++] | dat[bt++] << 8) + 0x7f00;
           else if(ns > 127) ns = ns - 128 << 8 | dat[bt++];
           var scm = dat[bt++];
           if(scm & 3) err(0);
           var dts = [dmlt, doct, dllt];
           for(var i = 2; i > - 1; --i){
            var md = scm >> (i << 1) + 2 & 3;
            if(md === 1){
             var rbuf = new u8([0, 0, dat[bt++]]);
             dts[i] =
              {s: rbuf.subarray(2, 3),
               n: rbuf.subarray(0, 1),
               t: new u16(rbuf.buffer, 0, 1),
               b: 0};
            }
            else if(md === 2)
             _a = rfse(dat, bt, 9 - (i & 1)), bt = _a[0], dts[i] = _a[1];
            else if(md === 3){if(! st.t) err(0); dts[i] = st.t[i];}
           }
           var
            _b = st.t = dts,
            mlt = _b[0],
            oct = _b[1],
            llt = _b[2],
            lb = dat[ebt - 1];
           if(! lb) err(0);
           var
            spos = (ebt << 3) - 8 + msb(lb) - llt.b,
            cbt = spos >> 3,
            oubt = 0,
            lst =
              (dat[cbt] | dat[cbt + 1] << 8) >> (spos & 7) & (1 << llt.b) - 1;
           cbt = (spos -= oct.b) >> 3;
           var
            ost =
              (dat[cbt] | dat[cbt + 1] << 8) >> (spos & 7) & (1 << oct.b) - 1;
           cbt = (spos -= mlt.b) >> 3;
           var
            mst =
              (dat[cbt] | dat[cbt + 1] << 8) >> (spos & 7) & (1 << mlt.b) - 1;
           for(++ns; --ns;){
            var
             llc = llt.s[lst],
             lbtr = llt.n[lst],
             mlc = mlt.s[mst],
             mbtr = mlt.n[mst],
             ofc = oct.s[ost],
             obtr = oct.n[ost];
            cbt = (spos -= ofc) >> 3;
            var
             ofp = 1 << ofc,
             off =
               ofp
               +
                ((dat[cbt] | dat[cbt + 1] << 8 | dat[cbt + 2] << 16
                | dat[cbt + 3] << 24)
                >>> (spos & 7)
                & ofp - 1);
            cbt = (spos -= mlb[mlc]) >> 3;
            var
             ml =
               mlbl[mlc]
               +
                ((dat[cbt] | dat[cbt + 1] << 8 | dat[cbt + 2] << 16)
                >> (spos & 7)
                & (1 << mlb[mlc]) - 1);
            cbt = (spos -= llb[llc]) >> 3;
            var
             ll =
               llbl[llc]
               +
                ((dat[cbt] | dat[cbt + 1] << 8 | dat[cbt + 2] << 16)
                >> (spos & 7)
                & (1 << llb[llc]) - 1);
            cbt = (spos -= lbtr) >> 3;
            lst =
             llt.t[lst]
             +
              ((dat[cbt] | dat[cbt + 1] << 8) >> (spos & 7) & (1 << lbtr) - 1);
            cbt = (spos -= mbtr) >> 3;
            mst =
             mlt.t[mst]
             +
              ((dat[cbt] | dat[cbt + 1] << 8) >> (spos & 7) & (1 << mbtr) - 1);
            cbt = (spos -= obtr) >> 3;
            ost =
             oct.t[ost]
             +
              ((dat[cbt] | dat[cbt + 1] << 8) >> (spos & 7) & (1 << obtr) - 1);
            if(off > 3){
             st.o[2] = st.o[1];
             st.o[1] = st.o[0];
             st.o[0] = off -= 3;
            }
            else{
             var idx = off - (ll !== 0);
             if(idx){
              off = idx === 3 ? st.o[0] - 1 : st.o[idx];
              if(idx > 1) st.o[2] = st.o[1];
              st.o[1] = st.o[0];
              st.o[0] = off;
             }
             else
              off = st.o[0];
            }
            for(var i = 0; i < ll; ++i) buf[oubt + i] = buf[spl + i];
            oubt += ll, spl += ll;
            var stin = oubt - off;
            if(stin < 0){
             var len = - stin, bs = st.e + stin;
             if(len > ml) len = ml;
             for(var i = 0; i < len; ++i) buf[oubt + i] = st.w[bs + i];
             oubt += len, ml -= len, stin = 0;
            }
            for(var i = 0; i < ml; ++i) buf[oubt + i] = buf[stin + i];
            oubt += ml;
           }
           if(oubt !== spl)
            while(spl < buf.length) buf[oubt++] = buf[spl++];
           else
            oubt = buf.length;
           if(out) st.y += oubt; else buf = slc(buf, 0, oubt);
          }
          else if(out){
           st.y += lss;
           if(spl) for(var i = 0; i < lss; ++i) buf[i] = buf[spl + i];
          }
          else if(spl) buf = slc(buf, spl);
          st.b = ebt;
          return buf;
         }
         err(2);
        }
        function cct(bufs, ol){
         if(bufs.length === 1) return bufs[0];
         var buf = new u8(ol);
         for(var i = 0, b = 0; i < bufs.length; ++i){
          var chk = bufs[i];
          buf.set(chk, b);
          b += chk.length;
         }
         return buf;
        }
        return function(dat, buf){
         var bt = 0, bufs = [], nb = + ! buf, ol = 0;
         while(dat.length){
          var st = rzfh(dat, nb || buf);
          if(typeof st === "object"){
           if(nb){
            buf = null;
            if(st.w.length === st.u){bufs.push(buf = st.w); ol += st.u;}
           }
           else{bufs.push(buf); st.e = 0;}
           while(! st.l){
            var blk = rzb(dat, st, buf);
            if(! blk) err(5);
            if(buf)
             st.e = st.y;
            else{
             bufs.push(blk);
             ol += blk.length;
             cpw(st.w, 0, blk.length);
             st.w.set(blk, st.w.length - blk.length);
            }
           }
           bt = st.b + st.c * 4;
          }
          else
           bt = st;
          dat = dat.subarray(bt);
         }
         return cct(bufs, ol);};
       }
       (),
    caml_decompress_input = zstd_decompress;
   function caml_div(x, y){
    if(y === 0) caml_raise_zero_divide();
    return x / y | 0;
   }
   var caml_domain_dls = [0];
   function caml_domain_dls_compare_and_set(old, n){
    if(caml_domain_dls !== old) return 0;
    caml_domain_dls = n;
    return 1;
   }
   function caml_domain_dls_get(_unit){return caml_domain_dls;}
   function caml_domain_dls_set(a){caml_domain_dls = a;}
   var caml_domain_id = 0;
   function caml_ml_mutex_unlock(t){t.locked = false; return 0;}
   var caml_domain_latest_idx = 1;
   function caml_domain_spawn(f, term_sync){
    var id = caml_domain_latest_idx++, old = caml_domain_id;
    caml_domain_id = id;
    var res = caml_callback(f, [0]);
    caml_domain_id = old;
    caml_ml_mutex_unlock(term_sync[2]);
    term_sync[1] = [0, [0, res]];
    return id;
   }
   var
    caml_ephe_none = {caml_ephe_none: 0},
    caml_ephe_data_offset = 2,
    caml_ephe_key_offset = 3;
   function caml_ephe_get_data(x){
    var data = x[caml_ephe_data_offset];
    if(data === caml_ephe_none) return 0;
    for(var i = caml_ephe_key_offset; i < x.length; i++){
     var k = x[i];
     if(globalThis.WeakRef && k instanceof globalThis.WeakRef){
      var d = k.deref();
      if(d === undefined){
       x[i] = caml_ephe_none;
       x[caml_ephe_data_offset] = caml_ephe_none;
       return 0;
      }
      if(globalThis.WeakMap){
       data = data.get(k);
       if(data === undefined){
        x[caml_ephe_data_offset] = caml_ephe_none;
        return 0;
       }
      }
     }
    }
    return [0, data];
   }
   function caml_ephe_unset_data(x){
    x[caml_ephe_data_offset] = caml_ephe_none;
    return 0;
   }
   function caml_ephe_set_data(x, data){
    for(var i = x.length - 1; i >= caml_ephe_key_offset; i--){
     var k = x[i];
     if(globalThis.WeakRef && k instanceof globalThis.WeakRef){
      var d = k.deref();
      if(d === undefined){x[i] = caml_ephe_none; continue;}
      if(globalThis.WeakMap) data = new globalThis.WeakMap().set(k, data);
     }
    }
    x[caml_ephe_data_offset] = data;
    return 0;
   }
   function caml_ephe_set_data_opt(x, data_opt){
    if(data_opt === 0)
     caml_ephe_unset_data(x);
    else
     caml_ephe_set_data(x, data_opt[1]);
    return 0;
   }
   function caml_ephe_blit_data(src, dst){
    var old = caml_ephe_get_data(src);
    caml_ephe_set_data_opt(dst, old);
    return 0;
   }
   function caml_ephe_blit_key(a1, i1, a2, i2, len){
    var old = caml_ephe_get_data(a1);
    caml_array_blit
     (a1,
      caml_ephe_key_offset + i1 - 1,
      a2,
      caml_ephe_key_offset + i2 - 1,
      len);
    caml_ephe_set_data_opt(a2, old);
    return 0;
   }
   function caml_ephe_check_data(x){
    var data = caml_ephe_get_data(x);
    return data === 0 ? 0 : 1;
   }
   function caml_ephe_check_key(x, i){
    var weak = x[caml_ephe_key_offset + i];
    if(weak === caml_ephe_none) return 0;
    if(globalThis.WeakRef && weak instanceof globalThis.WeakRef){
     weak = weak.deref();
     if(weak === undefined){
      x[caml_ephe_key_offset + i] = caml_ephe_none;
      x[caml_ephe_data_offset] = caml_ephe_none;
      return 0;
     }
    }
    return 1;
   }
   function caml_weak_create(n){
    var alen = caml_ephe_key_offset + n, x = new Array(alen);
    x[0] = 251;
    x[1] = "caml_ephe_list_head";
    for(var i = 2; i < alen; i++) x[i] = caml_ephe_none;
    return x;
   }
   function caml_ephe_create(n){return caml_weak_create(n);}
   function caml_obj_dup(x){return typeof x === "number" ? x : x.slice();}
   function caml_ephe_get_data_copy(x){
    var r = caml_ephe_get_data(x);
    if(r === 0) return 0;
    var z = r[1];
    if(Array.isArray(z)) return [0, caml_obj_dup(z)];
    return r;
   }
   function caml_ephe_get_key(x, i){
    var weak = x[caml_ephe_key_offset + i];
    if(weak === caml_ephe_none) return 0;
    if(globalThis.WeakRef && weak instanceof globalThis.WeakRef){
     weak = weak.deref();
     if(weak === undefined){
      x[caml_ephe_key_offset + i] = caml_ephe_none;
      x[caml_ephe_data_offset] = caml_ephe_none;
      return 0;
     }
    }
    return [0, weak];
   }
   function caml_ephe_get_key_copy(x, i){
    var y = caml_ephe_get_key(x, i);
    if(y === 0) return y;
    var z = y[1];
    if(Array.isArray(z)) return [0, caml_obj_dup(z)];
    return y;
   }
   function caml_ephe_set_key(x, i, v){
    var old = caml_ephe_get_data(x);
    if(globalThis.WeakRef && v instanceof Object)
     v = new globalThis.WeakRef(v);
    x[caml_ephe_key_offset + i] = v;
    caml_ephe_set_data_opt(x, old);
    return 0;
   }
   function caml_ephe_unset_key(x, i){
    var old = caml_ephe_get_data(x);
    x[caml_ephe_key_offset + i] = caml_ephe_none;
    caml_ephe_set_data_opt(x, old);
    return 0;
   }
   function caml_equal(x, y){return + (caml_compare_val(x, y, false) === 0);}
   function caml_erf_float(x){
    var
     a1 = 0.254829592,
     a2 = - 0.284496736,
     a3 = 1.421413741,
     a4 = - 1.453152027,
     a5 = 1.061405429,
     p = 0.3275911,
     sign = 1;
    if(x < 0) sign = - 1;
    x = Math.abs(x);
    var
     t = 1.0 / (1.0 + p * x),
     y =
       1.0
       -
        ((((a5 * t + a4) * t + a3) * t + a2) * t + a1) * t
        * Math.exp(- (x * x));
    return sign * y;
   }
   function caml_erfc_float(x){return 1 - caml_erf_float(x);}
   var caml_executable_name = caml_argv[1];
   function caml_exp2_float(x){return Math.pow(2, x);}
   function caml_expm1_float(x){return Math.expm1(x);}
   function caml_is_special_exception(exn){
    switch(exn[2]){case - 8:case - 11:case - 12: return 1;default: return 0;
    }
   }
   function caml_format_exception(exn){
    var r = "";
    if(exn[0] === 0){
     r += exn[1][1];
     if
      (exn.length === 3 && exn[2][0] === 0
       && caml_is_special_exception(exn[1]))
      var bucket = exn[2], start = 1;
     else
      var start = 2, bucket = exn;
     r += "(";
     for(var i = start; i < bucket.length; i++){
      if(i > start) r += ", ";
      var v = bucket[i];
      if(typeof v === "number")
       r += v.toString();
      else if(v instanceof MlBytes)
       r += '"' + v.toString() + '"';
      else if(typeof v === "string")
       r += '"' + v.toString() + '"';
      else
       r += "_";
     }
     r += ")";
    }
    else if(exn[0] === 248) r += exn[1];
    return r;
   }
   function caml_fatal_uncaught_exception(err){
    if(Array.isArray(err) && (err[0] === 0 || err[0] === 248)){
     var handler = caml_named_value("Printexc.handle_uncaught_exception");
     if(handler)
      caml_callback(handler, [err, false]);
     else{
      var
       msg = caml_format_exception(err),
       at_exit = caml_named_value("Pervasives.do_at_exit");
      if(at_exit) caml_callback(at_exit, [0]);
      console.error("Fatal error: exception " + msg);
      if(err.js_error) throw err.js_error;
     }
    }
    else
     throw err;
   }
   function caml_fill_bytes(s, i, l, c){
    if(l > 0)
     if(i === 0 && (l >= s.l || s.t === 2 && l >= s.c.length))
      if(c === 0){
       s.c = "";
       s.t = 2;
      }
      else{
       s.c = caml_str_repeat(l, String.fromCharCode(c));
       s.t = l === s.l ? 0 : 2;
      }
     else{
      if(s.t !== 4) caml_convert_bytes_to_array(s);
      for(l += i; i < l; i++) s.c[i] = c;
     }
    return 0;
   }
   function caml_final_register(_f, _x){return 0;}
   var all_finalizers = new globalThis.Set();
   function caml_final_register_called_without_value(cb, a){
    if(globalThis.FinalizationRegistry && a instanceof Object){
     var
      x =
        new
         globalThis.FinalizationRegistry
         (function(x){all_finalizers.delete(x); cb(0); return;});
     x.register(a, x);
     all_finalizers.add(x);
    }
    return 0;
   }
   function caml_final_release(_unit){return 0;}
   function caml_finish_formatting(f, rawbuffer){
    if(f.uppercase) rawbuffer = rawbuffer.toUpperCase();
    var len = rawbuffer.length;
    if(f.signedconv && (f.sign < 0 || f.signstyle !== "-")) len++;
    if(f.alternate){if(f.base === 8) len += 1; if(f.base === 16) len += 2;}
    var buffer = "";
    if(f.justify === "+" && f.filler === " ")
     for(var i = len; i < f.width; i++) buffer += " ";
    if(f.signedconv)
     if(f.sign < 0)
      buffer += "-";
     else if(f.signstyle !== "-") buffer += f.signstyle;
    if(f.alternate && f.base === 8) buffer += "0";
    if(f.alternate && f.base === 16) buffer += f.uppercase ? "0X" : "0x";
    if(f.justify === "+" && f.filler === "0")
     for(var i = len; i < f.width; i++) buffer += "0";
    buffer += rawbuffer;
    if(f.justify === "-") for(var i = len; i < f.width; i++) buffer += " ";
    return caml_string_of_jsbytes(buffer);
   }
   function caml_float_compare(x, y){
    if(x === y) return 0;
    if(x < y) return - 1;
    if(x > y) return 1;
    if(! Number.isNaN(x)) return 1;
    if(! Number.isNaN(y)) return - 1;
    return 0;
   }
   function caml_float_of_bytes(a){
    return caml_int64_float_of_bits(caml_int64_of_bytes(a));
   }
   function caml_float_of_string(s){
    var res, r_float = /^ *[-+]?(?:\d*\.?\d+|\d+\.?\d*)(?:[eE][-+]?\d+)?$/;
    s = caml_jsbytes_of_string(s);
    res = + s;
    if(! Number.isNaN(res) && r_float.test(s)) return res;
    s = s.replace(/_/g, "");
    res = + s;
    if(! Number.isNaN(res) && r_float.test(s) || /^[+-]?nan$/i.test(s))
     return res;
    var
     m = /^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)(p([+-]?[0-9]+))?$/i.exec(s);
    if(m){
     var
      m3 = m[3].replace(/0+$/, ""),
      mantissa = Number.parseInt(m[1] + m[2] + m3, 16),
      exponent = (+ m[5] || 0) - 4 * m3.length;
     res = mantissa * Math.pow(2, exponent);
     return res;
    }
    if(/^\+?inf(inity)?$/i.test(s)) return Number.POSITIVE_INFINITY;
    if(/^-inf(inity)?$/i.test(s)) return Number.NEGATIVE_INFINITY;
    caml_failwith("float_of_string");
   }
   function caml_floatarray_append(a1, a2){return caml_array_append(a1, a2);}
   function caml_floatarray_blit(a1, i1, a2, i2, len){return caml_array_blit(a1, i1, a2, i2, len);
   }
   function caml_floatarray_create(len){
    if(len >>> 0 >= (0x7fffffff / 8 | 0)) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 254;
    for(var i = 1; i < len; i++) b[i] = 0;
    return b;
   }
   function caml_floatarray_fill(array, ofs, len, v){return caml_array_fill(array, ofs, len, v);
   }
   function caml_floatarray_fill_unboxed(array, ofs, len, v){return caml_array_fill(array, ofs, len, v);
   }
   function caml_floatarray_make(len, init){
    if(len >>> 0 >= (0x7fffffff / 8 | 0)) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 254;
    for(var i = 1; i < len; i++) b[i] = init;
    return b;
   }
   function caml_floatarray_make_unboxed(len, init){return caml_floatarray_make(len, init);
   }
   function caml_floatarray_sub(a, i, len){return caml_array_sub(a, i, len);}
   function caml_fma_float(x, y, z){
    var
     SPLIT = Math.pow(2, 27) + 1,
     MIN_VALUE = Math.pow(2, - 1022),
     EPSILON = Math.pow(2, - 52),
     C = 416,
     A = Math.pow(2, + C),
     B = Math.pow(2, - C);
    function multiply(a, b){
     var
      at = SPLIT * a,
      ahi = at - (at - a),
      alo = a - ahi,
      bt = SPLIT * b,
      bhi = bt - (bt - b),
      blo = b - bhi,
      p = a * b,
      e = ahi * bhi - p + ahi * blo + alo * bhi + alo * blo;
     return {p: p, e: e};
    }
    function add(a, b){
     var s = a + b, v = s - a, e = a - (s - v) + (b - v);
     return {s: s, e: e};
    }
    function adjust(x, y){
     return x !== 0 && y !== 0 && SPLIT * x - (SPLIT * x - x) === x
             ? x * (1 + (x < 0 ? - 1 : + 1) * (y < 0 ? - 1 : + 1) * EPSILON)
             : x;
    }
    if(x === 0 || y === 0 || ! Number.isFinite(x) || ! Number.isFinite(y))
     return x * y + z;
    if(z === 0) return x * y;
    if(! Number.isFinite(z)) return z;
    var scale = 1;
    while(Math.abs(x) > A){scale *= A; x *= B;}
    while(Math.abs(y) > A){scale *= A; y *= B;}
    if(scale === 1 / 0) return x * y * scale;
    while(Math.abs(x) < B){scale *= B; x *= A;}
    while(Math.abs(y) < B){scale *= B; y *= A;}
    if(scale === 0) return z;
    var xs = x, ys = y, zs = z / scale;
    if(Math.abs(zs) > Math.abs(xs * ys) * 4 / EPSILON) return z;
    if(Math.abs(zs) < Math.abs(xs * ys) * EPSILON / 4 * EPSILON / 4)
     zs = (z < 0 ? - 1 : + 1) * MIN_VALUE;
    var
     xy = multiply(xs, ys),
     s = add(xy.p, zs),
     u = add(xy.e, s.e),
     i = add(s.s, u.s),
     f = i.s + adjust(i.e, u.e);
    if(f === 0) return f;
    var fs = f * scale;
    if(Math.abs(fs) > MIN_VALUE) return fs;
    return fs + adjust(f - fs / scale, i.e) * scale;
   }
   function caml_parse_format(fmt){
    fmt = caml_jsbytes_of_string(fmt);
    var len = fmt.length;
    if(len > 31) caml_invalid_argument("format_int: format too long");
    var
     f =
       {justify: "+",
        signstyle: "-",
        filler: " ",
        alternate: false,
        base: 0,
        signedconv: false,
        width: 0,
        uppercase: false,
        sign: 1,
        prec: - 1,
        conv: "f"};
    for(var i = 0; i < len; i++){
     var c = fmt.charAt(i);
     switch(c){
       case "-":
        f.justify = "-"; break;
       case "+":
       case " ":
        f.signstyle = c; break;
       case "0":
        f.filler = "0"; break;
       case "#":
        f.alternate = true; break;
       case "1":
       case "2":
       case "3":
       case "4":
       case "5":
       case "6":
       case "7":
       case "8":
       case "9":
        f.width = 0;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.width = f.width * 10 + c; i++;}
        i--;
        break;
       case ".":
        f.prec = 0;
        i++;
        while(c = fmt.charCodeAt(i) - 48, c >= 0 && c <= 9){f.prec = f.prec * 10 + c; i++;}
        i--;
        break;
       case "d":
       case "i":
        f.signedconv = true; f.base = 10; break;
       case "u":
        f.base = 10; break;
       case "x":
        f.base = 16; break;
       case "X":
        f.base = 16; f.uppercase = true; break;
       case "o":
        f.base = 8; break;
       case "e":
       case "f":
       case "g":
        f.signedconv = true; f.conv = c; break;
       case "E":
       case "F":
       case "G":
        f.signedconv = true;
        f.uppercase = true;
        f.conv = c.toLowerCase();
        break;
     }
    }
    return f;
   }
   function caml_format_float(fmt, x){
    function toFixed(x, dp){
     if(Math.abs(x) < 1.0)
      return x.toFixed(dp);
     else{
      var e = Number.parseInt(x.toString().split("+")[1]);
      if(e > 20){
       e -= 20;
       x /= Math.pow(10, e);
       x += caml_str_repeat(e, "0");
       if(dp > 0) x = x + "." + caml_str_repeat(dp, "0");
       return x;
      }
      else
       return x.toFixed(dp);
     }
    }
    var s, f = caml_parse_format(fmt), prec = f.prec < 0 ? 6 : f.prec;
    if(x < 0 || x === 0 && 1 / x === Number.NEGATIVE_INFINITY){f.sign = - 1; x = - x;}
    if(Number.isNaN(x)){
     s = "nan";
     f.filler = " ";
    }
    else if(! Number.isFinite(x)){s = "inf"; f.filler = " ";}
    else
     switch(f.conv){
       case "e":
        var s = x.toExponential(prec), i = s.length;
        if(s.charAt(i - 3) === "e")
         s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
        break;
       case "f":
        s = toFixed(x, prec); break;
       case "g":
        prec = prec ? prec : 1;
        s = x.toExponential(prec - 1);
        var j = s.indexOf("e"), exp = + s.slice(j + 1);
        if(exp < - 4 || x >= 1e21 || x.toFixed(0).length > prec){
         var i = j - 1;
         while(s.charAt(i) === "0") i--;
         if(s.charAt(i) === ".") i--;
         s = s.slice(0, i + 1) + s.slice(j);
         i = s.length;
         if(s.charAt(i - 3) === "e")
          s = s.slice(0, i - 1) + "0" + s.slice(i - 1);
         break;
        }
        else{
         var p = prec;
         if(exp < 0){
          p -= exp + 1;
          s = x.toFixed(p);
         }
         else
          while(s = x.toFixed(p), s.length > prec + 1) p--;
         if(p){
          var i = s.length - 1;
          while(s.charAt(i) === "0") i--;
          if(s.charAt(i) === ".") i--;
          s = s.slice(0, i + 1);
         }
        }
        break;
     }
    return caml_finish_formatting(f, s);
   }
   function caml_format_int(fmt, i){
    if(caml_jsbytes_of_string(fmt) === "%d")
     return caml_string_of_jsbytes("" + i);
    var f = caml_parse_format(fmt);
    if(i < 0) if(f.signedconv){f.sign = - 1; i = - i;} else i >>>= 0;
    var s = i.toString(f.base);
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - s.length;
     if(n > 0) s = caml_str_repeat(n, "0") + s;
    }
    return caml_finish_formatting(f, s);
   }
   var caml_oo_last_id = 0;
   function caml_fresh_oo_id(){return caml_oo_last_id++;}
   function caml_frexp_float(x){
    if(x === 0 || ! Number.isFinite(x)) return [0, x, 0];
    var neg = x < 0;
    if(neg) x = - x;
    var exp = Math.max(- 1023, Math.floor(Math.log2(x)) + 1);
    x *= Math.pow(2, - exp);
    while(x < 0.5){x *= 2; exp--;}
    while(x >= 1){x *= 0.5; exp++;}
    if(neg) x = - x;
    return [0, x, exp];
   }
   function jsoo_create_file(name, content){
    var
     name = caml_string_of_jsstring(name),
     content = caml_string_of_jsbytes(content);
    return caml_create_file(name, content);
   }
   function caml_fs_init(){
    var tmp = globalThis.jsoo_fs_tmp;
    if(tmp)
     for(var i = 0; i < tmp.length; i++)
      jsoo_create_file(tmp[i].name, tmp[i].content);
    globalThis.jsoo_create_file = jsoo_create_file;
    globalThis.jsoo_fs_tmp = [];
    return 0;
   }
   function caml_gc_compaction(_unit){return 0;}
   function caml_gc_counters(_unit){return [254, 0, 0, 0];}
   function caml_gc_full_major(_unit){
    if(typeof globalThis.gc === "function") globalThis.gc();
    return 0;
   }
   function caml_gc_get(_unit){return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];}
   function caml_gc_major(_unit){
    if(typeof globalThis.gc === "function") globalThis.gc();
    return 0;
   }
   function caml_gc_major_slice(_work){return 0;}
   function caml_gc_minor(_unit){
    if(typeof globalThis.gc === "function") globalThis.gc(true);
    return 0;
   }
   function caml_gc_minor_words(_unit){return 0;}
   function caml_gc_quick_stat(_unit){
    return [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
   }
   function caml_gc_set(_control){return 0;}
   function caml_gc_stat(unit){return caml_gc_quick_stat(unit);}
   var caml_method_cache = [];
   function caml_get_cached_method(obj, tag, cacheid){
    var meths = obj[1], ofs = caml_method_cache[cacheid];
    if(meths[ofs + 4] === tag) return meths[ofs + 3];
    var li = 3, hi = meths[1] * 2 + 1, mi;
    while(li < hi){
     mi = li + hi >> 1 | 1;
     if(tag < meths[mi + 1]) hi = mi - 2; else li = mi;
    }
    caml_method_cache[cacheid] = li - 3;
    return meths[li];
   }
   function caml_get_continuation_callstack(){return [0];}
   function caml_get_current_callstack(){return [0];}
   function caml_get_exception_backtrace(){return 0;}
   function caml_get_exception_raw_backtrace(_unit){return [0];}
   function caml_get_global_data(_unit){return caml_global_data;}
   function caml_get_minor_free(_unit){return 0;}
   function caml_get_public_method(obj, tag){
    var meths = obj[1], li = 3, hi = meths[1] * 2 + 1, mi;
    while(li < hi){
     mi = li + hi >> 1 | 1;
     if(tag < meths[mi + 1]) hi = mi - 2; else li = mi;
    }
    return tag === meths[li + 1] ? meths[li] : 0;
   }
   function caml_gr_arc_aux(ctx, cx, cy, ry, rx, a1, a2){
    while(a1 > a2) a2 += 360;
    a1 /= 180;
    a2 /= 180;
    var
     rot = 0,
     xPos,
     yPos,
     xPos_prev,
     yPos_prev,
     space = 2,
     num = (a2 - a1) * Math.PI * ((rx + ry) / 2) / space | 0,
     delta = (a2 - a1) * Math.PI / num,
     i = a1 * Math.PI;
    for(var j = 0; j <= num; j++){
     xPos =
      cx - rx * Math.sin(i) * Math.sin(rot * Math.PI)
      + ry * Math.cos(i) * Math.cos(rot * Math.PI);
     xPos = xPos.toFixed(2);
     yPos =
      cy + ry * Math.cos(i) * Math.sin(rot * Math.PI)
      + rx * Math.sin(i) * Math.cos(rot * Math.PI);
     yPos = yPos.toFixed(2);
     if(j === 0)
      ctx.moveTo(xPos, yPos);
     else if(xPos_prev !== xPos || yPos_prev !== yPos) ctx.lineTo(xPos, yPos);
     xPos_prev = xPos;
     yPos_prev = yPos;
     i -= delta;
    }
    return 0;
   }
   var caml_gr_state;
   function caml_gr_state_get(){
    if(caml_gr_state) return caml_gr_state;
    throw caml_maybe_attach_backtrace
           ([0,
             caml_named_value("Graphics.Graphic_failure"),
             caml_string_of_jsbytes("Not initialized")]);
   }
   function caml_gr_blit_image(im, x, y){
    var
     s = caml_gr_state_get(),
     im2 =
       s.context.getImageData
        (x, s.height - im.height - y, im.width, im.height);
    for(var i = 0; i < im2.data.length; i += 4){
     im.data[i] = im2.data[i];
     im.data[i + 1] = im2.data[i + 1];
     im.data[i + 2] = im2.data[i + 2];
     im.data[i + 3] = im2.data[i + 3];
    }
    return 0;
   }
   function caml_gr_clear_graph(){
    var s = caml_gr_state_get();
    s.canvas.width = s.width;
    s.canvas.height = s.height;
    return 0;
   }
   function caml_gr_close_graph(){
    var s = caml_gr_state_get();
    s.canvas.width = 0;
    s.canvas.height = 0;
    return 0;
   }
   function caml_gr_close_subwindow(_a){
    caml_failwith("caml_gr_close_subwindow not Implemented");
   }
   function caml_gr_create_image(x, y){
    var s = caml_gr_state_get();
    return s.context.createImageData(x, y);
   }
   function caml_gr_current_x(){var s = caml_gr_state_get(); return s.x;}
   function caml_gr_current_y(){var s = caml_gr_state_get(); return s.y;}
   function caml_gr_display_mode(){
    caml_failwith("caml_gr_display_mode not Implemented");
   }
   function caml_gr_doc_of_state(state){
    if(state.canvas.ownerDocument) return state.canvas.ownerDocument;
   }
   function caml_gr_draw_arc(x, y, rx, ry, a1, a2){
    var s = caml_gr_state_get();
    s.context.beginPath();
    caml_gr_arc_aux(s.context, x, s.height - y, rx, ry, a1, a2);
    s.context.stroke();
    return 0;
   }
   function caml_gr_draw_str(str){
    var s = caml_gr_state_get(), m = s.context.measureText(str), dx = m.width;
    s.context.fillText(str, s.x, s.height - s.y);
    s.x += dx | 0;
    return 0;
   }
   function caml_gr_draw_char(c){
    caml_gr_draw_str(String.fromCharCode(c));
    return 0;
   }
   function caml_gr_draw_image(im, x, y){
    var s = caml_gr_state_get();
    if(! im.image){
     var canvas = document.createElement("canvas");
     canvas.width = s.width;
     canvas.height = s.height;
     canvas.getContext("2d").putImageData(im, 0, 0);
     var image = new globalThis.Image();
     image.onload =
      function(){
       s.context.drawImage(image, x, s.height - im.height - y);
       im.image = image;
      };
     image.src = canvas.toDataURL("image/png");
    }
    else
     s.context.drawImage(im.image, x, s.height - im.height - y);
    return 0;
   }
   function caml_gr_draw_rect(x, y, w, h){
    var s = caml_gr_state_get();
    s.context.strokeRect(x, s.height - y, w, - h);
    return 0;
   }
   function caml_gr_draw_string(str){
    caml_gr_draw_str(caml_jsstring_of_string(str));
    return 0;
   }
   function caml_gr_dump_image(im){
    var data = [0];
    for(var i = 0; i < im.height; i++){
     data[i + 1] = [0];
     for(var j = 0; j < im.width; j++){
      var
       o = i * (im.width * 4) + j * 4,
       r = im.data[o + 0],
       g = im.data[o + 1],
       b = im.data[o + 2];
      data[i + 1][j + 1] = (r << 16) + (g << 8) + b;
     }
    }
    return data;
   }
   function caml_gr_fill_arc(x, y, rx, ry, a1, a2){
    var s = caml_gr_state_get();
    s.context.beginPath();
    caml_gr_arc_aux(s.context, x, s.height - y, rx, ry, a1, a2);
    s.context.fill();
    return 0;
   }
   function caml_gr_fill_poly(ar){
    var s = caml_gr_state_get();
    s.context.beginPath();
    s.context.moveTo(ar[1][1], s.height - ar[1][2]);
    for(var i = 2; i < ar.length; i++)
     s.context.lineTo(ar[i][1], s.height - ar[i][2]);
    s.context.lineTo(ar[1][1], s.height - ar[1][2]);
    s.context.fill();
    return 0;
   }
   function caml_gr_fill_rect(x, y, w, h){
    var s = caml_gr_state_get();
    s.context.fillRect(x, s.height - y, w, - h);
    return 0;
   }
   function caml_gr_lineto(x, y){
    var s = caml_gr_state_get();
    s.context.beginPath();
    s.context.moveTo(s.x, s.height - s.y);
    s.context.lineTo(x, s.height - y);
    s.context.stroke();
    s.x = x;
    s.y = y;
    return 0;
   }
   function caml_gr_make_image(arr){
    var
     s = caml_gr_state_get(),
     h = arr.length - 1,
     w = arr[1].length - 1,
     im = s.context.createImageData(w, h);
    for(var i = 0; i < h; i++)
     for(var j = 0; j < w; j++){
      var c = arr[i + 1][j + 1], o = i * (w * 4) + j * 4;
      if(c === - 1){
       im.data[o + 0] = 0;
       im.data[o + 1] = 0;
       im.data[o + 2] = 0;
       im.data[o + 3] = 0;
      }
      else{
       im.data[o + 0] = c >> 16 & 0xff;
       im.data[o + 1] = c >> 8 & 0xff;
       im.data[o + 2] = c >> 0 & 0xff;
       im.data[o + 3] = 0xff;
      }
     }
    return im;
   }
   function caml_gr_moveto(x, y){
    var s = caml_gr_state_get();
    s.x = x;
    s.y = y;
    return 0;
   }
   function caml_gr_set_window_title(name){
    var s = caml_gr_state_get();
    s.title = name;
    var jsname = caml_jsstring_of_string(name);
    if(s.set_title) s.set_title(jsname);
    return 0;
   }
   function caml_gr_set_line_width(w){
    var s = caml_gr_state_get();
    s.line_width = w;
    s.context.lineWidth = w;
    return 0;
   }
   function caml_gr_set_text_size(size){
    var s = caml_gr_state_get();
    s.text_size = size;
    s.context.font = s.text_size + "px " + caml_jsstring_of_string(s.font);
    return 0;
   }
   function caml_gr_set_font(f){
    var s = caml_gr_state_get();
    s.font = f;
    s.context.font = s.text_size + "px " + caml_jsstring_of_string(s.font);
    return 0;
   }
   function caml_gr_set_color(color){
    var s = caml_gr_state_get();
    function convert(number){
     var str = "" + number.toString(16);
     while(str.length < 2) str = "0" + str;
     return str;
    }
    var r = color >> 16 & 0xff, g = color >> 8 & 0xff, b = color >> 0 & 0xff;
    s.color = color;
    var c_str = "#" + convert(r) + convert(g) + convert(b);
    s.context.fillStyle = c_str;
    s.context.strokeStyle = c_str;
    return 0;
   }
   function caml_gr_resize_window(w, h){
    var s = caml_gr_state_get();
    s.width = w;
    s.height = h;
    s.canvas.width = w;
    s.canvas.height = h;
    return 0;
   }
   function caml_gr_state_init(){
    caml_gr_moveto(caml_gr_state.x, caml_gr_state.y);
    caml_gr_resize_window(caml_gr_state.width, caml_gr_state.height);
    caml_gr_set_line_width(caml_gr_state.line_width);
    caml_gr_set_text_size(caml_gr_state.text_size);
    caml_gr_set_font(caml_gr_state.font);
    caml_gr_set_color(caml_gr_state.color);
    caml_gr_set_window_title(caml_gr_state.title);
    caml_gr_state.context.textBaseline = "bottom";
   }
   function caml_gr_state_set(ctx){
    caml_gr_state = ctx;
    caml_gr_state_init();
    return 0;
   }
   function caml_gr_state_create(canvas, w, h){
    var context = canvas.getContext("2d");
    return {context: context,
            canvas: canvas,
            x: 0,
            y: 0,
            width: w,
            height: h,
            line_width: 1,
            font: caml_string_of_jsbytes("fixed"),
            text_size: 26,
            color: 0x000000,
            title: caml_string_of_jsbytes("")};
   }
   function caml_gr_open_graph(info){
    var info = caml_jsstring_of_string(info);
    function get(name){
     var res = info.match("(^|,) *" + name + " *= *([a-zA-Z0-9_]+) *(,|$)");
     if(res) return res[2];
    }
    var specs = [];
    if(! (info === "")) specs.push(info);
    var target = get("target");
    if(! target) target = "";
    var status = get("status");
    if(! status) specs.push("status=1");
    var w = get("width");
    w = w ? Number.parseInt(w) : 200;
    specs.push("width=" + w);
    var h = get("height");
    h = h ? Number.parseInt(h) : 200;
    specs.push("height=" + h);
    var win = globalThis.open("about:blank", target, specs.join(","));
    if(! win) caml_failwith("Graphics.open_graph: cannot open the window");
    var doc = win.document, canvas = doc.createElement("canvas");
    canvas.width = w;
    canvas.height = h;
    var ctx = caml_gr_state_create(canvas, w, h);
    ctx.set_title = function(title){doc.title = title;};
    caml_gr_state_set(ctx);
    var body = doc.body;
    body.style.margin = "0px";
    body.appendChild(canvas);
    return 0;
   }
   function caml_gr_open_subwindow(_a, _b, _c, _d){
    caml_failwith("caml_gr_open_subwindow not Implemented");
   }
   function caml_gr_plot(x, y){
    var
     s = caml_gr_state_get(),
     im = s.context.createImageData(1, 1),
     d = im.data,
     color = s.color;
    d[0] = color >> 16 & 0xff;
    d[1] = color >> 8 & 0xff, d[2] = color >> 0 & 0xff;
    d[3] = 0xff;
    s.x = x;
    s.y = y;
    s.context.putImageData(im, x, s.height - y);
    return 0;
   }
   function caml_gr_point_color(x, y){
    var
     s = caml_gr_state_get(),
     im = s.context.getImageData(x, s.height - y, 1, 1),
     d = im.data;
    return (d[0] << 16) + (d[1] << 8) + d[2];
   }
   function caml_gr_remember_mode(){
    caml_failwith("caml_gr_remember_mode not Implemented");
   }
   function caml_gr_sigio_handler(){return 0;}
   function caml_gr_sigio_signal(){return 0;}
   function caml_gr_size_x(){var s = caml_gr_state_get(); return s.width;}
   function caml_gr_size_y(){var s = caml_gr_state_get(); return s.height;}
   function caml_gr_synchronize(){
    caml_failwith("caml_gr_synchronize not Implemented");
   }
   function caml_gr_text_size(txt){
    var
     s = caml_gr_state_get(),
     w = s.context.measureText(caml_jsstring_of_string(txt)).width;
    return [0, w, s.text_size];
   }
   function caml_gr_wait_event(_evl){
    caml_failwith
     ("caml_gr_wait_event not Implemented: use Graphics_js instead");
   }
   function caml_gr_window_id(_a){
    caml_failwith("caml_gr_window_id not Implemented");
   }
   function caml_greaterequal(x, y){
    return + (caml_compare_val(x, y, false) >= 0);
   }
   function caml_greaterthan(x, y){
    return + (caml_compare_val(x, y, false) > 0);
   }
   function caml_hash_mix_jsbytes(h, s){
    var len = s.length, i, w;
    for(i = 0; i + 4 <= len; i += 4){
     w =
      s.charCodeAt(i) | s.charCodeAt(i + 1) << 8 | s.charCodeAt(i + 2) << 16
      | s.charCodeAt(i + 3) << 24;
     h = caml_hash_mix_int(h, w);
    }
    w = 0;
    switch(len & 3){
      case 3:
       w = s.charCodeAt(i + 2) << 16;
      case 2:
       w |= s.charCodeAt(i + 1) << 8;
      case 1:
       w |= s.charCodeAt(i); h = caml_hash_mix_int(h, w);
    }
    h ^= len;
    return h;
   }
   function caml_hash_mix_string(h, v){
    return caml_hash_mix_jsbytes(h, caml_jsbytes_of_string(v));
   }
   function caml_hash_mix_bytes_arr(h, s){
    var len = s.length, i, w;
    for(i = 0; i + 4 <= len; i += 4){
     w = s[i] | s[i + 1] << 8 | s[i + 2] << 16 | s[i + 3] << 24;
     h = caml_hash_mix_int(h, w);
    }
    w = 0;
    switch(len & 3){
      case 3:
       w = s[i + 2] << 16;
      case 2:
       w |= s[i + 1] << 8;
      case 1:
       w |= s[i]; h = caml_hash_mix_int(h, w);
    }
    h ^= len;
    return h;
   }
   function caml_ml_bytes_content(s){
    switch(s.t & 6){
      case 2:
       caml_convert_string_to_bytes(s); return s.c;
      default: return s.c;
    }
   }
   function caml_hash_mix_bytes(h, v){
    var content = caml_ml_bytes_content(v);
    return typeof content === "string"
            ? caml_hash_mix_jsbytes(h, content)
            : caml_hash_mix_bytes_arr(h, content);
   }
   function caml_hash_mix_final(h){
    h ^= h >>> 16;
    h = caml_mul(h, 0x85ebca6b | 0);
    h ^= h >>> 13;
    h = caml_mul(h, 0xc2b2ae35 | 0);
    h ^= h >>> 16;
    return h;
   }
   function caml_hash(count, limit, seed, obj){
    var queue, rd, wr, sz, num, h, v, i, len;
    sz = limit;
    if(sz < 0 || sz > 256) sz = 256;
    num = count;
    h = seed;
    queue = [obj];
    rd = 0;
    wr = 1;
    while(rd < wr && num > 0){
     v = queue[rd++];
     if(v?.caml_custom){
      if
       (caml_custom_ops[v.caml_custom] && caml_custom_ops[v.caml_custom].hash){
       var hh = caml_custom_ops[v.caml_custom].hash(v);
       h = caml_hash_mix_int(h, hh);
       num--;
      }
     }
     else if(Array.isArray(v) && v[0] === (v[0] | 0))
      switch(v[0]){
        case 248:
         h = caml_hash_mix_int(h, v[2]); num--; break;
        case 250:
         queue[--rd] = v[1]; break;
        default:
         if(caml_is_continuation_tag(v[0])) break;
         var tag = v.length - 1 << 10 | v[0];
         h = caml_hash_mix_int(h, tag);
         for(i = 1, len = v.length; i < len; i++){if(wr >= sz) break; queue[wr++] = v[i];
         }
         break;
      }
     else if(caml_is_ml_bytes(v)){
      h = caml_hash_mix_bytes(h, v);
      num--;
     }
     else if(caml_is_ml_string(v)){
      h = caml_hash_mix_string(h, v);
      num--;
     }
     else if(typeof v === "string"){
      h = caml_hash_mix_jsbytes(h, v);
      num--;
     }
     else if(v === (v | 0)){
      h = caml_hash_mix_int(h, v + v + 1);
      num--;
     }
     else if(typeof v === "number"){h = caml_hash_mix_float(h, v); num--;}
    }
    h = caml_hash_mix_final(h);
    return h & 0x3fffffff;
   }
   function caml_hash_mix_bigstring(h, bs){
    return caml_hash_mix_bytes_arr(h, bs.data);
   }
   function caml_hash_mix_int64(h, v){
    h = caml_hash_mix_int(h, caml_int64_lo32(v));
    h = caml_hash_mix_int(h, caml_int64_hi32(v));
    return h;
   }
   function num_digits_nat(nat, ofs, len){
    for(var i = len - 1; i >= 0; i--)
     if(nat.data[ofs + i] !== 0) return i + 1;
    return 1;
   }
   function caml_hash_nat(x){
    var len = num_digits_nat(x, 0, x.data.length), h = 0;
    for(var i = 0; i < len; i++) h = caml_hash_mix_int(h, x.data[i]);
    return h;
   }
   function caml_hexstring_of_float(x, prec, style){
    if(! Number.isFinite(x)){
     if(Number.isNaN(x)) return caml_string_of_jsstring("nan");
     return caml_string_of_jsstring(x > 0 ? "infinity" : "-infinity");
    }
    var
     sign = x === 0 && 1 / x === Number.NEGATIVE_INFINITY ? 1 : x >= 0 ? 0 : 1;
    if(sign) x = - x;
    var exp = 0;
    if(x === 0)
     ;
    else if(x < 1)
     while(x < 1 && exp > - 1022){x *= 2; exp--;}
    else
     while(x >= 2){x /= 2; exp++;}
    var exp_sign = exp < 0 ? "" : "+", sign_str = "";
    if(sign)
     sign_str = "-";
    else
     switch(style){
       case 43:
        sign_str = "+"; break;
       case 32:
        sign_str = " "; break;
       default: break;
     }
    if(prec >= 0 && prec < 13){
     var cst = Math.pow(2, prec * 4);
     x = Math.round(x * cst) / cst;
    }
    var x_str = x.toString(16);
    if(prec >= 0){
     var idx = x_str.indexOf(".");
     if(idx < 0)
      x_str += "." + caml_str_repeat(prec, "0");
     else{
      var size = idx + 1 + prec;
      if(x_str.length < size)
       x_str += caml_str_repeat(size - x_str.length, "0");
      else
       x_str = x_str.slice(0, size);
     }
    }
    return caml_string_of_jsstring
            (sign_str + "0x" + x_str + "p" + exp_sign + exp.toString(10));
   }
   function caml_hypot_float(x, y){return Math.hypot(x, y);}
   var caml_marshal_header_size = 16;
   function caml_refill(chan){
    if(chan.refill != null){
     var str = chan.refill(), str_a = caml_uint8_array_of_string(str);
     if(str_a.length === 0)
      chan.refill = null;
     else{
      if(chan.buffer.length < chan.buffer_max + str_a.length){
       var b = new Uint8Array(chan.buffer_max + str_a.length);
       b.set(chan.buffer);
       chan.buffer = b;
      }
      chan.buffer.set(str_a, chan.buffer_max);
      chan.offset += str_a.length;
      chan.buffer_max += str_a.length;
     }
    }
    else{
     if(chan.fd === - 1) caml_raise_sys_error("Bad file descriptor");
     var
      nread =
        chan.file.read
         (chan.buffer, chan.buffer_max, chan.buffer.length - chan.buffer_max);
     chan.offset += nread;
     chan.buffer_max += nread;
    }
   }
   function caml_raise_end_of_file(){
    caml_raise_constant(caml_global_data.End_of_file);
   }
   function caml_marshal_data_size(s, ofs){
    var r = new UInt8ArrayReader(caml_uint8_array_of_bytes(s), ofs);
    function readvlq(overflow){
     var c = r.read8u(), n = c & 0x7f;
     while((c & 0x80) !== 0){
      c = r.read8u();
      var n7 = n << 7;
      if(n !== n7 >> 7) overflow[0] = true;
      n = n7 | c & 0x7f;
     }
     return n;
    }
    switch(r.read32u()){
      case 0x8495a6be:
       var header_len = 20, data_len = r.read32u(); break;
      case 0x8495a6bd:
       var
        header_len = r.read8u() & 0x3f,
        overflow = [false],
        data_len = readvlq(overflow);
       if(overflow[0])
        caml_failwith
         ("Marshal.data_size: object too large to be read back on this platform");
       break;
      case 0x8495a6bf:
       caml_failwith
        ("Marshal.data_size: object too large to be read back on a 32-bit platform");
       break;
      default: caml_failwith("Marshal.data_size: bad object"); break;
    }
    return header_len - caml_marshal_header_size + data_len;
   }
   function caml_set_oo_id(b){b[2] = caml_oo_last_id++; return b;}
   function caml_input_value_from_reader(reader){
    function readvlq(overflow){
     var c = reader.read8u(), n = c & 0x7f;
     while((c & 0x80) !== 0){
      c = reader.read8u();
      var n7 = n << 7;
      if(n !== n7 >> 7) overflow[0] = true;
      n = n7 | c & 0x7f;
     }
     return n;
    }
    var old_pos = reader.i, magic = reader.read32u();
    switch(magic){
      case 0x8495a6be:
       var
        header_len = 20,
        compressed = 0,
        data_len = reader.read32u(),
        uncompressed_data_len = data_len,
        num_objects = reader.read32u(),
        _size_32 = reader.read32u(),
        _size_64 = reader.read32u();
       break;
      case 0x8495a6bd:
       var
        header_len = reader.read8u() & 0x3f,
        compressed = 1,
        overflow = [false],
        data_len = readvlq(overflow),
        uncompressed_data_len = readvlq(overflow),
        num_objects = readvlq(overflow),
        _size_32 = readvlq(overflow),
        _size_64 = readvlq(overflow);
       if(overflow[0])
        caml_failwith
         ("caml_input_value_from_reader: object too large to be read back on this platform");
       break;
      case 0x8495a6bf:
       caml_failwith
        ("caml_input_value_from_reader: object too large to be read back on a 32-bit platform");
       break;
      default:
       caml_failwith("caml_input_value_from_reader: bad object"); break;
    }
    if(header_len !== reader.i - old_pos)
     caml_failwith("caml_input_value_from_reader: invalid header");
    var
     stack = [],
     objects = [],
     intern_obj_table = num_objects > 0 ? [] : null,
     obj_counter = 0;
    function intern_rec(reader){
     var code = reader.read8u();
     if(code >= 0x40)
      if(code >= 0x80){
       var tag = code & 0xf, size = code >> 4 & 0x7, v = [tag];
       if(size === 0) return v;
       if(intern_obj_table) intern_obj_table[obj_counter++] = v;
       if(tag === 248) objects.push(v);
       stack.push(v, size);
       return v;
      }
      else
       return code & 0x3f;
     else if(code >= 0x20){
      var len = code & 0x1f, v = reader.readstr(len);
      if(intern_obj_table) intern_obj_table[obj_counter++] = v;
      return v;
     }
     else
      switch(code){
        case 0x00:
         return reader.read8s();
        case 0x01:
         return reader.read16s();
        case 0x02:
         return reader.read32s();
        case 0x03:
         caml_failwith("input_value: integer too large"); break;
        case 0x04:
         var offset = reader.read8u();
         if(compressed === 0) offset = obj_counter - offset;
         return intern_obj_table[offset];
        case 0x05:
         var offset = reader.read16u();
         if(compressed === 0) offset = obj_counter - offset;
         return intern_obj_table[offset];
        case 0x06:
         var offset = reader.read32u();
         if(compressed === 0) offset = obj_counter - offset;
         return intern_obj_table[offset];
        case 0x08:
         var
          header = reader.read32u(),
          tag = header & 0xff,
          size = header >> 10,
          v = [tag];
         if(size === 0) return v;
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         if(tag === 248) objects.push(v);
         stack.push(v, size);
         return v;
        case 0x13:
         caml_failwith("input_value: data block too large"); break;
        case 0x09:
         var len = reader.read8u(), v = reader.readstr(len);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0a:
         var len = reader.read32u(), v = reader.readstr(len);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0c:
         var t = new Array(8);
         for(var i = 0; i < 8; i++) t[7 - i] = reader.read8u();
         var v = caml_float_of_bytes(t);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0b:
         var t = new Array(8);
         for(var i = 0; i < 8; i++) t[i] = reader.read8u();
         var v = caml_float_of_bytes(t);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        case 0x0e:
         var len = reader.read8u(), v = new Array(len + 1);
         v[0] = 254;
         var t = new Array(8);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[7 - j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x0d:
         var len = reader.read8u(), v = new Array(len + 1);
         v[0] = 254;
         var t = new Array(8);
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x07:
         var len = reader.read32u(), v = new Array(len + 1);
         v[0] = 254;
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         var t = new Array(8);
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[7 - j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x0f:
         var len = reader.read32u(), v = new Array(len + 1);
         v[0] = 254;
         var t = new Array(8);
         for(var i = 1; i <= len; i++){
          for(var j = 0; j < 8; j++) t[j] = reader.read8u();
          v[i] = caml_float_of_bytes(t);
         }
         return v;
        case 0x10:
        case 0x11:
         caml_failwith("input_value: code pointer"); break;
        case 0x12:
        case 0x18:
        case 0x19:
         var c, s = "";
         while((c = reader.read8u()) !== 0) s += String.fromCharCode(c);
         var ops = caml_custom_ops[s], expected_size;
         if(! ops)
          caml_failwith("input_value: unknown custom block identifier");
         switch(code){
           case 0x12: break;
           case 0x19:
            if(! ops.fixed_length)
             caml_failwith("input_value: expected a fixed-size custom block");
            expected_size = ops.fixed_length;
            break;
           case 0x18:
            expected_size = reader.read32u();
            reader.read32s();
            reader.read32s();
            break;
         }
         var size = [0], v = ops.deserialize(reader, size);
         if(expected_size !== undefined)
          if(expected_size !== size[0])
           caml_failwith
            ("input_value: incorrect length of serialized custom block");
         if(intern_obj_table) intern_obj_table[obj_counter++] = v;
         return v;
        default: caml_failwith("input_value: ill-formed message");
      }
    }
    if(compressed)
     if(caml_decompress_input)
      var
       data = reader.readuint8array(data_len),
       res = new Uint8Array(uncompressed_data_len),
       res = caml_decompress_input(data, res),
       reader = new UInt8ArrayReader(res, 0);
     else
      caml_failwith("input_value: compressed object, cannot decompress");
    var res = intern_rec(reader);
    while(stack.length > 0){
     var size = stack.pop(), v = stack.pop(), d = v.length;
     if(d < size) stack.push(v, size);
     v[d] = intern_rec(reader);
    }
    while(objects.length > 0){
     var x = objects.pop();
     if(x[2] >= 0) caml_set_oo_id(x);
    }
    return res;
   }
   function caml_input_value_from_bytes(s, ofs){
    var
     c = caml_ml_bytes_content(s),
     ofs = typeof ofs === "number" ? ofs : ofs[0],
     reader =
       c instanceof Uint8Array
        ? new UInt8ArrayReader(c, ofs)
        : new JsStringReader(c, ofs);
    return caml_input_value_from_reader(reader);
   }
   function caml_input_value(chanid){
    var
     chan = caml_ml_channel_get(chanid),
     header = new Uint8Array(caml_marshal_header_size);
    function block(buffer, offset, n){
     var r = 0;
     while(r < n){
      if(chan.buffer_curr >= chan.buffer_max){
       chan.buffer_curr = 0;
       chan.buffer_max = 0;
       caml_refill(chan);
      }
      if(chan.buffer_curr >= chan.buffer_max) break;
      buffer[offset + r] = chan.buffer[chan.buffer_curr];
      chan.buffer_curr++;
      r++;
     }
     return r;
    }
    var r = block(header, 0, caml_marshal_header_size);
    if(r === 0)
     caml_raise_end_of_file();
    else if(r < caml_marshal_header_size)
     caml_failwith("input_value: truncated object");
    var
     len = caml_marshal_data_size(caml_bytes_of_uint8_array(header), 0),
     buf = new Uint8Array(len + caml_marshal_header_size);
    buf.set(header, 0);
    var r = block(buf, caml_marshal_header_size, len);
    if(r < len)
     caml_failwith("input_value: truncated object " + r + "  " + len);
    var res = caml_input_value_from_bytes(caml_bytes_of_uint8_array(buf), 0);
    return res;
   }
   function caml_input_value_to_outside_heap(c){return caml_input_value(c);}
   function caml_install_signal_handler(){return 0;}
   function caml_int32_bswap(x){
    return (x & 0x000000ff) << 24 | (x & 0x0000ff00) << 8
           | (x & 0x00ff0000) >>> 8
           | (x & 0xff000000) >>> 24;
   }
   function caml_int64_add(x, y){return x.add(y);}
   function caml_int64_and(x, y){return x.and(y);}
   function caml_int64_bswap(x){
    var y = caml_int64_to_bytes(x);
    return caml_int64_of_bytes
            ([y[7], y[6], y[5], y[4], y[3], y[2], y[1], y[0]]);
   }
   function caml_int64_div(x, y){return x.div(y);}
   function caml_int64_is_zero(x){return + x.isZero();}
   function caml_int64_of_int32(x){
    return new MlInt64(x & 0xffffff, x >> 24 & 0xffffff, x >> 31 & 0xffff);
   }
   function caml_int64_to_int32(x){return x.toInt();}
   function caml_int64_is_negative(x){return + x.isNeg();}
   function caml_int64_neg(x){return x.neg();}
   function caml_int64_format(fmt, x){
    var f = caml_parse_format(fmt);
    if(f.signedconv && caml_int64_is_negative(x)){f.sign = - 1; x = caml_int64_neg(x);}
    var
     buffer = "",
     wbase = caml_int64_of_int32(f.base),
     cvtbl = "0123456789abcdef";
    do{
     var p = x.udivmod(wbase);
     x = p.quotient;
     buffer = cvtbl.charAt(caml_int64_to_int32(p.modulus)) + buffer;
    }
    while
     (! caml_int64_is_zero(x));
    if(f.prec >= 0){
     f.filler = " ";
     var n = f.prec - buffer.length;
     if(n > 0) buffer = caml_str_repeat(n, "0") + buffer;
    }
    return caml_finish_formatting(f, buffer);
   }
   function caml_int64_mod(x, y){return x.mod(y);}
   function caml_int64_mul(x, y){return x.mul(y);}
   function caml_int64_ult(x, y){return x.ucompare(y) < 0;}
   function caml_parse_sign_and_base(s){
    var
     i = 0,
     len = caml_ml_string_length(s),
     base = 10,
     sign = 1,
     signedness = 1;
    if(len > 0)
     switch(caml_string_unsafe_get(s, i)){
       case 45:
        i++; sign = - 1; break;
       case 43:
        i++; sign = 1; break;
     }
    if(i + 1 < len && caml_string_unsafe_get(s, i) === 48)
     switch(caml_string_unsafe_get(s, i + 1)){
       case 120:
       case 88:
        signedness = 0; base = 16; i += 2; break;
       case 111:
       case 79:
        signedness = 0; base = 8; i += 2; break;
       case 98:
       case 66:
        signedness = 0; base = 2; i += 2; break;
       case 117:
       case 85:
        signedness = 0; i += 2; break;
     }
    return [i, sign, base, signedness];
   }
   function caml_parse_digit(c){
    if(c >= 48 && c <= 57) return c - 48;
    if(c >= 65 && c <= 90) return c - 55;
    if(c >= 97 && c <= 122) return c - 87;
    return - 1;
   }
   function caml_int64_of_string(s){
    var
     r = caml_parse_sign_and_base(s),
     i = r[0],
     sign = r[1],
     base = r[2],
     signedness = r[3],
     base64 = caml_int64_of_int32(base),
     threshold = MlInt64.UNSIGNED_MAX.udivmod(base64).quotient,
     c = caml_string_unsafe_get(s, i),
     d = caml_parse_digit(c);
    if(d < 0 || d >= base) caml_failwith("Int64.of_string");
    var res = caml_int64_of_int32(d);
    for(;;){
     i++;
     c = caml_string_unsafe_get(s, i);
     if(c === 95) continue;
     d = caml_parse_digit(c);
     if(d < 0 || d >= base) break;
     if(caml_int64_ult(threshold, res)) caml_failwith("Int64.of_string");
     d = caml_int64_of_int32(d);
     res = caml_int64_add(caml_int64_mul(base64, res), d);
     if(caml_int64_ult(res, d)) caml_failwith("Int64.of_string");
    }
    if(i !== caml_ml_string_length(s)) caml_failwith("Int64.of_string");
    if
     (signedness
      &&
       caml_int64_ult(sign < 0 ? MlInt64.SIGNED_MIN : MlInt64.SIGNED_MAX, res))
     caml_failwith("Int64.of_string");
    if(sign < 0) res = caml_int64_neg(res);
    return res;
   }
   function caml_int64_or(x, y){return x.or(y);}
   function caml_int64_shift_left(x, s){return x.shift_left(s);}
   function caml_int64_shift_right(x, s){return x.shift_right(s);}
   function caml_int64_shift_right_unsigned(x, s){return x.shift_right_unsigned(s);
   }
   function caml_int64_sub(x, y){return x.sub(y);}
   function caml_int64_to_float(x){return x.toFloat();}
   function caml_int64_xor(x, y){return x.xor(y);}
   function caml_int_of_string(s){
    var
     r = caml_parse_sign_and_base(s),
     i = r[0],
     sign = r[1],
     base = r[2],
     signedness = r[3],
     len = caml_ml_string_length(s),
     threshold = - 1 >>> 0,
     c = i < len ? caml_string_unsafe_get(s, i) : 0,
     d = caml_parse_digit(c);
    if(d < 0 || d >= base) caml_failwith("int_of_string");
    var res = d;
    for(i++; i < len; i++){
     c = caml_string_unsafe_get(s, i);
     if(c === 95) continue;
     d = caml_parse_digit(c);
     if(d < 0 || d >= base) break;
     res = base * res + d;
     if(res > threshold) caml_failwith("int_of_string");
    }
    if(i !== len) caml_failwith("int_of_string");
    res = sign * res;
    if(signedness && (res | 0) !== res) caml_failwith("int_of_string");
    return res | 0;
   }
   var caml_io_buffer_size = 65536;
   function caml_is_js(){return 1;}
   function caml_is_printable(c){return + (c > 31 && c < 127);}
   function caml_js_call(f, o, args){
    return f.apply(o, caml_js_from_array(args));
   }
   function caml_js_delete(o, f){delete o[f]; return 0;}
   function caml_js_equals(x, y){return + (x == y);}
   function caml_js_error_of_exception(exn){
    if(exn.js_error) return exn.js_error;
    return null;
   }
   function caml_js_error_option_of_exception(exn){
    if(exn.js_error) return [0, exn.js_error];
    return 0;
   }
   function caml_js_eval_string(s){return eval(caml_jsstring_of_string(s));}
   function caml_js_expr(s){
    console.error("caml_js_expr: fallback to runtime evaluation\n");
    return eval(caml_jsstring_of_string(s));
   }
   function caml_js_from_bool(x){return ! ! x;}
   function caml_js_from_float(x){return x;}
   function caml_js_from_string(s){return caml_jsstring_of_string(s);}
   function caml_js_fun_call(f, a){
    switch(a.length){
      case 1:
       return f();
      case 2:
       return f(a[1]);
      case 3:
       return f(a[1], a[2]);
      case 4:
       return f(a[1], a[2], a[3]);
      case 5:
       return f(a[1], a[2], a[3], a[4]);
      case 6:
       return f(a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return f(a[1], a[2], a[3], a[4], a[5], a[6]);
      case 8:
       return f(a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
    }
    return f.apply(null, caml_js_from_array(a));
   }
   function caml_js_function_arity(f){return f.l >= 0 ? f.l : f.l = f.length;}
   function caml_js_get(o, f){return o[f];}
   function caml_js_get_console(){
    var
     c = console,
     m =
       ["log",
        "debug",
        "info",
        "warn",
        "error",
        "assert",
        "dir",
        "dirxml",
        "trace",
        "group",
        "groupCollapsed",
        "groupEnd",
        "time",
        "timeEnd"];
    function f(){}
    for(var i = 0; i < m.length; i++) if(! c[m[i]]) c[m[i]] = f;
    return c;
   }
   function caml_js_html_entities(s){
    var entity = /^&#?[0-9a-zA-Z]+;$/;
    if(s.match(entity)){
     var str, temp = document.createElement("p");
     temp.innerHTML = s;
     str = temp.textContent || temp.innerText;
     temp = null;
     return str;
    }
    else
     return null;
   }
   var caml_js_regexps = {amp: /&/g, lt: /</g, quot: /"/g, all: /[&<"]/};
   function caml_js_html_escape(s){
    if(! caml_js_regexps.all.test(s)) return s;
    return s.replace(caml_js_regexps.amp, "&amp;").replace
             (caml_js_regexps.lt, "&lt;").replace
            (caml_js_regexps.quot, "&quot;");
   }
   function caml_js_instanceof(o, c){return o instanceof c ? 1 : 0;}
   function caml_js_meth_call(o, f, args){
    return o[caml_jsstring_of_string(f)].apply(o, caml_js_from_array(args));
   }
   function caml_js_new(c, a){
    switch(a.length){
      case 1:
       return new c();
      case 2:
       return new c(a[1]);
      case 3:
       return new c(a[1], a[2]);
      case 4:
       return new c(a[1], a[2], a[3]);
      case 5:
       return new c(a[1], a[2], a[3], a[4]);
      case 6:
       return new c(a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return new c(a[1], a[2], a[3], a[4], a[5], a[6]);
      case 8:
       return new c(a[1], a[2], a[3], a[4], a[5], a[6], a[7]);
    }
    function F(){return c.apply(this, caml_js_from_array(a));}
    F.prototype = c.prototype;
    return new F();
   }
   function caml_js_object(a){
    var o = {};
    for(var i = 1; i < a.length; i++){
     var p = a[i];
     o[caml_jsstring_of_string(p[1])] = p[2];
    }
    return o;
   }
   function caml_js_pure_expr(f){return caml_callback(f, [0]);}
   function caml_js_set(o, f, v){o[f] = v; return 0;}
   function caml_js_strict_equals(x, y){return + (x === y);}
   function caml_js_to_array(a){
    var len = a.length, b = new Array(len + 1);
    b[0] = 0;
    for(var i = 0; i < len; i++) b[i + 1] = a[i];
    return b;
   }
   function caml_js_to_bool(x){return + x;}
   function caml_js_to_byte_string(s){return caml_string_of_jsbytes(s);}
   function caml_js_to_float(x){return x;}
   function caml_js_to_int32(x){return x | 0;}
   function caml_js_to_string(s){return caml_string_of_jsstring(s);}
   function caml_js_typeof(o){return typeof o;}
   function caml_js_var(x){
    var x = caml_jsstring_of_string(x);
    if(! x.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/))
     console.error
      ('caml_js_var: "' + x
       + '" is not a valid JavaScript variable. continuing ..');
    return eval(x);
   }
   function caml_js_wrap_callback(f){
    return function(...args){
     if(args.length === 0) args = [undefined];
     var res = caml_callback(f, args);
     return res instanceof Function ? caml_js_wrap_callback(res) : res;};
   }
   function caml_js_wrap_callback_arguments(f){
    return function(...args){return caml_callback(f, [args]);};
   }
   function caml_js_wrap_callback_strict(arity, f){
    return function(...args){
     args.length = arity;
     return caml_callback(f, args);};
   }
   function caml_js_wrap_callback_unsafe(f){
    return function(...args){
     var len = caml_js_function_arity(f);
     args.length = len;
     return caml_callback(f, args);};
   }
   function caml_js_wrap_meth_callback(f){
    return function(...args){
     args.unshift(this);
     var res = caml_callback(f, args);
     return res instanceof Function ? caml_js_wrap_callback(res) : res;};
   }
   function caml_js_wrap_meth_callback_arguments(f){
    return function(...args){return caml_callback(f, [this, args]);};
   }
   function caml_js_wrap_meth_callback_strict(arity, f){
    return function(...args){
     args.length = arity;
     args.unshift(this);
     return caml_callback(f, args);};
   }
   function caml_js_wrap_meth_callback_unsafe(f){
    return function(...args){
     var len = caml_js_function_arity(f);
     args.unshift(this);
     args.length = len;
     return caml_callback(f, args);};
   }
   function caml_jsoo_flags_effects(_unit){
    return caml_string_of_jsstring("disabled");
   }
   function caml_jsoo_flags_use_js_string(_unit){return 1;}
   function caml_lazy_make_forward(v){return [250, v];}
   function caml_obj_tag(x){
    if(Array.isArray(x) && x[0] === x[0] >>> 0)
     return x[0];
    else if(caml_is_ml_bytes(x))
     return 252;
    else if(caml_is_ml_string(x))
     return 252;
    else if(x instanceof Function || typeof x === "function")
     return 247;
    else if(x?.caml_custom) return 255; else return 1000;
   }
   function caml_lazy_read_result(o){
    return caml_obj_tag(o) === 250 ? o[1] : o;
   }
   function caml_obj_update_tag(b, o, n){
    if(b[0] === o){b[0] = n; return 1;}
    return 0;
   }
   function caml_lazy_reset_to_lazy(o){
    caml_obj_update_tag(o, 244, 246);
    return 0;
   }
   function caml_lazy_update_to_forcing(o){
    return Array.isArray(o) && o[0] === o[0] >>> 0
            && caml_obj_update_tag(o, 246, 244)
            ? 0
            : 1;
   }
   function caml_lazy_update_to_forward(o){
    caml_obj_update_tag(o, 244, 250);
    return 0;
   }
   function caml_ldexp_float(x, exp){
    exp |= 0;
    if(exp > 1023){
     exp -= 1023;
     x *= Math.pow(2, 1023);
     if(exp > 1023){exp -= 1023; x *= Math.pow(2, 1023);}
    }
    if(exp < - 1023){exp += 1023; x *= Math.pow(2, - 1023);}
    x *= Math.pow(2, exp);
    return x;
   }
   function caml_lessequal(x, y){
    return + (caml_compare_val(x, y, false) <= 0);
   }
   function caml_lessthan(x, y){return + (caml_compare_val(x, y, false) < 0);}
   function caml_lex_array(s){
    s = caml_jsbytes_of_string(s);
    var l = s.length / 2, a = new Array(l);
    for(var i = 0; i < l; i++)
     a[i] = (s.charCodeAt(2 * i) | s.charCodeAt(2 * i + 1) << 8) << 16 >> 16;
    return a;
   }
   function caml_lex_engine(tbl, start_state, lexbuf){
    var
     lex_buffer = 2,
     lex_buffer_len = 3,
     lex_start_pos = 5,
     lex_curr_pos = 6,
     lex_last_pos = 7,
     lex_last_action = 8,
     lex_eof_reached = 9,
     lex_base = 1,
     lex_backtrk = 2,
     lex_default = 3,
     lex_trans = 4,
     lex_check = 5;
    if(! tbl.lex_default){
     tbl.lex_base = caml_lex_array(tbl[lex_base]);
     tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
     tbl.lex_check = caml_lex_array(tbl[lex_check]);
     tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
     tbl.lex_default = caml_lex_array(tbl[lex_default]);
    }
    var c, state = start_state, buffer = lexbuf[lex_buffer];
    if(state >= 0){
     lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
     lexbuf[lex_last_action] = - 1;
    }
    else
     state = - state - 1;
    for(;;){
     var base = tbl.lex_base[state];
     if(base < 0) return - base - 1;
     var backtrk = tbl.lex_backtrk[state];
     if(backtrk >= 0){
      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
      lexbuf[lex_last_action] = backtrk;
     }
     if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
      if(lexbuf[lex_eof_reached] === 0) return - state - 1; else c = 256;
     else{
      c = caml_bytes_unsafe_get(buffer, lexbuf[lex_curr_pos]);
      lexbuf[lex_curr_pos]++;
     }
     if(tbl.lex_check[base + c] === state)
      state = tbl.lex_trans[base + c];
     else
      state = tbl.lex_default[state];
     if(state < 0){
      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
      if(lexbuf[lex_last_action] === - 1)
       caml_failwith("lexing: empty token");
      else
       return lexbuf[lex_last_action];
     }
     else if(c === 256) lexbuf[lex_eof_reached] = 0;
    }
   }
   function caml_list_mount_point(){
    var prev = 0;
    for(var i = 0; i < jsoo_mount_point.length; i++){
     var old = prev;
     prev = [0, caml_string_of_jsstring(jsoo_mount_point[i].path), old];
    }
    return prev;
   }
   function caml_list_of_js_array(a){
    var l = 0;
    for(var i = a.length - 1; i >= 0; i--){var e = a[i]; l = [0, e, l];}
    return l;
   }
   function caml_list_to_js_array(l){
    var a = [];
    for(; l !== 0; l = l[2]) a.push(l[1]);
    return a;
   }
   function caml_log10_float(x){return Math.log10(x);}
   function caml_log1p_float(x){return Math.log1p(x);}
   function caml_log2_float(x){return Math.log2(x);}
   var
    caml_lxm_M =
      caml_int64_of_string(caml_string_of_jsstring("0xd1342543de82ef95")),
    caml_lxm_daba =
      caml_int64_of_string(caml_string_of_jsstring("0xdaba0b6eb09322e3"));
   function caml_lxm_next(v){
    function shift_l(x, k){return caml_int64_shift_left(x, k);}
    function shift_r(x, k){return caml_int64_shift_right_unsigned(x, k);}
    function or(a, b){return caml_int64_or(a, b);}
    function xor(a, b){return caml_int64_xor(a, b);}
    function add(a, b){return caml_int64_add(a, b);}
    function mul(a, b){return caml_int64_mul(a, b);}
    function rotl(x, k){return or(shift_l(x, k), shift_r(x, 64 - k));}
    function get(a, i){return caml_ba_get_1(a, i);}
    function set(a, i, x){return caml_ba_set_1(a, i, x);}
    var
     M = caml_lxm_M,
     daba = caml_lxm_daba,
     z,
     q0,
     q1,
     st = v,
     a = get(st, 0),
     s = get(st, 1),
     x0 = get(st, 2),
     x1 = get(st, 3);
    z = add(s, x0);
    z = mul(xor(z, shift_r(z, 32)), daba);
    z = mul(xor(z, shift_r(z, 32)), daba);
    z = xor(z, shift_r(z, 32));
    set(st, 1, add(mul(s, M), a));
    var q0 = x0, q1 = x1;
    q1 = xor(q1, q0);
    q0 = rotl(q0, 24);
    q0 = xor(xor(q0, q1), shift_l(q1, 16));
    q1 = rotl(q1, 37);
    set(st, 2, q0);
    set(st, 3, q1);
    return z;
   }
   function caml_make_float_vect(len){
    if(len >>> 0 >= (0x7fffffff / 8 | 0)) caml_array_bound_error();
    var len = len + 1 | 0, b = new Array(len);
    b[0] = 254;
    for(var i = 1; i < len; i++) b[i] = 0;
    return b;
   }
   function caml_make_vect(len, init){return caml_array_make(len, init);}
   var
    caml_marshal_constants =
      {PREFIX_SMALL_BLOCK: 0x80,
       PREFIX_SMALL_INT: 0x40,
       PREFIX_SMALL_STRING: 0x20,
       CODE_INT8: 0x00,
       CODE_INT16: 0x01,
       CODE_INT32: 0x02,
       CODE_INT64: 0x03,
       CODE_SHARED8: 0x04,
       CODE_SHARED16: 0x05,
       CODE_SHARED32: 0x06,
       CODE_BLOCK32: 0x08,
       CODE_BLOCK64: 0x13,
       CODE_STRING8: 0x09,
       CODE_STRING32: 0x0a,
       CODE_DOUBLE_BIG: 0x0b,
       CODE_DOUBLE_LITTLE: 0x0c,
       CODE_DOUBLE_ARRAY8_BIG: 0x0d,
       CODE_DOUBLE_ARRAY8_LITTLE: 0x0e,
       CODE_DOUBLE_ARRAY32_BIG: 0x0f,
       CODE_DOUBLE_ARRAY32_LITTLE: 0x07,
       CODE_CODEPOINTER: 0x10,
       CODE_INFIXPOINTER: 0x11,
       CODE_CUSTOM: 0x12,
       CODE_CUSTOM_LEN: 0x18,
       CODE_CUSTOM_FIXED: 0x19};
   function caml_maybe_print_stats(_unit){return 0;}
   function caml_md5_bytes(s, ofs, len){
    var ctx = caml_MD5Init(), a = caml_uint8_array_of_bytes(s);
    caml_MD5Update(ctx, a.subarray(ofs, ofs + len), len);
    return caml_string_of_uint8_array(caml_MD5Final(ctx));
   }
   function caml_ml_input_block(chanid, ba, i, l){
    var
     chan = caml_ml_channel_get(chanid),
     n = l,
     avail = chan.buffer_max - chan.buffer_curr;
    if(l <= avail){
     ba.set(chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + l), i);
     chan.buffer_curr += l;
    }
    else if(avail > 0){
     ba.set
      (chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + avail), i);
     chan.buffer_curr += avail;
     n = avail;
    }
    else{
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
     caml_refill(chan);
     var avail = chan.buffer_max - chan.buffer_curr;
     if(n > avail) n = avail;
     ba.set(chan.buffer.subarray(chan.buffer_curr, chan.buffer_curr + n), i);
     chan.buffer_curr += n;
    }
    return n | 0;
   }
   function caml_md5_chan(chanid, toread){
    var ctx = caml_MD5Init(), buffer = new Uint8Array(4096);
    if(toread < 0)
     while(true){
      var read = caml_ml_input_block(chanid, buffer, 0, buffer.length);
      if(read === 0) break;
      caml_MD5Update(ctx, buffer.subarray(0, read), read);
     }
    else
     while(toread > 0){
      var
       read =
         caml_ml_input_block
          (chanid, buffer, 0, toread > buffer.length ? buffer.length : toread);
      if(read === 0) caml_raise_end_of_file();
      caml_MD5Update(ctx, buffer.subarray(0, read), read);
      toread -= read;
     }
    return caml_string_of_uint8_array(caml_MD5Final(ctx));
   }
   function caml_md5_string(s, ofs, len){
    return caml_md5_bytes(caml_bytes_of_string(s), ofs, len);
   }
   function caml_memprof_discard(_t){return 0;}
   function caml_memprof_start(_rate, _stack_size, _tracker){return 0;}
   function caml_memprof_stop(_unit){return 0;}
   function caml_ml_channel_redirect(captured, into){
    var
     to_restore = caml_ml_channel_get(captured),
     new_ = caml_ml_channel_get(into);
    caml_ml_channels.set(captured, new_);
    return to_restore;
   }
   function caml_ml_channel_restore(captured, to_restore){caml_ml_channels.set(captured, to_restore); return 0;
   }
   function caml_ml_channel_size(chanid){
    var chan = caml_ml_channel_get(chanid);
    return chan.file.length() | 0;
   }
   function caml_ml_channel_size_64(chanid){
    var chan = caml_ml_channel_get(chanid);
    return caml_int64_of_float(chan.file.length());
   }
   var caml_sys_fds = new Array(3);
   function caml_sys_close(fd){
    var x = caml_sys_fds[fd];
    if(x){x.file.close(); delete caml_sys_fds[fd];}
    return 0;
   }
   function caml_ml_flush(chanid){
    var chan = caml_ml_channel_get(chanid);
    if(! chan.opened) caml_raise_sys_error("Cannot flush a closed channel");
    if(! chan.buffer || chan.buffer_curr === 0) return 0;
    if(chan.output)
     chan.output
      (caml_sub_uint8_array_to_jsbytes(chan.buffer, 0, chan.buffer_curr));
    else
     for(var pos = 0; pos < chan.buffer_curr;)
      pos += chan.file.write(chan.buffer, pos, chan.buffer_curr - pos);
    chan.offset += chan.buffer_curr;
    chan.buffer_curr = 0;
    return 0;
   }
   function caml_ml_close_channel(chanid){
    var chan = caml_ml_channel_get(chanid);
    if(chan.opened){
     chan.opened = false;
     caml_ml_channels.close(chanid);
     caml_sys_close(chan.fd);
     chan.fd = - 1;
     chan.buffer = new Uint8Array(0);
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
    }
    return 0;
   }
   function caml_ml_condition_broadcast(_t){return 0;}
   function caml_ml_condition_new(_unit){return {condition: 1};}
   function caml_ml_condition_signal(_t){return 0;}
   function caml_ml_condition_wait(_t, _mutext){return 0;}
   function caml_ml_debug_info_status(){return 0;}
   function caml_ml_domain_cpu_relax(_unit){return 0;}
   function caml_ml_domain_id(_unit){return caml_domain_id;}
   function caml_ml_domain_index(_unit){return caml_domain_id;}
   var caml_runtime_warnings = 0;
   function caml_ml_enable_runtime_warnings(bool){caml_runtime_warnings = bool; return 0;
   }
   function caml_ml_input(chanid, b, i, l){
    var ba = caml_uint8_array_of_bytes(b);
    return caml_ml_input_block(chanid, ba, i, l);
   }
   function caml_ml_input_bigarray(chanid, b, i, l){
    var ba = caml_ba_to_typed_array(b);
    return caml_ml_input_block(chanid, ba, i, l);
   }
   function caml_ml_input_char(chanid){
    var chan = caml_ml_channel_get(chanid);
    if(chan.buffer_curr >= chan.buffer_max){
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
     caml_refill(chan);
    }
    if(chan.buffer_curr >= chan.buffer_max) caml_raise_end_of_file();
    var res = chan.buffer[chan.buffer_curr];
    chan.buffer_curr++;
    return res;
   }
   function caml_ml_input_int(chanid){
    var res = 0;
    for(var i = 0; i < 4; i++)
     res = (res << 8) + caml_ml_input_char(chanid) | 0;
    return res | 0;
   }
   function caml_ml_input_scan_line(chanid){
    var chan = caml_ml_channel_get(chanid), p = chan.buffer_curr;
    do
     if(p >= chan.buffer_max){
      if(chan.buffer_curr > 0){
       chan.buffer.set(chan.buffer.subarray(chan.buffer_curr), 0);
       p -= chan.buffer_curr;
       chan.buffer_max -= chan.buffer_curr;
       chan.buffer_curr = 0;
      }
      if(chan.buffer_max >= chan.buffer.length) return - chan.buffer_max | 0;
      var prev_max = chan.buffer_max;
      caml_refill(chan);
      if(prev_max === chan.buffer_max) return - chan.buffer_max | 0;
     }
    while
     (chan.buffer[p++] !== 10);
    return p - chan.buffer_curr | 0;
   }
   function caml_ml_is_binary_mode(chanid){
    var chan = caml_ml_channel_get(chanid);
    return chan.file.flags.binary;
   }
   function caml_ml_is_buffered(chanid){
    return caml_ml_channel_get(chanid).buffered ? 1 : 0;
   }
   function caml_ml_mutex_lock(t){
    if(t.locked)
     caml_failwith("Mutex.lock: mutex already locked. Cannot wait.");
    else
     t.locked = true;
    return 0;
   }
   function caml_ml_mutex_new(_unit){return new MlMutex();}
   function caml_ml_mutex_try_lock(t){
    if(! t.locked){t.locked = true; return 1;}
    return 0;
   }
   function caml_sys_open_for_node(fd, flags){
    if(flags.altname)
     try{
      var fs = require("node:fs"), fd2 = fs.openSync(flags.altname, "rs");
      return new MlNodeFd(fd2, flags);
     }
     catch(e){}
    return new MlNodeFd(fd, flags);
   }
   function caml_sys_open_internal(file, idx){
    var chanid;
    if(idx === undefined){
     idx = caml_sys_fds.length;
     chanid = new MlChanid(idx);
    }
    else if(caml_sys_fds[idx])
     chanid = caml_sys_fds[idx].chanid;
    else
     chanid = new MlChanid(idx);
    caml_sys_fds[idx] = {file: file, chanid: chanid};
    return idx | 0;
   }
   function caml_sys_open(name, flags, perms){
    var f = {};
    while(flags){
     switch(flags[1]){
       case 0:
        f.rdonly = 1; break;
       case 1:
        f.wronly = 1; break;
       case 2:
        f.append = 1; f.writeonly = 1; break;
       case 3:
        f.create = 1; break;
       case 4:
        f.truncate = 1; break;
       case 5:
        f.excl = 1; break;
       case 6:
        f.binary = 1; break;
       case 7:
        f.text = 1; break;
       case 8:
        f.nonblock = 1; break;
     }
     flags = flags[2];
    }
    var
     root = resolve_fs_device(name),
     file = root.device.open(root.rest, f, perms);
    return caml_sys_open_internal(file, undefined);
   }
   (function(){
      var is_node = fs_node_supported();
      function file(fd, flags){
       return is_node
               ? caml_sys_open_for_node(fd, flags)
               : new MlFakeFd_out(fd, flags);
      }
      caml_sys_open_internal
       (file(0, {rdonly: 1, altname: "/dev/stdin", isCharacterDevice: true}),
        0);
      caml_sys_open_internal
       (file
         (1, {buffered: is_node ? 1 : 2, wronly: 1, isCharacterDevice: true}),
        1);
      caml_sys_open_internal
       (file
         (2, {buffered: is_node ? 1 : 2, wronly: 1, isCharacterDevice: true}),
        2);
     }
     ());
   function caml_ml_open_descriptor_in(fd){
    var fd_desc = caml_sys_fds[fd];
    if(fd_desc === undefined)
     caml_raise_sys_error("fd " + fd + " doesn't exist");
    var
     file = fd_desc.file,
     chanid = fd_desc.chanid,
     refill = null,
     channel =
       {file: file,
        offset: file.offset,
        fd: fd,
        opened: true,
        out: false,
        buffer_curr: 0,
        buffer_max: 0,
        buffer: new Uint8Array(caml_io_buffer_size),
        refill: refill};
    caml_ml_channels.set(chanid, channel);
    return chanid;
   }
   function caml_ml_open_descriptor_in_with_flags(fd, _flags){return caml_ml_open_descriptor_in(fd);
   }
   function caml_ml_open_descriptor_out(fd){
    var fd_desc = caml_sys_fds[fd];
    if(fd_desc === undefined)
     caml_raise_sys_error("fd " + fd + " doesn't exist");
    var
     file = fd_desc.file,
     chanid = fd_desc.chanid,
     buffered = file.flags.buffered !== undefined ? file.flags.buffered : 1,
     channel =
       {file: file,
        offset: file.offset,
        fd: fd,
        opened: true,
        out: true,
        buffer_curr: 0,
        buffer: new Uint8Array(caml_io_buffer_size),
        buffered: buffered};
    caml_ml_channels.set(chanid, channel);
    return chanid;
   }
   function caml_ml_open_descriptor_out_with_flags(fd, _flags){return caml_ml_open_descriptor_out(fd);
   }
   function caml_ml_out_channels_list(){
    var l = 0, keys = caml_ml_channels.all();
    for(var k of keys){
     var chan = caml_ml_channel_get(k);
     if(chan.opened && chan.out) l = [0, k, l];
    }
    return l;
   }
   function caml_ml_output_ta(chanid, buffer, offset, len){
    var chan = caml_ml_channel_get(chanid);
    if(! chan.opened)
     caml_raise_sys_error("Cannot output to a closed channel");
    buffer = buffer.subarray(offset, offset + len);
    if(chan.buffer_curr + buffer.length > chan.buffer.length){
     var b = new Uint8Array(chan.buffer_curr + buffer.length);
     b.set(chan.buffer);
     chan.buffer = b;
    }
    switch(chan.buffered){
      case 0:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       caml_ml_flush(chanid);
       break;
      case 1:
       chan.buffer.set(buffer, chan.buffer_curr);
       chan.buffer_curr += buffer.length;
       if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       break;
      case 2:
       var id = buffer.lastIndexOf(10);
       if(id < 0){
        chan.buffer.set(buffer, chan.buffer_curr);
        chan.buffer_curr += buffer.length;
        if(chan.buffer_curr >= chan.buffer.length) caml_ml_flush(chanid);
       }
       else{
        chan.buffer.set(buffer.subarray(0, id + 1), chan.buffer_curr);
        chan.buffer_curr += id + 1;
        caml_ml_flush(chanid);
        chan.buffer.set(buffer.subarray(id + 1), chan.buffer_curr);
        chan.buffer_curr += buffer.length - id - 1;
       }
       break;
    }
    return 0;
   }
   function caml_ml_output_bytes(chanid, buffer, offset, len){
    var buffer = caml_uint8_array_of_bytes(buffer);
    return caml_ml_output_ta(chanid, buffer, offset, len);
   }
   function caml_ml_output(chanid, buffer, offset, len){
    return caml_ml_output_bytes
            (chanid, caml_bytes_of_string(buffer), offset, len);
   }
   function caml_ml_output_bigarray(chanid, buffer, offset, len){
    var buffer = caml_ba_to_typed_array(buffer);
    return caml_ml_output_ta(chanid, buffer, offset, len);
   }
   function caml_ml_output_char(chanid, c){
    var s = caml_string_of_jsbytes(String.fromCharCode(c));
    caml_ml_output(chanid, s, 0, 1);
    return 0;
   }
   function caml_ml_output_int(chanid, i){
    var arr = [i >> 24 & 0xff, i >> 16 & 0xff, i >> 8 & 0xff, i & 0xff];
    caml_ml_output_ta(chanid, new Uint8Array(arr), 0, 4);
    return 0;
   }
   function caml_pos_in(chanid){
    var chan = caml_ml_channel_get(chanid);
    return chan.offset - (chan.buffer_max - chan.buffer_curr);
   }
   function caml_ml_pos_in(chanid){return caml_pos_in(chanid) | 0;}
   function caml_ml_pos_in_64(chanid){
    return caml_int64_of_float(caml_pos_in(chanid));
   }
   function caml_pos_out(chanid){
    var chan = caml_ml_channel_get(chanid);
    return chan.offset + chan.buffer_curr;
   }
   function caml_ml_pos_out(chanid){return caml_pos_out(chanid) | 0;}
   function caml_ml_pos_out_64(chanid){
    return caml_int64_of_float(caml_pos_out(chanid));
   }
   function caml_ml_runtime_events_are_active(){return 0;}
   function caml_ml_runtime_events_path(_unit){return 0;}
   function caml_ml_runtime_events_pause(){return 0;}
   function caml_ml_runtime_events_resume(){return 0;}
   function caml_ml_runtime_events_start(){return 0;}
   function caml_ml_runtime_warnings_enabled(_unit){return caml_runtime_warnings;
   }
   function caml_seek_in(chanid, pos){
    var chan = caml_ml_channel_get(chanid);
    if(chan.refill != null) caml_raise_sys_error("Illegal seek");
    if
     (pos >= chan.offset - chan.buffer_max && pos <= chan.offset
      && chan.file.flags.binary)
     chan.buffer_curr = chan.buffer_max - (chan.offset - pos);
    else{
     chan.file.seek(pos, 0);
     chan.offset = pos;
     chan.buffer_curr = 0;
     chan.buffer_max = 0;
    }
    return 0;
   }
   function caml_ml_seek_in(chanid, pos){return caml_seek_in(chanid, pos);}
   function caml_ml_seek_in_64(chanid, pos){
    var pos = caml_int64_to_float(pos);
    return caml_seek_in(chanid, pos);
   }
   function caml_seek_out(chanid, pos){
    caml_ml_flush(chanid);
    var chan = caml_ml_channel_get(chanid);
    chan.file.seek(pos, 0);
    chan.offset = pos;
    return 0;
   }
   function caml_ml_seek_out(chanid, pos){return caml_seek_out(chanid, pos);}
   function caml_ml_seek_out_64(chanid, pos){
    var pos = caml_int64_to_float(pos);
    return caml_seek_out(chanid, pos);
   }
   function caml_ml_set_binary_mode(chanid, mode){
    var chan = caml_ml_channel_get(chanid);
    chan.file.flags.text = ! mode;
    chan.file.flags.binary = mode;
    return 0;
   }
   function caml_ml_set_buffered(chanid, v){
    caml_ml_channel_get(chanid).buffered = v;
    if(! v) caml_ml_flush(chanid);
    return 0;
   }
   function caml_ml_set_channel_name(chanid, name){
    var chan = caml_ml_channel_get(chanid);
    chan.name = name;
    return 0;
   }
   function caml_ml_set_channel_output(chanid, f){
    var chan = caml_ml_channel_get(chanid);
    chan.output = function(s){f(s);};
    return 0;
   }
   function caml_ml_set_channel_refill(chanid, f){
    caml_ml_channel_get(chanid).refill = f;
    return 0;
   }
   function caml_mod(x, y){
    if(y === 0) caml_raise_zero_divide();
    return x % y;
   }
   function caml_modf_float(x){
    if(Number.isFinite(x)){
     var neg = 1 / x < 0;
     x = Math.abs(x);
     var i = Math.floor(x), f = x - i;
     if(neg){i = - i; f = - f;}
     return [0, f, i];
    }
    if(Number.isNaN(x)) return [0, Number.NaN, Number.NaN];
    return [0, 1 / x, x];
   }
   function caml_mount_autoload(name, f){
    var
     path = caml_make_path(name),
     name = caml_trailing_slash(path.join("/"));
    jsoo_mount_point.push({path: name, device: new MlFakeDevice(name, f)});
    return 0;
   }
   function caml_lex_run_mem(s, i, mem, curr_pos){
    for(;;){
     var dst = s.charCodeAt(i);
     i++;
     if(dst === 0xff) return;
     var src = s.charCodeAt(i);
     i++;
     if(src === 0xff)
      mem[dst + 1] = curr_pos;
     else
      mem[dst + 1] = mem[src + 1];
    }
   }
   function caml_lex_run_tag(s, i, mem){
    for(;;){
     var dst = s.charCodeAt(i);
     i++;
     if(dst === 0xff) return;
     var src = s.charCodeAt(i);
     i++;
     if(src === 0xff) mem[dst + 1] = - 1; else mem[dst + 1] = mem[src + 1];
    }
   }
   function caml_new_lex_engine(tbl, start_state, lexbuf){
    var
     lex_buffer = 2,
     lex_buffer_len = 3,
     lex_start_pos = 5,
     lex_curr_pos = 6,
     lex_last_pos = 7,
     lex_last_action = 8,
     lex_eof_reached = 9,
     lex_mem = 10,
     lex_base = 1,
     lex_backtrk = 2,
     lex_default = 3,
     lex_trans = 4,
     lex_check = 5,
     lex_base_code = 6,
     lex_backtrk_code = 7,
     lex_default_code = 8,
     lex_trans_code = 9,
     lex_check_code = 10,
     lex_code = 11;
    if(! tbl.lex_default){
     tbl.lex_base = caml_lex_array(tbl[lex_base]);
     tbl.lex_backtrk = caml_lex_array(tbl[lex_backtrk]);
     tbl.lex_check = caml_lex_array(tbl[lex_check]);
     tbl.lex_trans = caml_lex_array(tbl[lex_trans]);
     tbl.lex_default = caml_lex_array(tbl[lex_default]);
    }
    if(! tbl.lex_default_code){
     tbl.lex_base_code = caml_lex_array(tbl[lex_base_code]);
     tbl.lex_backtrk_code = caml_lex_array(tbl[lex_backtrk_code]);
     tbl.lex_check_code = caml_lex_array(tbl[lex_check_code]);
     tbl.lex_trans_code = caml_lex_array(tbl[lex_trans_code]);
     tbl.lex_default_code = caml_lex_array(tbl[lex_default_code]);
    }
    if(tbl.lex_code == null)
     tbl.lex_code = caml_jsbytes_of_string(tbl[lex_code]);
    var c, state = start_state, buffer = lexbuf[lex_buffer];
    if(state >= 0){
     lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];
     lexbuf[lex_last_action] = - 1;
    }
    else
     state = - state - 1;
    for(;;){
     var base = tbl.lex_base[state];
     if(base < 0){
      var pc_off = tbl.lex_base_code[state];
      caml_lex_run_tag(tbl.lex_code, pc_off, lexbuf[lex_mem]);
      return - base - 1;
     }
     var backtrk = tbl.lex_backtrk[state];
     if(backtrk >= 0){
      var pc_off = tbl.lex_backtrk_code[state];
      caml_lex_run_tag(tbl.lex_code, pc_off, lexbuf[lex_mem]);
      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
      lexbuf[lex_last_action] = backtrk;
     }
     if(lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
      if(lexbuf[lex_eof_reached] === 0) return - state - 1; else c = 256;
     else{
      c = caml_bytes_unsafe_get(buffer, lexbuf[lex_curr_pos]);
      lexbuf[lex_curr_pos]++;
     }
     var pstate = state;
     if(tbl.lex_check[base + c] === state)
      state = tbl.lex_trans[base + c];
     else
      state = tbl.lex_default[state];
     if(state < 0){
      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];
      if(lexbuf[lex_last_action] === - 1)
       caml_failwith("lexing: empty token");
      else
       return lexbuf[lex_last_action];
     }
     else{
      var base_code = tbl.lex_base_code[pstate], pc_off;
      if(tbl.lex_check_code[base_code + c] === pstate)
       pc_off = tbl.lex_trans_code[base_code + c];
      else
       pc_off = tbl.lex_default_code[pstate];
      if(pc_off > 0)
       caml_lex_run_mem
        (tbl.lex_code, pc_off, lexbuf[lex_mem], lexbuf[lex_curr_pos]);
      if(c === 256) lexbuf[lex_eof_reached] = 0;
     }
    }
   }
   function caml_new_string(s){return caml_string_of_jsbytes(s);}
   function caml_nextafter_float(x, y){
    if(Number.isNaN(x) || Number.isNaN(y)) return Number.NaN;
    if(x === y) return y;
    if(x === 0) return y < 0 ? - Math.pow(2, - 1074) : Math.pow(2, - 1074);
    var bits = caml_int64_bits_of_float(x), one = caml_int64_of_int32(1);
    if(x < y === x > 0)
     bits = caml_int64_add(bits, one);
    else
     bits = caml_int64_sub(bits, one);
    return caml_int64_float_of_bits(bits);
   }
   function caml_notequal(x, y){
    return + (caml_compare_val(x, y, false) !== 0);
   }
   function caml_obj_add_offset(_v, _offset){
    caml_failwith("Obj.add_offset is not supported");
   }
   function caml_obj_block(tag, size){
    var o = new Array(size + 1);
    o[0] = tag;
    for(var i = 1; i <= size; i++) o[i] = 0;
    return o;
   }
   function caml_obj_compare_and_swap(x, i, old, n){
    if(x[i + 1] === old){x[i + 1] = n; return 1;}
    return 0;
   }
   function caml_obj_is_shared(_x){return 1;}
   function caml_obj_raw_field(o, i){return o[i + 1];}
   function caml_obj_reachable_words(_o){return 0;}
   function caml_obj_set_raw_field(o, i, v){return o[i + 1] = v;}
   function caml_obj_with_tag(tag, x){
    var l = x.length, a = new Array(l);
    a[0] = tag;
    for(var i = 1; i < l; i++) a[i] = x[i];
    return a;
   }
   function caml_ojs_new_arr(c, a){
    switch(a.length){
      case 0:
       return new c();
      case 1:
       return new c(a[0]);
      case 2:
       return new c(a[0], a[1]);
      case 3:
       return new c(a[0], a[1], a[2]);
      case 4:
       return new c(a[0], a[1], a[2], a[3]);
      case 5:
       return new c(a[0], a[1], a[2], a[3], a[4]);
      case 6:
       return new c(a[0], a[1], a[2], a[3], a[4], a[5]);
      case 7:
       return new c(a[0], a[1], a[2], a[3], a[4], a[5], a[6]);
    }
    function F(){return c.apply(this, a);}
    F.prototype = c.prototype;
    return new F();
   }
   function caml_oo_cache_id(){
    var cacheid = caml_method_cache.length;
    caml_method_cache[cacheid] = 0;
   }
   var
    caml_output_val =
      function(){
        class Writer{
           constructor(){
            this.chunk = [];
            this.chunk_idx = 20;
            this.block_len = 0;
            this.obj_counter = 0;
            this.size_32 = 0;
            this.size_64 = 0;
           }
           write(size, value){
            for(var i = size - 8; i >= 0; i -= 8)
             this.chunk[this.chunk_idx++] = value >> i & 0xff;
           }
           write_at(pos, size, value){
            var pos = pos;
            for(var i = size - 8; i >= 0; i -= 8)
             this.chunk[pos++] = value >> i & 0xff;
           }
           write_code(size, code, value){
            this.chunk[this.chunk_idx++] = code;
            for(var i = size - 8; i >= 0; i -= 8)
             this.chunk[this.chunk_idx++] = value >> i & 0xff;
           }
           write_shared(offset){
            if(offset < 1 << 8)
             this.write_code(8, 0x04, offset);
            else if(offset < 1 << 16)
             this.write_code(16, 0x05, offset);
            else
             this.write_code(32, 0x06, offset);
           }
           pos(){return this.chunk_idx;}
           finalize(){
            this.block_len = this.chunk_idx - 20;
            this.chunk_idx = 0;
            this.write(32, 0x8495a6be);
            this.write(32, this.block_len);
            this.write(32, this.obj_counter);
            this.write(32, this.size_32);
            this.write(32, this.size_64);
            return this.chunk;
           }
         }
        return function(v, flags){
         flags = caml_list_to_js_array(flags);
         var
          no_sharing = flags.indexOf(0) !== - 1,
          closures = flags.indexOf(1) !== - 1;
         if(closures)
          console.warn
           ("in caml_output_val: flag Marshal.Closures is not supported.");
         var
          writer = new Writer(),
          stack = [],
          intern_obj_table = no_sharing ? null : new MlObjectTable();
         function memo(v){
          if(no_sharing) return false;
          var existing_offset = intern_obj_table.recall(v);
          if(existing_offset){
           writer.write_shared(existing_offset);
           return true;
          }
          else{intern_obj_table.store(v); return false;}
         }
         function extern_rec(v){
          if(v.caml_custom){
           if(memo(v)) return;
           var
            name = v.caml_custom,
            ops = caml_custom_ops[name],
            sz_32_64 = [0, 0];
           if(! ops.serialize)
            caml_invalid_argument("output_value: abstract value (Custom)");
           if(ops.fixed_length === undefined){
            writer.write(8, 0x18);
            for(var i = 0; i < name.length; i++)
             writer.write(8, name.charCodeAt(i));
            writer.write(8, 0);
            var header_pos = writer.pos();
            for(var i = 0; i < 12; i++) writer.write(8, 0);
            ops.serialize(writer, v, sz_32_64);
            writer.write_at(header_pos, 32, sz_32_64[0]);
            writer.write_at(header_pos + 4, 32, 0);
            writer.write_at(header_pos + 8, 32, sz_32_64[1]);
           }
           else{
            writer.write(8, 0x19);
            for(var i = 0; i < name.length; i++)
             writer.write(8, name.charCodeAt(i));
            writer.write(8, 0);
            ops.serialize(writer, v, sz_32_64);
            if(ops.fixed_length !== sz_32_64[0])
             caml_failwith
              ("output_value: incorrect fixed sizes specified by " + name);
           }
           writer.size_32 += 2 + (sz_32_64[0] + 3 >> 2);
           writer.size_64 += 2 + (sz_32_64[1] + 7 >> 3);
          }
          else if(Array.isArray(v) && v[0] === (v[0] | 0)){
           if(v[0] === 251)
            caml_failwith("output_value: abstract value (Abstract)");
           if(caml_is_continuation_tag(v[0]))
            caml_invalid_argument("output_value: continuation value");
           if(v.length > 1 && memo(v)) return;
           if(v[0] < 16 && v.length - 1 < 8)
            writer.write(8, 0x80 + v[0] + (v.length - 1 << 4));
           else
            writer.write_code(32, 0x08, v.length - 1 << 10 | v[0]);
           writer.size_32 += v.length;
           writer.size_64 += v.length;
           if(v.length > 1) stack.push(v, 1);
          }
          else if(caml_is_ml_bytes(v)){
           if(! caml_is_ml_bytes(caml_string_of_jsbytes("")))
            caml_failwith
             ("output_value: [Bytes.t] cannot safely be marshaled with [--enable use-js-string]");
           if(memo(v)) return;
           var len = caml_ml_bytes_length(v);
           if(len < 0x20)
            writer.write(8, 0x20 + len);
           else if(len < 0x100)
            writer.write_code(8, 0x09, len);
           else
            writer.write_code(32, 0x0a, len);
           for(var i = 0; i < len; i++)
            writer.write(8, caml_bytes_unsafe_get(v, i));
           writer.size_32 += 1 + ((len + 4) / 4 | 0);
           writer.size_64 += 1 + ((len + 8) / 8 | 0);
          }
          else if(caml_is_ml_string(v)){
           if(memo(v)) return;
           var len = caml_ml_string_length(v);
           if(len < 0x20)
            writer.write(8, 0x20 + len);
           else if(len < 0x100)
            writer.write_code(8, 0x09, len);
           else
            writer.write_code(32, 0x0a, len);
           for(var i = 0; i < len; i++)
            writer.write(8, caml_string_unsafe_get(v, i));
           writer.size_32 += 1 + ((len + 4) / 4 | 0);
           writer.size_64 += 1 + ((len + 8) / 8 | 0);
          }
          else if(v !== (v | 0)){
           var type_of_v = typeof v;
           if(type_of_v !== "number")
            caml_failwith("output_value: abstract value (" + type_of_v + ")");
           if(memo(v)) return;
           var t = caml_int64_to_bytes(caml_int64_bits_of_float(v));
           writer.write(8, 0x0c);
           for(var i = 0; i < 8; i++) writer.write(8, t[7 - i]);
           writer.size_32 += 3;
           writer.size_64 += 2;
          }
          else if(v >= 0 && v < 0x40)
           writer.write(8, 0x40 + v);
          else if(v >= - (1 << 7) && v < 1 << 7)
           writer.write_code(8, 0x00, v);
          else if(v >= - (1 << 15) && v < 1 << 15)
           writer.write_code(16, 0x01, v);
          else
           writer.write_code(32, 0x02, v);
         }
         extern_rec(v);
         while(stack.length > 0){
          var i = stack.pop(), v = stack.pop();
          if(i + 1 < v.length) stack.push(v, i + 1);
          extern_rec(v[i]);
         }
         if(intern_obj_table)
          writer.obj_counter = intern_obj_table.objs.length;
         writer.finalize();
         return new Uint8Array(writer.chunk);};
       }
       ();
   function caml_output_value_to_string(v, flags){
    return caml_string_of_uint8_array(caml_output_val(v, flags));
   }
   function caml_output_value(chanid, v, flags){
    var s = caml_output_value_to_string(v, flags);
    caml_ml_output(chanid, s, 0, caml_ml_string_length(s));
    return 0;
   }
   function caml_output_value_to_buffer(s, ofs, len, v, flags){
    var t = caml_output_val(v, flags);
    if(t.length > len) caml_failwith("Marshal.to_buffer: buffer overflow");
    caml_blit_bytes(caml_bytes_of_uint8_array(t), 0, s, ofs, t.length);
    return 0;
   }
   function caml_output_value_to_bytes(v, flags){
    return caml_bytes_of_uint8_array(caml_output_val(v, flags));
   }
   var caml_parser_trace = 0;
   function caml_parse_engine(tables, env, cmd, arg){
    var
     ERRCODE = 256,
     loop = 6,
     testshift = 7,
     shift = 8,
     shift_recover = 9,
     reduce = 10,
     READ_TOKEN = 0,
     RAISE_PARSE_ERROR = 1,
     GROW_STACKS_1 = 2,
     GROW_STACKS_2 = 3,
     COMPUTE_SEMANTIC_ACTION = 4,
     CALL_ERROR_FUNCTION = 5,
     env_s_stack = 1,
     env_v_stack = 2,
     env_symb_start_stack = 3,
     env_symb_end_stack = 4,
     env_stacksize = 5,
     env_stackbase = 6,
     env_curr_char = 7,
     env_lval = 8,
     env_symb_start = 9,
     env_symb_end = 10,
     env_asp = 11,
     env_rule_len = 12,
     env_rule_number = 13,
     env_sp = 14,
     env_state = 15,
     env_errflag = 16,
     tbl_transl_const = 2,
     tbl_transl_block = 3,
     tbl_lhs = 4,
     tbl_len = 5,
     tbl_defred = 6,
     tbl_dgoto = 7,
     tbl_sindex = 8,
     tbl_rindex = 9,
     tbl_gindex = 10,
     tbl_tablesize = 11,
     tbl_table = 12,
     tbl_check = 13,
     tbl_names_const = 15,
     tbl_names_block = 16;
    function log(x){
     var s = caml_string_of_jsbytes(x + "\n");
     caml_ml_output(caml_sys_fds[2].chanid, s, 0, caml_ml_string_length(s));
    }
    function token_name(names, number){
     var str = caml_jsstring_of_string(names);
     if(str[0] === "\x00") return "<unknown token>";
     return str.split("\x00")[number];
    }
    function print_token(state, tok){
     var token, kind;
     if(Array.isArray(tok)){
      token = token_name(tables[tbl_names_block], tok[0]);
      if(typeof tok[1] === "number")
       kind = "" + tok[1];
      else if(typeof tok[1] === "string")
       kind = tok[1];
      else if(tok[1] instanceof MlBytes)
       kind = caml_jsbytes_of_string(tok[1]);
      else
       kind = "_";
      log("State " + state + ": read token " + token + "(" + kind + ")");
     }
     else{
      token = token_name(tables[tbl_names_const], tok);
      log("State " + state + ": read token " + token);
     }
    }
    if(! tables.dgoto){
     tables.defred = caml_lex_array(tables[tbl_defred]);
     tables.sindex = caml_lex_array(tables[tbl_sindex]);
     tables.check = caml_lex_array(tables[tbl_check]);
     tables.rindex = caml_lex_array(tables[tbl_rindex]);
     tables.table = caml_lex_array(tables[tbl_table]);
     tables.len = caml_lex_array(tables[tbl_len]);
     tables.lhs = caml_lex_array(tables[tbl_lhs]);
     tables.gindex = caml_lex_array(tables[tbl_gindex]);
     tables.dgoto = caml_lex_array(tables[tbl_dgoto]);
    }
    var
     res = 0,
     n,
     n1,
     n2,
     state1,
     sp = env[env_sp],
     state = env[env_state],
     errflag = env[env_errflag];
    the_loop:
    for(;;)
     switch(cmd){
       case 0:
        state = 0; errflag = 0;
       case 6:
        n = tables.defred[state];
        if(n !== 0){cmd = reduce; continue the_loop;}
        if(env[env_curr_char] >= 0){cmd = testshift; continue the_loop;}
        res = READ_TOKEN;
        break the_loop;
       case 1:
        if(Array.isArray(arg)){
         env[env_curr_char] = tables[tbl_transl_block][arg[0] + 1];
         env[env_lval] = arg[1];
        }
        else{
         env[env_curr_char] = tables[tbl_transl_const][arg + 1];
         env[env_lval] = 0;
        }
        if(caml_parser_trace) print_token(state, arg);
       case 7:
        n1 = tables.sindex[state];
        n2 = n1 + env[env_curr_char];
        if
         (n1 !== 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
          && tables.check[n2] === env[env_curr_char]){cmd = shift; continue the_loop;}
        n1 = tables.rindex[state];
        n2 = n1 + env[env_curr_char];
        if
         (n1 !== 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
          && tables.check[n2] === env[env_curr_char]){
         n = tables.table[n2];
         cmd = reduce;
         continue the_loop;
        }
        if(errflag <= 0){res = CALL_ERROR_FUNCTION; break the_loop;}
       case 5:
        if(errflag < 3){
         errflag = 3;
         for(;;){
          state1 = env[env_s_stack][sp + 1];
          n1 = tables.sindex[state1];
          n2 = n1 + ERRCODE;
          if
           (n1 !== 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
            && tables.check[n2] === ERRCODE){
           if(caml_parser_trace) log("Recovering in state " + state1);
           cmd = shift_recover;
           continue the_loop;
          }
          else{
           if(caml_parser_trace) log("Discarding state " + state1);
           if(sp <= env[env_stackbase]){
            if(caml_parser_trace) log("No more states to discard");
            return RAISE_PARSE_ERROR;
           }
           sp--;
          }
         }
        }
        else{
         if(env[env_curr_char] === 0) return RAISE_PARSE_ERROR;
         if(caml_parser_trace) log("Discarding last token read");
         env[env_curr_char] = - 1;
         cmd = loop;
         continue the_loop;
        }
       case 8:
        env[env_curr_char] = - 1; if(errflag > 0) errflag--;
       case 9:
        if(caml_parser_trace)
         log("State " + state + ": shift to state " + tables.table[n2]);
        state = tables.table[n2];
        sp++;
        if(sp >= env[env_stacksize]){res = GROW_STACKS_1; break the_loop;}
       case 2:
        env[env_s_stack][sp + 1] = state;
        env[env_v_stack][sp + 1] = env[env_lval];
        env[env_symb_start_stack][sp + 1] = env[env_symb_start];
        env[env_symb_end_stack][sp + 1] = env[env_symb_end];
        cmd = loop;
        continue the_loop;
       case 10:
        if(caml_parser_trace) log("State " + state + ": reduce by rule " + n);
        var m = tables.len[n];
        env[env_asp] = sp;
        env[env_rule_number] = n;
        env[env_rule_len] = m;
        sp = sp - m + 1;
        m = tables.lhs[n];
        state1 = env[env_s_stack][sp];
        n1 = tables.gindex[m];
        n2 = n1 + state1;
        if
         (n1 !== 0 && n2 >= 0 && n2 <= tables[tbl_tablesize]
          && tables.check[n2] === state1)
         state = tables.table[n2];
        else
         state = tables.dgoto[m];
        if(sp >= env[env_stacksize]){res = GROW_STACKS_2; break the_loop;}
       case 3:
        res = COMPUTE_SEMANTIC_ACTION; break the_loop;
       case 4:
        env[env_s_stack][sp + 1] = state;
        env[env_v_stack][sp + 1] = arg;
        var asp = env[env_asp];
        env[env_symb_end_stack][sp + 1] = env[env_symb_end_stack][asp + 1];
        if(sp > asp)
         env[env_symb_start_stack][sp + 1] = env[env_symb_end_stack][asp + 1];
        cmd = loop;
        continue the_loop;
       default: return RAISE_PARSE_ERROR;
     }
    env[env_sp] = sp;
    env[env_state] = state;
    env[env_errflag] = errflag;
    return res;
   }
   function caml_pure_js_expr(s){
    console.error("caml_pure_js_expr: fallback to runtime evaluation\n");
    return eval(caml_jsstring_of_string(s));
   }
   function caml_raise_not_found(){
    caml_raise_constant(caml_global_data.Not_found);
   }
   function caml_raw_backtrace_length(){return 0;}
   function caml_raw_backtrace_next_slot(_slot){return 0;}
   function caml_raw_backtrace_slot(_bt, _idx){
    caml_invalid_argument
     ("Printexc.get_raw_backtrace_slot: index out of bounds");
   }
   function caml_read_file_content(name){
    var
     name = typeof name === "string" ? caml_string_of_jsstring(name) : name,
     root = resolve_fs_device(name);
    if(root.device.exists(root.rest)){
     var
      file = root.device.open(root.rest, {rdonly: 1}),
      len = file.length(),
      buf = new Uint8Array(len);
     file.read(buf, 0, len);
     return caml_string_of_uint8_array(buf);
    }
    caml_raise_no_such_file(caml_jsstring_of_string(name));
   }
   function caml_recommended_domain_count(_unit){return 1;}
   function caml_record_backtrace(b){
    caml_record_backtrace_runtime_flag = b;
    return 0;
   }
   var jsoo_toplevel_reloc = undefined;
   function caml_register_global(n, v, name_opt){
    if(name_opt){
     var name = name_opt;
     if(jsoo_toplevel_reloc)
      n = caml_callback(jsoo_toplevel_reloc, [name]);
     else if(caml_global_data.symbols){
      if(! caml_global_data.symidx)
       caml_global_data.symidx = caml_build_symbols(caml_global_data.symbols);
      var nid = caml_global_data.symidx[name];
      if(nid >= 0)
       n = nid;
      else{
       var n = caml_global_data.symidx.next_idx++;
       caml_global_data.symidx[name] = n;
      }
     }
    }
    caml_global_data[n + 1] = v;
    if(name_opt) caml_global_data[name_opt] = v;
   }
   function caml_register_named_value(nm, v){
    caml_named_values[caml_jsbytes_of_string(nm)] = v;
    return 0;
   }
   function caml_restore_raw_backtrace(_exn, _bt){return 0;}
   function caml_round_float(x){
    if(x >= 0){
     var y = Math.floor(x);
     return x - y >= 0.5 ? y + 1 : y;
    }
    else{var y = Math.ceil(x); return y - x >= 0.5 ? y - 1 : y;}
   }
   function caml_runtime_events_create_cursor(_target){return {};}
   function caml_runtime_events_free_cursor(_cursor){return 0;}
   function caml_runtime_events_read_poll(_cursor, _callbacks, _num){return 0;
   }
   function caml_runtime_events_user_register
   (event_name, event_tag, event_type){
    caml_custom_event_index += 1;
    return [0, caml_custom_event_index, event_name, event_type, event_tag];
   }
   function caml_runtime_events_user_resolve(){return 0;}
   function caml_runtime_events_user_write(_event, _event_content){return 0;}
   function caml_runtime_parameters(_unit){return caml_string_of_jsbytes("");}
   function caml_runtime_variant(_unit){return caml_string_of_jsbytes("");}
   function caml_set_parser_trace(bool){
    var oldflag = caml_parser_trace;
    caml_parser_trace = bool;
    return oldflag;
   }
   function caml_set_static_env(k, v){jsoo_static_env[k] = v; return 0;}
   function caml_signbit_float(x){
    if(x === 0) x = 1 / x;
    return x < 0 ? 1 : 0;
   }
   function caml_sinh_float(x){return Math.sinh(x);}
   function caml_strerror(errno){
    const util = require("node:util");
    if(errno >= 0){
     const code = unix_error[errno];
     return util.getSystemErrorMap().entries().find(x=>x[1][0] === code)[1][1];
    }
    else
     return util.getSystemErrorMessage(errno);
   }
   function caml_string_bound_error(){
    caml_invalid_argument("index out of bounds");
   }
   function caml_string_concat(a, b){return a + b;}
   function caml_string_equal(s1, s2){if(s1 === s2) return 1; return 0;}
   function caml_string_get(s, i){
    if(i >>> 0 >= caml_ml_string_length(s)) caml_string_bound_error();
    return caml_string_unsafe_get(s, i);
   }
   function caml_string_get16(s, i){
    if(i >>> 0 >= caml_ml_string_length(s) - 1) caml_string_bound_error();
    var
     b1 = caml_string_unsafe_get(s, i),
     b2 = caml_string_unsafe_get(s, i + 1);
    return b2 << 8 | b1;
   }
   function caml_string_get32(s, i){
    if(i >>> 0 >= caml_ml_string_length(s) - 3) caml_string_bound_error();
    var
     b1 = caml_string_unsafe_get(s, i),
     b2 = caml_string_unsafe_get(s, i + 1),
     b3 = caml_string_unsafe_get(s, i + 2),
     b4 = caml_string_unsafe_get(s, i + 3);
    return b4 << 24 | b3 << 16 | b2 << 8 | b1;
   }
   function caml_string_get64(s, i){
    if(i >>> 0 >= caml_ml_string_length(s) - 7) caml_string_bound_error();
    var a = new Array(8);
    for(var j = 0; j < 8; j++) a[7 - j] = caml_string_unsafe_get(s, i + j);
    return caml_int64_of_bytes(a);
   }
   function caml_string_lessequal(s1, s2){return s1 <= s2 ? 1 : 0;}
   function caml_string_greaterequal(s1, s2){return caml_string_lessequal(s2, s1);
   }
   function caml_string_lessthan(s1, s2){return s1 < s2 ? 1 : 0;}
   function caml_string_greaterthan(s1, s2){return caml_string_lessthan(s2, s1);
   }
   function caml_string_hash(h, v){
    var h = caml_hash_mix_string(h, v), h = caml_hash_mix_final(h);
    return h & 0x3fffffff;
   }
   function caml_string_notequal(s1, s2){
    return 1 - caml_string_equal(s1, s2);
   }
   function caml_string_of_bytes(s){
    s.t & 6 && caml_convert_string_to_bytes(s);
    return caml_string_of_jsbytes(s.c);
   }
   function caml_string_set(_s, _i, _c){caml_failwith("caml_string_set");}
   function caml_sys_argv(_unit){return caml_argv;}
   function caml_sys_chdir(dir, raise_unix){
    var root = resolve_fs_device(dir);
    if(root.device.is_dir(root.rest)){
     if(root.rest)
      caml_current_dir = caml_trailing_slash(root.path + root.rest);
     else
      caml_current_dir = root.path;
     return 0;
    }
    else if(root.device.exists(root.rest))
     caml_raise_system_error
      (raise_unix,
       "ENOTDIR",
       "chdir",
       "not a directory",
       caml_jsstring_of_string(dir));
    else
     caml_raise_no_such_file(caml_jsstring_of_string(dir), raise_unix);
   }
   function caml_sys_const_backend_type(){
    return [0, caml_string_of_jsbytes("js_of_ocaml")];
   }
   function caml_sys_const_big_endian(){return 0;}
   function caml_sys_const_int_size(){return 32;}
   function caml_sys_const_max_wosize(){return 0x7fffffff / 4 | 0;}
   function caml_sys_const_naked_pointers_checked(_unit){return 0;}
   var os_type = globalThis.process?.platform === "win32" ? "Win32" : "Unix";
   function caml_sys_const_ostype_cygwin(){return os_type === "Cygwin" ? 1 : 0;
   }
   function caml_sys_const_ostype_unix(){return os_type === "Unix" ? 1 : 0;}
   function caml_sys_const_ostype_win32(){return os_type === "Win32" ? 1 : 0;}
   function caml_sys_const_word_size(){return 32;}
   function caml_sys_executable_name(_unit){return caml_executable_name;}
   function caml_sys_exit(code){
    if(globalThis.quit) globalThis.quit(code);
    if(globalThis.process?.exit) globalThis.process.exit(code);
    caml_invalid_argument("Function 'exit' not implemented");
   }
   function caml_sys_file_exists(name){
    var root = resolve_fs_device(name);
    return root.device.exists(root.rest);
   }
   function caml_sys_get_argv(_unit){return [0, caml_argv[1], caml_argv];}
   function caml_sys_get_config(){
    return [0, caml_string_of_jsbytes(os_type), 32, 0];
   }
   function caml_sys_getcwd(){
    return caml_string_of_jsstring(caml_current_dir);
   }
   function caml_sys_getenv(name){
    var r = jsoo_sys_getenv(caml_jsstring_of_string(name));
    if(r === undefined) caml_raise_not_found();
    return caml_string_of_jsstring(r);
   }
   function caml_sys_is_directory(name){
    var root = resolve_fs_device(name), a = root.device.is_dir(root.rest);
    return a ? 1 : 0;
   }
   function caml_sys_is_regular_file(name){
    var root = resolve_fs_device(name);
    return root.device.isFile(root.rest);
   }
   function caml_sys_isatty(_chan){return 0;}
   function caml_sys_mkdir(name, perm){
    var root = resolve_fs_device(name);
    root.device.mkdir(root.rest, perm);
    return 0;
   }
   function caml_sys_modify_argv(arg){caml_argv = arg; return 0;}
   function caml_sys_random_seed(){
    if(globalThis.crypto)
     if(globalThis.crypto.getRandomValues){
      var a = globalThis.crypto.getRandomValues(new Int32Array(4));
      return [0, a[0], a[1], a[2], a[3]];
     }
     else if(globalThis.crypto.randomBytes){
      var a = new Int32Array(globalThis.crypto.randomBytes(16).buffer);
      return [0, a[0], a[1], a[2], a[3]];
     }
    var now = new Date().getTime(), x = now ^ 0xffffffff * Math.random();
    return [0, x];
   }
   function caml_sys_read_directory(name){
    var
     root = resolve_fs_device(name),
     a = root.device.readdir(root.rest),
     l = new Array(a.length + 1);
    l[0] = 0;
    for(var i = 0; i < a.length; i++)
     l[i + 1] = caml_string_of_jsstring(a[i]);
    return l;
   }
   function caml_sys_remove(name){
    var root = resolve_fs_device(name);
    return root.device.unlink(root.rest);
   }
   function caml_sys_rename(o, n){
    var o_root = resolve_fs_device(o), n_root = resolve_fs_device(n);
    if(o_root.device !== n_root.device)
     caml_failwith("caml_sys_rename: cannot move file between two filesystem");
    if(! o_root.device.rename)
     caml_failwith("caml_sys_rename: no implemented");
    o_root.device.rename(o_root.rest, n_root.rest);
   }
   function caml_sys_rmdir(name){
    var root = resolve_fs_device(name);
    root.device.rmdir(root.rest);
    return 0;
   }
   function caml_sys_system_command(cmd){
    var cmd = caml_jsstring_of_string(cmd);
    if(typeof require !== "undefined"){
     var child_process = require("node:child_process");
     if(child_process?.execSync)
      try{child_process.execSync(cmd, {stdio: "inherit"}); return 0;}
      catch(e){return 1;}
    }
    else
     return 127;
   }
   var caml_initial_time = new Date().getTime() * 0.001;
   function caml_sys_time(){
    var now = new Date().getTime();
    return now * 0.001 - caml_initial_time;
   }
   function caml_sys_time_include_children(_b){return caml_sys_time();}
   function caml_sys_unsafe_getenv(name){return caml_sys_getenv(name);}
   function caml_tanh_float(x){return Math.tanh(x);}
   function caml_throw_js_exception(exn){throw exn;}
   function caml_to_js_string(s){return caml_jsstring_of_string(s);}
   function caml_trampoline(res){
    var c = 1;
    while(res?.joo_tramp){res = res.joo_tramp.apply(null, res.joo_args); c++;}
    return res;
   }
   function caml_trampoline_return(f, args, direct){
    return {joo_tramp: f, joo_args: args, joo_direct: direct};
   }
   function caml_trunc_float(x){return Math.trunc(x);}
   function caml_uniform_array_append(a1, a2){return caml_array_append(a1, a2);
   }
   function caml_uniform_array_blit(a1, i1, a2, i2, len){return caml_array_blit(a1, i1, a2, i2, len);
   }
   function caml_uniform_array_fill(array, ofs, len, v){return caml_array_fill(array, ofs, len, v);
   }
   function caml_uniform_array_make(len, init){return caml_array_make(len, init);
   }
   function caml_uniform_array_sub(a, i, len){return caml_array_sub(a, i, len);
   }
   function caml_unix_access(name, flags){
    var f = {};
    while(flags){
     switch(flags[1]){
       case 0:
        f.r = 1; break;
       case 1:
        f.w = 1; break;
       case 2:
        f.x = 1; break;
       case 3:
        f.f = 1; break;
     }
     flags = flags[2];
    }
    var root = resolve_fs_device(name);
    if(! root.device.access)
     caml_failwith("caml_unix_access: not implemented");
    root.device.access(root.rest, f, true);
    return 0;
   }
   function caml_unix_chdir(dir){return caml_sys_chdir(dir, true);}
   function caml_unix_chmod(name, perms){
    var root = resolve_fs_device(name);
    if(! root.device.chmod) caml_failwith("caml_unix_chmod: not implemented");
    return root.device.chmod(root.rest, perms);
   }
   function caml_unix_cleanup(){}
   function caml_unix_lookup_file(fd, cmd){
    var fd_desc = caml_sys_fds[fd];
    if(fd_desc === undefined) caml_raise_system_error(1, "EBADF", cmd);
    return fd_desc.file;
   }
   function caml_unix_close(fd){
    var file = caml_unix_lookup_file(fd, "close");
    file.close(1);
    return 0;
   }
   function caml_unix_closedir(dir_handle){
    try{dir_handle.pointer.closeSync();}
    catch(e){caml_raise_system_error(1, "EBADF", "closedir");}
   }
   function caml_unix_fchmod(fd, perms){
    var file = caml_unix_lookup_file(fd, "fchmod");
    if(! file.chmod) caml_failwith("caml_unix_fchmod: not implemented");
    return file.chmod(perms);
   }
   function caml_unix_filedescr_of_fd(x){return x;}
   function caml_unix_findclose(dir_handle){return caml_unix_closedir(dir_handle);
   }
   function caml_unix_opendir(path){
    var root = resolve_fs_device(path);
    if(! root.device.opendir)
     caml_failwith("caml_unix_opendir: not implemented");
    var dir_handle = root.device.opendir(root.rest, true);
    return {pointer: dir_handle, path: path};
   }
   function caml_unix_readdir(dir_handle){
    var entry;
    try{entry = dir_handle.pointer.readSync();}
    catch(e){caml_raise_system_error(1, "EBADF", "readdir");}
    if(entry === null)
     caml_raise_end_of_file();
    else
     return caml_string_of_jsstring(entry.name);
   }
   function caml_unix_findfirst(path){
    var path_js = caml_jsstring_of_string(path);
    path_js = path_js.replace(/(^|[\\/])\*\.\*$/, "");
    path = caml_string_of_jsstring(path_js);
    var
     dir_handle = caml_unix_opendir(path),
     first_entry = caml_unix_readdir(dir_handle);
    return [0, first_entry, dir_handle];
   }
   function caml_unix_findnext(dir_handle){return caml_unix_readdir(dir_handle);
   }
   function caml_unix_fstat(fd){
    var file = caml_unix_lookup_file(fd, "fstat");
    if(! file.stat) caml_failwith("caml_unix_fstat: not implemented");
    return file.stat(false);
   }
   function caml_unix_fstat_64(fd){
    var file = caml_unix_lookup_file(fd, "fstat");
    if(! file.stat) caml_failwith("caml_unix_fstat64: not implemented");
    return file.stat(true);
   }
   function caml_unix_fsync(fd){
    var file = caml_unix_lookup_file(fd, "fsync");
    if(! file.sync) caml_failwith("caml_unix_fsync: not implemented");
    return file.sync();
   }
   function caml_unix_ftruncate(fd, len){
    var file = caml_unix_lookup_file(fd, "ftruncate");
    if(! file.truncate) caml_failwith("caml_unix_ftruncate: not implemented");
    file.truncate(len, 1);
    return 0;
   }
   function caml_unix_ftruncate_64(fd, len){
    var file = caml_unix_lookup_file(fd, "ftruncate");
    if(! file.truncate)
     caml_failwith("caml_unix_ftruncate_64: not implemented");
    file.truncate(caml_int64_to_float(len), 1);
    return 0;
   }
   function caml_unix_getegid(_unit){
    if(globalThis.process?.getegid) return globalThis.process.getegid();
    return 1;
   }
   function caml_unix_geteuid(_unit){
    if(globalThis.process?.geteuid) return globalThis.process.geteuid();
    return 1;
   }
   function caml_unix_getgid(_unit){
    if(globalThis.process?.getgid) return globalThis.process.getgid();
    return 1;
   }
   function caml_unix_getpwnam(_unit){caml_raise_not_found();}
   function caml_unix_gettimeofday(){return new Date().getTime() / 1000;}
   function caml_unix_getuid(_unit){
    if(globalThis.process?.getuid) return globalThis.process.getuid();
    return 1;
   }
   function caml_unix_gmtime(t){
    var
     d = new Date(t * 1000),
     d_num = d.getTime(),
     januaryfirst = new Date(Date.UTC(d.getUTCFullYear(), 0, 1)).getTime(),
     doy = Math.floor((d_num - januaryfirst) / 86400000);
    return [0,
            d.getUTCSeconds(),
            d.getUTCMinutes(),
            d.getUTCHours(),
            d.getUTCDate(),
            d.getUTCMonth(),
            d.getUTCFullYear() - 1900,
            d.getUTCDay(),
            doy,
            false | 0];
   }
   function caml_unix_has_symlink(_unit){return fs_node_supported() ? 1 : 0;}
   function caml_unix_inchannel_of_filedescr(fd){
    var file = caml_unix_lookup_file(fd, "out_channel_of_descr");
    file.check_stream_semantics("in_channel_of_descr");
    return caml_ml_open_descriptor_in(fd);
   }
   function caml_unix_inet_addr_of_string(){return 0;}
   function caml_unix_isatty(fd){
    if(fs_node_supported()){
     var tty = require("node:tty");
     return tty.isatty(caml_unix_lookup_file(fd).fd) ? 1 : 0;
    }
    else
     return 0;
   }
   function caml_unix_link(follow, src, dst){
    var src_root = resolve_fs_device(src), dst_root = resolve_fs_device(dst);
    if(! src_root.device.link)
     caml_failwith("caml_unix_link: not implemented");
    if(typeof follow !== "number")
     caml_raise_system_error(1, "ENOSYS", "link");
    if(src_root.device !== dst_root.device)
     caml_raise_system_error(1, "EXDEV", "link");
    return src_root.device.link(src_root.rest, dst_root.rest, true);
   }
   function caml_unix_localtime(t){
    var
     d = new Date(t * 1000),
     d_num = d.getTime(),
     januaryfirst = new Date(d.getFullYear(), 0, 1).getTime(),
     doy = Math.floor((d_num - januaryfirst) / 86400000),
     jan = new Date(d.getFullYear(), 0, 1),
     jul = new Date(d.getFullYear(), 6, 1),
     stdTimezoneOffset =
       Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());
    return [0,
            d.getSeconds(),
            d.getMinutes(),
            d.getHours(),
            d.getDate(),
            d.getMonth(),
            d.getFullYear() - 1900,
            d.getDay(),
            doy,
            d.getTimezoneOffset() < stdTimezoneOffset | 0];
   }
   function caml_unix_lseek(fd, len, whence){
    var file = caml_unix_lookup_file(fd, "lseek");
    return file.seek(len, whence, 1);
   }
   function caml_unix_lseek_64(fd, len, whence){
    var file = caml_unix_lookup_file(fd, "lseek");
    return file.seek(caml_int64_to_float(len), whence, 1);
   }
   function caml_unix_lstat(name){
    var root = resolve_fs_device(name);
    if(! root.device.lstat) caml_failwith("caml_unix_lstat: not implemented");
    return root.device.lstat(root.rest, false, true);
   }
   function caml_unix_lstat_64(name){
    var root = resolve_fs_device(name);
    if(! root.device.lstat)
     caml_failwith("caml_unix_lstat_64: not implemented");
    return root.device.lstat(root.rest, true, true);
   }
   function caml_unix_mkdir(name, perm){
    var root = resolve_fs_device(name);
    if(! root.device.mkdir) caml_failwith("caml_unix_mkdir: not implemented");
    return root.device.mkdir(root.rest, perm, true);
   }
   function caml_unix_mktime(tm){
    var
     d = new Date(tm[6] + 1900, tm[5], tm[4], tm[3], tm[2], tm[1]).getTime(),
     t = Math.floor(d / 1000),
     tm2 = caml_unix_localtime(t);
    return [0, t, tm2];
   }
   function caml_unix_open(name, flags, perms){
    var f = {};
    while(flags){
     switch(flags[1]){
       case 0:
        f.rdonly = 1; break;
       case 1:
        f.wronly = 1; break;
       case 2:
        f.rdwr = 1; break;
       case 3:
        f.nonblock = 1; break;
       case 4:
        f.append = 1; break;
       case 5:
        f.create = 1; break;
       case 6:
        f.truncate = 1; break;
       case 7:
        f.excl = 1; break;
       case 8:
        f.noctty = 1; break;
       case 9:
        f.dsync = 1; break;
       case 10:
        f.sync = 1; break;
     }
     flags = flags[2];
    }
    var
     root = resolve_fs_device(name),
     file = root.device.open(root.rest, f, perms, true),
     idx = caml_sys_fds.length,
     chanid = new MlChanid(idx);
    caml_sys_fds[idx] = {file: file, chanid: chanid};
    return idx | 0;
   }
   function caml_unix_outchannel_of_filedescr(fd){
    var file = caml_unix_lookup_file(fd, "out_channel_of_descr");
    file.check_stream_semantics("out_channel_of_descr");
    return caml_ml_open_descriptor_out(fd);
   }
   function caml_unix_read(fd, buf, pos, len){
    var file = caml_unix_lookup_file(fd, "read");
    return file.read(caml_uint8_array_of_bytes(buf), pos, len, 1);
   }
   function caml_unix_read_bigarray(fd, buf, pos, len){
    var
     a = caml_ba_to_typed_array(buf),
     file = caml_unix_lookup_file(fd, "read");
    return file.read(a, pos, len, 1);
   }
   function caml_unix_readlink(name){
    var root = resolve_fs_device(name);
    if(! root.device.readlink)
     caml_failwith("caml_unix_readlink: not implemented");
    return root.device.readlink(root.rest, true);
   }
   function caml_unix_rename(o, n){
    var o_root = resolve_fs_device(o), n_root = resolve_fs_device(n);
    if(o_root.device !== n_root.device)
     caml_raise_system_error(1, "EXDEV", "rename");
    if(! o_root.device.rename)
     caml_failwith("caml_sys_rename: no implemented");
    o_root.device.rename(o_root.rest, n_root.rest, true);
   }
   function caml_unix_rewinddir(dir_handle){
    caml_unix_closedir(dir_handle);
    var new_dir_handle = caml_unix_opendir(dir_handle.path);
    dir_handle.pointer = new_dir_handle.pointer;
    return 0;
   }
   function caml_unix_rmdir(name){
    var root = resolve_fs_device(name);
    if(! root.device.rmdir) caml_failwith("caml_unix_rmdir: not implemented");
    return root.device.rmdir(root.rest, true);
   }
   function caml_unix_single_write(fd, buf, pos, len){
    var file = caml_unix_lookup_file(fd, "write");
    if(len === 0) return 0;
    return file.write(caml_uint8_array_of_bytes(buf), pos, len, 1);
   }
   function caml_unix_startup(){}
   function caml_unix_stat(name){
    var root = resolve_fs_device(name);
    if(! root.device.stat) caml_failwith("caml_unix_stat: not implemented");
    return root.device.stat(root.rest, false, true);
   }
   function caml_unix_stat_64(name){
    var root = resolve_fs_device(name);
    if(! root.device.stat)
     caml_failwith("caml_unix_stat_64: not implemented");
    return root.device.stat(root.rest, true, true);
   }
   function caml_unix_symlink(to_dir, src, dst){
    var dst_root = resolve_fs_device(dst);
    if(! dst_root.device.symlink)
     caml_failwith("caml_unix_symlink: not implemented");
    return dst_root.device.symlink
            (to_dir, caml_jsstring_of_string(src), dst_root.rest, true);
   }
   function caml_unix_time(){return Math.floor(caml_unix_gettimeofday());}
   function caml_unix_times(){
    if(globalThis.process?.cpuUsage){
     var t = globalThis.process.cpuUsage();
     return [0, t.user / 1e6, t.system / 1e6, 0, 0];
    }
    else if(globalThis.performance?.now)
     return [0, globalThis.performance.now() / 1000, 0, 0, 0];
    else
     caml_failwith("caml_unix_times: not implemented");
   }
   function caml_unix_truncate(name, len){
    var root = resolve_fs_device(name);
    if(! root.device.truncate)
     caml_failwith("caml_unix_truncate: not implemented");
    root.device.truncate(root.rest, len, true);
    return 0;
   }
   function caml_unix_truncate_64(name, len){
    var root = resolve_fs_device(name);
    if(! root.device.truncate)
     caml_failwith("caml_unix_truncate_64: not implemented");
    root.device.truncate(root.rest, caml_int64_to_float(len), true);
    return 0;
   }
   function caml_unix_unlink(name){
    var root = resolve_fs_device(name);
    if(! root.device.unlink)
     caml_failwith("caml_unix_unlink: not implemented");
    root.device.unlink(root.rest, true);
    return 0;
   }
   function caml_unix_utimes(name, atime, mtime){
    var root = resolve_fs_device(name);
    if(! root.device.utimes)
     caml_failwith("caml_unix_utimes: not implemented");
    root.device.utimes(root.rest, atime, mtime, true);
    return 0;
   }
   function caml_unix_write(fd, buf, pos, len){
    var
     file = caml_unix_lookup_file(fd, "write"),
     a = caml_uint8_array_of_bytes(buf),
     written = 0;
    while(len > 0){
     var n = file.write(a, pos, len, 1);
     written += n;
     pos += n;
     len -= n;
    }
    return written;
   }
   function caml_unix_write_bigarray(fd, buf, pos, len){
    var
     a = caml_ba_to_typed_array(buf),
     file = caml_unix_lookup_file(fd, "write"),
     written = 0;
    while(len > 0){
     var n = file.write(a, pos, len, 1);
     written += n;
     pos += n;
     len -= n;
    }
    return written;
   }
   function caml_unmount(name){
    var
     path = caml_make_path(name),
     name = caml_trailing_slash(path.join("/")),
     idx = - 1;
    for(var i = 0; i < jsoo_mount_point.length; i++)
     if(jsoo_mount_point[i].path === name) idx = i;
    if(idx > - 1) jsoo_mount_point.splice(idx, 1);
    return 0;
   }
   function caml_update_dummy(x, y){
    if(y.fun){x.fun = y.fun; return 0;}
    if(typeof y === "function"){x.fun = y; return 0;}
    var i = y.length;
    while(i--) x[i] = y[i];
    return 0;
   }
   function caml_weak_set(x, i, v){
    if(v === 0) caml_ephe_unset_key(x, i); else caml_ephe_set_key(x, i, v[1]);
    return 0;
   }
   function caml_wrap_exception(e){
    {
     if(Array.isArray(e)) return e;
     var exn;
     if
      (globalThis.RangeError && e instanceof globalThis.RangeError
       && e.message
       && e.message.match(/maximum call stack/i))
      exn = caml_global_data.Stack_overflow;
     else if
      (globalThis.InternalError && e instanceof globalThis.InternalError
       && e.message
       && e.message.match(/too much recursion/i))
      exn = caml_global_data.Stack_overflow;
     else if(e instanceof globalThis.Error && caml_named_value("jsError"))
      exn = [0, caml_named_value("jsError"), e];
     else
      exn = [0, caml_global_data.Failure, caml_string_of_jsstring(String(e))];
     if(e instanceof globalThis.Error) exn.js_error = e;
     return exn;
    }
   }
   function caml_xdg_defaults(_unit){return 0;}
   function caml_xmlhttprequest_create(_unit){
    if(typeof XMLHttpRequest === "undefined")
     caml_failwith("XMLHttpRequest is not available");
    try{return new XMLHttpRequest();}
    catch{caml_failwith("Failed to create XMLHttpRequest");}
   }
   function caml_zstd_initialize(_unit){
    caml_decompress_input = zstd_decompress;
    return 1;
   }
   function compare_digits_nat(nat1, ofs1, nat2, ofs2){
    if(nat1.data[ofs1] > nat2.data[ofs2]) return 1;
    if(nat1.data[ofs1] < nat2.data[ofs2]) return - 1;
    return 0;
   }
   function compare_nat(nat1, ofs1, len1, nat2, ofs2, len2){
    var
     a = num_digits_nat(nat1, ofs1, len1),
     b = num_digits_nat(nat2, ofs2, len2);
    if(a > b) return 1;
    if(a < b) return - 1;
    for(var i = len1 - 1; i >= 0; i--){
     if(nat1.data[ofs1 + i] >>> 0 > nat2.data[ofs2 + i] >>> 0) return 1;
     if(nat1.data[ofs1 + i] >>> 0 < nat2.data[ofs2 + i] >>> 0) return - 1;
    }
    return 0;
   }
   function complement_nat(nat, ofs, len){
    for(var i = 0; i < len; i++)
     nat.data[ofs + i] = (- 1 >>> 0) - (nat.data[ofs + i] >>> 0);
   }
   function create_nat(size){
    var arr = new MlNat(size);
    for(var i = 0; i < size; i++) arr.data[i] = - 1;
    return arr;
   }
   function decr_nat(nat, ofs, len, carry_in){
    var borrow = carry_in === 1 ? 0 : 1;
    for(var i = 0; i < len; i++){
     var x = (nat.data[ofs + i] >>> 0) - borrow;
     nat.data[ofs + i] = x;
     if(x >= 0){borrow = 0; break;} else borrow = 1;
    }
    return borrow === 1 ? 0 : 1;
   }
   function deserialize_nat(reader, sz){
    var len = reader.read32s(), nat = new MlNat(len);
    for(var i = 0; i < len; i++) nat.data[i] = reader.read32s();
    sz[0] = len * 4;
    return nat;
   }
   function div_helper(a, b, c){
    var
     x = a * 65536 + (b >>> 16),
     y = Math.floor(x / c) * 65536,
     z = x % c * 65536,
     w = z + (b & 0x0000ffff);
    return [y + Math.floor(w / c), w % c];
   }
   function div_digit_nat(natq, ofsq, natr, ofsr, nat1, ofs1, len, nat2, ofs2){
    var rem = nat1.data[ofs1 + len - 1] >>> 0;
    for(var i = len - 2; i >= 0; i--){
     var
      x = div_helper(rem, nat1.data[ofs1 + i] >>> 0, nat2.data[ofs2] >>> 0);
     natq.data[ofsq + i] = x[0];
     rem = x[1];
    }
    natr.data[ofsr] = rem;
    return 0;
   }
   function num_leading_zero_bits_in_digit(nat, ofs){
    var a = nat.data[ofs], b = 0;
    if(a & 0xffff0000){b += 16; a >>>= 16;}
    if(a & 0xff00){b += 8; a >>>= 8;}
    if(a & 0xf0){b += 4; a >>>= 4;}
    if(a & 12){b += 2; a >>>= 2;}
    if(a & 2){b += 1; a >>>= 1;}
    if(a & 1) b += 1;
    return 32 - b;
   }
   function shift_left_nat(nat1, ofs1, len1, nat2, ofs2, nbits){
    if(nbits === 0){nat2.data[ofs2] = 0; return 0;}
    var wrap = 0;
    for(var i = 0; i < len1; i++){
     var a = nat1.data[ofs1 + i] >>> 0;
     nat1.data[ofs1 + i] = a << nbits | wrap;
     wrap = a >>> 32 - nbits;
    }
    nat2.data[ofs2] = wrap;
    return 0;
   }
   function shift_right_nat(nat1, ofs1, len1, nat2, ofs2, nbits){
    if(nbits === 0){nat2.data[ofs2] = 0; return 0;}
    var wrap = 0;
    for(var i = len1 - 1; i >= 0; i--){
     var a = nat1.data[ofs1 + i] >>> 0;
     nat1.data[ofs1 + i] = a >>> nbits | wrap;
     wrap = a << 32 - nbits;
    }
    nat2.data[ofs2] = wrap;
    return 0;
   }
   function set_to_zero_nat(nat, ofs, len){
    for(var i = 0; i < len; i++) nat.data[ofs + i] = 0;
    return 0;
   }
   function nat_of_array(l){return new MlNat(l);}
   function mult_digit_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat3, ofs3){
    var carry = 0, a = nat3.data[ofs3] >>> 0;
    for(var i = 0; i < len2; i++){
     var
      x1 =
        (nat1.data[ofs1 + i] >>> 0)
        + (nat2.data[ofs2 + i] >>> 0) * (a & 0x0000ffff)
        + carry,
      x2 = (nat2.data[ofs2 + i] >>> 0) * (a >>> 16);
     carry = Math.floor(x2 / 65536);
     var x3 = x1 + x2 % 65536 * 65536;
     nat1.data[ofs1 + i] = x3;
     carry += Math.floor(x3 / 4294967296);
    }
    return len2 < len1 && carry
            ? add_nat
              (nat1, ofs1 + len2, len1 - len2, nat_of_array([carry]), 0, 1, 0)
            : carry;
   }
   function sub_nat(nat1, ofs1, len1, nat2, ofs2, len2, carry_in){
    var borrow = carry_in === 1 ? 0 : 1;
    for(var i = 0; i < len2; i++){
     var
      x = (nat1.data[ofs1 + i] >>> 0) - (nat2.data[ofs2 + i] >>> 0) - borrow;
     nat1.data[ofs1 + i] = x;
     if(x >= 0) borrow = 0; else borrow = 1;
    }
    return decr_nat(nat1, ofs1 + len2, len1 - len2, borrow === 1 ? 0 : 1);
   }
   function div_nat(nat1, ofs1, len1, nat2, ofs2, len2){
    if(len2 === 1){
     div_digit_nat(nat1, ofs1 + 1, nat1, ofs1, nat1, ofs1, len1, nat2, ofs2);
     return 0;
    }
    var s = num_leading_zero_bits_in_digit(nat2, ofs2 + len2 - 1);
    shift_left_nat(nat2, ofs2, len2, nat_of_array([0]), 0, s);
    shift_left_nat(nat1, ofs1, len1, nat_of_array([0]), 0, s);
    var d = (nat2.data[ofs2 + len2 - 1] >>> 0) + 1, a = create_nat(len2 + 1);
    for(var i = len1 - 1; i >= len2; i--){
     var
      quo =
        d === 4294967296
         ? nat1.data[ofs1 + i] >>> 0
         : div_helper
            (nat1.data[ofs1 + i] >>> 0, nat1.data[ofs1 + i - 1] >>> 0, d)
           [0];
     set_to_zero_nat(a, 0, len2 + 1);
     mult_digit_nat(a, 0, len2 + 1, nat2, ofs2, len2, nat_of_array([quo]), 0);
     sub_nat(nat1, ofs1 + i - len2, len2 + 1, a, 0, len2 + 1, 1);
     while
     (nat1.data[ofs1 + i] !== 0
      || compare_nat(nat1, ofs1 + i - len2, len2, nat2, ofs2, len2) >= 0){
      quo = quo + 1;
      sub_nat(nat1, ofs1 + i - len2, len2 + 1, nat2, ofs2, len2, 1);
     }
     nat1.data[ofs1 + i] = quo;
    }
    shift_right_nat(nat1, ofs1, len2, nat_of_array([0]), 0, s);
    shift_right_nat(nat2, ofs2, len2, nat_of_array([0]), 0, s);
    return 0;
   }
   function serialize_nat(writer, nat, sz){
    var len = nat.data.length;
    writer.write(32, len);
    for(var i = 0; i < len; i++) writer.write(32, nat.data[i]);
    sz[0] = len * 4;
    sz[1] = len * 8;
   }
   function initialize_nat(){
    caml_custom_ops._nat =
     {deserialize: deserialize_nat,
      serialize: serialize_nat,
      hash: caml_hash_nat};
   }
   function is_digit_int(nat, ofs){if(nat.data[ofs] >= 0) return 1; return 0;}
   function is_digit_normalized(_nat, _ofs){return 1;}
   function is_digit_odd(nat, ofs){if(nat.data[ofs] & 1) return 1; return 0;}
   function is_digit_zero(nat, ofs){
    if(nat.data[ofs] === 0) return 1;
    return 0;
   }
   function jsoo_create_file_extern(name, content){
    if(globalThis.jsoo_create_file)
     globalThis.jsoo_create_file(name, content);
    else{
     if(! globalThis.jsoo_fs_tmp) globalThis.jsoo_fs_tmp = [];
     globalThis.jsoo_fs_tmp.push({name: name, content: content});
    }
    return 0;
   }
   function jsoo_effect_not_supported(){
    caml_failwith("Effect handlers are not supported");
   }
   function land_digit_nat(nat1, ofs1, nat2, ofs2){nat1.data[ofs1] &= nat2.data[ofs2]; return 0;
   }
   function length_nat(x){return x.data.length;}
   function lor_digit_nat(nat1, ofs1, nat2, ofs2){nat1.data[ofs1] |= nat2.data[ofs2]; return 0;
   }
   function lxor_digit_nat(nat1, ofs1, nat2, ofs2){nat1.data[ofs1] ^= nat2.data[ofs2]; return 0;
   }
   function mult_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat3, ofs3, len3){
    var carry = 0;
    for(var i = 0; i < len3; i++)
     carry +=
      mult_digit_nat
       (nat1, ofs1 + i, len1 - i, nat2, ofs2, len2, nat3, ofs3 + i);
    return carry;
   }
   function nth_digit_nat(nat, ofs){return nat.data[ofs];}
   function nth_digit_nat_native(nat, ofs){return nat.data[ofs];}
   var
    re_match =
      function(){
        var
         re_word_letters =
           [0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xff,
            0x03,
            0xfe,
            0xff,
            0xff,
            0x87,
            0xfe,
            0xff,
            0xff,
            0x07,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0x00,
            0xff,
            0xff,
            0x7f,
            0xff,
            0xff,
            0xff,
            0x7f,
            0xff],
         opcodes =
           {CHAR: 0,
            CHARNORM: 1,
            STRING: 2,
            STRINGNORM: 3,
            CHARCLASS: 4,
            BOL: 5,
            EOL: 6,
            WORDBOUNDARY: 7,
            BEGGROUP: 8,
            ENDGROUP: 9,
            REFGROUP: 10,
            ACCEPT: 11,
            SIMPLEOPT: 12,
            SIMPLESTAR: 13,
            SIMPLEPLUS: 14,
            GOTO: 15,
            PUSHBACK: 16,
            SETMARK: 17,
            CHECKPROGRESS: 18};
        function is_word_letter(c){
         return re_word_letters[c >> 3] >> (c & 7) & 1;
        }
        function in_bitset(s, i){
         return caml_string_get(s, i >> 3) >> (i & 7) & 1;
        }
        function re_match_impl(re, s, pos, partial){
         var
          prog = caml_js_from_array(re[1]),
          cpool = caml_js_from_array(re[2]),
          normtable = caml_jsbytes_of_string(re[3]),
          numgroups = re[4] | 0,
          numregisters = re[5] | 0,
          s = caml_uint8_array_of_string(s),
          pc = 0,
          quit = false,
          stack = [],
          groups = new Array(numgroups),
          re_register = new Array(numregisters);
         for(var i = 0; i < groups.length; i++)
          groups[i] = {start: - 1, end: - 1};
         groups[0].start = pos;
         function backtrack(){
          while(stack.length){
           var item = stack.pop();
           if(item.undo)
            item.undo.obj[item.undo.prop] = item.undo.value;
           else if(item.pos){pc = item.pos.pc; pos = item.pos.txt; return;}
          }
          quit = true;
         }
         function push(item){stack.push(item);}
         function accept(){
          groups[0].end = pos;
          var result = new Array(1 + groups.length * 2);
          result[0] = 0;
          for(var i = 0; i < groups.length; i++){
           var g = groups[i];
           if(g.start < 0 || g.end < 0) g.start = g.end = - 1;
           result[2 * i + 1] = g.start;
           result[2 * i + 1 + 1] = g.end;
          }
          return result;
         }
         function prefix_match(){
          if(partial) return accept(); else backtrack();
         }
         while(! quit){
          var
           op = prog[pc] & 0xff,
           sarg = prog[pc] >> 8,
           uarg = sarg & 0xff,
           c = s[pos],
           group;
          pc++;
          switch(op){
            case opcodes.CHAR:
             if(pos === s.length){prefix_match(); break;}
             if(c === uarg) pos++; else backtrack();
             break;
            case opcodes.CHARNORM:
             if(pos === s.length){prefix_match(); break;}
             if(normtable.charCodeAt(c) === uarg) pos++; else backtrack();
             break;
            case opcodes.STRING:
             for
             (var arg = caml_jsbytes_of_string(cpool[uarg]), i = 0;
              i < arg.length;
              i++){
              if(pos === s.length){prefix_match(); break;}
              if(c === arg.charCodeAt(i))
               c = s[++pos];
              else{backtrack(); break;}
             }
             break;
            case opcodes.STRINGNORM:
             for
             (var arg = caml_jsbytes_of_string(cpool[uarg]), i = 0;
              i < arg.length;
              i++){
              if(pos === s.length){prefix_match(); break;}
              if(normtable.charCodeAt(c) === arg.charCodeAt(i))
               c = s[++pos];
              else{backtrack(); break;}
             }
             break;
            case opcodes.CHARCLASS:
             if(pos === s.length){prefix_match(); break;}
             if(in_bitset(cpool[uarg], c)) pos++; else backtrack();
             break;
            case opcodes.BOL:
             if(pos > 0 && s[pos - 1] !== 10) backtrack(); break;
            case opcodes.EOL:
             if(pos < s.length && s[pos] !== 10) backtrack(); break;
            case opcodes.WORDBOUNDARY:
             if(pos === 0){
              if(pos === s.length){prefix_match(); break;}
              if(is_word_letter(s[0])) break;
              backtrack();
             }
             else if(pos === s.length){
              if(is_word_letter(s[pos - 1])) break;
              backtrack();
             }
             else{
              if(is_word_letter(s[pos - 1]) !== is_word_letter(s[pos])) break;
              backtrack();
             }
             break;
            case opcodes.BEGGROUP:
             group = groups[uarg];
             push({undo: {obj: group, prop: "start", value: group.start}});
             group.start = pos;
             break;
            case opcodes.ENDGROUP:
             group = groups[uarg];
             push({undo: {obj: group, prop: "end", value: group.end}});
             group.end = pos;
             break;
            case opcodes.REFGROUP:
             group = groups[uarg];
             if(group.start < 0 || group.end < 0){backtrack(); break;}
             for(var i = group.start; i < group.end; i++){
              if(pos === s.length){prefix_match(); break;}
              if(s[i] !== s[pos]){backtrack(); break;}
              pos++;
             }
             break;
            case opcodes.SIMPLEOPT:
             if(in_bitset(cpool[uarg], c)) pos++; break;
            case opcodes.SIMPLESTAR:
             while(in_bitset(cpool[uarg], c)) c = s[++pos]; break;
            case opcodes.SIMPLEPLUS:
             if(pos === s.length){prefix_match(); break;}
             if(in_bitset(cpool[uarg], c))
              do c = s[++pos];while(in_bitset(cpool[uarg], c));
             else
              backtrack();
             break;
            case opcodes.ACCEPT: return accept();
            case opcodes.GOTO:
             pc = pc + sarg; break;
            case opcodes.PUSHBACK:
             push({pos: {pc: pc + sarg, txt: pos}}); break;
            case opcodes.SETMARK:
             push
              ({undo: {obj: re_register, prop: uarg, value: re_register[uarg]}});
             re_register[uarg] = pos;
             break;
            case opcodes.CHECKPROGRESS:
             if(re_register[uarg] === pos) backtrack(); break;
            default: throw new Error("Invalid bytecode");
          }
         }
         return 0;
        }
        return re_match_impl;
       }
       ();
   function re_partial_match(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.partial_match");
    var res = re_match(re, s, pos, 1);
    return res ? res : [0];
   }
   function re_replacement_text(repl, groups, orig){
    var
     repl = caml_jsbytes_of_string(repl),
     len = repl.length,
     orig = caml_jsbytes_of_string(orig),
     res = "",
     n = 0,
     cur,
     start,
     end,
     c;
    while(n < len){
     cur = repl.charAt(n++);
     if(cur !== "\\")
      res += cur;
     else{
      if(n === len) caml_failwith("Str.replace: illegal backslash sequence");
      cur = repl.charAt(n++);
      switch(cur){
        case "\\":
         res += cur; break;
        case "0":
        case "1":
        case "2":
        case "3":
        case "4":
        case "5":
        case "6":
        case "7":
        case "8":
        case "9":
         c = + cur;
         if(c * 2 >= groups.length - 1)
          caml_failwith("Str.replace: reference to unmatched group");
         start = caml_array_get(groups, c * 2);
         end = caml_array_get(groups, c * 2 + 1);
         if(start === - 1)
          caml_failwith("Str.replace: reference to unmatched group");
         res += orig.slice(start, end);
         break;
        default: res += "\\" + cur;
      }
     }
    }
    return caml_string_of_jsbytes(res);
   }
   function re_search_backward(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.search_backward");
    var startchars = re[6] | 0;
    if(startchars >= 0){
     startchars = re[2][startchars + 1];
     var len = caml_ml_string_length(s);
     do{
      while
      (pos > 0 && pos < len
       && caml_string_get(startchars, caml_string_get(s, pos)) === 0)
       pos--;
      var res = re_match(re, s, pos, 0);
      if(res) return res;
      pos--;
     }
     while
      (pos >= 0);
    }
    else
     do{var res = re_match(re, s, pos, 0); if(res) return res; pos--;}
     while
      (pos >= 0);
    return [0];
   }
   function re_search_forward(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.search_forward");
    var startchars = re[6] | 0, len = caml_ml_string_length(s);
    if(startchars >= 0){
     startchars = re[2][startchars + 1];
     do{
      while
      (pos < len && caml_string_get(startchars, caml_string_get(s, pos)) === 0)
       pos++;
      var res = re_match(re, s, pos, 0);
      if(res) return res;
      pos++;
     }
     while
      (pos <= len);
    }
    else
     do{var res = re_match(re, s, pos, 0); if(res) return res; pos++;}
     while
      (pos <= len);
    return [0];
   }
   function re_string_match(re, s, pos){
    if(pos < 0 || pos > caml_ml_string_length(s))
     caml_invalid_argument("Str.string_match");
    var res = re_match(re, s, pos, 0);
    return res ? res : [0];
   }
   function set_digit_nat(nat, ofs, digit){nat.data[ofs] = digit; return 0;}
   function set_digit_nat_native(nat, ofs, digit){nat.data[ofs] = digit; return 0;
   }
   function square_nat(nat1, ofs1, len1, nat2, ofs2, len2){
    var carry = 0;
    carry += add_nat(nat1, ofs1, len1, nat1, ofs1, len1, 0);
    carry += mult_nat(nat1, ofs1, len1, nat2, ofs2, len2, nat2, ofs2, len2);
    return carry;
   }
   function unix_error_message(err){
    const errno = typeof err === "number" ? err : - err[1];
    return caml_string_of_jsstring(caml_strerror(errno));
   }
   function caml_setup_uncaught_exception_handler(){
    var process = globalThis.process;
    if(process?.on)
     process.on
      ("uncaughtException",
       function(err, origin){
        caml_fatal_uncaught_exception(err);
        process.exit(2);
       });
    else if(globalThis.addEventListener)
     globalThis.addEventListener
      ("error",
       function(event){
        if(event.error) caml_fatal_uncaught_exception(event.error);
       });
   }
   caml_setup_uncaught_exception_handler();
   globalThis.jsoo_runtime =
    {caml_blake2_bytes: caml_blake2_bytes,
     caml_blake2_string: caml_blake2_string,
     caml_blake2_update: caml_blake2_update,
     caml_blake2_final: caml_blake2_final,
     caml_blake2_create: caml_blake2_create,
     blake2b: blake2b,
     caml_ml_runtime_events_path: caml_ml_runtime_events_path,
     caml_runtime_events_read_poll: caml_runtime_events_read_poll,
     caml_runtime_events_free_cursor: caml_runtime_events_free_cursor,
     caml_runtime_events_create_cursor: caml_runtime_events_create_cursor,
     caml_ml_runtime_events_resume: caml_ml_runtime_events_resume,
     caml_ml_runtime_events_are_active: caml_ml_runtime_events_are_active,
     caml_ml_runtime_events_pause: caml_ml_runtime_events_pause,
     caml_ml_runtime_events_start: caml_ml_runtime_events_start,
     caml_runtime_events_user_resolve: caml_runtime_events_user_resolve,
     caml_runtime_events_user_write: caml_runtime_events_user_write,
     caml_runtime_events_user_register: caml_runtime_events_user_register,
     caml_custom_event_index: caml_custom_event_index,
     caml_zstd_initialize: caml_zstd_initialize,
     caml_decompress_input: caml_decompress_input,
     zstd_decompress: zstd_decompress,
     jsoo_effect_not_supported: jsoo_effect_not_supported,
     caml_ml_condition_signal: caml_ml_condition_signal,
     caml_ml_condition_broadcast: caml_ml_condition_broadcast,
     caml_ml_condition_wait: caml_ml_condition_wait,
     caml_ml_condition_new: caml_ml_condition_new,
     caml_get_continuation_callstack: caml_get_continuation_callstack,
     caml_continuation_use_and_update_handler_noexc:
     caml_continuation_use_and_update_handler_noexc,
     caml_continuation_use_noexc: caml_continuation_use_noexc,
     caml_alloc_stack: caml_alloc_stack,
     caml_ml_mutex_unlock: caml_ml_mutex_unlock,
     caml_ml_mutex_try_lock: caml_ml_mutex_try_lock,
     caml_ml_mutex_lock: caml_ml_mutex_lock,
     caml_ml_mutex_new: caml_ml_mutex_new,
     MlMutex: MlMutex,
     caml_lxm_next: caml_lxm_next,
     caml_lxm_daba: caml_lxm_daba,
     caml_lxm_M: caml_lxm_M,
     caml_ml_domain_cpu_relax: caml_ml_domain_cpu_relax,
     caml_ml_domain_id: caml_ml_domain_id,
     caml_domain_spawn: caml_domain_spawn,
     caml_domain_id: caml_domain_id,
     caml_ml_domain_index: caml_ml_domain_index,
     caml_recommended_domain_count: caml_recommended_domain_count,
     caml_atomic_make_contended: caml_atomic_make_contended,
     caml_atomic_exchange: caml_atomic_exchange,
     caml_atomic_fetch_add: caml_atomic_fetch_add,
     caml_atomic_cas: caml_atomic_cas,
     caml_atomic_load: caml_atomic_load,
     caml_domain_dls_get: caml_domain_dls_get,
     caml_domain_dls_compare_and_set: caml_domain_dls_compare_and_set,
     caml_domain_dls_set: caml_domain_dls_set,
     caml_domain_dls: caml_domain_dls,
     caml_ephe_check_data: caml_ephe_check_data,
     caml_ephe_unset_data: caml_ephe_unset_data,
     caml_ephe_set_data_opt: caml_ephe_set_data_opt,
     caml_ephe_set_data: caml_ephe_set_data,
     caml_ephe_get_data_copy: caml_ephe_get_data_copy,
     caml_ephe_get_data: caml_ephe_get_data,
     caml_ephe_blit_data: caml_ephe_blit_data,
     caml_ephe_blit_key: caml_ephe_blit_key,
     caml_ephe_check_key: caml_ephe_check_key,
     caml_ephe_get_key_copy: caml_ephe_get_key_copy,
     caml_ephe_get_key: caml_ephe_get_key,
     caml_weak_set: caml_weak_set,
     caml_weak_create: caml_weak_create,
     caml_ephe_create: caml_ephe_create,
     caml_ephe_unset_key: caml_ephe_unset_key,
     caml_ephe_set_key: caml_ephe_set_key,
     caml_ephe_none: caml_ephe_none,
     caml_ephe_data_offset: caml_ephe_data_offset,
     caml_ephe_key_offset: caml_ephe_key_offset,
     caml_raise_system_error: caml_raise_system_error,
     caml_unix_inet_addr_of_string: caml_unix_inet_addr_of_string,
     caml_unix_findclose: caml_unix_findclose,
     caml_unix_findnext: caml_unix_findnext,
     caml_unix_findfirst: caml_unix_findfirst,
     caml_unix_rewinddir: caml_unix_rewinddir,
     caml_unix_closedir: caml_unix_closedir,
     caml_unix_readdir: caml_unix_readdir,
     caml_unix_opendir: caml_unix_opendir,
     caml_unix_has_symlink: caml_unix_has_symlink,
     caml_unix_getpwnam: caml_unix_getpwnam,
     caml_unix_getegid: caml_unix_getegid,
     caml_unix_getgid: caml_unix_getgid,
     caml_unix_geteuid: caml_unix_geteuid,
     caml_unix_getuid: caml_unix_getuid,
     caml_unix_outchannel_of_filedescr: caml_unix_outchannel_of_filedescr,
     caml_unix_inchannel_of_filedescr: caml_unix_inchannel_of_filedescr,
     caml_unix_close: caml_unix_close,
     caml_unix_ftruncate_64: caml_unix_ftruncate_64,
     caml_unix_ftruncate: caml_unix_ftruncate,
     caml_unix_lseek_64: caml_unix_lseek_64,
     caml_unix_lseek: caml_unix_lseek,
     caml_unix_read_bigarray: caml_unix_read_bigarray,
     caml_unix_read: caml_unix_read,
     caml_unix_write_bigarray: caml_unix_write_bigarray,
     caml_unix_single_write: caml_unix_single_write,
     caml_unix_write: caml_unix_write,
     caml_unix_fsync: caml_unix_fsync,
     caml_unix_fchmod: caml_unix_fchmod,
     caml_unix_fstat_64: caml_unix_fstat_64,
     caml_unix_fstat: caml_unix_fstat,
     caml_unix_lookup_file: caml_unix_lookup_file,
     caml_unix_open: caml_unix_open,
     caml_unix_access: caml_unix_access,
     caml_unix_truncate_64: caml_unix_truncate_64,
     caml_unix_truncate: caml_unix_truncate,
     caml_unix_utimes: caml_unix_utimes,
     caml_unix_unlink: caml_unix_unlink,
     caml_unix_readlink: caml_unix_readlink,
     caml_unix_symlink: caml_unix_symlink,
     caml_unix_link: caml_unix_link,
     caml_unix_rmdir: caml_unix_rmdir,
     caml_unix_mkdir: caml_unix_mkdir,
     caml_unix_rename: caml_unix_rename,
     caml_unix_chmod: caml_unix_chmod,
     caml_unix_lstat_64: caml_unix_lstat_64,
     caml_unix_lstat: caml_unix_lstat,
     caml_unix_stat_64: caml_unix_stat_64,
     caml_unix_stat: caml_unix_stat,
     caml_unix_chdir: caml_unix_chdir,
     unix_error_message: unix_error_message,
     caml_strerror: caml_strerror,
     make_unix_err_args: make_unix_err_args,
     unix_error: unix_error,
     caml_unix_isatty: caml_unix_isatty,
     caml_unix_filedescr_of_fd: caml_unix_filedescr_of_fd,
     caml_unix_cleanup: caml_unix_cleanup,
     caml_unix_startup: caml_unix_startup,
     caml_unix_mktime: caml_unix_mktime,
     caml_unix_localtime: caml_unix_localtime,
     caml_unix_gmtime: caml_unix_gmtime,
     caml_unix_times: caml_unix_times,
     caml_unix_time: caml_unix_time,
     caml_unix_gettimeofday: caml_unix_gettimeofday,
     re_replacement_text: re_replacement_text,
     re_partial_match: re_partial_match,
     re_string_match: re_string_match,
     re_search_backward: re_search_backward,
     re_search_forward: re_search_forward,
     re_match: re_match,
     caml_io_buffer_size: caml_io_buffer_size,
     caml_sys_is_regular_file: caml_sys_is_regular_file,
     caml_xdg_defaults: caml_xdg_defaults,
     caml_sys_const_naked_pointers_checked:
     caml_sys_const_naked_pointers_checked,
     caml_ml_runtime_warnings_enabled: caml_ml_runtime_warnings_enabled,
     caml_ml_enable_runtime_warnings: caml_ml_enable_runtime_warnings,
     caml_runtime_warnings: caml_runtime_warnings,
     caml_install_signal_handler: caml_install_signal_handler,
     caml_runtime_parameters: caml_runtime_parameters,
     caml_runtime_variant: caml_runtime_variant,
     caml_sys_isatty: caml_sys_isatty,
     caml_sys_get_config: caml_sys_get_config,
     os_type: os_type,
     caml_sys_const_backend_type: caml_sys_const_backend_type,
     caml_sys_const_ostype_cygwin: caml_sys_const_ostype_cygwin,
     caml_sys_const_ostype_win32: caml_sys_const_ostype_win32,
     caml_sys_const_ostype_unix: caml_sys_const_ostype_unix,
     caml_sys_const_max_wosize: caml_sys_const_max_wosize,
     caml_sys_const_int_size: caml_sys_const_int_size,
     caml_sys_const_word_size: caml_sys_const_word_size,
     caml_sys_const_big_endian: caml_sys_const_big_endian,
     caml_sys_random_seed: caml_sys_random_seed,
     caml_sys_time_include_children: caml_sys_time_include_children,
     caml_sys_time: caml_sys_time,
     caml_sys_system_command: caml_sys_system_command,
     caml_sys_executable_name: caml_sys_executable_name,
     caml_sys_modify_argv: caml_sys_modify_argv,
     caml_sys_argv: caml_sys_argv,
     caml_sys_get_argv: caml_sys_get_argv,
     caml_executable_name: caml_executable_name,
     caml_argv: caml_argv,
     caml_sys_unsafe_getenv: caml_sys_unsafe_getenv,
     caml_sys_getenv: caml_sys_getenv,
     jsoo_sys_getenv: jsoo_sys_getenv,
     caml_set_static_env: caml_set_static_env,
     jsoo_static_env: jsoo_static_env,
     caml_fatal_uncaught_exception: caml_fatal_uncaught_exception,
     caml_format_exception: caml_format_exception,
     caml_is_special_exception: caml_is_special_exception,
     caml_sys_exit: caml_sys_exit,
     caml_raise_sys_error: caml_raise_sys_error,
     caml_maybe_print_stats: caml_maybe_print_stats,
     caml_is_printable: caml_is_printable,
     caml_get_global_data: caml_get_global_data,
     caml_register_global: caml_register_global,
     jsoo_toplevel_reloc: jsoo_toplevel_reloc,
     caml_build_symbols: caml_build_symbols,
     caml_global_data: caml_global_data,
     caml_named_value: caml_named_value,
     caml_register_named_value: caml_register_named_value,
     caml_named_values: caml_named_values,
     caml_call_gen: caml_call_gen,
     caml_set_parser_trace: caml_set_parser_trace,
     caml_parse_engine: caml_parse_engine,
     caml_parser_trace: caml_parser_trace,
     caml_custom_identifier: caml_custom_identifier,
     caml_is_continuation_tag: caml_is_continuation_tag,
     caml_lazy_read_result: caml_lazy_read_result,
     caml_lazy_reset_to_lazy: caml_lazy_reset_to_lazy,
     caml_lazy_update_to_forward: caml_lazy_update_to_forward,
     caml_lazy_update_to_forcing: caml_lazy_update_to_forcing,
     caml_obj_update_tag: caml_obj_update_tag,
     caml_obj_add_offset: caml_obj_add_offset,
     caml_obj_reachable_words: caml_obj_reachable_words,
     caml_obj_set_raw_field: caml_obj_set_raw_field,
     caml_obj_raw_field: caml_obj_raw_field,
     caml_fresh_oo_id: caml_fresh_oo_id,
     caml_set_oo_id: caml_set_oo_id,
     caml_oo_last_id: caml_oo_last_id,
     caml_get_public_method: caml_get_public_method,
     caml_get_cached_method: caml_get_cached_method,
     caml_oo_cache_id: caml_oo_cache_id,
     caml_method_cache: caml_method_cache,
     caml_lazy_make_forward: caml_lazy_make_forward,
     caml_obj_is_shared: caml_obj_is_shared,
     caml_obj_compare_and_swap: caml_obj_compare_and_swap,
     caml_obj_dup: caml_obj_dup,
     caml_obj_with_tag: caml_obj_with_tag,
     caml_obj_block: caml_obj_block,
     caml_obj_tag: caml_obj_tag,
     caml_alloc_dummy_infix: caml_alloc_dummy_infix,
     caml_update_dummy: caml_update_dummy,
     deserialize_nat: deserialize_nat,
     serialize_nat: serialize_nat,
     lxor_digit_nat: lxor_digit_nat,
     lor_digit_nat: lor_digit_nat,
     land_digit_nat: land_digit_nat,
     compare_nat: compare_nat,
     compare_digits_nat: compare_digits_nat,
     shift_right_nat: shift_right_nat,
     div_nat: div_nat,
     div_digit_nat: div_digit_nat,
     div_helper: div_helper,
     shift_left_nat: shift_left_nat,
     square_nat: square_nat,
     mult_nat: mult_nat,
     mult_digit_nat: mult_digit_nat,
     sub_nat: sub_nat,
     decr_nat: decr_nat,
     complement_nat: complement_nat,
     add_nat: add_nat,
     incr_nat: incr_nat,
     is_digit_odd: is_digit_odd,
     is_digit_normalized: is_digit_normalized,
     is_digit_zero: is_digit_zero,
     is_digit_int: is_digit_int,
     num_leading_zero_bits_in_digit: num_leading_zero_bits_in_digit,
     num_digits_nat: num_digits_nat,
     nth_digit_nat_native: nth_digit_nat_native,
     set_digit_nat_native: set_digit_nat_native,
     nth_digit_nat: nth_digit_nat,
     set_digit_nat: set_digit_nat,
     blit_nat: blit_nat,
     set_to_zero_nat: set_to_zero_nat,
     create_nat: create_nat,
     nat_of_array: nat_of_array,
     length_nat: length_nat,
     caml_hash_nat: caml_hash_nat,
     MlNat: MlNat,
     initialize_nat: initialize_nat,
     caml_new_string: caml_new_string,
     caml_array_of_bytes: caml_array_of_bytes,
     caml_array_of_string: caml_array_of_string,
     caml_js_to_string: caml_js_to_string,
     caml_to_js_string: caml_to_js_string,
     caml_js_from_string: caml_js_from_string,
     caml_js_to_byte_string: caml_js_to_byte_string,
     caml_is_ml_string: caml_is_ml_string,
     caml_ml_bytes_content: caml_ml_bytes_content,
     caml_is_ml_bytes: caml_is_ml_bytes,
     caml_bytes_of_jsbytes: caml_bytes_of_jsbytes,
     caml_string_of_jsstring: caml_string_of_jsstring,
     caml_jsstring_of_string: caml_jsstring_of_string,
     jsoo_text_decoder_buff: jsoo_text_decoder_buff,
     caml_jsbytes_of_string: caml_jsbytes_of_string,
     caml_string_of_jsbytes: caml_string_of_jsbytes,
     caml_bytes_of_string: caml_bytes_of_string,
     caml_string_of_bytes: caml_string_of_bytes,
     caml_string_lessthan: caml_string_lessthan,
     caml_string_lessequal: caml_string_lessequal,
     caml_string_equal: caml_string_equal,
     caml_string_compare: caml_string_compare,
     caml_ml_string_length: caml_ml_string_length,
     caml_string_unsafe_get: caml_string_unsafe_get,
     caml_string_concat: caml_string_concat,
     caml_ml_bytes_length: caml_ml_bytes_length,
     caml_blit_string: caml_blit_string,
     caml_blit_bytes: caml_blit_bytes,
     caml_fill_bytes: caml_fill_bytes,
     caml_bytes_greaterthan: caml_bytes_greaterthan,
     caml_string_greaterthan: caml_string_greaterthan,
     caml_bytes_greaterequal: caml_bytes_greaterequal,
     caml_string_greaterequal: caml_string_greaterequal,
     caml_bytes_lessthan: caml_bytes_lessthan,
     caml_bytes_lessequal: caml_bytes_lessequal,
     caml_bytes_notequal: caml_bytes_notequal,
     caml_string_notequal: caml_string_notequal,
     caml_bytes_equal: caml_bytes_equal,
     caml_bytes_compare: caml_bytes_compare,
     caml_bytes_of_uint8_array: caml_bytes_of_uint8_array,
     caml_bytes_of_array: caml_bytes_of_array,
     caml_string_of_uint8_array: caml_string_of_uint8_array,
     caml_string_of_array: caml_string_of_array,
     caml_create_bytes: caml_create_bytes,
     caml_create_string: caml_create_string,
     caml_uint8_array_of_string: caml_uint8_array_of_string,
     caml_uint8_array_of_bytes: caml_uint8_array_of_bytes,
     caml_convert_bytes_to_array: caml_convert_bytes_to_array,
     caml_convert_string_to_bytes: caml_convert_string_to_bytes,
     MlBytes: MlBytes,
     caml_bytes_of_utf16_jsstring: caml_bytes_of_utf16_jsstring,
     jsoo_text_decoder: jsoo_text_decoder,
     jsoo_text_encoder: jsoo_text_encoder,
     caml_bytes_set: caml_bytes_set,
     caml_bytes_set64: caml_bytes_set64,
     caml_bytes_set32: caml_bytes_set32,
     caml_bytes_set16: caml_bytes_set16,
     caml_string_set: caml_string_set,
     caml_bytes_get: caml_bytes_get,
     caml_bytes_get64: caml_bytes_get64,
     caml_string_get64: caml_string_get64,
     caml_bytes_get32: caml_bytes_get32,
     caml_string_get32: caml_string_get32,
     caml_bytes_get16: caml_bytes_get16,
     caml_string_get16: caml_string_get16,
     caml_string_get: caml_string_get,
     caml_bytes_bound_error: caml_bytes_bound_error,
     caml_string_bound_error: caml_string_bound_error,
     caml_bytes_unsafe_set: caml_bytes_unsafe_set,
     caml_bytes_unsafe_get: caml_bytes_unsafe_get,
     jsoo_is_ascii: jsoo_is_ascii,
     caml_sub_uint8_array_to_jsbytes: caml_sub_uint8_array_to_jsbytes,
     caml_subarray_to_jsbytes: caml_subarray_to_jsbytes,
     caml_str_repeat: caml_str_repeat,
     caml_md5_bytes: caml_md5_bytes,
     caml_MD5Final: caml_MD5Final,
     caml_MD5Update: caml_MD5Update,
     caml_MD5Init: caml_MD5Init,
     caml_MD5Transform: caml_MD5Transform,
     caml_md5_string: caml_md5_string,
     caml_md5_chan: caml_md5_chan,
     caml_output_value_to_buffer: caml_output_value_to_buffer,
     caml_output_value_to_bytes: caml_output_value_to_bytes,
     caml_output_value_to_string: caml_output_value_to_string,
     caml_output_val: caml_output_val,
     MlObjectTable: MlObjectTable,
     caml_marshal_data_size: caml_marshal_data_size,
     caml_marshal_header_size: caml_marshal_header_size,
     caml_input_value_from_reader: caml_input_value_from_reader,
     caml_custom_ops: caml_custom_ops,
     caml_nativeint_unmarshal: caml_nativeint_unmarshal,
     caml_int32_unmarshal: caml_int32_unmarshal,
     caml_int64_marshal: caml_int64_marshal,
     caml_int64_unmarshal: caml_int64_unmarshal,
     caml_input_value_from_bytes: caml_input_value_from_bytes,
     caml_float_of_bytes: caml_float_of_bytes,
     JsStringReader: JsStringReader,
     UInt8ArrayReader: UInt8ArrayReader,
     caml_marshal_constants: caml_marshal_constants,
     caml_new_lex_engine: caml_new_lex_engine,
     caml_lex_engine: caml_lex_engine,
     caml_lex_array: caml_lex_array,
     caml_js_error_of_exception: caml_js_error_of_exception,
     caml_xmlhttprequest_create: caml_xmlhttprequest_create,
     caml_js_get_console: caml_js_get_console,
     caml_js_html_entities: caml_js_html_entities,
     caml_js_html_escape: caml_js_html_escape,
     caml_js_object: caml_js_object,
     caml_pure_js_expr: caml_pure_js_expr,
     caml_js_expr: caml_js_expr,
     caml_js_eval_string: caml_js_eval_string,
     caml_js_strict_equals: caml_js_strict_equals,
     caml_js_equals: caml_js_equals,
     caml_js_function_arity: caml_js_function_arity,
     caml_js_wrap_meth_callback_unsafe: caml_js_wrap_meth_callback_unsafe,
     caml_js_wrap_meth_callback_strict: caml_js_wrap_meth_callback_strict,
     caml_js_wrap_meth_callback_arguments:
     caml_js_wrap_meth_callback_arguments,
     caml_js_wrap_meth_callback: caml_js_wrap_meth_callback,
     caml_js_wrap_callback_unsafe: caml_js_wrap_callback_unsafe,
     caml_js_wrap_callback_strict: caml_js_wrap_callback_strict,
     caml_js_wrap_callback_arguments: caml_js_wrap_callback_arguments,
     caml_js_wrap_callback: caml_js_wrap_callback,
     caml_ojs_new_arr: caml_ojs_new_arr,
     caml_js_new: caml_js_new,
     caml_js_meth_call: caml_js_meth_call,
     caml_js_fun_call: caml_js_fun_call,
     caml_js_call: caml_js_call,
     caml_js_var: caml_js_var,
     caml_list_to_js_array: caml_list_to_js_array,
     caml_list_of_js_array: caml_list_of_js_array,
     caml_js_to_array: caml_js_to_array,
     caml_js_from_array: caml_js_from_array,
     caml_js_to_int32: caml_js_to_int32,
     caml_js_to_float: caml_js_to_float,
     caml_js_from_float: caml_js_from_float,
     caml_js_to_bool: caml_js_to_bool,
     caml_js_from_bool: caml_js_from_bool,
     caml_throw_js_exception: caml_throw_js_exception,
     caml_js_error_option_of_exception: caml_js_error_option_of_exception,
     caml_exn_with_js_backtrace: caml_exn_with_js_backtrace,
     caml_maybe_attach_backtrace: caml_maybe_attach_backtrace,
     caml_wrap_exception: caml_wrap_exception,
     caml_jsoo_flags_effects: caml_jsoo_flags_effects,
     caml_jsoo_flags_use_js_string: caml_jsoo_flags_use_js_string,
     caml_is_js: caml_is_js,
     caml_callback: caml_callback,
     caml_trampoline_return: caml_trampoline_return,
     caml_trampoline: caml_trampoline,
     caml_js_typeof: caml_js_typeof,
     caml_js_instanceof: caml_js_instanceof,
     caml_js_delete: caml_js_delete,
     caml_js_get: caml_js_get,
     caml_js_set: caml_js_set,
     caml_js_pure_expr: caml_js_pure_expr,
     caml_ml_set_buffered: caml_ml_set_buffered,
     caml_ml_is_buffered: caml_ml_is_buffered,
     caml_ml_output_int: caml_ml_output_int,
     caml_ml_pos_out_64: caml_ml_pos_out_64,
     caml_ml_pos_out: caml_ml_pos_out,
     caml_pos_out: caml_pos_out,
     caml_ml_seek_out_64: caml_ml_seek_out_64,
     caml_ml_seek_out: caml_ml_seek_out,
     caml_seek_out: caml_seek_out,
     caml_output_value: caml_output_value,
     caml_ml_output_char: caml_ml_output_char,
     caml_ml_output: caml_ml_output,
     caml_ml_output_bigarray: caml_ml_output_bigarray,
     caml_ml_output_bytes: caml_ml_output_bytes,
     caml_ml_output_ta: caml_ml_output_ta,
     caml_ml_flush: caml_ml_flush,
     caml_ml_input_scan_line: caml_ml_input_scan_line,
     caml_ml_pos_in_64: caml_ml_pos_in_64,
     caml_ml_pos_in: caml_ml_pos_in,
     caml_pos_in: caml_pos_in,
     caml_ml_seek_in_64: caml_ml_seek_in_64,
     caml_ml_seek_in: caml_ml_seek_in,
     caml_seek_in: caml_seek_in,
     caml_ml_input_int: caml_ml_input_int,
     caml_ml_input_char: caml_ml_input_char,
     caml_input_value_to_outside_heap: caml_input_value_to_outside_heap,
     caml_input_value: caml_input_value,
     caml_ml_input_block: caml_ml_input_block,
     caml_ml_input_bigarray: caml_ml_input_bigarray,
     caml_ml_input: caml_ml_input,
     caml_refill: caml_refill,
     caml_ml_set_channel_refill: caml_ml_set_channel_refill,
     caml_ml_set_channel_output: caml_ml_set_channel_output,
     caml_ml_channel_size_64: caml_ml_channel_size_64,
     caml_ml_channel_size: caml_ml_channel_size,
     caml_ml_close_channel: caml_ml_close_channel,
     caml_ml_is_binary_mode: caml_ml_is_binary_mode,
     caml_ml_set_binary_mode: caml_ml_set_binary_mode,
     caml_channel_descriptor: caml_channel_descriptor,
     caml_ml_open_descriptor_out_with_flags:
     caml_ml_open_descriptor_out_with_flags,
     caml_ml_open_descriptor_in_with_flags:
     caml_ml_open_descriptor_in_with_flags,
     caml_ml_open_descriptor_in: caml_ml_open_descriptor_in,
     caml_ml_open_descriptor_out: caml_ml_open_descriptor_out,
     caml_ml_out_channels_list: caml_ml_out_channels_list,
     caml_ml_channel_restore: caml_ml_channel_restore,
     caml_ml_channel_redirect: caml_ml_channel_redirect,
     caml_ml_channel_get: caml_ml_channel_get,
     caml_ml_channels: caml_ml_channels,
     caml_ml_set_channel_name: caml_ml_set_channel_name,
     caml_sys_open: caml_sys_open,
     MlChanid: MlChanid,
     caml_sys_close: caml_sys_close,
     caml_sys_fds: caml_sys_fds,
     caml_int64_bswap: caml_int64_bswap,
     caml_int32_bswap: caml_int32_bswap,
     caml_bswap16: caml_bswap16,
     caml_mod: caml_mod,
     caml_div: caml_div,
     caml_mul: caml_mul,
     caml_int_of_string: caml_int_of_string,
     caml_parse_digit: caml_parse_digit,
     caml_parse_sign_and_base: caml_parse_sign_and_base,
     caml_format_int: caml_format_int,
     caml_int64_hash: caml_int64_hash,
     caml_int64_to_bytes: caml_int64_to_bytes,
     caml_int64_of_bytes: caml_int64_of_bytes,
     caml_int64_hi32: caml_int64_hi32,
     caml_int64_lo32: caml_int64_lo32,
     caml_int64_create_lo_hi: caml_int64_create_lo_hi,
     caml_int64_create_lo_mi_hi: caml_int64_create_lo_mi_hi,
     caml_int64_of_string: caml_int64_of_string,
     caml_int64_format: caml_int64_format,
     caml_int64_of_float: caml_int64_of_float,
     caml_int64_to_float: caml_int64_to_float,
     caml_int64_to_int32: caml_int64_to_int32,
     caml_int64_of_int32: caml_int64_of_int32,
     caml_int64_mod: caml_int64_mod,
     caml_int64_div: caml_int64_div,
     caml_int64_shift_right: caml_int64_shift_right,
     caml_int64_shift_right_unsigned: caml_int64_shift_right_unsigned,
     caml_int64_shift_left: caml_int64_shift_left,
     caml_int64_xor: caml_int64_xor,
     caml_int64_or: caml_int64_or,
     caml_int64_and: caml_int64_and,
     caml_int64_is_negative: caml_int64_is_negative,
     caml_int64_is_zero: caml_int64_is_zero,
     caml_int64_mul: caml_int64_mul,
     caml_int64_sub: caml_int64_sub,
     caml_int64_add: caml_int64_add,
     caml_int64_neg: caml_int64_neg,
     caml_int64_compare: caml_int64_compare,
     caml_int64_ult: caml_int64_ult,
     MlInt64: MlInt64,
     caml_int64_offset: caml_int64_offset,
     caml_float_of_string: caml_float_of_string,
     caml_format_float: caml_format_float,
     caml_fma_float: caml_fma_float,
     caml_erfc_float: caml_erfc_float,
     caml_erf_float: caml_erf_float,
     caml_cbrt_float: caml_cbrt_float,
     caml_round_float: caml_round_float,
     caml_atanh_float: caml_atanh_float,
     caml_tanh_float: caml_tanh_float,
     caml_asinh_float: caml_asinh_float,
     caml_sinh_float: caml_sinh_float,
     caml_acosh_float: caml_acosh_float,
     caml_cosh_float: caml_cosh_float,
     caml_log10_float: caml_log10_float,
     caml_hypot_float: caml_hypot_float,
     caml_log2_float: caml_log2_float,
     caml_log1p_float: caml_log1p_float,
     caml_exp2_float: caml_exp2_float,
     caml_expm1_float: caml_expm1_float,
     caml_signbit_float: caml_signbit_float,
     caml_copysign_float: caml_copysign_float,
     caml_float_compare: caml_float_compare,
     caml_frexp_float: caml_frexp_float,
     caml_ldexp_float: caml_ldexp_float,
     caml_modf_float: caml_modf_float,
     caml_classify_float: caml_classify_float,
     caml_int32_float_of_bits: caml_int32_float_of_bits,
     caml_trunc_float: caml_trunc_float,
     caml_nextafter_float: caml_nextafter_float,
     caml_int64_float_of_bits: caml_int64_float_of_bits,
     caml_hexstring_of_float: caml_hexstring_of_float,
     caml_int32_bits_of_float: caml_int32_bits_of_float,
     caml_int64_bits_of_float: caml_int64_bits_of_float,
     jsoo_dataview: jsoo_dataview,
     caml_string_hash: caml_string_hash,
     caml_hash: caml_hash,
     caml_hash_mix_string: caml_hash_mix_string,
     caml_hash_mix_bytes: caml_hash_mix_bytes,
     caml_hash_mix_bytes_arr: caml_hash_mix_bytes_arr,
     caml_hash_mix_jsbytes: caml_hash_mix_jsbytes,
     caml_hash_mix_int64: caml_hash_mix_int64,
     caml_hash_mix_float: caml_hash_mix_float,
     caml_hash_mix_final: caml_hash_mix_final,
     caml_hash_mix_int: caml_hash_mix_int,
     caml_gr_close_subwindow: caml_gr_close_subwindow,
     caml_gr_open_subwindow: caml_gr_open_subwindow,
     caml_gr_window_id: caml_gr_window_id,
     caml_gr_display_mode: caml_gr_display_mode,
     caml_gr_remember_mode: caml_gr_remember_mode,
     caml_gr_synchronize: caml_gr_synchronize,
     caml_gr_wait_event: caml_gr_wait_event,
     caml_gr_sigio_signal: caml_gr_sigio_signal,
     caml_gr_sigio_handler: caml_gr_sigio_handler,
     caml_gr_blit_image: caml_gr_blit_image,
     caml_gr_create_image: caml_gr_create_image,
     caml_gr_draw_image: caml_gr_draw_image,
     caml_gr_dump_image: caml_gr_dump_image,
     caml_gr_make_image: caml_gr_make_image,
     caml_gr_text_size: caml_gr_text_size,
     caml_gr_set_text_size: caml_gr_set_text_size,
     caml_gr_set_font: caml_gr_set_font,
     caml_gr_draw_string: caml_gr_draw_string,
     caml_gr_draw_char: caml_gr_draw_char,
     caml_gr_draw_str: caml_gr_draw_str,
     caml_gr_fill_arc: caml_gr_fill_arc,
     caml_gr_fill_poly: caml_gr_fill_poly,
     caml_gr_fill_rect: caml_gr_fill_rect,
     caml_gr_set_line_width: caml_gr_set_line_width,
     caml_gr_draw_arc: caml_gr_draw_arc,
     caml_gr_arc_aux: caml_gr_arc_aux,
     caml_gr_draw_rect: caml_gr_draw_rect,
     caml_gr_lineto: caml_gr_lineto,
     caml_gr_current_y: caml_gr_current_y,
     caml_gr_current_x: caml_gr_current_x,
     caml_gr_moveto: caml_gr_moveto,
     caml_gr_point_color: caml_gr_point_color,
     caml_gr_plot: caml_gr_plot,
     caml_gr_set_color: caml_gr_set_color,
     caml_gr_size_y: caml_gr_size_y,
     caml_gr_size_x: caml_gr_size_x,
     caml_gr_clear_graph: caml_gr_clear_graph,
     caml_gr_resize_window: caml_gr_resize_window,
     caml_gr_set_window_title: caml_gr_set_window_title,
     caml_gr_close_graph: caml_gr_close_graph,
     caml_gr_doc_of_state: caml_gr_doc_of_state,
     caml_gr_state_create: caml_gr_state_create,
     caml_gr_state_init: caml_gr_state_init,
     caml_gr_open_graph: caml_gr_open_graph,
     caml_gr_state_set: caml_gr_state_set,
     caml_gr_state_get: caml_gr_state_get,
     caml_gr_state: caml_gr_state,
     caml_get_minor_free: caml_get_minor_free,
     caml_gc_minor_words: caml_gc_minor_words,
     caml_gc_major_slice: caml_gc_major_slice,
     caml_memprof_discard: caml_memprof_discard,
     caml_memprof_stop: caml_memprof_stop,
     caml_memprof_start: caml_memprof_start,
     caml_final_release: caml_final_release,
     caml_final_register_called_without_value:
     caml_final_register_called_without_value,
     caml_final_register: caml_final_register,
     caml_gc_get: caml_gc_get,
     caml_gc_set: caml_gc_set,
     caml_gc_stat: caml_gc_stat,
     caml_gc_quick_stat: caml_gc_quick_stat,
     caml_gc_counters: caml_gc_counters,
     caml_gc_compaction: caml_gc_compaction,
     caml_gc_full_major: caml_gc_full_major,
     caml_gc_major: caml_gc_major,
     caml_gc_minor: caml_gc_minor,
     caml_raise_nodejs_error: caml_raise_nodejs_error,
     caml_sys_open_for_node: caml_sys_open_for_node,
     MlNodeFd: MlNodeFd,
     fs_node_stats_from_js: fs_node_stats_from_js,
     MlNodeDevice: MlNodeDevice,
     fs_node_supported: fs_node_supported,
     MlFakeFd: MlFakeFd,
     MlFakeFd_out: MlFakeFd_out,
     MlFakeFile: MlFakeFile,
     MlFakeDevice: MlFakeDevice,
     caml_read_file_content: caml_read_file_content,
     jsoo_create_file: jsoo_create_file,
     caml_create_file: caml_create_file,
     caml_fs_init: caml_fs_init,
     jsoo_create_file_extern: jsoo_create_file_extern,
     caml_ba_map_file_bytecode: caml_ba_map_file_bytecode,
     caml_ba_map_file: caml_ba_map_file,
     caml_sys_rmdir: caml_sys_rmdir,
     caml_sys_mkdir: caml_sys_mkdir,
     caml_sys_rename: caml_sys_rename,
     caml_sys_is_directory: caml_sys_is_directory,
     caml_sys_remove: caml_sys_remove,
     caml_sys_read_directory: caml_sys_read_directory,
     caml_sys_file_exists: caml_sys_file_exists,
     caml_raise_no_such_file: caml_raise_no_such_file,
     caml_sys_chdir: caml_sys_chdir,
     caml_sys_getcwd: caml_sys_getcwd,
     caml_unmount: caml_unmount,
     caml_mount_autoload: caml_mount_autoload,
     resolve_fs_device: resolve_fs_device,
     caml_list_mount_point: caml_list_mount_point,
     jsoo_mount_point: jsoo_mount_point,
     caml_make_path: caml_make_path,
     path_is_absolute: path_is_absolute,
     MlFile: MlFile,
     caml_root: caml_root,
     caml_get_root: caml_get_root,
     caml_current_dir: caml_current_dir,
     caml_trailing_slash: caml_trailing_slash,
     caml_finish_formatting: caml_finish_formatting,
     caml_parse_format: caml_parse_format,
     caml_array_bound_error: caml_array_bound_error,
     caml_raise_not_found: caml_raise_not_found,
     caml_raise_zero_divide: caml_raise_zero_divide,
     caml_raise_end_of_file: caml_raise_end_of_file,
     caml_invalid_argument: caml_invalid_argument,
     caml_failwith: caml_failwith,
     caml_raise_with_string: caml_raise_with_string,
     caml_raise_with_args: caml_raise_with_args,
     caml_raise_with_arg: caml_raise_with_arg,
     caml_raise_constant: caml_raise_constant,
     caml_lessthan: caml_lessthan,
     caml_lessequal: caml_lessequal,
     caml_greaterthan: caml_greaterthan,
     caml_greaterequal: caml_greaterequal,
     caml_notequal: caml_notequal,
     caml_equal: caml_equal,
     caml_int_compare: caml_int_compare,
     caml_compare: caml_compare,
     caml_compare_val: caml_compare_val,
     caml_compare_val_number_custom: caml_compare_val_number_custom,
     caml_compare_val_get_custom: caml_compare_val_get_custom,
     caml_compare_val_tag: caml_compare_val_tag,
     caml_bigstring_blit_ba_to_bytes: caml_bigstring_blit_ba_to_bytes,
     caml_bigstring_blit_bytes_to_ba: caml_bigstring_blit_bytes_to_ba,
     caml_bigstring_blit_string_to_ba: caml_bigstring_blit_string_to_ba,
     caml_bigstring_blit_ba_to_ba: caml_bigstring_blit_ba_to_ba,
     caml_bigstring_memcmp: caml_bigstring_memcmp,
     bigstring_of_typed_array: bigstring_of_typed_array,
     bigstring_of_array_buffer: bigstring_of_array_buffer,
     bigstring_to_typed_array: bigstring_to_typed_array,
     bigstring_to_array_buffer: bigstring_to_array_buffer,
     caml_hash_mix_bigstring: caml_hash_mix_bigstring,
     caml_ba_from_typed_array: caml_ba_from_typed_array,
     caml_ba_kind_of_typed_array: caml_ba_kind_of_typed_array,
     caml_ba_to_typed_array: caml_ba_to_typed_array,
     caml_hash_mix_float32: caml_hash_mix_float32,
     caml_hash_mix_float16: caml_hash_mix_float16,
     caml_ba_hash: caml_ba_hash,
     caml_ba_create_from: caml_ba_create_from,
     caml_ba_deserialize: caml_ba_deserialize,
     caml_ba_serialize: caml_ba_serialize,
     caml_ba_reshape: caml_ba_reshape,
     caml_ba_slice: caml_ba_slice,
     caml_ba_sub: caml_ba_sub,
     caml_ba_blit: caml_ba_blit,
     caml_ba_fill: caml_ba_fill,
     caml_ba_set_3: caml_ba_set_3,
     caml_ba_set_2: caml_ba_set_2,
     caml_ba_set_1: caml_ba_set_1,
     caml_ba_uint8_set64: caml_ba_uint8_set64,
     caml_ba_uint8_set32: caml_ba_uint8_set32,
     caml_ba_uint8_set16: caml_ba_uint8_set16,
     caml_ba_set_generic: caml_ba_set_generic,
     caml_ba_get_3: caml_ba_get_3,
     caml_ba_get_2: caml_ba_get_2,
     caml_ba_get_1: caml_ba_get_1,
     caml_ba_uint8_get64: caml_ba_uint8_get64,
     caml_ba_uint8_get32: caml_ba_uint8_get32,
     caml_ba_uint8_get16: caml_ba_uint8_get16,
     caml_ba_get_generic: caml_ba_get_generic,
     caml_ba_dim_3: caml_ba_dim_3,
     caml_ba_dim_2: caml_ba_dim_2,
     caml_ba_dim_1: caml_ba_dim_1,
     caml_ba_dim: caml_ba_dim,
     caml_ba_num_dims: caml_ba_num_dims,
     caml_ba_layout: caml_ba_layout,
     caml_ba_kind: caml_ba_kind,
     caml_ba_change_layout: caml_ba_change_layout,
     caml_ba_create: caml_ba_create,
     caml_ba_create_unsafe: caml_ba_create_unsafe,
     caml_ba_compare: caml_ba_compare,
     Ml_Bigarray_c_1_1: Ml_Bigarray_c_1_1,
     Ml_Bigarray: Ml_Bigarray,
     caml_ba_custom_name: caml_ba_custom_name,
     caml_ba_create_buffer: caml_ba_create_buffer,
     caml_ba_get_size_per_element: caml_ba_get_size_per_element,
     caml_packFloat16: caml_packFloat16,
     caml_unpackFloat16: caml_unpackFloat16,
     caml_ba_get_size: caml_ba_get_size,
     caml_ba_init: caml_ba_init,
     caml_convert_raw_backtrace_slot: caml_convert_raw_backtrace_slot,
     caml_get_current_callstack: caml_get_current_callstack,
     caml_restore_raw_backtrace: caml_restore_raw_backtrace,
     caml_raw_backtrace_slot: caml_raw_backtrace_slot,
     caml_raw_backtrace_next_slot: caml_raw_backtrace_next_slot,
     caml_raw_backtrace_length: caml_raw_backtrace_length,
     caml_convert_raw_backtrace: caml_convert_raw_backtrace,
     caml_record_backtrace: caml_record_backtrace,
     caml_get_exception_raw_backtrace: caml_get_exception_raw_backtrace,
     caml_get_exception_backtrace: caml_get_exception_backtrace,
     caml_backtrace_status: caml_backtrace_status,
     caml_ml_debug_info_status: caml_ml_debug_info_status,
     caml_record_backtrace_runtime_flag: caml_record_backtrace_runtime_flag,
     caml_record_backtrace_env_flag: caml_record_backtrace_env_flag,
     caml_uniform_array_make: caml_uniform_array_make,
     caml_floatarray_make_unboxed: caml_floatarray_make_unboxed,
     caml_floatarray_make: caml_floatarray_make,
     caml_floatarray_create: caml_floatarray_create,
     caml_array_create_float: caml_array_create_float,
     caml_make_float_vect: caml_make_float_vect,
     caml_make_vect: caml_make_vect,
     caml_array_make: caml_array_make,
     caml_check_bound: caml_check_bound,
     caml_uniform_array_fill: caml_uniform_array_fill,
     caml_floatarray_fill_unboxed: caml_floatarray_fill_unboxed,
     caml_floatarray_fill: caml_floatarray_fill,
     caml_array_fill: caml_array_fill,
     caml_array_get: caml_array_get,
     caml_array_set: caml_array_set,
     caml_uniform_array_blit: caml_uniform_array_blit,
     caml_floatarray_blit: caml_floatarray_blit,
     caml_array_blit: caml_array_blit,
     caml_array_concat: caml_array_concat,
     caml_uniform_array_append: caml_uniform_array_append,
     caml_floatarray_append: caml_floatarray_append,
     caml_array_append: caml_array_append,
     caml_uniform_array_sub: caml_uniform_array_sub,
     caml_floatarray_sub: caml_floatarray_sub,
     caml_array_sub: caml_array_sub};
   var
    cst_Assert_failure = "Assert_failure",
    cst_Division_by_zero = "Division_by_zero",
    cst_End_of_file = "End_of_file",
    cst_Failure = "Failure",
    cst_Invalid_argument = "Invalid_argument",
    cst_Match_failure = "Match_failure",
    cst_Not_found = "Not_found",
    cst_Out_of_memory = "Out_of_memory",
    cst_Stack_overflow = "Stack_overflow",
    cst_Sys_blocked_io = "Sys_blocked_io",
    cst_Sys_error = "Sys_error",
    cst_Undefined_recursive_module = "Undefined_recursive_module";
   jsoo_create_file
    ("/static/scene.json",
     '[0,[0,0,0,2810,3930],\n [0,[0,6,3880.68,304,3919.68],[0,53.5,3887.87,256.5,3911.87],\n  [0,596,3880.68,882,3919.68],[0,641.5,3887.87,836.5,3911.87],\n  [0,96,3804.67,214,3843.67],[0,117.5,3811.87,192.5,3832.87],\n  [0,680,3804.67,798,3843.67],[0,701.5,3811.87,776.5,3832.87],\n  [0,95,3729.67,215,3768.67],[0,115.5,3736.87,194.5,3757.87],\n  [0,679,3729.67,799,3768.67],[0,699.5,3736.87,778.5,3757.87],\n  [0,74,3653.67,236,3692.67],[0,100.5,3660.87,209.5,3684.87],\n  [0,696,3653.67,782,3692.67],[0,712,3660.87,766,3681.87],\n  [0,34,3578.67,276,3617.67],[0,73,3585.87,237,3609.87],\n  [0,520,3578.67,958,3617.67],[0,589,3585.87,889,3609.87],\n  [0,49,3502.67,261,3541.67],[0,82,3509.87,228,3530.87],\n  [0,633,3502.67,845,3541.67],[0,666,3509.87,812,3530.87],\n  [0,47,3427.67,263,3466.67],[0,81,3434.87,229,3458.87],\n  [0,631,3427.67,847,3466.67],[0,665,3434.87,813,3458.87],\n  [0,2763,2099.7,2805,2142.7],[0,2774,2110.3,2794,2130.3],\n  [0,2266,2101.7,2466,2140.7],[0,2298,2108.9,2434,2129.9],\n  [0,2258,2176.7,2474,2215.7],[0,2292.5,2183.9,2439.5,2204.9],\n  [0,2261,2252.7,2471,2291.7],[0,2294,2259.9,2438,2280.9],\n  [0,2262,1950.7,2470,1989.7],[0,2295,1957.9,2437,1978.9],\n  [0,2225,2025.7,2507,2064.7],[0,2268.5,2032.9,2463.5,2056.9],\n  [0,1243,2987.67,1425,3026.67],[0,1273,2994.87,1395,3015.87],\n  [0,1723,2987.67,1957,3026.67],[0,1762,2994.87,1918,3017.87],\n  [0,64,2410.7,246,2449.7],[0,93,2417.9,217,2441.9],\n  [0,648,2410.7,830,2449.7],[0,677,2417.9,801,2441.9],\n  [0,62,2334.7,248,2373.7],[0,92.5,2341.9,217.5,2365.9],\n  [0,650,2334.7,828,2373.7],[0,679,2341.9,799,2365.9],\n  [0,73,2259.7,237,2298.7],[0,101,2266.9,209,2287.9],\n  [0,623,2259.7,855,2298.7],[0,660.5,2266.9,817.5,2290.9],\n  [0,1730,2642.7,1950,2681.7],[0,1766.5,2649.9,1913.5,2673.9],\n  [0,2295,2642.7,2437,2681.7],[0,2318.5,2649.9,2413.5,2673.9],\n  [0,41,2183.7,269,2222.7],[0,78.5,2190.9,231.5,2214.9],\n  [0,664,2183.7,814,2222.7],[0,690.5,2190.9,787.5,2214.9],\n  [0,79,2108.7,231,2147.7],[0,103.5,2115.9,206.5,2136.9],\n  [0,662,2108.7,816,2147.7],[0,687.5,2115.9,790.5,2136.9],\n  [0,76,2032.7,234,2071.7],[0,103,2039.9,207,2063.9],\n  [0,628,2032.7,850,2071.7],[0,664.5,2039.9,813.5,2063.9],\n  [0,1222,1857.7,1446,1896.7],[0,1259,1864.9,1409,1888.9],\n  [0,1711,1859.7,1969,1898.7],[0,1753.5,1866.9,1926.5,1890.9],\n  [0,1761,2551.7,1919,2590.7],[0,1787,2558.9,1893,2582.9],\n  [0,2268,2403.7,2464,2442.7],[0,2300,2410.9,2432,2434.9],\n  [0,73,1622.7,237,1661.7],[0,101.5,1629.9,208.5,1652.9],\n  [0,670,1622.7,808,1661.7],[0,693.5,1629.9,784.5,1653.9],\n  [0,54,1547.7,256,1586.7],[0,88.5,1554.9,221.5,1578.9],\n  [0,638,1547.7,840,1586.7],[0,672.5,1554.9,805.5,1578.9],\n  [0,1236,3169.67,1432,3208.67],[0,1269,3176.87,1399,3199.87],\n  [0,1742,3234.67,1938,3273.67],[0,1775,3241.87,1905,3264.87],\n  [0,1711,2817.7,1969,2856.7],[0,1752,2824.9,1928,2848.9],\n  [0,2257,2817.7,2475,2856.7],[0,2291,2824.9,2441,2848.9],\n  [0,1819,1779.7,1861,1822.7],[0,1830,1790.3,1850,1810.3],\n  [0,1223,1687.7,1445,1726.7],[0,1259.5,1694.9,1408.5,1717.9],\n  [0,1172,1782.7,1496,1821.7],[0,1223.5,1789.9,1444.5,1813.9],\n  [0,1172,1953.7,1496,1992.7],[0,1223.5,1960.9,1444.5,1984.9],\n  [0,35,1471.7,275,1510.7],[0,72,1478.9,238,1502.9],\n  [0,619,1471.7,859,1510.7],[0,656,1478.9,822,1502.9],\n  [0,52,1396.7,258,1435.7],[0,85,1403.9,225,1424.9],\n  [0,636,1396.7,842,1435.7],[0,669,1403.9,809,1424.9],\n  [0,74,1320.7,236,1359.7],[0,102,1327.9,208,1351.9],\n  [0,663,1320.7,815,1359.7],[0,688.5,1327.9,789.5,1351.9],\n  [0,64,1245.7,246,1284.7],[0,95.5,1252.9,214.5,1276.9],\n  [0,679,1245.7,799,1284.7],[0,699,1252.9,779,1276.9],\n  [0,45,1169.7,265,1208.7],[0,82,1176.9,228,1200.9],\n  [0,619,1169.7,859,1208.7],[0,656.5,1176.9,821.5,1200.9],\n  [0,119,1094.7,191,1133.7],[0,134,1101.9,176,1122.9],\n  [0,651,1094.7,827,1133.7],[0,680,1101.9,798,1125.9],\n  [0,120,792.699,190,831.699],[0,133.5,799.9,176.5,823.9],\n  [0,649,792.699,829,831.699],[0,678,799.9,800,823.9],\n  [0,718,904.699,760,947.699],[0,729,915.3,749,935.3],\n  [0,68,867.699,242,906.699],[0,96,874.9,214,898.9],\n  [0,54,943.699,256,982.699],[0,88,950.9,222,974.9],\n  [0,106,1018.7,204,1057.7],[0,122.5,1025.9,187.5,1049.9],\n  [0,1771,2221.7,1909,2260.7],[0,1793.5,2228.9,1886.5,2249.9],\n  [0,2184,2327.7,2548,2366.7],[0,2238,2334.9,2494,2358.9],\n  [0,125,716.699,185,755.699],[0,138,723.9,172,744.9],\n  [0,691,716.699,787,755.699],[0,709,723.9,769,744.9],\n  [0,11,641.699,299,680.699],[0,58.5,648.9,251.5,672.9],\n  [0,603,576.699,875,615.699],[0,647,583.9,831,607.9],\n  [0,1740,611.699,1940,650.699],[0,1773,618.9,1907,642.9],\n  [0,2295,611.699,2437,650.699],[0,2321,618.9,2411,642.9],\n  [0,100,501.699,210,540.699],[0,119.5,509.9,190.5,529.9],\n  [0,662,501.699,816,540.699],[0,688,509.9,790,529.9],\n  [0,67,425.699,243,464.699],[0,95,432.9,215,456.9],\n  [0,664,425.699,814,464.699],[0,688.5,432.9,789.5,453.9],\n  [0,718,272.699,760,315.699],[0,729,283.3,749,303.3],\n  [0,9,199.699,301,238.699],[0,54,206.9,256,230.9],\n  [0,12,274.699,298,313.699],[0,56,281.9,254,305.9],\n  [0,4,350.699,306,389.699],[0,51.5,357.9,258.5,381.9],\n  [0,42,3287.67,268,3326.67],[0,77.5,3294.87,232.5,3318.87],\n  [0,617,3351.67,861,3390.67],[0,655.5,3358.87,822.5,3382.87],\n  [0,1819,84.6992,1861,127.699],[0,1830,95.3,1850,115.3],\n  [0,1222,10.6992,1446,49.6992],[0,1257,17.9,1411,41.9],\n  [0,1188,86.6992,1480,125.699],[0,1233.5,93.9,1434.5,117.9],\n  [0,1215,161.699,1453,200.699],[0,1252,168.9,1416,192.9],\n  [0,52,48.6992,258,87.6992],[0,87.5,55.9,222.5,78.9],\n  [0,75,123.699,235,162.699],[0,101.5,130.9,208.5,154.9],\n  [0,716,120.199,762,166.199],[0,727,134.6,751,152.6],\n  [0,33,1723.7,277,1762.7],[0,72.5,1730.9,237.5,1753.9],\n  [0,8,1808.7,302,1847.7],[0,53.5,1815.9,256.5,1839.9],\n  [0,8,1936.7,302,1975.7],[0,53.5,1943.9,256.5,1967.9],\n  [0,668,2684.7,810,2723.7],[0,691.5,2691.9,786.5,2712.9],\n  [0,648,2817.7,830,2856.7],[0,679.5,2824.9,798.5,2848.9],\n  [0,639,2565.7,839,2604.7],[0,671,2572.9,807,2596.9],\n  [0,652,2485.7,826,2524.7],[0,679.5,2492.9,798.5,2516.9],\n  [0,675,3017.67,803,3056.67],[0,696,3024.87,782,3045.87],\n  [0,675,3140.67,803,3179.67],[0,696,3147.87,782,3171.87],\n  [0,1244,2157.7,1424,2196.7],[0,1274,2164.9,1394,2188.9],\n  [0,1243,2359.7,1425,2398.7],[0,1273,2366.9,1395,2387.9],\n  [0,303.121,3899.18,596.828,3901.18],[0,213.129,3823.17,680.672,3825.17],\n  [0,214.75,3748.17,679.328,3750.17],[0,235.59,3672.17,696.328,3674.17],\n  [0,275.301,3597.17,520.871,3599.17],[0,260.762,3521.17,633.039,3523.17],\n  [0,262.109,3446.17,631.578,3448.17],[0,2465.1,2120.2,2763.2,2122.2],\n  [0,2439.62,2123.82,2763.98,2183.88],[0,2427.96,2129.3,2766.04,2258.57],\n  [0,2428.86,1983.43,2766.04,2113],[0,2446.92,2058.91,2763.88,2118.48],\n  [0,1424.2,3006.17,1723.9,3008.17],[0,245.289,2429.2,648.551,2431.2],\n  [0,247.539,2353.2,650.238,2355.2],[0,236.512,2278.2,623.422,2280.2],\n  [0,1949.6,2661.2,2295.2,2663.2],[0,268.289,2202.2,664.891,2204.2],\n  [0,230.75,2127.2,662.461,2129.2],[0,233.762,2051.2,628.391,2053.2],\n  [0,1445,1876.6,1711.3,1879.7],[0,1889.23,2437.34,2312.67,2558.26],\n  [0,236.512,1641.2,670.828,1643.2],[0,255.73,1566.2,638.078,1568.2],\n  [0,1414.07,3198.48,1759.93,3244.86],[0,1968.7,2836.2,2257.7,2838.2],\n  [0,1406.82,1719.71,1819.98,1798.38],[0,1495.1,1800.2,1819.3,1802.9],\n  [0,1384.07,1806.86,1820.93,1957.05],[0,274.59,1490.2,619.32,1492.2],\n  [0,257.73,1415.2,636.359,1417.2],[0,235.281,1339.2,663.309,1341.2],\n  [0,245.289,1264.2,679.301,1266.2],[0,264.5,1188.2,619.969,1190.2],\n  [0,190.648,1113.2,651.969,1115.2],[0,189.352,811.199,649.809,813.199],\n  [0,187.039,817.52,719.07,923.18],[0,237.363,891.703,718.516,925.797],\n  [0,249.738,926.504,718.473,958.195],[0,197.754,929.02,718.996,1030.88],\n  [0,1894.6,2251.22,2285.9,2331.98],[0,184.359,735.199,691.32,737.199],\n  [0,262.34,606.707,635.25,650.191],[0,1939.6,630.199,2295.9,632.199],\n  [0,209.68,520.199,662.191,522.199],[0,242.121,444.199,664.789,446.199],\n  [0,255.93,231.207,718.777,292.594],[0,297.121,293.199,718.43,295.199],\n  [0,256.602,295.809,718.59,357.891],[0,247.75,3316.36,641.281,3361.44],\n  [0,1415.75,41.5117,1819.75,104.09],[0,1479.3,105.199,1819.1,107.199],\n  [0,1418.55,108.211,1819.55,169.59],[0,1732.44,3252.65,1746.62,3262.46],\n  [0,265.527,3256.52,1733.63,3304.7],[0,1767.35,3266.04,1782.11,3275.61],\n  [0,858.574,3269.62,1769.62,3368.91],[0,1192.57,110.066,1206.9,119.863],\n  [0,761.176,113.898,1193.96,142.801],[0,1213.52,168.641,1227.8,178.441],\n  [0,761.176,143.605,1214.86,174.598],[0,705.75,138.289,719.781,148.109],\n  [0,234.059,142.199,706.75,144.199],[0,1729.4,628.211,1743.53,638.027],\n  [0,297.191,632.102,1730.52,659.602],[0,1730.45,622.766,1744.62,632.578],\n  [0,870.41,599.398,1731.63,628.699],[0,1231.03,1860.61,1245.54,1870.36],\n  [0,251.367,1753.11,1232.71,1866.59],[0,1213.95,1705.92,1228.12,1715.73],\n  [0,274.23,1709.8,1215.13,1740.5],[0,1164.61,1801.02,1178.73,1810.83],\n  [0,299.246,1804.9,1165.72,1826],[0,1214.81,1867.36,1229.02,1877.17],\n  [0,293.957,1833,1216.04,1873.3],[0,1162.7,1965.77,1176.82,1975.59],\n  [0,300.734,1957.3,1163.82,1971.7],[0,1219.47,1879.97,1233.8,1889.77],\n  [0,283.633,1883.8,1220.87,1948.6],[0,1722.11,2661.73,1736.32,2671.55],\n  [0,809.09,2665.6,1723.34,2702.5],[0,1730.73,2819.21,1745.24,2828.96],\n  [0,802.828,2710.91,1732.42,2825.19],[0,1700.2,2832.29,1714.23,2842.11],\n  [0,829.57,2836.2,1701.2,2838.2],[0,1745.66,2987.88,1760.28,2997.58],\n  [0,810.656,2847.31,1747.55,2993.87],[0,1749.33,2671.61,1763.96,2681.3],\n  [0,809.812,2675.31,1751.26,2826.89],[0,1750.95,2567.4,1765.03,2577.22],\n  [0,838.148,2571.3,1752.01,2584.9],[0,1727.37,2649.44,1741.7,2659.23],\n  [0,831.379,2590.61,1728.77,2655.39],[0,2260.46,2423.54,2274.71,2433.35],\n  [0,823.277,2427.4,2261.75,2501.9],[0,1745.99,2643.7,1760.58,2653.41],\n  [0,810.801,2514.31,1747.84,2649.69],[0,1749.73,2848.55,1764.42,2858.21],\n  [0,792.301,2852.21,1751.78,3028.45],[0,1776.56,3230.96,1791.41,3240.38],\n  [0,796.605,3043.79,1779.18,3236.91],[0,1732.71,3245.53,1746.91,3255.34],\n  [0,794.543,3167.67,1733.94,3251.47],[0,1741.53,3015.89,1756.11,3025.62],\n  [0,795.742,3019.63,1743.34,3153.26],[0,2293.6,2401.59,2308.38,2411.15],\n  [0,1390.87,2190.13,2295.93,2407.57],[0,2283.51,2323,2298.31,2332.51],\n  [0,1421.48,2171.56,2285.95,2328.97],[0,2254.79,2054.46,2269.32,2064.2],\n  [0,1409.38,2058.21,2256.52,2168.49],[0,2259.31,2413.75,2273.52,2423.57],\n  [0,1422.86,2382,2260.54,2419.7],[0,2181.51,2348.03,2195.71,2357.85],\n  [0,1423.77,2351.9,2182.73,2377.4]],\n [0,[2,155,3900.17,148,18.5,0,[0,"#000000"]],\n  [3,155,3903.87,"ubiquity-slideshow-kubuntu","14px serif",[0,"#000000"],0],\n  [2,739,3900.17,141.998,18.5,0,[0,"#000000"]],\n  [3,739,3903.87,"ubiquity-slideshow-ubuntu","14px serif",[0,"#000000"],0],\n  [2,155,3824.17,57.9996,18.5,0,[0,"#000000"]],\n  [3,155,3827.87,"tk8.4-doc","14px serif",[0,"#000000"],0],\n  [2,739,3824.17,57.9996,18.5,0,[0,"#000000"]],\n  [3,739,3827.87,"tk8.5-doc","14px serif",[0,"#000000"],0],\n  [2,155,3749.17,59.0004,18.5,0,[0,"#000000"]],\n  [3,155,3752.87,"tcl8.4-doc","14px serif",[0,"#000000"],0],\n  [2,739,3749.17,59.0004,18.5,0,[0,"#000000"]],\n  [3,739,3752.87,"tcl8.5-doc","14px serif",[0,"#000000"],0],\n  [2,155,3673.17,79.9992,18.5,0,[0,"#000000"]],\n  [3,155,3676.87,"openbsd-inetd","14px serif",[0,"#000000"],0],\n  [2,739,3673.17,42.0012,18.5,0,[0,"#000000"]],\n  [3,739,3676.87,"xinetd","14px serif",[0,"#000000"],0],\n  [2,155,3598.17,119.999,18.5,0,[0,"#000000"]],\n  [3,155,3601.87,"network-manager-kde","14px serif",[0,"#000000"],0],\n  [2,739,3598.17,218.002,18.5,0,[0,"#000000"]],\n  [3,739,3601.87,"plasma-widget-networkmanagement (x 2)","14px serif",\n   [0,"#000000"],0],\n  [2,155,3522.17,105.001,18.5,0,[0,"#000000"]],\n  [3,155,3525.87,"libstdc++6-4.4-doc","14px serif",[0,"#000000"],0],\n  [2,739,3522.17,105.001,18.5,0,[0,"#000000"]],\n  [3,739,3525.87,"libstdc++6-4.5-doc","14px serif",[0,"#000000"],0],\n  [2,155,3447.17,106.999,18.5,0,[0,"#000000"]],\n  [3,155,3450.87,"libstdc++6-4.4-dbg","14px serif",[0,"#000000"],0],\n  [2,739,3447.17,106.999,18.5,0,[0,"#000000"]],\n  [3,739,3450.87,"libstdc++6-4.5-dbg","14px serif",[0,"#000000"],0],\n  [2,2784,2121.2,20.0002,20.4998,0,[0,"#ff0000"]],\n  [3,2784,2125.3,"#","14px serif",[0,"#ff0000"],0],\n  [2,2366,2121.2,99,18.5,0,[0,"#000000"]],\n  [3,2366,2124.9,"libsdl1.2debian-all","14px serif",[0,"#000000"],0],\n  [2,2366,2196.2,106.999,18.5,0,[0,"#000000"]],\n  [3,2366,2199.9,"libsdl1.2debian-alsa","14px serif",[0,"#000000"],0],\n  [2,2366,2272.2,104,18.5,0,[0,"#000000"]],\n  [3,2366,2275.9,"libsdl1.2debian-esd","14px serif",[0,"#000000"],0],\n  [2,2366,1970.2,103,18.5,0,[0,"#000000"]],\n  [3,2366,1973.9,"libsdl1.2debian-oss","14px serif",[0,"#000000"],0],\n  [2,2366,2045.2,140,18.5,0,[0,"#000000"]],\n  [3,2366,2048.9,"libsdl1.2debian-pulseaudio","14px serif",[0,"#000000"],0],\n  [2,1334,3007.17,90,18.5,0,[0,"#000000"]],\n  [3,1334,3010.87,"libreadline5-dev","14px serif",[0,"#000000"],0],\n  [2,1840,3007.17,115.999,18.5,0,[0,"#000000"]],\n  [3,1840,3010.87,"libreadline6-dev (x 6)","14px serif",[0,"#000000"],0],\n  [2,155,2430.2,90,18.5,0,[0,"#000000"]],\n  [3,155,2433.9,"libreadline5-dbg","14px serif",[0,"#000000"],0],\n  [2,739,2430.2,90,18.5,0,[0,"#000000"]],\n  [3,739,2433.9,"libreadline6-dbg","14px serif",[0,"#000000"],0],\n  [2,155,2354.2,92.0016,18.5,0,[0,"#000000"]],\n  [3,155,2357.9,"libqt4-dbg (x 24)","14px serif",[0,"#000000"],0],\n  [2,739,2354.2,87.9984,18.5,0,[0,"#000000"]],\n  [3,739,2357.9,"qt-x11-free-dbg","14px serif",[0,"#000000"],0],\n  [2,155,2279.2,81,18.5,0,[0,"#000000"]],\n  [3,155,2282.9,"libneon27-dev","14px serif",[0,"#000000"],0],\n  [2,739,2279.2,114.998,18.5,0,[0,"#000000"]],\n  [3,739,2282.9,"libneon27-gnutls-dev","14px serif",[0,"#000000"],0],\n  [2,1840,2662.2,109.001,18.5,0,[0,"#000000"]],\n  [3,1840,2665.9,"libjpeg62-dev (x 23)","14px serif",[0,"#000000"],0],\n  [2,2366,2662.2,69.9984,18.5,0,[0,"#000000"]],\n  [3,2366,2665.9,"libjpeg8-dev","14px serif",[0,"#000000"],0],\n  [2,155,2203.2,113,18.5,0,[0,"#000000"]],\n  [3,155,2206.9,"libjack-jackd2-0 (x 2)","14px serif",[0,"#000000"],0],\n  [2,739,2203.2,74.0016,18.5,0,[0,"#000000"]],\n  [3,739,2206.9,"libjack0 (x 3)","14px serif",[0,"#000000"],0],\n  [2,155,2128.2,74.9988,18.5,0,[0,"#000000"]],\n  [3,155,2131.9,"libiodbc2-dev","14px serif",[0,"#000000"],0],\n  [2,739,2128.2,75.9996,18.5,0,[0,"#000000"]],\n  [3,739,2131.9,"unixodbc-dev","14px serif",[0,"#000000"],0],\n  [2,155,2052.2,78.0012,18.5,0,[0,"#000000"]],\n  [3,155,2055.9,"libgpod4 (x 9)","14px serif",[0,"#000000"],0],\n  [2,739,2052.2,110.002,18.5,0,[0,"#000000"]],\n  [3,739,2055.9,"libgpod4-nogtk (x 2)","14px serif",[0,"#000000"],0],\n  [2,1334,1877.2,110.999,18.5,0,[0,"#000000"]],\n  [3,1334,1880.9,"libgl1-mesa-glx (x 8)","14px serif",[0,"#000000"],0],\n  [2,1840,1879.2,128.002,18.5,0,[0,"#000000"]],\n  [3,1840,1882.9,"libgl1-mesa-swx11 (x 3)","14px serif",[0,"#000000"],0],\n  [2,1840,2571.2,78.0012,18.5,0,[0,"#000000"]],\n  [3,1840,2574.9,"libgd2-noxpm","14px serif",[0,"#000000"],0],\n  [2,2366,2423.2,96.9984,18.5,0,[0,"#000000"]],\n  [3,2366,2426.9,"libgd2-xpm (x 10)","14px serif",[0,"#000000"],0],\n  [2,155,1642.2,81,18.5,0,[0,"#000000"]],\n  [3,155,1645.9,"libelf-dev (x 3)","14px serif",[0,"#000000"],0],\n  [2,739,1642.2,68.0004,18.5,0,[0,"#000000"]],\n  [3,739,1645.9,"libelfg0-dev","14px serif",[0,"#000000"],0],\n  [2,155,1567.2,100.001,18.5,0,[0,"#000000"]],\n  [3,155,1570.9,"libdb4.7-java (x 3)","14px serif",[0,"#000000"],0],\n  [2,739,1567.2,100.001,18.5,0,[0,"#000000"]],\n  [3,739,1570.9,"libdb4.8-java (x 3)","14px serif",[0,"#000000"],0],\n  [2,1334,3189.17,96.9984,18.5,0,[0,"#000000"]],\n  [3,1334,3192.87,"libdb4.7-dev (x 2)","14px serif",[0,"#000000"],0],\n  [2,1840,3254.17,96.9984,18.5,0,[0,"#000000"]],\n  [3,1840,3257.87,"libdb4.8-dev (x 5)","14px serif",[0,"#000000"],0],\n  [2,1840,2837.2,128.002,18.5,0,[0,"#000000"]],\n  [3,1840,2840.9,"libcurl4-gnutls-dev (x 4)","14px serif",[0,"#000000"],0],\n  [2,2366,2837.2,108,18.5,0,[0,"#000000"]],\n  [3,2366,2840.9,"libcurl4-openssl-dev","14px serif",[0,"#000000"],0],\n  [2,1840,1801.2,20.0002,20.4998,0,[0,"#ff0000"]],\n  [3,1840,1805.3,"#","14px serif",[0,"#ff0000"],0],\n  [2,1334,1707.2,110.002,18.5,0,[0,"#000000"]],\n  [3,1334,1710.9,"libclutter-1.0-0 (x 2)","14px serif",[0,"#000000"],0],\n  [2,1334,1802.2,160.999,18.5,0,[0,"#000000"]],\n  [3,1334,1805.9,"libclutter-eglx-es11-1.0-0 (x 2)","14px serif",\n   [0,"#000000"],0],\n  [2,1334,1973.2,160.999,18.5,0,[0,"#000000"]],\n  [3,1334,1976.9,"libclutter-eglx-es20-1.0-0 (x 2)","14px serif",\n   [0,"#000000"],0],\n  [2,155,1491.2,119.002,18.5,0,[0,"#000000"]],\n  [3,155,1494.9,"lib64stdc++6-4.4-dbg","14px serif",[0,"#000000"],0],\n  [2,739,1491.2,119.002,18.5,0,[0,"#000000"]],\n  [3,739,1494.9,"lib64stdc++6-4.5-dbg","14px serif",[0,"#000000"],0],\n  [2,155,1416.2,101.999,18.5,0,[0,"#000000"]],\n  [3,155,1419.9,"lib64readline5-dev","14px serif",[0,"#000000"],0],\n  [2,739,1416.2,101.999,18.5,0,[0,"#000000"]],\n  [3,739,1419.9,"lib64readline6-dev","14px serif",[0,"#000000"],0],\n  [2,155,1340.2,79.9992,18.5,0,[0,"#000000"]],\n  [3,155,1343.9,"hunspell-tools","14px serif",[0,"#000000"],0],\n  [2,739,1340.2,74.9988,18.5,0,[0,"#000000"]],\n  [3,739,1343.9,"myspell-tools","14px serif",[0,"#000000"],0],\n  [2,155,1265.2,90,18.5,0,[0,"#000000"]],\n  [3,155,1268.9,"hunspell-fr (x 3)","14px serif",[0,"#000000"],0],\n  [2,739,1265.2,59.0004,18.5,0,[0,"#000000"]],\n  [3,739,1268.9,"myspell-fr","14px serif",[0,"#000000"],0],\n  [2,155,1189.2,109.001,18.5,0,[0,"#000000"]],\n  [3,155,1192.9,"hunspell-de-de (x 3)","14px serif",[0,"#000000"],0],\n  [2,739,1189.2,119.002,18.5,0,[0,"#000000"]],\n  [3,739,1192.9,"myspell-de-de-oldspell","14px serif",[0,"#000000"],0],\n  [2,155,1114.2,34.9999,18.5,0,[0,"#000000"]],\n  [3,155,1117.9,"hello","14px serif",[0,"#000000"],0],\n  [2,739,1114.2,87.0012,18.5,0,[0,"#000000"]],\n  [3,739,1117.9,"hello-debhelper","14px serif",[0,"#000000"],0],\n  [2,155,812.2,33.9998,18.5,0,[0,"#000000"]],\n  [3,155,815.9,"grub","14px serif",[0,"#000000"],0],\n  [2,739,812.2,88.9992,18.5,0,[0,"#000000"]],\n  [3,739,815.9,"grub-legacy-ec2","14px serif",[0,"#000000"],0],\n  [2,739,926.2,20.0002,20.4998,0,[0,"#ff0000"]],\n  [3,739,930.3,"#","14px serif",[0,"#ff0000"],0],\n  [2,155,887.2,86.0004,18.5,0,[0,"#000000"]],\n  [3,155,890.9,"grub-efi-amd64","14px serif",[0,"#000000"],0],\n  [2,155,963.2,100.001,18.5,0,[0,"#000000"]],\n  [3,155,966.9,"grub-efi-ia32 (x 2)","14px serif",[0,"#000000"],0],\n  [2,155,1038.2,47.9988,18.5,0,[0,"#000000"]],\n  [3,155,1041.9,"grub-pc","14px serif",[0,"#000000"],0],\n  [2,1840,2241.2,68.0004,18.5,0,[0,"#000000"]],\n  [3,1840,2244.9,"foomatic-db","14px serif",[0,"#000000"],0],\n  [2,2366,2347.2,181.001,18.5,0,[0,"#000000"]],\n  [3,2366,2350.9,"foomatic-db-compressed-ppds (x 4)","14px serif",\n   [0,"#000000"],0],\n  [2,155,736.2,29.0002,18.5,0,[0,"#000000"]],\n  [3,155,739.9,"flex","14px serif",[0,"#000000"],0],\n  [2,739,736.2,47.0016,18.5,0,[0,"#000000"]],\n  [3,739,739.9,"flex-old","14px serif",[0,"#000000"],0],\n  [2,155,661.2,142.999,18.5,0,[0,"#000000"]],\n  [3,155,664.9,"exim4-daemon-heavy (x 2)","14px serif",[0,"#000000"],0],\n  [2,739,596.2,135,18.5,0,[0,"#000000"]],\n  [3,739,599.9,"exim4-daemon-light (x 2)","14px serif",[0,"#000000"],0],\n  [2,1840,631.2,99,18.5,0,[0,"#000000"]],\n  [3,1840,634.9,"exim4-config (x 5)","14px serif",[0,"#000000"],0],\n  [2,2366,631.2,69.9984,18.5,0,[0,"#000000"]],\n  [3,2366,634.9,"postfix (x 9)","14px serif",[0,"#000000"],0],\n  [2,155,521.2,54,18.5,0,[0,"#000000"]],\n  [3,155,524.9,"emacs23","14px serif",[0,"#000000"],0],\n  [2,739,521.2,75.9996,18.5,0,[0,"#000000"]],\n  [3,739,524.9,"emacs23-nox","14px serif",[0,"#000000"],0],\n  [2,155,445.2,87.0012,18.5,0,[0,"#000000"]],\n  [3,155,448.9,"debconf-english","14px serif",[0,"#000000"],0],\n  [2,739,445.2,74.0016,18.5,0,[0,"#000000"]],\n  [3,739,448.9,"debconf-i18n","14px serif",[0,"#000000"],0],\n  [2,739,294.2,20.0002,20.4998,0,[0,"#ff0000"]],\n  [3,739,298.3,"#","14px serif",[0,"#ff0000"],0],\n  [2,155,219.2,145.001,18.5,0,[0,"#000000"]],\n  [3,155,222.9,"bacula-common-mysql (x 3)","14px serif",[0,"#000000"],0],\n  [2,155,294.2,141.998,18.5,0,[0,"#000000"]],\n  [3,155,297.9,"bacula-common-pgsql (x 3)","14px serif",[0,"#000000"],0],\n  [2,155,370.2,150.001,18.5,0,[0,"#000000"]],\n  [3,155,373.9,"bacula-common-sqlite3 (x 3)","14px serif",[0,"#000000"],0],\n  [2,155,3307.17,112,18.5,0,[0,"#000000"]],\n  [3,155,3310.87,"apache2-prefork-dev","14px serif",[0,"#000000"],0],\n  [2,739,3371.17,121,18.5,0,[0,"#000000"]],\n  [3,739,3374.87,"apache2-threaded-dev","14px serif",[0,"#000000"],0],\n  [2,1840,106.2,20.0002,20.4998,0,[0,"#ff0000"]],\n  [3,1840,110.3,"#","14px serif",[0,"#ff0000"],0],\n  [2,1334,30.2,110.999,18.5,0,[0,"#000000"]],\n  [3,1334,33.9,"apache2-mpm-event","14px serif",[0,"#000000"],0],\n  [2,1334,106.2,145.001,18.5,0,[0,"#000000"]],\n  [3,1334,109.9,"apache2-mpm-prefork (x 2)","14px serif",[0,"#000000"],0],\n  [2,1334,181.2,118.001,18.5,0,[0,"#000000"]],\n  [3,1334,184.9,"apache2-mpm-worker","14px serif",[0,"#000000"],0],\n  [2,155,68.2,101.999,18.5,0,[0,"#000000"]],\n  [3,155,71.9,"abrowser (x 7049)","14px serif",[0,"#000000"],0],\n  [2,155,143.2,78.9984,18.5,0,[0,"#000000"]],\n  [3,155,146.9,"eucalyptus-nc","14px serif",[0,"#000000"],0],\n  [2,739,143.2,22,22,0,[0,"#0000ff"]],\n  [3,739,147.6,"or","14px serif",[0,"#0000ff"],0],\n  [2,155,1743.2,121,18.5,0,[0,"#000000"]],\n  [3,155,1746.9,"libclutter-1.0-dev (x 2)","14px serif",[0,"#000000"],0],\n  [2,155,1828.2,146.002,18.5,0,[0,"#000000"]],\n  [3,155,1831.9,"libclutter-eglx-es11-1.0-dev","14px serif",[0,"#000000"],0],\n  [2,155,1956.2,146.002,18.5,0,[0,"#000000"]],\n  [3,155,1959.9,"libclutter-eglx-es20-1.0-dev","14px serif",[0,"#000000"],0],\n  [2,739,2704.2,69.9984,18.5,0,[0,"#000000"]],\n  [3,739,2707.9,"libecore-dev","14px serif",[0,"#000000"],0],\n  [2,739,2837.2,90,18.5,0,[0,"#000000"]],\n  [3,739,2840.9,"libedje-dev (x 2)","14px serif",[0,"#000000"],0],\n  [2,739,2585.2,99,18.5,0,[0,"#000000"]],\n  [3,739,2588.9,"libgd2-noxpm-dev","14px serif",[0,"#000000"],0],\n  [2,739,2505.2,86.0004,18.5,0,[0,"#000000"]],\n  [3,739,2508.9,"libgd2-xpm-dev","14px serif",[0,"#000000"],0],\n  [2,739,3037.17,63,18.5,0,[0,"#000000"]],\n  [3,739,3040.87,"librdf0-dev","14px serif",[0,"#000000"],0],\n  [2,739,3160.17,63,18.5,0,[0,"#000000"]],\n  [3,739,3163.87,"librpm-dev","14px serif",[0,"#000000"],0],\n  [2,1334,2177.2,88.9992,18.5,0,[0,"#000000"]],\n  [3,1334,2180.9,"ubuntu-desktop","14px serif",[0,"#000000"],0],\n  [2,1334,2379.2,90,18.5,0,[0,"#000000"]],\n  [3,1334,2382.9,"ubuntu-netbook","14px serif",[0,"#000000"],0],\n  [0,[0,[0,303.12,3900.17],[1,393.26,3900.17,507.79,3900.17,596.83,3900.17]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,213.13,3824.17],[1,324.93,3824.17,568.72,3824.17,680.67,3824.17]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,214.75,3749.17],[1,326.82,3749.17,567.33,3749.17,679.33,3749.17]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,235.59,3673.17],[1,361.22,3673.17,599.38,3673.17,696.33,3673.17]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,275.3,3598.17],[1,346.08,3598.17,437.75,3598.17,520.87,3598.17]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,260.76,3522.17],[1,366.27,3522.17,527.46,3522.17,633.04,3522.17]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,262.11,3447.17],[1,367.16,3447.17,526.43,3447.17,631.58,3447.17]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,2465.1,2121.2],[1,2564.3,2121.2,2709.7,2121.2,2763.2,2121.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,2439.8,2182.9],[1,2538,2165.3,2706,2135.2,2763.8,2124.8]],0,\n   [0,"#ff0000"]],\n  [0,\n   [0,[0,2428.2,2257.6],[1,2463.5,2248.9,2508.1,2236.7,2547,2223.2],\n    [1,2630.5,2194.1,2726.2,2149.2,2765.6,2130.2]],\n   0,[0,"#ff0000"]],\n  [0,\n   [0,[0,2429.1,1984.4],[1,2464.2,1993,2508.5,2004.8,2547,2018.2],\n    [1,2630.7,2047.3,2726.3,2092.8,2765.6,2112.1]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,2447.1,2059.9],[1,2546.1,2077.9,2707.3,2107.2,2763.7,2117.5]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1424.2,3007.17],[1,1507.8,3007.17,1632.8,3007.17,1723.9,3007.17]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,245.29,2430.2],[1,354.95,2430.2,538.82,2430.2,648.55,2430.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,247.54,2354.2],[1,358.01,2354.2,541.46,2354.2,650.24,2354.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,236.51,2279.2],[1,337.2,2279.2,509.15,2279.2,623.42,2279.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1949.6,2662.2],[1,2053.5,2662.2,2206.4,2662.2,2295.2,2662.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,268.29,2203.2],[1,385.38,2203.2,564.77,2203.2,664.89,2203.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,230.75,2128.2],[1,342.47,2128.2,550.28,2128.2,662.46,2128.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,233.76,2052.2],[1,335.49,2052.2,513.15,2052.2,628.39,2052.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1445,1877.6],[1,1523.6,1877.9,1629.1,1878.3,1711.3,1878.7]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1889.5,2557.3],[1,1988.5,2529.4,2210.1,2467.1,2312.4,2438.3]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,236.51,1642.2],[1,352.41,1642.2,562.73,1642.2,670.83,1642.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,255.73,1567.2],[1,362.75,1567.2,530.98,1567.2,638.08,1567.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1414.2,3199.47],[1,1508.8,3211.63,1665.2,3231.71,1759.8,3243.87]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,1968.7,2837.2],[1,2057.3,2837.2,2173.8,2837.2,2257.7,2837.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1407,1720.7],[1,1525,1742.7,1751.2,1784.7,1819.8,1797.4]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1495.1,1801.9],[1,1614.3,1801.6,1765,1801.3,1819.3,1801.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1384.4,1956.1],[1,1493.6,1918.9,1748.3,1832.3,1820.6,1807.8]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,274.59,1491.2],[1,375.29,1491.2,518.6,1491.2,619.32,1491.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,257.73,1416.2],[1,364.26,1416.2,529.85,1416.2,636.36,1416.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,235.28,1340.2],[1,348.31,1340.2,552.84,1340.2,663.31,1340.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,245.29,1265.2],[1,365.99,1265.2,576.62,1265.2,679.3,1265.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,264.5,1189.2],[1,365.73,1189.2,515.8,1189.2,619.97,1189.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,190.65,1114.2],[1,281.11,1114.2,521.56,1114.2,651.97,1114.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,189.35,812.2],[1,278.29,812.2,518.28,812.2,649.81,812.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,187.23,818.5],[1,293.76,839.3,632.65,905.4,718.88,922.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,237.43,892.7],[1,374.68,901.8,642.46,919.7,718.45,924.8]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,249.8,957.2],[1,390.15,948.3,644.6,932.2,718.41,927.5]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,197.94,1029.9],[1,314.77,1007.5,635.17,946.1,718.81,930]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1894.8,2252.2],[1,1988,2271,2177.5,2309.2,2285.7,2331]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,184.36,736.2],[1,278.73,736.2,574.9,736.2,691.32,736.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,262.45,649.2],[1,368.7,637.4,530.17,619.4,635.14,607.7]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1939.6,631.2],[1,2043.6,631.2,2204.3,631.2,2295.9,631.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,209.68,521.2],[1,314.17,521.2,542.44,521.2,662.19,521.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,242.12,445.2],[1,356.9,445.2,556.84,445.2,664.79,445.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,256.06,232.2],[1,397.74,250.3,646.23,282.3,718.65,291.6]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,297.12,294.2],[1,441.28,294.2,652.33,294.2,718.43,294.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,256.73,356.9],[1,398.39,338.5,645.89,306.3,718.46,296.8]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,247.86,3317.35],[1,355.35,3329.13,531.6,3348.45,641.17,3360.45]],\n   0,[0,"#ff0000"]],\n  [0,[0,[0,1415.9,42.5],[1,1535.9,60.5,1752.5,93,1819.6,103.1]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1479.3,106.2],[1,1600.5,106.2,1762.2,106.2,1819.1,106.2]],0,\n   [0,"#ff0000"]],\n  [0,[0,[0,1418.7,168.6],[1,1539.1,150.8,1752.6,119.1,1819.4,109.2]],0,\n   [0,"#ff0000"]],\n  [1,\n   [0,[0,1733.6,3257.52],[0,1733.49,3254.02],[0,1743.59,3257.2],\n    [0,1733.71,3261.02]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,265.56,3303.7],[1,572.42,3294.04,1431.9,3267.01,1733.6,3257.52]],\n   0,[0,"#0000ff"]],\n  [1,\n   [0,[0,1769.4,3270.6],[0,1768.63,3267.19],[0,1779.16,3268.4],\n    [0,1770.17,3274.01]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,\n   [0,[0,858.61,3367.91],[1,1008,3362.76,1271.3,3350.18,1495,3321.17],\n    [1,1590.7,3308.76,1699.9,3286.1,1769.4,3270.6]],\n   0,[0,"#0000ff"]],\n  [1,\n   [0,[0,1193.9,114.9],[0,1193.66,111.408],[0,1203.88,114.222],\n    [0,1194.14,118.392]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,761.24,141.8],[1,830.72,137.5,1047.8,124,1193.9,114.9]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1214.8,173.6],[0,1215,170.106],[0,1224.78,174.182],\n    [0,1214.6,177.094]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,761.24,144.6],[1,834.12,149.2,1069.4,164.3,1214.8,173.6]],0,\n   [0,"#0000ff"]],\n  [1,[0,[0,706.75,143.2],[0,706.75,139.7],[0,716.75,143.2],[0,706.75,146.7]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,234.06,143.2],[1,364.02,143.2,617.28,143.2,706.75,143.2]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1730.5,633.1],[0,1730.43,629.601],[0,1740.5,632.904],\n    [0,1730.57,636.599]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,297.21,658.6],[1,626.54,652.8,1435.9,638.4,1730.5,633.1]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1731.6,627.7],[0,1731.7,624.202],[0,1741.6,627.997],\n    [0,1731.5,631.198]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,870.44,600.4],[1,1090.2,607.3,1528.2,621.3,1731.6,627.7]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1232.6,1865.6],[0,1233.01,1862.12],[0,1242.53,1866.78],\n    [0,1232.19,1869.08]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,251.48,1754.1],[1,471.39,1779.1,1008.1,1840.1,1232.6,1865.6]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1215.1,1710.8],[0,1215,1707.3],[0,1225.1,1710.51],[0,1215.2,1714.3]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,274.26,1739.5],[1,500.42,1732.6,989.15,1717.7,1215.1,1710.8]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1165.7,1805.9],[0,1165.63,1802.4],[0,1175.7,1805.7],\n    [0,1165.77,1809.4]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,299.27,1825],[1,518.19,1820.2,933.33,1811,1165.7,1805.9]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1216,1872.3],[0,1216.14,1868.8],[0,1225.99,1872.69],\n    [0,1215.86,1875.8]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,294,1834],[1,528.11,1843.7,996.91,1863.2,1216,1872.3]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1163.8,1970.7],[0,1163.87,1967.2],[0,1173.8,1970.9],\n    [0,1163.73,1974.2]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,300.75,1958.3],[1,519.45,1961.4,931.55,1967.4,1163.8,1970.7]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1220.8,1884.8],[0,1220.56,1881.31],[0,1230.78,1884.12],\n    [0,1221.04,1888.29]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,283.7,1947.6],[1,515.75,1932,1000.55,1899.5,1220.8,1884.8]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1723.3,2666.6],[0,1723.16,2663.1],[0,1733.29,2666.2],\n    [0,1723.44,2670.1]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,809.13,2701.5],[1,993.71,2694.5,1494.5,2675.4,1723.3,2666.6]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1732.3,2824.2],[0,1732.71,2820.72],[0,1742.23,2825.37],\n    [0,1731.89,2827.68]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,802.95,2711.9],[1,984.66,2733.8,1505.4,2796.8,1732.3,2824.2]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1701.2,2837.2],[0,1701.2,2833.7],[0,1711.2,2837.2],\n    [0,1701.2,2840.7]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,829.57,2837.2],[1,1021.9,2837.2,1472.3,2837.2,1701.2,2837.2]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1747.4,2992.88],[0,1747.93,2989.42],[0,1757.28,2994.4],\n    [0,1746.87,2996.34]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,810.81,2848.3],[1,1003.63,2878,1532.6,2959.7,1747.4,2992.88]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1751.1,2676.3],[0,1750.54,2672.84],[0,1760.97,2674.7],\n    [0,1751.66,2679.76]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,809.97,2825.9],[1,1003.19,2795.2,1538.4,2710.1,1751.1,2676.3]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1752,2572.3],[0,1751.96,2568.8],[0,1762,2572.2],[0,1752.04,2575.8]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,838.16,2583.9],[1,1051.2,2581.2,1549.4,2574.9,1752,2572.3]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1728.7,2654.4],[0,1728.94,2650.91],[0,1738.68,2655.08],\n    [0,1728.46,2657.89]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,831.45,2591.6],[1,1033,2605.7,1511.2,2639.2,1728.7,2654.4]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,2261.7,2428.4],[0,2261.53,2424.9],[0,2271.69,2427.91],\n    [0,2261.87,2431.9]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,823.33,2500.9],[1,1097.2,2487.1,1961.2,2443.6,2261.7,2428.4]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1747.7,2648.7],[0,1748.21,2645.24],[0,1757.59,2650.17],\n    [0,1747.19,2652.16]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,\n   [0,[0,810.94,2515.3],[1,945.34,2534.2,1243.7,2576.2,1495,2612.2],\n    [1,1580.7,2624.4,1678.2,2638.6,1747.7,2648.7]],\n   0,[0,"#0000ff"]],\n  [1,\n   [0,[0,1751.6,2853.2],[0,1750.97,2849.76],[0,1761.44,2851.41],\n    [0,1752.23,2856.64]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,792.48,3027.46],[1,968.7,2995.45,1532.4,2893.1,1751.6,2853.2]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,1778.9,3235.95],[0,1779.88,3232.59],[0,1788.5,3238.75],\n    [0,1777.92,3239.31]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,\n   [0,[0,796.74,3044.78],[1,923.72,3061.92,1236.5,3106.48,1495,3162.17],\n    [1,1595.4,3183.8,1710.2,3215.94,1778.9,3235.95]],\n   0,[0,"#0000ff"]],\n  [1,\n   [0,[0,1733.9,3250.47],[0,1734.04,3246.97],[0,1743.89,3250.86],\n    [0,1733.76,3253.97]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,\n   [0,[0,794.69,3168.66],[1,877.15,3180.92,1036.6,3203.51,1173,3216.17],\n    [1,1370.7,3234.53,1602.2,3245.33,1733.9,3250.47]],\n   0,[0,"#0000ff"]],\n  [1,\n   [0,[0,1743.2,3020.62],[0,1742.72,3017.15],[0,1753.11,3019.25],\n    [0,1743.68,3024.09]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,795.88,3152.27],[1,973.57,3127.58,1519.8,3051.67,1743.2,3020.62]],\n   0,[0,"#0000ff"]],\n  [1,\n   [0,[0,2295.7,2406.6],[0,2296.5,2403.19],[0,2305.44,2408.88],\n    [0,2294.9,2410.01]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,\n   [0,[0,1391.1,2191.1],[1,1465,2209,1597.5,2241.1,1711,2268.2],\n    [1,1923.8,2319,2175.7,2378.4,2295.7,2406.6]],\n   0,[0,"#0000ff"]],\n  [1,\n   [0,[0,2285.7,2328],[0,2286.57,2324.61],[0,2295.38,2330.49],\n    [0,2284.83,2331.39]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,\n   [0,[0,1421.5,2173.6],[1,1545,2170.5,1777,2171.9,1969,2214.2],\n    [1,2069.8,2236.3,2087,2267,2185,2299.2],\n    [1,2217.6,2309.9,2254.1,2319.9,2285.7,2328]],\n   0,[0,"#0000ff"]],\n  [1,\n   [0,[0,2256.4,2059.2],[0,2255.96,2055.73],[0,2266.32,2057.94],\n    [0,2256.84,2062.67]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,1409.5,2167.5],[1,1589.7,2144.5,2045.9,2086.1,2256.4,2059.2]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,2260.5,2418.7],[0,2260.64,2415.2],[0,2270.49,2419.1],\n    [0,2260.36,2422.2]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,1422.9,2383],[1,1612.7,2391.1,2056.8,2410,2260.5,2418.7]],0,\n   [0,"#0000ff"]],\n  [1,\n   [0,[0,2182.7,2352.9],[0,2182.56,2349.4],[0,2192.69,2352.5],\n    [0,2182.84,2356.4]],\n   [0,"#0000ff"],[0,"#0000ff"]],\n  [0,[0,[0,1423.8,2376.4],[1,1592.5,2371.2,1959.7,2359.8,2182.7,2352.9]],0,\n   [0,"#0000ff"]]]]\n');
   caml_fs_init();
   caml_register_global(0, [248, cst_Out_of_memory, -1], cst_Out_of_memory);
   caml_register_global(1, [248, cst_Sys_error, -2], cst_Sys_error);
   caml_register_global(2, [248, cst_Failure, -3], cst_Failure);
   caml_register_global
    (3, [248, cst_Invalid_argument, -4], cst_Invalid_argument);
   caml_register_global(4, [248, cst_End_of_file, -5], cst_End_of_file);
   caml_register_global
    (5, [248, cst_Division_by_zero, -6], cst_Division_by_zero);
   caml_register_global(6, [248, cst_Not_found, -7], cst_Not_found);
   caml_register_global(7, [248, cst_Match_failure, -8], cst_Match_failure);
   caml_register_global(8, [248, cst_Stack_overflow, -9], cst_Stack_overflow);
   caml_register_global(9, [248, cst_Sys_blocked_io, -10], cst_Sys_blocked_io);
   caml_register_global
    (10, [248, cst_Assert_failure, -11], cst_Assert_failure);
   caml_register_global
    (11,
     [248, cst_Undefined_recursive_module, -12],
     cst_Undefined_recursive_module);
   return;
  }
  (globalThis));

(function(a){"use strict";var
dO="caml_unix_stat_64",dN="unix_lseek",dM=133,l="caml_unix_inchannel_of_filedescr",dL="caml_unix_stat",a$=102,cn=114,co="Stdlib__Type",dK="caml_unix_write_bigarray",fc="caml_nativeint_format",a_="caml_int64_of_nativeint",fb="Stdlib__Buffer",dJ="caml_unix_closedir",dH="Js_of_ocaml__Dom_svg",dI="Stdlib__Out_channel",fa="Match_failure",a9="caml_unix_getgrnam",a8="Stdlib__Gc",cm="caml_unix_truncate",cl="caml_unix_getcwd",dG="Js_of_ocaml_lwt",e_="caml_unix_readlink",e$="caml_floatarray_set",a7="Lwt_pqueue",e9="Stdlib__Unit",a6="caml_fill_bytes",a5="unix_error_message",e8=136,cj="Jsoo_runtime__Runtime_version",ck="win_inchannel_of_filedescr",ci="Stdlib__Map",a4="caml_unix_time",ch="caml_unix_write",dE="Stdlib__Parsing",dF="unix_lstat",e7="unix_open",a3="Stdlib__Effect",dD="Lwt",dC="unix_rename",cg=108,a2="Stdlib__String",e6="caml_unix_chmod",a1="unix_access",aZ="caml_unix_lseek",a0="unix_fsync",dB="caml_unix_findnext",aY="Stdlib__BytesLabels",aX="caml_weak_get_copy",h="caml_array_set",dz="Stdlib__Condition",dA="caml_unix_opendir",e5="caml_unix_lookup_file",aW="caml_unix_getegid",dy="Stdlib__Filename",aV="Stdlib__In_channel",dx="Not_found",e4="caml_unix_getgid",dw="Lwt_switch",aU="CamlinternalLazy",cf="caml_js_from_nativeint",aS="caml_unix_gmtime",aT="caml_signbit_float",ce="Division_by_zero",cd="Js_of_ocaml__Effect_js",e3="caml_unix_close",aR=117,e2="caml_js_from_int32",cc=104,e0="Js_of_ocaml__",e1="caml_int64_to_int",ca="Stdlib__Either",cb="caml_check_bound_gen",eZ="Dune__exe__Scene",dv="Deriving_Json_lexer",b$=109,b_="Js_of_ocaml__MutationObserver",p="caml_format_int",du="unix_link",b9="unix_mkdir",aP="unix_rewinddir",aQ="unix_read",b8="Js_of_ocaml__Json",dt="Stdlib__Callback",aO="Stdlib__Lexing",b7="Undefined_recursive_module",ds="Stdlib__Printf",eY=111,aN="Stdlib__Bool",dq="Stdlib__Int",dr="caml_unix_unlink",aM="unix_getgid",dp="caml_unix_error_message",dn="Stdlib__MoreLabels",aK=103,aL=127,dm="Sys_error",eX="caml_unix_findclose",aJ=100,b6="Js_of_ocaml__Dom_events",eW="Stdlib__Digest",aI="caml_unix_lseek_64",eV="caml_array_get_float",b5="win_outchannel_of_filedescr",dk=101,dl="caml_unix_fstat",b3="Js_of_ocaml__PerformanceObserver",b4="caml_unix_geteuid",dj="unix_lstat_64",aH="unix_inchannel_of_filedescr",b0="Lwt_condition",b1="Lwt_stream",b2="Stdlib__Queue",eU=110,bY="Js_of_ocaml_lwt__Lwt_file",bZ="Stdlib__Set",eT="Stdlib__Stack",bW="unix_getpwnam",bX="unix_geteuid",eS="Js_of_ocaml__File",aG="caml_unix_getuid",dh="Stdlib__Complex",di="caml_unix_utimes",eQ="caml_unix_getpwuid",eR="unix_getpwuid",aF="Jsoo_runtime__",o="caml_check_bound",eP="unix_ftruncate_64",aE="unix_isatty",bV="caml_unix_times",df="Jsoo_runtime",dg="caml_unix_exit",eN=130,eO="unix_exit",aC="Js_of_ocaml__WebSockets",aD="Stdlib__Nativeint",eM=128,aB="caml_unix_single_write",bU="caml_ephe_blit_key",de="caml_nativeint_of_string",az=113,aA="unix_write",dc="caml_unix_ftruncate_64",dd="unix_close",eL="caml_js_to_int32",ay="Lwt_mutex",k="caml_sys_getcwd",da="Sys_blocked_io",db="caml_unix_readdir",ax="Stdlib__Random",eK="Js_of_ocaml__ResizeObserver",aw=135,bT="win_findclose",eJ="Js_of_ocaml",bS="Deriving_Json",au=106,av="Stdlib__Marshal",as="Js_of_ocaml__Console",at="%int_mul",c$="caml_int32_format",eI=140,ar="Dune__exe__Viewer_common",eH="caml_weak_blit",c9="caml_unix_localtime",c_="unix_times",eG="caml_array_set_addr",bR="Stdlib__Ephemeron",c8="caml_unix_inet_addr_of_string",eF="unix_ftruncate",aq="CamlinternalMod",c7="caml_weak_check",eE="caml_unix_symlink",ap="unix_outchannel_of_filedescr",eD="Js_of_ocaml_lwt__Import",ao="Js_of_ocaml__Js",an="Js_of_ocaml__Url",eC="Stdlib__Fun",am="caml_unix_has_symlink",eB="Stdlib__Char",c6=125,c5="unix_mktime",s="caml_int64_to_int32",bP="Js_of_ocaml_lwt__Lwt_js_events",bQ="unix_fstat",c4="Lwt_sequence",eA="caml_unix_link",al="caml_unix_fchmod",bN=138,bO=116,ez=126,bM="unix_symlink",ak="unix_localtime",ey="unix_chdir",aj="unix_getgrgid",ai="caml_int32_compare",ex="CamlinternalFormatBasics",ah="caml_unix_mkdir",bL="Dune__exe",c3="Stdlib__Weak",bK=105,c2="Stdlib__Format",ew="Stdlib__StdLabels",ev="win_startup",bJ="Dune__exe__Viewer_js",c1="Stdlib__Int64",eu="caml_int32_bswap",ag="caml_weak_get",bI="Js_of_ocaml__Dom_html",et="unix_readlink",af="Stdlib__ArrayLabels",ae="caml_unix_rmdir",bH=129,e="caml_array_get",bG="Stdlib__Bigarray",ad="caml_unix_lstat_64",bF=137,ac="unix_inet_addr_of_string",bD=132,bE="caml_unix_gettimeofday",r="caml_unix_outchannel_of_filedescr",bC="unix_stat",c0="caml_unix_chdir",aa="unix_closedir",ab="win_cleanup",bB="caml_nativeint_bswap",Z="caml_unix_mktime",_="caml_ephe_get_key",$="%int_mod",bA="unix_stat_64",cX="Js_of_ocaml__IntersectionObserver",cY="unix_getegid",cZ="caml_unix_access",cW="caml_unix_isatty",X=115,Y="caml_int32_mul",cU=131,cV="caml_nativeint_compare",q="caml_int64_of_int32",eq=122,er="Stdlib",es="Stdlib__StringLabels",V="Stdlib__Atomic",W="caml_unix_fsync",ep="win_findnext",U="Stdlib__ListLabels",T="caml_nativeint_mul",cT="Stdlib__Seq",eo="unix_single_write",S="caml_int32_mod",n="caml_js_from_float",cS="unix_truncate_64",en="Js_of_ocaml__CSS",R=134,cR="caml_ephe_check_key",cQ="Js_of_ocaml__XmlHttpRequest",em="unix_opendir",cP="Js_of_ocaml_lwt__",bz="caml_array_set_float",Q="Stdlib__Uchar",cO="Stdlib__Arg",el="caml_ephe_get_key_copy",P="unix_getuid",d="caml_mul",O="Lwt_seq",cN="Js_of_ocaml__Form",cM="Stdlib__Scanf",cL="Lwt_list",ek=112,N="caml_fill_string",g="caml_div",cK="caml_int64_of_int",ej="caml_unix_read_bigarray",M="unix_getgrnam",ei="Js_of_ocaml__Intl",eh="win_findfirst",by=107,eg="caml_unix_startup",bx="Stdlib__Printexc",bw="caml_unix_filedescr_of_fd",ef="caml_unix_ftruncate",cJ="Deriving_Json_import",f="caml_mod",L="Js_of_ocaml__Sys_js",ee="Js_of_ocaml__Import",cI="caml_check_bound_float",bu="unix_utimes",bv="caml_unix_getgrgid",cH="Js_of_ocaml__Geolocation",ed="caml_int64_to_nativeint",bt="unix_time",ec="unix_fstat_64",K="Js_of_ocaml__Worker",bs="Stdlib__Dynarray",eb="Assert_failure",J="caml_unix_fstat_64",cG="unix_truncate",br="unix_gmtime",bq="caml_unix_cleanup",ea="unix_getcwd",bo=121,bp=118,d$="unix_readdir",bn=120,cF="Stdlib__Array",I="Js_of_ocaml__EventSource",bm="Lwt_result",cE="Stdlib__Obj",j="caml_sys_exit",H="caml_channel_descriptor",d_="Stdlib__Hashtbl",bl="unix_lseek_64",d8="Stdlib__Domain",d9="Stdlib__Option",d7=124,d6="Std_exit",t="caml_int_compare",G="caml_array_get_addr",d4="unix_chmod",d5="caml_unix_lstat",cC="Invalid_argument",cD="Stack_overflow",bk="Js_of_ocaml_lwt__Lwt_js",d3="caml_js_to_nativeint",F="caml_int32_div",cA="End_of_file",cB="caml_unix_findfirst",E="caml_unix_truncate_64",D="caml_unix_rewinddir",C="unix_has_symlink",m="caml_int_of_string",cz="Js_of_ocaml__WebGL",d2="Failure",d1="caml_unix_rename",bj="win_filedescr_of_channel",A="Js_of_ocaml__Jstable",B="unix_gettimeofday",dZ="Stdlib__Lazy",d0="win_handle_fd",b="caml_unix_getpwnam",bh="Js_of_ocaml_lwt__Lwt_jsonp",bi="Stdlib__Semaphore",cy="Out_of_memory",z="Js_of_ocaml__Lib_version",y="Js_of_ocaml__Regexp",cx="Js_of_ocaml__Dom",x="Stdlib__Bytes",bg="Stdlib__Sys",cw="caml_int32_of_string",dY="caml_nativeint_mod",dX="CamlinternalOO",cv="Stdlib__Int32",dW="Stdlib__Oo",be="Js_of_ocaml_lwt__Lwt_xmlHttpRequest",bf=123,bd="Lwt_mvar",cu="Lwt_pool",dU=119,dV="Stdlib__Mutex",w="unix_rmdir",bc="Stdlib__List",cr=139,cs="caml_unix_read",ct="unix_read_bigarray",dT="caml_floatarray_get",v="unix_unlink",bb="caml_unix_open",dS="Stdlib__Float",dR="caml_signbit",u="unix_fchmod",ba="caml_nativeint_div",cq="CamlinternalFormat",dQ="%int_div",dP="Js_of_ocaml__Typed_array",cp="Stdlib__Result",i=a.jsoo_runtime,c=i.caml_get_global_data();c.aliases=i.caml_list_of_js_array([[0,cb,o],[0,e1,s],[0,dQ,g],[0,e2,n],[0,eh,cB],[0,ba,g],[0,u,al],[0,M,b],[0,ap,r],[0,cK,q],[0,cf,n],[0,dR,aT],[0,c7,cR],[0,N,a6],[0,v,dr],[0,eF,ef],[0,dT,e],[0,eG,h],[0,P,aG],[0,ct,ej],[0,w,ae],[0,c_,bV],[0,eH,bU],[0,c$,p],[0,e5,dK],[0,bz,h],[0,at,d],[0,em,dA],[0,bT,eX],[0,cw,m],[0,dY,f],[0,cS,E],[0,S,f],[0,aX,el],[0,T,d],[0,eo,aB],[0,dd,e3],[0,a0,W],[0,aA,ch],[0,de,m],[0,a1,cZ],[0,d0,bw],[0,ep,dB],[0,B,bE],[0,bj,H],[0,eO,j],[0,cV,t],[0,Y,d],[0,dg,j],[0,C,am],[0,dC,d1],[0,aE,cW],[0,eP,dc],[0,cY,aW],[0,dF,d5],[0,e7,bb],[0,F,g],[0,eR,b],[0,eQ,b],[0,bA,dO],[0,d3,eL],[0,$,f],[0,bB,eu],[0,bX,b4],[0,bW,b],[0,ab,bq],[0,aa,dJ],[0,ck,l],[0,d4,e6],[0,bC,dL],[0,G,e],[0,aH,l],[0,ac,c8],[0,dj,ad],[0,e$,h],[0,cl,k],[0,b5,r],[0,eV,e],[0,et,e_],[0,ag,_],[0,a9,b],[0,bl,aI],[0,ev,eg],[0,d$,db],[0,aM,e4],[0,dp,a5],[0,ai,t],[0,ea,k],[0,br,aS],[0,a_,q],[0,aj,b],[0,cG,cm],[0,ey,c0],[0,ak,c9],[0,fc,p],[0,ec,J],[0,bM,eE],[0,bt,a4],[0,ed,s],[0,aQ,cs],[0,aP,D],[0,b9,ah],[0,bv,b],[0,du,eA],[0,bu,di],[0,cI,o],[0,bQ,dl],[0,dN,aZ],[0,c5,Z]]);c.prim_count=966;c.symbols=[0,[0,b7,11],[0,dm,10],[0,da,9],[0,c3,61],[0,e9,31],[0,Q,26],[0,co,17],[0,bg,15],[0,es,75],[0,a2,30],[0,ew,77],[0,eT,42],[0,bZ,40],[0,cT,21],[0,bi,47],[0,cM,63],[0,cp,23],[0,ax,59],[0,b2,43],[0,ds,50],[0,bx,52],[0,dE,39],[0,dI,56],[0,d9,22],[0,dW,66],[0,cE,16],[0,aD,37],[0,dV,45],[0,dn,76],[0,av,32],[0,ci,41],[0,U,73],[0,bc,27],[0,aO,38],[0,dZ,20],[0,c1,36],[0,cv,35],[0,dq,28],[0,aV,55],[0,d_,60],[0,a8,54],[0,eC,53],[0,c2,62],[0,dS,34],[0,dy,70],[0,bR,69],[0,ca,14],[0,a3,78],[0,bs,68],[0,d8,48],[0,eW,57],[0,dz,46],[0,dh,71],[0,eB,25],[0,dt,64],[0,aY,74],[0,x,29],[0,fb,44],[0,aN,24],[0,bG,58],[0,V,18],[0,af,72],[0,cF,33],[0,cO,51],[0,er,13],[0,d6,eI],[0,cD,8],[0,cy,7],[0,dx,6],[0,fa,5],[0,dw,X],[0,b1,aR],[0,c4,az],[0,O,bO],[0,bm,bp],[0,a7,dU],[0,cu,bo],[0,bd,eq],[0,ay,bf],[0,cL,bn],[0,b0,d7],[0,dD,cn],[0,cj,80],[0,aF,79],[0,df,81],[0,be,aL],[0,bh,bH],[0,bP,eN],[0,bk,eM],[0,bY,cU],[0,eD,ez],[0,cP,c6],[0,dG,bD],[0,cQ,90],[0,K,91],[0,aC,92],[0,cz,93],[0,an,95],[0,dP,86],[0,L,97],[0,eK,98],[0,y,94],[0,b3,99],[0,b_,aJ],[0,z,96],[0,A,dk],[0,b8,a$],[0,ao,84],[0,ei,eY],[0,cX,eU],[0,ee,83],[0,cH,b$],[0,cN,89],[0,eS,87],[0,I,cg],[0,cd,by],[0,dH,au],[0,bI,88],[0,b6,bK],[0,cx,85],[0,as,cc],[0,en,aK],[0,e0,82],[0,eJ,ek],[0,cC,4],[0,d2,3],[0,cA,2],[0,bJ,cr],[0,ar,bN],[0,eZ,bF],[0,bL,e8],[0,ce,1],[0,dv,R],[0,cJ,dM],[0,bS,aw],[0,dX,65],[0,aq,67],[0,aU,19],[0,ex,12],[0,cq,49],[0,eb,0]];var
fd=[0,bS],fe=[0,dv],ff=[0,0,[0,bJ],cr,0,1],fg=[0,ar],fh=[0,I],fi=[0,cH],fj=[0,dG],fk=[0,bY],fl=[0,bP],fm=[0,b0],fn=[0,bd],fo=[0,0,[0,ay],bf,0,1],fp=[0,a7],fq=[0,O],fr=[0,d6],fs=[0,a3];c.sections=[0,[0,141,[0,[0,[0,[0,[0,[0,[0,0,[0,eb],0,[0,0,[0,cq],49,0,1],2],[0,ex],12,0,3],[0,aU],19,[0,[0,[0,0,[0,aq],67,0,1],[0,dX],65,[0,[0,0,fd,aw,0,1],[0,cJ],dM,[0,0,fe,R,0,1],2],3],[0,ce],1,[0,[0,0,[0,bL],e8,0,1],[0,eZ],bF,[0,[0,0,fg,bN,ff,2],[0,cA],2,0,3],4],5],6],[0,d2],3,[0,[0,[0,0,[0,cC],4,[0,0,[0,eJ],ek,0,1],2],[0,e0],82,[0,0,[0,en],aK,[0,0,[0,as],cc,0,1],2],3],[0,cx],85,[0,[0,[0,0,[0,b6],bK,0,1],[0,bI],88,0,2],[0,dH],au,[0,[0,0,[0,cd],by,[0,0,fh,cg,0,1],2],[0,eS],87,[0,0,[0,cN],89,[0,0,fi,b$,0,1],2],3],4],5],7],[0,ee],83,[0,[0,[0,[0,0,[0,cX],eU,[0,0,[0,ei],eY,0,1],2],[0,ao],84,[0,[0,0,[0,b8],a$,0,1],[0,A],dk,0,2],3],[0,z],96,[0,[0,0,[0,b_],aJ,0,1],[0,b3],99,0,2],4],[0,y],94,[0,[0,0,[0,eK],98,0,1],[0,L],97,0,2],5],8],[0,dP],86,[0,[0,[0,[0,[0,[0,0,[0,an],95,0,1],[0,cz],93,0,2],[0,aC],92,0,3],[0,K],91,[0,[0,[0,0,[0,cQ],90,[0,0,fj,bD,0,1],2],[0,cP],c6,[0,0,[0,eD],ez,[0,0,fk,cU,0,1],2],3],[0,bk],eM,[0,[0,[0,0,fl,eN,0,1],[0,bh],bH,0,2],[0,be],aL,0,3],4],5],[0,df],81,[0,[0,[0,[0,0,[0,aF],79,0,1],[0,cj],80,0,2],[0,dD],cn,[0,[0,[0,0,fm,d7,0,1],[0,cL],bn,[0,fo,fn,eq,0,2],3],[0,cu],bo,[0,[0,0,fp,dU,0,1],[0,bm],bp,[0,0,fq,bO,0,1],2],4],5],[0,c4],az,[0,[0,[0,0,[0,b1],aR,0,1],[0,dw],X,0,2],[0,fa],5,[0,[0,0,[0,dx],6,0,1],[0,cy],7,[0,0,[0,cD],8,[0,0,fr,eI,0,1],2],3],4],6],7],[0,er],13,[0,[0,[0,[0,0,[0,cO],51,0,1],[0,cF],33,[0,0,[0,af],72,0,1],2],[0,V],18,[0,0,[0,bG],58,0,1],3],[0,aN],24,[0,[0,[0,0,[0,fb],44,0,1],[0,x],29,[0,[0,0,[0,aY],74,0,1],[0,dt],64,0,2],3],[0,eB],25,[0,[0,0,[0,dh],71,0,1],[0,dz],46,[0,[0,0,[0,eW],57,0,1],[0,d8],48,[0,0,[0,bs],68,[0,0,fs,78,0,1],2],3],4],5],6],8],9],[0,ca],14,[0,[0,[0,[0,[0,[0,0,[0,bR],69,[0,0,[0,dy],70,0,1],2],[0,dS],34,[0,0,[0,c2],62,0,1],3],[0,eC],53,[0,0,[0,a8],54,[0,[0,0,[0,d_],60,0,1],[0,aV],55,0,2],3],4],[0,dq],28,[0,0,[0,cv],35,[0,0,[0,c1],36,0,1],2],5],[0,dZ],20,[0,[0,[0,0,[0,aO],38,0,1],[0,bc],27,[0,[0,0,[0,U],73,0,1],[0,ci],41,0,2],3],[0,av],32,[0,[0,[0,0,[0,dn],76,0,1],[0,dV],45,0,2],[0,aD],37,0,3],4],6],[0,cE],16,[0,[0,[0,[0,[0,[0,0,[0,dW],66,0,1],[0,d9],22,[0,0,[0,dI],56,0,1],2],[0,dE],39,[0,[0,0,[0,bx],52,0,1],[0,ds],50,0,2],3],[0,b2],43,[0,[0,0,[0,ax],59,0,1],[0,cp],23,[0,[0,0,[0,cM],63,0,1],[0,bi],47,0,2],3],4],[0,cT],21,[0,[0,0,[0,bZ],40,[0,0,[0,eT],42,[0,0,[0,ew],77,0,1],2],3],[0,a2],30,[0,0,[0,es],75,0,1],4],5],[0,bg],15,[0,[0,[0,0,[0,co],17,0,1],[0,Q],26,[0,0,[0,e9],31,[0,0,[0,c3],61,0,1],2],3],[0,da],9,[0,0,[0,dm],10,[0,0,[0,b7],11,0,1],2],4],6],7],10]],0,i.caml_list_of_js_array(["%caml_format_int_special","%direct_int_div","%direct_int_mod","%direct_int_mul","%direct_obj_tag","%int_add","%int_and","%int_asr",dQ,"%int_lsl","%int_lsr",$,at,"%int_neg","%int_or","%int_sub","%int_xor","JsStringReader","MlBytes","MlChanid","MlFakeDevice","MlFakeFd","MlFakeFd_out","MlFakeFile","MlFile","MlInt64","MlMutex","MlNat","MlNodeDevice","MlNodeFd","MlObjectTable","Ml_Bigarray","Ml_Bigarray_c_1_1","UInt8ArrayReader","add_nat","bigstring_of_array_buffer","bigstring_of_typed_array","bigstring_to_array_buffer","bigstring_to_typed_array","blake2b","blit_nat","caml_MD5Final","caml_MD5Init","caml_MD5Transform","caml_MD5Update","caml_abs_float","caml_acos_float","caml_acosh_float","caml_add_float","caml_alloc_dummy","caml_alloc_dummy_float","caml_alloc_dummy_infix","caml_alloc_stack","caml_argv","caml_array_append","caml_array_blit","caml_array_bound_error","caml_array_concat","caml_array_create_float","caml_array_fill",e,G,eV,"caml_array_make","caml_array_of_bytes","caml_array_of_string",h,eG,bz,"caml_array_sub","caml_array_unsafe_get","caml_array_unsafe_get_float","caml_array_unsafe_set","caml_array_unsafe_set_addr","caml_array_unsafe_set_float","caml_asin_float","caml_asinh_float","caml_atan2_float","caml_atan_float","caml_atanh_float","caml_atomic_cas","caml_atomic_exchange","caml_atomic_fetch_add","caml_atomic_load","caml_atomic_make_contended","caml_ba_blit","caml_ba_change_layout","caml_ba_compare","caml_ba_create","caml_ba_create_buffer","caml_ba_create_from","caml_ba_create_unsafe","caml_ba_custom_name","caml_ba_deserialize","caml_ba_dim","caml_ba_dim_1","caml_ba_dim_2","caml_ba_dim_3","caml_ba_fill","caml_ba_from_typed_array","caml_ba_get_1","caml_ba_get_2","caml_ba_get_3","caml_ba_get_generic","caml_ba_get_size","caml_ba_get_size_per_element","caml_ba_hash","caml_ba_init","caml_ba_kind","caml_ba_kind_of_typed_array","caml_ba_layout","caml_ba_map_file","caml_ba_map_file_bytecode","caml_ba_num_dims","caml_ba_reshape","caml_ba_serialize","caml_ba_set_1","caml_ba_set_2","caml_ba_set_3","caml_ba_set_generic","caml_ba_slice","caml_ba_sub","caml_ba_to_typed_array","caml_ba_uint8_get16","caml_ba_uint8_get32","caml_ba_uint8_get64","caml_ba_uint8_set16","caml_ba_uint8_set32","caml_ba_uint8_set64","caml_backtrace_status","caml_bigstring_blit_ba_to_ba","caml_bigstring_blit_ba_to_bytes","caml_bigstring_blit_bytes_to_ba","caml_bigstring_blit_string_to_ba","caml_bigstring_memcmp","caml_blake2_bytes","caml_blake2_create","caml_blake2_final","caml_blake2_string","caml_blake2_update","caml_blit_bytes","caml_blit_string","caml_bswap16","caml_build_symbols","caml_bytes_bound_error","caml_bytes_compare","caml_bytes_equal","caml_bytes_get","caml_bytes_get16","caml_bytes_get32","caml_bytes_get64","caml_bytes_greaterequal","caml_bytes_greaterthan","caml_bytes_lessequal","caml_bytes_lessthan","caml_bytes_notequal","caml_bytes_of_array","caml_bytes_of_jsbytes","caml_bytes_of_string","caml_bytes_of_uint8_array","caml_bytes_of_utf16_jsstring","caml_bytes_set","caml_bytes_set16","caml_bytes_set32","caml_bytes_set64","caml_bytes_unsafe_get","caml_bytes_unsafe_set","caml_call_gen","caml_callback","caml_cbrt_float","caml_ceil_float",H,o,cI,cb,"caml_classify_float","caml_compare","caml_compare_val","caml_compare_val_get_custom","caml_compare_val_number_custom","caml_compare_val_tag","caml_continuation_use_and_update_handler_noexc","caml_continuation_use_noexc","caml_convert_bytes_to_array","caml_convert_raw_backtrace","caml_convert_raw_backtrace_slot","caml_convert_string_to_bytes","caml_copysign_float","caml_cos_float","caml_cosh_float","caml_create_bytes","caml_create_file","caml_create_string","caml_current_dir","caml_custom_event_index","caml_custom_identifier","caml_custom_ops","caml_decompress_input",g,"caml_div_float","caml_domain_dls","caml_domain_dls_compare_and_set","caml_domain_dls_get","caml_domain_dls_set","caml_domain_id","caml_domain_spawn","caml_ephe_blit_data",bU,"caml_ephe_check_data",cR,"caml_ephe_create","caml_ephe_data_offset","caml_ephe_get_data","caml_ephe_get_data_copy",_,el,"caml_ephe_key_offset","caml_ephe_none","caml_ephe_set_data","caml_ephe_set_data_opt","caml_ephe_set_key","caml_ephe_unset_data","caml_ephe_unset_key","caml_eq_float","caml_equal","caml_erf_float","caml_erfc_float","caml_executable_name","caml_exn_with_js_backtrace","caml_exp2_float","caml_exp_float","caml_expm1_float","caml_failwith","caml_fatal_uncaught_exception",a6,N,"caml_final_register","caml_final_register_called_without_value","caml_final_release","caml_finish_formatting","caml_float_compare","caml_float_of_bytes","caml_float_of_int","caml_float_of_string","caml_floatarray_append","caml_floatarray_blit","caml_floatarray_create","caml_floatarray_fill","caml_floatarray_fill_unboxed",dT,"caml_floatarray_make","caml_floatarray_make_unboxed",e$,"caml_floatarray_sub","caml_floatarray_unsafe_get","caml_floatarray_unsafe_set","caml_floor_float","caml_fma_float","caml_fmod_float","caml_format_exception","caml_format_float",p,"caml_fresh_oo_id","caml_frexp_float","caml_fs_init","caml_gc_compaction","caml_gc_counters","caml_gc_full_major","caml_gc_get","caml_gc_major","caml_gc_major_slice","caml_gc_minor","caml_gc_minor_words","caml_gc_quick_stat","caml_gc_set","caml_gc_stat","caml_ge_float","caml_get_cached_method","caml_get_continuation_callstack","caml_get_current_callstack","caml_get_exception_backtrace","caml_get_exception_raw_backtrace","caml_get_global_data","caml_get_minor_free","caml_get_public_method","caml_get_root","caml_global_data","caml_gr_arc_aux","caml_gr_blit_image","caml_gr_clear_graph","caml_gr_close_graph","caml_gr_close_subwindow","caml_gr_create_image","caml_gr_current_x","caml_gr_current_y","caml_gr_display_mode","caml_gr_doc_of_state","caml_gr_draw_arc","caml_gr_draw_char","caml_gr_draw_image","caml_gr_draw_rect","caml_gr_draw_str","caml_gr_draw_string","caml_gr_dump_image","caml_gr_fill_arc","caml_gr_fill_poly","caml_gr_fill_rect","caml_gr_lineto","caml_gr_make_image","caml_gr_moveto","caml_gr_open_graph","caml_gr_open_subwindow","caml_gr_plot","caml_gr_point_color","caml_gr_remember_mode","caml_gr_resize_window","caml_gr_set_color","caml_gr_set_font","caml_gr_set_line_width","caml_gr_set_text_size","caml_gr_set_window_title","caml_gr_sigio_handler","caml_gr_sigio_signal","caml_gr_size_x","caml_gr_size_y","caml_gr_state","caml_gr_state_create","caml_gr_state_get","caml_gr_state_init","caml_gr_state_set","caml_gr_synchronize","caml_gr_text_size","caml_gr_wait_event","caml_gr_window_id","caml_greaterequal","caml_greaterthan","caml_gt_float","caml_hash","caml_hash_mix_bigstring","caml_hash_mix_bytes","caml_hash_mix_bytes_arr","caml_hash_mix_final","caml_hash_mix_float","caml_hash_mix_float16","caml_hash_mix_float32","caml_hash_mix_int","caml_hash_mix_int64","caml_hash_mix_jsbytes","caml_hash_mix_string","caml_hash_nat","caml_hexstring_of_float","caml_hypot_float","caml_input_value","caml_input_value_from_bytes","caml_input_value_from_reader","caml_input_value_to_outside_heap","caml_install_signal_handler","caml_int32_add","caml_int32_and","caml_int32_bits_of_float",eu,ai,F,"caml_int32_float_of_bits",c$,S,Y,"caml_int32_neg","caml_int32_of_float","caml_int32_of_int",cw,"caml_int32_or","caml_int32_shift_left","caml_int32_shift_right","caml_int32_shift_right_unsigned","caml_int32_sub","caml_int32_to_float","caml_int32_to_int","caml_int32_unmarshal","caml_int32_xor","caml_int64_add","caml_int64_and","caml_int64_bits_of_float","caml_int64_bswap","caml_int64_compare","caml_int64_create_lo_hi","caml_int64_create_lo_mi_hi","caml_int64_div","caml_int64_float_of_bits","caml_int64_format","caml_int64_hash","caml_int64_hi32","caml_int64_is_negative","caml_int64_is_zero","caml_int64_lo32","caml_int64_marshal","caml_int64_mod","caml_int64_mul","caml_int64_neg","caml_int64_of_bytes","caml_int64_of_float",cK,q,a_,"caml_int64_of_string","caml_int64_offset","caml_int64_or","caml_int64_shift_left","caml_int64_shift_right","caml_int64_shift_right_unsigned","caml_int64_sub","caml_int64_to_bytes","caml_int64_to_float",e1,s,ed,"caml_int64_ult","caml_int64_unmarshal","caml_int64_xor",t,"caml_int_of_float",m,"caml_invalid_argument","caml_io_buffer_size","caml_is_continuation_tag","caml_is_js","caml_is_ml_bytes","caml_is_ml_string","caml_is_printable","caml_is_special_exception","caml_js_call","caml_js_delete","caml_js_equals","caml_js_error_of_exception","caml_js_error_option_of_exception","caml_js_eval_string","caml_js_expr","caml_js_from_array","caml_js_from_bool",n,e2,cf,"caml_js_from_string","caml_js_fun_call","caml_js_function_arity","caml_js_get","caml_js_get_console","caml_js_html_entities","caml_js_html_escape","caml_js_instanceof","caml_js_meth_call","caml_js_new","caml_js_object","caml_js_pure_expr","caml_js_set","caml_js_strict_equals","caml_js_to_array","caml_js_to_bool","caml_js_to_byte_string","caml_js_to_float",eL,d3,"caml_js_to_string","caml_js_typeof","caml_js_var","caml_js_wrap_callback","caml_js_wrap_callback_arguments","caml_js_wrap_callback_strict","caml_js_wrap_callback_unsafe","caml_js_wrap_meth_callback","caml_js_wrap_meth_callback_arguments","caml_js_wrap_meth_callback_strict","caml_js_wrap_meth_callback_unsafe","caml_jsbytes_of_string","caml_jsoo_flags_effects","caml_jsoo_flags_use_js_string","caml_jsstring_of_string","caml_lazy_make_forward","caml_lazy_read_result","caml_lazy_reset_to_lazy","caml_lazy_update_to_forcing","caml_lazy_update_to_forward","caml_ldexp_float","caml_le_float","caml_lessequal","caml_lessthan","caml_lex_array","caml_lex_engine","caml_list_mount_point","caml_list_of_js_array","caml_list_to_js_array","caml_log10_float","caml_log1p_float","caml_log2_float","caml_log_float","caml_lt_float","caml_lxm_M","caml_lxm_daba","caml_lxm_next","caml_make_float_vect","caml_make_path","caml_make_vect","caml_marshal_constants","caml_marshal_data_size","caml_marshal_header_size","caml_maybe_attach_backtrace","caml_maybe_print_stats","caml_md5_bytes","caml_md5_chan","caml_md5_string","caml_memprof_discard","caml_memprof_start","caml_memprof_stop","caml_method_cache","caml_ml_bytes_content","caml_ml_bytes_length","caml_ml_channel_get","caml_ml_channel_redirect","caml_ml_channel_restore","caml_ml_channel_size","caml_ml_channel_size_64","caml_ml_channels","caml_ml_close_channel","caml_ml_condition_broadcast","caml_ml_condition_new","caml_ml_condition_signal","caml_ml_condition_wait","caml_ml_debug_info_status","caml_ml_domain_cpu_relax","caml_ml_domain_id","caml_ml_domain_index","caml_ml_enable_runtime_warnings","caml_ml_flush","caml_ml_input","caml_ml_input_bigarray","caml_ml_input_block","caml_ml_input_char","caml_ml_input_int","caml_ml_input_scan_line","caml_ml_is_binary_mode","caml_ml_is_buffered","caml_ml_mutex_lock","caml_ml_mutex_new","caml_ml_mutex_try_lock","caml_ml_mutex_unlock","caml_ml_open_descriptor_in","caml_ml_open_descriptor_in_with_flags","caml_ml_open_descriptor_out","caml_ml_open_descriptor_out_with_flags","caml_ml_out_channels_list","caml_ml_output","caml_ml_output_bigarray","caml_ml_output_bytes","caml_ml_output_char","caml_ml_output_int","caml_ml_output_ta","caml_ml_pos_in","caml_ml_pos_in_64","caml_ml_pos_out","caml_ml_pos_out_64","caml_ml_runtime_events_are_active","caml_ml_runtime_events_path","caml_ml_runtime_events_pause","caml_ml_runtime_events_resume","caml_ml_runtime_events_start","caml_ml_runtime_warnings_enabled","caml_ml_seek_in","caml_ml_seek_in_64","caml_ml_seek_out","caml_ml_seek_out_64","caml_ml_set_binary_mode","caml_ml_set_buffered","caml_ml_set_channel_name","caml_ml_set_channel_output","caml_ml_set_channel_refill","caml_ml_string_length",f,"caml_modf_float","caml_mount_autoload",d,"caml_mul_float","caml_named_value","caml_named_values","caml_nativeint_add","caml_nativeint_and",bB,cV,ba,fc,dY,T,"caml_nativeint_neg","caml_nativeint_of_float","caml_nativeint_of_int","caml_nativeint_of_int32",de,"caml_nativeint_or","caml_nativeint_shift_left","caml_nativeint_shift_right","caml_nativeint_shift_right_unsigned","caml_nativeint_sub","caml_nativeint_to_float","caml_nativeint_to_int","caml_nativeint_to_int32","caml_nativeint_unmarshal","caml_nativeint_xor","caml_neg_float","caml_neq_float","caml_new_lex_engine","caml_new_string","caml_nextafter_float","caml_notequal","caml_obj_add_offset","caml_obj_block","caml_obj_compare_and_swap","caml_obj_dup","caml_obj_is_shared","caml_obj_raw_field","caml_obj_reachable_words","caml_obj_set_raw_field","caml_obj_tag","caml_obj_update_tag","caml_obj_with_tag","caml_ojs_new_arr","caml_oo_cache_id","caml_oo_last_id","caml_output_val","caml_output_value","caml_output_value_to_buffer","caml_output_value_to_bytes","caml_output_value_to_string","caml_packFloat16","caml_parse_digit","caml_parse_engine","caml_parse_format","caml_parse_sign_and_base","caml_parser_trace","caml_pos_in","caml_pos_out","caml_power_float","caml_pure_js_expr","caml_raise_constant","caml_raise_end_of_file","caml_raise_no_such_file","caml_raise_nodejs_error","caml_raise_not_found","caml_raise_sys_error","caml_raise_system_error","caml_raise_with_arg","caml_raise_with_args","caml_raise_with_string","caml_raise_zero_divide","caml_raw_backtrace_length","caml_raw_backtrace_next_slot","caml_raw_backtrace_slot","caml_read_file_content","caml_recommended_domain_count","caml_record_backtrace","caml_record_backtrace_env_flag","caml_record_backtrace_runtime_flag","caml_refill","caml_register_global","caml_register_named_value","caml_restore_raw_backtrace","caml_root","caml_round_float","caml_runtime_events_create_cursor","caml_runtime_events_free_cursor","caml_runtime_events_read_poll","caml_runtime_events_user_register","caml_runtime_events_user_resolve","caml_runtime_events_user_write","caml_runtime_parameters","caml_runtime_variant","caml_runtime_warnings","caml_seek_in","caml_seek_out","caml_set_oo_id","caml_set_parser_trace","caml_set_static_env",dR,aT,"caml_sin_float","caml_sinh_float","caml_sqrt_float","caml_str_repeat","caml_strerror","caml_string_bound_error","caml_string_compare","caml_string_concat","caml_string_equal","caml_string_get","caml_string_get16","caml_string_get32","caml_string_get64","caml_string_greaterequal","caml_string_greaterthan","caml_string_hash","caml_string_lessequal","caml_string_lessthan","caml_string_notequal","caml_string_of_array","caml_string_of_bytes","caml_string_of_jsbytes","caml_string_of_jsstring","caml_string_of_uint8_array","caml_string_set","caml_string_unsafe_get","caml_sub_float","caml_sub_uint8_array_to_jsbytes","caml_subarray_to_jsbytes","caml_sys_argv","caml_sys_chdir","caml_sys_close","caml_sys_const_backend_type","caml_sys_const_big_endian","caml_sys_const_int_size","caml_sys_const_max_wosize","caml_sys_const_naked_pointers_checked","caml_sys_const_ostype_cygwin","caml_sys_const_ostype_unix","caml_sys_const_ostype_win32","caml_sys_const_word_size","caml_sys_executable_name",j,"caml_sys_fds","caml_sys_file_exists","caml_sys_get_argv","caml_sys_get_config",k,"caml_sys_getenv","caml_sys_is_directory","caml_sys_is_regular_file","caml_sys_isatty","caml_sys_mkdir","caml_sys_modify_argv","caml_sys_open","caml_sys_open_for_node","caml_sys_random_seed","caml_sys_read_directory","caml_sys_remove","caml_sys_rename","caml_sys_rmdir","caml_sys_system_command","caml_sys_time","caml_sys_time_include_children","caml_sys_unsafe_getenv","caml_tan_float","caml_tanh_float","caml_throw_js_exception","caml_to_js_string","caml_trailing_slash","caml_trampoline","caml_trampoline_return","caml_trunc_float","caml_uint8_array_of_bytes","caml_uint8_array_of_string","caml_uniform_array_append","caml_uniform_array_blit","caml_uniform_array_fill","caml_uniform_array_make","caml_uniform_array_sub",cZ,c0,e6,bq,e3,dJ,dp,dg,al,bw,eX,cB,dB,dl,J,W,ef,dc,cl,aW,b4,e4,bv,a9,b,eQ,bE,aG,aS,am,l,c8,cW,eA,c9,e5,aZ,aI,d5,ad,ah,Z,bb,dA,r,cs,ej,db,e_,d1,D,ae,aB,eg,dL,dO,eE,a4,bV,cm,E,dr,di,ch,dK,"caml_unmount","caml_unpackFloat16","caml_update_dummy",eH,c7,"caml_weak_create",ag,aX,"caml_weak_set","caml_wrap_exception","caml_xdg_defaults","caml_xmlhttprequest_create","caml_zstd_initialize","compare_digits_nat","compare_nat","complement_nat","create_nat","decr_nat","deserialize_nat","div_digit_nat","div_helper","div_nat","fs_node_stats_from_js","fs_node_supported","incr_nat","initialize_nat","is_digit_int","is_digit_normalized","is_digit_odd","is_digit_zero","jsoo_create_file","jsoo_create_file_extern","jsoo_dataview","jsoo_effect_not_supported","jsoo_is_ascii","jsoo_mount_point","jsoo_static_env","jsoo_sys_getenv","jsoo_text_decoder","jsoo_text_decoder_buff","jsoo_text_encoder","jsoo_toplevel_reloc","land_digit_nat","length_nat","lor_digit_nat","lxor_digit_nat","make_unix_err_args","mult_digit_nat","mult_nat","nat_of_array","nth_digit_nat","nth_digit_nat_native","num_digits_nat","num_leading_zero_bits_in_digit","os_type","path_is_absolute","re_match","re_partial_match","re_replacement_text","re_search_backward","re_search_forward","re_string_match","resolve_fs_device","serialize_nat","set_digit_nat","set_digit_nat_native","set_to_zero_nat","shift_left_nat","shift_right_nat","square_nat","sub_nat",a1,ey,d4,dd,aa,"unix_error",a5,eO,u,bQ,ec,a0,eF,eP,ea,cY,bX,aM,aj,M,bW,eR,B,P,br,C,aH,ac,aE,du,ak,dN,bl,dF,dj,b9,c5,e7,em,ap,aQ,ct,d$,et,dC,aP,w,eo,bC,bA,bM,bt,c_,cG,cS,v,bu,aA,ab,bj,bT,eh,ep,d0,ck,b5,ev,"zstd_decompress"]),0];return}(globalThis));

//# 4 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: CamlinternalFormatBasics:[F(2),F(1),F(2)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function erase_rel(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, erase_rel(rest)];
      case 1:
       var rest$0 = param[1]; return [1, erase_rel(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, erase_rel(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, erase_rel(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, erase_rel(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, erase_rel(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, erase_rel(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, erase_rel(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1];
       return [8, ty, erase_rel(rest$7)];
      case 9:
       var rest$8 = param[3], ty1 = param[1];
       return [9, ty1, ty1, erase_rel(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, erase_rel(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, erase_rel(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, erase_rel(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, erase_rel(rest$12)];
      default: var rest$13 = param[1]; return [14, erase_rel(rest$13)];
    }
   }
   function concat_fmtty(fmtty1, fmtty2){
    if(typeof fmtty1 === "number") return fmtty2;
    switch(fmtty1[0]){
      case 0:
       var rest = fmtty1[1]; return [0, concat_fmtty(rest, fmtty2)];
      case 1:
       var rest$0 = fmtty1[1]; return [1, concat_fmtty(rest$0, fmtty2)];
      case 2:
       var rest$1 = fmtty1[1]; return [2, concat_fmtty(rest$1, fmtty2)];
      case 3:
       var rest$2 = fmtty1[1]; return [3, concat_fmtty(rest$2, fmtty2)];
      case 4:
       var rest$3 = fmtty1[1]; return [4, concat_fmtty(rest$3, fmtty2)];
      case 5:
       var rest$4 = fmtty1[1]; return [5, concat_fmtty(rest$4, fmtty2)];
      case 6:
       var rest$5 = fmtty1[1]; return [6, concat_fmtty(rest$5, fmtty2)];
      case 7:
       var rest$6 = fmtty1[1]; return [7, concat_fmtty(rest$6, fmtty2)];
      case 8:
       var rest$7 = fmtty1[2], ty = fmtty1[1];
       return [8, ty, concat_fmtty(rest$7, fmtty2)];
      case 9:
       var rest$8 = fmtty1[3], ty2 = fmtty1[2], ty1 = fmtty1[1];
       return [9, ty1, ty2, concat_fmtty(rest$8, fmtty2)];
      case 10:
       var rest$9 = fmtty1[1]; return [10, concat_fmtty(rest$9, fmtty2)];
      case 11:
       var rest$10 = fmtty1[1]; return [11, concat_fmtty(rest$10, fmtty2)];
      case 12:
       var rest$11 = fmtty1[1]; return [12, concat_fmtty(rest$11, fmtty2)];
      case 13:
       var rest$12 = fmtty1[1]; return [13, concat_fmtty(rest$12, fmtty2)];
      default:
       var rest$13 = fmtty1[1]; return [14, concat_fmtty(rest$13, fmtty2)];
    }
   }
   function concat_fmt(fmt1, fmt2){
    if(typeof fmt1 === "number") return fmt2;
    switch(fmt1[0]){
      case 0:
       var rest = fmt1[1]; return [0, concat_fmt(rest, fmt2)];
      case 1:
       var rest$0 = fmt1[1]; return [1, concat_fmt(rest$0, fmt2)];
      case 2:
       var rest$1 = fmt1[2], pad = fmt1[1];
       return [2, pad, concat_fmt(rest$1, fmt2)];
      case 3:
       var rest$2 = fmt1[2], pad$0 = fmt1[1];
       return [3, pad$0, concat_fmt(rest$2, fmt2)];
      case 4:
       var rest$3 = fmt1[4], prec = fmt1[3], pad$1 = fmt1[2], iconv = fmt1[1];
       return [4, iconv, pad$1, prec, concat_fmt(rest$3, fmt2)];
      case 5:
       var
        rest$4 = fmt1[4],
        prec$0 = fmt1[3],
        pad$2 = fmt1[2],
        iconv$0 = fmt1[1];
       return [5, iconv$0, pad$2, prec$0, concat_fmt(rest$4, fmt2)];
      case 6:
       var
        rest$5 = fmt1[4],
        prec$1 = fmt1[3],
        pad$3 = fmt1[2],
        iconv$1 = fmt1[1];
       return [6, iconv$1, pad$3, prec$1, concat_fmt(rest$5, fmt2)];
      case 7:
       var
        rest$6 = fmt1[4],
        prec$2 = fmt1[3],
        pad$4 = fmt1[2],
        iconv$2 = fmt1[1];
       return [7, iconv$2, pad$4, prec$2, concat_fmt(rest$6, fmt2)];
      case 8:
       var
        rest$7 = fmt1[4],
        prec$3 = fmt1[3],
        pad$5 = fmt1[2],
        fconv = fmt1[1];
       return [8, fconv, pad$5, prec$3, concat_fmt(rest$7, fmt2)];
      case 9:
       var rest$8 = fmt1[2], pad$6 = fmt1[1];
       return [9, pad$6, concat_fmt(rest$8, fmt2)];
      case 10:
       var rest$9 = fmt1[1]; return [10, concat_fmt(rest$9, fmt2)];
      case 11:
       var rest$10 = fmt1[2], str = fmt1[1];
       return [11, str, concat_fmt(rest$10, fmt2)];
      case 12:
       var rest$11 = fmt1[2], chr = fmt1[1];
       return [12, chr, concat_fmt(rest$11, fmt2)];
      case 13:
       var rest$12 = fmt1[3], fmtty = fmt1[2], pad$7 = fmt1[1];
       return [13, pad$7, fmtty, concat_fmt(rest$12, fmt2)];
      case 14:
       var rest$13 = fmt1[3], fmtty$0 = fmt1[2], pad$8 = fmt1[1];
       return [14, pad$8, fmtty$0, concat_fmt(rest$13, fmt2)];
      case 15:
       var rest$14 = fmt1[1]; return [15, concat_fmt(rest$14, fmt2)];
      case 16:
       var rest$15 = fmt1[1]; return [16, concat_fmt(rest$15, fmt2)];
      case 17:
       var rest$16 = fmt1[2], fmting_lit = fmt1[1];
       return [17, fmting_lit, concat_fmt(rest$16, fmt2)];
      case 18:
       var rest$17 = fmt1[2], fmting_gen = fmt1[1];
       return [18, fmting_gen, concat_fmt(rest$17, fmt2)];
      case 19:
       var rest$18 = fmt1[1]; return [19, concat_fmt(rest$18, fmt2)];
      case 20:
       var rest$19 = fmt1[3], char_set = fmt1[2], width_opt = fmt1[1];
       return [20, width_opt, char_set, concat_fmt(rest$19, fmt2)];
      case 21:
       var rest$20 = fmt1[2], counter = fmt1[1];
       return [21, counter, concat_fmt(rest$20, fmt2)];
      case 22:
       var rest$21 = fmt1[1]; return [22, concat_fmt(rest$21, fmt2)];
      case 23:
       var rest$22 = fmt1[2], ign = fmt1[1];
       return [23, ign, concat_fmt(rest$22, fmt2)];
      default:
       var rest$23 = fmt1[3], f = fmt1[2], arity = fmt1[1];
       return [24, arity, f, concat_fmt(rest$23, fmt2)];
    }
   }
   var CamlinternalFormatBasics = [0, concat_fmtty, erase_rel, concat_fmt];
   runtime.caml_register_global
    (0, CamlinternalFormatBasics, "CamlinternalFormatBasics");
   return;
  }
  (globalThis));

//# 180 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib:[F(1),F(1),N,N,N,N,N,N,N,N,N,N,N,N,N,F(2),F(2),F(1)*,N,N,F(1)*,N,N,N,N,N,N,F(2)*,F(1),F(1)*,F(1)*,F(1),F(1)*,F(1),F(1),F(1),F(2),N,N,N,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(3),F(1),F(1),F(2),F(2),F(2),F(4),F(4),F(2),F(2),F(2),F(2),F(1),F(1),F(1),F(1),F(2),F(1),F(1),F(3),F(1),F(1),F(4),F(4),F(2),F(1),F(1),F(1),F(2),F(1),F(1),F(1),F(1),F(2),N,F(1)*,F(2),F(1),F(1),F(1),F(4),F(1),N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_false$0 = "false",
    cst_true$0 = "true",
    caml_atomic_cas = runtime.caml_atomic_cas,
    caml_atomic_load = runtime.caml_atomic_load,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_float_of_string = runtime.caml_float_of_string,
    caml_int_of_string = runtime.caml_int_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_channel_size = runtime.caml_ml_channel_size,
    caml_ml_channel_size_64 = runtime.caml_ml_channel_size_64,
    caml_ml_close_channel = runtime.caml_ml_close_channel,
    caml_ml_flush = runtime.caml_ml_flush,
    caml_ml_input = runtime.caml_ml_input,
    caml_ml_input_char = runtime.caml_ml_input_char,
    caml_ml_open_descriptor_in = runtime.caml_ml_open_descriptor_in,
    caml_ml_open_descriptor_out = runtime.caml_ml_open_descriptor_out,
    caml_ml_output = runtime.caml_ml_output,
    caml_ml_output_bytes = runtime.caml_ml_output_bytes,
    caml_ml_output_char = runtime.caml_ml_output_char,
    caml_ml_set_binary_mode = runtime.caml_ml_set_binary_mode,
    caml_ml_set_channel_name = runtime.caml_ml_set_channel_name,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_concat = runtime.caml_string_concat,
    caml_string_of_bytes = runtime.caml_string_of_bytes,
    caml_sys_open = runtime.caml_sys_open,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    CamlinternalFormatBasics = global_data.CamlinternalFormatBasics,
    Invalid_argument = global_data.Invalid_argument,
    Failure = global_data.Failure,
    Match_failure = global_data.Match_failure,
    Assert_failure = global_data.Assert_failure,
    Not_found = global_data.Not_found,
    Out_of_memory = global_data.Out_of_memory,
    Stack_overflow = global_data.Stack_overflow,
    Sys_error = global_data.Sys_error,
    End_of_file = global_data.End_of_file,
    Division_by_zero = global_data.Division_by_zero,
    Sys_blocked_io = global_data.Sys_blocked_io,
    Undefined_recursive_module = global_data.Undefined_recursive_module;
   function failwith(s){
    throw caml_maybe_attach_backtrace([0, Failure, s], 1);
   }
   function invalid_arg(s){
    throw caml_maybe_attach_backtrace([0, Invalid_argument, s], 1);
   }
   var Exit = [248, "Stdlib.Exit", runtime.caml_fresh_oo_id(0)];
   function min(x, y){return runtime.caml_lessequal(x, y) ? x : y;}
   function max(x, y){return runtime.caml_greaterequal(x, y) ? x : y;}
   function abs(x){return 0 <= x ? x : - x | 0;}
   function lnot(x){return x ^ -1;}
   var
    symbol_concat = caml_string_concat,
    cst_char_of_int = "char_of_int",
    cst_true = cst_true$0,
    cst_false = cst_false$0,
    cst_bool_of_string = "bool_of_string",
    a = [0, 1],
    b = [0, 0];
   function char_of_int(n){
    if(0 <= n && 255 >= n) return n;
    return invalid_arg(cst_char_of_int);
   }
   function string_of_bool(b){return b ? cst_true : cst_false;}
   function bool_of_string(param){
    return param !== cst_false$0
            ? param !== cst_true$0 ? invalid_arg(cst_bool_of_string) : 1
            : 0;
   }
   function bool_of_string_opt(param){
    return param !== cst_false$0 ? param !== cst_true$0 ? 0 : a : b;
   }
   function string_of_int(n){return "" + n;}
   function int_of_string_opt(s){
    try{var a = [0, caml_int_of_string(s)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag === Failure) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function valid_float_lexem(s1){
    var l = caml_ml_string_length(s1), i = 0;
    for(;;){
     if(l <= i) return s1 + ".";
     var match = runtime.caml_string_get(s1, i);
     a:
     {
      if(48 <= match){if(58 <= match) break a;} else if(45 !== match) break a;
      var i$0 = i + 1 | 0;
      i = i$0;
      continue;
     }
     return s1;
    }
   }
   function string_of_float(f){
    return valid_float_lexem(runtime.caml_format_float("%.12g", f));
   }
   function float_of_string_opt(s){
    try{var a = [0, caml_float_of_string(s)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag === Failure) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function symbol(l1, l2){
    if(! l1) return l2;
    var match = l1[2], h1 = l1[1];
    if(! match) return [0, h1, l2];
    var match$0 = match[2], h2 = match[1];
    if(! match$0) return [0, h1, [0, h2, l2]];
    var
     tl = match$0[2],
     h3 = match$0[1],
     block = [0, h3, 24029],
     dst = block,
     offset = 1,
     l1$0 = tl;
    for(;;){
     if(l1$0){
      var match$1 = l1$0[2], h1$0 = l1$0[1];
      if(match$1){
       var match$2 = match$1[2], h2$0 = match$1[1];
       if(match$2){
        var tl$0 = match$2[2], h3$0 = match$2[1], dst$0 = [0, h3$0, 24029];
        dst[offset + 1] = [0, h1$0, [0, h2$0, dst$0]];
        dst = dst$0;
        offset = 1;
        l1$0 = tl$0;
        continue;
       }
       dst[offset + 1] = [0, h1$0, [0, h2$0, l2]];
      }
      else
       dst[offset + 1] = [0, h1$0, l2];
     }
     else
      dst[offset + 1] = l2;
     return [0, h1, [0, h2, block]];
    }
   }
   var
    stdin = caml_ml_open_descriptor_in(0),
    stdout = caml_ml_open_descriptor_out(1),
    stderr = caml_ml_open_descriptor_out(2),
    c = [0, 1, [0, 3, [0, 4, [0, 7, 0]]]],
    d = [0, 1, [0, 3, [0, 4, [0, 6, 0]]]],
    cst_output = "output",
    cst_output_substring = "output_substring",
    e = [0, 0, [0, 7, 0]],
    f = [0, 0, [0, 6, 0]],
    cst_input = "input",
    cst_really_input = "really_input";
   function open_out_gen(mode, perm, name){
    var c = caml_ml_open_descriptor_out(caml_sys_open(name, mode, perm));
    caml_ml_set_channel_name(c, name);
    return c;
   }
   function open_out(name){return open_out_gen(c, 438, name);}
   function open_out_bin(name){return open_out_gen(d, 438, name);}
   function flush_all(param){
    var param$0 = runtime.caml_ml_out_channels_list(0);
    for(;;){
     if(! param$0) return 0;
     var l = param$0[2], a = param$0[1];
     try{caml_ml_flush(a); param$0 = l;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0), tag = exn[1];
      if(tag !== Sys_error) throw caml_maybe_attach_backtrace(exn, 0);
      param$0 = l;
     }
    }
   }
   function output_bytes(oc, s){
    return caml_ml_output_bytes(oc, s, 0, caml_ml_bytes_length(s));
   }
   function output_string(oc, s){
    return caml_ml_output(oc, s, 0, caml_ml_string_length(s));
   }
   function output(oc, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return caml_ml_output_bytes(oc, s, ofs, len);
    return invalid_arg(cst_output);
   }
   function output_substring(oc, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_string_length(s) - len | 0) >= ofs)
     return caml_ml_output(oc, s, ofs, len);
    return invalid_arg(cst_output_substring);
   }
   function output_value(chan, v){
    return runtime.caml_output_value(chan, v, 0);
   }
   function close_out(oc){
    caml_ml_flush(oc);
    return caml_ml_close_channel(oc);
   }
   function close_out_noerr(oc){
    try{caml_ml_flush(oc);}catch(exn){}
    try{var a = caml_ml_close_channel(oc); return a;}catch(exn){return 0;}
   }
   function open_in_gen(mode, perm, name){
    var c = caml_ml_open_descriptor_in(caml_sys_open(name, mode, perm));
    caml_ml_set_channel_name(c, name);
    return c;
   }
   function open_in(name){return open_in_gen(e, 0, name);}
   function open_in_bin(name){return open_in_gen(f, 0, name);}
   function input(ic, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return caml_ml_input(ic, s, ofs, len);
    return invalid_arg(cst_input);
   }
   function unsafe_really_input(ic, s, ofs$1, len$1){
    var ofs = ofs$1, len = len$1;
    for(;;){
     if(0 >= len) return 0;
     var r = caml_ml_input(ic, s, ofs, len);
     if(0 === r) throw caml_maybe_attach_backtrace(End_of_file, 1);
     var len$0 = len - r | 0, ofs$0 = ofs + r | 0;
     ofs = ofs$0;
     len = len$0;
    }
   }
   function really_input(ic, s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return unsafe_really_input(ic, s, ofs, len);
    return invalid_arg(cst_really_input);
   }
   function really_input_string(ic, len){
    var s = caml_create_bytes(len);
    really_input(ic, s, 0, len);
    return caml_string_of_bytes(s);
   }
   function input_line(chan){
    function build_result(buf, pos$1, param$0){
     var pos = pos$1, param = param$0;
     for(;;){
      if(! param) return buf;
      var tl = param[2], hd = param[1], len = caml_ml_bytes_length(hd);
      runtime.caml_blit_bytes(hd, 0, buf, pos - len | 0, len);
      var pos$0 = pos - len | 0;
      pos = pos$0;
      param = tl;
     }
    }
    var accu = 0, len = 0;
    for(;;){
     var n = runtime.caml_ml_input_scan_line(chan);
     if(0 === n){
      if(! accu) throw caml_maybe_attach_backtrace(End_of_file, 1);
      var a = build_result(caml_create_bytes(len), len, accu);
     }
     else{
      if(0 >= n){
       var beg = caml_create_bytes(- n | 0);
       caml_ml_input(chan, beg, 0, - n | 0);
       var len$1 = len - n | 0, accu$0 = [0, beg, accu];
       accu = accu$0;
       len = len$1;
       continue;
      }
      var res = caml_create_bytes(n - 1 | 0);
      caml_ml_input(chan, res, 0, n - 1 | 0);
      caml_ml_input_char(chan);
      if(accu)
       var
        len$0 = (len + n | 0) - 1 | 0,
        a = build_result(caml_create_bytes(len$0), len$0, [0, res, accu]);
      else
       var a = res;
     }
     return caml_string_of_bytes(a);
    }
   }
   function close_in_noerr(ic){
    try{var a = caml_ml_close_channel(ic); return a;}catch(exn){return 0;}
   }
   function print_char(c){return caml_ml_output_char(stdout, c);}
   function print_string(s){return output_string(stdout, s);}
   function print_bytes(s){return output_bytes(stdout, s);}
   function print_int(i){return output_string(stdout, "" + i);}
   function print_float(f){return output_string(stdout, string_of_float(f));}
   function print_endline(s){
    output_string(stdout, s);
    caml_ml_output_char(stdout, 10);
    return caml_ml_flush(stdout);
   }
   function print_newline(param){
    caml_ml_output_char(stdout, 10);
    return caml_ml_flush(stdout);
   }
   function prerr_char(c){return caml_ml_output_char(stderr, c);}
   function prerr_string(s){return output_string(stderr, s);}
   function prerr_bytes(s){return output_bytes(stderr, s);}
   function prerr_int(i){return output_string(stderr, "" + i);}
   function prerr_float(f){return output_string(stderr, string_of_float(f));}
   function prerr_endline(s){
    output_string(stderr, s);
    caml_ml_output_char(stderr, 10);
    return caml_ml_flush(stderr);
   }
   function prerr_newline(param){
    caml_ml_output_char(stderr, 10);
    return caml_ml_flush(stderr);
   }
   function read_line(param){caml_ml_flush(stdout); return input_line(stdin);}
   function read_int(param){return caml_int_of_string(read_line(0));}
   function read_int_opt(param){return int_of_string_opt(read_line(0));}
   function read_float(param){return caml_float_of_string(read_line(0));}
   function read_float_opt(param){return float_of_string_opt(read_line(0));}
   function string_of_format(param){var str = param[2]; return str;}
   function symbol$0(a, param){
    var
     str2 = param[2],
     fmt2 = param[1],
     str1 = a[2],
     fmt1 = a[1],
     s2 = "%," + str2;
    return [0, CamlinternalFormatBasics[3].call(null, fmt1, fmt2), str1 + s2];
   }
   var exit_function = [0, flush_all];
   function at_exit(f){
    for(;;){
     var f_yet_to_run = [0, 1], old_exit = caml_atomic_load(exit_function);
     let f_yet_to_run$0 = f_yet_to_run, old_exit$0 = old_exit;
     var
      new_exit =
        function(param){
         if(caml_atomic_cas(f_yet_to_run$0, 1, 0)) caml_call1(f, 0);
         return caml_call1(old_exit$0, 0);
        },
      success = caml_atomic_cas(exit_function, old_exit, new_exit),
      a = 1 - success;
     if(! a) return a;
    }
   }
   var do_domain_local_at_exit = [0, function(param){return 0;}];
   function do_at_exit(param){
    caml_call1(do_domain_local_at_exit[1], 0);
    return caml_call1(caml_atomic_load(exit_function), 0);
   }
   function exit(retcode){
    do_at_exit(0);
    return runtime.caml_sys_exit(retcode);
   }
   runtime.caml_register_named_value("Pervasives.do_at_exit", do_at_exit);
   var
    Stdlib =
      [0,
       invalid_arg,
       failwith,
       Exit,
       Match_failure,
       Assert_failure,
       Invalid_argument,
       Failure,
       Not_found,
       Out_of_memory,
       Stack_overflow,
       Sys_error,
       End_of_file,
       Division_by_zero,
       Sys_blocked_io,
       Undefined_recursive_module,
       min,
       max,
       abs,
       2147483647,
       -2147483648,
       lnot,
       Infinity,
       -Infinity,
       NaN,
       1.7976931348623157e+308,
       2.2250738585072014e-308,
       2.220446049250313e-16,
       symbol_concat,
       char_of_int,
       string_of_bool,
       bool_of_string_opt,
       bool_of_string,
       string_of_int,
       int_of_string_opt,
       string_of_float,
       float_of_string_opt,
       symbol,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int_opt,
       read_int,
       read_float_opt,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       caml_ml_flush,
       flush_all,
       caml_ml_output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       caml_ml_output_char,
       runtime.caml_ml_output_int,
       output_value,
       runtime.caml_ml_seek_out,
       runtime.caml_ml_pos_out,
       caml_ml_channel_size,
       close_out,
       close_out_noerr,
       caml_ml_set_binary_mode,
       open_in,
       open_in_bin,
       open_in_gen,
       caml_ml_input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       caml_ml_input_char,
       runtime.caml_ml_input_int,
       runtime.caml_input_value,
       runtime.caml_ml_seek_in,
       runtime.caml_ml_pos_in,
       caml_ml_channel_size,
       caml_ml_close_channel,
       close_in_noerr,
       caml_ml_set_binary_mode,
       [0,
        runtime.caml_ml_seek_out_64,
        runtime.caml_ml_pos_out_64,
        caml_ml_channel_size_64,
        runtime.caml_ml_seek_in_64,
        runtime.caml_ml_pos_in_64,
        caml_ml_channel_size_64],
       string_of_format,
       symbol$0,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit,
       do_domain_local_at_exit];
   runtime.caml_register_global(45, Stdlib, "Stdlib");
   return;
  }
  (globalThis));

//# 756 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Sys:[N,F(1),N,N,[N],N,N,N,N,N,N,N,N,N,F(2)*,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1)*,N,N,N,F(1),F(1),[F(2)*]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    ocaml_version = "5.3.0",
    ocaml_release = [0, 5, 3, 0, 0],
    Stdlib = global_data.Stdlib,
    executable_name = runtime.caml_sys_executable_name(0),
    os_type = runtime.caml_sys_get_config(0)[1],
    backend_type = [0, "js_of_ocaml"],
    unix = runtime.caml_sys_const_ostype_unix(0),
    win32 = runtime.caml_sys_const_ostype_win32(0),
    cygwin = runtime.caml_sys_const_ostype_cygwin(0),
    max_array_length = runtime.caml_sys_const_max_wosize(0),
    max_floatarray_length = max_array_length / 2 | 0,
    max_string_length = (4 * max_array_length | 0) - 1 | 0;
   function getenv_opt(s){
    try{var a = [0, runtime.caml_sys_getenv(s)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var interactive = [0, 0];
   function set_signal(sig_num, sig_beh){return 0;}
   var Break = [248, "Stdlib.Sys.Break", runtime.caml_fresh_oo_id(0)];
   function catch_break(on){return on ? 0 : 0;}
   function Make(Immediate, Non_immediate){return [0, 1];}
   var
    Immediate64 = [0, Make],
    Stdlib_Sys =
      [0,
       executable_name,
       getenv_opt,
       interactive,
       os_type,
       backend_type,
       unix,
       win32,
       cygwin,
       32,
       32,
       0,
       max_string_length,
       max_array_length,
       max_floatarray_length,
       set_signal,
       -1,
       -2,
       -3,
       -4,
       -5,
       -6,
       -7,
       -8,
       -9,
       -10,
       -11,
       -12,
       -13,
       -14,
       -15,
       -16,
       -17,
       -18,
       -19,
       -20,
       -21,
       -22,
       -23,
       -24,
       -25,
       -26,
       -27,
       -28,
       Break,
       catch_break,
       ocaml_version,
       0,
       ocaml_release,
       runtime.caml_ml_enable_runtime_warnings,
       runtime.caml_ml_runtime_warnings_enabled,
       Immediate64];
   runtime.caml_register_global(4, Stdlib_Sys, "Stdlib__Sys");
   return;
  }
  (globalThis));

//# 852 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Obj:[F(1)*,F(2),F(3),N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,[F(1),F(1)*,F(1)*],N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Obj_extension_constructor$1 = "Obj.extension_constructor",
    caml_check_bound = runtime.caml_check_bound,
    caml_obj_tag = runtime.caml_obj_tag,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys;
   function is_block(a){return 1 - (typeof a === "number" ? 1 : 0);}
   function double_field(x, i){return caml_check_bound(x, i)[i + 1];}
   function set_double_field(x, i, v){
    caml_check_bound(x, i)[i + 1] = v;
    return 0;
   }
   var
    cst_Obj_extension_constructor = cst_Obj_extension_constructor$1,
    cst_Obj_extension_constructor$0 = cst_Obj_extension_constructor$1;
   function of_val(x){
    var
     slot =
       is_block(x)
        ? caml_obj_tag(x) !== 248 ? 1 <= x.length - 1 ? x[1] : x : x
        : x;
    a:
    {
     if(is_block(slot) && caml_obj_tag(slot) === 248){var name = slot[1]; break a;}
     var name = Stdlib[1].call(null, cst_Obj_extension_constructor$0);
    }
    return caml_obj_tag(name) === 252
            ? slot
            : Stdlib[1].call(null, cst_Obj_extension_constructor);
   }
   function name(slot){return slot[1];}
   function id(slot){return slot[2];}
   var
    Extension_constructor = [0, of_val, name, id],
    max_ephe_length = Stdlib_Sys[13] - 2 | 0,
    cst_Obj_Ephemeron_create = "Obj.Ephemeron.create",
    cst_Obj_Ephemeron_get_key = "Obj.Ephemeron.get_key",
    cst_Obj_Ephemeron_get_key_copy = "Obj.Ephemeron.get_key_copy",
    cst_Obj_Ephemeron_set_key = "Obj.Ephemeron.set_key",
    cst_Obj_Ephemeron_unset_key = "Obj.Ephemeron.unset_key",
    cst_Obj_Ephemeron_check_key = "Obj.Ephemeron.check_key",
    cst_Obj_Ephemeron_blit_key = "Obj.Ephemeron.blit_key";
   function create(l){
    var a = 0 <= l ? 1 : 0, b = a ? l <= max_ephe_length ? 1 : 0 : a;
    if(1 - b) Stdlib[1].call(null, cst_Obj_Ephemeron_create);
    return runtime.caml_ephe_create(l);
   }
   function length(x){return x.length - 3 | 0;}
   function raise_if_invalid_offset(e, o, msg){
    var a = 0 <= o ? 1 : 0, c = a ? o < length(e) ? 1 : 0 : a, b = 1 - c;
    return b ? Stdlib[1].call(null, msg) : b;
   }
   function get_key(e, o){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_get_key);
    return runtime.caml_ephe_get_key(e, o);
   }
   function get_key_copy(e, o){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_get_key_copy);
    return runtime.caml_ephe_get_key_copy(e, o);
   }
   function set_key(e, o, x){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_set_key);
    return runtime.caml_ephe_set_key(e, o, x);
   }
   function unset_key(e, o){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_unset_key);
    return runtime.caml_ephe_unset_key(e, o);
   }
   function check_key(e, o){
    raise_if_invalid_offset(e, o, cst_Obj_Ephemeron_check_key);
    return runtime.caml_ephe_check_key(e, o);
   }
   function blit_key(e1, o1, e2, o2, l){
    if
     (0 <= l
      &&
       0 <= o1
       && (length(e1) - l | 0) >= o1 && 0 <= o2 && (length(e2) - l | 0) >= o2){
     var
      a = 0 !== l ? 1 : 0,
      b = a ? runtime.caml_ephe_blit_key(e1, o1, e2, o2, l) : a;
     return b;
    }
    return Stdlib[1].call(null, cst_Obj_Ephemeron_blit_key);
   }
   var
    Stdlib_Obj =
      [0,
       is_block,
       double_field,
       set_double_field,
       0,
       243,
       244,
       245,
       246,
       247,
       248,
       249,
       250,
       251,
       251,
       252,
       253,
       254,
       255,
       1000,
       1001,
       1002,
       Extension_constructor,
       [0,
        create,
        length,
        get_key,
        get_key_copy,
        set_key,
        unset_key,
        check_key,
        blit_key,
        runtime.caml_ephe_get_data,
        runtime.caml_ephe_get_data_copy,
        runtime.caml_ephe_set_data,
        runtime.caml_ephe_unset_data,
        runtime.caml_ephe_check_data,
        runtime.caml_ephe_blit_data,
        max_ephe_length]];
   runtime.caml_register_global(11, Stdlib_Obj, "Stdlib__Obj");
   return;
  }
  (globalThis));

//# 1017 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Atomic:[F(1)*,F(1),F(1),F(2),F(2),F(3),F(2),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_atomic_exchange = runtime.caml_atomic_exchange,
    caml_atomic_fetch_add = runtime.caml_atomic_fetch_add;
   function set(r, x){caml_atomic_exchange(r, x); return 0;}
   function incr(r){caml_atomic_fetch_add(r, 1); return 0;}
   function decr(r){caml_atomic_fetch_add(r, -1); return 0;}
   var
    Stdlib_Atomic =
      [0,
       function(a){return [0, a];},
       runtime.caml_atomic_make_contended,
       runtime.caml_atomic_load,
       set,
       caml_atomic_exchange,
       runtime.caml_atomic_cas,
       caml_atomic_fetch_add,
       incr,
       decr];
   runtime.caml_register_global(0, Stdlib_Atomic, "Stdlib__Atomic");
   return;
  }
  (globalThis));

//# 1047 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: CamlinternalLazy:[N,F(1),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_lazy_update_to_forward = runtime.caml_lazy_update_to_forward,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Obj = global_data.Stdlib__Obj,
    Undefined =
      [248, "CamlinternalLazy.Undefined", runtime.caml_fresh_oo_id(0)];
   function force_gen_lazy_block(only_val, blk){
    if(0 !== runtime.caml_lazy_update_to_forcing(blk))
     throw caml_maybe_attach_backtrace(Undefined, 1);
    if(only_val){
     var closure$0 = blk[1];
     blk[1] = 0;
     var result$0 = caml_call1(closure$0, 0);
     blk[1] = result$0;
     caml_lazy_update_to_forward(blk);
     return result$0;
    }
    var closure = blk[1];
    blk[1] = 0;
    try{
     var result = caml_call1(closure, 0);
     blk[1] = result;
     caml_lazy_update_to_forward(blk);
     return result;
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     blk[1] = function(param){throw caml_maybe_attach_backtrace(e, 0);};
     runtime.caml_lazy_reset_to_lazy(blk);
     throw caml_maybe_attach_backtrace(e, 0);
    }
   }
   function force_lazy_block(blk){return force_gen_lazy_block(0, blk);}
   function force_gen(only_val, lzv){
    var t = runtime.caml_obj_tag(lzv);
    if(t === Stdlib_Obj[12]) return lzv[1];
    if(t === Stdlib_Obj[6]) throw caml_maybe_attach_backtrace(Undefined, 1);
    return t !== Stdlib_Obj[8] ? lzv : force_gen_lazy_block(only_val, lzv);
   }
   var CamlinternalLazy = [0, Undefined, force_lazy_block, force_gen];
   runtime.caml_register_global(2, CamlinternalLazy, "CamlinternalLazy");
   return;
  }
  (globalThis));

//# 1107 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Lazy:[N,F(2)*,F(1),F(1),F(2),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, caml_obj_tag = runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Undefined = CamlinternalLazy[1];
   function force_val(l){return CamlinternalLazy[3].call(null, 1, l);}
   function from_fun(f){
    var x = runtime.caml_obj_block(Stdlib_Obj[8], 1);
    x[1] = f;
    return x;
   }
   function from_val(v){
    var t = caml_obj_tag(v);
    if
     (t !== Stdlib_Obj[12]
      && t !== Stdlib_Obj[8] && t !== Stdlib_Obj[6] && t !== Stdlib_Obj[16])
     return v;
    return runtime.caml_lazy_make_forward(v);
   }
   function is_val(l){
    var a = Stdlib_Obj[8];
    return caml_obj_tag(l) !== a ? 1 : 0;
   }
   function map(f, x){
    return [246,
            function(param){
             var a = caml_obj_tag(x);
             a:
             if(250 === a)
              var b = x[1];
             else{
              if(246 !== a && 244 !== a){var b = x; break a;}
              var b = CamlinternalLazy[2].call(null, x);
             }
             return caml_call1(f, b);
            }];
   }
   function map_val(f, x){
    if(! is_val(x))
     return [246,
             function(param){
              var a = caml_obj_tag(x);
              a:
              if(250 === a)
               var b = x[1];
              else{
               if(246 !== a && 244 !== a){var b = x; break a;}
               var b = CamlinternalLazy[2].call(null, x);
              }
              return caml_call1(f, b);
             }];
    var a = caml_obj_tag(x);
    a:
    if(250 === a)
     var b = x[1];
    else{
     if(246 !== a && 244 !== a){var b = x; break a;}
     var b = CamlinternalLazy[2].call(null, x);
    }
    return from_val(caml_call1(f, b));
   }
   var
    Stdlib_Lazy =
      [0, Undefined, map, is_val, from_val, map_val, from_fun, force_val];
   runtime.caml_register_global(2, Stdlib_Lazy, "Stdlib__Lazy");
   return;
  }
  (globalThis));

//# 1188 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Seq:[F(1),F(1),F(1),F(2),F(3),F(2),F(3),F(2),F(2),F(2),F(2),F(2),F(2),F(3),F(4),F(3),F(3),F(3),F(3),F(1)*,F(2)*,F(3)*,F(2),F(3),F(2)*,F(2),F(2),F(2)*->F(1)*,F(3),F(2)*->F(1),F(3),F(3),F(3)*->F(1)*,F(2),F(2),F(3),F(3),F(3),F(1)->F(1),N,F(1)*->F(1),F(2),F(3),F(2),F(3),F(3),F(3),F(4),F(3),F(4),F(2)*,F(3)*->F(1),F(1)*,F(1)*,F(2)*,F(2)*,F(1)*->F(1),F(1)*->F(1),F(2)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Stdlib_Atomic = global_data.Stdlib__Atomic,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib = global_data.Stdlib,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    cst_Seq_init = "Seq.init",
    cst_Seq_take = "Seq.take",
    cst_Seq_drop = "Seq.drop";
   function empty(param){return 0;}
   function return$(x, param){return [0, x, empty];}
   function cons(x, next, param){return [0, x, next];}
   function append(seq1, seq2, param){
    var match = caml_call1(seq1, 0);
    if(! match) return caml_call1(seq2, 0);
    var next = match[2], x = match[1];
    return [0, x, function(a){return append(next, seq2, a);}];
   }
   function map(f, seq, param){
    var match = caml_call1(seq, 0);
    if(! match) return 0;
    var next = match[2], x = match[1];
    return [0, caml_call1(f, x), function(a){return map(f, next, a);}];
   }
   function filter_map(f, seq$0, param){
    var seq = seq$0;
    for(;;){
     var match = caml_call1(seq, 0);
     if(! match) return 0;
     var next = match[2], x = match[1], match$0 = caml_call1(f, x);
     if(match$0) break;
     seq = next;
    }
    var y = match$0[1];
    return [0, y, function(a){return filter_map(f, next, a);}];
   }
   function filter(f, seq$0, param){
    var seq = seq$0;
    for(;;){
     var match = caml_call1(seq, 0);
     if(! match) return 0;
     var next = match[2], x = match[1];
     if(caml_call1(f, x)) break;
     seq = next;
    }
    return [0, x, function(a){return filter(f, next, a);}];
   }
   function concat(seq, param){
    var match = caml_call1(seq, 0);
    if(! match) return 0;
    var next = match[2], x = match[1];
    return append(x, function(a){return concat(next, a);}, 0);
   }
   function flat_map(f, seq, param){
    var match = caml_call1(seq, 0);
    if(! match) return 0;
    var next = match[2], x = match[1];
    return append
            (caml_call1(f, x), function(a){return flat_map(f, next, a);}, 0);
   }
   function fold_left(f, acc$1, seq$0){
    var acc = acc$1, seq = seq$0;
    for(;;){
     var match = caml_call1(seq, 0);
     if(! match) return acc;
     var next = match[2], x = match[1], acc$0 = caml_call2(f, acc, x);
     acc = acc$0;
     seq = next;
    }
   }
   function iter(f, seq$0){
    var seq = seq$0;
    for(;;){
     var match = caml_call1(seq, 0);
     if(! match) return 0;
     var next = match[2], x = match[1];
     caml_call1(f, x);
     seq = next;
    }
   }
   function unfold(f, u, param){
    var match = caml_call1(f, u);
    if(! match) return 0;
    var match$0 = match[1], u$0 = match$0[2], x = match$0[1];
    return [0, x, function(a){return unfold(f, u$0, a);}];
   }
   function is_empty(xs){return caml_call1(xs, 0) ? 0 : 1;}
   function uncons(xs){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1];
    return [0, [0, x, xs$0]];
   }
   function length(xs$1){
    var accu = 0, xs = xs$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return accu;
     var xs$0 = match[2], accu$0 = accu + 1 | 0;
     accu = accu$0;
     xs = xs$0;
    }
   }
   function iteri(f, xs$1){
    var i = 0, xs = xs$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return 0;
     var xs$0 = match[2], x = match[1];
     caml_call2(f, i, x);
     var i$0 = i + 1 | 0;
     i = i$0;
     xs = xs$0;
    }
   }
   function fold_lefti(f, accu$1, xs$1){
    var accu = accu$1, i = 0, xs = xs$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return accu;
     var
      xs$0 = match[2],
      x = match[1],
      accu$0 = caml_call3(f, accu, i, x),
      i$0 = i + 1 | 0;
     accu = accu$0;
     i = i$0;
     xs = xs$0;
    }
   }
   function for_all(p, xs$1){
    var xs = xs$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return 1;
     var xs$0 = match[2], x = match[1], a = caml_call1(p, x);
     if(! a) return a;
     xs = xs$0;
    }
   }
   function exists(p, xs$1){
    var xs = xs$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return 0;
     var xs$0 = match[2], x = match[1], a = caml_call1(p, x);
     if(a) return a;
     xs = xs$0;
    }
   }
   function find(p, xs$1){
    var xs = xs$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return 0;
     var xs$0 = match[2], x = match[1];
     if(caml_call1(p, x)) return [0, x];
     xs = xs$0;
    }
   }
   function find_index(p, xs){
    var i = 0, xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1];
     if(caml_call1(p, x)) return [0, i];
     var i$0 = i + 1 | 0;
     i = i$0;
     xs$0 = xs$1;
    }
   }
   function find_map(f, xs$1){
    var xs = xs$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return 0;
     var xs$0 = match[2], x = match[1], result = caml_call1(f, x);
     if(result) return result;
     xs = xs$0;
    }
   }
   function find_mapi(f, xs){
    var i = 0, xs$0 = xs;
    for(;;){
     var match = caml_call1(xs$0, 0);
     if(! match) return 0;
     var xs$1 = match[2], x = match[1], result = caml_call2(f, i, x);
     if(result) return result;
     var i$0 = i + 1 | 0;
     i = i$0;
     xs$0 = xs$1;
    }
   }
   function iter2(f, xs$1, ys$1){
    var xs = xs$1, ys = ys$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return 0;
     var xs$0 = match[2], x = match[1], match$0 = caml_call1(ys, 0);
     if(! match$0) return 0;
     var ys$0 = match$0[2], y = match$0[1];
     caml_call2(f, x, y);
     xs = xs$0;
     ys = ys$0;
    }
   }
   function fold_left2(f, accu$1, xs$1, ys$1){
    var accu = accu$1, xs = xs$1, ys = ys$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return accu;
     var xs$0 = match[2], x = match[1], match$0 = caml_call1(ys, 0);
     if(! match$0) return accu;
     var
      ys$0 = match$0[2],
      y = match$0[1],
      accu$0 = caml_call3(f, accu, x, y);
     accu = accu$0;
     xs = xs$0;
     ys = ys$0;
    }
   }
   function for_all2(f, xs$1, ys$1){
    var xs = xs$1, ys = ys$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return 1;
     var xs$0 = match[2], x = match[1], match$0 = caml_call1(ys, 0);
     if(! match$0) return 1;
     var ys$0 = match$0[2], y = match$0[1], a = caml_call2(f, x, y);
     if(! a) return a;
     xs = xs$0;
     ys = ys$0;
    }
   }
   function exists2(f, xs$1, ys$1){
    var xs = xs$1, ys = ys$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return 0;
     var xs$0 = match[2], x = match[1], match$0 = caml_call1(ys, 0);
     if(! match$0) return 0;
     var ys$0 = match$0[2], y = match$0[1], a = caml_call2(f, x, y);
     if(a) return a;
     xs = xs$0;
     ys = ys$0;
    }
   }
   function equal(eq, xs$1, ys$1){
    var xs = xs$1, ys = ys$1;
    for(;;){
     var match = caml_call1(xs, 0), match$0 = caml_call1(ys, 0);
     if(match){
      if(match$0){
       var
        ys$0 = match$0[2],
        y = match$0[1],
        xs$0 = match[2],
        x = match[1],
        a = caml_call2(eq, x, y);
       if(! a) return a;
       xs = xs$0;
       ys = ys$0;
       continue;
      }
     }
     else if(! match$0) return 1;
     return 0;
    }
   }
   function compare(cmp, xs$1, ys$1){
    var xs = xs$1, ys = ys$1;
    for(;;){
     var match = caml_call1(xs, 0), match$0 = caml_call1(ys, 0);
     if(! match) return match$0 ? -1 : 0;
     var xs$0 = match[2], x = match[1];
     if(! match$0) return 1;
     var ys$0 = match$0[2], y = match$0[1], c = caml_call2(cmp, x, y);
     if(0 !== c) return c;
     xs = xs$0;
     ys = ys$0;
    }
   }
   function init_aux(f, i, j, param){
    if(i >= j) return 0;
    var a = i + 1 | 0;
    return [0, caml_call1(f, i), function(b){return init_aux(f, a, j, b);}];
   }
   function init(n, f){
    if(0 > n) return Stdlib[1].call(null, cst_Seq_init);
    var a = 0;
    return function(b){return init_aux(f, a, n, b);};
   }
   function repeat(x, param){
    return [0, x, function(a){return repeat(x, a);}];
   }
   function forever(f, param){
    return [0, caml_call1(f, 0), function(a){return forever(f, a);}];
   }
   function cycle_nonempty(xs, param){
    return append(xs, function(a){return cycle_nonempty(xs, a);}, 0);
   }
   function cycle(xs, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1];
    function a(a){return cycle_nonempty(xs, a);}
    return [0, x, function(b){return append(xs$0, a, b);}];
   }
   function iterate1(f, x, param){
    var y = caml_call1(f, x);
    return [0, y, function(a){return iterate1(f, y, a);}];
   }
   function iterate(f, x){
    function next(a){return iterate1(f, x, a);}
    return function(param){return [0, x, next];};
   }
   function mapi_aux(f, i, xs, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1], a = i + 1 | 0;
    return [0,
            caml_call2(f, i, x),
            function(b){return mapi_aux(f, a, xs$0, b);}];
   }
   function mapi(f, xs){
    var a = 0;
    return function(b){return mapi_aux(f, a, xs, b);};
   }
   function tail_scan(f, s, xs, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1], s$0 = caml_call2(f, s, x);
    return [0, s$0, function(a){return tail_scan(f, s$0, xs$0, a);}];
   }
   function scan(f, s, xs){
    function next(a){return tail_scan(f, s, xs, a);}
    return function(param){return [0, s, next];};
   }
   function take_aux(n, xs){
    return 0 === n
            ? empty
            : function
             (param){
              var match = caml_call1(xs, 0);
              if(! match) return 0;
              var xs$0 = match[2], x = match[1];
              return [0, x, take_aux(n - 1 | 0, xs$0)];
             };
   }
   function take(n, xs){
    if(n < 0) Stdlib[1].call(null, cst_Seq_take);
    return take_aux(n, xs);
   }
   function drop(n, xs){
    return 0 <= n
            ? 0
              === n
              ? xs
              : function
               (param){
                var n$0 = n, xs$0 = xs;
                for(;;){
                 var match = caml_call1(xs$0, 0);
                 if(! match) return 0;
                 var xs$1 = match[2], n$1 = n$0 - 1 | 0;
                 if(0 === n$1) return caml_call1(xs$1, 0);
                 n$0 = n$1;
                 xs$0 = xs$1;
                }
               }
            : Stdlib[1].call(null, cst_Seq_drop);
   }
   function take_while(p, xs, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1];
    return caml_call1(p, x)
            ? [0, x, function(a){return take_while(p, xs$0, a);}]
            : 0;
   }
   function drop_while(p, xs$1, param){
    var xs = xs$1;
    for(;;){
     var node = caml_call1(xs, 0);
     if(! node) return 0;
     var xs$0 = node[2], x = node[1];
     if(! caml_call1(p, x)) return node;
     xs = xs$0;
    }
   }
   function group(eq, xs, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1], a = caml_call1(eq, x);
    function b(b){return drop_while(a, xs$0, b);}
    var c = caml_call1(eq, x);
    function next(a){return take_while(c, xs$0, a);}
    return [0,
            function(param){return [0, x, next];},
            function(a){return group(eq, b, a);}];
   }
   var
    Forced_twice =
      [248, "Stdlib.Seq.Forced_twice", runtime.caml_fresh_oo_id(0)],
    to_lazy = Stdlib_Lazy[6],
    b = [0, "seq.ml", 616, 4];
   function failure(param){
    throw caml_maybe_attach_backtrace(Forced_twice, 1);
   }
   function memoize(xs){
    function s$0(param){
     var match = caml_call1(xs, 0);
     if(! match) return 0;
     var xs$0 = match[2], x = match[1];
     return [0, x, memoize(xs$0)];
    }
    var s = to_lazy(s$0);
    return function(param){
     var a = runtime.caml_obj_tag(s);
     if(250 === a) return s[1];
     if(246 !== a && 244 !== a) return s;
     return CamlinternalLazy[2].call(null, s);};
   }
   function once(xs){
    function f(param){
     var match = caml_call1(xs, 0);
     if(! match) return 0;
     var xs$0 = match[2], x = match[1];
     return [0, x, once(xs$0)];
    }
    var action = Stdlib_Atomic[1].call(null, f);
    return function(param){
     var f = Stdlib_Atomic[5].call(null, action, failure);
     return caml_call1(f, 0);};
   }
   function zip(xs, ys, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1], match$0 = caml_call1(ys, 0);
    if(! match$0) return 0;
    var ys$0 = match$0[2], y = match$0[1];
    return [0, [0, x, y], function(a){return zip(xs$0, ys$0, a);}];
   }
   function map2(f, xs, ys, param){
    var match = caml_call1(xs, 0);
    if(! match) return 0;
    var xs$0 = match[2], x = match[1], match$0 = caml_call1(ys, 0);
    if(! match$0) return 0;
    var ys$0 = match$0[2], y = match$0[1];
    return [0,
            caml_call2(f, x, y),
            function(a){return map2(f, xs$0, ys$0, a);}];
   }
   function interleave(xs, ys, param){
    var match = caml_call1(xs, 0);
    if(! match) return caml_call1(ys, 0);
    var xs$0 = match[2], x = match[1];
    return [0, x, function(a){return interleave(ys, xs$0, a);}];
   }
   function sorted_merge1(cmp, x, xs, y, ys){
    return 0 < caml_call2(cmp, x, y)
            ? [0,
              y,
              function(param){
               var match = caml_call1(ys, 0);
               if(! match) return [0, x, xs];
               var ys$0 = match[2], y = match[1];
               return sorted_merge1(cmp, x, xs, y, ys$0);
              }]
            : [0,
              x,
              function(param){
               var match = caml_call1(xs, 0);
               if(! match) return [0, y, ys];
               var xs$0 = match[2], x = match[1];
               return sorted_merge1(cmp, x, xs$0, y, ys);
              }];
   }
   function sorted_merge(cmp, xs, ys, param){
    var match = caml_call1(xs, 0), match$0 = caml_call1(ys, 0);
    if(match){
     if(match$0){
      var ys$0 = match$0[2], y = match$0[1], xs$0 = match[2], x = match[1];
      return sorted_merge1(cmp, x, xs$0, y, ys$0);
     }
     var c = match;
    }
    else{if(! match$0) return 0; var c = match$0;}
    return c;
   }
   function map_fst(xys, param){
    var match = caml_call1(xys, 0);
    if(! match) return 0;
    var xys$0 = match[2], x = match[1][1];
    return [0, x, function(a){return map_fst(xys$0, a);}];
   }
   function map_snd(xys, param){
    var match = caml_call1(xys, 0);
    if(! match) return 0;
    var xys$0 = match[2], y = match[1][2];
    return [0, y, function(a){return map_snd(xys$0, a);}];
   }
   function unzip(xys){
    return [0,
            function(a){return map_fst(xys, a);},
            function(a){return map_snd(xys, a);}];
   }
   function filter_map_find_left_map(f, xs$1, param){
    var xs = xs$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return 0;
     var xs$0 = match[2], x = match[1], match$0 = caml_call1(f, x);
     if(0 === match$0[0]) break;
     xs = xs$0;
    }
    var y = match$0[1];
    return [0, y, function(a){return filter_map_find_left_map(f, xs$0, a);}];
   }
   function filter_map_find_right_map(f, xs$1, param){
    var xs = xs$1;
    for(;;){
     var match = caml_call1(xs, 0);
     if(! match) return 0;
     var xs$0 = match[2], x = match[1], match$0 = caml_call1(f, x);
     if(0 !== match$0[0]) break;
     xs = xs$0;
    }
    var z = match$0[1];
    return [0, z, function(a){return filter_map_find_right_map(f, xs$0, a);}];
   }
   function partition_map(f, xs){
    return [0,
            function(a){return filter_map_find_left_map(f, xs, a);},
            function(a){return filter_map_find_right_map(f, xs, a);}];
   }
   function partition(p, xs){
    function a(x){return 1 - caml_call1(p, x);}
    return [0,
            function(a){return filter(p, xs, a);},
            function(b){return filter(a, xs, b);}];
   }
   function peel(xss){
    return unzip(function(a){return filter_map(uncons, xss, a);});
   }
   function transpose(xss, param){
    var match = peel(xss), tails = match[2], heads = match[1];
    if(! is_empty(heads))
     return [0, heads, function(a){return transpose(tails, a);}];
    if(is_empty(tails)) return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
   }
   function a(remainders, xss, param){
    var match = caml_call1(xss, 0);
    if(! match) return transpose(remainders, 0);
    var xss$0 = match[2], xs = match[1], match$0 = caml_call1(xs, 0);
    if(match$0){
     var
      xs$0 = match$0[2],
      x = match$0[1],
      match$1 = peel(remainders),
      tails = match$1[2],
      heads = match$1[1],
      b = function(param){return [0, xs$0, tails];};
     return [0,
             function(param){return [0, x, heads];},
             function(c){return a(b, xss$0, c);}];
    }
    var
     match$2 = peel(remainders),
     tails$0 = match$2[2],
     heads$0 = match$2[1];
    return [0, heads$0, function(b){return a(tails$0, xss$0, b);}];
   }
   function map_product(f, xs, ys){
    function c(x){
     function a(y){return caml_call2(f, x, y);}
     return function(b){return map(a, ys, b);};
    }
    function xss(a){return map(c, xs, a);}
    function b(b){return a(empty, xss, b);}
    return function(a){return concat(b, a);};
   }
   function product(xs, ys){
    return map_product(function(x, y){return [0, x, y];}, xs, ys);
   }
   function of_dispenser(it){
    function c(param){
     var match = caml_call1(it, 0);
     if(! match) return 0;
     var x = match[1];
     return [0, x, c];
    }
    return c;
   }
   function to_dispenser(xs){
    var s = [0, xs];
    return function(param){
     var match = caml_call1(s[1], 0);
     if(! match) return 0;
     var xs = match[2], x = match[1];
     s[1] = xs;
     return [0, x];};
   }
   function ints(i, param){
    var a = i + 1 | 0;
    return [0, i, function(b){return ints(a, b);}];
   }
   var
    Stdlib_Seq =
      [0,
       is_empty,
       uncons,
       length,
       iter,
       fold_left,
       iteri,
       fold_lefti,
       for_all,
       exists,
       find,
       find_index,
       find_map,
       find_mapi,
       iter2,
       fold_left2,
       for_all2,
       exists2,
       equal,
       compare,
       empty,
       return$,
       cons,
       init,
       unfold,
       repeat,
       forever,
       cycle,
       iterate,
       map,
       mapi,
       filter,
       filter_map,
       scan,
       take,
       drop,
       take_while,
       drop_while,
       group,
       memoize,
       Forced_twice,
       once,
       transpose,
       append,
       concat,
       flat_map,
       flat_map,
       zip,
       map2,
       interleave,
       sorted_merge,
       product,
       map_product,
       unzip,
       unzip,
       partition_map,
       partition,
       of_dispenser,
       to_dispenser,
       ints];
   runtime.caml_register_global(10, Stdlib_Seq, "Stdlib__Seq");
   return;
  }
  (globalThis));

//# 2168 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Char:[F(1),F(1),F(1)*,F(1)*,F(2)*,F(2)*,F(2)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_hash = runtime.caml_hash,
    caml_string_of_bytes = runtime.caml_string_of_bytes,
    global_data = runtime.caml_get_global_data(),
    cst = "\\\\",
    cst$0 = "\\'",
    Stdlib = global_data.Stdlib,
    cst_Char_chr = "Char.chr",
    cst_b = "\\b",
    cst_t = "\\t",
    cst_n = "\\n",
    cst_r = "\\r";
   function chr(n){
    if(0 <= n && 255 >= n) return n;
    return Stdlib[1].call(null, cst_Char_chr);
   }
   function escaped(c){
    a:
    {
     if(40 <= c){
      if(92 === c) return cst;
      if(127 <= c) break a;
     }
     else{
      if(32 > c){
       if(14 <= c) break a;
       switch(c){
         case 8:
          return cst_b;
         case 9:
          return cst_t;
         case 10:
          return cst_n;
         case 13:
          return cst_r;
         default: break a;
       }
      }
      if(39 <= c) return cst$0;
     }
     var s$0 = caml_create_bytes(1);
     caml_bytes_unsafe_set(s$0, 0, c);
     return caml_string_of_bytes(s$0);
    }
    var s = caml_create_bytes(4);
    caml_bytes_unsafe_set(s, 0, 92);
    caml_bytes_unsafe_set(s, 1, 48 + (c / 100 | 0) | 0);
    caml_bytes_unsafe_set(s, 2, 48 + ((c / 10 | 0) % 10 | 0) | 0);
    caml_bytes_unsafe_set(s, 3, 48 + (c % 10 | 0) | 0);
    return caml_string_of_bytes(s);
   }
   function lowercase_ascii(c){return 25 < c - 65 >>> 0 ? c : c + 32 | 0;}
   function uppercase_ascii(c){return 25 < c - 97 >>> 0 ? c : c - 32 | 0;}
   function compare(c1, c2){return c1 - c2 | 0;}
   function equal(c1, c2){return 0 === (c1 - c2 | 0) ? 1 : 0;}
   function seeded_hash(seed, x){return caml_hash(10, 100, seed, x);}
   function hash(x){return caml_hash(10, 100, 0, x);}
   var
    Stdlib_Char =
      [0,
       chr,
       escaped,
       lowercase_ascii,
       uppercase_ascii,
       compare,
       equal,
       seeded_hash,
       hash];
   runtime.caml_register_global(8, Stdlib_Char, "Stdlib__Char");
   return;
  }
  (globalThis));

//# 2250 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Uchar:[N,N,N,N,F(1),F(1),F(1)*,F(1),F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1)*,F(2)*,F(2)*,F(2)*,F(1)*,F(1)*,F(1)*,F(1)*,F(2)*,F(1)*,F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_uchar_ml = "uchar.ml",
    caml_format_int = runtime.caml_format_int,
    caml_hash = runtime.caml_hash,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    global_data = runtime.caml_get_global_data(),
    err_no_pred = "U+0000 has no predecessor",
    err_no_succ = "U+10FFFF has no successor",
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    cst_is_not_a_Unicode_scalar_va = " is not a Unicode scalar value",
    cst_is_not_a_latin1_character = " is not a latin1 character",
    cst_U = "U+",
    lo_bound = 55295,
    hi_bound = 57344;
   function succ(u){
    return u === 55295
            ? hi_bound
            : u === 1114111 ? Stdlib[1].call(null, err_no_succ) : u + 1 | 0;
   }
   function pred(u){
    return u === 57344
            ? lo_bound
            : u === 0 ? Stdlib[1].call(null, err_no_pred) : u - 1 | 0;
   }
   function is_valid(i){
    var a = 0 <= i ? 1 : 0, b = a ? i <= 55295 ? 1 : 0 : a;
    if(b)
     var c = b;
    else
     var d = 57344 <= i ? 1 : 0, c = d ? i <= 1114111 ? 1 : 0 : d;
    return c;
   }
   function of_int(i){
    if(is_valid(i)) return i;
    var
     a =
       Stdlib[28].call
        (null, caml_format_int("%X", i), cst_is_not_a_Unicode_scalar_va);
    return Stdlib[1].call(null, a);
   }
   function is_char(u){return u < 256 ? 1 : 0;}
   function of_char(c){return c;}
   function to_char(u){
    if(255 >= u) return u;
    var
     a =
       Stdlib[28].call
        (null, caml_format_int("%04X", u), cst_is_not_a_latin1_character),
     b = Stdlib[28].call(null, cst_U, a);
    return Stdlib[1].call(null, b);
   }
   function unsafe_to_char(a){return a;}
   function equal(b, a){return b === a ? 1 : 0;}
   var
    compare = runtime.caml_int_compare,
    a = [0, cst_uchar_ml, 89, 7],
    b = [0, cst_uchar_ml, 84, 18],
    c = [0, cst_uchar_ml, 95, 7],
    d = [0, cst_uchar_ml, 92, 18];
   function seeded_hash(seed, x){return caml_hash(10, 100, seed, x);}
   function hash(x){return caml_hash(10, 100, 0, x);}
   function utf_decode_is_valid(d){return 1 === (d >>> 27 | 0) ? 1 : 0;}
   function utf_decode_length(d){return (d >>> 24 | 0) & 7;}
   function utf_decode_uchar(d){return d & 16777215;}
   function utf_decode(n, u){return (8 | n) << 24 | u;}
   function utf_decode_invalid(n){return n << 24 | 65533;}
   function utf_8_byte_length(u){
    if(0 > u) throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
    if(127 >= u) return 1;
    if(2047 >= u) return 2;
    if(65535 >= u) return 3;
    if(1114111 < u)
     throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
    return 4;
   }
   function utf_16_byte_length(u){
    if(0 > u) throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
    if(65535 >= u) return 2;
    if(1114111 < u)
     throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
    return 4;
   }
   var
    Stdlib_Uchar =
      [0,
       0,
       1114111,
       65279,
       65533,
       succ,
       pred,
       is_valid,
       of_int,
       function(a){return a;},
       function(a){return a;},
       is_char,
       of_char,
       to_char,
       unsafe_to_char,
       equal,
       compare,
       seeded_hash,
       hash,
       utf_decode_is_valid,
       utf_decode_uchar,
       utf_decode_length,
       utf_decode,
       utf_decode_invalid,
       utf_8_byte_length,
       utf_16_byte_length];
   runtime.caml_register_global(13, Stdlib_Uchar, "Stdlib__Uchar");
   return;
  }
  (globalThis));

//# 2373 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__List:[F(1),F(2),F(2),F(1)*,F(2)*,F(1),F(1),F(2),F(2),F(1),F(2),F(2),F(2),F(1),F(1),F(3),F(3),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(3),F(3),F(3),F(3),F(3),F(3),F(4),F(4),F(2),F(2),F(3),F(3),F(2),F(2),F(2),F(2),F(1)*->F(1),F(2),F(1)*->F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(1),F(2),F(2),F(2),F(2),F(2),F(3),F(1)*->F(1)*,F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_List_map2$1 = "List.map2",
    cst_List_nth$1 = "List.nth",
    caml_compare = runtime.caml_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    cst_hd = "hd",
    cst_tl = "tl",
    cst_nth = "nth",
    cst_List_nth = cst_List_nth$1,
    cst_List_nth$0 = cst_List_nth$1;
   function length(l$0){
    var len = 0, param = l$0;
    for(;;){
     if(! param) return len;
     var l = param[2], len$0 = len + 1 | 0;
     len = len$0;
     param = l;
    }
   }
   function cons(a, l){return [0, a, l];}
   function hd(param){
    if(! param) return Stdlib[2].call(null, cst_hd);
    var a = param[1];
    return a;
   }
   function tl(param){
    if(! param) return Stdlib[2].call(null, cst_tl);
    var l = param[2];
    return l;
   }
   function nth(l, n){
    if(0 > n) return Stdlib[1].call(null, cst_List_nth);
    var l$0 = l, n$0 = n;
    for(;;){
     if(! l$0) return Stdlib[2].call(null, cst_nth);
     var l$1 = l$0[2], a = l$0[1];
     if(0 === n$0) return a;
     var n$1 = n$0 - 1 | 0;
     l$0 = l$1;
     n$0 = n$1;
    }
   }
   function nth_opt(l, n){
    if(0 > n) return Stdlib[1].call(null, cst_List_nth$0);
    var l$0 = l, n$0 = n;
    for(;;){
     if(! l$0) return 0;
     var l$1 = l$0[2], a = l$0[1];
     if(0 === n$0) return [0, a];
     var n$1 = n$0 - 1 | 0;
     l$0 = l$1;
     n$0 = n$1;
    }
   }
   var
    append = Stdlib[37],
    cst_List_init = "List.init",
    cst_List_map2 = cst_List_map2$1,
    cst_List_map2$0 = cst_List_map2$1,
    cst_List_rev_map2 = "List.rev_map2",
    cst_List_iter2 = "List.iter2",
    cst_List_fold_left2 = "List.fold_left2",
    cst_List_fold_right2 = "List.fold_right2",
    cst_List_for_all2 = "List.for_all2",
    cst_List_exists2 = "List.exists2",
    cst_List_take = "List.take",
    cst_List_drop = "List.drop",
    a = [0, 0, 0],
    cst_List_combine = "List.combine";
   function rev_append(l1$1, l2$1){
    var l1 = l1$1, l2 = l2$1;
    for(;;){
     if(! l1) return l2;
     var l1$0 = l1[2], a = l1[1], l2$0 = [0, a, l2];
     l1 = l1$0;
     l2 = l2$0;
    }
   }
   function rev(l){return rev_append(l, 0);}
   function init(len, f){
    if(0 > len) return Stdlib[1].call(null, cst_List_init);
    var last = len - 1 | 0, i$1 = 0;
    if(last < 0) return 0;
    if(0 === last) return [0, caml_call1(f, i$1), 0];
    var
     r1 = caml_call1(f, i$1),
     r2 = caml_call1(f, 1),
     block = [0, r2, 24029],
     dst = block,
     offset = 1,
     i = 2;
    for(;;){
     if(last < i)
      dst[offset + 1] = 0;
     else{
      if(i !== last){
       var
        r1$0 = caml_call1(f, i),
        r2$0 = caml_call1(f, i + 1 | 0),
        dst$0 = [0, r2$0, 24029];
       dst[offset + 1] = [0, r1$0, dst$0];
       var i$0 = i + 2 | 0;
       dst = dst$0;
       offset = 1;
       i = i$0;
       continue;
      }
      dst[offset + 1] = [0, caml_call1(f, i), 0];
     }
     return [0, r1, block];
    }
   }
   function flatten(param){
    if(! param) return 0;
    var r = param[2], l = param[1], a = flatten(r);
    return Stdlib[37].call(null, l, a);
   }
   function map(f, param){
    if(! param) return 0;
    var match = param[2], a1 = param[1];
    if(! match){var r1$0 = caml_call1(f, a1); return [0, r1$0, 0];}
    var
     l = match[2],
     a2 = match[1],
     r1 = caml_call1(f, a1),
     r2 = caml_call1(f, a2),
     block = [0, r2, 24029],
     dst = block,
     offset = 1,
     param$0 = l;
    for(;;){
     if(param$0){
      var match$0 = param$0[2], a1$0 = param$0[1];
      if(match$0){
       var
        l$0 = match$0[2],
        a2$0 = match$0[1],
        r1$1 = caml_call1(f, a1$0),
        r2$0 = caml_call1(f, a2$0),
        dst$0 = [0, r2$0, 24029];
       dst[offset + 1] = [0, r1$1, dst$0];
       dst = dst$0;
       offset = 1;
       param$0 = l$0;
       continue;
      }
      var r1$2 = caml_call1(f, a1$0);
      dst[offset + 1] = [0, r1$2, 0];
     }
     else
      dst[offset + 1] = 0;
     return [0, r1, block];
    }
   }
   function mapi(f, l$1){
    var i$1 = 0;
    if(! l$1) return 0;
    var match = l$1[2], a1 = l$1[1];
    if(! match){var r1$0 = caml_call2(f, i$1, a1); return [0, r1$0, 0];}
    var
     l = match[2],
     a2 = match[1],
     r1 = caml_call2(f, i$1, a1),
     r2 = caml_call2(f, 1, a2),
     block = [0, r2, 24029],
     dst = block,
     offset = 1,
     i = 2,
     param = l;
    for(;;){
     if(param){
      var match$0 = param[2], a1$0 = param[1];
      if(match$0){
       var
        l$0 = match$0[2],
        a2$0 = match$0[1],
        r1$1 = caml_call2(f, i, a1$0),
        r2$0 = caml_call2(f, i + 1 | 0, a2$0),
        dst$0 = [0, r2$0, 24029];
       dst[offset + 1] = [0, r1$1, dst$0];
       var i$0 = i + 2 | 0;
       dst = dst$0;
       offset = 1;
       i = i$0;
       param = l$0;
       continue;
      }
      var r1$2 = caml_call2(f, i, a1$0);
      dst[offset + 1] = [0, r1$2, 0];
     }
     else
      dst[offset + 1] = 0;
     return [0, r1, block];
    }
   }
   function rev_map(f, l){
    var accu = 0, param = l;
    for(;;){
     if(! param) return accu;
     var l$0 = param[2], a = param[1], accu$0 = [0, caml_call1(f, a), accu];
     accu = accu$0;
     param = l$0;
    }
   }
   function iter(f, param$0){
    var param = param$0;
    for(;;){
     if(! param) return 0;
     var l = param[2], a = param[1];
     caml_call1(f, a);
     param = l;
    }
   }
   function iteri(f, l$0){
    var i = 0, param = l$0;
    for(;;){
     if(! param) return 0;
     var l = param[2], a = param[1];
     caml_call2(f, i, a);
     var i$0 = i + 1 | 0;
     i = i$0;
     param = l;
    }
   }
   function fold_left(f, accu$1, l$1){
    var accu = accu$1, l = l$1;
    for(;;){
     if(! l) return accu;
     var l$0 = l[2], a = l[1], accu$0 = caml_call2(f, accu, a);
     accu = accu$0;
     l = l$0;
    }
   }
   function fold_right(f, l, accu){
    if(! l) return accu;
    var l$0 = l[2], a = l[1];
    return caml_call2(f, a, fold_right(f, l$0, accu));
   }
   function map2(f, l1, l2){
    if(l1){
     var a = l1[2], a1 = l1[1];
     if(a){
      if(l2){
       var match = l2[2];
       if(match){
        var
         l2$0 = match[2],
         b2 = match[1],
         b1 = l2[1],
         l1$0 = a[2],
         a2 = a[1],
         r1 = caml_call2(f, a1, b1),
         r2 = caml_call2(f, a2, b2),
         block = [0, r2, 24029],
         dst = block,
         offset = 1,
         l1$1 = l1$0,
         l2$1 = l2$0;
        for(;;){
         a:
         {
          if(l1$1){
           var b = l1$1[2], a1$0 = l1$1[1];
           if(b){
            if(l2$1){
             var match$0 = l2$1[2];
             if(match$0){
              var
               l2$2 = match$0[2],
               b2$0 = match$0[1],
               b1$1 = l2$1[1],
               l1$2 = b[2],
               a2$0 = b[1],
               r1$1 = caml_call2(f, a1$0, b1$1),
               r2$0 = caml_call2(f, a2$0, b2$0),
               dst$0 = [0, r2$0, 24029];
              dst[offset + 1] = [0, r1$1, dst$0];
              dst = dst$0;
              offset = 1;
              l1$1 = l1$2;
              l2$1 = l2$2;
              continue;
             }
            }
           }
           else if(l2$1 && ! l2$1[2]){
            var b1$2 = l2$1[1], r1$2 = caml_call2(f, a1$0, b1$2);
            dst[offset + 1] = [0, r1$2, 0];
            break a;
           }
          }
          else if(! l2$1){dst[offset + 1] = 0; break a;}
          dst[offset + 1] = Stdlib[1].call(null, cst_List_map2$0);
         }
         return [0, r1, block];
        }
       }
      }
     }
     else if(l2 && ! l2[2]){
      var b1$0 = l2[1], r1$0 = caml_call2(f, a1, b1$0);
      return [0, r1$0, 0];
     }
    }
    else if(! l2) return 0;
    return Stdlib[1].call(null, cst_List_map2);
   }
   function rev_map2(f, l1, l2){
    var accu = 0, l1$0 = l1, l2$0 = l2;
    for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        accu$0 = [0, caml_call2(f, a1, a2), accu];
       accu = accu$0;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0) return accu;
     return Stdlib[1].call(null, cst_List_rev_map2);
    }
   }
   function iter2(f, l1$1, l2$1){
    var l1 = l1$1, l2 = l2$1;
    for(;;){
     if(l1){
      if(l2){
       var l2$0 = l2[2], a2 = l2[1], l1$0 = l1[2], a1 = l1[1];
       caml_call2(f, a1, a2);
       l1 = l1$0;
       l2 = l2$0;
       continue;
      }
     }
     else if(! l2) return 0;
     return Stdlib[1].call(null, cst_List_iter2);
    }
   }
   function fold_left2(f, accu$1, l1$1, l2$1){
    var accu = accu$1, l1 = l1$1, l2 = l2$1;
    for(;;){
     if(l1){
      if(l2){
       var
        l2$0 = l2[2],
        a2 = l2[1],
        l1$0 = l1[2],
        a1 = l1[1],
        accu$0 = caml_call3(f, accu, a1, a2);
       accu = accu$0;
       l1 = l1$0;
       l2 = l2$0;
       continue;
      }
     }
     else if(! l2) return accu;
     return Stdlib[1].call(null, cst_List_fold_left2);
    }
   }
   function fold_right2(f, l1, l2, accu){
    if(l1){
     if(l2){
      var l2$0 = l2[2], a2 = l2[1], l1$0 = l1[2], a1 = l1[1];
      return caml_call3(f, a1, a2, fold_right2(f, l1$0, l2$0, accu));
     }
    }
    else if(! l2) return accu;
    return Stdlib[1].call(null, cst_List_fold_right2);
   }
   function for_all(p, param$0){
    var param = param$0;
    for(;;){
     if(! param) return 1;
     var l = param[2], a = param[1], b = caml_call1(p, a);
     if(! b) return b;
     param = l;
    }
   }
   function exists(p, param$0){
    var param = param$0;
    for(;;){
     if(! param) return 0;
     var l = param[2], a = param[1], b = caml_call1(p, a);
     if(b) return b;
     param = l;
    }
   }
   function for_all2(p, l1$1, l2$1){
    var l1 = l1$1, l2 = l2$1;
    for(;;){
     if(l1){
      if(l2){
       var
        l2$0 = l2[2],
        a2 = l2[1],
        l1$0 = l1[2],
        a1 = l1[1],
        a = caml_call2(p, a1, a2);
       if(! a) return a;
       l1 = l1$0;
       l2 = l2$0;
       continue;
      }
     }
     else if(! l2) return 1;
     return Stdlib[1].call(null, cst_List_for_all2);
    }
   }
   function exists2(p, l1$1, l2$1){
    var l1 = l1$1, l2 = l2$1;
    for(;;){
     if(l1){
      if(l2){
       var
        l2$0 = l2[2],
        a2 = l2[1],
        l1$0 = l1[2],
        a1 = l1[1],
        a = caml_call2(p, a1, a2);
       if(a) return a;
       l1 = l1$0;
       l2 = l2$0;
       continue;
      }
     }
     else if(! l2) return 0;
     return Stdlib[1].call(null, cst_List_exists2);
    }
   }
   function mem(x, param$0){
    var param = param$0;
    for(;;){
     if(! param) return 0;
     var l = param[2], a = param[1], b = 0 === caml_compare(a, x) ? 1 : 0;
     if(b) return b;
     param = l;
    }
   }
   function memq(x, param$0){
    var param = param$0;
    for(;;){
     if(! param) return 0;
     var l = param[2], a = param[1], b = a === x ? 1 : 0;
     if(b) return b;
     param = l;
    }
   }
   function assoc(x, param$0){
    var param = param$0;
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var l = param[2], match = param[1], b = match[2], a = match[1];
     if(0 === caml_compare(a, x)) return b;
     param = l;
    }
   }
   function assoc_opt(x, param$0){
    var param = param$0;
    for(;;){
     if(! param) return 0;
     var l = param[2], match = param[1], b = match[2], a = match[1];
     if(0 === caml_compare(a, x)) return [0, b];
     param = l;
    }
   }
   function assq(x, param$0){
    var param = param$0;
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var l = param[2], match = param[1], b = match[2], a = match[1];
     if(a === x) return b;
     param = l;
    }
   }
   function assq_opt(x, param$0){
    var param = param$0;
    for(;;){
     if(! param) return 0;
     var l = param[2], match = param[1], b = match[2], a = match[1];
     if(a === x) return [0, b];
     param = l;
    }
   }
   function mem_assoc(x, param$0){
    var param = param$0;
    for(;;){
     if(! param) return 0;
     var l = param[2], a = param[1][1], b = 0 === caml_compare(a, x) ? 1 : 0;
     if(b) return b;
     param = l;
    }
   }
   function mem_assq(x, param$0){
    var param = param$0;
    for(;;){
     if(! param) return 0;
     var l = param[2], a = param[1][1], b = a === x ? 1 : 0;
     if(b) return b;
     param = l;
    }
   }
   function remove_assoc(x, param){
    if(! param) return 0;
    var l = param[2], pair = param[1], a = pair[1];
    return 0 === caml_compare(a, x) ? l : [0, pair, remove_assoc(x, l)];
   }
   function remove_assq(x, param){
    if(! param) return 0;
    var l = param[2], pair = param[1], a = pair[1];
    return a === x ? l : [0, pair, remove_assq(x, l)];
   }
   function find(p, param$0){
    var param = param$0;
    for(;;){
     if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     var l = param[2], x = param[1];
     if(caml_call1(p, x)) return x;
     param = l;
    }
   }
   function find_opt(p, param$0){
    var param = param$0;
    for(;;){
     if(! param) return 0;
     var l = param[2], x = param[1];
     if(caml_call1(p, x)) return [0, x];
     param = l;
    }
   }
   function find_index(p){
    var i = 0;
    return function(param$0){
     var i$0 = i, param = param$0;
     for(;;){
      if(! param) return 0;
      var l = param[2], a = param[1];
      if(caml_call1(p, a)) return [0, i$0];
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
      param = l;
     }};
   }
   function find_map(f, param$0){
    var param = param$0;
    for(;;){
     if(! param) return 0;
     var l = param[2], x = param[1], result = caml_call1(f, x);
     if(result) return result;
     param = l;
    }
   }
   function find_mapi(f){
    var i = 0;
    return function(param$0){
     var i$0 = i, param = param$0;
     for(;;){
      if(! param) return 0;
      var l = param[2], x = param[1], result = caml_call2(f, i$0, x);
      if(result) return result;
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
      param = l;
     }};
   }
   function find_all(p, param$1){
    var param = param$1;
    for(;;){
     if(! param) return 0;
     var l = param[2], x = param[1];
     if(caml_call1(p, x)) break;
     param = l;
    }
    var block = [0, x, 24029], dst = block, offset = 1, param$0 = l;
    for(;;){
     if(! param$0){dst[offset + 1] = 0; return block;}
     var l$0 = param$0[2], x$0 = param$0[1];
     if(caml_call1(p, x$0)){
      var dst$0 = [0, x$0, 24029];
      dst[offset + 1] = dst$0;
      dst = dst$0;
      offset = 1;
      param$0 = l$0;
     }
     else
      param$0 = l$0;
    }
   }
   function filteri(p, l$1){
    var i = 0, param = l$1;
    for(;;){
     if(! param) return 0;
     var l = param[2], x = param[1], i$0 = i + 1 | 0;
     if(caml_call2(p, i, x)) break;
     i = i$0;
     param = l;
    }
    var
     block = [0, x, 24029],
     dst = block,
     offset = 1,
     i$1 = i$0,
     param$0 = l;
    for(;;){
     if(! param$0){dst[offset + 1] = 0; return block;}
     var l$0 = param$0[2], x$0 = param$0[1], i$2 = i$1 + 1 | 0;
     if(caml_call2(p, i$1, x$0)){
      var dst$0 = [0, x$0, 24029];
      dst[offset + 1] = dst$0;
      dst = dst$0;
      offset = 1;
      i$1 = i$2;
      param$0 = l$0;
     }
     else{i$1 = i$2; param$0 = l$0;}
    }
   }
   function filter_map(f, param$1){
    var param = param$1;
    for(;;){
     if(! param) return 0;
     var l = param[2], x = param[1], match = caml_call1(f, x);
     if(match) break;
     param = l;
    }
    var
     v = match[1],
     block = [0, v, 24029],
     dst = block,
     offset = 1,
     param$0 = l;
    for(;;){
     if(! param$0){dst[offset + 1] = 0; return block;}
     var l$0 = param$0[2], x$0 = param$0[1], match$0 = caml_call1(f, x$0);
     if(match$0){
      var v$0 = match$0[1], dst$0 = [0, v$0, 24029];
      dst[offset + 1] = dst$0;
      dst = dst$0;
      offset = 1;
      param$0 = l$0;
     }
     else
      param$0 = l$0;
    }
   }
   function concat_map(f, param$0){
    var param = param$0;
    for(;;){
     if(! param) return 0;
     var xs = param[2], x = param[1], ys = caml_call1(f, x);
     if(ys) break;
     param = xs;
    }
    var
     ys$1 = ys[2],
     y = ys[1],
     block = [0, y, 24029],
     xs$1 = xs,
     ys$4 = ys$1,
     offset$0 = 1,
     dst$1 = block;
    for(;;){
     var dst = dst$1, offset = offset$0, ys$2 = ys$4;
     for(;;){
      if(! ys$2){
       if(xs$1){
        var xs$0 = xs$1[2], x$0 = xs$1[1], ys$0 = caml_call1(f, x$0);
        xs$1 = xs$0;
        ys$4 = ys$0;
        offset$0 = offset;
        dst$1 = dst;
        break;
       }
       dst[offset + 1] = 0;
       return block;
      }
      var ys$3 = ys$2[2], y$0 = ys$2[1], dst$0 = [0, y$0, 24029];
      dst[offset + 1] = dst$0;
      dst = dst$0;
      offset = 1;
      ys$2 = ys$3;
     }
    }
   }
   function take(n, l){
    if(n < 0) Stdlib[1].call(null, cst_List_take);
    if(0 !== n && l){
     var
      l$0 = l[2],
      x = l[1],
      block = [0, x, 24029],
      n$0 = n - 1 | 0,
      dst = block,
      offset = 1,
      n$1 = n$0,
      l$1 = l$0;
     for(;;){
      if(0 !== n$1 && l$1){
       var l$2 = l$1[2], x$0 = l$1[1], dst$0 = [0, x$0, 24029];
       dst[offset + 1] = dst$0;
       var n$2 = n$1 - 1 | 0;
       dst = dst$0;
       offset = 1;
       n$1 = n$2;
       l$1 = l$2;
       continue;
      }
      dst[offset + 1] = 0;
      return block;
     }
    }
    return 0;
   }
   function drop(n, rest){
    if(n < 0) Stdlib[1].call(null, cst_List_drop);
    var i = 0, rest$0 = rest;
    for(;;){
     if(rest$0){
      var rest$1 = rest$0[2];
      if(i < n){var i$0 = i + 1 | 0; i = i$0; rest$0 = rest$1; continue;}
     }
     return rest$0;
    }
   }
   function take_while(p, rest){
    if(rest){
     var rest$0 = rest[2], x = rest[1];
     if(caml_call1(p, x)){
      var block = [0, x, 24029], dst = block, offset = 1, rest$1 = rest$0;
      for(;;){
       if(rest$1){
        var rest$2 = rest$1[2], x$0 = rest$1[1];
        if(caml_call1(p, x$0)){
         var dst$0 = [0, x$0, 24029];
         dst[offset + 1] = dst$0;
         dst = dst$0;
         offset = 1;
         rest$1 = rest$2;
         continue;
        }
       }
       dst[offset + 1] = 0;
       return block;
      }
     }
    }
    return 0;
   }
   function drop_while(p, rest$1){
    var rest = rest$1;
    for(;;){
     if(rest){
      var rest$0 = rest[2], x = rest[1];
      if(caml_call1(p, x)){rest = rest$0; continue;}
     }
     return rest;
    }
   }
   function fold_left_map(f, accu, l){
    var accu$0 = accu, l_accu = 0, param = l;
    for(;;){
     if(! param) return [0, accu$0, rev(l_accu)];
     var
      l$0 = param[2],
      x = param[1],
      match = caml_call2(f, accu$0, x),
      x$0 = match[2],
      accu$1 = match[1],
      l_accu$0 = [0, x$0, l_accu];
     accu$0 = accu$1;
     l_accu = l_accu$0;
     param = l$0;
    }
   }
   function partition(p, l){
    var yes = 0, no = 0, param = l;
    for(;;){
     if(! param){var a = rev(no); return [0, rev(yes), a];}
     var l$0 = param[2], x = param[1];
     if(caml_call1(p, x)){
      var yes$0 = [0, x, yes];
      yes = yes$0;
      param = l$0;
     }
     else{var no$0 = [0, x, no]; no = no$0; param = l$0;}
    }
   }
   function partition_map(p, l){
    var left = 0, right = 0, param = l;
    for(;;){
     if(! param){var a = rev(right); return [0, rev(left), a];}
     var l$0 = param[2], x = param[1], match = caml_call1(p, x);
     if(0 === match[0]){
      var v = match[1], left$0 = [0, v, left];
      left = left$0;
      param = l$0;
     }
     else{
      var v$0 = match[1], right$0 = [0, v$0, right];
      right = right$0;
      param = l$0;
     }
    }
   }
   function split(param){
    if(! param) return a;
    var
     l = param[2],
     match = param[1],
     y = match[2],
     x = match[1],
     match$0 = split(l),
     ry = match$0[2],
     rx = match$0[1];
    return [0, [0, x, rx], [0, y, ry]];
   }
   function combine(l1, l2){
    if(l1){
     if(l2){
      var l2$0 = l2[2], a2 = l2[1], l1$0 = l1[2], a1 = l1[1];
      return [0, [0, a1, a2], combine(l1$0, l2$0)];
     }
    }
    else if(! l2) return 0;
    return Stdlib[1].call(null, cst_List_combine);
   }
   function merge(cmp, l1, l2){
    if(! l1) return l2;
    if(! l2) return l1;
    var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
    return 0 < caml_call2(cmp, h1, h2)
            ? [0, h2, merge(cmp, l1, t2)]
            : [0, h1, merge(cmp, t1, l2)];
   }
   function stable_sort(cmp, l){
    function sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         s =
           0 < caml_call2(cmp, x1, x2)
            ? [0, x2, [0, x1, 0]]
            : [0, x1, [0, x2, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var a = l[2];
      if(a){
       var match$2 = a[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = a[1],
         x1$0 = l[1],
         s$0 =
           0 < caml_call2(cmp, x1$0, x2$0)
            ? 0
              < caml_call2(cmp, x1$0, x3)
              ? 0
                < caml_call2(cmp, x2$0, x3)
                ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                : [0, x2$0, [0, x3, [0, x1$0, 0]]]
              : [0, x2$0, [0, x1$0, [0, x3, 0]]]
            : 0
              < caml_call2(cmp, x2$0, x3)
              ? 0
                < caml_call2(cmp, x1$0, x3)
                ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                : [0, x1$0, [0, x3, [0, x2$0, 0]]]
              : [0, x1$0, [0, x2$0, [0, x3, 0]]];
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = rev_sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = rev_sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
        if(0 < caml_call2(cmp, h1, h2)){
         var accu$0 = [0, h1, accu];
         l1 = t1;
         accu = accu$0;
         continue;
        }
        var accu$1 = [0, h2, accu];
        l2 = t2;
        accu = accu$1;
        continue;
       }
       var b = rev_append(l1, accu);
      }
      else
       var b = rev_append(l2, accu);
      return [0, b, tl$0];
     }
    }
    function rev_sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         s =
           0 < caml_call2(cmp, x1, x2)
            ? [0, x1, [0, x2, 0]]
            : [0, x2, [0, x1, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var a = l[2];
      if(a){
       var match$2 = a[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = a[1],
         x1$0 = l[1],
         s$0 =
           0 < caml_call2(cmp, x1$0, x2$0)
            ? 0
              < caml_call2(cmp, x2$0, x3)
              ? [0, x1$0, [0, x2$0, [0, x3, 0]]]
              : 0
                < caml_call2(cmp, x1$0, x3)
                ? [0, x1$0, [0, x3, [0, x2$0, 0]]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]]
            : 0
              < caml_call2(cmp, x1$0, x3)
              ? [0, x2$0, [0, x1$0, [0, x3, 0]]]
              : 0
                < caml_call2(cmp, x2$0, x3)
                ? [0, x2$0, [0, x3, [0, x1$0, 0]]]
                : [0, x3, [0, x2$0, [0, x1$0, 0]]];
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
        if(0 < caml_call2(cmp, h1, h2)){
         var accu$0 = [0, h2, accu];
         l2 = t2;
         accu = accu$0;
         continue;
        }
        var accu$1 = [0, h1, accu];
        l1 = t1;
        accu = accu$1;
        continue;
       }
       var b = rev_append(l1, accu);
      }
      else
       var b = rev_append(l2, accu);
      return [0, b, tl$0];
     }
    }
    var len = length(l);
    return 2 <= len ? sort(len, l)[1] : l;
   }
   function sort_uniq(cmp, l){
    function sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         c$0 = caml_call2(cmp, x1, x2),
         s =
           0 === c$0
            ? [0, x1, 0]
            : 0 <= c$0 ? [0, x2, [0, x1, 0]] : [0, x1, [0, x2, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var a = l[2];
      if(a){
       var match$2 = a[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = a[1],
         x1$0 = l[1],
         c$1 = caml_call2(cmp, x1$0, x2$0);
        if(0 === c$1)
         var
          c$2 = caml_call2(cmp, x2$0, x3),
          s$0 =
            0 === c$2
             ? [0, x2$0, 0]
             : 0 <= c$2 ? [0, x3, [0, x2$0, 0]] : [0, x2$0, [0, x3, 0]];
        else if(0 <= c$1){
         var c$3 = caml_call2(cmp, x1$0, x3);
         if(0 === c$3)
          var s$0 = [0, x2$0, [0, x1$0, 0]];
         else if(0 <= c$3)
          var
           c$4 = caml_call2(cmp, x2$0, x3),
           s$0 =
             0 === c$4
              ? [0, x2$0, [0, x1$0, 0]]
              : 0
                <= c$4
                ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                : [0, x2$0, [0, x3, [0, x1$0, 0]]];
         else
          var s$0 = [0, x2$0, [0, x1$0, [0, x3, 0]]];
        }
        else{
         var c$5 = caml_call2(cmp, x2$0, x3);
         if(0 === c$5)
          var s$0 = [0, x1$0, [0, x2$0, 0]];
         else if(0 <= c$5)
          var
           c$6 = caml_call2(cmp, x1$0, x3),
           s$0 =
             0 === c$6
              ? [0, x1$0, [0, x2$0, 0]]
              : 0
                <= c$6
                ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                : [0, x1$0, [0, x3, [0, x2$0, 0]]];
         else
          var s$0 = [0, x1$0, [0, x2$0, [0, x3, 0]]];
        }
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = rev_sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = rev_sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var
         t2 = l2[2],
         h2 = l2[1],
         t1 = l1[2],
         h1 = l1[1],
         c = caml_call2(cmp, h1, h2);
        if(0 === c){
         var accu$0 = [0, h1, accu];
         l1 = t1;
         l2 = t2;
         accu = accu$0;
         continue;
        }
        if(0 < c){
         var accu$1 = [0, h1, accu];
         l1 = t1;
         accu = accu$1;
         continue;
        }
        var accu$2 = [0, h2, accu];
        l2 = t2;
        accu = accu$2;
        continue;
       }
       var b = rev_append(l1, accu);
      }
      else
       var b = rev_append(l2, accu);
      return [0, b, tl$0];
     }
    }
    function rev_sort(n, l){
     if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         c$0 = caml_call2(cmp, x1, x2),
         s =
           0 === c$0
            ? [0, x1, 0]
            : 0 < c$0 ? [0, x1, [0, x2, 0]] : [0, x2, [0, x1, 0]];
        return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var a = l[2];
      if(a){
       var match$2 = a[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = a[1],
         x1$0 = l[1],
         c$1 = caml_call2(cmp, x1$0, x2$0);
        if(0 === c$1)
         var
          c$2 = caml_call2(cmp, x2$0, x3),
          s$0 =
            0 === c$2
             ? [0, x2$0, 0]
             : 0 < c$2 ? [0, x2$0, [0, x3, 0]] : [0, x3, [0, x2$0, 0]];
        else if(0 < c$1){
         var c$3 = caml_call2(cmp, x2$0, x3);
         if(0 === c$3)
          var s$0 = [0, x1$0, [0, x2$0, 0]];
         else if(0 < c$3)
          var s$0 = [0, x1$0, [0, x2$0, [0, x3, 0]]];
         else
          var
           c$4 = caml_call2(cmp, x1$0, x3),
           s$0 =
             0 === c$4
              ? [0, x1$0, [0, x2$0, 0]]
              : 0
                < c$4
                ? [0, x1$0, [0, x3, [0, x2$0, 0]]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]];
        }
        else{
         var c$5 = caml_call2(cmp, x1$0, x3);
         if(0 === c$5)
          var s$0 = [0, x2$0, [0, x1$0, 0]];
         else if(0 < c$5)
          var s$0 = [0, x2$0, [0, x1$0, [0, x3, 0]]];
         else
          var
           c$6 = caml_call2(cmp, x2$0, x3),
           s$0 =
             0 === c$6
              ? [0, x2$0, [0, x1$0, 0]]
              : 0
                < c$6
                ? [0, x2$0, [0, x3, [0, x1$0, 0]]]
                : [0, x3, [0, x2$0, [0, x1$0, 0]]];
        }
        return [0, s$0, tl$1];
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 = sort(n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 = sort(n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
     for(;;){
      if(l1){
       if(l2){
        var
         t2 = l2[2],
         h2 = l2[1],
         t1 = l1[2],
         h1 = l1[1],
         c = caml_call2(cmp, h1, h2);
        if(0 === c){
         var accu$0 = [0, h1, accu];
         l1 = t1;
         l2 = t2;
         accu = accu$0;
         continue;
        }
        if(0 <= c){
         var accu$1 = [0, h2, accu];
         l2 = t2;
         accu = accu$1;
         continue;
        }
        var accu$2 = [0, h1, accu];
        l1 = t1;
        accu = accu$2;
        continue;
       }
       var b = rev_append(l1, accu);
      }
      else
       var b = rev_append(l2, accu);
      return [0, b, tl$0];
     }
    }
    var len = length(l);
    return 2 <= len ? sort(len, l)[1] : l;
   }
   function compare_lengths(l1$1, l2$1){
    var l1 = l1$1, l2 = l2$1;
    for(;;){
     if(! l1) return l2 ? -1 : 0;
     if(! l2) return 1;
     var l2$0 = l2[2], l1$0 = l1[2];
     l1 = l1$0;
     l2 = l2$0;
    }
   }
   function compare_length_with(l$1, n$1){
    var l = l$1, n = n$1;
    for(;;){
     if(! l) return 0 === n ? 0 : 0 < n ? -1 : 1;
     var l$0 = l[2];
     if(0 >= n) return 1;
     var n$0 = n - 1 | 0;
     l = l$0;
     n = n$0;
    }
   }
   function is_empty(param){return param ? 0 : 1;}
   function equal(eq, l1$1, l2$1){
    var l1 = l1$1, l2 = l2$1;
    for(;;){
     if(l1){
      if(l2){
       var
        l2$0 = l2[2],
        a2 = l2[1],
        l1$0 = l1[2],
        a1 = l1[1],
        a = caml_call2(eq, a1, a2);
       if(! a) return a;
       l1 = l1$0;
       l2 = l2$0;
       continue;
      }
     }
     else if(! l2) return 1;
     return 0;
    }
   }
   function compare(cmp, l1$1, l2$1){
    var l1 = l1$1, l2 = l2$1;
    for(;;){
     if(! l1) return l2 ? -1 : 0;
     var l1$0 = l1[2], a1 = l1[1];
     if(! l2) return 1;
     var l2$0 = l2[2], a2 = l2[1], c = caml_call2(cmp, a1, a2);
     if(0 !== c) return c;
     l1 = l1$0;
     l2 = l2$0;
    }
   }
   function to_seq(l){
    function aux(l, param){
     if(! l) return 0;
     var tail = l[2], x = l[1];
     return [0, x, function(a){return aux(tail, a);}];
    }
    return function(a){return aux(l, a);};
   }
   function of_seq(seq){
    var match = caml_call1(seq, 0);
    if(! match) return 0;
    var seq$0 = match[2], x1 = match[1], match$0 = caml_call1(seq$0, 0);
    if(! match$0) return [0, x1, 0];
    var
     seq$1 = match$0[2],
     x2 = match$0[1],
     block = [0, x2, 24029],
     dst = block,
     offset = 1,
     seq$2 = seq$1;
    for(;;){
     var match$1 = caml_call1(seq$2, 0);
     if(match$1){
      var
       seq$3 = match$1[2],
       x1$0 = match$1[1],
       match$2 = caml_call1(seq$3, 0);
      if(match$2){
       var seq$4 = match$2[2], x2$0 = match$2[1], dst$0 = [0, x2$0, 24029];
       dst[offset + 1] = [0, x1$0, dst$0];
       dst = dst$0;
       offset = 1;
       seq$2 = seq$4;
       continue;
      }
      dst[offset + 1] = [0, x1$0, 0];
     }
     else
      dst[offset + 1] = 0;
     return [0, x1, block];
    }
   }
   var
    Stdlib_List =
      [0,
       length,
       compare_lengths,
       compare_length_with,
       is_empty,
       cons,
       hd,
       tl,
       nth,
       nth_opt,
       rev,
       init,
       append,
       rev_append,
       flatten,
       flatten,
       equal,
       compare,
       iter,
       iteri,
       map,
       mapi,
       rev_map,
       filter_map,
       concat_map,
       fold_left_map,
       fold_left,
       fold_right,
       iter2,
       map2,
       rev_map2,
       fold_left2,
       fold_right2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find,
       find_opt,
       find_index,
       find_map,
       find_mapi,
       find_all,
       find_all,
       filteri,
       take,
       drop,
       take_while,
       drop_while,
       partition,
       partition_map,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       stable_sort,
       stable_sort,
       stable_sort,
       sort_uniq,
       merge,
       to_seq,
       of_seq];
   runtime.caml_register_global(19, Stdlib_List, "Stdlib__List");
   return;
  }
  (globalThis));

//# 3820 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Int:[N,N,N,F(1)*,N,N,F(1)*,F(2)*,F(2)*,F(2)*,F(2)*,F(1)*,F(2)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, caml_hash = runtime.caml_hash;
   function abs(x){return 0 <= x ? x : - x | 0;}
   function lognot(x){return x ^ -1;}
   function equal(b, a){return b === a ? 1 : 0;}
   var compare = runtime.caml_int_compare;
   function min(x, y){return x <= y ? x : y;}
   function max(x, y){return y <= x ? x : y;}
   function to_string(x){return "" + x;}
   function seeded_hash(seed, x){return caml_hash(10, 100, seed, x);}
   function hash(x){return caml_hash(10, 100, 0, x);}
   var
    Stdlib_Int =
      [0,
       0,
       1,
       -1,
       abs,
       2147483647,
       -2147483648,
       lognot,
       equal,
       compare,
       min,
       max,
       to_string,
       seeded_hash,
       hash];
   runtime.caml_register_global(1, Stdlib_Int, "Stdlib__Int");
   return;
  }
  (globalThis));

//# 3858 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Bytes:[F(2),F(2),N,F(1),F(1),F(1),F(3),F(3),F(3),F(4),F(5),F(5),F(2),F(2),F(2),F(2),F(2),F(2),F(3),F(3),F(2),F(2),F(1),F(1),F(2),F(2),F(2),F(2),F(3),F(3),F(3),F(3),F(2),F(3),F(3),F(1),F(1),F(1),F(1),F(2)*,F(2)*,F(2),F(2),F(1),F(1)*,F(2),F(1)*->F(1),F(1)*->F(1),F(1),F(2),F(3),F(1),F(2),F(3),F(1),F(2),F(3),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(3),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_bytes_ml = "bytes.ml",
    cst_index_out_of_bounds$3 = "index out of bounds",
    caml_blit_bytes = runtime.caml_blit_bytes,
    caml_bswap16 = runtime.caml_bswap16,
    caml_bytes_get = runtime.caml_bytes_get,
    caml_bytes_get16 = runtime.caml_bytes_get16,
    caml_bytes_get32 = runtime.caml_bytes_get32,
    caml_bytes_get64 = runtime.caml_bytes_get64,
    caml_bytes_of_string = runtime.caml_bytes_of_string,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_bytes_set16 = runtime.caml_bytes_set16,
    caml_bytes_set32 = runtime.caml_bytes_set32,
    caml_bytes_set64 = runtime.caml_bytes_set64,
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_fill_bytes = runtime.caml_fill_bytes,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_string_of_bytes = runtime.caml_string_of_bytes,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Char = global_data.Stdlib__Char;
   function make(n, c){
    var s = caml_create_bytes(n);
    caml_fill_bytes(s, 0, n, c);
    return s;
   }
   function init(n, f){
    var s = caml_create_bytes(n), a = n - 1 | 0, b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_bytes_unsafe_set(s, i, caml_call1(f, i));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return s;
   }
   var
    empty = caml_create_bytes(0),
    cst_String_sub_Bytes_sub = "String.sub / Bytes.sub",
    cst_Bytes_extend = "Bytes.extend",
    cst_String_fill_Bytes_fill = "String.fill / Bytes.fill",
    cst_Bytes_blit = "Bytes.blit",
    cst_String_blit_Bytes_blit_str = "String.blit / Bytes.blit_string",
    cst_Bytes_concat = "Bytes.concat",
    cst_String_index_from_Bytes_in = "String.index_from / Bytes.index_from",
    cst_String_index_from_opt_Byte =
      "String.index_from_opt / Bytes.index_from_opt",
    cst_String_rindex_from_Bytes_r = "String.rindex_from / Bytes.rindex_from",
    cst_String_rindex_from_opt_Byt =
      "String.rindex_from_opt / Bytes.rindex_from_opt",
    cst_String_contains_from_Bytes =
      "String.contains_from / Bytes.contains_from",
    cst_String_rcontains_from_Byte =
      "String.rcontains_from / Bytes.rcontains_from";
   function copy(s){
    var len = caml_ml_bytes_length(s), r = caml_create_bytes(len);
    caml_blit_bytes(s, 0, r, 0, len);
    return r;
   }
   function to_string(b){return caml_string_of_bytes(copy(b));}
   function of_string(s){return copy(caml_bytes_of_string(s));}
   function sub(s, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs){
     var r = caml_create_bytes(len);
     caml_blit_bytes(s, ofs, r, 0, len);
     return r;
    }
    return Stdlib[1].call(null, cst_String_sub_Bytes_sub);
   }
   function sub_string(b, ofs, len){
    return caml_string_of_bytes(sub(b, ofs, len));
   }
   function symbol(a, b){
    var c = a + b | 0, d = b < 0 ? 1 : 0, match = c < 0 ? 1 : 0;
    a:
    {
     if(a < 0){if(! d || match) break a;} else if(d || ! match) break a;
     return Stdlib[1].call(null, cst_Bytes_extend);
    }
    return c;
   }
   function extend(s, left, right){
    var
     len = symbol(symbol(caml_ml_bytes_length(s), left), right),
     r = caml_create_bytes(len);
    if(0 <= left)
     var dstoff = left, srcoff = 0;
    else
     var dstoff = 0, srcoff = - left | 0;
    var
     cpylen =
       Stdlib_Int[10].call
        (null, caml_ml_bytes_length(s) - srcoff | 0, len - dstoff | 0);
    if(0 < cpylen) caml_blit_bytes(s, srcoff, r, dstoff, cpylen);
    return r;
   }
   function fill(s, ofs, len, c){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
     return caml_fill_bytes(s, ofs, len, c);
    return Stdlib[1].call(null, cst_String_fill_Bytes_fill);
   }
   function blit(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_bytes_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2)
     return caml_blit_bytes(s1, ofs1, s2, ofs2, len);
    return Stdlib[1].call(null, cst_Bytes_blit);
   }
   function blit_string(s1, ofs1, s2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (runtime.caml_ml_string_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2)
     return runtime.caml_blit_string(s1, ofs1, s2, ofs2, len);
    return Stdlib[1].call(null, cst_String_blit_Bytes_blit_str);
   }
   function iter(f, a){
    var b = caml_ml_bytes_length(a) - 1 | 0, c = 0;
    if(b >= 0){
     var i = c;
     for(;;){
      caml_call1(f, caml_bytes_unsafe_get(a, i));
      var d = i + 1 | 0;
      if(b === i) break;
      i = d;
     }
    }
    return 0;
   }
   function iteri(f, a){
    var b = caml_ml_bytes_length(a) - 1 | 0, c = 0;
    if(b >= 0){
     var i = c;
     for(;;){
      caml_call2(f, i, caml_bytes_unsafe_get(a, i));
      var d = i + 1 | 0;
      if(b === i) break;
      i = d;
     }
    }
    return 0;
   }
   function concat(sep, l){
    if(! l) return empty;
    var seplen = caml_ml_bytes_length(sep);
    a:
    {
     var acc = 0, param = l, pos$1 = 0;
     for(;;){
      if(! param){var a = acc; break a;}
      var hd = param[1];
      if(! param[2]) break;
      var
       tl = param[2],
       x = (caml_ml_bytes_length(hd) + seplen | 0) + acc | 0;
      if(acc <= x){
       acc = x;
       param = tl;
      }
      else{acc = Stdlib[1].call(null, cst_Bytes_concat); param = tl;}
     }
     var a = caml_ml_bytes_length(hd) + acc | 0;
    }
    var dst = caml_create_bytes(a), pos = pos$1, param$0 = l;
    for(;;){
     if(! param$0) return dst;
     var hd$0 = param$0[1];
     if(! param$0[2]){
      caml_blit_bytes(hd$0, 0, dst, pos, caml_ml_bytes_length(hd$0));
      return dst;
     }
     var tl$0 = param$0[2];
     caml_blit_bytes(hd$0, 0, dst, pos, caml_ml_bytes_length(hd$0));
     caml_blit_bytes
      (sep, 0, dst, pos + caml_ml_bytes_length(hd$0) | 0, seplen);
     var pos$0 = (pos + caml_ml_bytes_length(hd$0) | 0) + seplen | 0;
     pos = pos$0;
     param$0 = tl$0;
    }
   }
   function cat(s1, s2){
    var
     l1 = caml_ml_bytes_length(s1),
     l2 = caml_ml_bytes_length(s2),
     r = caml_create_bytes(l1 + l2 | 0);
    caml_blit_bytes(s1, 0, r, 0, l1);
    caml_blit_bytes(s2, 0, r, l1, l2);
    return r;
   }
   function is_space(param){
    var a = param - 9 | 0;
    a:
    {
     if(4 < a >>> 0){if(23 !== a) break a;} else if(2 === a) break a;
     return 1;
    }
    return 0;
   }
   function trim(s){
    var len = caml_ml_bytes_length(s), i = [0, 0];
    for(;;){
     if(i[1] >= len) break;
     if(! is_space(caml_bytes_unsafe_get(s, i[1]))) break;
     i[1]++;
    }
    var j = [0, len - 1 | 0];
    for(;;){
     if(i[1] <= j[1] && is_space(caml_bytes_unsafe_get(s, j[1]))){j[1]--; continue;}
     return i[1] <= j[1] ? sub(s, i[1], (j[1] - i[1] | 0) + 1 | 0) : empty;
    }
   }
   function unsafe_escape(s){
    var n = [0, 0], d = caml_ml_bytes_length(s) - 1 | 0, f = 0;
    if(d >= 0){
     var i$0 = f;
     for(;;){
      var match = caml_bytes_unsafe_get(s, i$0);
      a:
      {
       b:
       {
        c:
        {
         if(32 <= match){
          var a = match - 34 | 0;
          if(58 < a >>> 0){
           if(93 <= a) break c;
          }
          else if(56 < a - 1 >>> 0) break b;
          var b = 1;
          break a;
         }
         if(11 <= match){
          if(13 === match) break b;
         }
         else if(8 <= match) break b;
        }
        var b = 4;
        break a;
       }
       var b = 2;
      }
      n[1] = n[1] + b | 0;
      var j = i$0 + 1 | 0;
      if(d === i$0) break;
      i$0 = j;
     }
    }
    if(n[1] === caml_ml_bytes_length(s)) return s;
    var s$0 = caml_create_bytes(n[1]);
    n[1] = 0;
    var e = caml_ml_bytes_length(s) - 1 | 0, g = 0;
    if(e >= 0){
     var i = g;
     for(;;){
      var c = caml_bytes_unsafe_get(s, i);
      a:
      {
       b:
       {
        c:
        {
         if(35 <= c){
          if(92 !== c){if(127 <= c) break b; break c;}
         }
         else{
          if(32 > c){
           if(14 <= c) break b;
           switch(c){
             case 8:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 98);
              break a;
             case 9:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 116);
              break a;
             case 10:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 110);
              break a;
             case 13:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 114);
              break a;
             default: break b;
           }
          }
          if(34 > c) break c;
         }
         caml_bytes_unsafe_set(s$0, n[1], 92);
         n[1]++;
         caml_bytes_unsafe_set(s$0, n[1], c);
         break a;
        }
        caml_bytes_unsafe_set(s$0, n[1], c);
        break a;
       }
       caml_bytes_unsafe_set(s$0, n[1], 92);
       n[1]++;
       caml_bytes_unsafe_set(s$0, n[1], 48 + (c / 100 | 0) | 0);
       n[1]++;
       caml_bytes_unsafe_set(s$0, n[1], 48 + ((c / 10 | 0) % 10 | 0) | 0);
       n[1]++;
       caml_bytes_unsafe_set(s$0, n[1], 48 + (c % 10 | 0) | 0);
      }
      n[1]++;
      var h = i + 1 | 0;
      if(e === i) break;
      i = h;
     }
    }
    return s$0;
   }
   function escaped(b){var b$0 = copy(b); return unsafe_escape(b$0);}
   function map(f, s){
    var l = caml_ml_bytes_length(s);
    if(0 === l) return s;
    var r = caml_create_bytes(l), a = l - 1 | 0, b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_bytes_unsafe_set(r, i, caml_call1(f, caml_bytes_unsafe_get(s, i)));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return r;
   }
   function mapi(f, s){
    var l = caml_ml_bytes_length(s);
    if(0 === l) return s;
    var r = caml_create_bytes(l), a = l - 1 | 0, b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_bytes_unsafe_set
       (r, i, caml_call2(f, i, caml_bytes_unsafe_get(s, i)));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return r;
   }
   function fold_left(f, x, a){
    var r = [0, x], b = caml_ml_bytes_length(a) - 1 | 0, c = 0;
    if(b >= 0){
     var i = c;
     for(;;){
      r[1] = caml_call2(f, r[1], caml_bytes_unsafe_get(a, i));
      var d = i + 1 | 0;
      if(b === i) break;
      i = d;
     }
    }
    return r[1];
   }
   function fold_right(f, a, x){
    var r = [0, x], b = caml_ml_bytes_length(a) - 1 | 0;
    if(b >= 0){
     var i = b;
     for(;;){
      r[1] = caml_call2(f, caml_bytes_unsafe_get(a, i), r[1]);
      var c = i - 1 | 0;
      if(0 === i) break;
      i = c;
     }
    }
    return r[1];
   }
   function exists(p, s){
    var n = caml_ml_bytes_length(s), i = 0;
    for(;;){
     if(i === n) return 0;
     if(caml_call1(p, caml_bytes_unsafe_get(s, i))) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function for_all(p, s){
    var n = caml_ml_bytes_length(s), i = 0;
    for(;;){
     if(i === n) return 1;
     if(! caml_call1(p, caml_bytes_unsafe_get(s, i))) return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function uppercase_ascii(s){return map(Stdlib_Char[4], s);}
   function lowercase_ascii(s){return map(Stdlib_Char[3], s);}
   function apply1(f, s){
    if(0 === caml_ml_bytes_length(s)) return s;
    var r = copy(s);
    caml_bytes_unsafe_set(r, 0, caml_call1(f, caml_bytes_unsafe_get(s, 0)));
    return r;
   }
   function capitalize_ascii(s){return apply1(Stdlib_Char[4], s);}
   function uncapitalize_ascii(s){return apply1(Stdlib_Char[3], s);}
   function starts_with(prefix, s){
    var
     len_s = caml_ml_bytes_length(s),
     len_pre = caml_ml_bytes_length(prefix),
     a = len_pre <= len_s ? 1 : 0;
    if(! a) return a;
    var i = 0;
    for(;;){
     if(i === len_pre) return 1;
     if(caml_bytes_unsafe_get(s, i) !== caml_bytes_unsafe_get(prefix, i))
      return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function ends_with(suffix, s){
    var
     len_s = caml_ml_bytes_length(s),
     len_suf = caml_ml_bytes_length(suffix),
     diff = len_s - len_suf | 0,
     a = 0 <= diff ? 1 : 0;
    if(! a) return a;
    var i = 0;
    for(;;){
     if(i === len_suf) return 1;
     if
      (caml_bytes_unsafe_get(s, diff + i | 0)
       !== caml_bytes_unsafe_get(suffix, i))
      return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function index_rec(s, lim, i$1, c){
    var i = i$1;
    for(;;){
     if(lim <= i) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(caml_bytes_unsafe_get(s, i) === c) return i;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function index(s, c){return index_rec(s, caml_ml_bytes_length(s), 0, c);}
   function index_rec_opt(s, lim, i$1, c){
    var i = i$1;
    for(;;){
     if(lim <= i) return 0;
     if(caml_bytes_unsafe_get(s, i) === c) return [0, i];
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function index_opt(s, c){
    return index_rec_opt(s, caml_ml_bytes_length(s), 0, c);
   }
   function index_from(s, i, c){
    var l = caml_ml_bytes_length(s);
    if(0 <= i && l >= i) return index_rec(s, l, i, c);
    return Stdlib[1].call(null, cst_String_index_from_Bytes_in);
   }
   function index_from_opt(s, i, c){
    var l = caml_ml_bytes_length(s);
    if(0 <= i && l >= i) return index_rec_opt(s, l, i, c);
    return Stdlib[1].call(null, cst_String_index_from_opt_Byte);
   }
   function rindex_rec(s, i$1, c){
    var i = i$1;
    for(;;){
     if(0 > i) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(caml_bytes_unsafe_get(s, i) === c) return i;
     var i$0 = i - 1 | 0;
     i = i$0;
    }
   }
   function rindex(s, c){
    return rindex_rec(s, caml_ml_bytes_length(s) - 1 | 0, c);
   }
   function rindex_from(s, i, c){
    if(-1 <= i && caml_ml_bytes_length(s) > i) return rindex_rec(s, i, c);
    return Stdlib[1].call(null, cst_String_rindex_from_Bytes_r);
   }
   function rindex_rec_opt(s, i$1, c){
    var i = i$1;
    for(;;){
     if(0 > i) return 0;
     if(caml_bytes_unsafe_get(s, i) === c) return [0, i];
     var i$0 = i - 1 | 0;
     i = i$0;
    }
   }
   function rindex_opt(s, c){
    return rindex_rec_opt(s, caml_ml_bytes_length(s) - 1 | 0, c);
   }
   function rindex_from_opt(s, i, c){
    if(-1 <= i && caml_ml_bytes_length(s) > i) return rindex_rec_opt(s, i, c);
    return Stdlib[1].call(null, cst_String_rindex_from_opt_Byt);
   }
   function contains_from(s, i, c){
    var l = caml_ml_bytes_length(s);
    if(0 <= i && l >= i)
     try{index_rec(s, l, i, c); var a = 1; return a;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    return Stdlib[1].call(null, cst_String_contains_from_Bytes);
   }
   function contains(s, c){return contains_from(s, 0, c);}
   function rcontains_from(s, i, c){
    if(0 <= i && caml_ml_bytes_length(s) > i)
     try{rindex_rec(s, i, c); var a = 1; return a;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    return Stdlib[1].call(null, cst_String_rcontains_from_Byte);
   }
   var
    compare = runtime.caml_bytes_compare,
    cst_Bytes_of_seq_cannot_grow_b = "Bytes.of_seq: cannot grow bytes";
   function split_on_char(sep, s){
    var
     r = [0, 0],
     j = [0, caml_ml_bytes_length(s)],
     a = caml_ml_bytes_length(s) - 1 | 0;
    if(a >= 0){
     var i = a;
     for(;;){
      if(caml_bytes_unsafe_get(s, i) === sep){
       var c = r[1];
       r[1] = [0, sub(s, i + 1 | 0, (j[1] - i | 0) - 1 | 0), c];
       j[1] = i;
      }
      var d = i - 1 | 0;
      if(0 === i) break;
      i = d;
     }
    }
    var b = r[1];
    return [0, sub(s, 0, j[1]), b];
   }
   function to_seq(s){
    function aux(i, param){
     if(i === caml_ml_bytes_length(s)) return 0;
     var x = caml_bytes_get(s, i), a = i + 1 | 0;
     return [0, x, function(b){return aux(a, b);}];
    }
    var a = 0;
    return function(b){return aux(a, b);};
   }
   function to_seqi(s){
    function aux(i, param){
     if(i === caml_ml_bytes_length(s)) return 0;
     var x = caml_bytes_get(s, i), a = i + 1 | 0;
     return [0, [0, i, x], function(b){return aux(a, b);}];
    }
    var a = 0;
    return function(b){return aux(a, b);};
   }
   function of_seq(i){
    var n = [0, 0], buf = [0, make(256, 0)];
    Stdlib_Seq[4].call
     (null,
      function(c){
       if(n[1] === caml_ml_bytes_length(buf[1])){
        var
         new_len =
           Stdlib_Int[10].call
            (null, 2 * caml_ml_bytes_length(buf[1]) | 0, Stdlib_Sys[12]);
        if(caml_ml_bytes_length(buf[1]) === new_len)
         Stdlib[2].call(null, cst_Bytes_of_seq_cannot_grow_b);
        var new_buf = make(new_len, 0);
        blit(buf[1], 0, new_buf, 0, n[1]);
        buf[1] = new_buf;
       }
       caml_bytes_set(buf[1], n[1], c);
       n[1]++;
       return 0;
      },
      i);
    return sub(buf[1], 0, n[1]);
   }
   function unsafe_get_uint16_le(b, i){
    return Stdlib_Sys[11]
            ? caml_bswap16(caml_bytes_get16(b, i))
            : caml_bytes_get16(b, i);
   }
   function unsafe_get_uint16_be(b, i){
    return Stdlib_Sys[11]
            ? caml_bytes_get16(b, i)
            : caml_bswap16(caml_bytes_get16(b, i));
   }
   function get_int8(b, i){
    var a = Stdlib_Sys[10] - 8 | 0, c = Stdlib_Sys[10] - 8 | 0;
    return caml_bytes_get(b, i) << c >> a;
   }
   function get_uint16_le(b, i){
    return Stdlib_Sys[11]
            ? caml_bswap16(caml_bytes_get16(b, i))
            : caml_bytes_get16(b, i);
   }
   function get_uint16_be(b, i){
    return Stdlib_Sys[11]
            ? caml_bytes_get16(b, i)
            : caml_bswap16(caml_bytes_get16(b, i));
   }
   function get_int16_ne(b, i){
    var a = Stdlib_Sys[10] - 16 | 0, c = Stdlib_Sys[10] - 16 | 0;
    return caml_bytes_get16(b, i) << c >> a;
   }
   function get_int16_le(b, i){
    var a = Stdlib_Sys[10] - 16 | 0, c = Stdlib_Sys[10] - 16 | 0;
    return get_uint16_le(b, i) << c >> a;
   }
   function get_int16_be(b, i){
    var a = Stdlib_Sys[10] - 16 | 0, c = Stdlib_Sys[10] - 16 | 0;
    return get_uint16_be(b, i) << c >> a;
   }
   function get_int32_le(b, i){
    return Stdlib_Sys[11]
            ? caml_int32_bswap(caml_bytes_get32(b, i))
            : caml_bytes_get32(b, i);
   }
   function get_int32_be(b, i){
    return Stdlib_Sys[11]
            ? caml_bytes_get32(b, i)
            : caml_int32_bswap(caml_bytes_get32(b, i));
   }
   function get_int64_le(b, i){
    return Stdlib_Sys[11]
            ? caml_int64_bswap(caml_bytes_get64(b, i))
            : caml_bytes_get64(b, i);
   }
   function get_int64_be(b, i){
    return Stdlib_Sys[11]
            ? caml_bytes_get64(b, i)
            : caml_int64_bswap(caml_bytes_get64(b, i));
   }
   function unsafe_set_uint16_le(b, i, x){
    if(Stdlib_Sys[11]){caml_bytes_set16(b, i, caml_bswap16(x)); return;}
    caml_bytes_set16(b, i, x);
   }
   function unsafe_set_uint16_be(b, i, x){
    if(Stdlib_Sys[11]){caml_bytes_set16(b, i, x); return;}
    caml_bytes_set16(b, i, caml_bswap16(x));
   }
   function set_int16_le(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set16(b, i, caml_bswap16(x))
            : caml_bytes_set16(b, i, x);
   }
   function set_int16_be(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set16(b, i, x)
            : caml_bytes_set16(b, i, caml_bswap16(x));
   }
   function set_int32_le(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set32(b, i, caml_int32_bswap(x))
            : caml_bytes_set32(b, i, x);
   }
   function set_int32_be(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set32(b, i, x)
            : caml_bytes_set32(b, i, caml_int32_bswap(x));
   }
   function set_int64_le(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set64(b, i, caml_int64_bswap(x))
            : caml_bytes_set64(b, i, x);
   }
   function set_int64_be(b, i, x){
    return Stdlib_Sys[11]
            ? caml_bytes_set64(b, i, x)
            : caml_bytes_set64(b, i, caml_int64_bswap(x));
   }
   var
    set_uint8 = caml_bytes_set,
    set_uint16_ne = caml_bytes_set16,
    dec_invalid = Stdlib_Uchar[23],
    a = [0, cst_bytes_ml, 679, 9],
    b = [0, cst_bytes_ml, 654, 20],
    cst_index_out_of_bounds = cst_index_out_of_bounds$3,
    cst_index_out_of_bounds$0 = cst_index_out_of_bounds$3,
    c = [0, cst_bytes_ml, 777, 9],
    d = [0, cst_bytes_ml, 766, 20],
    cst_index_out_of_bounds$1 = cst_index_out_of_bounds$3,
    cst_index_out_of_bounds$2 = cst_index_out_of_bounds$3,
    e = [0, cst_bytes_ml, 831, 9],
    f = [0, cst_bytes_ml, 820, 20];
   function dec_ret(n, u){
    var a = Stdlib_Uchar[9].call(null, u);
    return Stdlib_Uchar[22].call(null, n, a);
   }
   function not_in_x80_to_xBF(b){return 2 !== (b >>> 6 | 0) ? 1 : 0;}
   function not_in_xA0_to_xBF(b){return 5 !== (b >>> 5 | 0) ? 1 : 0;}
   function not_in_x80_to_x9F(b){return 4 !== (b >>> 5 | 0) ? 1 : 0;}
   function not_in_x90_to_xBF(b){
    var a = b < 144 ? 1 : 0, c = a || (191 < b ? 1 : 0);
    return c;
   }
   function not_in_x80_to_x8F(b){return 8 !== (b >>> 4 | 0) ? 1 : 0;}
   function utf_8_uchar_3(b0, b1, b2){
    return (b0 & 15) << 12 | (b1 & 63) << 6 | b2 & 63;
   }
   function utf_8_uchar_4(b0, b1, b2, b3){
    return (b0 & 7) << 18 | (b1 & 63) << 12 | (b2 & 63) << 6 | b3 & 63;
   }
   function get_utf_8_uchar(b, i){
    var b0 = caml_bytes_get(b, i), max = caml_ml_bytes_length(b) - 1 | 0;
    a:
    {
     if(224 <= b0){
      if(237 <= b0){
       if(245 <= b0) break a;
       switch(b0 - 237 | 0){
         case 0:
          var i$0 = i + 1 | 0;
          if(max < i$0) return dec_invalid(1);
          var b1$4 = caml_bytes_unsafe_get(b, i$0);
          if(not_in_x80_to_x9F(b1$4)) return dec_invalid(1);
          var i$1 = i$0 + 1 | 0;
          if(max < i$1) return dec_invalid(2);
          var b2$3 = caml_bytes_unsafe_get(b, i$1);
          return not_in_x80_to_xBF(b2$3)
                  ? dec_invalid(2)
                  : dec_ret(3, utf_8_uchar_3(b0, b1$4, b2$3));
         case 3:
          var i$4 = i + 1 | 0;
          if(max < i$4) return dec_invalid(1);
          var b1$2 = caml_bytes_unsafe_get(b, i$4);
          if(not_in_x90_to_xBF(b1$2)) return dec_invalid(1);
          var i$5 = i$4 + 1 | 0;
          if(max < i$5) return dec_invalid(2);
          var b2$1 = caml_bytes_unsafe_get(b, i$5);
          if(not_in_x80_to_xBF(b2$1)) return dec_invalid(2);
          var i$6 = i$5 + 1 | 0;
          if(max < i$6) return dec_invalid(3);
          var b3$1 = caml_bytes_unsafe_get(b, i$6);
          return not_in_x80_to_xBF(b3$1)
                  ? dec_invalid(3)
                  : dec_ret(4, utf_8_uchar_4(b0, b1$2, b2$1, b3$1));
         case 7:
          var i$10 = i + 1 | 0;
          if(max < i$10) return dec_invalid(1);
          var b1$0 = caml_bytes_unsafe_get(b, i$10);
          if(not_in_x80_to_x8F(b1$0)) return dec_invalid(1);
          var i$11 = i$10 + 1 | 0;
          if(max < i$11) return dec_invalid(2);
          var b2 = caml_bytes_unsafe_get(b, i$11);
          if(not_in_x80_to_xBF(b2)) return dec_invalid(2);
          var i$12 = i$11 + 1 | 0;
          if(max < i$12) return dec_invalid(3);
          var b3 = caml_bytes_unsafe_get(b, i$12);
          return not_in_x80_to_xBF(b3)
                  ? dec_invalid(3)
                  : dec_ret(4, utf_8_uchar_4(b0, b1$0, b2, b3));
         case 1:
         case 2: break;
         default:
          var i$7 = i + 1 | 0;
          if(max < i$7) return dec_invalid(1);
          var b1$1 = caml_bytes_unsafe_get(b, i$7);
          if(not_in_x80_to_xBF(b1$1)) return dec_invalid(1);
          var i$8 = i$7 + 1 | 0;
          if(max < i$8) return dec_invalid(2);
          var b2$0 = caml_bytes_unsafe_get(b, i$8);
          if(not_in_x80_to_xBF(b2$0)) return dec_invalid(2);
          var i$9 = i$8 + 1 | 0;
          if(max < i$9) return dec_invalid(3);
          var b3$0 = caml_bytes_unsafe_get(b, i$9);
          return not_in_x80_to_xBF(b3$0)
                  ? dec_invalid(3)
                  : dec_ret(4, utf_8_uchar_4(b0, b1$1, b2$0, b3$0));
       }
      }
      else if(225 > b0){
       var i$13 = i + 1 | 0;
       if(max < i$13) return dec_invalid(1);
       var b1$5 = caml_bytes_unsafe_get(b, i$13);
       if(not_in_xA0_to_xBF(b1$5)) return dec_invalid(1);
       var i$14 = i$13 + 1 | 0;
       if(max < i$14) return dec_invalid(2);
       var b2$4 = caml_bytes_unsafe_get(b, i$14);
       return not_in_x80_to_xBF(b2$4)
               ? dec_invalid(2)
               : dec_ret(3, utf_8_uchar_3(b0, b1$5, b2$4));
      }
      var i$2 = i + 1 | 0;
      if(max < i$2) return dec_invalid(1);
      var b1$3 = caml_bytes_unsafe_get(b, i$2);
      if(not_in_x80_to_xBF(b1$3)) return dec_invalid(1);
      var i$3 = i$2 + 1 | 0;
      if(max < i$3) return dec_invalid(2);
      var b2$2 = caml_bytes_unsafe_get(b, i$3);
      return not_in_x80_to_xBF(b2$2)
              ? dec_invalid(2)
              : dec_ret(3, utf_8_uchar_3(b0, b1$3, b2$2));
     }
     if(128 > b0) return dec_ret(1, b0);
     if(194 <= b0){
      var i$15 = i + 1 | 0;
      if(max < i$15) return dec_invalid(1);
      var b1 = caml_bytes_unsafe_get(b, i$15);
      return not_in_x80_to_xBF(b1)
              ? dec_invalid(1)
              : dec_ret(2, (b0 & 31) << 6 | b1 & 63);
     }
    }
    return dec_invalid(1);
   }
   function set_utf_8_uchar(b$0, i, u){
    function set(c, b, a){caml_bytes_unsafe_set(c, b, a);}
    var
     max = caml_ml_bytes_length(b$0) - 1 | 0,
     u$0 = Stdlib_Uchar[10].call(null, u);
    if(0 > u$0) throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
    if(127 >= u$0){caml_bytes_set(b$0, i, u$0); return 1;}
    if(2047 >= u$0){
     var last$1 = i + 1 | 0;
     return max < last$1
             ? 0
             : (caml_bytes_set
                (b$0, i, 192 | u$0 >>> 6 | 0),
               set(b$0, last$1, 128 | u$0 & 63),
               2);
    }
    if(65535 >= u$0){
     var last$0 = i + 2 | 0;
     return max < last$0
             ? 0
             : (caml_bytes_set
                (b$0, i, 224 | u$0 >>> 12 | 0),
               set(b$0, i + 1 | 0, 128 | (u$0 >>> 6 | 0) & 63),
               set(b$0, last$0, 128 | u$0 & 63),
               3);
    }
    if(1114111 < u$0)
     throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
    var last = i + 3 | 0;
    return max < last
            ? 0
            : (caml_bytes_set
               (b$0, i, 240 | u$0 >>> 18 | 0),
              set(b$0, i + 1 | 0, 128 | (u$0 >>> 12 | 0) & 63),
              set(b$0, i + 2 | 0, 128 | (u$0 >>> 6 | 0) & 63),
              set(b$0, last, 128 | u$0 & 63),
              4);
   }
   function is_valid_utf_8(b){
    var max = caml_ml_bytes_length(b) - 1 | 0, i = 0;
    for(;;){
     if(max < i) return 1;
     var match = caml_bytes_unsafe_get(b, i);
     a:
     {
      if(224 <= match){
       if(237 <= match){
        if(245 <= match) break a;
        switch(match - 237 | 0){
          case 0:
           var last = i + 2 | 0;
           if
            (max >= last
             &&
              !
              not_in_x80_to_x9F(caml_bytes_unsafe_get(b, i + 1 | 0))
              && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last))){var i$0 = last + 1 | 0; i = i$0; continue;}
           return 0;
          case 3:
           var last$1 = i + 3 | 0;
           if
            (max >= last$1
             &&
              !
              not_in_x90_to_xBF(caml_bytes_unsafe_get(b, i + 1 | 0))
              &&
               !
               not_in_x80_to_xBF(caml_bytes_unsafe_get(b, i + 2 | 0))
               && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$1))){var i$2 = last$1 + 1 | 0; i = i$2; continue;}
           return 0;
          case 7:
           var last$3 = i + 3 | 0;
           if
            (max >= last$3
             &&
              !
              not_in_x80_to_x8F(caml_bytes_unsafe_get(b, i + 1 | 0))
              &&
               !
               not_in_x80_to_xBF(caml_bytes_unsafe_get(b, i + 2 | 0))
               && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$3))){var i$4 = last$3 + 1 | 0; i = i$4; continue;}
           return 0;
          case 1:
          case 2: break;
          default:
           var last$2 = i + 3 | 0;
           if
            (max >= last$2
             &&
              !
              not_in_x80_to_xBF(caml_bytes_unsafe_get(b, i + 1 | 0))
              &&
               !
               not_in_x80_to_xBF(caml_bytes_unsafe_get(b, i + 2 | 0))
               && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$2))){var i$3 = last$2 + 1 | 0; i = i$3; continue;}
           return 0;
        }
       }
       else if(225 > match){
        var last$4 = i + 2 | 0;
        if
         (max >= last$4
          &&
           !
           not_in_xA0_to_xBF(caml_bytes_unsafe_get(b, i + 1 | 0))
           && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$4))){var i$5 = last$4 + 1 | 0; i = i$5; continue;}
        return 0;
       }
       var last$0 = i + 2 | 0;
       if
        (max >= last$0
         &&
          !
          not_in_x80_to_xBF(caml_bytes_unsafe_get(b, i + 1 | 0))
          && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$0))){var i$1 = last$0 + 1 | 0; i = i$1; continue;}
       return 0;
      }
      if(128 > match){var i$7 = i + 1 | 0; i = i$7; continue;}
      if(194 <= match){
       var last$5 = i + 1 | 0;
       if
        (max >= last$5
         && ! not_in_x80_to_xBF(caml_bytes_unsafe_get(b, last$5))){var i$6 = last$5 + 1 | 0; i = i$6; continue;}
       return 0;
      }
     }
     return 0;
    }
   }
   function get_utf_16be_uchar(b, i){
    var max = caml_ml_bytes_length(b) - 1 | 0;
    if(0 <= i && max >= i){
     if(i === max) return dec_invalid(1);
     var hi = unsafe_get_uint16_be(b, i);
     if(55296 <= hi && 57343 >= hi){
      if(56319 < hi) return dec_invalid(2);
      var last = i + 3 | 0;
      if(max < last) return dec_invalid((max - i | 0) + 1 | 0);
      var lo = unsafe_get_uint16_be(b, i + 2 | 0);
      if(56320 <= lo && 57343 >= lo){
       var u = ((hi & 1023) << 10 | lo & 1023) + 65536 | 0;
       return dec_ret(4, u);
      }
      return dec_invalid(2);
     }
     return dec_ret(2, hi);
    }
    return Stdlib[1].call(null, cst_index_out_of_bounds);
   }
   function set_utf_16be_uchar(b, i, u){
    var max = caml_ml_bytes_length(b) - 1 | 0;
    if(0 <= i && max >= i){
     var u$0 = Stdlib_Uchar[10].call(null, u);
     if(0 > u$0) throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
     if(65535 >= u$0){
      var last$0 = i + 1 | 0;
      return max < last$0 ? 0 : (unsafe_set_uint16_be(b, i, u$0), 2);
     }
     if(1114111 < u$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
     var last = i + 3 | 0;
     if(max < last) return 0;
     var
      u$1 = u$0 - 65536 | 0,
      hi = 55296 | u$1 >>> 10 | 0,
      lo = 56320 | u$1 & 1023;
     unsafe_set_uint16_be(b, i, hi);
     unsafe_set_uint16_be(b, i + 2 | 0, lo);
     return 4;
    }
    return Stdlib[1].call(null, cst_index_out_of_bounds$0);
   }
   function is_valid_utf_16be(b){
    var max = caml_ml_bytes_length(b) - 1 | 0, i = 0;
    for(;;){
     if(max < i) return 1;
     if(i === max) return 0;
     var u = unsafe_get_uint16_be(b, i);
     if(55296 <= u && 57343 >= u){
      if(56319 < u) return 0;
      var last = i + 3 | 0;
      if(max < last) return 0;
      var u$0 = unsafe_get_uint16_be(b, i + 2 | 0);
      if(56320 <= u$0 && 57343 >= u$0){
       var i$1 = i + 4 | 0;
       i = i$1;
       continue;
      }
      return 0;
     }
     var i$0 = i + 2 | 0;
     i = i$0;
    }
   }
   function get_utf_16le_uchar(b, i){
    var max = caml_ml_bytes_length(b) - 1 | 0;
    if(0 <= i && max >= i){
     if(i === max) return dec_invalid(1);
     var hi = unsafe_get_uint16_le(b, i);
     if(55296 <= hi && 57343 >= hi){
      if(56319 < hi) return dec_invalid(2);
      var last = i + 3 | 0;
      if(max < last) return dec_invalid((max - i | 0) + 1 | 0);
      var lo = unsafe_get_uint16_le(b, i + 2 | 0);
      if(56320 <= lo && 57343 >= lo){
       var u = ((hi & 1023) << 10 | lo & 1023) + 65536 | 0;
       return dec_ret(4, u);
      }
      return dec_invalid(2);
     }
     return dec_ret(2, hi);
    }
    return Stdlib[1].call(null, cst_index_out_of_bounds$1);
   }
   function set_utf_16le_uchar(b, i, u){
    var max = caml_ml_bytes_length(b) - 1 | 0;
    if(0 <= i && max >= i){
     var u$0 = Stdlib_Uchar[10].call(null, u);
     if(0 > u$0) throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
     if(65535 >= u$0){
      var last$0 = i + 1 | 0;
      return max < last$0 ? 0 : (unsafe_set_uint16_le(b, i, u$0), 2);
     }
     if(1114111 < u$0)
      throw caml_maybe_attach_backtrace([0, Assert_failure, e], 1);
     var last = i + 3 | 0;
     if(max < last) return 0;
     var
      u$1 = u$0 - 65536 | 0,
      hi = 55296 | u$1 >>> 10 | 0,
      lo = 56320 | u$1 & 1023;
     unsafe_set_uint16_le(b, i, hi);
     unsafe_set_uint16_le(b, i + 2 | 0, lo);
     return 4;
    }
    return Stdlib[1].call(null, cst_index_out_of_bounds$2);
   }
   function is_valid_utf_16le(b){
    var max = caml_ml_bytes_length(b) - 1 | 0, i = 0;
    for(;;){
     if(max < i) return 1;
     if(i === max) return 0;
     var u = unsafe_get_uint16_le(b, i);
     if(55296 <= u && 57343 >= u){
      if(56319 < u) return 0;
      var last = i + 3 | 0;
      if(max < last) return 0;
      var u$0 = unsafe_get_uint16_le(b, i + 2 | 0);
      if(56320 <= u$0 && 57343 >= u$0){
       var i$1 = i + 4 | 0;
       i = i$1;
       continue;
      }
      return 0;
     }
     var i$0 = i + 2 | 0;
     i = i$0;
    }
   }
   var
    Stdlib_Bytes =
      [0,
       make,
       init,
       empty,
       copy,
       of_string,
       to_string,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit_string,
       concat,
       cat,
       iter,
       iteri,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       compare,
       runtime.caml_bytes_equal,
       starts_with,
       ends_with,
       caml_string_of_bytes,
       caml_bytes_of_string,
       split_on_char,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       set_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       set_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       set_utf_16le_uchar,
       is_valid_utf_16le,
       caml_bytes_get,
       get_int8,
       caml_bytes_get16,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       caml_bytes_get32,
       get_int32_be,
       get_int32_le,
       caml_bytes_get64,
       get_int64_be,
       get_int64_le,
       set_uint8,
       caml_bytes_set,
       set_uint16_ne,
       set_int16_be,
       set_int16_le,
       caml_bytes_set16,
       set_int16_be,
       set_int16_le,
       caml_bytes_set32,
       set_int32_be,
       set_int32_le,
       caml_bytes_set64,
       set_int64_be,
       set_int64_le,
       unsafe_escape];
   runtime.caml_register_global(30, Stdlib_Bytes, "Stdlib__Bytes");
   return;
  }
  (globalThis));

//# 5069 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__String:[F(2),F(2),N,F(1),F(1),F(5),F(2),F(2)*,F(2)*,F(2)*,F(2),F(2),F(3),F(3),F(2),F(3),F(2),F(2),F(2),F(3),F(3),F(2),F(2),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(2),F(3),F(3),F(3),F(3),F(2),F(2),F(2),F(2),F(1)*,F(1)*,F(1),F(2),F(1),F(2),F(1),F(2),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(1),F(2),F(2),F(2),F(2),F(2),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    caml_blit_string = runtime.caml_blit_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_hash = runtime.caml_string_hash,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    empty = cst$0,
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    bts = Stdlib_Bytes[44],
    bos = Stdlib_Bytes[45];
   function make(n, c){return bts(Stdlib_Bytes[1].call(null, n, c));}
   function init(n, f){return bts(Stdlib_Bytes[2].call(null, n, f));}
   var of_bytes = Stdlib_Bytes[6], to_bytes = Stdlib_Bytes[5];
   function sub(s, ofs, len){
    var a = bos(s);
    return bts(Stdlib_Bytes[7].call(null, a, ofs, len));
   }
   var blit = Stdlib_Bytes[12], cst_String_concat = "String.concat";
   function concat(sep, l){
    if(! l) return cst;
    var seplen = caml_ml_string_length(sep);
    a:
    {
     var acc = 0, param = l, pos$1 = 0;
     for(;;){
      if(! param){var a = acc; break a;}
      var hd = param[1];
      if(! param[2]) break;
      var
       tl = param[2],
       x = (caml_ml_string_length(hd) + seplen | 0) + acc | 0;
      if(acc <= x){
       acc = x;
       param = tl;
      }
      else{acc = Stdlib[1].call(null, cst_String_concat); param = tl;}
     }
     var a = caml_ml_string_length(hd) + acc | 0;
    }
    var dst = runtime.caml_create_bytes(a), pos = pos$1, param$0 = l;
    for(;;){
     if(param$0){
      var hd$0 = param$0[1];
      if(param$0[2]){
       var tl$0 = param$0[2];
       caml_blit_string(hd$0, 0, dst, pos, caml_ml_string_length(hd$0));
       caml_blit_string
        (sep, 0, dst, pos + caml_ml_string_length(hd$0) | 0, seplen);
       var pos$0 = (pos + caml_ml_string_length(hd$0) | 0) + seplen | 0;
       pos = pos$0;
       param$0 = tl$0;
       continue;
      }
      caml_blit_string(hd$0, 0, dst, pos, caml_ml_string_length(hd$0));
     }
     return bts(dst);
    }
   }
   var
    cat = Stdlib[28],
    cst_String_index_from_Bytes_in = "String.index_from / Bytes.index_from",
    cst_String_index_from_opt_Byte =
      "String.index_from_opt / Bytes.index_from_opt",
    cst_String_rindex_from_Bytes_r = "String.rindex_from / Bytes.rindex_from",
    cst_String_rindex_from_opt_Byt =
      "String.rindex_from_opt / Bytes.rindex_from_opt",
    cst_String_contains_from_Bytes =
      "String.contains_from / Bytes.contains_from",
    cst_String_rcontains_from_Byte =
      "String.rcontains_from / Bytes.rcontains_from";
   function iter(f, s){
    var a = caml_ml_string_length(s) - 1 | 0, b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_call1(f, caml_string_unsafe_get(s, i));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return 0;
   }
   function iteri(f, s){
    var a = caml_ml_string_length(s) - 1 | 0, b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_call2(f, i, caml_string_unsafe_get(s, i));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return 0;
   }
   function map(f, s){
    var a = bos(s);
    return bts(Stdlib_Bytes[17].call(null, f, a));
   }
   function mapi(f, s){
    var a = bos(s);
    return bts(Stdlib_Bytes[18].call(null, f, a));
   }
   function fold_right(f, x, a){
    var b = bos(x);
    return Stdlib_Bytes[20].call(null, f, b, a);
   }
   function fold_left(f, a, x){
    var b = bos(x);
    return Stdlib_Bytes[19].call(null, f, a, b);
   }
   function exists(f, s){
    var a = bos(s);
    return Stdlib_Bytes[22].call(null, f, a);
   }
   function for_all(f, s){
    var a = bos(s);
    return Stdlib_Bytes[21].call(null, f, a);
   }
   function is_space(param){
    var a = param - 9 | 0;
    a:
    {
     if(4 < a >>> 0){if(23 !== a) break a;} else if(2 === a) break a;
     return 1;
    }
    return 0;
   }
   function trim(s){
    if(s === cst$0) return s;
    if
     (!
      is_space(caml_string_unsafe_get(s, 0))
      &&
       !
       is_space(caml_string_unsafe_get(s, caml_ml_string_length(s) - 1 | 0)))
     return s;
    var a = bos(s);
    return bts(Stdlib_Bytes[23].call(null, a));
   }
   function escaped(s){
    var b = bos(s), b$0 = Stdlib_Bytes[87].call(null, b);
    return b === b$0 ? s : bts(b$0);
   }
   function index_rec(s, lim, i$1, c){
    var i = i$1;
    for(;;){
     if(lim <= i) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(caml_string_unsafe_get(s, i) === c) return i;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function index(s, c){return index_rec(s, caml_ml_string_length(s), 0, c);}
   function index_rec_opt(s, lim, i$1, c){
    var i = i$1;
    for(;;){
     if(lim <= i) return 0;
     if(caml_string_unsafe_get(s, i) === c) return [0, i];
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function index_opt(s, c){
    return index_rec_opt(s, caml_ml_string_length(s), 0, c);
   }
   function index_from(s, i, c){
    var l = caml_ml_string_length(s);
    if(0 <= i && l >= i) return index_rec(s, l, i, c);
    return Stdlib[1].call(null, cst_String_index_from_Bytes_in);
   }
   function index_from_opt(s, i, c){
    var l = caml_ml_string_length(s);
    if(0 <= i && l >= i) return index_rec_opt(s, l, i, c);
    return Stdlib[1].call(null, cst_String_index_from_opt_Byte);
   }
   function rindex_rec(s, i$1, c){
    var i = i$1;
    for(;;){
     if(0 > i) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(caml_string_unsafe_get(s, i) === c) return i;
     var i$0 = i - 1 | 0;
     i = i$0;
    }
   }
   function rindex(s, c){
    return rindex_rec(s, caml_ml_string_length(s) - 1 | 0, c);
   }
   function rindex_from(s, i, c){
    if(-1 <= i && caml_ml_string_length(s) > i) return rindex_rec(s, i, c);
    return Stdlib[1].call(null, cst_String_rindex_from_Bytes_r);
   }
   function rindex_rec_opt(s, i$1, c){
    var i = i$1;
    for(;;){
     if(0 > i) return 0;
     if(caml_string_unsafe_get(s, i) === c) return [0, i];
     var i$0 = i - 1 | 0;
     i = i$0;
    }
   }
   function rindex_opt(s, c){
    return rindex_rec_opt(s, caml_ml_string_length(s) - 1 | 0, c);
   }
   function rindex_from_opt(s, i, c){
    if(-1 <= i && caml_ml_string_length(s) > i)
     return rindex_rec_opt(s, i, c);
    return Stdlib[1].call(null, cst_String_rindex_from_opt_Byt);
   }
   function contains_from(s, i, c){
    var l = caml_ml_string_length(s);
    if(0 <= i && l >= i)
     try{index_rec(s, l, i, c); var a = 1; return a;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    return Stdlib[1].call(null, cst_String_contains_from_Bytes);
   }
   function contains(s, c){return contains_from(s, 0, c);}
   function rcontains_from(s, i, c){
    if(0 <= i && caml_ml_string_length(s) > i)
     try{rindex_rec(s, i, c); var a = 1; return a;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn === Stdlib[8]) return 0;
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    return Stdlib[1].call(null, cst_String_rcontains_from_Byte);
   }
   function uppercase_ascii(s){
    var a = bos(s);
    return bts(Stdlib_Bytes[36].call(null, a));
   }
   function lowercase_ascii(s){
    var a = bos(s);
    return bts(Stdlib_Bytes[37].call(null, a));
   }
   function capitalize_ascii(s){
    var a = bos(s);
    return bts(Stdlib_Bytes[38].call(null, a));
   }
   function uncapitalize_ascii(s){
    var a = bos(s);
    return bts(Stdlib_Bytes[39].call(null, a));
   }
   function starts_with(prefix, s){
    var
     len_s = caml_ml_string_length(s),
     len_pre = caml_ml_string_length(prefix),
     a = len_pre <= len_s ? 1 : 0;
    if(! a) return a;
    var i = 0;
    for(;;){
     if(i === len_pre) return 1;
     if(caml_string_unsafe_get(s, i) !== caml_string_unsafe_get(prefix, i))
      return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function ends_with(suffix, s){
    var
     len_s = caml_ml_string_length(s),
     len_suf = caml_ml_string_length(suffix),
     diff = len_s - len_suf | 0,
     a = 0 <= diff ? 1 : 0;
    if(! a) return a;
    var i = 0;
    for(;;){
     if(i === len_suf) return 1;
     if
      (caml_string_unsafe_get(s, diff + i | 0)
       !== caml_string_unsafe_get(suffix, i))
      return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function hash(x){return caml_string_hash(0, x);}
   function split_on_char(sep, s){
    var
     r = [0, 0],
     j = [0, caml_ml_string_length(s)],
     a = caml_ml_string_length(s) - 1 | 0;
    if(a >= 0){
     var i = a;
     for(;;){
      if(caml_string_unsafe_get(s, i) === sep){
       var c = r[1];
       r[1] = [0, sub(s, i + 1 | 0, (j[1] - i | 0) - 1 | 0), c];
       j[1] = i;
      }
      var d = i - 1 | 0;
      if(0 === i) break;
      i = d;
     }
    }
    var b = r[1];
    return [0, sub(s, 0, j[1]), b];
   }
   var compare = runtime.caml_string_compare;
   function to_seq(s){var a = bos(s); return Stdlib_Bytes[47].call(null, a);}
   function to_seqi(s){var a = bos(s); return Stdlib_Bytes[48].call(null, a);}
   function of_seq(g){return bts(Stdlib_Bytes[49].call(null, g));}
   function get_utf_8_uchar(s, i){
    var a = bos(s);
    return Stdlib_Bytes[50].call(null, a, i);
   }
   function is_valid_utf_8(s){
    var a = bos(s);
    return Stdlib_Bytes[52].call(null, a);
   }
   function get_utf_16be_uchar(s, i){
    var a = bos(s);
    return Stdlib_Bytes[53].call(null, a, i);
   }
   function is_valid_utf_16be(s){
    var a = bos(s);
    return Stdlib_Bytes[55].call(null, a);
   }
   function get_utf_16le_uchar(s, i){
    var a = bos(s);
    return Stdlib_Bytes[56].call(null, a, i);
   }
   function is_valid_utf_16le(s){
    var a = bos(s);
    return Stdlib_Bytes[58].call(null, a);
   }
   function get_int8(s, i){
    var a = bos(s);
    return Stdlib_Bytes[60].call(null, a, i);
   }
   function get_uint16_le(s, i){
    var a = bos(s);
    return Stdlib_Bytes[63].call(null, a, i);
   }
   function get_uint16_be(s, i){
    var a = bos(s);
    return Stdlib_Bytes[62].call(null, a, i);
   }
   function get_int16_ne(s, i){
    var a = bos(s);
    return Stdlib_Bytes[64].call(null, a, i);
   }
   function get_int16_le(s, i){
    var a = bos(s);
    return Stdlib_Bytes[66].call(null, a, i);
   }
   function get_int16_be(s, i){
    var a = bos(s);
    return Stdlib_Bytes[65].call(null, a, i);
   }
   function get_int32_le(s, i){
    var a = bos(s);
    return Stdlib_Bytes[69].call(null, a, i);
   }
   function get_int32_be(s, i){
    var a = bos(s);
    return Stdlib_Bytes[68].call(null, a, i);
   }
   function get_int64_le(s, i){
    var a = bos(s);
    return Stdlib_Bytes[72].call(null, a, i);
   }
   function get_int64_be(s, i){
    var a = bos(s);
    return Stdlib_Bytes[71].call(null, a, i);
   }
   var
    Stdlib_String =
      [0,
       make,
       init,
       empty,
       of_bytes,
       to_bytes,
       blit,
       concat,
       cat,
       caml_string_equal,
       compare,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       is_valid_utf_16le,
       runtime.caml_string_get,
       get_int8,
       runtime.caml_string_get16,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       runtime.caml_string_get32,
       hash,
       caml_string_hash,
       get_int32_be,
       get_int32_le,
       runtime.caml_string_get64,
       get_int64_be,
       get_int64_le];
   runtime.caml_register_global(12, Stdlib_String, "Stdlib__String");
   return;
  }
  (globalThis));

//# 5610 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Array:[F(2),F(3),F(3),F(2)*,F(1)*,F(3),F(1)*,F(4),F(5),F(1),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(3),F(3),F(3),F(3),F(3),F(2),F(2),F(3),F(3),F(2),F(2),F(2),F(2),F(2),F(2),F(1),F(2),F(2),F(2),F(2),F(2),F(1)*->F(1)*,F(1)*->F(1)*,F(1),[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_array_make = runtime.caml_array_make,
    caml_array_sub = runtime.caml_array_sub,
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Assert_failure = global_data.Assert_failure,
    Floatarray = [0],
    cst_Array_init = "Array.init",
    cst_Array_make_matrix = "Array.make_matrix",
    cst_Array_init_matrix = "Array.init_matrix",
    cst_Array_sub = "Array.sub",
    cst_Array_fill = "Array.fill",
    cst_Array_blit = "Array.blit",
    cst_Array_iter2_arrays_must_ha =
      "Array.iter2: arrays must have the same length",
    cst_Array_map2_arrays_must_hav =
      "Array.map2: arrays must have the same length",
    cst_Array_for_all2 = "Array.for_all2",
    cst_Array_exists2 = "Array.exists2",
    cst_Array_combine = "Array.combine";
   function init(l, f){
    if(0 === l) return [0];
    if(0 > l) return Stdlib[1].call(null, cst_Array_init);
    var res = caml_array_make(l, caml_call1(f, 0)), a = l - 1 | 0, b = 1;
    if(a >= 1){
     var i = b;
     for(;;){
      res[i + 1] = caml_call1(f, i);
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return res;
   }
   function make_matrix(sx, sy, init){
    if(sy < 0) Stdlib[1].call(null, cst_Array_make_matrix);
    var res = caml_array_make(sx, [0]);
    if(0 < sy){
     var a = sx - 1 | 0, b = 0;
     if(a >= 0){
      var x = b;
      for(;;){
       res[x + 1] = caml_array_make(sy, init);
       var c = x + 1 | 0;
       if(a === x) break;
       x = c;
      }
     }
    }
    return res;
   }
   function init_matrix(sx, sy, f){
    if(sy < 0) Stdlib[1].call(null, cst_Array_init_matrix);
    var res = caml_array_make(sx, [0]);
    if(0 < sy){
     var a = sx - 1 | 0, c = 0;
     if(a >= 0){
      var x = c;
      for(;;){
       var
        row = caml_array_make(sy, caml_call2(f, x, 0)),
        b = sy - 1 | 0,
        d = 1;
       if(b >= 1){
        var y = d;
        for(;;){
         row[y + 1] = caml_call2(f, x, y);
         var g = y + 1 | 0;
         if(b === y) break;
         y = g;
        }
       }
       res[x + 1] = row;
       var e = x + 1 | 0;
       if(a === x) break;
       x = e;
      }
     }
    }
    return res;
   }
   function copy(a){
    var l = a.length - 1;
    return 0 === l ? [0] : caml_array_sub(a, 0, l);
   }
   function append(a1, a2){
    var l1 = a1.length - 1;
    return 0 === l1
            ? copy(a2)
            : 0
              === a2.length - 1
              ? caml_array_sub(a1, 0, l1)
              : runtime.caml_array_append(a1, a2);
   }
   function sub(a, ofs, len){
    if(0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs)
     return caml_array_sub(a, ofs, len);
    return Stdlib[1].call(null, cst_Array_sub);
   }
   function fill(a, ofs, len, v){
    if(0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs)
     return runtime.caml_array_fill(a, ofs, len, v);
    return Stdlib[1].call(null, cst_Array_fill);
   }
   function blit(a1, ofs1, a2, ofs2, len){
    if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (a1.length - 1 - len | 0) >= ofs1
        && 0 <= ofs2 && (a2.length - 1 - len | 0) >= ofs2)
     return runtime.caml_array_blit(a1, ofs1, a2, ofs2, len);
    return Stdlib[1].call(null, cst_Array_blit);
   }
   function iter(f, a){
    var b = a.length - 2 | 0, c = 0;
    if(b >= 0){
     var i = c;
     for(;;){
      caml_call1(f, a[i + 1]);
      var d = i + 1 | 0;
      if(b === i) break;
      i = d;
     }
    }
    return 0;
   }
   function iter2(f, a, b){
    if(a.length - 1 !== b.length - 1)
     return Stdlib[1].call(null, cst_Array_iter2_arrays_must_ha);
    var c = a.length - 2 | 0, d = 0;
    if(c >= 0){
     var i = d;
     for(;;){
      caml_call2(f, a[i + 1], b[i + 1]);
      var e = i + 1 | 0;
      if(c === i) break;
      i = e;
     }
    }
    return 0;
   }
   function map(f, a){
    var l = a.length - 1;
    if(0 === l) return [0];
    var r = caml_array_make(l, caml_call1(f, a[1])), b = l - 1 | 0, c = 1;
    if(b >= 1){
     var i = c;
     for(;;){
      r[i + 1] = caml_call1(f, a[i + 1]);
      var d = i + 1 | 0;
      if(b === i) break;
      i = d;
     }
    }
    return r;
   }
   function map_inplace(f, a){
    var b = a.length - 2 | 0, c = 0;
    if(b >= 0){
     var i = c;
     for(;;){
      a[i + 1] = caml_call1(f, a[i + 1]);
      var d = i + 1 | 0;
      if(b === i) break;
      i = d;
     }
    }
    return 0;
   }
   function mapi_inplace(f, a){
    var b = a.length - 2 | 0, c = 0;
    if(b >= 0){
     var i = c;
     for(;;){
      a[i + 1] = caml_call2(f, i, a[i + 1]);
      var d = i + 1 | 0;
      if(b === i) break;
      i = d;
     }
    }
    return 0;
   }
   function map2(f, a, b){
    var la = a.length - 1, lb = b.length - 1;
    if(la !== lb) return Stdlib[1].call(null, cst_Array_map2_arrays_must_hav);
    if(0 === la) return [0];
    var
     r = caml_array_make(la, caml_call2(f, a[1], b[1])),
     c = la - 1 | 0,
     d = 1;
    if(c >= 1){
     var i = d;
     for(;;){
      r[i + 1] = caml_call2(f, a[i + 1], b[i + 1]);
      var e = i + 1 | 0;
      if(c === i) break;
      i = e;
     }
    }
    return r;
   }
   function iteri(f, a){
    var b = a.length - 2 | 0, c = 0;
    if(b >= 0){
     var i = c;
     for(;;){
      caml_call2(f, i, a[i + 1]);
      var d = i + 1 | 0;
      if(b === i) break;
      i = d;
     }
    }
    return 0;
   }
   function mapi(f, a){
    var l = a.length - 1;
    if(0 === l) return [0];
    var r = caml_array_make(l, caml_call2(f, 0, a[1])), b = l - 1 | 0, c = 1;
    if(b >= 1){
     var i = c;
     for(;;){
      r[i + 1] = caml_call2(f, i, a[i + 1]);
      var d = i + 1 | 0;
      if(b === i) break;
      i = d;
     }
    }
    return r;
   }
   function to_list(a){
    var i$1 = a.length - 2 | 0, i = i$1, res = 0;
    for(;;){
     if(0 > i) return res;
     var res$0 = [0, a[i + 1], res], i$0 = i - 1 | 0;
     i = i$0;
     res = res$0;
    }
   }
   function list_length(accu$1, param$0){
    var accu = accu$1, param = param$0;
    for(;;){
     if(! param) return accu;
     var t = param[2], accu$0 = accu + 1 | 0;
     accu = accu$0;
     param = t;
    }
   }
   function of_list(l){
    if(! l) return [0];
    var
     tl = l[2],
     hd = l[1],
     a = caml_array_make(list_length(0, l), hd),
     i = 1,
     param = tl;
    for(;;){
     if(! param) return a;
     var tl$0 = param[2], hd$0 = param[1];
     a[i + 1] = hd$0;
     var i$0 = i + 1 | 0;
     i = i$0;
     param = tl$0;
    }
   }
   function fold_left(f, x, a){
    var r = [0, x], b = a.length - 2 | 0, c = 0;
    if(b >= 0){
     var i = c;
     for(;;){
      r[1] = caml_call2(f, r[1], a[i + 1]);
      var d = i + 1 | 0;
      if(b === i) break;
      i = d;
     }
    }
    return r[1];
   }
   function fold_left_map(f, acc, input_array){
    var len = input_array.length - 1;
    if(0 === len) return [0, acc, [0]];
    var
     match = caml_call2(f, acc, input_array[1]),
     elt = match[2],
     acc$0 = match[1],
     output_array = caml_array_make(len, elt),
     acc$1 = [0, acc$0],
     a = len - 1 | 0,
     b = 1;
    if(a >= 1){
     var i = b;
     for(;;){
      var
       match$0 = caml_call2(f, acc$1[1], input_array[i + 1]),
       elt$0 = match$0[2],
       acc$2 = match$0[1];
      acc$1[1] = acc$2;
      output_array[i + 1] = elt$0;
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return [0, acc$1[1], output_array];
   }
   function fold_right(f, a, x){
    var r = [0, x], b = a.length - 2 | 0;
    if(b >= 0){
     var i = b;
     for(;;){
      r[1] = caml_call2(f, a[i + 1], r[1]);
      var c = i - 1 | 0;
      if(0 === i) break;
      i = c;
     }
    }
    return r[1];
   }
   function exists(p, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     if(caml_call1(p, a[i + 1])) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function for_all(p, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 1;
     if(! caml_call1(p, a[i + 1])) return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function for_all2(p, l1, l2){
    var n1 = l1.length - 1, n2 = l2.length - 1;
    if(n1 !== n2) return Stdlib[1].call(null, cst_Array_for_all2);
    var i = 0;
    for(;;){
     if(i === n1) return 1;
     if(! caml_call2(p, l1[i + 1], l2[i + 1])) return 0;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function exists2(p, l1, l2){
    var n1 = l1.length - 1, n2 = l2.length - 1;
    if(n1 !== n2) return Stdlib[1].call(null, cst_Array_exists2);
    var i = 0;
    for(;;){
     if(i === n1) return 0;
     if(caml_call2(p, l1[i + 1], l2[i + 1])) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function mem(x, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     if(0 === runtime.caml_compare(a[i + 1], x)) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function memq(x, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     if(x === a[i + 1]) return 1;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function find_opt(p, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     var x = a[i + 1];
     if(caml_call1(p, x)) return [0, x];
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function find_index(p, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     if(caml_call1(p, a[i + 1])) return [0, i];
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function find_map(f, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     var r = caml_call1(f, a[i + 1]);
     if(r) return r;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function find_mapi(f, a){
    var n = a.length - 1, i = 0;
    for(;;){
     if(i === n) return 0;
     var r = caml_call2(f, i, a[i + 1]);
     if(r) return r;
     var i$0 = i + 1 | 0;
     i = i$0;
    }
   }
   function split(x){
    if(runtime.caml_equal(x, [0])) return [0, [0], [0]];
    var
     match = x[1],
     b0 = match[2],
     a0 = match[1],
     n = x.length - 1,
     a = caml_array_make(n, a0),
     b = caml_array_make(n, b0),
     c = n - 1 | 0,
     d = 1;
    if(c >= 1){
     var i = d;
     for(;;){
      var match$0 = x[i + 1], bi = match$0[2], ai = match$0[1];
      a[i + 1] = ai;
      b[i + 1] = bi;
      var e = i + 1 | 0;
      if(c === i) break;
      i = e;
     }
    }
    return [0, a, b];
   }
   function combine(a, b){
    var na = a.length - 1, nb = b.length - 1;
    if(na !== nb) Stdlib[1].call(null, cst_Array_combine);
    if(0 === na) return [0];
    var x = caml_array_make(na, [0, a[1], b[1]]), c = na - 1 | 0, d = 1;
    if(c >= 1){
     var i = d;
     for(;;){
      x[i + 1] = [0, a[i + 1], b[i + 1]];
      var e = i + 1 | 0;
      if(c === i) break;
      i = e;
     }
    }
    return x;
   }
   var
    Bottom = [248, "Stdlib.Array.Bottom", runtime.caml_fresh_oo_id(0)],
    a = [0, "array.ml", 369, 4],
    b = [0, "]", 0],
    cst_out_of_expected_range_0 = ", out of expected range [0; ",
    cst_returned = "' returned ",
    cst_Array_shuffle_rand = "Array.shuffle: 'rand ";
   function sort(cmp, a$0){
    function maxson(l, i){
     var i31 = ((i + i | 0) + i | 0) + 1 | 0, x = [0, i31];
     if((i31 + 2 | 0) < l){
      var a = i31 + 1 | 0, e = caml_check_bound(a$0, a)[a + 1];
      if(caml_call2(cmp, caml_check_bound(a$0, i31)[i31 + 1], e) < 0)
       x[1] = i31 + 1 | 0;
      var b = i31 + 2 | 0, f = caml_check_bound(a$0, b)[b + 1], c = x[1];
      if(caml_call2(cmp, caml_check_bound(a$0, c)[c + 1], f) < 0)
       x[1] = i31 + 2 | 0;
      return x[1];
     }
     if((i31 + 1 | 0) < l){
      var d = i31 + 1 | 0, g = caml_check_bound(a$0, d)[d + 1];
      if(0 > caml_call2(cmp, caml_check_bound(a$0, i31)[i31 + 1], g))
       return i31 + 1 | 0;
     }
     if(i31 < l) return i31;
     throw caml_maybe_attach_backtrace([0, Bottom, i], 1);
    }
    var l = a$0.length - 1, b = ((l + 1 | 0) / 3 | 0) - 1 | 0;
    if(b >= 0){
     var i$6 = b;
     for(;;){
      var e$1 = caml_check_bound(a$0, i$6)[i$6 + 1];
      try{
       var i = i$6;
       for(;;){
        var j = maxson(l, i);
        if(0 >= caml_call2(cmp, caml_check_bound(a$0, j)[j + 1], e$1)){caml_check_bound(a$0, i)[i + 1] = e$1; break;}
        var g = caml_check_bound(a$0, j)[j + 1];
        caml_check_bound(a$0, i)[i + 1] = g;
        i = j;
       }
      }
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0), tag = exn[1];
       if(tag !== Bottom) throw caml_maybe_attach_backtrace(exn, 0);
       var i$0 = exn[2];
       caml_check_bound(a$0, i$0)[i$0 + 1] = e$1;
      }
      var n = i$6 - 1 | 0;
      if(0 === i$6) break;
      i$6 = n;
     }
    }
    var c = l - 1 | 0;
    if(c >= 2){
     var i$4 = c;
     a:
     for(;;){
      var e$0 = caml_check_bound(a$0, i$4)[i$4 + 1];
      a$0[i$4 + 1] = caml_check_bound(a$0, 0)[1];
      var i$5 = 0;
      try{
       var i$1 = i$5;
       for(;;){
        var j$0 = maxson(i$4, i$1), h = caml_check_bound(a$0, j$0)[j$0 + 1];
        caml_check_bound(a$0, i$1)[i$1 + 1] = h;
        i$1 = j$0;
       }
      }
      catch(exn){
       var exn$0 = caml_wrap_exception(exn), tag$0 = exn$0[1];
       if(tag$0 !== Bottom) throw caml_maybe_attach_backtrace(exn$0, 0);
       var i$2 = exn$0[2], i$3 = i$2;
       for(;;){
        var father = (i$3 - 1 | 0) / 3 | 0;
        if(i$3 === father)
         throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
        if
         (0 <= caml_call2(cmp, caml_check_bound(a$0, father)[father + 1], e$0))
         caml_check_bound(a$0, i$3)[i$3 + 1] = e$0;
        else{
         var k = caml_check_bound(a$0, father)[father + 1];
         caml_check_bound(a$0, i$3)[i$3 + 1] = k;
         if(0 < father){i$3 = father; continue;}
         caml_check_bound(a$0, 0)[1] = e$0;
        }
        var m = i$4 - 1 | 0;
        if(2 === i$4) break a;
        i$4 = m;
        break;
       }
      }
     }
    }
    var d = 1 < l ? 1 : 0;
    if(d){
     var e = caml_check_bound(a$0, 1)[2];
     a$0[2] = caml_check_bound(a$0, 0)[1];
     a$0[1] = e;
     var f = 0;
    }
    else
     var f = d;
    return f;
   }
   function stable_sort(cmp, a){
    function merge(src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs){
     var
      src1r = src1ofs + src1len | 0,
      src2r = src2ofs + src2len | 0,
      s2$1 = caml_check_bound(src2, src2ofs)[src2ofs + 1],
      s1$1 = caml_check_bound(a, src1ofs)[src1ofs + 1],
      i1 = src1ofs,
      s1 = s1$1,
      i2 = src2ofs,
      s2 = s2$1,
      d = dstofs;
     for(;;)
      if(0 < caml_call2(cmp, s1, s2)){
       caml_check_bound(dst, d)[d + 1] = s2;
       var i2$0 = i2 + 1 | 0;
       if(i2$0 >= src2r) return blit(a, i1, dst, d + 1 | 0, src1r - i1 | 0);
       var d$0 = d + 1 | 0, s2$0 = caml_check_bound(src2, i2$0)[i2$0 + 1];
       i2 = i2$0;
       s2 = s2$0;
       d = d$0;
      }
      else{
       caml_check_bound(dst, d)[d + 1] = s1;
       var i1$0 = i1 + 1 | 0;
       if(i1$0 >= src1r)
        return blit(src2, i2, dst, d + 1 | 0, src2r - i2 | 0);
       var d$1 = d + 1 | 0, s1$0 = caml_check_bound(a, i1$0)[i1$0 + 1];
       i1 = i1$0;
       s1 = s1$0;
       d = d$1;
      }
    }
    function isortto(srcofs, dst, dstofs, len){
     var b = len - 1 | 0, k = 0;
     if(b >= 0){
      var i = k;
      a:
      for(;;){
       var
        c = srcofs + i | 0,
        e = caml_check_bound(a, c)[c + 1],
        j = [0, (dstofs + i | 0) - 1 | 0];
       for(;;){
        if(dstofs <= j[1]){
         var d = j[1];
         if(0 < caml_call2(cmp, caml_check_bound(dst, d)[d + 1], e)){
          var f = j[1], l = caml_check_bound(dst, f)[f + 1], g = j[1] + 1 | 0;
          caml_check_bound(dst, g)[g + 1] = l;
          j[1]--;
          continue;
         }
        }
        var h = j[1] + 1 | 0;
        caml_check_bound(dst, h)[h + 1] = e;
        var m = i + 1 | 0;
        if(b === i) break a;
        i = m;
        break;
       }
      }
     }
     return 0;
    }
    function sortto(srcofs, dst, dstofs, len){
     if(len <= 5) return isortto(srcofs, dst, dstofs, len);
     var l1 = len / 2 | 0, l2 = len - l1 | 0;
     sortto(srcofs + l1 | 0, dst, dstofs + l1 | 0, l2);
     sortto(srcofs, a, srcofs + l2 | 0, l1);
     return merge(srcofs + l2 | 0, l1, dst, dstofs + l1 | 0, l2, dst, dstofs);
    }
    var l = a.length - 1;
    if(l <= 5) return isortto(0, a, 0, l);
    var
     l1 = l / 2 | 0,
     l2 = l - l1 | 0,
     t = caml_array_make(l2, caml_check_bound(a, 0)[1]);
    sortto(l1, t, 0, l2);
    sortto(0, a, l2, l1);
    return merge(l2, l1, t, 0, l2, a, 0);
   }
   function shuffle(rand, a){
    var c = a.length - 2 | 0;
    if(c >= 1){
     var i = c;
     for(;;){
      var
       j = caml_call1(rand, i + 1 | 0),
       d = 0 <= j ? 1 : 0,
       k = d ? j <= i ? 1 : 0 : d;
      if(1 - k){
       var
        int = Stdlib[33],
        e = [0, cst_out_of_expected_range_0, [0, int(i), b]],
        f = [0, cst_returned, [0, int(j), e]],
        g = [0, cst_Array_shuffle_rand, [0, int(i + 1 | 0), f]],
        h = Stdlib_String[7].call(null, cst, g);
       Stdlib[1].call(null, h);
      }
      var v = a[i + 1];
      a[i + 1] = a[j + 1];
      a[j + 1] = v;
      var l = i - 1 | 0;
      if(1 === i) break;
      i = l;
     }
    }
    return 0;
   }
   function to_seq(a){
    function aux(i, param){
     if(i >= a.length - 1) return 0;
     var x = a[i + 1], b = i + 1 | 0;
     return [0, x, function(a){return aux(b, a);}];
    }
    var b = 0;
    return function(a){return aux(b, a);};
   }
   function to_seqi(a){
    function aux(i, param){
     if(i >= a.length - 1) return 0;
     var x = a[i + 1], b = i + 1 | 0;
     return [0, [0, i, x], function(a){return aux(b, a);}];
    }
    var b = 0;
    return function(a){return aux(b, a);};
   }
   function of_seq(i$2){
    var
     l =
       Stdlib_Seq[5].call(null, function(acc, x){return [0, x, acc];}, 0, i$2);
    if(! l) return [0];
    var
     tl = l[2],
     hd = l[1],
     len = list_length(0, l),
     a = caml_array_make(len, hd),
     i$1 = len - 2 | 0,
     i = i$1,
     param = tl;
    for(;;){
     if(! param) return a;
     var tl$0 = param[2], hd$0 = param[1];
     a[i + 1] = hd$0;
     var i$0 = i - 1 | 0;
     i = i$0;
     param = tl$0;
    }
   }
   var
    Stdlib_Array =
      [0,
       init,
       make_matrix,
       init_matrix,
       append,
       runtime.caml_array_concat,
       sub,
       copy,
       fill,
       blit,
       to_list,
       of_list,
       iter,
       iteri,
       map,
       map_inplace,
       mapi,
       mapi_inplace,
       fold_left,
       fold_left_map,
       fold_right,
       iter2,
       map2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find_opt,
       find_index,
       find_map,
       find_mapi,
       split,
       combine,
       sort,
       stable_sort,
       stable_sort,
       shuffle,
       to_seq,
       to_seqi,
       of_seq,
       Floatarray];
   runtime.caml_register_global(22, Stdlib_Array, "Stdlib__Array");
   return;
  }
  (globalThis));

//# 7255 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Int32:[N,N,N,F(2),F(2),F(1)*,F(1)*,F(1),N,N,F(1)*,F(1),F(1),F(1)*,F(2)*,F(2)*,F(2),F(2),F(2),F(2)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_hash = runtime.caml_hash,
    caml_int_compare = runtime.caml_int_compare,
    caml_lessequal = runtime.caml_lessequal,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Assert_failure = global_data.Assert_failure,
    zero = 0,
    one = 1;
   function succ(n){return n + 1 | 0;}
   function pred(n){return n - 1 | 0;}
   function abs(n){return caml_greaterequal(n, 0) ? n : - n | 0;}
   function lognot(n){return n ^ -1;}
   var
    match = Stdlib_Sys[9],
    a = [0, "int32.ml", 69, 6],
    minus_one = -1,
    min_int = -2147483648,
    max_int = 2147483647;
   if(32 === match)
    var
     max_int$0 = Stdlib[19],
     unsigned_to_int =
       function(n){
        if(caml_greaterequal(n, 0) && caml_lessequal(n, max_int$0))
         return [0, n];
        return 0;
       };
   else{
    if(64 !== match)
     throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
    var unsigned_to_int = function(n){return [0, n & -1];};
   }
   function to_string(n){return runtime.caml_format_int("%d", n);}
   function of_string_opt(s){
    try{var a = [0, runtime.caml_int_of_string(s)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag === Stdlib[7]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var compare = caml_int_compare, equal = runtime.caml_equal;
   function unsigned_compare(n, m){
    var y = m + 2147483648 | 0, x = n + 2147483648 | 0;
    return caml_int_compare(x, y);
   }
   function unsigned_lt(n, m){
    return caml_lessthan(n + 2147483648 | 0, m + 2147483648 | 0);
   }
   function min(x, y){return caml_lessequal(x, y) ? x : y;}
   function max(x, y){return caml_greaterequal(x, y) ? x : y;}
   function unsigned_div(n, d){
    if(caml_lessthan(d, 0)) return unsigned_lt(n, d) ? zero : one;
    var q = runtime.caml_div(n >>> 1 | 0, d) << 1, r = n - caml_mul(q, d) | 0;
    return unsigned_lt(r, d) ? q : q + 1 | 0;
   }
   function unsigned_rem(n, d){
    return n - caml_mul(unsigned_div(n, d), d) | 0;
   }
   function seeded_hash(seed, x){return caml_hash(10, 100, seed, x);}
   function hash(x){return caml_hash(10, 100, 0, x);}
   var
    Stdlib_Int32 =
      [0,
       zero,
       one,
       minus_one,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal,
       min,
       max,
       seeded_hash,
       hash];
   runtime.caml_register_global(15, Stdlib_Int32, "Stdlib__Int32");
   return;
  }
  (globalThis));

//# 7359 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Int64:[N,N,N,F(2),F(2),F(1)*,F(1)*,F(1),N,N,F(1)*,F(1),F(1),F(1)*,F(2)*,F(2)*,F(2),F(2),F(2),F(2)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_hash = runtime.caml_hash,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_compare = runtime.caml_int64_compare,
    caml_int64_create_lo_mi_hi = runtime.caml_int64_create_lo_mi_hi,
    caml_int64_mul = runtime.caml_int64_mul,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_lessequal = runtime.caml_lessequal,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    a = caml_int64_create_lo_mi_hi(1, 0, 0),
    zero = caml_int64_create_lo_mi_hi(0, 0, 0),
    one = caml_int64_create_lo_mi_hi(1, 0, 0),
    minus_one = caml_int64_create_lo_mi_hi(16777215, 16777215, 65535),
    min_int = caml_int64_create_lo_mi_hi(0, 0, 32768),
    max_int = caml_int64_create_lo_mi_hi(16777215, 16777215, 32767),
    Stdlib = global_data.Stdlib,
    b = caml_int64_create_lo_mi_hi(1, 0, 0),
    c = caml_int64_create_lo_mi_hi(0, 0, 0),
    d = caml_int64_create_lo_mi_hi(16777215, 16777215, 65535);
   function succ(n){return caml_int64_add(n, a);}
   function pred(n){return caml_int64_sub(n, b);}
   function abs(n){
    return caml_greaterequal(n, c) ? n : runtime.caml_int64_neg(n);
   }
   function lognot(n){return runtime.caml_int64_xor(n, d);}
   var
    max_int$0 = runtime.caml_int64_of_int32(Stdlib[19]),
    e = caml_int64_create_lo_mi_hi(0, 0, 0);
   function unsigned_to_int(n){
    if(caml_greaterequal(n, e) && caml_lessequal(n, max_int$0))
     return [0, runtime.caml_int64_to_int32(n)];
    return 0;
   }
   function to_string(n){return runtime.caml_int64_format("%d", n);}
   function of_string_opt(s){
    try{var a = [0, runtime.caml_int64_of_string(s)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag === Stdlib[7]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function compare(x, y){return caml_int64_compare(x, y);}
   var equal = runtime.caml_equal;
   function unsigned_compare(n, m){
    var y = caml_int64_sub(m, min_int), x = caml_int64_sub(n, min_int);
    return caml_int64_compare(x, y);
   }
   function unsigned_lt(n, m){
    return caml_lessthan
            (caml_int64_sub(n, min_int), caml_int64_sub(m, min_int));
   }
   function min(x, y){return caml_lessequal(x, y) ? x : y;}
   function max(x, y){return caml_greaterequal(x, y) ? x : y;}
   function unsigned_div(n, d){
    if(caml_lessthan(d, zero)) return unsigned_lt(n, d) ? zero : one;
    var
     q =
       runtime.caml_int64_shift_left
        (runtime.caml_int64_div
          (runtime.caml_int64_shift_right_unsigned(n, 1), d),
         1),
     r = caml_int64_sub(n, caml_int64_mul(q, d));
    return unsigned_lt(r, d) ? q : caml_int64_add(q, a);
   }
   function unsigned_rem(n, d){
    return caml_int64_sub(n, caml_int64_mul(unsigned_div(n, d), d));
   }
   function seeded_hash(seed, x){return caml_hash(10, 100, seed, x);}
   function hash(x){return caml_hash(10, 100, 0, x);}
   var
    Stdlib_Int64 =
      [0,
       zero,
       one,
       minus_one,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal,
       min,
       max,
       seeded_hash,
       hash];
   runtime.caml_register_global(12, Stdlib_Int64, "Stdlib__Int64");
   return;
  }
  (globalThis));

//# 7469 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Nativeint:[N,N,N,F(2),F(2),F(1)*,F(1)*,F(1),N,N,N,F(1)*,F(1),F(1),F(1)*,F(2)*,F(2)*,F(2)*,F(2),F(2),F(2)*,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_hash = runtime.caml_hash,
    caml_int_compare = runtime.caml_int_compare,
    caml_lessequal = runtime.caml_lessequal,
    caml_lessthan = runtime.caml_lessthan,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    zero = 0,
    one = 1;
   function succ(n){return n + 1 | 0;}
   function pred(n){return n - 1 | 0;}
   function abs(n){return caml_greaterequal(n, 0) ? n : - n | 0;}
   var
    size = Stdlib_Sys[9],
    min_int = 1 << (size - 1 | 0),
    max_int = min_int - 1 | 0;
   function lognot(n){return n ^ -1;}
   var max_int$0 = Stdlib[19];
   function unsigned_to_int(n){
    if(caml_greaterequal(n, 0) && caml_lessequal(n, max_int$0)) return [0, n];
    return 0;
   }
   function to_string(n){return runtime.caml_format_int("%d", n);}
   function of_string_opt(s){
    try{var a = [0, runtime.caml_int_of_string(s)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag === Stdlib[7]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var compare = caml_int_compare;
   function equal(x, y){return 0 === caml_int_compare(x, y) ? 1 : 0;}
   function unsigned_compare(n, m){
    var y = m - min_int | 0, x = n - min_int | 0;
    return caml_int_compare(x, y);
   }
   function unsigned_lt(n, m){
    return caml_lessthan(n - min_int | 0, m - min_int | 0);
   }
   function min(x, y){return caml_lessequal(x, y) ? x : y;}
   function max(x, y){return caml_greaterequal(x, y) ? x : y;}
   function unsigned_div(n, d){
    if(caml_lessthan(d, 0)) return unsigned_lt(n, d) ? zero : one;
    var q = runtime.caml_div(n >>> 1 | 0, d) << 1, r = n - caml_mul(q, d) | 0;
    return unsigned_lt(r, d) ? q : q + 1 | 0;
   }
   function unsigned_rem(n, d){
    return n - caml_mul(unsigned_div(n, d), d) | 0;
   }
   function seeded_hash(seed, x){return caml_hash(10, 100, seed, x);}
   function hash(x){return caml_hash(10, 100, 0, x);}
   var
    Stdlib_Nativeint =
      [0,
       zero,
       one,
       -1,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       size,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal,
       min,
       max,
       seeded_hash,
       hash];
   runtime.caml_register_global(13, Stdlib_Nativeint, "Stdlib__Nativeint");
   return;
  }
  (globalThis));

//# 7563 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Lexing:[N,F(2)*,F(2),F(2)*,F(2),F(2),F(1)*,F(1),F(2),F(1)*,F(1)*,F(1)*,F(1)*,F(1),F(1),F(3),F(3),F(2),F(2),F(3),F(3)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    caml_bytes_get = runtime.caml_bytes_get,
    caml_check_bound = runtime.caml_check_bound,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length;
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    dummy_pos = [0, cst, 0, 0, -1],
    zero_pos = [0, cst, 1, 0, 0],
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Int = global_data.Stdlib__Int,
    cst_Lexing_lex_refill_cannot_g = "Lexing.lex_refill: cannot grow buffer";
   function engine(tbl, state, buf){
    var
     result = runtime.caml_lex_engine(tbl, state, buf),
     b = 0 <= result ? 1 : 0,
     c = b ? buf[12] !== dummy_pos ? 1 : 0 : b;
    if(c){
     buf[11] = buf[12];
     var a = buf[12];
     buf[12] = [0, a[1], a[2], a[3], buf[4] + buf[6] | 0];
    }
    return result;
   }
   function new_engine(tbl, state, buf){
    var
     result = runtime.caml_new_lex_engine(tbl, state, buf),
     b = 0 <= result ? 1 : 0,
     c = b ? buf[12] !== dummy_pos ? 1 : 0 : b;
    if(c){
     buf[11] = buf[12];
     var a = buf[12];
     buf[12] = [0, a[1], a[2], a[3], buf[4] + buf[6] | 0];
    }
    return result;
   }
   function from_function(opt, read_fun){
    var
     with_positions = opt ? opt[1] : 1,
     a = with_positions ? zero_pos : dummy_pos,
     b = with_positions ? zero_pos : dummy_pos,
     aux_buffer = caml_create_bytes(512);
    return [0,
            function(lexbuf){
             var
              read =
                caml_call2
                 (read_fun, aux_buffer, caml_ml_bytes_length(aux_buffer)),
              n = 0 < read ? read : (lexbuf[9] = 1, 0);
             if(caml_ml_bytes_length(lexbuf[2]) < (lexbuf[3] + n | 0)){
              if
               (((lexbuf[3] - lexbuf[5] | 0) + n | 0)
                <= caml_ml_bytes_length(lexbuf[2]))
               Stdlib_Bytes[11].call
                (null,
                 lexbuf[2],
                 lexbuf[5],
                 lexbuf[2],
                 0,
                 lexbuf[3] - lexbuf[5] | 0);
              else{
               var
                newlen =
                  Stdlib_Int[10].call
                   (null,
                    2 * caml_ml_bytes_length(lexbuf[2]) | 0,
                    Stdlib_Sys[12]);
               if(newlen < ((lexbuf[3] - lexbuf[5] | 0) + n | 0))
                Stdlib[2].call(null, cst_Lexing_lex_refill_cannot_g);
               var newbuf = caml_create_bytes(newlen);
               Stdlib_Bytes[11].call
                (null,
                 lexbuf[2],
                 lexbuf[5],
                 newbuf,
                 0,
                 lexbuf[3] - lexbuf[5] | 0);
               lexbuf[2] = newbuf;
              }
              var s = lexbuf[5];
              lexbuf[4] = lexbuf[4] + s | 0;
              lexbuf[6] = lexbuf[6] - s | 0;
              lexbuf[5] = 0;
              lexbuf[7] = lexbuf[7] - s | 0;
              lexbuf[3] = lexbuf[3] - s | 0;
              var t = lexbuf[10], a = t.length - 2 | 0, b = 0;
              if(a >= 0){
               var i = b;
               for(;;){
                var v = caml_check_bound(t, i)[i + 1];
                if(0 <= v) caml_check_bound(t, i)[i + 1] = v - s | 0;
                var c = i + 1 | 0;
                if(a === i) break;
                i = c;
               }
              }
             }
             Stdlib_Bytes[11].call
              (null, aux_buffer, 0, lexbuf[2], lexbuf[3], n);
             lexbuf[3] = lexbuf[3] + n | 0;
             return 0;
            },
            caml_create_bytes(1024),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            [0],
            b,
            a];
   }
   function from_channel(with_positions, ic){
    return from_function
            (with_positions,
             function(buf, n){return Stdlib[84].call(null, ic, buf, 0, n);});
   }
   function from_string(opt, s){
    var
     with_positions = opt ? opt[1] : 1,
     lex_buffer = Stdlib_Bytes[5].call(null, s),
     a = with_positions ? zero_pos : dummy_pos,
     b = with_positions ? zero_pos : dummy_pos;
    return [0,
            function(lexbuf){lexbuf[9] = 1; return 0;},
            lex_buffer,
            caml_ml_bytes_length(lex_buffer),
            0,
            0,
            0,
            0,
            0,
            1,
            [0],
            b,
            a];
   }
   function set_position(lexbuf, position){
    lexbuf[12] = [0, lexbuf[12][1], position[2], position[3], position[4]];
    lexbuf[4] = position[4];
    return 0;
   }
   function set_filename(lexbuf, fname){
    var a = lexbuf[12];
    lexbuf[12] = [0, fname, a[2], a[3], a[4]];
    return 0;
   }
   function with_positions(lexbuf){return lexbuf[12] !== dummy_pos ? 1 : 0;}
   function lexeme(lexbuf){
    var len = lexbuf[6] - lexbuf[5] | 0;
    return Stdlib_Bytes[8].call(null, lexbuf[2], lexbuf[5], len);
   }
   function sub_lexeme(lexbuf, i1, i2){
    var len = i2 - i1 | 0;
    return Stdlib_Bytes[8].call(null, lexbuf[2], i1, len);
   }
   function sub_lexeme_opt(lexbuf, i1, i2){
    if(0 > i1) return 0;
    var len = i2 - i1 | 0;
    return [0, Stdlib_Bytes[8].call(null, lexbuf[2], i1, len)];
   }
   function sub_lexeme_char(lexbuf, i){return caml_bytes_get(lexbuf[2], i);}
   function sub_lexeme_char_opt(lexbuf, i){
    return 0 <= i ? [0, caml_bytes_get(lexbuf[2], i)] : 0;
   }
   function lexeme_char(lexbuf, i){
    return caml_bytes_get(lexbuf[2], lexbuf[5] + i | 0);
   }
   function lexeme_start(lexbuf){return lexbuf[11][4];}
   function lexeme_end(lexbuf){return lexbuf[12][4];}
   function lexeme_start_p(lexbuf){return lexbuf[11];}
   function lexeme_end_p(lexbuf){return lexbuf[12];}
   function new_line(lexbuf){
    var
     lcp = lexbuf[12],
     a = lcp !== dummy_pos ? 1 : 0,
     b = a ? (lexbuf[12] = [0, lcp[1], lcp[2] + 1 | 0, lcp[4], lcp[4]], 0) : a;
    return b;
   }
   function flush_input(lb){
    lb[6] = 0;
    lb[4] = 0;
    var lcp = lb[12];
    if(lcp !== dummy_pos)
     lb[12] = [0, lcp[1], zero_pos[2], zero_pos[3], zero_pos[4]];
    lb[3] = 0;
    return 0;
   }
   var
    Stdlib_Lexing =
      [0,
       dummy_pos,
       from_channel,
       from_string,
       from_function,
       set_position,
       set_filename,
       with_positions,
       lexeme,
       lexeme_char,
       lexeme_start,
       lexeme_end,
       lexeme_start_p,
       lexeme_end_p,
       new_line,
       flush_input,
       sub_lexeme,
       sub_lexeme_opt,
       sub_lexeme_char,
       sub_lexeme_char_opt,
       engine,
       new_engine];
   runtime.caml_register_global(7, Stdlib_Lexing, "Stdlib__Lexing");
   return;
  }
  (globalThis));

//# 8765 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Map:[F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Map_bal$3 = "Map.bal",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_List = global_data.Stdlib__List,
    cst_Map_bal = cst_Map_bal$3,
    cst_Map_bal$0 = cst_Map_bal$3,
    cst_Map_bal$1 = cst_Map_bal$3,
    cst_Map_bal$2 = cst_Map_bal$3,
    cst_Map_remove_min_elt = "Map.remove_min_elt",
    a = [0, 0, 0, 0],
    b = [0, "map.ml", 408, 10],
    c = [0, 0, 0],
    Stdlib_Map =
      [0,
       function(Ord){
        function height(param){
         if(! param) return 0;
         var h = param[5];
         return h;
        }
        function create(l, x, d, r){
         var
          hl = height(l),
          hr = height(r),
          a = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
         return [0, l, x, d, r, a];
        }
        function singleton(x, d){return [0, 0, x, d, 0, 1];}
        function bal(l, x, d, r){
         if(l) var h = l[5], hl = h; else var hl = 0;
         if(r) var h$0 = r[5], hr = h$0; else var hr = 0;
         if((hr + 2 | 0) < hl){
          if(! l) return Stdlib[1].call(null, cst_Map_bal$0);
          var lr = l[4], ld = l[3], lv = l[2], ll = l[1], a = height(lr);
          if(a <= height(ll)) return create(ll, lv, ld, create(lr, x, d, r));
          if(! lr) return Stdlib[1].call(null, cst_Map_bal);
          var
           lrr = lr[4],
           lrd = lr[3],
           lrv = lr[2],
           lrl = lr[1],
           b = create(lrr, x, d, r);
          return create(create(ll, lv, ld, lrl), lrv, lrd, b);
         }
         if((hl + 2 | 0) >= hr){
          var f = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
          return [0, l, x, d, r, f];
         }
         if(! r) return Stdlib[1].call(null, cst_Map_bal$2);
         var rr = r[4], rd = r[3], rv = r[2], rl = r[1], c = height(rl);
         if(c <= height(rr)) return create(create(l, x, d, rl), rv, rd, rr);
         if(! rl) return Stdlib[1].call(null, cst_Map_bal$1);
         var
          rlr = rl[4],
          rld = rl[3],
          rlv = rl[2],
          rll = rl[1],
          e = create(rlr, rv, rd, rr);
         return create(create(l, x, d, rll), rlv, rld, e);
        }
        var empty = 0;
        function is_empty(param){return param ? 0 : 1;}
        function add(x, data, m){
         if(! m) return [0, 0, x, data, 0, 1];
         var
          h = m[5],
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          c = caml_call2(Ord[1], x, v);
         if(0 === c) return d === data ? m : [0, l, x, data, r, h];
         if(0 <= c){
          var rr = add(x, data, r);
          return r === rr ? m : bal(l, v, d, rr);
         }
         var ll = add(x, data, l);
         return l === ll ? m : bal(ll, v, d, r);
        }
        function find(x, param$0){
         var param = param$0;
         for(;;){
          if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var
           r = param[4],
           d = param[3],
           v = param[2],
           l = param[1],
           c = caml_call2(Ord[1], x, v);
          if(0 === c) return d;
          param = 0 <= c ? r : l;
         }
        }
        function find_first(f, param$1){
         var param$0 = param$1;
         for(;;){
          if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var
           r$0 = param$0[4],
           d0$1 = param$0[3],
           v0$1 = param$0[2],
           l$0 = param$0[1];
          if(caml_call1(f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = l$0;
           break;
          }
          param$0 = r$0;
         }
         for(;;){
          if(! param) return [0, v0, d0];
          var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
          if(caml_call1(f, v0$0)){
           v0 = v0$0;
           d0 = d0$0;
           param = l;
          }
          else
           param = r;
         }
        }
        function find_first_opt(f, param$1){
         var param$0 = param$1;
         for(;;){
          if(! param$0) return 0;
          var
           r$0 = param$0[4],
           d0$1 = param$0[3],
           v0$1 = param$0[2],
           l$0 = param$0[1];
          if(caml_call1(f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = l$0;
           break;
          }
          param$0 = r$0;
         }
         for(;;){
          if(! param) return [0, [0, v0, d0]];
          var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
          if(caml_call1(f, v0$0)){
           v0 = v0$0;
           d0 = d0$0;
           param = l;
          }
          else
           param = r;
         }
        }
        function find_last(f, param$1){
         var param$0 = param$1;
         for(;;){
          if(! param$0) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var
           r$0 = param$0[4],
           d0$1 = param$0[3],
           v0$1 = param$0[2],
           l$0 = param$0[1];
          if(caml_call1(f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = r$0;
           break;
          }
          param$0 = l$0;
         }
         for(;;){
          if(! param) return [0, v0, d0];
          var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
          if(caml_call1(f, v0$0)){
           v0 = v0$0;
           d0 = d0$0;
           param = r;
          }
          else
           param = l;
         }
        }
        function find_last_opt(f, param$1){
         var param$0 = param$1;
         for(;;){
          if(! param$0) return 0;
          var
           r$0 = param$0[4],
           d0$1 = param$0[3],
           v0$1 = param$0[2],
           l$0 = param$0[1];
          if(caml_call1(f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = r$0;
           break;
          }
          param$0 = l$0;
         }
         for(;;){
          if(! param) return [0, [0, v0, d0]];
          var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
          if(caml_call1(f, v0$0)){
           v0 = v0$0;
           d0 = d0$0;
           param = r;
          }
          else
           param = l;
         }
        }
        function find_opt(x, param$0){
         var param = param$0;
         for(;;){
          if(! param) return 0;
          var
           r = param[4],
           d = param[3],
           v = param[2],
           l = param[1],
           c = caml_call2(Ord[1], x, v);
          if(0 === c) return [0, d];
          param = 0 <= c ? r : l;
         }
        }
        function mem(x, param$0){
         var param = param$0;
         for(;;){
          if(! param) return 0;
          var
           r = param[4],
           v = param[2],
           l = param[1],
           c = caml_call2(Ord[1], x, v),
           a = 0 === c ? 1 : 0;
          if(a) return a;
          param = 0 <= c ? r : l;
         }
        }
        function min_binding(param$0){
         var param = param$0;
         for(;;){
          if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          var l = param[1];
          if(! l){var d = param[3], v = param[2]; return [0, v, d];}
          param = l;
         }
        }
        function min_binding_opt(param$0){
         var param = param$0;
         for(;;){
          if(! param) return 0;
          var l = param[1];
          if(! l){var d = param[3], v = param[2]; return [0, [0, v, d]];}
          param = l;
         }
        }
        function max_binding(param$0){
         var param = param$0;
         for(;;){
          if(! param) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          if(! param[4]){var d = param[3], v = param[2]; return [0, v, d];}
          var r = param[4];
          param = r;
         }
        }
        function max_binding_opt(param$0){
         var param = param$0;
         for(;;){
          if(! param) return 0;
          if(! param[4]){
           var d = param[3], v = param[2];
           return [0, [0, v, d]];
          }
          var r = param[4];
          param = r;
         }
        }
        function remove_min_binding(param){
         if(! param) return Stdlib[1].call(null, cst_Map_remove_min_elt);
         var l = param[1];
         if(l){
          var r = param[4], d = param[3], v = param[2];
          return bal(remove_min_binding(l), v, d, r);
         }
         var r$0 = param[4];
         return r$0;
        }
        function d(t1, t2){
         if(! t1) return t2;
         if(! t2) return t1;
         var match = min_binding(t2), d = match[2], x = match[1];
         return bal(t1, x, d, remove_min_binding(t2));
        }
        function remove(x, m){
         if(! m) return 0;
         var
          r = m[4],
          d$0 = m[3],
          v = m[2],
          l = m[1],
          c = caml_call2(Ord[1], x, v);
         if(0 === c) return d(l, r);
         if(0 <= c){
          var rr = remove(x, r);
          return r === rr ? m : bal(l, v, d$0, rr);
         }
         var ll = remove(x, l);
         return l === ll ? m : bal(ll, v, d$0, r);
        }
        function update(x, f, m){
         if(! m){
          var match$0 = caml_call1(f, 0);
          if(! match$0) return 0;
          var data$0 = match$0[1];
          return [0, 0, x, data$0, 0, 1];
         }
         var
          h = m[5],
          r = m[4],
          d$0 = m[3],
          v = m[2],
          l = m[1],
          c = caml_call2(Ord[1], x, v);
         if(0 === c){
          var match = caml_call1(f, [0, d$0]);
          if(! match) return d(l, r);
          var data = match[1];
          return d$0 === data ? m : [0, l, x, data, r, h];
         }
         if(0 <= c){
          var rr = update(x, f, r);
          return r === rr ? m : bal(l, v, d$0, rr);
         }
         var ll = update(x, f, l);
         return l === ll ? m : bal(ll, v, d$0, r);
        }
        function add_to_list(x, data, m){
         function add(param){
          if(! param) return [0, [0, data, 0]];
          var l = param[1];
          return [0, [0, data, l]];
         }
         return update(x, add, m);
        }
        function iter(f, param$0){
         var param = param$0;
         for(;;){
          if(! param) return 0;
          var r = param[4], d = param[3], v = param[2], l = param[1];
          iter(f, l);
          caml_call2(f, v, d);
          param = r;
         }
        }
        function map(f, param){
         if(! param) return 0;
         var
          h = param[5],
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          l$0 = map(f, l),
          d$0 = caml_call1(f, d),
          r$0 = map(f, r);
         return [0, l$0, v, d$0, r$0, h];
        }
        function mapi(f, param){
         if(! param) return 0;
         var
          h = param[5],
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          l$0 = mapi(f, l),
          d$0 = caml_call2(f, v, d),
          r$0 = mapi(f, r);
         return [0, l$0, v, d$0, r$0, h];
        }
        function fold(f, m$0, accu$1){
         var m = m$0, accu = accu$1;
         for(;;){
          if(! m) return accu;
          var
           r = m[4],
           d = m[3],
           v = m[2],
           l = m[1],
           accu$0 = caml_call3(f, v, d, fold(f, l, accu));
          m = r;
          accu = accu$0;
         }
        }
        function for_all(p, param$0){
         var param = param$0;
         for(;;){
          if(! param) return 1;
          var
           r = param[4],
           d = param[3],
           v = param[2],
           l = param[1],
           a = caml_call2(p, v, d);
          if(a){
           var b = for_all(p, l);
           if(b){param = r; continue;}
           var c = b;
          }
          else
           var c = a;
          return c;
         }
        }
        function exists(p, param$0){
         var param = param$0;
         for(;;){
          if(! param) return 0;
          var
           r = param[4],
           d = param[3],
           v = param[2],
           l = param[1],
           a = caml_call2(p, v, d);
          if(a)
           var b = a;
          else{var c = exists(p, l); if(! c){param = r; continue;} var b = c;}
          return b;
         }
        }
        function add_min_binding(k, x, param){
         if(! param) return singleton(k, x);
         var r = param[4], d = param[3], v = param[2], l = param[1];
         return bal(add_min_binding(k, x, l), v, d, r);
        }
        function add_max_binding(k, x, param){
         if(! param) return singleton(k, x);
         var r = param[4], d = param[3], v = param[2], l = param[1];
         return bal(l, v, d, add_max_binding(k, x, r));
        }
        function join(l, v, d, r){
         if(! l) return add_min_binding(v, d, r);
         if(! r) return add_max_binding(v, d, l);
         var
          rh = r[5],
          rr = r[4],
          rd = r[3],
          rv = r[2],
          rl = r[1],
          lh = l[5],
          lr = l[4],
          ld = l[3],
          lv = l[2],
          ll = l[1];
         return (rh + 2 | 0) < lh
                 ? bal(ll, lv, ld, join(lr, v, d, r))
                 : (lh
                   + 2
                   | 0)
                   < rh
                   ? bal(join(l, v, d, rl), rv, rd, rr)
                   : create(l, v, d, r);
        }
        function concat(t1, t2){
         if(! t1) return t2;
         if(! t2) return t1;
         var match = min_binding(t2), d = match[2], x = match[1];
         return join(t1, x, d, remove_min_binding(t2));
        }
        function concat_or_join(t1, v, d, t2){
         if(! d) return concat(t1, t2);
         var d$0 = d[1];
         return join(t1, v, d$0, t2);
        }
        function split(x, param){
         if(! param) return a;
         var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          c = caml_call2(Ord[1], x, v);
         if(0 === c) return [0, l, [0, d], r];
         if(0 <= c){
          var
           match = split(x, r),
           rr = match[3],
           pres = match[2],
           lr = match[1];
          return [0, join(l, v, d, lr), pres, rr];
         }
         var
          match$0 = split(x, l),
          rl = match$0[3],
          pres$0 = match$0[2],
          ll = match$0[1];
         return [0, ll, pres$0, join(rl, v, d, r)];
        }
        function merge(f, s1, s2){
         if(s1){
          var h1 = s1[5], r1 = s1[4], d1 = s1[3], v1 = s1[2], l1 = s1[1];
          if(height(s2) <= h1){
           var
            match = split(v1, s2),
            r2 = match[3],
            d2 = match[2],
            l2 = match[1],
            a = merge(f, r1, r2),
            c = caml_call3(f, v1, [0, d1], d2);
           return concat_or_join(merge(f, l1, l2), v1, c, a);
          }
         }
         else if(! s2) return 0;
         if(! s2)
          throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
         var
          r2$0 = s2[4],
          d2$0 = s2[3],
          v2 = s2[2],
          l2$0 = s2[1],
          match$0 = split(v2, s1),
          r1$0 = match$0[3],
          d1$0 = match$0[2],
          l1$0 = match$0[1],
          d = merge(f, r1$0, r2$0),
          e = caml_call3(f, v2, d1$0, [0, d2$0]);
         return concat_or_join(merge(f, l1$0, l2$0), v2, e, d);
        }
        function union(f, s1, s2){
         if(s1){
          if(s2){
           var
            h2 = s2[5],
            r2 = s2[4],
            d2 = s2[3],
            v2 = s2[2],
            l2 = s2[1],
            h1 = s1[5],
            r1 = s1[4],
            d1 = s1[3],
            v1 = s1[2],
            l1 = s1[1];
           if(h2 <= h1){
            var
             match = split(v1, s2),
             r2$0 = match[3],
             d2$0 = match[2],
             l2$0 = match[1],
             l = union(f, l1, l2$0),
             r = union(f, r1, r2$0);
            if(! d2$0) return join(l, v1, d1, r);
            var d2$1 = d2$0[1];
            return concat_or_join(l, v1, caml_call3(f, v1, d1, d2$1), r);
           }
           var
            match$0 = split(v2, s1),
            r1$0 = match$0[3],
            d1$0 = match$0[2],
            l1$0 = match$0[1],
            l$0 = union(f, l1$0, l2),
            r$0 = union(f, r1$0, r2);
           if(! d1$0) return join(l$0, v2, d2, r$0);
           var d1$1 = d1$0[1];
           return concat_or_join(l$0, v2, caml_call3(f, v2, d1$1, d2), r$0);
          }
          var s = s1;
         }
         else
          var s = s2;
         return s;
        }
        function filter(p, m){
         if(! m) return 0;
         var
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          l$0 = filter(p, l),
          pvd = caml_call2(p, v, d),
          r$0 = filter(p, r);
         if(! pvd) return concat(l$0, r$0);
         if(l === l$0 && r === r$0) return m;
         return join(l$0, v, d, r$0);
        }
        function filter_map(f, param){
         if(! param) return 0;
         var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          l$0 = filter_map(f, l),
          fvd = caml_call2(f, v, d),
          r$0 = filter_map(f, r);
         if(! fvd) return concat(l$0, r$0);
         var d$0 = fvd[1];
         return join(l$0, v, d$0, r$0);
        }
        function partition(p, param){
         if(! param) return c;
         var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          match = partition(p, l),
          lf = match[2],
          lt = match[1],
          pvd = caml_call2(p, v, d),
          match$0 = partition(p, r),
          rf = match$0[2],
          rt = match$0[1];
         if(pvd){var a = concat(lf, rf); return [0, join(lt, v, d, rt), a];}
         var b = join(lf, v, d, rf);
         return [0, concat(lt, rt), b];
        }
        function cons_enum(m$0, e$1){
         var m = m$0, e = e$1;
         for(;;){
          if(! m) return e;
          var r = m[4], d = m[3], v = m[2], l = m[1], e$0 = [0, v, d, r, e];
          m = l;
          e = e$0;
         }
        }
        function compare(cmp, m1, m2){
         var
          e2$2 = cons_enum(m2, 0),
          e1$2 = cons_enum(m1, 0),
          e1 = e1$2,
          e2 = e2$2;
         for(;;){
          if(! e1) return e2 ? -1 : 0;
          if(! e2) return 1;
          var
           e2$0 = e2[4],
           r2 = e2[3],
           d2 = e2[2],
           v2 = e2[1],
           e1$0 = e1[4],
           r1 = e1[3],
           d1 = e1[2],
           v1 = e1[1],
           c = caml_call2(Ord[1], v1, v2);
          if(0 !== c) return c;
          var c$0 = caml_call2(cmp, d1, d2);
          if(0 !== c$0) return c$0;
          var e2$1 = cons_enum(r2, e2$0), e1$1 = cons_enum(r1, e1$0);
          e1 = e1$1;
          e2 = e2$1;
         }
        }
        function equal(cmp, m1, m2){
         var
          e2$2 = cons_enum(m2, 0),
          e1$2 = cons_enum(m1, 0),
          e1 = e1$2,
          e2 = e2$2;
         for(;;){
          if(! e1) return e2 ? 0 : 1;
          if(! e2) return 0;
          var
           e2$0 = e2[4],
           r2 = e2[3],
           d2 = e2[2],
           v2 = e2[1],
           e1$0 = e1[4],
           r1 = e1[3],
           d1 = e1[2],
           v1 = e1[1],
           a = 0 === caml_call2(Ord[1], v1, v2) ? 1 : 0;
          if(a){
           var b = caml_call2(cmp, d1, d2);
           if(b){
            var e2$1 = cons_enum(r2, e2$0), e1$1 = cons_enum(r1, e1$0);
            e1 = e1$1;
            e2 = e2$1;
            continue;
           }
           var c = b;
          }
          else
           var c = a;
          return c;
         }
        }
        function cardinal(param){
         if(! param) return 0;
         var r = param[4], l = param[1], a = cardinal(r);
         return (cardinal(l) + 1 | 0) + a | 0;
        }
        function bindings_aux(accu$1, param$0){
         var accu = accu$1, param = param$0;
         for(;;){
          if(! param) return accu;
          var
           r = param[4],
           d = param[3],
           v = param[2],
           l = param[1],
           accu$0 = [0, [0, v, d], bindings_aux(accu, r)];
          accu = accu$0;
          param = l;
         }
        }
        function bindings(s){return bindings_aux(0, s);}
        function of_list(bs){
         return Stdlib_List[26].call
                 (null,
                  function(m, param){
                   var v = param[2], k = param[1];
                   return add(k, v, m);
                  },
                  empty,
                  bs);
        }
        function add_seq(i, m){
         return Stdlib_Seq[5].call
                 (null,
                  function(m, param){
                   var v = param[2], k = param[1];
                   return add(k, v, m);
                  },
                  m,
                  i);
        }
        function of_seq(i){return add_seq(i, empty);}
        function seq_of_enum(c, param){
         if(! c) return 0;
         var
          rest = c[4],
          t = c[3],
          v = c[2],
          k = c[1],
          a = cons_enum(t, rest);
         return [0, [0, k, v], function(b){return seq_of_enum(a, b);}];
        }
        function to_seq(m){
         var a = cons_enum(m, 0);
         return function(b){return seq_of_enum(a, b);};
        }
        function snoc_enum(s$0, e$1){
         var s = s$0, e = e$1;
         for(;;){
          if(! s) return e;
          var r = s[4], d = s[3], v = s[2], l = s[1], e$0 = [0, v, d, l, e];
          s = r;
          e = e$0;
         }
        }
        function rev_seq_of_enum(c, param){
         if(! c) return 0;
         var
          rest = c[4],
          t = c[3],
          v = c[2],
          k = c[1],
          a = snoc_enum(t, rest);
         return [0, [0, k, v], function(b){return rev_seq_of_enum(a, b);}];
        }
        function to_rev_seq(c){
         var a = snoc_enum(c, 0);
         return function(b){return rev_seq_of_enum(a, b);};
        }
        function to_seq_from(low, m){
         a:
         {
          var m$0 = m, c = 0;
          for(;;){
           if(! m$0){var a = c; break a;}
           var
            r = m$0[4],
            d = m$0[3],
            v = m$0[2],
            l = m$0[1],
            n = caml_call2(Ord[1], v, low);
           if(0 === n) break;
           if(0 <= n){
            var c$0 = [0, v, d, r, c];
            m$0 = l;
            c = c$0;
           }
           else
            m$0 = r;
          }
          var a = [0, v, d, r, c];
         }
         return function(b){return seq_of_enum(a, b);};
        }
        return [0,
                empty,
                add,
                add_to_list,
                update,
                singleton,
                remove,
                merge,
                union,
                cardinal,
                bindings,
                min_binding,
                min_binding_opt,
                max_binding,
                max_binding_opt,
                min_binding,
                min_binding_opt,
                find,
                find_opt,
                find_first,
                find_first_opt,
                find_last,
                find_last_opt,
                iter,
                fold,
                map,
                mapi,
                filter,
                filter_map,
                partition,
                split,
                is_empty,
                mem,
                equal,
                compare,
                for_all,
                exists,
                bindings,
                of_list,
                to_seq,
                to_rev_seq,
                to_seq_from,
                add_seq,
                of_seq];
       }];
   runtime.caml_register_global(12, Stdlib_Map, "Stdlib__Map");
   return;
  }
  (globalThis));

//# 9710 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Queue:[N,F(1)*,F(2),F(2),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(2),F(3),F(2),F(1)*->F(1)*,F(2),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Seq = global_data.Stdlib__Seq,
    Empty = [248, "Stdlib.Queue.Empty", runtime.caml_fresh_oo_id(0)];
   function create(param){return [0, 0, 0, 0];}
   function clear(q){q[1] = 0; q[2] = 0; q[3] = 0; return 0;}
   function add(x, q){
    var cell = [0, x, 0], match = q[3];
    return match
            ? (q[1] = q[1] + 1 | 0, match[2] = cell, q[3] = cell, 0)
            : (q[1] = 1, q[2] = cell, q[3] = cell, 0);
   }
   function peek(q){
    var match = q[2];
    if(! match) throw caml_maybe_attach_backtrace(Empty, 1);
    var content = match[1];
    return content;
   }
   function peek_opt(q){
    var match = q[2];
    if(! match) return 0;
    var content = match[1];
    return [0, content];
   }
   function take(q){
    var match = q[2];
    if(! match) throw caml_maybe_attach_backtrace(Empty, 1);
    var content = match[1];
    if(match[2]){
     var next = match[2];
     q[1] = q[1] - 1 | 0;
     q[2] = next;
     return content;
    }
    clear(q);
    return content;
   }
   function take_opt(q){
    var match = q[2];
    if(! match) return 0;
    var content = match[1];
    if(match[2]){
     var next = match[2];
     q[1] = q[1] - 1 | 0;
     q[2] = next;
     return [0, content];
    }
    clear(q);
    return [0, content];
   }
   function drop(q){
    var match = q[2];
    if(! match) throw caml_maybe_attach_backtrace(Empty, 1);
    if(! match[2]) return clear(q);
    var next = match[2];
    q[1] = q[1] - 1 | 0;
    q[2] = next;
    return 0;
   }
   function copy(q){
    var cell$0 = q[2], q_res = [0, q[1], 0, 0], prev = 0, cell = cell$0;
    for(;;){
     if(! cell){q_res[3] = prev; return q_res;}
     var content = cell[1], next = cell[2], prev$0 = [0, content, 0];
     if(prev){
      prev[2] = prev$0;
      prev = prev$0;
      cell = next;
     }
     else{q_res[2] = prev$0; prev = prev$0; cell = next;}
    }
   }
   function is_empty(q){return 0 === q[1] ? 1 : 0;}
   function length(q){return q[1];}
   function iter(f, q){
    var cell$0 = q[2], cell = cell$0;
    for(;;){
     if(! cell) return 0;
     var content = cell[1], next = cell[2];
     caml_call1(f, content);
     cell = next;
    }
   }
   function fold(f, accu$1, q){
    var cell$0 = q[2], accu = accu$1, cell = cell$0;
    for(;;){
     if(! cell) return accu;
     var
      content = cell[1],
      next = cell[2],
      accu$0 = caml_call2(f, accu, content);
     accu = accu$0;
     cell = next;
    }
   }
   function transfer(q1, q2){
    var a = 0 < q1[1] ? 1 : 0;
    if(! a) return a;
    var match = q2[3];
    return match
            ? (q2
               [1]
              = q2[1] + q1[1] | 0,
              match[2] = q1[2],
              q2[3] = q1[3],
              clear(q1))
            : (q2[1] = q1[1], q2[2] = q1[2], q2[3] = q1[3], clear(q1));
   }
   function to_seq(q){
    function aux(c, param){
     if(! c) return 0;
     var x = c[1], next = c[2];
     return [0, x, function(a){return aux(next, a);}];
    }
    var a = q[2];
    return function(b){return aux(a, b);};
   }
   function add_seq(q, i){
    return Stdlib_Seq[4].call(null, function(x){return add(x, q);}, i);
   }
   function of_seq(g){var q = create(0); add_seq(q, g); return q;}
   var
    Stdlib_Queue =
      [0,
       Empty,
       create,
       add,
       add,
       take,
       take_opt,
       take,
       peek,
       peek_opt,
       peek,
       drop,
       clear,
       copy,
       is_empty,
       length,
       iter,
       fold,
       transfer,
       to_seq,
       add_seq,
       of_seq];
   runtime.caml_register_global(2, Stdlib_Queue, "Stdlib__Queue");
   return;
  }
  (globalThis));

//# 9879 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Buffer:[F(1)*,F(1),F(1),F(3),F(5),F(2),F(1)*,F(1),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(4),F(4),F(3),F(2),F(3),F(1)*->F(1),F(1)*->F(1),F(2),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bswap16 = runtime.caml_bswap16,
    caml_bytes_get = runtime.caml_bytes_get,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_bytes_set16 = runtime.caml_bytes_set16,
    caml_bytes_set32 = runtime.caml_bytes_set32,
    caml_bytes_set64 = runtime.caml_bytes_set64,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Assert_failure = global_data.Assert_failure,
    cst_Buffer_sub = "Buffer.sub",
    cst_Buffer_blit = "Buffer.blit",
    cst_Buffer_nth = "Buffer.nth",
    cst_Buffer_add_cannot_grow_buf = "Buffer.add: cannot grow buffer",
    dummy = 0;
   function create(n){
    var
     n$0 = 1 <= n ? n : 1,
     n$1 = Stdlib_Sys[12] < n$0 ? Stdlib_Sys[12] : n$0,
     s = caml_create_bytes(n$1);
    return [0, [0, s, n$1], 0, s];
   }
   function contents(b){return Stdlib_Bytes[8].call(null, b[1][1], 0, b[2]);}
   function to_bytes(b){return Stdlib_Bytes[7].call(null, b[1][1], 0, b[2]);}
   function sub(b, ofs, len){
    if(0 <= ofs && 0 <= len && (b[2] - len | 0) >= ofs)
     return Stdlib_Bytes[8].call(null, b[1][1], ofs, len);
    return Stdlib[1].call(null, cst_Buffer_sub);
   }
   function blit(src, srcoff, dst, dstoff, len){
    if
     (0 <= len
      &&
       0 <= srcoff
       &&
        (src[2] - len | 0) >= srcoff
        && 0 <= dstoff && (caml_ml_bytes_length(dst) - len | 0) >= dstoff)
     return Stdlib_Bytes[11].call(null, src[1][1], srcoff, dst, dstoff, len);
    return Stdlib[1].call(null, cst_Buffer_blit);
   }
   function nth(b, ofs){
    var position = b[2], match = b[1], length = match[2], buffer = match[1];
    if(0 <= ofs && position > ofs && length >= position)
     return runtime.caml_bytes_unsafe_get(buffer, ofs);
    return Stdlib[1].call(null, cst_Buffer_nth);
   }
   function length(b){return b[2];}
   function clear(b){b[2] = 0; return 0;}
   function reset(b){
    b[2] = 0;
    var inner = [0, b[3], caml_ml_bytes_length(b[3])];
    b[1] = inner;
    return 0;
   }
   function resize(b, more){
    var old_pos = b[2], old_len = b[1][2], new_len = [0, old_len];
    for(;;){
     if(new_len[1] >= (old_pos + more | 0)) break;
     new_len[1] = 2 * new_len[1] | 0;
    }
    if(Stdlib_Sys[12] < new_len[1])
     if((old_pos + more | 0) <= Stdlib_Sys[12])
      new_len[1] = Stdlib_Sys[12];
     else
      Stdlib[2].call(null, cst_Buffer_add_cannot_grow_buf);
    var new_buffer = caml_create_bytes(new_len[1]);
    Stdlib_Bytes[11].call(null, b[1][1], 0, new_buffer, 0, b[2]);
    b[1] = [0, new_buffer, new_len[1]];
   }
   function add_char(b, c){
    var pos = b[2], match = b[1], length = match[2], buffer = match[1];
    if(length <= pos){
     resize(b, 1);
     caml_bytes_set(b[1][1], b[2], c);
    }
    else
     caml_bytes_unsafe_set(buffer, pos, c);
    b[2] = pos + 1 | 0;
    return 0;
   }
   var
    uchar_utf_8_byte_length_max = 4,
    uchar_utf_16_byte_length_max = 4,
    cst_Buffer_add_substring = "Buffer.add_substring",
    cst_Buffer_add_subbytes = "Buffer.add_subbytes",
    cst_Buffer_add_channel = "Buffer.add_channel",
    a = [0, "buffer.ml", 222, 9],
    cst_Buffer_truncate = "Buffer.truncate";
   function add_utf_8_uchar(b, u){
    for(;;){
     var pos = b[2];
     if(b[1][2] <= pos) resize(b, uchar_utf_8_byte_length_max);
     var n = Stdlib_Bytes[51].call(null, b[1][1], pos, u);
     if(0 !== n){b[2] = pos + n | 0; return 0;}
     resize(b, uchar_utf_8_byte_length_max);
    }
   }
   function add_utf_16be_uchar(b, u){
    for(;;){
     var pos = b[2];
     if(b[1][2] <= pos) resize(b, uchar_utf_16_byte_length_max);
     var n = Stdlib_Bytes[54].call(null, b[1][1], pos, u);
     if(0 !== n){b[2] = pos + n | 0; return 0;}
     resize(b, uchar_utf_16_byte_length_max);
    }
   }
   function add_utf_16le_uchar(b, u){
    for(;;){
     var pos = b[2];
     if(b[1][2] <= pos) resize(b, uchar_utf_16_byte_length_max);
     var n = Stdlib_Bytes[57].call(null, b[1][1], pos, u);
     if(0 !== n){b[2] = pos + n | 0; return 0;}
     resize(b, uchar_utf_16_byte_length_max);
    }
   }
   function add_substring(b, s, offset, len){
    var a = offset < 0 ? 1 : 0;
    if(a)
     var c = a;
    else
     var
      d = len < 0 ? 1 : 0,
      c = d || ((caml_ml_string_length(s) - len | 0) < offset ? 1 : 0);
    if(c) Stdlib[1].call(null, cst_Buffer_add_substring);
    var
     position = b[2],
     match = b[1],
     length = match[2],
     buffer = match[1],
     new_position = position + len | 0;
    if(length < new_position){
     resize(b, len);
     Stdlib_Bytes[12].call(null, s, offset, b[1][1], b[2], len);
    }
    else
     runtime.caml_blit_string(s, offset, buffer, position, len);
    b[2] = new_position;
    return 0;
   }
   function add_subbytes(b, bytes, offset, len){
    var a = offset < 0 ? 1 : 0;
    if(a)
     var c = a;
    else
     var
      d = len < 0 ? 1 : 0,
      c = d || ((caml_ml_bytes_length(bytes) - len | 0) < offset ? 1 : 0);
    if(c) Stdlib[1].call(null, cst_Buffer_add_subbytes);
    var
     position = b[2],
     match = b[1],
     length = match[2],
     buffer = match[1],
     new_position = position + len | 0;
    if(length < new_position){
     resize(b, len);
     Stdlib_Bytes[11].call(null, bytes, offset, b[1][1], b[2], len);
    }
    else
     runtime.caml_blit_bytes(bytes, offset, buffer, position, len);
    b[2] = new_position;
    return 0;
   }
   function add_string(b, s){
    return add_substring(b, s, 0, caml_ml_string_length(s));
   }
   function add_bytes(b, bytes){
    return add_subbytes(b, bytes, 0, caml_ml_bytes_length(bytes));
   }
   function add_buffer(b, bs){return add_subbytes(b, bs[1][1], 0, bs[2]);}
   function add_channel(b, ic, to_read$1){
    var
     a = to_read$1 < 0 ? 1 : 0,
     c = a || (Stdlib_Sys[12] < to_read$1 ? 1 : 0);
    if(c) Stdlib[1].call(null, cst_Buffer_add_channel);
    if(b[1][2] < (b[2] + to_read$1 | 0)) resize(b, to_read$1);
    var
     ofs$1 = b[2],
     buf = b[1][1],
     already_read = 0,
     ofs = ofs$1,
     to_read = to_read$1;
    for(;;){
     if(0 !== to_read){
      var r = Stdlib[84].call(null, ic, buf, ofs, to_read);
      if(0 !== r){
       var
        already_read$0 = already_read + r | 0,
        ofs$0 = ofs + r | 0,
        to_read$0 = to_read - r | 0;
       already_read = already_read$0;
       ofs = ofs$0;
       to_read = to_read$0;
       continue;
      }
     }
     b[2] = b[2] + already_read | 0;
     if(already_read < to_read$1)
      throw caml_maybe_attach_backtrace(Stdlib[12], 1);
     return 0;
    }
   }
   function output_buffer(oc, b){
    return Stdlib[68].call(null, oc, b[1][1], 0, b[2]);
   }
   function add_substitute(b, f, s){
    var lim$1 = caml_ml_string_length(s), previous = 32, i$4 = 0;
    for(;;){
     if(i$4 >= lim$1){
      var c = 92 === previous ? 1 : 0;
      return c ? add_char(b, previous) : c;
     }
     var previous$0 = caml_string_get(s, i$4);
     if(36 === previous$0)
      if(92 === previous){
       add_char(b, previous$0);
       var i$5 = i$4 + 1 | 0;
       previous = 32;
       i$4 = i$5;
      }
      else{
       var start = i$4 + 1 | 0;
       try{
        if(lim$1 <= start) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
        var opening = caml_string_get(s, start);
        a:
        {
         if(40 !== opening && 123 !== opening){
          var lim$0 = caml_ml_string_length(s), i$2 = start;
          for(;;){
           b:
           {
            if(lim$0 > i$2){
             var match = caml_string_get(s, i$2);
             if(91 <= match){
              if(97 <= match){
               if(123 <= match){var stop$0 = i$2; break b;}
              }
              else if(95 !== match){var stop$0 = i$2; break b;}
             }
             else
              if(58 <= match){
               if(65 > match){var stop$0 = i$2; break b;}
              }
              else if(48 > match){var stop$0 = i$2; break b;}
             var i$3 = i$2 + 1 | 0;
             i$2 = i$3;
             continue;
            }
            var stop$0 = lim$0;
           }
           if(stop$0 === start)
            throw caml_maybe_attach_backtrace(Stdlib[8], 1);
           var
            val =
              [0,
               Stdlib_String[16].call(null, s, start, stop$0 - start | 0),
               stop$0];
           break a;
          }
         }
         var new_start = start + 1 | 0, k$2 = 0;
         if(40 === opening)
          var closing = 41;
         else{
          if(123 !== opening)
           throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
          var closing = 125;
         }
         var lim = caml_ml_string_length(s), k = k$2, stop = new_start;
         for(;;){
          if(lim <= stop) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          if(caml_string_get(s, stop) === opening){
           var i = stop + 1 | 0, k$0 = k + 1 | 0;
           k = k$0;
           stop = i;
          }
          else if(caml_string_get(s, stop) === closing){
           if(0 === k){
            var
             val =
               [0,
                Stdlib_String[16].call
                 (null, s, new_start, (stop - start | 0) - 1 | 0),
                stop + 1 | 0];
            break;
           }
           var i$0 = stop + 1 | 0, k$1 = k - 1 | 0;
           k = k$1;
           stop = i$0;
          }
          else{var i$1 = stop + 1 | 0; stop = i$1;}
         }
        }
       }
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
        add_char(b, 36);
        previous = 32;
        i$4 = start;
        continue;
       }
       var next_i = val[2], ident = val[1];
       add_string(b, caml_call1(f, ident));
       previous = 32;
       i$4 = next_i;
      }
     else{
      if(92 === previous) add_char(b, previous);
      if(92 !== previous$0) add_char(b, previous$0);
      var i$6 = i$4 + 1 | 0;
      previous = previous$0;
      i$4 = i$6;
     }
    }
   }
   function truncate(b, len){
    if(0 <= len && b[2] >= len){b[2] = len; return 0;}
    return Stdlib[1].call(null, cst_Buffer_truncate);
   }
   function to_seq(b){
    function aux(i, param){
     if(b[2] <= i) return 0;
     var x = caml_bytes_get(b[1][1], i), a = i + 1 | 0;
     return [0, x, function(b){return aux(a, b);}];
    }
    var a = 0;
    return function(b){return aux(a, b);};
   }
   function to_seqi(b){
    function aux(i, param){
     if(b[2] <= i) return 0;
     var x = caml_bytes_get(b[1][1], i), a = i + 1 | 0;
     return [0, [0, i, x], function(b){return aux(a, b);}];
    }
    var a = 0;
    return function(b){return aux(a, b);};
   }
   function add_seq(b, seq){
    return Stdlib_Seq[4].call(null, function(a){return add_char(b, a);}, seq);
   }
   function of_seq(i){var b = create(32); add_seq(b, i); return b;}
   function add_int8(b, x){
    var
     position = b[2],
     match = b[1],
     length = match[2],
     buffer = match[1],
     new_position = position + 1 | 0;
    if(length < new_position){
     resize(b, 1);
     caml_bytes_set(b[1][1], b[2], x);
    }
    else
     caml_bytes_unsafe_set(buffer, position, x);
    b[2] = new_position;
    return 0;
   }
   function add_int16_ne(b, x){
    var
     position = b[2],
     match = b[1],
     length = match[2],
     buffer = match[1],
     new_position = position + 2 | 0;
    if(length < new_position){
     resize(b, 2);
     caml_bytes_set16(b[1][1], b[2], x);
    }
    else
     caml_bytes_set16(buffer, position, x);
    b[2] = new_position;
    return 0;
   }
   function add_int32_ne(b, x){
    var
     position = b[2],
     match = b[1],
     length = match[2],
     buffer = match[1],
     new_position = position + 4 | 0;
    if(length < new_position){
     resize(b, 4);
     caml_bytes_set32(b[1][1], b[2], x);
    }
    else
     caml_bytes_set32(buffer, position, x);
    b[2] = new_position;
    return 0;
   }
   function add_int64_ne(b, x){
    var
     position = b[2],
     match = b[1],
     length = match[2],
     buffer = match[1],
     new_position = position + 8 | 0;
    if(length < new_position){
     resize(b, 8);
     caml_bytes_set64(b[1][1], b[2], x);
    }
    else
     caml_bytes_set64(buffer, position, x);
    b[2] = new_position;
    return 0;
   }
   function add_int16_le(b, x){
    var a = Stdlib_Sys[11] ? caml_bswap16(x) : x;
    return add_int16_ne(b, a);
   }
   function add_int16_be(b, x){
    var x$0 = Stdlib_Sys[11] ? x : caml_bswap16(x);
    return add_int16_ne(b, x$0);
   }
   function add_int32_le(b, x){
    var a = Stdlib_Sys[11] ? caml_int32_bswap(x) : x;
    return add_int32_ne(b, a);
   }
   function add_int32_be(b, x){
    var x$0 = Stdlib_Sys[11] ? x : caml_int32_bswap(x);
    return add_int32_ne(b, x$0);
   }
   function add_int64_le(b, x){
    var a = Stdlib_Sys[11] ? caml_int64_bswap(x) : x;
    return add_int64_ne(b, a);
   }
   function add_int64_be(b, x){
    var x$0 = Stdlib_Sys[11] ? x : caml_int64_bswap(x);
    return add_int64_ne(b, x$0);
   }
   var
    Stdlib_Buffer =
      [0,
       create,
       contents,
       to_bytes,
       sub,
       blit,
       nth,
       length,
       clear,
       reset,
       output_buffer,
       truncate,
       add_char,
       add_utf_8_uchar,
       add_utf_16le_uchar,
       add_utf_16be_uchar,
       add_string,
       add_bytes,
       add_substring,
       add_subbytes,
       add_substitute,
       add_buffer,
       add_channel,
       to_seq,
       to_seqi,
       add_seq,
       of_seq,
       add_int8,
       add_int8,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int32_ne,
       add_int32_be,
       add_int32_le,
       add_int64_ne,
       add_int64_be,
       add_int64_le];
   runtime.caml_register_global(15, Stdlib_Buffer, "Stdlib__Buffer");
   return;
  }
  (globalThis));

//# 10383 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Mutex:[F(1),F(1),F(1),F(1),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_mutex_lock = runtime.caml_ml_mutex_lock,
    caml_ml_mutex_unlock = runtime.caml_ml_mutex_unlock,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function protect(m, f){
    caml_ml_mutex_lock(m);
    try{var x = caml_call1(f, 0);}
    catch(e$0){
     var e = caml_wrap_exception(e$0);
     caml_ml_mutex_unlock(m);
     throw caml_maybe_attach_backtrace(e, 0);
    }
    caml_ml_mutex_unlock(m);
    return x;
   }
   var
    Stdlib_Mutex =
      [0,
       runtime.caml_ml_mutex_new,
       caml_ml_mutex_lock,
       runtime.caml_ml_mutex_try_lock,
       caml_ml_mutex_unlock,
       protect];
   runtime.caml_register_global(0, Stdlib_Mutex, "Stdlib__Mutex");
   return;
  }
  (globalThis));

//# 10423 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Condition:[F(1),F(2),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Stdlib_Condition =
      [0,
       runtime.caml_ml_condition_new,
       runtime.caml_ml_condition_wait,
       runtime.caml_ml_condition_signal,
       runtime.caml_ml_condition_broadcast];
   runtime.caml_register_global(0, Stdlib_Condition, "Stdlib__Condition");
   return;
  }
  (globalThis));

//# 10523 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Domain:[F(1),F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),F(1),F(1),N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_array_make = runtime.caml_array_make,
    caml_check_bound = runtime.caml_check_bound,
    caml_domain_dls_get = runtime.caml_domain_dls_get,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_domain_id = runtime.caml_ml_domain_id,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Condition = global_data.Stdlib__Condition,
    Stdlib_Mutex = global_data.Stdlib__Mutex,
    Stdlib_Atomic = global_data.Stdlib__Atomic,
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure;
   function cpu_relax(param){return runtime.caml_ml_domain_cpu_relax(0);}
   var none = [0, 0];
   function create_dls(param){
    var st = caml_array_make(8, none);
    runtime.caml_domain_dls_set(st);
   }
   create_dls(0);
   var
    key_counter = Stdlib_Atomic[1].call(null, 0),
    parent_keys = Stdlib_Atomic[1].call(null, 0),
    a = [0, "domain.ml", 184, 13];
   function new_key(split_from_parent, init_orphan){
    var
     idx = Stdlib_Atomic[7].call(null, key_counter, 1),
     k = [0, idx, init_orphan];
    if(split_from_parent){
     var split = split_from_parent[1], ki = [0, k, split];
     for(;;){
      var l = Stdlib_Atomic[3].call(null, parent_keys);
      if(! (1 - Stdlib_Atomic[6].call(null, parent_keys, l, [0, ki, l])))
       break;
     }
    }
    return k;
   }
   function maybe_grow(idx){
    for(;;){
     var st = caml_domain_dls_get(0), sz = st.length - 1;
     if(idx < sz) return st;
     var new_sz = sz;
     for(;;){
      if(idx < new_sz){
       var new_st = caml_array_make(new_sz, none);
       Stdlib_Array[9].call(null, st, 0, new_st, 0, sz);
       if(runtime.caml_domain_dls_compare_and_set(st, new_st)) return new_st;
       break;
      }
      var s = 2 * new_sz | 0;
      new_sz = s;
     }
    }
   }
   function set(param, x){
    var idx = param[1], st = maybe_grow(idx);
    caml_check_bound(st, idx)[idx + 1] = x;
    return 0;
   }
   function get(param){
    var
     init = param[2],
     idx = param[1],
     st = maybe_grow(idx),
     oldval = caml_check_bound(st, idx)[idx + 1];
    if(oldval !== none) return oldval;
    var
     new_obj = caml_call1(init, 0),
     st$0 = caml_domain_dls_get(0),
     curval = caml_check_bound(st$0, idx)[idx + 1],
     b = curval === oldval ? (st$0[idx + 1] = new_obj, 1) : 0;
    if(b) return new_obj;
    var updated_obj = caml_check_bound(st$0, idx)[idx + 1];
    if(updated_obj !== none) return updated_obj;
    throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
   }
   function set_initial_keys(l){
    return Stdlib_List[18].call
            (null,
             function(param){
              var v = param[2], k = param[1];
              return set(k, v);
             },
             l);
   }
   function get_id(param){var domain = param[1]; return domain;}
   function self(param){return caml_ml_domain_id(0);}
   function is_main_domain(param){return 0 === caml_ml_domain_id(0) ? 1 : 0;}
   var
    first_domain_spawned = Stdlib_Atomic[1].call(null, 0),
    first_spawn_function = [0, function(param){}],
    cst_first_domain_already_spawn = "first domain already spawned";
   function before_first_spawn(f){
    if(Stdlib_Atomic[3].call(null, first_domain_spawned))
     throw caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_first_domain_already_spawn], 1);
    var old_f = first_spawn_function[1];
    function new_f(param){caml_call1(old_f, 0); return caml_call1(f, 0);}
    first_spawn_function[1] = new_f;
    return 0;
   }
   var
    at_exit_key =
      new_key(0, function(param){return function(param){return 0;};});
   function at_exit(f){
    var old_exit = get(at_exit_key);
    function new_exit(param){
     caml_call1(f, 0);
     return caml_call1(old_exit, 0);
    }
    return set(at_exit_key, new_exit);
   }
   function do_at_exit(param){
    var f = get(at_exit_key);
    return caml_call1(f, 0);
   }
   Stdlib[104][1] = do_at_exit;
   function spawn(f){
    if(1 - Stdlib_Atomic[3].call(null, first_domain_spawned)){
     Stdlib_Atomic[4].call(null, first_domain_spawned, 1);
     caml_call1(first_spawn_function[1], 0);
     first_spawn_function[1] = function(param){return 0;};
    }
    var
     a = Stdlib_Atomic[3].call(null, parent_keys),
     pk =
       Stdlib_List[20].call
        (null,
         function(param){
          var split = param[2], k = param[1];
          return [0, k, caml_call1(split, get(k))];
         },
         a),
     b = Stdlib_Condition[1].call(null, 0),
     term_sync = [0, 0, Stdlib_Mutex[1].call(null, 0), b];
    function body(param){
     try{create_dls(0); set_initial_keys(pk); var res = caml_call1(f, 0);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      try{do_at_exit(0);}catch(exn){}
      throw caml_maybe_attach_backtrace(exn, 0);
     }
     do_at_exit(0);
     return res;
    }
    var domain = runtime.caml_domain_spawn(body, term_sync);
    return [0, domain, term_sync];
   }
   function join(param){
    var term_sync = param[2];
    function loop(param){
     for(;;){
      var match = term_sync[1];
      if(match){var res = match[1]; return res;}
      Stdlib_Condition[2].call(null, term_sync[3], term_sync[2]);
     }
    }
    var match = Stdlib_Mutex[5].call(null, term_sync[2], loop);
    if(0 === match[0]){var x = match[1]; return x;}
    var ex = match[1];
    throw caml_maybe_attach_backtrace(ex, 1);
   }
   var
    recommended_domain_count = runtime.caml_recommended_domain_count,
    Stdlib_Domain =
      [0,
       spawn,
       join,
       get_id,
       self,
       before_first_spawn,
       at_exit,
       cpu_relax,
       is_main_domain,
       recommended_domain_count,
       runtime.caml_ml_domain_index,
       [0, new_key, get, set]];
   runtime.caml_register_global(9, Stdlib_Domain, "Stdlib__Domain");
   return;
  }
  (globalThis));

//# 10722 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: CamlinternalFormat:[F(2),F(1),F(1),F(2),F(1),F(2)*,F(3),F(3),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(1)*,F(1),F(1),F(1),F(1),F(1),F(2),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$43 = "",
    cst_and = " and ",
    cst_Li$3 = "%Li",
    cst_i$3 = "%i",
    cst_li$3 = "%li",
    cst_ni$3 = "%ni",
    cst_u$0 = "%u",
    cst$42 = "' '",
    cst$41 = "'#'",
    cst$39 = "'*'",
    cst$40 = "'+'",
    cst$44 = ", ",
    cst_0$3 = "0",
    cst_at_character_number = ": at character number ",
    cst$38 = "@[",
    cst$37 = "@{",
    cst_bad_input_format_type_mism =
      "bad input: format type mismatch between ",
    cst_bad_input_format_type_mism$0 =
      "bad input: format type mismatch between %S and %S",
    cst_camlinternalFormat_ml = "camlinternalFormat.ml",
    cst_invalid_format = "invalid format ",
    cst_precision$3 = "precision",
    caml_blit_string = runtime.caml_blit_string,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_format_float = runtime.caml_format_float,
    caml_format_int = runtime.caml_format_int,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_notequal = runtime.caml_notequal,
    caml_string_get = runtime.caml_string_get,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$9 = "%{",
    cst$10 = "%}",
    cst$11 = "%(",
    cst$12 = "%)",
    cst$13 = "%?",
    cst$18 = cst$37,
    cst$19 = cst$38,
    cst$20 = cst$37,
    cst$21 = cst$38,
    cst$22 = cst$37,
    cst$23 = cst$38,
    cst$26 = cst$39,
    cst$24 = "'-'",
    cst$25 = cst$39,
    cst$27 = cst$40,
    cst$28 = cst$41,
    cst$29 = cst$42,
    cst$30 = cst$40,
    cst$31 = "'_'",
    sub_format = [0, 0, cst$43],
    formatting_lit = [0, "@;", 1, 0],
    cst$35 = cst$41,
    cst$32 = cst$40,
    cst$33 = cst$40,
    cst$34 = cst$42,
    cst$36 = cst$40,
    cst_unexpected_end_of_format = "unexpected end of format",
    cst$17 = ".",
    cst_nd = "%nd",
    cst_ni$0 = cst_ni$3,
    cst_nu = "%nu",
    cst_ld = "%ld",
    cst_li$0 = cst_li$3,
    cst_lu = "%lu",
    cst_Ld = "%Ld",
    cst_Li$0 = cst_Li$3,
    cst_Lu = "%Lu",
    cst_d = "%d",
    cst_i$0 = cst_i$3,
    cst_u = cst_u$0,
    cst$14 = "%!",
    cst$15 = cst$37,
    cst$16 = cst$38,
    cst$8 = "%%",
    cst$0 = "@]",
    cst$1 = "@}",
    cst$2 = "@?",
    cst$3 = "@\n",
    cst$4 = "@.",
    cst$5 = "@@",
    cst$6 = "@%",
    cst$7 = "@",
    cst = ".*",
    Assert_failure = global_data.Assert_failure,
    CamlinternalFormatBasics = global_data.CamlinternalFormatBasics,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Int = global_data.Stdlib__Int,
    a = [0, 0, 0],
    cst_c = "%c",
    cst_s = "%s",
    cst_i = cst_i$3,
    cst_li = cst_li$3,
    cst_ni = cst_ni$3,
    cst_Li = cst_Li$3,
    cst_f = "%f",
    cst_B = "%B",
    cst_a = "%a",
    cst_t = "%t",
    cst_r = "%r",
    cst_r$0 = "%_r",
    cst_0c = "0c",
    b = [0, cst_camlinternalFormat_ml, 850, 23],
    c = [0, cst_camlinternalFormat_ml, 837, 26],
    d = [0, cst_camlinternalFormat_ml, 847, 28],
    e = [0, cst_camlinternalFormat_ml, 815, 21],
    f = [0, cst_camlinternalFormat_ml, 819, 21],
    g = [0, cst_camlinternalFormat_ml, 823, 19],
    h = [0, cst_camlinternalFormat_ml, 827, 22],
    i = [0, cst_camlinternalFormat_ml, 832, 30],
    j = [0, cst_camlinternalFormat_ml, 851, 23],
    k = [0, cst_camlinternalFormat_ml, 836, 26],
    l = [0, cst_camlinternalFormat_ml, 846, 28],
    m = [0, cst_camlinternalFormat_ml, 814, 21],
    n = [0, cst_camlinternalFormat_ml, 818, 21],
    o = [0, cst_camlinternalFormat_ml, 822, 19],
    p = [0, cst_camlinternalFormat_ml, 826, 22],
    q = [0, cst_camlinternalFormat_ml, 831, 30];
   function create_char_set(param){return Stdlib_Bytes[1].call(null, 32, 0);}
   function add_in_char_set(char_set, c){
    var
     str_ind = c >>> 3 | 0,
     mask = 1 << (c & 7),
     a = runtime.caml_bytes_get(char_set, str_ind) | mask;
    return caml_bytes_set(char_set, str_ind, Stdlib[29].call(null, a));
   }
   function freeze_char_set(char_set){
    return Stdlib_Bytes[6].call(null, char_set);
   }
   function rev_char_set(char_set){
    var char_set$0 = create_char_set(0), i = 0;
    for(;;){
     var a = caml_string_get(char_set, i) ^ 255;
     caml_bytes_set(char_set$0, i, Stdlib[29].call(null, a));
     var b = i + 1 | 0;
     if(31 === i) return Stdlib_Bytes[44].call(null, char_set$0);
     i = b;
    }
   }
   function is_in_char_set(char_set, c){
    var str_ind = c >>> 3 | 0, mask = 1 << (c & 7);
    return 0 !== (caml_string_get(char_set, str_ind) & mask) ? 1 : 0;
   }
   function pad_of_pad_opt(pad_opt){
    if(! pad_opt) return 0;
    var width = pad_opt[1];
    return [0, 1, width];
   }
   function param_format_of_ignored_format(ign, fmt){
    if(typeof ign === "number")
     switch(ign){
       case 0:
        return [0, [0, fmt]];
       case 1:
        return [0, [1, fmt]];
       case 2:
        return [0, [19, fmt]];
       default: return [0, [22, fmt]];
     }
    switch(ign[0]){
      case 0:
       var pad_opt = ign[1]; return [0, [2, pad_of_pad_opt(pad_opt), fmt]];
      case 1:
       var pad_opt$0 = ign[1];
       return [0, [3, pad_of_pad_opt(pad_opt$0), fmt]];
      case 2:
       var pad_opt$1 = ign[2], iconv = ign[1];
       return [0, [4, iconv, pad_of_pad_opt(pad_opt$1), 0, fmt]];
      case 3:
       var pad_opt$2 = ign[2], iconv$0 = ign[1];
       return [0, [5, iconv$0, pad_of_pad_opt(pad_opt$2), 0, fmt]];
      case 4:
       var pad_opt$3 = ign[2], iconv$1 = ign[1];
       return [0, [6, iconv$1, pad_of_pad_opt(pad_opt$3), 0, fmt]];
      case 5:
       var pad_opt$4 = ign[2], iconv$2 = ign[1];
       return [0, [7, iconv$2, pad_of_pad_opt(pad_opt$4), 0, fmt]];
      case 6:
       var prec_opt = ign[2], pad_opt$5 = ign[1];
       if(prec_opt) var ndec = prec_opt[1], b = [0, ndec]; else var b = 0;
       return [0, [8, a, pad_of_pad_opt(pad_opt$5), b, fmt]];
      case 7:
       var pad_opt$6 = ign[1];
       return [0, [9, pad_of_pad_opt(pad_opt$6), fmt]];
      case 8:
       var fmtty = ign[2], pad_opt$7 = ign[1];
       return [0, [13, pad_opt$7, fmtty, fmt]];
      case 9:
       var fmtty$0 = ign[2], pad_opt$8 = ign[1];
       return [0, [14, pad_opt$8, fmtty$0, fmt]];
      case 10:
       var char_set = ign[2], width_opt = ign[1];
       return [0, [20, width_opt, char_set, fmt]];
      default: var counter = ign[1]; return [0, [21, counter, fmt]];
    }
   }
   function default_float_precision(fconv){return 5 === fconv[2] ? 12 : -6;}
   function buffer_create(init_size){
    return [0, 0, caml_create_bytes(init_size)];
   }
   function buffer_check_size(buf, overhead){
    var
     len = runtime.caml_ml_bytes_length(buf[2]),
     min_len = buf[1] + overhead | 0;
    if(len < min_len){
     var
      new_len = Stdlib_Int[11].call(null, len * 2 | 0, min_len),
      new_str = caml_create_bytes(new_len);
     Stdlib_Bytes[11].call(null, buf[2], 0, new_str, 0, len);
     buf[2] = new_str;
    }
   }
   function buffer_add_char(buf, c){
    buffer_check_size(buf, 1);
    caml_bytes_set(buf[2], buf[1], c);
    buf[1] = buf[1] + 1 | 0;
   }
   function buffer_add_string(buf, s){
    var str_len = caml_ml_string_length(s);
    buffer_check_size(buf, str_len);
    Stdlib_String[6].call(null, s, 0, buf[2], buf[1], str_len);
    buf[1] = buf[1] + str_len | 0;
   }
   function buffer_contents(buf){
    return Stdlib_Bytes[8].call(null, buf[2], 0, buf[1]);
   }
   function char_of_iconv(iconv){
    switch(iconv){
      case 6:
      case 7:
       return 120;
      case 8:
      case 9:
       return 88;
      case 10:
      case 11:
       return 111;
      case 12:
      case 15:
       return 117;
      case 0:
      case 1:
      case 2:
      case 13:
       return 100;
      default: return 105;
    }
   }
   function char_of_fconv(opt, fconv){
    var cF = opt ? opt[1] : 70;
    switch(fconv[2]){
      case 0:
       return 102;
      case 1:
       return 101;
      case 2:
       return 69;
      case 3:
       return 103;
      case 4:
       return 71;
      case 5:
       return cF;
      case 6:
       return 104;
      case 7:
       return 72;
      default: return 70;
    }
   }
   function bprint_char_set(buf, char_set){
    function print_char(buf, i){
     var c = Stdlib[29].call(null, i);
     return 37 === c
             ? (buffer_add_char(buf, 37), buffer_add_char(buf, 37))
             : 64
               === c
               ? (buffer_add_char(buf, 37), buffer_add_char(buf, 64))
               : buffer_add_char(buf, c);
    }
    buffer_add_char(buf, 91);
    var
     set =
       is_in_char_set(char_set, 0)
        ? (buffer_add_char(buf, 94), rev_char_set(char_set))
        : char_set;
    function is_alone(c){
     var
      after = Stdlib_Char[1].call(null, c + 1 | 0),
      before = Stdlib_Char[1].call(null, c - 1 | 0),
      a = is_in_char_set(set, c);
     if(a)
      var
       b = is_in_char_set(set, before),
       e = b ? is_in_char_set(set, after) : b,
       d = 1 - e;
     else
      var d = a;
     return d;
    }
    if(is_alone(93)) buffer_add_char(buf, 93);
    var i = 1;
    a:
    for(;;){
     b:
     if(i < 256){
      if(! is_in_char_set(set, Stdlib[29].call(null, i))){var i$0 = i + 1 | 0; i = i$0; continue;}
      var switcher = Stdlib[29].call(null, i) - 45 | 0;
      if(48 < switcher >>> 0){
       if(210 <= switcher){print_char(buf, 255); break b;}
      }
      else if(46 < switcher - 1 >>> 0){
       var i$2 = i + 1 | 0;
       i = i$2;
       continue;
      }
      var i$1 = i + 1 | 0;
      if(! is_in_char_set(set, Stdlib[29].call(null, i$1))){
       print_char(buf, i$1 - 1 | 0);
       var i$6 = i$1 + 1 | 0;
       i = i$6;
       continue;
      }
      var switcher$0 = Stdlib[29].call(null, i$1) - 45 | 0;
      if(48 < switcher$0 >>> 0){
       if(210 <= switcher$0){
        print_char(buf, 254);
        print_char(buf, 255);
        break b;
       }
      }
      else if
       (46 < switcher$0 - 1 >>> 0
        && ! is_in_char_set(set, Stdlib[29].call(null, i$1 + 1 | 0))){
       print_char(buf, i$1 - 1 | 0);
       var i$5 = i$1 + 1 | 0;
       i = i$5;
       continue;
      }
      if(! is_in_char_set(set, Stdlib[29].call(null, i$1 + 1 | 0))){
       print_char(buf, i$1 - 1 | 0);
       print_char(buf, i$1);
       var i$4 = i$1 + 2 | 0;
       i = i$4;
       continue;
      }
      var j = i$1 + 2 | 0, i$3 = i$1 - 1 | 0, j$0 = j;
      for(;;){
       if(256 !== j$0 && is_in_char_set(set, Stdlib[29].call(null, j$0))){var j$1 = j$0 + 1 | 0; j$0 = j$1; continue;}
       print_char(buf, i$3);
       print_char(buf, 45);
       print_char(buf, j$0 - 1 | 0);
       if(j$0 >= 256) break;
       var i$7 = j$0 + 1 | 0;
       i = i$7;
       continue a;
      }
     }
     if(is_alone(45)) buffer_add_char(buf, 45);
     return buffer_add_char(buf, 93);
    }
   }
   function bprint_padty(buf, padty){
    switch(padty){
      case 0:
       return buffer_add_char(buf, 45);
      case 1:
       return;
      default: return buffer_add_char(buf, 48);
    }
   }
   function bprint_ignored_flag(buf, ign_flag){
    return ign_flag ? buffer_add_char(buf, 95) : ign_flag;
   }
   function bprint_pad_opt(buf, pad_opt){
    if(! pad_opt) return;
    var width = pad_opt[1];
    return buffer_add_string(buf, Stdlib_Int[12].call(null, width));
   }
   function bprint_padding(buf, pad){
    if(typeof pad === "number") return;
    if(0 === pad[0]){
     var n = pad[2], padty = pad[1];
     bprint_padty(buf, padty);
     return buffer_add_string(buf, Stdlib_Int[12].call(null, n));
    }
    var padty$0 = pad[1];
    bprint_padty(buf, padty$0);
    return buffer_add_char(buf, 42);
   }
   function bprint_precision(buf, prec){
    if(typeof prec !== "number"){
     var n = prec[1];
     buffer_add_char(buf, 46);
     return buffer_add_string(buf, Stdlib_Int[12].call(null, n));
    }
    if(prec) return buffer_add_string(buf, cst);
   }
   function bprint_iconv_flag(buf, iconv){
    switch(iconv){
      case 1:
      case 4:
       return buffer_add_char(buf, 43);
      case 2:
      case 5:
       return buffer_add_char(buf, 32);
      case 7:
      case 9:
      case 11:
      case 13:
      case 14:
      case 15:
       return buffer_add_char(buf, 35);
      default: return;
    }
   }
   function bprint_altint_fmt(buf, ign_flag, iconv, pad, prec, c){
    buffer_add_char(buf, 37);
    bprint_ignored_flag(buf, ign_flag);
    bprint_iconv_flag(buf, iconv);
    bprint_padding(buf, pad);
    bprint_precision(buf, prec);
    buffer_add_char(buf, c);
    return buffer_add_char(buf, char_of_iconv(iconv));
   }
   function bprint_fconv_flag(buf, fconv){
    switch(fconv[1]){
      case 1:
       buffer_add_char(buf, 43); break;
      case 2:
       buffer_add_char(buf, 32); break;
    }
    if(8 <= fconv[2]) return buffer_add_char(buf, 35);
   }
   function string_of_formatting_lit(formatting_lit){
    if(typeof formatting_lit === "number")
     switch(formatting_lit){
       case 0:
        return cst$0;
       case 1:
        return cst$1;
       case 2:
        return cst$2;
       case 3:
        return cst$3;
       case 4:
        return cst$4;
       case 5:
        return cst$5;
       default: return cst$6;
     }
    if(2 === formatting_lit[0]){
     var c = formatting_lit[1], a = Stdlib_String[1].call(null, 1, c);
     return Stdlib[28].call(null, cst$7, a);
    }
    var str = formatting_lit[1];
    return str;
   }
   function bprint_char_literal(buf, chr){
    return 37 === chr
            ? buffer_add_string(buf, cst$8)
            : buffer_add_char(buf, chr);
   }
   function bprint_string_literal(buf, str){
    var a = caml_ml_string_length(str) - 1 | 0, b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      bprint_char_literal(buf, caml_string_get(str, i));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
   }
   function bprint_fmtty(buf, fmtty$15){
    var fmtty = fmtty$15;
    for(;;){
     if(typeof fmtty === "number") return;
     switch(fmtty[0]){
       case 0:
        var fmtty$0 = fmtty[1];
        buffer_add_string(buf, cst_c);
        fmtty = fmtty$0;
        break;
       case 1:
        var fmtty$1 = fmtty[1];
        buffer_add_string(buf, cst_s);
        fmtty = fmtty$1;
        break;
       case 2:
        var fmtty$2 = fmtty[1];
        buffer_add_string(buf, cst_i);
        fmtty = fmtty$2;
        break;
       case 3:
        var fmtty$3 = fmtty[1];
        buffer_add_string(buf, cst_li);
        fmtty = fmtty$3;
        break;
       case 4:
        var fmtty$4 = fmtty[1];
        buffer_add_string(buf, cst_ni);
        fmtty = fmtty$4;
        break;
       case 5:
        var fmtty$5 = fmtty[1];
        buffer_add_string(buf, cst_Li);
        fmtty = fmtty$5;
        break;
       case 6:
        var fmtty$6 = fmtty[1];
        buffer_add_string(buf, cst_f);
        fmtty = fmtty$6;
        break;
       case 7:
        var fmtty$7 = fmtty[1];
        buffer_add_string(buf, cst_B);
        fmtty = fmtty$7;
        break;
       case 8:
        var fmtty$8 = fmtty[2], sub_fmtty = fmtty[1];
        buffer_add_string(buf, cst$9);
        bprint_fmtty(buf, sub_fmtty);
        buffer_add_string(buf, cst$10);
        fmtty = fmtty$8;
        break;
       case 9:
        var fmtty$9 = fmtty[3], sub_fmtty$0 = fmtty[1];
        buffer_add_string(buf, cst$11);
        bprint_fmtty(buf, sub_fmtty$0);
        buffer_add_string(buf, cst$12);
        fmtty = fmtty$9;
        break;
       case 10:
        var fmtty$10 = fmtty[1];
        buffer_add_string(buf, cst_a);
        fmtty = fmtty$10;
        break;
       case 11:
        var fmtty$11 = fmtty[1];
        buffer_add_string(buf, cst_t);
        fmtty = fmtty$11;
        break;
       case 12:
        var fmtty$12 = fmtty[1];
        buffer_add_string(buf, cst$13);
        fmtty = fmtty$12;
        break;
       case 13:
        var fmtty$13 = fmtty[1];
        buffer_add_string(buf, cst_r);
        fmtty = fmtty$13;
        break;
       default:
        var fmtty$14 = fmtty[1];
        buffer_add_string(buf, cst_r$0);
        fmtty = fmtty$14;
     }
    }
   }
   function int_of_custom_arity(param){
    if(! param) return 0;
    var x = param[1];
    return 1 + int_of_custom_arity(x) | 0;
   }
   function string_of_fmt(fmt){
    var buf = buffer_create(16);
    function fmtiter(fmt$1, ign_flag$0){
     var fmt = fmt$1, ign_flag = ign_flag$0;
     for(;;){
      if(typeof fmt === "number") return;
      switch(fmt[0]){
        case 0:
         var rest = fmt[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag);
         buffer_add_char(buf, 99);
         fmt = rest;
         ign_flag = 0;
         break;
        case 1:
         var rest$0 = fmt[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag);
         buffer_add_char(buf, 67);
         fmt = rest$0;
         ign_flag = 0;
         break;
        case 2:
         var rest$1 = fmt[2], pad = fmt[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag);
         bprint_padding(buf, pad);
         buffer_add_char(buf, 115);
         fmt = rest$1;
         ign_flag = 0;
         break;
        case 3:
         var rest$2 = fmt[2], pad$0 = fmt[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag);
         bprint_padding(buf, pad$0);
         buffer_add_char(buf, 83);
         fmt = rest$2;
         ign_flag = 0;
         break;
        case 4:
         var rest$3 = fmt[4], prec = fmt[3], pad$1 = fmt[2], iconv = fmt[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag);
         bprint_iconv_flag(buf, iconv);
         bprint_padding(buf, pad$1);
         bprint_precision(buf, prec);
         buffer_add_char(buf, char_of_iconv(iconv));
         fmt = rest$3;
         ign_flag = 0;
         break;
        case 5:
         var
          rest$4 = fmt[4],
          prec$0 = fmt[3],
          pad$2 = fmt[2],
          iconv$0 = fmt[1];
         bprint_altint_fmt(buf, ign_flag, iconv$0, pad$2, prec$0, 108);
         fmt = rest$4;
         ign_flag = 0;
         break;
        case 6:
         var
          rest$5 = fmt[4],
          prec$1 = fmt[3],
          pad$3 = fmt[2],
          iconv$1 = fmt[1];
         bprint_altint_fmt(buf, ign_flag, iconv$1, pad$3, prec$1, 110);
         fmt = rest$5;
         ign_flag = 0;
         break;
        case 7:
         var
          rest$6 = fmt[4],
          prec$2 = fmt[3],
          pad$4 = fmt[2],
          iconv$2 = fmt[1];
         bprint_altint_fmt(buf, ign_flag, iconv$2, pad$4, prec$2, 76);
         fmt = rest$6;
         ign_flag = 0;
         break;
        case 8:
         var rest$7 = fmt[4], prec$3 = fmt[3], pad$5 = fmt[2], fconv = fmt[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag);
         bprint_fconv_flag(buf, fconv);
         bprint_padding(buf, pad$5);
         bprint_precision(buf, prec$3);
         buffer_add_char(buf, char_of_fconv(0, fconv));
         fmt = rest$7;
         ign_flag = 0;
         break;
        case 9:
         var rest$8 = fmt[2], pad$6 = fmt[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag);
         bprint_padding(buf, pad$6);
         buffer_add_char(buf, 66);
         fmt = rest$8;
         ign_flag = 0;
         break;
        case 10:
         var rest$9 = fmt[1];
         buffer_add_string(buf, cst$14);
         fmt = rest$9;
         break;
        case 11:
         var rest$10 = fmt[2], str = fmt[1];
         bprint_string_literal(buf, str);
         fmt = rest$10;
         break;
        case 12:
         var rest$11 = fmt[2], chr = fmt[1];
         bprint_char_literal(buf, chr);
         fmt = rest$11;
         break;
        case 13:
         var rest$12 = fmt[3], fmtty = fmt[2], pad_opt = fmt[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag);
         bprint_pad_opt(buf, pad_opt);
         buffer_add_char(buf, 123);
         bprint_fmtty(buf, fmtty);
         buffer_add_char(buf, 37);
         buffer_add_char(buf, 125);
         fmt = rest$12;
         ign_flag = 0;
         break;
        case 14:
         var rest$13 = fmt[3], fmtty$0 = fmt[2], pad_opt$0 = fmt[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag);
         bprint_pad_opt(buf, pad_opt$0);
         buffer_add_char(buf, 40);
         bprint_fmtty(buf, fmtty$0);
         buffer_add_char(buf, 37);
         buffer_add_char(buf, 41);
         fmt = rest$13;
         ign_flag = 0;
         break;
        case 15:
         var rest$14 = fmt[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag);
         buffer_add_char(buf, 97);
         fmt = rest$14;
         ign_flag = 0;
         break;
        case 16:
         var rest$15 = fmt[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag);
         buffer_add_char(buf, 116);
         fmt = rest$15;
         ign_flag = 0;
         break;
        case 17:
         var rest$16 = fmt[2], fmting_lit = fmt[1];
         bprint_string_literal(buf, string_of_formatting_lit(fmting_lit));
         fmt = rest$16;
         break;
        case 18:
         var rest$17 = fmt[2], fmting_gen = fmt[1];
         if(0 === fmting_gen[0]){
          var str$0 = fmting_gen[1][2];
          buffer_add_string(buf, cst$15);
          buffer_add_string(buf, str$0);
          fmt = rest$17;
         }
         else{
          var str$1 = fmting_gen[1][2];
          buffer_add_string(buf, cst$16);
          buffer_add_string(buf, str$1);
          fmt = rest$17;
         }
         break;
        case 19:
         var rest$18 = fmt[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag);
         buffer_add_char(buf, 114);
         fmt = rest$18;
         ign_flag = 0;
         break;
        case 20:
         var rest$19 = fmt[3], char_set = fmt[2], width_opt = fmt[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag);
         bprint_pad_opt(buf, width_opt);
         bprint_char_set(buf, char_set);
         fmt = rest$19;
         ign_flag = 0;
         break;
        case 21:
         var rest$20 = fmt[2], counter = fmt[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag);
         switch(counter){
           case 0:
            var a = 108; break;
           case 1:
            var a = 110; break;
           default: var a = 78;
         }
         buffer_add_char(buf, a);
         fmt = rest$20;
         ign_flag = 0;
         break;
        case 22:
         var rest$21 = fmt[1];
         buffer_add_char(buf, 37);
         bprint_ignored_flag(buf, ign_flag);
         bprint_string_literal(buf, cst_0c);
         fmt = rest$21;
         ign_flag = 0;
         break;
        case 23:
         var
          rest$22 = fmt[2],
          ign = fmt[1],
          fmt$0 = param_format_of_ignored_format(ign, rest$22)[1];
         fmt = fmt$0;
         ign_flag = 1;
         break;
        default:
         var
          rest$23 = fmt[3],
          arity = fmt[1],
          b = int_of_custom_arity(arity),
          c = 1;
         if(b >= 1){
          var i = c;
          for(;;){
           buffer_add_char(buf, 37);
           bprint_ignored_flag(buf, ign_flag);
           buffer_add_char(buf, 63);
           var d = i + 1 | 0;
           if(b === i) break;
           i = d;
          }
         }
         fmt = rest$23;
         ign_flag = 0;
      }
     }
    }
    fmtiter(fmt, 0);
    return buffer_contents(buf);
   }
   function symm(param){
    if(typeof param === "number") return 0;
    switch(param[0]){
      case 0:
       var rest = param[1]; return [0, symm(rest)];
      case 1:
       var rest$0 = param[1]; return [1, symm(rest$0)];
      case 2:
       var rest$1 = param[1]; return [2, symm(rest$1)];
      case 3:
       var rest$2 = param[1]; return [3, symm(rest$2)];
      case 4:
       var rest$3 = param[1]; return [4, symm(rest$3)];
      case 5:
       var rest$4 = param[1]; return [5, symm(rest$4)];
      case 6:
       var rest$5 = param[1]; return [6, symm(rest$5)];
      case 7:
       var rest$6 = param[1]; return [7, symm(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1]; return [8, ty, symm(rest$7)];
      case 9:
       var rest$8 = param[3], ty2 = param[2], ty1 = param[1];
       return [9, ty2, ty1, symm(rest$8)];
      case 10:
       var rest$9 = param[1]; return [10, symm(rest$9)];
      case 11:
       var rest$10 = param[1]; return [11, symm(rest$10)];
      case 12:
       var rest$11 = param[1]; return [12, symm(rest$11)];
      case 13:
       var rest$12 = param[1]; return [13, symm(rest$12)];
      default: var rest$13 = param[1]; return [14, symm(rest$13)];
    }
   }
   function fmtty_rel_det(param){
    if(typeof param === "number")
     return [0, , function(param){}, , function(param){}];
    switch(param[0]){
      case 0:
       var
        rest = param[1],
        match = fmtty_rel_det(rest),
        de = match[4],
        af = match[2];
       return [0, , function(param){af(0);}, , de];
      case 1:
       var
        rest$0 = param[1],
        match$0 = fmtty_rel_det(rest$0),
        de$0 = match$0[4],
        af$0 = match$0[2];
       return [0, , function(param){af$0(0);}, , de$0];
      case 2:
       var
        rest$1 = param[1],
        match$1 = fmtty_rel_det(rest$1),
        de$1 = match$1[4],
        af$1 = match$1[2];
       return [0, , function(param){af$1(0);}, , de$1];
      case 3:
       var
        rest$2 = param[1],
        match$2 = fmtty_rel_det(rest$2),
        de$2 = match$2[4],
        af$2 = match$2[2];
       return [0, , function(param){af$2(0);}, , de$2];
      case 4:
       var
        rest$3 = param[1],
        match$3 = fmtty_rel_det(rest$3),
        de$3 = match$3[4],
        af$3 = match$3[2];
       return [0, , function(param){af$3(0);}, , de$3];
      case 5:
       var
        rest$4 = param[1],
        match$4 = fmtty_rel_det(rest$4),
        de$4 = match$4[4],
        af$4 = match$4[2];
       return [0, , function(param){af$4(0);}, , de$4];
      case 6:
       var
        rest$5 = param[1],
        match$5 = fmtty_rel_det(rest$5),
        de$5 = match$5[4],
        af$5 = match$5[2];
       return [0, , function(param){af$5(0);}, , de$5];
      case 7:
       var
        rest$6 = param[1],
        match$6 = fmtty_rel_det(rest$6),
        de$6 = match$6[4],
        af$6 = match$6[2];
       return [0, , function(param){af$6(0);}, , de$6];
      case 8:
       var
        rest$7 = param[2],
        match$7 = fmtty_rel_det(rest$7),
        de$7 = match$7[4],
        af$7 = match$7[2];
       return [0, , function(param){af$7(0);}, , de$7];
      case 9:
       var
        rest$8 = param[3],
        ty2 = param[2],
        ty1 = param[1],
        match$8 = fmtty_rel_det(rest$8),
        de$8 = match$8[4],
        af$8 = match$8[2],
        ty = trans(symm(ty1), ty2),
        match$9 = fmtty_rel_det(ty),
        jd = match$9[4],
        ga = match$9[2];
       return [0,
               ,
               function(param){ga(0); af$8(0);},
               ,
               function(param){jd(0); de$8(0);}];
      case 10:
       var
        rest$9 = param[1],
        match$10 = fmtty_rel_det(rest$9),
        de$9 = match$10[4],
        af$9 = match$10[2];
       return [0, , function(param){af$9(0);}, , de$9];
      case 11:
       var
        rest$10 = param[1],
        match$11 = fmtty_rel_det(rest$10),
        de$10 = match$11[4],
        af$10 = match$11[2];
       return [0, , function(param){af$10(0);}, , de$10];
      case 12:
       var
        rest$11 = param[1],
        match$12 = fmtty_rel_det(rest$11),
        de$11 = match$12[4],
        af$11 = match$12[2];
       return [0, , function(param){af$11(0);}, , de$11];
      case 13:
       var
        rest$12 = param[1],
        match$13 = fmtty_rel_det(rest$12),
        de$12 = match$13[4],
        af$12 = match$13[2];
       return [0, , function(param){af$12(0);}, , function(param){de$12(0);}];
      default:
       var
        rest$13 = param[1],
        match$14 = fmtty_rel_det(rest$13),
        de$13 = match$14[4],
        af$13 = match$14[2];
       return [0, , function(param){af$13(0);}, , function(param){de$13(0);}];
    }
   }
   function trans(ty1, ty2){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           if(typeof ty1 !== "number"){
            switch(ty1[0]){
              case 0:
               var rest1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 0:
                   var rest2 = ty2[1]; return [0, trans(rest1, rest2)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                  case 8:
                   break f;
                  case 9:
                   break g;
                }
               break;
              case 1:
               var rest1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 1:
                   var rest2$0 = ty2[1]; return [1, trans(rest1$0, rest2$0)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                  case 8:
                   break f;
                  case 9:
                   break g;
                }
               break;
              case 2:
               var rest1$1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 2:
                   var rest2$1 = ty2[1]; return [2, trans(rest1$1, rest2$1)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                  case 8:
                   break f;
                  case 9:
                   break g;
                }
               break;
              case 3:
               var rest1$2 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 3:
                   var rest2$2 = ty2[1]; return [3, trans(rest1$2, rest2$2)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                  case 8:
                   break f;
                  case 9:
                   break g;
                }
               break;
              case 4:
               var rest1$3 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 4:
                   var rest2$3 = ty2[1]; return [4, trans(rest1$3, rest2$3)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                  case 8:
                   break f;
                  case 9:
                   break g;
                }
               break;
              case 5:
               var rest1$4 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 5:
                   var rest2$4 = ty2[1]; return [5, trans(rest1$4, rest2$4)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                  case 8:
                   break f;
                  case 9:
                   break g;
                }
               break;
              case 6:
               var rest1$5 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 6:
                   var rest2$5 = ty2[1]; return [6, trans(rest1$5, rest2$5)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                  case 8:
                   break f;
                  case 9:
                   break g;
                }
               break;
              case 7:
               var rest1$6 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 7:
                   var rest2$6 = ty2[1]; return [7, trans(rest1$6, rest2$6)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                  case 8:
                   break f;
                  case 9:
                   break g;
                }
               break;
              case 8:
               var rest1$7 = ty1[2], ty1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                   var
                    rest2$7 = ty2[2],
                    ty2$0 = ty2[1],
                    a = trans(rest1$7, rest2$7);
                   return [8, trans(ty1$0, ty2$0), a];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, k], 1);
              case 9:
               var rest1$8 = ty1[3], ty12 = ty1[2], ty11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 9:
                   var
                    rest2$8 = ty2[3],
                    ty22 = ty2[2],
                    ty21 = ty2[1],
                    ty = trans(symm(ty12), ty21),
                    match = fmtty_rel_det(ty),
                    f4 = match[4],
                    f2 = match[2];
                   f2(0);
                   f4(0);
                   return [9, ty11, ty22, trans(rest1$8, rest2$8)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                  case 8:
                   break f;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, l], 1);
              case 10:
               var rest1$9 = ty1[1];
               if(typeof ty2 !== "number" && 10 === ty2[0]){
                var rest2$9 = ty2[1];
                return [10, trans(rest1$9, rest2$9)];
               }
               throw caml_maybe_attach_backtrace([0, Assert_failure, m], 1);
              case 11:
               var rest1$10 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 11:
                   var rest2$10 = ty2[1];
                   return [11, trans(rest1$10, rest2$10)];
                  case 10:
                   break a;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, n], 1);
              case 12:
               var rest1$11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 12:
                   var rest2$11 = ty2[1];
                   return [12, trans(rest1$11, rest2$11)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, o], 1);
              case 13:
               var rest1$12 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 13:
                   var rest2$12 = ty2[1];
                   return [13, trans(rest1$12, rest2$12)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, p], 1);
              default:
               var rest1$13 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 14:
                   var rest2$13 = ty2[1];
                   return [14, trans(rest1$13, rest2$13)];
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                }
               throw caml_maybe_attach_backtrace([0, Assert_failure, q], 1);
            }
            throw caml_maybe_attach_backtrace([0, Assert_failure, j], 1);
           }
           if(typeof ty2 === "number") return 0;
           switch(ty2[0]){
             case 10:
              break a;
             case 11:
              break b;
             case 12:
              break c;
             case 13:
              break d;
             case 14:
              break e;
             case 8:
              break f;
             case 9: break;
             default:
              throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
           }
          }
          throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
         }
         throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
        }
        throw caml_maybe_attach_backtrace([0, Assert_failure, i], 1);
       }
       throw caml_maybe_attach_backtrace([0, Assert_failure, h], 1);
      }
      throw caml_maybe_attach_backtrace([0, Assert_failure, g], 1);
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, e], 1);
   }
   function fmtty_of_fmt(fmtty$4){
    var fmtty = fmtty$4;
    for(;;){
     if(typeof fmtty === "number") return 0;
     switch(fmtty[0]){
       case 4:
        var
         rest$1 = fmtty[4],
         prec = fmtty[3],
         pad$0 = fmtty[2],
         ty_rest = fmtty_of_fmt(rest$1),
         prec_ty = fmtty_of_precision_fmtty(prec, [2, ty_rest]);
        return fmtty_of_padding_fmtty(pad$0, prec_ty);
       case 5:
        var
         rest$2 = fmtty[4],
         prec$0 = fmtty[3],
         pad$1 = fmtty[2],
         ty_rest$0 = fmtty_of_fmt(rest$2),
         prec_ty$0 = fmtty_of_precision_fmtty(prec$0, [3, ty_rest$0]);
        return fmtty_of_padding_fmtty(pad$1, prec_ty$0);
       case 6:
        var
         rest$3 = fmtty[4],
         prec$1 = fmtty[3],
         pad$2 = fmtty[2],
         ty_rest$1 = fmtty_of_fmt(rest$3),
         prec_ty$1 = fmtty_of_precision_fmtty(prec$1, [4, ty_rest$1]);
        return fmtty_of_padding_fmtty(pad$2, prec_ty$1);
       case 7:
        var
         rest$4 = fmtty[4],
         prec$2 = fmtty[3],
         pad$3 = fmtty[2],
         ty_rest$2 = fmtty_of_fmt(rest$4),
         prec_ty$2 = fmtty_of_precision_fmtty(prec$2, [5, ty_rest$2]);
        return fmtty_of_padding_fmtty(pad$3, prec_ty$2);
       case 8:
        var
         rest$5 = fmtty[4],
         prec$3 = fmtty[3],
         pad$4 = fmtty[2],
         ty_rest$3 = fmtty_of_fmt(rest$5),
         prec_ty$3 = fmtty_of_precision_fmtty(prec$3, [6, ty_rest$3]);
        return fmtty_of_padding_fmtty(pad$4, prec_ty$3);
       case 9:
        var rest$6 = fmtty[2], pad$5 = fmtty[1];
        return fmtty_of_padding_fmtty(pad$5, [7, fmtty_of_fmt(rest$6)]);
       case 10:
        var fmtty$0 = fmtty[1]; fmtty = fmtty$0; break;
       case 13:
        var rest$7 = fmtty[3], ty = fmtty[2];
        return [8, ty, fmtty_of_fmt(rest$7)];
       case 14:
        var rest$8 = fmtty[3], ty$0 = fmtty[2];
        return [9, ty$0, ty$0, fmtty_of_fmt(rest$8)];
       case 15:
        var rest$9 = fmtty[1]; return [10, fmtty_of_fmt(rest$9)];
       case 16:
        var rest$10 = fmtty[1]; return [11, fmtty_of_fmt(rest$10)];
       case 18:
        var
         rest$11 = fmtty[2],
         formatting_gen = fmtty[1],
         b = fmtty_of_fmt(rest$11);
        if(0 === formatting_gen[0])
         var fmt = formatting_gen[1][1], a = fmtty_of_fmt(fmt);
        else
         var fmt$0 = formatting_gen[1][1], a = fmtty_of_fmt(fmt$0);
        return CamlinternalFormatBasics[1].call(null, a, b);
       case 19:
        var rest$12 = fmtty[1]; return [13, fmtty_of_fmt(rest$12)];
       case 20:
        var rest$13 = fmtty[3]; return [1, fmtty_of_fmt(rest$13)];
       case 21:
        var rest$14 = fmtty[2]; return [2, fmtty_of_fmt(rest$14)];
       case 23:
        var fmtty$2 = fmtty[2], ign = fmtty[1];
        if(typeof ign === "number"){
         if(2 === ign) return [14, fmtty_of_fmt(fmtty$2)];
         fmtty = fmtty$2;
        }
        else{
         if(9 === ign[0]){
          var fmtty$3 = ign[2], c = fmtty_of_fmt(fmtty$2);
          return CamlinternalFormatBasics[1].call(null, fmtty$3, c);
         }
         fmtty = fmtty$2;
        }
        break;
       case 24:
        var rest$15 = fmtty[3], arity = fmtty[1];
        return fmtty_of_custom(arity, fmtty_of_fmt(rest$15));
       case 2:
       case 3:
        var rest$0 = fmtty[2], pad = fmtty[1];
        return fmtty_of_padding_fmtty(pad, [1, fmtty_of_fmt(rest$0)]);
       case 0:
       case 1:
       case 22:
        var rest = fmtty[1]; return [0, fmtty_of_fmt(rest)];
       default: var fmtty$1 = fmtty[2]; fmtty = fmtty$1;
     }
    }
   }
   function fmtty_of_custom(arity, fmtty){
    if(! arity) return fmtty;
    var arity$0 = arity[1];
    return [12, fmtty_of_custom(arity$0, fmtty)];
   }
   function fmtty_of_padding_fmtty(pad, fmtty){
    return typeof pad === "number" ? fmtty : 0 === pad[0] ? fmtty : [2, fmtty];
   }
   function fmtty_of_precision_fmtty(prec, fmtty){
    return typeof prec === "number" ? prec ? [2, fmtty] : fmtty : fmtty;
   }
   var
    Type_mismatch =
      [248, "CamlinternalFormat.Type_mismatch", runtime.caml_fresh_oo_id(0)],
    cst_d$0 = "%+d",
    cst_d$1 = "% d",
    cst_i$1 = "%+i",
    cst_i$2 = "% i",
    cst_x = "%x",
    cst_x$0 = "%#x",
    cst_X = "%X",
    cst_X$0 = "%#X",
    cst_o = "%o",
    cst_o$0 = "%#o",
    cst_Ld$0 = "%+Ld",
    cst_Ld$1 = "% Ld",
    cst_Li$1 = "%+Li",
    cst_Li$2 = "% Li",
    cst_Lx = "%Lx",
    cst_Lx$0 = "%#Lx",
    cst_LX = "%LX",
    cst_LX$0 = "%#LX",
    cst_Lo = "%Lo",
    cst_Lo$0 = "%#Lo",
    cst_ld$0 = "%+ld",
    cst_ld$1 = "% ld",
    cst_li$1 = "%+li",
    cst_li$2 = "% li",
    cst_lx = "%lx",
    cst_lx$0 = "%#lx",
    cst_lX = "%lX",
    cst_lX$0 = "%#lX",
    cst_lo = "%lo",
    cst_lo$0 = "%#lo",
    cst_nd$0 = "%+nd",
    cst_nd$1 = "% nd",
    cst_ni$1 = "%+ni",
    cst_ni$2 = "% ni",
    cst_nx = "%nx",
    cst_nx$0 = "%#nx",
    cst_nX = "%nX",
    cst_nX$0 = "%#nX",
    cst_no = "%no",
    cst_no$0 = "%#no",
    r = [0, 103],
    cst_neg_infinity = "neg_infinity",
    cst_infinity = "infinity",
    cst_nan = "nan",
    s = [0, cst_camlinternalFormat_ml, 1558, 4],
    cst_Printf_bad_conversion = "Printf: bad conversion %[",
    t = [0, cst_camlinternalFormat_ml, 1626, 39],
    u = [0, cst_camlinternalFormat_ml, 1649, 31],
    v = [0, cst_camlinternalFormat_ml, 1650, 31],
    cst_Printf_bad_conversion$0 = "Printf: bad conversion %_",
    w = [0, cst_camlinternalFormat_ml, 1830, 8],
    x = [0, 0, 4],
    y =
      [0,
       [11, "invalid box description ", [3, 0, 0]],
       "invalid box description %S"],
    z =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11, cst_at_character_number, [4, 0, 0, 0, [11, cst$44, [2, 0, 0]]]]]],
       "invalid format %S: at character number %d, %s"],
    cst_non_zero_widths_are_unsupp =
      "non-zero widths are unsupported for %c conversions",
    A =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, ", '", [0, [11, "' without ", [2, 0, 0]]]]]]]],
       "invalid format %S: at character number %d, '%c' without %s"],
    B =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, cst$44, [2, 0, [11, " expected, read ", [1, 0]]]]]]]],
       "invalid format %S: at character number %d, %s expected, read %C"],
    C =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, ", duplicate flag ", [1, 0]]]]]],
       "invalid format %S: at character number %d, duplicate flag %C"],
    cst_padding = "padding",
    D = [0, 1, 0],
    cst_0 = cst_0$3,
    E = [0, 0],
    cst_precision = cst_precision$3,
    F = [1, 0],
    G = [1, 1],
    cst_precision$0 = cst_precision$3,
    H = [1, 1],
    cst_precision$1 = cst_precision$3,
    cst_0$0 = cst_0$3,
    I = [1, 1],
    cst_0$1 = cst_0$3,
    cst_0$2 = "'0'",
    J =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11, ', invalid conversion "', [12, 37, [0, [12, 34, 0]]]]]]]],
       'invalid format %S: at character number %d, invalid conversion "%%%c"'],
    K = [0, 0],
    cst_padding$0 = "`padding'",
    L = [0, 0],
    cst_precision$2 = "`precision'",
    M =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11,
            ", flag ",
            [1,
             [11,
              " is only allowed after the '",
              [12, 37, [11, "', before padding and precision", 0]]]]]]]]],
       "invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision"],
    N = [0, [12, 64, 0]],
    O = [0, "@ ", 1, 0],
    P = [0, "@,", 0, 0],
    Q = [2, 60],
    R =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ": '",
          [12,
           37,
           [11,
            "' alone is not accepted in character sets, use ",
            [12,
             37,
             [12,
              37,
              [11, " instead at position ", [4, 0, 0, 0, [12, 46, 0]]]]]]]]]],
       "invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d."],
    S =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ": integer ",
          [4, 0, 0, 0, [11, " is greater than the limit ", [4, 0, 0, 0, 0]]]]]],
       "invalid format %S: integer %d is greater than the limit %d"],
    T = [0, cst_camlinternalFormat_ml, 2837, 11],
    cst_digit = "digit",
    U =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ': unclosed sub-format, expected "',
          [12, 37, [0, [11, '" at character number ', [4, 0, 0, 0, 0]]]]]]],
       'invalid format %S: unclosed sub-format, expected "%%%c" at character number %d'],
    cst_character = "character ')'",
    cst_character$0 = "character '}'",
    V = [0, cst_camlinternalFormat_ml, 2899, 34],
    W = [0, cst_camlinternalFormat_ml, 2935, 28],
    X = [0, cst_camlinternalFormat_ml, 2957, 11],
    Y =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11,
            cst$44,
            [2,
             0,
             [11,
              " is incompatible with '",
              [0, [11, "' in sub-format ", [3, 0, 0]]]]]]]]]],
       "invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S"],
    Z =
      [0,
       [11, cst_bad_input_format_type_mism, [3, 0, [11, cst_and, [3, 0, 0]]]],
       cst_bad_input_format_type_mism$0],
    _ =
      [0,
       [11, cst_bad_input_format_type_mism, [3, 0, [11, cst_and, [3, 0, 0]]]],
       cst_bad_input_format_type_mism$0];
   function type_padding(pad, fmtty){
    if(typeof pad === "number") return [0, 0, fmtty];
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     return [0, [0, padty, w], fmtty];
    }
    if(typeof fmtty !== "number" && 2 === fmtty[0]){
     var rest = fmtty[1], padty$0 = pad[1];
     return [0, [1, padty$0], rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_padprec(pad, prec, fmtty){
    var match = type_padding(pad, fmtty);
    if(typeof prec !== "number"){
     var rest$1 = match[2], pad$2 = match[1], p = prec[1];
     return [0, pad$2, [0, p], rest$1];
    }
    if(! prec){
     var rest$0 = match[2], pad$1 = match[1];
     return [0, pad$1, 0, rest$0];
    }
    var match$0 = match[2];
    if(typeof match$0 !== "number" && 2 === match$0[0]){
     var rest = match$0[1], pad$0 = match[1];
     return [0, pad$0, 1, rest];
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_format(fmt, fmtty){
    var a = type_format_gen(fmt, fmtty);
    if(typeof a[2] !== "number")
     throw caml_maybe_attach_backtrace(Type_mismatch, 1);
    var fmt$0 = a[1];
    return fmt$0;
   }
   function type_format_gen(fmt, fmtty0){
    if(typeof fmt === "number") return [0, 0, fmtty0];
    switch(fmt[0]){
      case 0:
       if(typeof fmtty0 !== "number" && 0 === fmtty0[0]){
        var
         fmtty_rest = fmtty0[1],
         fmt_rest = fmt[1],
         match = type_format_gen(fmt_rest, fmtty_rest),
         fmtty = match[2],
         fmt$0 = match[1];
        return [0, [0, fmt$0], fmtty];
       }
       break;
      case 1:
       if(typeof fmtty0 !== "number" && 0 === fmtty0[0]){
        var
         fmtty_rest$0 = fmtty0[1],
         fmt_rest$0 = fmt[1],
         match$0 = type_format_gen(fmt_rest$0, fmtty_rest$0),
         fmtty$0 = match$0[2],
         fmt$1 = match$0[1];
        return [0, [1, fmt$1], fmtty$0];
       }
       break;
      case 2:
       var
        fmt_rest$1 = fmt[2],
        pad = fmt[1],
        match$1 = type_padding(pad, fmtty0),
        pad$0 = match$1[1],
        match$2 = match$1[2];
       if(typeof match$2 !== "number" && 1 === match$2[0]){
        var
         fmtty_rest$1 = match$2[1],
         match$3 = type_format_gen(fmt_rest$1, fmtty_rest$1),
         fmtty$1 = match$3[2],
         fmt$2 = match$3[1];
        return [0, [2, pad$0, fmt$2], fmtty$1];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 3:
       var
        fmt_rest$2 = fmt[2],
        pad$1 = fmt[1],
        match$4 = type_padding(pad$1, fmtty0),
        pad$2 = match$4[1],
        match$5 = match$4[2];
       if(typeof match$5 !== "number" && 1 === match$5[0]){
        var
         fmtty_rest$2 = match$5[1],
         match$6 = type_format_gen(fmt_rest$2, fmtty_rest$2),
         fmtty$2 = match$6[2],
         fmt$3 = match$6[1];
        return [0, [3, pad$2, fmt$3], fmtty$2];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 4:
       var
        fmt_rest$3 = fmt[4],
        prec = fmt[3],
        pad$3 = fmt[2],
        iconv = fmt[1],
        match$7 = type_padprec(pad$3, prec, fmtty0),
        pad$4 = match$7[1],
        match$8 = match$7[3];
       if(typeof match$8 !== "number" && 2 === match$8[0]){
        var
         fmtty_rest$3 = match$8[1],
         prec$0 = match$7[2],
         match$9 = type_format_gen(fmt_rest$3, fmtty_rest$3),
         fmtty$3 = match$9[2],
         fmt$4 = match$9[1];
        return [0, [4, iconv, pad$4, prec$0, fmt$4], fmtty$3];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 5:
       var
        fmt_rest$4 = fmt[4],
        prec$1 = fmt[3],
        pad$5 = fmt[2],
        iconv$0 = fmt[1],
        match$10 = type_padprec(pad$5, prec$1, fmtty0),
        pad$6 = match$10[1],
        match$11 = match$10[3];
       if(typeof match$11 !== "number" && 3 === match$11[0]){
        var
         fmtty_rest$4 = match$11[1],
         prec$2 = match$10[2],
         match$12 = type_format_gen(fmt_rest$4, fmtty_rest$4),
         fmtty$4 = match$12[2],
         fmt$5 = match$12[1];
        return [0, [5, iconv$0, pad$6, prec$2, fmt$5], fmtty$4];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 6:
       var
        fmt_rest$5 = fmt[4],
        prec$3 = fmt[3],
        pad$7 = fmt[2],
        iconv$1 = fmt[1],
        match$13 = type_padprec(pad$7, prec$3, fmtty0),
        pad$8 = match$13[1],
        match$14 = match$13[3];
       if(typeof match$14 !== "number" && 4 === match$14[0]){
        var
         fmtty_rest$5 = match$14[1],
         prec$4 = match$13[2],
         match$15 = type_format_gen(fmt_rest$5, fmtty_rest$5),
         fmtty$5 = match$15[2],
         fmt$6 = match$15[1];
        return [0, [6, iconv$1, pad$8, prec$4, fmt$6], fmtty$5];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 7:
       var
        fmt_rest$6 = fmt[4],
        prec$5 = fmt[3],
        pad$9 = fmt[2],
        iconv$2 = fmt[1],
        match$16 = type_padprec(pad$9, prec$5, fmtty0),
        pad$10 = match$16[1],
        match$17 = match$16[3];
       if(typeof match$17 !== "number" && 5 === match$17[0]){
        var
         fmtty_rest$6 = match$17[1],
         prec$6 = match$16[2],
         match$18 = type_format_gen(fmt_rest$6, fmtty_rest$6),
         fmtty$6 = match$18[2],
         fmt$7 = match$18[1];
        return [0, [7, iconv$2, pad$10, prec$6, fmt$7], fmtty$6];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 8:
       var
        fmt_rest$7 = fmt[4],
        prec$7 = fmt[3],
        pad$11 = fmt[2],
        fconv = fmt[1],
        match$19 = type_padprec(pad$11, prec$7, fmtty0),
        pad$12 = match$19[1],
        match$20 = match$19[3];
       if(typeof match$20 !== "number" && 6 === match$20[0]){
        var
         fmtty_rest$7 = match$20[1],
         prec$8 = match$19[2],
         match$21 = type_format_gen(fmt_rest$7, fmtty_rest$7),
         fmtty$7 = match$21[2],
         fmt$8 = match$21[1];
        return [0, [8, fconv, pad$12, prec$8, fmt$8], fmtty$7];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 9:
       var
        fmt_rest$8 = fmt[2],
        pad$13 = fmt[1],
        match$22 = type_padding(pad$13, fmtty0),
        pad$14 = match$22[1],
        match$23 = match$22[2];
       if(typeof match$23 !== "number" && 7 === match$23[0]){
        var
         fmtty_rest$8 = match$23[1],
         match$24 = type_format_gen(fmt_rest$8, fmtty_rest$8),
         fmtty$8 = match$24[2],
         fmt$9 = match$24[1];
        return [0, [9, pad$14, fmt$9], fmtty$8];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
      case 10:
       var
        fmt_rest$9 = fmt[1],
        match$25 = type_format_gen(fmt_rest$9, fmtty0),
        fmtty$9 = match$25[2],
        fmt$10 = match$25[1];
       return [0, [10, fmt$10], fmtty$9];
      case 11:
       var
        fmt_rest$10 = fmt[2],
        str = fmt[1],
        match$26 = type_format_gen(fmt_rest$10, fmtty0),
        fmtty$10 = match$26[2],
        fmt$11 = match$26[1];
       return [0, [11, str, fmt$11], fmtty$10];
      case 12:
       var
        fmt_rest$11 = fmt[2],
        chr = fmt[1],
        match$27 = type_format_gen(fmt_rest$11, fmtty0),
        fmtty$11 = match$27[2],
        fmt$12 = match$27[1];
       return [0, [12, chr, fmt$12], fmtty$11];
      case 13:
       if(typeof fmtty0 !== "number" && 8 === fmtty0[0]){
        var
         fmtty_rest$9 = fmtty0[2],
         sub_fmtty = fmtty0[1],
         fmt_rest$12 = fmt[3],
         sub_fmtty$0 = fmt[2],
         pad_opt = fmt[1];
        if(caml_notequal([0, sub_fmtty$0], [0, sub_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$28 = type_format_gen(fmt_rest$12, fmtty_rest$9),
         fmtty$12 = match$28[2],
         fmt$13 = match$28[1];
        return [0, [13, pad_opt, sub_fmtty, fmt$13], fmtty$12];
       }
       break;
      case 14:
       if(typeof fmtty0 !== "number" && 9 === fmtty0[0]){
        var
         fmtty_rest$10 = fmtty0[3],
         sub_fmtty1 = fmtty0[1],
         fmt_rest$13 = fmt[3],
         sub_fmtty$1 = fmt[2],
         pad_opt$0 = fmt[1],
         b = [0, CamlinternalFormatBasics[2].call(null, sub_fmtty1)];
        if
         (caml_notequal
           ([0, CamlinternalFormatBasics[2].call(null, sub_fmtty$1)], b))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$29 =
           type_format_gen
            (fmt_rest$13,
             CamlinternalFormatBasics[2].call(null, fmtty_rest$10)),
         fmtty$13 = match$29[2],
         fmt$14 = match$29[1];
        return [0, [14, pad_opt$0, sub_fmtty1, fmt$14], fmtty$13];
       }
       break;
      case 15:
       if(typeof fmtty0 !== "number" && 10 === fmtty0[0]){
        var
         fmtty_rest$11 = fmtty0[1],
         fmt_rest$14 = fmt[1],
         match$30 = type_format_gen(fmt_rest$14, fmtty_rest$11),
         fmtty$14 = match$30[2],
         fmt$15 = match$30[1];
        return [0, [15, fmt$15], fmtty$14];
       }
       break;
      case 16:
       if(typeof fmtty0 !== "number" && 11 === fmtty0[0]){
        var
         fmtty_rest$12 = fmtty0[1],
         fmt_rest$15 = fmt[1],
         match$31 = type_format_gen(fmt_rest$15, fmtty_rest$12),
         fmtty$15 = match$31[2],
         fmt$16 = match$31[1];
        return [0, [16, fmt$16], fmtty$15];
       }
       break;
      case 17:
       var
        fmt_rest$16 = fmt[2],
        formatting_lit = fmt[1],
        match$32 = type_format_gen(fmt_rest$16, fmtty0),
        fmtty$16 = match$32[2],
        fmt$17 = match$32[1];
       return [0, [17, formatting_lit, fmt$17], fmtty$16];
      case 18:
       var fmt_rest$17 = fmt[2], formatting_gen = fmt[1];
       if(0 === formatting_gen[0]){
        var
         match$36 = formatting_gen[1],
         str$0 = match$36[2],
         fmt1 = match$36[1],
         match$37 = type_format_gen(fmt1, fmtty0),
         fmtty2 = match$37[2],
         fmt2 = match$37[1],
         match$38 = type_format_gen(fmt_rest$17, fmtty2),
         fmtty3 = match$38[2],
         fmt3 = match$38[1];
        return [0, [18, [0, [0, fmt2, str$0]], fmt3], fmtty3];
       }
       var
        match$39 = formatting_gen[1],
        str$1 = match$39[2],
        fmt1$0 = match$39[1],
        match$40 = type_format_gen(fmt1$0, fmtty0),
        fmtty2$0 = match$40[2],
        fmt2$0 = match$40[1],
        match$41 = type_format_gen(fmt_rest$17, fmtty2$0),
        fmtty3$0 = match$41[2],
        fmt3$0 = match$41[1];
       return [0, [18, [1, [0, fmt2$0, str$1]], fmt3$0], fmtty3$0];
      case 19:
       if(typeof fmtty0 !== "number" && 13 === fmtty0[0]){
        var
         fmtty_rest$13 = fmtty0[1],
         fmt_rest$18 = fmt[1],
         match$33 = type_format_gen(fmt_rest$18, fmtty_rest$13),
         fmtty$17 = match$33[2],
         fmt$18 = match$33[1];
        return [0, [19, fmt$18], fmtty$17];
       }
       break;
      case 20:
       if(typeof fmtty0 !== "number" && 1 === fmtty0[0]){
        var
         fmtty_rest$14 = fmtty0[1],
         fmt_rest$19 = fmt[3],
         char_set = fmt[2],
         width_opt = fmt[1],
         match$34 = type_format_gen(fmt_rest$19, fmtty_rest$14),
         fmtty$18 = match$34[2],
         fmt$19 = match$34[1];
        return [0, [20, width_opt, char_set, fmt$19], fmtty$18];
       }
       break;
      case 21:
       if(typeof fmtty0 !== "number" && 2 === fmtty0[0]){
        var
         fmtty_rest$15 = fmtty0[1],
         fmt_rest$20 = fmt[2],
         counter = fmt[1],
         match$35 = type_format_gen(fmt_rest$20, fmtty_rest$15),
         fmtty$19 = match$35[2],
         fmt$20 = match$35[1];
        return [0, [21, counter, fmt$20], fmtty$19];
       }
       break;
      case 23:
       var rest = fmt[2], ign = fmt[1];
       if(typeof ign !== "number")
        switch(ign[0]){
          case 8:
           var sub_fmtty$2 = ign[2], pad_opt$1 = ign[1];
           return type_ignored_param_one
                   ([8, pad_opt$1, sub_fmtty$2], rest, fmtty0);
          case 9:
           var
            sub_fmtty$3 = ign[2],
            pad_opt$2 = ign[1],
            a = type_ignored_format_substituti(sub_fmtty$3, rest, fmtty0),
            match$43 = a[2],
            fmtty$21 = match$43[2],
            fmt$22 = match$43[1],
            sub_fmtty$4 = a[1];
           return [0, [23, [9, pad_opt$2, sub_fmtty$4], fmt$22], fmtty$21];
          default: return type_ignored_param_one(ign, rest, fmtty0);
        }
       if(2 !== ign) return type_ignored_param_one(ign, rest, fmtty0);
       if(typeof fmtty0 !== "number" && 14 === fmtty0[0]){
        var
         fmtty_rest$16 = fmtty0[1],
         match$42 = type_format_gen(rest, fmtty_rest$16),
         fmtty$20 = match$42[2],
         fmt$21 = match$42[1];
        return [0, [23, 2, fmt$21], fmtty$20];
       }
       throw caml_maybe_attach_backtrace(Type_mismatch, 1);
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function type_ignored_param_one(ign, fmt, fmtty){
    var
     match = type_format_gen(fmt, fmtty),
     fmtty$0 = match[2],
     fmt$0 = match[1];
    return [0, [23, ign, fmt$0], fmtty$0];
   }
   function type_ignored_format_substituti(sub_fmtty, fmt, fmtty){
    if(typeof sub_fmtty === "number")
     return [0, 0, type_format_gen(fmt, fmtty)];
    switch(sub_fmtty[0]){
      case 0:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
        var
         fmtty_rest = fmtty[1],
         sub_fmtty_rest = sub_fmtty[1],
         match =
           type_ignored_format_substituti(sub_fmtty_rest, fmt, fmtty_rest),
         fmt$0 = match[2],
         sub_fmtty_rest$0 = match[1];
        return [0, [0, sub_fmtty_rest$0], fmt$0];
       }
       break;
      case 1:
       if(typeof fmtty !== "number" && 1 === fmtty[0]){
        var
         fmtty_rest$0 = fmtty[1],
         sub_fmtty_rest$1 = sub_fmtty[1],
         match$0 =
           type_ignored_format_substituti(sub_fmtty_rest$1, fmt, fmtty_rest$0),
         fmt$1 = match$0[2],
         sub_fmtty_rest$2 = match$0[1];
        return [0, [1, sub_fmtty_rest$2], fmt$1];
       }
       break;
      case 2:
       if(typeof fmtty !== "number" && 2 === fmtty[0]){
        var
         fmtty_rest$1 = fmtty[1],
         sub_fmtty_rest$3 = sub_fmtty[1],
         match$1 =
           type_ignored_format_substituti(sub_fmtty_rest$3, fmt, fmtty_rest$1),
         fmt$2 = match$1[2],
         sub_fmtty_rest$4 = match$1[1];
        return [0, [2, sub_fmtty_rest$4], fmt$2];
       }
       break;
      case 3:
       if(typeof fmtty !== "number" && 3 === fmtty[0]){
        var
         fmtty_rest$2 = fmtty[1],
         sub_fmtty_rest$5 = sub_fmtty[1],
         match$2 =
           type_ignored_format_substituti(sub_fmtty_rest$5, fmt, fmtty_rest$2),
         fmt$3 = match$2[2],
         sub_fmtty_rest$6 = match$2[1];
        return [0, [3, sub_fmtty_rest$6], fmt$3];
       }
       break;
      case 4:
       if(typeof fmtty !== "number" && 4 === fmtty[0]){
        var
         fmtty_rest$3 = fmtty[1],
         sub_fmtty_rest$7 = sub_fmtty[1],
         match$3 =
           type_ignored_format_substituti(sub_fmtty_rest$7, fmt, fmtty_rest$3),
         fmt$4 = match$3[2],
         sub_fmtty_rest$8 = match$3[1];
        return [0, [4, sub_fmtty_rest$8], fmt$4];
       }
       break;
      case 5:
       if(typeof fmtty !== "number" && 5 === fmtty[0]){
        var
         fmtty_rest$4 = fmtty[1],
         sub_fmtty_rest$9 = sub_fmtty[1],
         match$4 =
           type_ignored_format_substituti(sub_fmtty_rest$9, fmt, fmtty_rest$4),
         fmt$5 = match$4[2],
         sub_fmtty_rest$10 = match$4[1];
        return [0, [5, sub_fmtty_rest$10], fmt$5];
       }
       break;
      case 6:
       if(typeof fmtty !== "number" && 6 === fmtty[0]){
        var
         fmtty_rest$5 = fmtty[1],
         sub_fmtty_rest$11 = sub_fmtty[1],
         match$5 =
           type_ignored_format_substituti
            (sub_fmtty_rest$11, fmt, fmtty_rest$5),
         fmt$6 = match$5[2],
         sub_fmtty_rest$12 = match$5[1];
        return [0, [6, sub_fmtty_rest$12], fmt$6];
       }
       break;
      case 7:
       if(typeof fmtty !== "number" && 7 === fmtty[0]){
        var
         fmtty_rest$6 = fmtty[1],
         sub_fmtty_rest$13 = sub_fmtty[1],
         match$6 =
           type_ignored_format_substituti
            (sub_fmtty_rest$13, fmt, fmtty_rest$6),
         fmt$7 = match$6[2],
         sub_fmtty_rest$14 = match$6[1];
        return [0, [7, sub_fmtty_rest$14], fmt$7];
       }
       break;
      case 8:
       if(typeof fmtty !== "number" && 8 === fmtty[0]){
        var
         fmtty_rest$7 = fmtty[2],
         sub2_fmtty = fmtty[1],
         sub_fmtty_rest$15 = sub_fmtty[2],
         sub2_fmtty$0 = sub_fmtty[1];
        if(caml_notequal([0, sub2_fmtty$0], [0, sub2_fmtty]))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         match$7 =
           type_ignored_format_substituti
            (sub_fmtty_rest$15, fmt, fmtty_rest$7),
         fmt$8 = match$7[2],
         sub_fmtty_rest$16 = match$7[1];
        return [0, [8, sub2_fmtty, sub_fmtty_rest$16], fmt$8];
       }
       break;
      case 9:
       if(typeof fmtty !== "number" && 9 === fmtty[0]){
        var
         fmtty_rest$8 = fmtty[3],
         sub2_fmtty$1 = fmtty[2],
         sub1_fmtty = fmtty[1],
         sub_fmtty_rest$17 = sub_fmtty[3],
         sub2_fmtty$2 = sub_fmtty[2],
         sub1_fmtty$0 = sub_fmtty[1],
         a = [0, CamlinternalFormatBasics[2].call(null, sub1_fmtty)];
        if
         (caml_notequal
           ([0, CamlinternalFormatBasics[2].call(null, sub1_fmtty$0)], a))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var b = [0, CamlinternalFormatBasics[2].call(null, sub2_fmtty$1)];
        if
         (caml_notequal
           ([0, CamlinternalFormatBasics[2].call(null, sub2_fmtty$2)], b))
         throw caml_maybe_attach_backtrace(Type_mismatch, 1);
        var
         sub_fmtty$0 = trans(symm(sub1_fmtty), sub2_fmtty$1),
         match$8 = fmtty_rel_det(sub_fmtty$0),
         f4 = match$8[4],
         f2 = match$8[2];
        f2(0);
        f4(0);
        var
         match$9 =
           type_ignored_format_substituti
            (CamlinternalFormatBasics[2].call(null, sub_fmtty_rest$17),
             fmt,
             fmtty_rest$8),
         fmt$9 = match$9[2],
         sub_fmtty_rest$18 = match$9[1];
        return [0,
                [9, sub1_fmtty, sub2_fmtty$1, symm(sub_fmtty_rest$18)],
                fmt$9];
       }
       break;
      case 10:
       if(typeof fmtty !== "number" && 10 === fmtty[0]){
        var
         fmtty_rest$9 = fmtty[1],
         sub_fmtty_rest$19 = sub_fmtty[1],
         match$10 =
           type_ignored_format_substituti
            (sub_fmtty_rest$19, fmt, fmtty_rest$9),
         fmt$10 = match$10[2],
         sub_fmtty_rest$20 = match$10[1];
        return [0, [10, sub_fmtty_rest$20], fmt$10];
       }
       break;
      case 11:
       if(typeof fmtty !== "number" && 11 === fmtty[0]){
        var
         fmtty_rest$10 = fmtty[1],
         sub_fmtty_rest$21 = sub_fmtty[1],
         match$11 =
           type_ignored_format_substituti
            (sub_fmtty_rest$21, fmt, fmtty_rest$10),
         fmt$11 = match$11[2],
         sub_fmtty_rest$22 = match$11[1];
        return [0, [11, sub_fmtty_rest$22], fmt$11];
       }
       break;
      case 13:
       if(typeof fmtty !== "number" && 13 === fmtty[0]){
        var
         fmtty_rest$11 = fmtty[1],
         sub_fmtty_rest$23 = sub_fmtty[1],
         match$12 =
           type_ignored_format_substituti
            (sub_fmtty_rest$23, fmt, fmtty_rest$11),
         fmt$12 = match$12[2],
         sub_fmtty_rest$24 = match$12[1];
        return [0, [13, sub_fmtty_rest$24], fmt$12];
       }
       break;
      case 14:
       if(typeof fmtty !== "number" && 14 === fmtty[0]){
        var
         fmtty_rest$12 = fmtty[1],
         sub_fmtty_rest$25 = sub_fmtty[1],
         match$13 =
           type_ignored_format_substituti
            (sub_fmtty_rest$25, fmt, fmtty_rest$12),
         fmt$13 = match$13[2],
         sub_fmtty_rest$26 = match$13[1];
        return [0, [14, sub_fmtty_rest$26], fmt$13];
       }
       break;
    }
    throw caml_maybe_attach_backtrace(Type_mismatch, 1);
   }
   function recast(fmt, fmtty){
    var a = symm(fmtty);
    return type_format(fmt, CamlinternalFormatBasics[2].call(null, a));
   }
   function fix_padding(padty, width, str){
    var
     len = caml_ml_string_length(str),
     padty$0 = 0 <= width ? padty : 0,
     width$0 = Stdlib[18].call(null, width);
    if(width$0 <= len) return str;
    var
     a = 2 === padty$0 ? 48 : 32,
     res = Stdlib_Bytes[1].call(null, width$0, a);
    switch(padty$0){
      case 0:
       Stdlib_String[6].call(null, str, 0, res, 0, len); break;
      case 1:
       Stdlib_String[6].call(null, str, 0, res, width$0 - len | 0, len);
       break;
      default:
       a:
       if(0 < len){
        if
         (43 !== caml_string_get(str, 0)
          && 45 !== caml_string_get(str, 0) && 32 !== caml_string_get(str, 0))
         break a;
        caml_bytes_set(res, 0, caml_string_get(str, 0));
        Stdlib_String[6].call
         (null, str, 1, res, (width$0 - len | 0) + 1 | 0, len - 1 | 0);
        break;
       }
       a:
       if(1 < len && 48 === caml_string_get(str, 0)){
        if(120 !== caml_string_get(str, 1) && 88 !== caml_string_get(str, 1))
         break a;
        caml_bytes_set(res, 1, caml_string_get(str, 1));
        Stdlib_String[6].call
         (null, str, 2, res, (width$0 - len | 0) + 2 | 0, len - 2 | 0);
        break;
       }
       Stdlib_String[6].call(null, str, 0, res, width$0 - len | 0, len);
    }
    return Stdlib_Bytes[44].call(null, res);
   }
   function fix_int_precision(prec, str){
    var
     prec$0 = Stdlib[18].call(null, prec),
     len = caml_ml_string_length(str),
     c = caml_string_get(str, 0);
    a:
    {
     b:
     {
      if(58 > c){
       if(32 !== c){
        if(43 > c) break a;
        switch(c - 43 | 0){
          case 5:
           if(len >= (prec$0 + 2 | 0)) break b;
           if(1 >= len) break b;
           if
            (120 !== caml_string_get(str, 1) && 88 !== caml_string_get(str, 1))
            break b;
           var res$1 = Stdlib_Bytes[1].call(null, prec$0 + 2 | 0, 48);
           caml_bytes_set(res$1, 1, caml_string_get(str, 1));
           Stdlib_String[6].call
            (null, str, 2, res$1, (prec$0 - len | 0) + 4 | 0, len - 2 | 0);
           return Stdlib_Bytes[44].call(null, res$1);
          case 0:
          case 2: break;
          case 1:
          case 3:
          case 4:
           break a;
          default: break b;
        }
       }
       if(len >= (prec$0 + 1 | 0)) break a;
       var res$0 = Stdlib_Bytes[1].call(null, prec$0 + 1 | 0, 48);
       caml_bytes_set(res$0, 0, c);
       Stdlib_String[6].call
        (null, str, 1, res$0, (prec$0 - len | 0) + 2 | 0, len - 1 | 0);
       return Stdlib_Bytes[44].call(null, res$0);
      }
      if(71 <= c){if(5 < c - 97 >>> 0) break a;} else if(65 > c) break a;
     }
     if(len < prec$0){
      var res = Stdlib_Bytes[1].call(null, prec$0, 48);
      Stdlib_String[6].call(null, str, 0, res, prec$0 - len | 0, len);
      return Stdlib_Bytes[44].call(null, res);
     }
    }
    return str;
   }
   function string_to_caml_string(str){
    var
     str$0 = Stdlib_String[25].call(null, str),
     l = caml_ml_string_length(str$0),
     res = Stdlib_Bytes[1].call(null, l + 2 | 0, 34);
    caml_blit_string(str$0, 0, res, 1, l);
    return Stdlib_Bytes[44].call(null, res);
   }
   function format_of_fconv(fconv, prec){
    var
     prec$0 = Stdlib[18].call(null, prec),
     symb = char_of_fconv(r, fconv),
     buf = buffer_create(16);
    buffer_add_char(buf, 37);
    bprint_fconv_flag(buf, fconv);
    buffer_add_char(buf, 46);
    buffer_add_string(buf, Stdlib_Int[12].call(null, prec$0));
    buffer_add_char(buf, symb);
    return buffer_contents(buf);
   }
   function transform_int_alt(iconv, s){
    if(13 > iconv) return s;
    var n = [0, 0], a = caml_ml_string_length(s) - 1 | 0, d = 0;
    if(a >= 0){
     var i$0 = d;
     for(;;){
      if(9 >= caml_string_unsafe_get(s, i$0) - 48 >>> 0) n[1]++;
      var g = i$0 + 1 | 0;
      if(a === i$0) break;
      i$0 = g;
     }
    }
    var
     digits = n[1],
     buf =
       caml_create_bytes
        (caml_ml_string_length(s) + ((digits - 1 | 0) / 3 | 0) | 0),
     pos = [0, 0];
    function put(c){caml_bytes_set(buf, pos[1], c); pos[1]++;}
    var
     left = [0, ((digits - 1 | 0) % 3 | 0) + 1 | 0],
     b = caml_ml_string_length(s) - 1 | 0,
     e = 0;
    if(b >= 0){
     var i = e;
     for(;;){
      var c = caml_string_unsafe_get(s, i);
      if(9 < c - 48 >>> 0)
       put(c);
      else{if(0 === left[1]){put(95); left[1] = 3;} left[1]--; put(c);}
      var f = i + 1 | 0;
      if(b === i) break;
      i = f;
     }
    }
    return Stdlib_Bytes[44].call(null, buf);
   }
   function convert_int(iconv, n){
    switch(iconv){
      case 1:
       var a = cst_d$0; break;
      case 2:
       var a = cst_d$1; break;
      case 4:
       var a = cst_i$1; break;
      case 5:
       var a = cst_i$2; break;
      case 6:
       var a = cst_x; break;
      case 7:
       var a = cst_x$0; break;
      case 8:
       var a = cst_X; break;
      case 9:
       var a = cst_X$0; break;
      case 10:
       var a = cst_o; break;
      case 11:
       var a = cst_o$0; break;
      case 0:
      case 13:
       var a = cst_d; break;
      case 3:
      case 14:
       var a = cst_i$0; break;
      default: var a = cst_u;
    }
    return transform_int_alt(iconv, caml_format_int(a, n));
   }
   function convert_int32(iconv, n){
    switch(iconv){
      case 1:
       var a = cst_ld$0; break;
      case 2:
       var a = cst_ld$1; break;
      case 4:
       var a = cst_li$1; break;
      case 5:
       var a = cst_li$2; break;
      case 6:
       var a = cst_lx; break;
      case 7:
       var a = cst_lx$0; break;
      case 8:
       var a = cst_lX; break;
      case 9:
       var a = cst_lX$0; break;
      case 10:
       var a = cst_lo; break;
      case 11:
       var a = cst_lo$0; break;
      case 0:
      case 13:
       var a = cst_ld; break;
      case 3:
      case 14:
       var a = cst_li$0; break;
      default: var a = cst_lu;
    }
    return transform_int_alt(iconv, caml_format_int(a, n));
   }
   function convert_nativeint(iconv, n){
    switch(iconv){
      case 1:
       var a = cst_nd$0; break;
      case 2:
       var a = cst_nd$1; break;
      case 4:
       var a = cst_ni$1; break;
      case 5:
       var a = cst_ni$2; break;
      case 6:
       var a = cst_nx; break;
      case 7:
       var a = cst_nx$0; break;
      case 8:
       var a = cst_nX; break;
      case 9:
       var a = cst_nX$0; break;
      case 10:
       var a = cst_no; break;
      case 11:
       var a = cst_no$0; break;
      case 0:
      case 13:
       var a = cst_nd; break;
      case 3:
      case 14:
       var a = cst_ni$0; break;
      default: var a = cst_nu;
    }
    return transform_int_alt(iconv, caml_format_int(a, n));
   }
   function convert_int64(iconv, n){
    switch(iconv){
      case 1:
       var a = cst_Ld$0; break;
      case 2:
       var a = cst_Ld$1; break;
      case 4:
       var a = cst_Li$1; break;
      case 5:
       var a = cst_Li$2; break;
      case 6:
       var a = cst_Lx; break;
      case 7:
       var a = cst_Lx$0; break;
      case 8:
       var a = cst_LX; break;
      case 9:
       var a = cst_LX$0; break;
      case 10:
       var a = cst_Lo; break;
      case 11:
       var a = cst_Lo$0; break;
      case 0:
      case 13:
       var a = cst_Ld; break;
      case 3:
      case 14:
       var a = cst_Li$0; break;
      default: var a = cst_Lu;
    }
    return transform_int_alt(iconv, runtime.caml_int64_format(a, n));
   }
   function convert_float(fconv, prec, x){
    function hex(param){
     switch(fconv[1]){
       case 0:
        var sign = 45; break;
       case 1:
        var sign = 43; break;
       default: var sign = 32;
     }
     return runtime.caml_hexstring_of_float(x, prec, sign);
    }
    function caml_special_val(str){
     var match = runtime.caml_classify_float(x);
     return 3 === match
             ? x < 0. ? cst_neg_infinity : cst_infinity
             : 4 <= match ? cst_nan : str;
    }
    switch(fconv[2]){
      case 5:
       var
        str = caml_format_float(format_of_fconv(fconv, prec), x),
        len = caml_ml_string_length(str),
        i = 0;
       for(;;){
        a:
        {
         if(i !== len){
          var a = caml_string_get(str, i) - 46 | 0;
          b:
          {
           if(23 < a >>> 0){
            if(55 !== a) break b;
           }
           else if(21 >= a - 1 >>> 0) break b;
           var b = 1;
           break a;
          }
          var i$0 = i + 1 | 0;
          i = i$0;
          continue;
         }
         var b = 0;
        }
        var c = b ? str : Stdlib[28].call(null, str, cst$17);
        return caml_special_val(c);
       }
      case 6:
       return hex(0);
      case 7:
       var d = hex(0); return Stdlib_String[26].call(null, d);
      case 8:
       return caml_special_val(hex(0));
      default: return caml_format_float(format_of_fconv(fconv, prec), x);
    }
   }
   function string_of_fmtty(fmtty){
    var buf = buffer_create(16);
    bprint_fmtty(buf, fmtty);
    return buffer_contents(buf);
   }
   function make_printf$0(counter, k$2, acc$4, fmt$2){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             j:
             {
              var k = k$2, acc = acc$4, fmt = fmt$2;
              k:
              for(;;){
               if(typeof fmt === "number") return caml_call1(k, acc);
               switch(fmt[0]){
                 case 0:
                  break a;
                 case 1:
                  break b;
                 case 2:
                  break c;
                 case 3:
                  var rest$2 = fmt[2], pad$0 = fmt[1];
                  return make_padding
                          (k, acc, rest$2, pad$0, string_to_caml_string);
                 case 4:
                  var
                   rest$3 = fmt[4],
                   prec = fmt[3],
                   pad$1 = fmt[2],
                   iconv = fmt[1];
                  return make_int_padding_precision
                          (k, acc, rest$3, pad$1, prec, convert_int, iconv);
                 case 5:
                  var
                   rest$4 = fmt[4],
                   prec$0 = fmt[3],
                   pad$2 = fmt[2],
                   iconv$0 = fmt[1];
                  return make_int_padding_precision
                          (k, acc, rest$4, pad$2, prec$0, convert_int32, iconv$0);
                 case 6:
                  var
                   rest$5 = fmt[4],
                   prec$1 = fmt[3],
                   pad$3 = fmt[2],
                   iconv$1 = fmt[1];
                  return make_int_padding_precision
                          (k, acc, rest$5, pad$3, prec$1, convert_nativeint, iconv$1);
                 case 7:
                  var
                   rest$6 = fmt[4],
                   prec$2 = fmt[3],
                   pad$4 = fmt[2],
                   iconv$2 = fmt[1];
                  return make_int_padding_precision
                          (k, acc, rest$6, pad$4, prec$2, convert_int64, iconv$2);
                 case 8:
                  break d;
                 case 9:
                  var rest$8 = fmt[2], pad$6 = fmt[1];
                  return make_padding(k, acc, rest$8, pad$6, Stdlib[30]);
                 case 10:
                  var rest$9 = fmt[1], acc$0 = [7, acc];
                  acc = acc$0;
                  fmt = rest$9;
                  break;
                 case 11:
                  var rest$10 = fmt[2], str = fmt[1], acc$1 = [2, acc, str];
                  acc = acc$1;
                  fmt = rest$10;
                  break;
                 case 12:
                  var rest$11 = fmt[2], chr = fmt[1], acc$2 = [3, acc, chr];
                  acc = acc$2;
                  fmt = rest$11;
                  break;
                 case 13:
                  break e;
                 case 14:
                  break f;
                 case 15:
                  break g;
                 case 16:
                  break h;
                 case 17:
                  var
                   rest$16 = fmt[2],
                   fmting_lit = fmt[1],
                   acc$3 = [0, acc, fmting_lit];
                  acc = acc$3;
                  fmt = rest$16;
                  break;
                 case 18:
                  var a = fmt[1];
                  if(0 === a[0]){
                   var rest$17 = fmt[2], fmt$0 = a[1][1];
                   let acc$0 = acc, k$1 = k, rest = rest$17;
                   var
                    k$0 =
                      function(kacc){
                       return make_printf(k$1, [1, acc$0, [0, kacc]], rest);
                      };
                   k = k$0;
                   acc = 0;
                   fmt = fmt$0;
                  }
                  else{
                   var rest$18 = fmt[2], fmt$1 = a[1][1];
                   let acc$0 = acc, k$0 = k, rest = rest$18;
                   var
                    k$1 =
                      function(kacc){
                       return make_printf(k$0, [1, acc$0, [1, kacc]], rest);
                      };
                   k = k$1;
                   acc = 0;
                   fmt = fmt$1;
                  }
                  break;
                 case 19:
                  throw caml_maybe_attach_backtrace([0, Assert_failure, s], 1);
                 case 20:
                  break i;
                 case 21:
                  break j;
                 case 22:
                  break k;
                 case 23:
                  var rest$22 = fmt[2], ign = fmt[1];
                  if(counter >= 50)
                   return caml_trampoline_return
                           (make_ignored_param$0, [0, k, acc, ign, rest$22]);
                  var counter$1 = counter + 1 | 0;
                  return make_ignored_param$0(counter$1, k, acc, ign, rest$22);
                 default:
                  var
                   rest$23 = fmt[3],
                   f = fmt[2],
                   arity = fmt[1],
                   b = caml_call1(f, 0);
                  if(counter >= 50)
                   return caml_trampoline_return
                           (make_custom$0, [0, k, acc, rest$23, arity, b]);
                  var counter$0 = counter + 1 | 0;
                  return make_custom$0(counter$0, k, acc, rest$23, arity, b);
               }
              }
              var rest$21 = fmt[1];
              return function(c){
               var new_acc = [5, acc, c];
               return make_printf(k, new_acc, rest$21);};
             }
             var rest$20 = fmt[2];
             return function(n){
              var new_acc = [4, acc, caml_format_int(cst_u$0, n)];
              return make_printf(k, new_acc, rest$20);};
            }
            var
             rest$19 = fmt[3],
             new_acc = [8, acc, cst_Printf_bad_conversion];
            return function(param){return make_printf(k, new_acc, rest$19);};
           }
           var rest$15 = fmt[1];
           return function(f){return make_printf(k, [6, acc, f], rest$15);};
          }
          var rest$14 = fmt[1];
          return function(f, x){
           return make_printf
                   (k,
                    [6, acc, function(o){return caml_call2(f, o, x);}],
                    rest$14);};
         }
         var rest$13 = fmt[3], fmtty = fmt[2];
         return function(param){
          var fmt = param[1], a = recast(fmt, fmtty);
          return make_printf
                  (k, acc, CamlinternalFormatBasics[3].call(null, a, rest$13));};
        }
        var
         rest$12 = fmt[3],
         sub_fmtty = fmt[2],
         ty = string_of_fmtty(sub_fmtty);
        return function(str){return make_printf(k, [4, acc, ty], rest$12);};
       }
       var rest$7 = fmt[4], prec$3 = fmt[3], pad$5 = fmt[2], fconv = fmt[1];
       if(typeof pad$5 === "number"){
        if(typeof prec$3 === "number")
         return prec$3
                 ? function
                  (p, x){
                   var str = convert_float(fconv, p, x);
                   return make_printf(k, [4, acc, str], rest$7);
                  }
                 : function
                  (x){
                   var
                    str =
                      convert_float(fconv, default_float_precision(fconv), x);
                   return make_printf(k, [4, acc, str], rest$7);
                  };
        var p = prec$3[1];
        return function(x){
         var str = convert_float(fconv, p, x);
         return make_printf(k, [4, acc, str], rest$7);};
       }
       if(0 === pad$5[0]){
        var w = pad$5[2], padty = pad$5[1];
        if(typeof prec$3 === "number")
         return prec$3
                 ? function
                  (p, x){
                   var str = fix_padding(padty, w, convert_float(fconv, p, x));
                   return make_printf(k, [4, acc, str], rest$7);
                  }
                 : function
                  (x){
                   var
                    str =
                      convert_float(fconv, default_float_precision(fconv), x),
                    str$0 = fix_padding(padty, w, str);
                   return make_printf(k, [4, acc, str$0], rest$7);
                  };
        var p$0 = prec$3[1];
        return function(x){
         var str = fix_padding(padty, w, convert_float(fconv, p$0, x));
         return make_printf(k, [4, acc, str], rest$7);};
       }
       var padty$0 = pad$5[1];
       if(typeof prec$3 === "number")
        return prec$3
                ? function
                 (w, p, x){
                  var
                   str = fix_padding(padty$0, w, convert_float(fconv, p, x));
                  return make_printf(k, [4, acc, str], rest$7);
                 }
                : function
                 (w, x){
                  var
                   str =
                     convert_float(fconv, default_float_precision(fconv), x),
                   str$0 = fix_padding(padty$0, w, str);
                  return make_printf(k, [4, acc, str$0], rest$7);
                 };
       var p$1 = prec$3[1];
       return function(w, x){
        var str = fix_padding(padty$0, w, convert_float(fconv, p$1, x));
        return make_printf(k, [4, acc, str], rest$7);};
      }
      var rest$1 = fmt[2], pad = fmt[1];
      return make_padding(k, acc, rest$1, pad, function(str){return str;});
     }
     var rest$0 = fmt[1];
     return function(c){
      var
       str = Stdlib_Char[2].call(null, c),
       l = caml_ml_string_length(str),
       res = Stdlib_Bytes[1].call(null, l + 2 | 0, 39);
      caml_blit_string(str, 0, res, 1, l);
      var new_acc = [4, acc, Stdlib_Bytes[44].call(null, res)];
      return make_printf(k, new_acc, rest$0);};
    }
    var rest = fmt[1];
    return function(c){
     var new_acc = [5, acc, c];
     return make_printf(k, new_acc, rest);};
   }
   function make_printf(k, acc, fmt){
    return caml_trampoline(make_printf$0(0, k, acc, fmt));
   }
   function make_ignored_param$0(counter, k, acc, ign, fmt){
    if(typeof ign === "number"){
     if(2 === ign)
      throw caml_maybe_attach_backtrace([0, Assert_failure, t], 1);
     if(counter >= 50)
      return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
     var counter$0 = counter + 1 | 0;
     return make_invalid_arg(counter$0, k, acc, fmt);
    }
    if(9 === ign[0]){
     var fmtty = ign[2];
     if(counter >= 50)
      return caml_trampoline_return
              (make_from_fmtty$0, [0, k, acc, fmtty, fmt]);
     var counter$2 = counter + 1 | 0;
     return make_from_fmtty$0(counter$2, k, acc, fmtty, fmt);
    }
    if(counter >= 50)
     return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
    var counter$1 = counter + 1 | 0;
    return make_invalid_arg(counter$1, k, acc, fmt);
   }
   function make_ignored_param(k, acc, ign, fmt){
    return caml_trampoline(make_ignored_param$0(0, k, acc, ign, fmt));
   }
   function make_from_fmtty$0(counter, k, acc, fmtty, fmt){
    if(typeof fmtty !== "number")
     switch(fmtty[0]){
       case 0:
        var rest = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest, fmt);};
       case 1:
        var rest$0 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$0, fmt);};
       case 2:
        var rest$1 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$1, fmt);};
       case 3:
        var rest$2 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$2, fmt);};
       case 4:
        var rest$3 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$3, fmt);};
       case 5:
        var rest$4 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$4, fmt);};
       case 6:
        var rest$5 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$5, fmt);};
       case 7:
        var rest$6 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$6, fmt);};
       case 8:
        var rest$7 = fmtty[2];
        return function(param){return make_from_fmtty(k, acc, rest$7, fmt);};
       case 9:
        var
         rest$8 = fmtty[3],
         ty2 = fmtty[2],
         ty1 = fmtty[1],
         ty = trans(symm(ty1), ty2);
        return function(param){
         return make_from_fmtty
                 (k,
                  acc,
                  CamlinternalFormatBasics[1].call(null, ty, rest$8),
                  fmt);};
       case 10:
        var rest$9 = fmtty[1];
        return function(a, param){
         return make_from_fmtty(k, acc, rest$9, fmt);};
       case 11:
        var rest$10 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$10, fmt);};
       case 12:
        var rest$11 = fmtty[1];
        return function(param){return make_from_fmtty(k, acc, rest$11, fmt);};
       case 13:
        throw caml_maybe_attach_backtrace([0, Assert_failure, u], 1);
       default: throw caml_maybe_attach_backtrace([0, Assert_failure, v], 1);
     }
    if(counter >= 50)
     return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_invalid_arg(counter$0, k, acc, fmt);
   }
   function make_from_fmtty(k, acc, fmtty, fmt){
    return caml_trampoline(make_from_fmtty$0(0, k, acc, fmtty, fmt));
   }
   function make_invalid_arg(counter, k, acc, fmt){
    var a = [8, acc, cst_Printf_bad_conversion$0];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, a, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, a, fmt);
   }
   function make_padding(k, acc, fmt, pad, trans){
    if(typeof pad === "number")
     return function(x){
      var new_acc = [4, acc, caml_call1(trans, x)];
      return make_printf(k, new_acc, fmt);};
    if(0 === pad[0]){
     var width = pad[2], padty = pad[1];
     return function(x){
      var new_acc = [4, acc, fix_padding(padty, width, caml_call1(trans, x))];
      return make_printf(k, new_acc, fmt);};
    }
    var padty$0 = pad[1];
    return function(w, x){
     var new_acc = [4, acc, fix_padding(padty$0, w, caml_call1(trans, x))];
     return make_printf(k, new_acc, fmt);};
   }
   function make_int_padding_precision(k, acc, fmt, pad, prec, trans, iconv){
    if(typeof pad === "number"){
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var str = fix_int_precision(p, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = caml_call2(trans, iconv, x);
                return make_printf(k, [4, acc, str], fmt);
               };
     var p = prec[1];
     return function(x){
      var str = fix_int_precision(p, caml_call2(trans, iconv, x));
      return make_printf(k, [4, acc, str], fmt);};
    }
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var
                 str =
                   fix_padding
                    (padty,
                     w,
                     fix_int_precision(p, caml_call2(trans, iconv, x)));
                return make_printf(k, [4, acc, str], fmt);
               }
              : function
               (x){
                var str = fix_padding(padty, w, caml_call2(trans, iconv, x));
                return make_printf(k, [4, acc, str], fmt);
               };
     var p$0 = prec[1];
     return function(x){
      var
       str =
         fix_padding
          (padty, w, fix_int_precision(p$0, caml_call2(trans, iconv, x)));
      return make_printf(k, [4, acc, str], fmt);};
    }
    var padty$0 = pad[1];
    if(typeof prec === "number")
     return prec
             ? function
              (w, p, x){
               var
                str =
                  fix_padding
                   (padty$0,
                    w,
                    fix_int_precision(p, caml_call2(trans, iconv, x)));
               return make_printf(k, [4, acc, str], fmt);
              }
             : function
              (w, x){
               var str = fix_padding(padty$0, w, caml_call2(trans, iconv, x));
               return make_printf(k, [4, acc, str], fmt);
              };
    var p$1 = prec[1];
    return function(w, x){
     var
      str =
        fix_padding
         (padty$0, w, fix_int_precision(p$1, caml_call2(trans, iconv, x)));
     return make_printf(k, [4, acc, str], fmt);};
   }
   function make_custom$0(counter, k, acc, rest, arity, f){
    if(arity){
     var arity$0 = arity[1];
     return function(x){
      return make_custom(k, acc, rest, arity$0, caml_call1(f, x));};
    }
    var a = [4, acc, f];
    if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, a, rest]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, a, rest);
   }
   function make_custom(k, acc, rest, arity, f){
    return caml_trampoline(make_custom$0(0, k, acc, rest, arity, f));
   }
   function make_iprintf$0(counter, k$2, o, fmt$2){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           h:
           {
            i:
            {
             var k = k$2, fmt = fmt$2;
             j:
             for(;;){
              if(typeof fmt === "number") return caml_call1(k, o);
              switch(fmt[0]){
                case 2:
                 break b;
                case 3:
                 break c;
                case 9:
                 break e;
                case 10:
                 var rest$10 = fmt[1]; fmt = rest$10; break;
                case 14:
                 break g;
                case 15:
                 break h;
                case 18:
                 var a = fmt[1];
                 if(0 === a[0]){
                  var rest$15 = fmt[2], fmt$0 = a[1][1];
                  let k$1 = k, rest = rest$15;
                  var
                   k$0 = function(koc){return make_iprintf(k$1, koc, rest);};
                  k = k$0;
                  fmt = fmt$0;
                 }
                 else{
                  var rest$16 = fmt[2], fmt$1 = a[1][1];
                  let k$0 = k, rest = rest$16;
                  var
                   k$1 = function(koc){return make_iprintf(k$0, koc, rest);};
                  k = k$1;
                  fmt = fmt$1;
                 }
                 break;
                case 19:
                 throw caml_maybe_attach_backtrace([0, Assert_failure, w], 1);
                case 21:
                 break i;
                case 23:
                 break j;
                case 24:
                 var rest$19 = fmt[3], arity = fmt[1];
                 if(counter >= 50)
                  return caml_trampoline_return
                          (fn_of_custom_arity$0, [0, k, o, rest$19, arity]);
                 var counter$0 = counter + 1 | 0;
                 return fn_of_custom_arity$0(counter$0, k, o, rest$19, arity);
                case 13:
                case 20:
                 break f;
                case 11:
                case 12:
                case 17:
                 var rest$11 = fmt[2]; fmt = rest$11; break;
                case 0:
                case 1:
                case 16:
                case 22:
                 break a;
                default: break d;
              }
             }
             var rest$18 = fmt[2], ign = fmt[1];
             return make_ignored_param
                     (function(param){return caml_call1(k, o);}, 0, ign, rest$18);
            }
            var rest$17 = fmt[2], x$15 = make_iprintf(k, o, rest$17);
            return function(param){return x$15;};
           }
           var
            rest$14 = fmt[1],
            x$13 = make_iprintf(k, o, rest$14),
            x$14 = function(param){return x$13;};
           return function(param){return x$14;};
          }
          var rest$13 = fmt[3], fmtty = fmt[2];
          return function(param){
           var fmt = param[1], a = recast(fmt, fmtty);
           return make_iprintf
                   (k, o, CamlinternalFormatBasics[3].call(null, a, rest$13));};
         }
         var rest$12 = fmt[3], x$12 = make_iprintf(k, o, rest$12);
         return function(param){return x$12;};
        }
        var match$1 = fmt[1];
        if(typeof match$1 === "number"){
         var rest$7 = fmt[2], x$8 = make_iprintf(k, o, rest$7);
         return function(param){return x$8;};
        }
        if(0 === match$1[0]){
         var rest$8 = fmt[2], x$9 = make_iprintf(k, o, rest$8);
         return function(param){return x$9;};
        }
        var
         rest$9 = fmt[2],
         x$10 = make_iprintf(k, o, rest$9),
         x$11 = function(param){return x$10;};
        return function(param){return x$11;};
       }
       var rest$6 = fmt[4], prec = fmt[3], pad = fmt[2];
       if(typeof pad === "number"){
        if(typeof prec !== "number"){
         var x$19 = make_iprintf(k, o, rest$6);
         return function(param){return x$19;};
        }
        if(prec){
         var
          x$16 = make_iprintf(k, o, rest$6),
          x$17 = function(param){return x$16;};
         return function(param){return x$17;};
        }
        var x$18 = make_iprintf(k, o, rest$6);
        return function(param){return x$18;};
       }
       if(0 === pad[0]){
        if(typeof prec !== "number"){
         var x$23 = make_iprintf(k, o, rest$6);
         return function(param){return x$23;};
        }
        if(prec){
         var
          x$20 = make_iprintf(k, o, rest$6),
          x$21 = function(param){return x$20;};
         return function(param){return x$21;};
        }
        var x$22 = make_iprintf(k, o, rest$6);
        return function(param){return x$22;};
       }
       if(typeof prec !== "number"){
        var
         x$29 = make_iprintf(k, o, rest$6),
         x$30 = function(param){return x$29;};
        return function(param){return x$30;};
       }
       if(prec){
        var
         x$24 = make_iprintf(k, o, rest$6),
         x$25 = function(param){return x$24;},
         x$26 = function(param){return x$25;};
        return function(param){return x$26;};
       }
       var
        x$27 = make_iprintf(k, o, rest$6),
        x$28 = function(param){return x$27;};
       return function(param){return x$28;};
      }
      var match$0 = fmt[1];
      if(typeof match$0 === "number"){
       var rest$3 = fmt[2], x$4 = make_iprintf(k, o, rest$3);
       return function(param){return x$4;};
      }
      if(0 === match$0[0]){
       var rest$4 = fmt[2], x$5 = make_iprintf(k, o, rest$4);
       return function(param){return x$5;};
      }
      var
       rest$5 = fmt[2],
       x$6 = make_iprintf(k, o, rest$5),
       x$7 = function(param){return x$6;};
      return function(param){return x$7;};
     }
     var match = fmt[1];
     if(typeof match === "number"){
      var rest$0 = fmt[2], x$0 = make_iprintf(k, o, rest$0);
      return function(param){return x$0;};
     }
     if(0 === match[0]){
      var rest$1 = fmt[2], x$1 = make_iprintf(k, o, rest$1);
      return function(param){return x$1;};
     }
     var
      rest$2 = fmt[2],
      x$2 = make_iprintf(k, o, rest$2),
      x$3 = function(param){return x$2;};
     return function(param){return x$3;};
    }
    var rest = fmt[1], x = make_iprintf(k, o, rest);
    return function(param){return x;};
   }
   function make_iprintf(k, o, fmt){
    return caml_trampoline(make_iprintf$0(0, k, o, fmt));
   }
   function fn_of_custom_arity$0(counter, k, o, fmt, param){
    if(param){
     var arity = param[1], x = fn_of_custom_arity(k, o, fmt, arity);
     return function(param){return x;};
    }
    if(counter >= 50)
     return caml_trampoline_return(make_iprintf$0, [0, k, o, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_iprintf$0(counter$0, k, o, fmt);
   }
   function fn_of_custom_arity(k, o, fmt, param){
    return caml_trampoline(fn_of_custom_arity$0(0, k, o, fmt, param));
   }
   function output_acc(o, acc$2){
    var acc = acc$2;
    for(;;){
     if(typeof acc === "number") return 0;
     switch(acc[0]){
       case 0:
        var
         fmting_lit = acc[2],
         p = acc[1],
         s = string_of_formatting_lit(fmting_lit);
        output_acc(o, p);
        return Stdlib[66].call(null, o, s);
       case 1:
        var match = acc[2], p$0 = acc[1];
        if(0 === match[0]){
         var acc$0 = match[1];
         output_acc(o, p$0);
         Stdlib[66].call(null, o, cst$18);
         acc = acc$0;
        }
        else{
         var acc$1 = match[1];
         output_acc(o, p$0);
         Stdlib[66].call(null, o, cst$19);
         acc = acc$1;
        }
        break;
       case 6:
        var f = acc[2], p$3 = acc[1];
        output_acc(o, p$3);
        return caml_call1(f, o);
       case 7:
        var p$4 = acc[1]; output_acc(o, p$4); return Stdlib[63].call(null, o);
       case 8:
        var msg = acc[2], p$5 = acc[1];
        output_acc(o, p$5);
        return Stdlib[1].call(null, msg);
       case 2:
       case 4:
        var s$0 = acc[2], p$1 = acc[1];
        output_acc(o, p$1);
        return Stdlib[66].call(null, o, s$0);
       default:
        var c = acc[2], p$2 = acc[1];
        output_acc(o, p$2);
        return Stdlib[65].call(null, o, c);
     }
    }
   }
   function bufput_acc(b, acc$3){
    var acc = acc$3;
    for(;;){
     if(typeof acc === "number") return 0;
     switch(acc[0]){
       case 0:
        var
         fmting_lit = acc[2],
         p = acc[1],
         s = string_of_formatting_lit(fmting_lit);
        bufput_acc(b, p);
        return Stdlib_Buffer[16].call(null, b, s);
       case 1:
        var match = acc[2], p$0 = acc[1];
        if(0 === match[0]){
         var acc$0 = match[1];
         bufput_acc(b, p$0);
         Stdlib_Buffer[16].call(null, b, cst$20);
         acc = acc$0;
        }
        else{
         var acc$1 = match[1];
         bufput_acc(b, p$0);
         Stdlib_Buffer[16].call(null, b, cst$21);
         acc = acc$1;
        }
        break;
       case 6:
        var f = acc[2], p$3 = acc[1];
        bufput_acc(b, p$3);
        return caml_call1(f, b);
       case 7:
        var acc$2 = acc[1]; acc = acc$2; break;
       case 8:
        var msg = acc[2], p$4 = acc[1];
        bufput_acc(b, p$4);
        return Stdlib[1].call(null, msg);
       case 2:
       case 4:
        var s$0 = acc[2], p$1 = acc[1];
        bufput_acc(b, p$1);
        return Stdlib_Buffer[16].call(null, b, s$0);
       default:
        var c = acc[2], p$2 = acc[1];
        bufput_acc(b, p$2);
        return Stdlib_Buffer[12].call(null, b, c);
     }
    }
   }
   function strput_acc(b, acc$3){
    var acc = acc$3;
    for(;;){
     if(typeof acc === "number") return 0;
     switch(acc[0]){
       case 0:
        var
         fmting_lit = acc[2],
         p = acc[1],
         s = string_of_formatting_lit(fmting_lit);
        strput_acc(b, p);
        return Stdlib_Buffer[16].call(null, b, s);
       case 1:
        var match = acc[2], p$0 = acc[1];
        if(0 === match[0]){
         var acc$0 = match[1];
         strput_acc(b, p$0);
         Stdlib_Buffer[16].call(null, b, cst$22);
         acc = acc$0;
        }
        else{
         var acc$1 = match[1];
         strput_acc(b, p$0);
         Stdlib_Buffer[16].call(null, b, cst$23);
         acc = acc$1;
        }
        break;
       case 6:
        var f = acc[2], p$3 = acc[1];
        strput_acc(b, p$3);
        var a = caml_call1(f, 0);
        return Stdlib_Buffer[16].call(null, b, a);
       case 7:
        var acc$2 = acc[1]; acc = acc$2; break;
       case 8:
        var msg = acc[2], p$4 = acc[1];
        strput_acc(b, p$4);
        return Stdlib[1].call(null, msg);
       case 2:
       case 4:
        var s$0 = acc[2], p$1 = acc[1];
        strput_acc(b, p$1);
        return Stdlib_Buffer[16].call(null, b, s$0);
       default:
        var c = acc[2], p$2 = acc[1];
        strput_acc(b, p$2);
        return Stdlib_Buffer[12].call(null, b, c);
     }
    }
   }
   function failwith_message(param){
    var fmt = param[1], buf = Stdlib_Buffer[1].call(null, 256);
    function k(acc){
     strput_acc(buf, acc);
     var a = Stdlib_Buffer[2].call(null, buf);
     return Stdlib[2].call(null, a);
    }
    return make_printf(k, 0, fmt);
   }
   function open_box_of_string(str){
    if(str === cst$43) return x;
    var len = caml_ml_string_length(str);
    function invalid_box(param){return caml_call1(failwith_message(y), str);}
    function parse_spaces(i$1){
     var i = i$1;
     for(;;){
      if(i === len) return i;
      var match = caml_string_get(str, i);
      if(9 !== match && 32 !== match) return i;
      var i$0 = i + 1 | 0;
      i = i$0;
     }
    }
    var wstart = parse_spaces(0), wend = wstart;
    for(;;){
     if(wend === len) break;
     if(25 < caml_string_get(str, wend) - 97 >>> 0) break;
     var j = wend + 1 | 0;
     wend = j;
    }
    var
     box_name = Stdlib_String[16].call(null, str, wstart, wend - wstart | 0),
     nstart = parse_spaces(wend),
     nend = nstart;
    for(;;){
     if(nend === len) break;
     var match = caml_string_get(str, nend);
     if(48 <= match){if(58 <= match) break;} else if(45 !== match) break;
     var j$0 = nend + 1 | 0;
     nend = j$0;
    }
    if(nstart === nend)
     var indent = 0;
    else
     try{
      var
       a =
         runtime.caml_int_of_string
          (Stdlib_String[16].call(null, str, nstart, nend - nstart | 0)),
       indent = a;
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0), tag = exn[1];
      if(tag !== Stdlib[7]) throw caml_maybe_attach_backtrace(exn, 0);
      var indent = invalid_box(0);
     }
    var exp_end = parse_spaces(nend);
    if(exp_end !== len) invalid_box(0);
    a:
    {
     if(box_name !== cst$43 && box_name !== "b"){
      if(box_name === "h"){var box_type = 0; break a;}
      if(box_name === "hov"){var box_type = 3; break a;}
      if(box_name === "hv"){var box_type = 2; break a;}
      if(box_name !== "v"){var box_type = invalid_box(0); break a;}
      var box_type = 1;
      break a;
     }
     var box_type = 4;
    }
    return [0, indent, box_type];
   }
   function make_padding_fmt_ebb(pad, fmt){
    if(typeof pad === "number") return [0, 0, fmt];
    if(0 === pad[0]){var w = pad[2], s = pad[1]; return [0, [0, s, w], fmt];}
    var s$0 = pad[1];
    return [0, [1, s$0], fmt];
   }
   function make_padprec_fmt_ebb(pad, prec, fmt){
    if(typeof prec === "number")
     var match = prec ? [0, 1] : [0, 0];
    else
     var p = prec[1], match = [0, [0, p]];
    var prec$0 = match[1];
    if(typeof pad === "number") return [0, 0, prec$0, fmt];
    if(0 === pad[0]){
     var w = pad[2], s = pad[1];
     return [0, [0, s, w], prec$0, fmt];
    }
    var s$0 = pad[1];
    return [0, [1, s$0], prec$0, fmt];
   }
   function fmt_ebb_of_string(legacy_behavior, str){
    if(legacy_behavior)
     var flag = legacy_behavior[1], legacy_behavior$0 = flag;
    else
     var legacy_behavior$0 = 1;
    function invalid_format_message(str_ind, msg){
     return caml_call3(failwith_message(z), str, str_ind, msg);
    }
    function invalid_format_without(str_ind, c, s){
     return caml_call4(failwith_message(A), str, str_ind, c, s);
    }
    function expected_character(str_ind, expected, read){
     return caml_call4(failwith_message(B), str, str_ind, expected, read);
    }
    function parse(lit_start, end_ind){
     var str_ind = lit_start;
     for(;;){
      if(str_ind === end_ind) return add_literal(lit_start, str_ind, 0);
      var match = caml_string_get(str, str_ind);
      if(37 === match) break;
      if(64 === match){
       var fmt_rest$0 = parse_after_at(str_ind + 1 | 0, end_ind)[1];
       return add_literal(lit_start, str_ind, fmt_rest$0);
      }
      var str_ind$0 = str_ind + 1 | 0;
      str_ind = str_ind$0;
     }
     var str_ind$1 = str_ind + 1 | 0;
     if(str_ind$1 === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     var
      match$0 =
        95 === caml_string_get(str, str_ind$1)
         ? parse_flags(str_ind, str_ind$1 + 1 | 0, end_ind, 1)
         : parse_flags(str_ind, str_ind$1, end_ind, 0),
      fmt_rest = match$0[1];
     return add_literal(lit_start, str_ind, fmt_rest);
    }
    function parse_flags(pct_ind, str_ind, end_ind, ign){
     var
      zero = [0, 0],
      minus = [0, 0],
      plus = [0, 0],
      space = [0, 0],
      hash = [0, 0];
     function set_flag(str_ind, flag){
      var a = flag[1], b = a ? 1 - legacy_behavior$0 : a;
      if(b){
       var c = caml_string_get(str, str_ind);
       caml_call3(failwith_message(C), str, str_ind, c);
      }
      flag[1] = 1;
     }
     var str_ind$0 = str_ind;
     a:
     for(;;){
      if(str_ind$0 === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      var switcher = caml_string_get(str, str_ind$0) - 32 | 0;
      if(16 < switcher >>> 0) break;
      switch(switcher){
        case 0:
         set_flag(str_ind$0, space);
         var str_ind$1 = str_ind$0 + 1 | 0;
         str_ind$0 = str_ind$1;
         break;
        case 3:
         set_flag(str_ind$0, hash);
         var str_ind$2 = str_ind$0 + 1 | 0;
         str_ind$0 = str_ind$2;
         break;
        case 11:
         set_flag(str_ind$0, plus);
         var str_ind$3 = str_ind$0 + 1 | 0;
         str_ind$0 = str_ind$3;
         break;
        case 13:
         set_flag(str_ind$0, minus);
         var str_ind$4 = str_ind$0 + 1 | 0;
         str_ind$0 = str_ind$4;
         break;
        case 16:
         set_flag(str_ind$0, zero);
         var str_ind$5 = str_ind$0 + 1 | 0;
         str_ind$0 = str_ind$5;
         break;
        default: break a;
      }
     }
     var
      space$0 = space[1],
      hash$0 = hash[1],
      plus$0 = plus[1],
      minus$0 = minus[1],
      zero$0 = zero[1];
     if(str_ind$0 === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     var
      padty =
        zero$0
         ? minus$0
           ? legacy_behavior$0
             ? 0
             : incompatible_flag(pct_ind, str_ind$0, 45, cst_0)
           : 2
         : minus$0 ? 0 : 1,
      match = caml_string_get(str, str_ind$0);
     if(48 <= match){
      if(58 > match){
       var
        match$0 = parse_positive(str_ind$0, end_ind, 0),
        width = match$0[2],
        new_ind = match$0[1];
       return parse_after_padding
               (pct_ind,
                new_ind,
                end_ind,
                minus$0,
                plus$0,
                hash$0,
                space$0,
                ign,
                [0, padty, width]);
      }
     }
     else if(42 === match)
      return parse_after_padding
              (pct_ind,
               str_ind$0 + 1 | 0,
               end_ind,
               minus$0,
               plus$0,
               hash$0,
               space$0,
               ign,
               [1, padty]);
     switch(padty){
       case 0:
        if(1 - legacy_behavior$0)
         invalid_format_without(str_ind$0 - 1 | 0, 45, cst_padding);
        return parse_after_padding
                (pct_ind,
                 str_ind$0,
                 end_ind,
                 minus$0,
                 plus$0,
                 hash$0,
                 space$0,
                 ign,
                 0);
       case 1:
        return parse_after_padding
                (pct_ind,
                 str_ind$0,
                 end_ind,
                 minus$0,
                 plus$0,
                 hash$0,
                 space$0,
                 ign,
                 0);
       default:
        return parse_after_padding
                (pct_ind,
                 str_ind$0,
                 end_ind,
                 minus$0,
                 plus$0,
                 hash$0,
                 space$0,
                 ign,
                 D);
     }
    }
    function parse_after_padding
    (pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, pad){
     if(str_ind === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     var symb = caml_string_get(str, str_ind);
     if(46 !== symb)
      return parse_conversion
              (pct_ind,
               str_ind + 1 | 0,
               end_ind,
               plus,
               hash,
               space,
               ign,
               pad,
               0,
               pad,
               symb);
     var str_ind$0 = str_ind + 1 | 0;
     if(str_ind$0 === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     function parse_literal(minus, str_ind){
      var
       match = parse_positive(str_ind, end_ind, 0),
       prec = match[2],
       new_ind = match[1];
      return parse_after_precision
              (pct_ind,
               new_ind,
               end_ind,
               minus,
               plus,
               hash,
               space,
               ign,
               pad,
               [0, prec]);
     }
     var symb$0 = caml_string_get(str, str_ind$0);
     if(48 <= symb$0){
      if(58 > symb$0) return parse_literal(minus, str_ind$0);
     }
     else if(42 <= symb$0)
      switch(symb$0 - 42 | 0){
        case 0:
         return parse_after_precision
                 (pct_ind,
                  str_ind$0 + 1 | 0,
                  end_ind,
                  minus,
                  plus,
                  hash,
                  space,
                  ign,
                  pad,
                  1);
        case 1:
        case 3:
         if(legacy_behavior$0){
          var
           a = str_ind$0 + 1 | 0,
           minus$0 = minus || (45 === symb$0 ? 1 : 0);
          return parse_literal(minus$0, a);
         }
         break;
      }
     return legacy_behavior$0
             ? parse_after_precision
               (pct_ind,
                str_ind$0,
                end_ind,
                minus,
                plus,
                hash,
                space,
                ign,
                pad,
                E)
             : invalid_format_without(str_ind$0 - 1 | 0, 46, cst_precision);
    }
    function parse_after_precision
    (pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, pad, prec){
     if(str_ind === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     function parse_conv(padprec){
      return parse_conversion
              (pct_ind,
               str_ind + 1 | 0,
               end_ind,
               plus,
               hash,
               space,
               ign,
               pad,
               prec,
               padprec,
               caml_string_get(str, str_ind));
     }
     if(typeof pad !== "number") return parse_conv(pad);
     if(typeof prec === "number" && ! prec) return parse_conv(0);
     if(minus){
      if(typeof prec === "number") return parse_conv(F);
      var n = prec[1];
      return parse_conv([0, 0, n]);
     }
     if(typeof prec === "number") return parse_conv(G);
     var n$0 = prec[1];
     return parse_conv([0, 1, n$0]);
    }
    function parse_conversion
    (pct_ind,
     str_ind,
     end_ind,
     plus,
     hash,
     space,
     ign,
     pad,
     prec,
     padprec,
     symb){
     var
      plus_used = [0, 0],
      hash_used = [0, 0],
      space_used = [0, 0],
      ign_used = [0, 0],
      pad_used = [0, 0],
      prec_used = [0, 0];
     function get_plus(param){plus_used[1] = 1; return plus;}
     function get_hash(param){hash_used[1] = 1; return hash;}
     function get_space(param){space_used[1] = 1; return space;}
     function get_ign(param){ign_used[1] = 1; return ign;}
     function get_pad(param){pad_used[1] = 1; return pad;}
     function get_prec(param){prec_used[1] = 1; return prec;}
     function get_padprec(param){pad_used[1] = 1; return padprec;}
     function get_int_pad(param){
      var pad = get_pad(0), match = get_prec(0);
      if(typeof match === "number" && ! match) return pad;
      if(typeof pad === "number") return 0;
      if(0 !== pad[0])
       return 2 <= pad[1]
               ? legacy_behavior$0
                 ? H
                 : incompatible_flag(pct_ind, str_ind, 48, cst_precision$1)
               : pad;
      if(2 > pad[1]) return pad;
      var n = pad[2];
      return legacy_behavior$0
              ? [0, 1, n]
              : incompatible_flag(pct_ind, str_ind, 48, cst_precision$0);
     }
     function check_no_0(symb, pad){
      if(typeof pad === "number") return pad;
      if(0 !== pad[0])
       return 2 <= pad[1]
               ? legacy_behavior$0
                 ? I
                 : incompatible_flag(pct_ind, str_ind, symb, cst_0$1)
               : pad;
      if(2 > pad[1]) return pad;
      var width = pad[2];
      return legacy_behavior$0
              ? [0, 1, width]
              : incompatible_flag(pct_ind, str_ind, symb, cst_0$0);
     }
     function opt_of_pad(c, pad){
      if(typeof pad === "number") return 0;
      if(0 === pad[0])
       switch(pad[1]){
         case 0:
          var width = pad[2];
          return legacy_behavior$0
                  ? [0, width]
                  : incompatible_flag(pct_ind, str_ind, c, cst$24);
         case 1:
          var width$0 = pad[2]; return [0, width$0];
         default:
          var width$1 = pad[2];
          return legacy_behavior$0
                  ? [0, width$1]
                  : incompatible_flag(pct_ind, str_ind, c, cst_0$2);
       }
      return incompatible_flag(pct_ind, str_ind, c, cst$25);
     }
     function get_pad_opt(c){return opt_of_pad(c, get_pad(0));}
     function get_padprec_opt(c){return opt_of_pad(c, get_padprec(0));}
     a:
     {
      if(124 > symb)
       switch(symb){
         case 33:
          var
           fmt_rest$5 = parse(str_ind, end_ind)[1],
           fmt_result = [0, [10, fmt_rest$5]];
          break a;
         case 40:
          var
           sub_end = search_subformat_end(str_ind, end_ind, 41),
           fmt_rest$7 = parse(sub_end + 2 | 0, end_ind)[1],
           sub_fmt = parse(str_ind, sub_end)[1],
           sub_fmtty = fmtty_of_fmt(sub_fmt);
          if(get_ign(0)){
           var
            ignored$2 = [9, get_pad_opt(95), sub_fmtty],
            fmt_result = [0, [23, ignored$2, fmt_rest$7]];
           break a;
          }
          var fmt_result = [0, [14, get_pad_opt(40), sub_fmtty, fmt_rest$7]];
          break a;
         case 44:
          var fmt_result = parse(str_ind, end_ind); break a;
         case 67:
          var fmt_rest$10 = parse(str_ind, end_ind)[1];
          if(get_ign(0)){var fmt_result = [0, [23, 1, fmt_rest$10]]; break a;}
          var fmt_result = [0, [1, fmt_rest$10]];
          break a;
         case 78:
          var fmt_rest$14 = parse(str_ind, end_ind)[1], counter$0 = 2;
          if(get_ign(0)){
           var
            ignored$6 = [11, counter$0],
            fmt_result = [0, [23, ignored$6, fmt_rest$14]];
           break a;
          }
          var fmt_result = [0, [21, counter$0, fmt_rest$14]];
          break a;
         case 83:
          var
           pad$6 = check_no_0(symb, get_padprec(0)),
           fmt_rest$15 = parse(str_ind, end_ind)[1];
          if(get_ign(0)){
           var
            ignored$7 = [1, get_padprec_opt(95)],
            fmt_result = [0, [23, ignored$7, fmt_rest$15]];
           break a;
          }
          var
           match$5 = make_padding_fmt_ebb(pad$6, fmt_rest$15),
           fmt_rest$16 = match$5[2],
           pad$7 = match$5[1],
           fmt_result = [0, [3, pad$7, fmt_rest$16]];
          break a;
         case 91:
          var
           match$7 = parse_char_set(str_ind, end_ind),
           char_set = match$7[2],
           next_ind = match$7[1],
           fmt_rest$19 = parse(next_ind, end_ind)[1];
          if(get_ign(0)){
           var
            ignored$9 = [10, get_pad_opt(95), char_set],
            fmt_result = [0, [23, ignored$9, fmt_rest$19]];
           break a;
          }
          var fmt_result = [0, [20, get_pad_opt(91), char_set, fmt_rest$19]];
          break a;
         case 97:
          var
           fmt_rest$20 = parse(str_ind, end_ind)[1],
           fmt_result = [0, [15, fmt_rest$20]];
          break a;
         case 99:
          var
           char_format =
             function(fmt_rest){
              return get_ign(0) ? [0, [23, 0, fmt_rest]] : [0, [0, fmt_rest]];
             },
           fmt_rest$21 = parse(str_ind, end_ind)[1],
           match$8 = get_pad_opt(99);
          if(! match$8){var fmt_result = char_format(fmt_rest$21); break a;}
          var n = match$8[1];
          if(0 === n){
           if(get_ign(0)){
            var fmt_result = [0, [23, 3, fmt_rest$21]];
            break a;
           }
           var fmt_result = [0, [22, fmt_rest$21]];
           break a;
          }
          if(legacy_behavior$0){
           var fmt_result = char_format(fmt_rest$21);
           break a;
          }
          var
           fmt_result =
             invalid_format_message(str_ind, cst_non_zero_widths_are_unsupp);
          break a;
         case 114:
          var fmt_rest$22 = parse(str_ind, end_ind)[1];
          if(get_ign(0)){var fmt_result = [0, [23, 2, fmt_rest$22]]; break a;}
          var fmt_result = [0, [19, fmt_rest$22]];
          break a;
         case 115:
          var
           pad$9 = check_no_0(symb, get_padprec(0)),
           fmt_rest$23 = parse(str_ind, end_ind)[1];
          if(get_ign(0)){
           var
            ignored$10 = [0, get_padprec_opt(95)],
            fmt_result = [0, [23, ignored$10, fmt_rest$23]];
           break a;
          }
          var
           match$9 = make_padding_fmt_ebb(pad$9, fmt_rest$23),
           fmt_rest$24 = match$9[2],
           pad$10 = match$9[1],
           fmt_result = [0, [2, pad$10, fmt_rest$24]];
          break a;
         case 116:
          var
           fmt_rest$25 = parse(str_ind, end_ind)[1],
           fmt_result = [0, [16, fmt_rest$25]];
          break a;
         case 123:
          var
           sub_end$0 = search_subformat_end(str_ind, end_ind, 125),
           sub_fmt$0 = parse(str_ind, sub_end$0)[1],
           fmt_rest$26 = parse(sub_end$0 + 2 | 0, end_ind)[1],
           sub_fmtty$0 = fmtty_of_fmt(sub_fmt$0);
          if(get_ign(0)){
           var
            ignored$11 = [8, get_pad_opt(95), sub_fmtty$0],
            fmt_result = [0, [23, ignored$11, fmt_rest$26]];
           break a;
          }
          var
           fmt_result = [0, [13, get_pad_opt(123), sub_fmtty$0, fmt_rest$26]];
          break a;
         case 66:
         case 98:
          var
           pad$3 = check_no_0(symb, get_padprec(0)),
           fmt_rest$8 = parse(str_ind, end_ind)[1];
          if(get_ign(0)){
           var
            ignored$3 = [7, get_padprec_opt(95)],
            fmt_result = [0, [23, ignored$3, fmt_rest$8]];
           break a;
          }
          var
           match$3 = make_padding_fmt_ebb(pad$3, fmt_rest$8),
           fmt_rest$9 = match$3[2],
           pad$4 = match$3[1],
           fmt_result = [0, [9, pad$4, fmt_rest$9]];
          break a;
         case 37:
         case 64:
          var
           fmt_rest$6 = parse(str_ind, end_ind)[1],
           fmt_result = [0, [12, symb, fmt_rest$6]];
          break a;
         case 76:
         case 108:
         case 110:
          if(str_ind !== end_ind){
           var symb$0 = caml_string_get(str, str_ind), i = symb$0 - 88 | 0;
           b:
           {
            if(32 >= i >>> 0)
             switch(i){
               case 0:
               case 12:
               case 17:
               case 23:
               case 29:
               case 32:
                var h = 1; break b;
             }
            var h = 0;
           }
           if(h) break;
          }
          var fmt_rest$13 = parse(str_ind, end_ind)[1];
          b:
          {
           if(108 <= symb){
            if(111 > symb)
             switch(symb - 108 | 0){
               case 0:
                var counter = 0; break b;
               case 2:
                var counter = 1; break b;
             }
           }
           else if(76 === symb){var counter = 2; break b;}
           throw caml_maybe_attach_backtrace([0, Assert_failure, V], 1);
          }
          if(get_ign(0)){
           var
            ignored$5 = [11, counter],
            fmt_result = [0, [23, ignored$5, fmt_rest$13]];
           break a;
          }
          var fmt_result = [0, [21, counter, fmt_rest$13]];
          break a;
         case 32:
         case 35:
         case 43:
         case 45:
         case 95:
          var
           fmt_result = caml_call3(failwith_message(M), str, pct_ind, symb);
          break a;
         case 88:
         case 100:
         case 105:
         case 111:
         case 117:
         case 120:
          var
           A = get_space(0),
           B = get_hash(0),
           iconv$2 =
             compute_int_conv(pct_ind, str_ind, get_plus(0), B, A, symb),
           fmt_rest$17 = parse(str_ind, end_ind)[1];
          if(get_ign(0)){
           var
            ignored$8 = [2, iconv$2, get_pad_opt(95)],
            fmt_result = [0, [23, ignored$8, fmt_rest$17]];
           break a;
          }
          var
           C = get_prec(0),
           match$6 = make_padprec_fmt_ebb(get_int_pad(0), C, fmt_rest$17),
           fmt_rest$18 = match$6[3],
           prec$4 = match$6[2],
           pad$8 = match$6[1],
           fmt_result = [0, [4, iconv$2, pad$8, prec$4, fmt_rest$18]];
          break a;
         case 69:
         case 70:
         case 71:
         case 72:
         case 101:
         case 102:
         case 103:
         case 104:
          var
           space$1 = get_space(0),
           hash$1 = get_hash(0),
           plus$2 = get_plus(0),
           flag =
             plus$2
              ? space$1
                ? legacy_behavior$0
                  ? 1
                  : incompatible_flag(pct_ind, str_ind, 32, cst$36)
                : 1
              : space$1 ? 2 : 0;
          b:
          {
           if(73 <= symb){
            var switcher = symb - 101 | 0;
            if(3 >= switcher >>> 0)
             switch(switcher){
               case 0:
                var kind = 1; break b;
               case 1:
                var kind = 0; break b;
               case 2:
                var kind = 3; break b;
               default: var kind = 6; break b;
             }
           }
           else if(69 <= symb)
            switch(symb - 69 | 0){
              case 0:
               var kind = 2; break b;
              case 2:
               var kind = 4; break b;
              case 3:
               var kind = 7; break b;
            }
           if(hash$1){
            if(70 === symb){var kind = 8; break b;}
           }
           else if(70 === symb){var kind = 5; break b;}
           throw caml_maybe_attach_backtrace([0, Assert_failure, X], 1);
          }
          var
           fconv = [0, flag, kind],
           fmt_rest$11 = parse(str_ind, end_ind)[1];
          if(! get_ign(0)){
           var
            z = get_prec(0),
            match$4 = make_padprec_fmt_ebb(get_pad(0), z, fmt_rest$11),
            fmt_rest$12 = match$4[3],
            prec$3 = match$4[2],
            pad$5 = match$4[1],
            fmt_result = [0, [8, fconv, pad$5, prec$3, fmt_rest$12]];
           break a;
          }
          var match = get_prec(0);
          if(typeof match === "number")
           var
            g = match ? incompatible_flag(pct_ind, str_ind, 95, cst$26) : 0;
          else
           var ndec = match[1], g = [0, ndec];
          var
           ignored$4 = [6, get_pad_opt(95), g],
           fmt_result = [0, [23, ignored$4, fmt_rest$11]];
          break a;
       }
      if(108 <= symb){
       if(111 > symb)
        switch(symb - 108 | 0){
          case 0:
           var
            m = caml_string_get(str, str_ind),
            o = get_space(0),
            p = get_hash(0),
            iconv =
              compute_int_conv(pct_ind, str_ind + 1 | 0, get_plus(0), p, o, m),
            fmt_rest = parse(str_ind + 1 | 0, end_ind)[1];
           if(get_ign(0)){
            var
             ignored = [3, iconv, get_pad_opt(95)],
             fmt_result = [0, [23, ignored, fmt_rest]];
            break a;
           }
           var
            q = get_prec(0),
            match$0 = make_padprec_fmt_ebb(get_int_pad(0), q, fmt_rest),
            fmt_rest$0 = match$0[3],
            prec$0 = match$0[2],
            pad$0 = match$0[1],
            fmt_result = [0, [5, iconv, pad$0, prec$0, fmt_rest$0]];
           break a;
          case 2:
           var
            r = caml_string_get(str, str_ind),
            s = get_space(0),
            t = get_hash(0),
            iconv$0 =
              compute_int_conv(pct_ind, str_ind + 1 | 0, get_plus(0), t, s, r),
            fmt_rest$1 = parse(str_ind + 1 | 0, end_ind)[1];
           if(get_ign(0)){
            var
             ignored$0 = [4, iconv$0, get_pad_opt(95)],
             fmt_result = [0, [23, ignored$0, fmt_rest$1]];
            break a;
           }
           var
            u = get_prec(0),
            match$1 = make_padprec_fmt_ebb(get_int_pad(0), u, fmt_rest$1),
            fmt_rest$2 = match$1[3],
            prec$1 = match$1[2],
            pad$1 = match$1[1],
            fmt_result = [0, [6, iconv$0, pad$1, prec$1, fmt_rest$2]];
           break a;
        }
      }
      else if(76 === symb){
       var
        v = caml_string_get(str, str_ind),
        w = get_space(0),
        x = get_hash(0),
        iconv$1 =
          compute_int_conv(pct_ind, str_ind + 1 | 0, get_plus(0), x, w, v),
        fmt_rest$3 = parse(str_ind + 1 | 0, end_ind)[1];
       if(get_ign(0)){
        var
         ignored$1 = [5, iconv$1, get_pad_opt(95)],
         fmt_result = [0, [23, ignored$1, fmt_rest$3]];
        break a;
       }
       var
        y = get_prec(0),
        match$2 = make_padprec_fmt_ebb(get_int_pad(0), y, fmt_rest$3),
        fmt_rest$4 = match$2[3],
        prec$2 = match$2[2],
        pad$2 = match$2[1],
        fmt_result = [0, [7, iconv$1, pad$2, prec$2, fmt_rest$4]];
       break a;
      }
      var
       fmt_result =
         caml_call3(failwith_message(J), str, str_ind - 1 | 0, symb);
     }
     if(1 - legacy_behavior$0){
      var a = 1 - plus_used[1], plus$0 = a ? plus : a;
      if(plus$0) incompatible_flag(pct_ind, str_ind, symb, cst$27);
      var b = 1 - hash_used[1], hash$0 = b ? hash : b;
      if(hash$0) incompatible_flag(pct_ind, str_ind, symb, cst$28);
      var c = 1 - space_used[1], space$0 = c ? space : c;
      if(space$0) incompatible_flag(pct_ind, str_ind, symb, cst$29);
      var d = 1 - pad_used[1], j = d ? caml_notequal([0, pad], K) : d;
      if(j) incompatible_flag(pct_ind, str_ind, symb, cst_padding$0);
      var e = 1 - prec_used[1], k = e ? caml_notequal([0, prec], L) : e;
      if(k){
       var l = ign ? 95 : symb;
       incompatible_flag(pct_ind, str_ind, l, cst_precision$2);
      }
      var plus$1 = ign ? plus : ign;
      if(plus$1) incompatible_flag(pct_ind, str_ind, 95, cst$30);
     }
     var f = 1 - ign_used[1], ign$0 = f ? ign : f;
     a:
     if(ign$0){
      b:
      {
       if(38 <= symb){
        if(44 !== symb && 64 !== symb) break b;
       }
       else if(33 !== symb && 37 > symb) break b;
       if(legacy_behavior$0) break a;
      }
      incompatible_flag(pct_ind, str_ind, symb, cst$31);
     }
     return fmt_result;
    }
    function parse_after_at(str_ind, end_ind){
     if(str_ind === end_ind) return N;
     var c = caml_string_get(str, str_ind);
     if(65 <= c){
      if(94 <= c){
       var switcher = c - 123 | 0;
       if(2 >= switcher >>> 0)
        switch(switcher){
          case 0:
           return parse_tag(1, str_ind + 1 | 0, end_ind);
          case 2:
           var fmt_rest$0 = parse(str_ind + 1 | 0, end_ind)[1];
           return [0, [17, 1, fmt_rest$0]];
        }
      }
      else if(91 <= c)
       switch(c - 91 | 0){
         case 0:
          return parse_tag(0, str_ind + 1 | 0, end_ind);
         case 2:
          var fmt_rest$1 = parse(str_ind + 1 | 0, end_ind)[1];
          return [0, [17, 0, fmt_rest$1]];
       }
     }
     else{
      if(10 === c){
       var fmt_rest$2 = parse(str_ind + 1 | 0, end_ind)[1];
       return [0, [17, 3, fmt_rest$2]];
      }
      if(32 <= c)
       switch(c - 32 | 0){
         case 0:
          var fmt_rest$3 = parse(str_ind + 1 | 0, end_ind)[1];
          return [0, [17, O, fmt_rest$3]];
         case 5:
          if
           ((str_ind + 1 | 0) < end_ind
            && 37 === caml_string_get(str, str_ind + 1 | 0)){
           var fmt_rest$4 = parse(str_ind + 2 | 0, end_ind)[1];
           return [0, [17, 6, fmt_rest$4]];
          }
          var fmt_rest$5 = parse(str_ind, end_ind)[1];
          return [0, [12, 64, fmt_rest$5]];
         case 12:
          var fmt_rest$6 = parse(str_ind + 1 | 0, end_ind)[1];
          return [0, [17, P, fmt_rest$6]];
         case 14:
          var fmt_rest$7 = parse(str_ind + 1 | 0, end_ind)[1];
          return [0, [17, 4, fmt_rest$7]];
         case 27:
          var str_ind$0 = str_ind + 1 | 0;
          a:
          try{
           var
            b = str_ind$0 === end_ind ? 1 : 0,
            d = b || (60 !== caml_string_get(str, str_ind$0) ? 1 : 0);
           if(d) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
           var
            str_ind_1 = parse_spaces(str_ind$0 + 1 | 0, end_ind),
            match = caml_string_get(str, str_ind_1);
           b:
           {
            if(48 <= match){
             if(58 <= match) break b;
            }
            else if(45 !== match) break b;
            var
             match$0 = parse_integer(str_ind_1, end_ind),
             width = match$0[2],
             str_ind_2 = match$0[1],
             str_ind_3 = parse_spaces(str_ind_2, end_ind),
             switcher$0 = caml_string_get(str, str_ind_3) - 45 | 0;
            if(12 < switcher$0 >>> 0){
             if(17 === switcher$0){
              var
               s =
                 Stdlib_String[16].call
                  (null,
                   str,
                   str_ind$0 - 2 | 0,
                   (str_ind_3 - str_ind$0 | 0) + 3 | 0),
               e = [0, s, width, 0],
               f = str_ind_3 + 1 | 0,
               formatting_lit$0 = e,
               next_ind = f;
              break a;
             }
            }
            else if(1 < switcher$0 - 1 >>> 0){
             var
              match$1 = parse_integer(str_ind_3, end_ind),
              offset = match$1[2],
              str_ind_4 = match$1[1],
              str_ind_5 = parse_spaces(str_ind_4, end_ind);
             if(62 !== caml_string_get(str, str_ind_5))
              throw caml_maybe_attach_backtrace(Stdlib[8], 1);
             var
              s$0 =
                Stdlib_String[16].call
                 (null,
                  str,
                  str_ind$0 - 2 | 0,
                  (str_ind_5 - str_ind$0 | 0) + 3 | 0),
              g = [0, s$0, width, offset],
              h = str_ind_5 + 1 | 0,
              formatting_lit$0 = g,
              next_ind = h;
             break a;
            }
            throw caml_maybe_attach_backtrace(Stdlib[8], 1);
           }
           throw caml_maybe_attach_backtrace(Stdlib[8], 1);
          }
          catch(exn$0){
           var exn = caml_wrap_exception(exn$0);
           if(exn === Stdlib[8])
            var formatting_lit$0 = formatting_lit, next_ind = str_ind$0;
           else{
            if(exn[1] !== Stdlib[7])
             throw caml_maybe_attach_backtrace(exn, 0);
            var formatting_lit$0 = formatting_lit, next_ind = str_ind$0;
           }
          }
          var fmt_rest$10 = parse(next_ind, end_ind)[1];
          return [0, [17, formatting_lit$0, fmt_rest$10]];
         case 28:
          var str_ind$1 = str_ind + 1 | 0;
          try{
           var
            str_ind_1$0 = parse_spaces(str_ind$1, end_ind),
            match$4 = caml_string_get(str, str_ind_1$0);
           a:
           {
            b:
            {
             if(48 <= match$4){
              if(58 <= match$4) break b;
             }
             else if(45 !== match$4) break b;
             var
              match$5 = parse_integer(str_ind_1$0, end_ind),
              size = match$5[2],
              str_ind_2$0 = match$5[1],
              str_ind_3$0 = parse_spaces(str_ind_2$0, end_ind);
             if(62 !== caml_string_get(str, str_ind_3$0))
              throw caml_maybe_attach_backtrace(Stdlib[8], 1);
             var
              s$1 =
                Stdlib_String[16].call
                 (null,
                  str,
                  str_ind$1 - 2 | 0,
                  (str_ind_3$0 - str_ind$1 | 0) + 3 | 0),
              a = [0, [0, str_ind_3$0 + 1 | 0, [1, s$1, size]]];
             break a;
            }
            var a = 0;
           }
           var match$2 = a;
          }
          catch(exn){
           var exn$0 = caml_wrap_exception(exn);
           if(exn$0 !== Stdlib[8] && exn$0[1] !== Stdlib[7])
            throw caml_maybe_attach_backtrace(exn$0, 0);
           var match$2 = 0;
          }
          if(match$2){
           var
            match$3 = match$2[1],
            formatting_lit$1 = match$3[2],
            next_ind$0 = match$3[1],
            fmt_rest$11 = parse(next_ind$0, end_ind)[1];
           return [0, [17, formatting_lit$1, fmt_rest$11]];
          }
          var fmt_rest$12 = parse(str_ind$1, end_ind)[1];
          return [0, [17, Q, fmt_rest$12]];
         case 31:
          var fmt_rest$8 = parse(str_ind + 1 | 0, end_ind)[1];
          return [0, [17, 2, fmt_rest$8]];
         case 32:
          var fmt_rest$9 = parse(str_ind + 1 | 0, end_ind)[1];
          return [0, [17, 5, fmt_rest$9]];
       }
     }
     var fmt_rest = parse(str_ind + 1 | 0, end_ind)[1];
     return [0, [17, [2, c], fmt_rest]];
    }
    function parse_tag(is_open_tag, str_ind, end_ind){
     try{
      if(str_ind === end_ind) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      if(60 !== caml_string_get(str, str_ind))
       throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var ind = Stdlib_String[32].call(null, str, str_ind + 1 | 0, 62);
      if(end_ind <= ind) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
      var
       sub_str =
         Stdlib_String[16].call
          (null, str, str_ind, (ind - str_ind | 0) + 1 | 0),
       fmt_rest$0 = parse(ind + 1 | 0, end_ind)[1],
       sub_fmt = parse(str_ind, ind + 1 | 0)[1],
       sub_format$0 = [0, sub_fmt, sub_str],
       formatting$0 = is_open_tag ? [0, sub_format$0] : [1, sub_format$0],
       a = [0, [18, formatting$0, fmt_rest$0]];
      return a;
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
      var
       fmt_rest = parse(str_ind, end_ind)[1],
       formatting = is_open_tag ? [0, sub_format] : [1, sub_format];
      return [0, [18, formatting, fmt_rest]];
     }
    }
    function parse_char_set(str_ind, end_ind){
     if(str_ind === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     var char_set = create_char_set(0);
     function add_range(c$0, c){
      if(c >= c$0){
       var i = c$0;
       for(;;){
        add_in_char_set(char_set, Stdlib[29].call(null, i));
        var a = i + 1 | 0;
        if(c === i) break;
        i = a;
       }
      }
     }
     function fail_single_percent(str_ind){
      return caml_call2(failwith_message(R), str, str_ind);
     }
     function parse_char_set_content(counter, str_ind$1, end_ind){
      var str_ind = str_ind$1;
      for(;;){
       if(str_ind === end_ind)
        invalid_format_message(end_ind, cst_unexpected_end_of_format);
       var c = caml_string_get(str, str_ind);
       if(45 !== c){
        if(93 === c) return str_ind + 1 | 0;
        var a = str_ind + 1 | 0;
        if(counter >= 50)
         return caml_trampoline_return
                 (parse_char_set_after_char$0, [0, a, end_ind, c]);
        var counter$0 = counter + 1 | 0;
        return parse_char_set_after_char$0(counter$0, a, end_ind, c);
       }
       add_in_char_set(char_set, 45);
       var str_ind$0 = str_ind + 1 | 0;
       str_ind = str_ind$0;
      }
     }
     function parse_char_set_after_char$0(counter, str_ind$2, end_ind, c$3){
      var str_ind = str_ind$2, c = c$3;
      for(;;){
       if(str_ind === end_ind)
        invalid_format_message(end_ind, cst_unexpected_end_of_format);
       var c$0 = caml_string_get(str, str_ind);
       a:
       {
        if(46 <= c$0){
         if(64 !== c$0){
          if(93 !== c$0) break a;
          add_in_char_set(char_set, c);
          return str_ind + 1 | 0;
         }
        }
        else if(37 !== c$0){if(45 <= c$0) break; break a;}
        if(37 === c){
         add_in_char_set(char_set, c$0);
         var a = str_ind + 1 | 0;
         if(counter >= 50)
          return caml_trampoline_return
                  (parse_char_set_content, [0, a, end_ind]);
         var counter$0 = counter + 1 | 0;
         return parse_char_set_content(counter$0, a, end_ind);
        }
       }
       if(37 === c) fail_single_percent(str_ind);
       add_in_char_set(char_set, c);
       var str_ind$0 = str_ind + 1 | 0;
       str_ind = str_ind$0;
       c = c$0;
      }
      var str_ind$1 = str_ind + 1 | 0;
      if(str_ind$1 === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      var c$1 = caml_string_get(str, str_ind$1);
      if(37 === c$1){
       if((str_ind$1 + 1 | 0) === end_ind)
        invalid_format_message(end_ind, cst_unexpected_end_of_format);
       var c$2 = caml_string_get(str, str_ind$1 + 1 | 0);
       if(37 !== c$2 && 64 !== c$2) return fail_single_percent(str_ind$1);
       add_range(c, c$2);
       var b = str_ind$1 + 2 | 0;
       if(counter >= 50)
        return caml_trampoline_return(parse_char_set_content, [0, b, end_ind]);
       var counter$2 = counter + 1 | 0;
       return parse_char_set_content(counter$2, b, end_ind);
      }
      if(93 === c$1){
       add_in_char_set(char_set, c);
       add_in_char_set(char_set, 45);
       return str_ind$1 + 1 | 0;
      }
      add_range(c, c$1);
      var d = str_ind$1 + 1 | 0;
      if(counter >= 50)
       return caml_trampoline_return(parse_char_set_content, [0, d, end_ind]);
      var counter$1 = counter + 1 | 0;
      return parse_char_set_content(counter$1, d, end_ind);
     }
     function parse_char_set_after_char(str_ind, end_ind, c){
      return caml_trampoline
              (parse_char_set_after_char$0(0, str_ind, end_ind, c));
     }
     if(str_ind === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     if(94 === caml_string_get(str, str_ind))
      var str_ind$0 = str_ind + 1 | 0, reverse = 1, str_ind$1 = str_ind$0;
     else
      var reverse = 0, str_ind$1 = str_ind;
     if(str_ind$1 === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     var
      c = caml_string_get(str, str_ind$1),
      next_ind = parse_char_set_after_char(str_ind$1 + 1 | 0, end_ind, c),
      char_set$0 = freeze_char_set(char_set),
      a = reverse ? rev_char_set(char_set$0) : char_set$0;
     return [0, next_ind, a];
    }
    function parse_spaces(str_ind$1, end_ind){
     var str_ind = str_ind$1;
     for(;;){
      if(str_ind === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      if(32 !== caml_string_get(str, str_ind)) return str_ind;
      var str_ind$0 = str_ind + 1 | 0;
      str_ind = str_ind$0;
     }
    }
    function parse_positive(str_ind$1, end_ind, acc$0){
     var str_ind = str_ind$1, acc = acc$0;
     for(;;){
      if(str_ind === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      var c = caml_string_get(str, str_ind);
      if(9 < c - 48 >>> 0) return [0, str_ind, acc];
      var new_acc = (acc * 10 | 0) + (c - 48 | 0) | 0;
      if(Stdlib_Sys[12] < new_acc){
       var a = Stdlib_Sys[12];
       return caml_call3(failwith_message(S), str, new_acc, a);
      }
      var str_ind$0 = str_ind + 1 | 0;
      str_ind = str_ind$0;
      acc = new_acc;
     }
    }
    function parse_integer(str_ind, end_ind){
     if(str_ind === end_ind)
      invalid_format_message(end_ind, cst_unexpected_end_of_format);
     var match = caml_string_get(str, str_ind);
     if(48 <= match){
      if(58 > match) return parse_positive(str_ind, end_ind, 0);
     }
     else if(45 === match){
      if((str_ind + 1 | 0) === end_ind)
       invalid_format_message(end_ind, cst_unexpected_end_of_format);
      var c = caml_string_get(str, str_ind + 1 | 0);
      if(9 < c - 48 >>> 0)
       return expected_character(str_ind + 1 | 0, cst_digit, c);
      var
       match$0 = parse_positive(str_ind + 1 | 0, end_ind, 0),
       n = match$0[2],
       next_ind = match$0[1];
      return [0, next_ind, - n | 0];
     }
     throw caml_maybe_attach_backtrace([0, Assert_failure, T], 1);
    }
    function add_literal(lit_start, str_ind, fmt){
     var size = str_ind - lit_start | 0;
     return 0 === size
             ? [0, fmt]
             : 1
               === size
               ? [0, [12, caml_string_get(str, lit_start), fmt]]
               : [0,
                 [11, Stdlib_String[16].call(null, str, lit_start, size), fmt]];
    }
    function search_subformat_end(str_ind$7, end_ind, c){
     var str_ind = str_ind$7;
     for(;;){
      if(str_ind === end_ind)
       caml_call3(failwith_message(U), str, c, end_ind);
      if(37 === caml_string_get(str, str_ind)){
       if((str_ind + 1 | 0) === end_ind)
        invalid_format_message(end_ind, cst_unexpected_end_of_format);
       if(caml_string_get(str, str_ind + 1 | 0) === c) return str_ind;
       var match = caml_string_get(str, str_ind + 1 | 0);
       if(95 <= match){
        if(123 <= match){
         if(126 > match)
          switch(match - 123 | 0){
            case 0:
             var
              sub_end = search_subformat_end(str_ind + 2 | 0, end_ind, 125),
              str_ind$1 = sub_end + 2 | 0;
             str_ind = str_ind$1;
             continue;
            case 2:
             return expected_character(str_ind + 1 | 0, cst_character, 125);
          }
        }
        else if(96 > match){
         if((str_ind + 2 | 0) === end_ind)
          invalid_format_message(end_ind, cst_unexpected_end_of_format);
         var match$0 = caml_string_get(str, str_ind + 2 | 0);
         if(40 === match$0){
          var
           sub_end$0 = search_subformat_end(str_ind + 3 | 0, end_ind, 41),
           str_ind$2 = sub_end$0 + 2 | 0;
          str_ind = str_ind$2;
          continue;
         }
         if(123 === match$0){
          var
           sub_end$1 = search_subformat_end(str_ind + 3 | 0, end_ind, 125),
           str_ind$3 = sub_end$1 + 2 | 0;
          str_ind = str_ind$3;
          continue;
         }
         var str_ind$4 = str_ind + 3 | 0;
         str_ind = str_ind$4;
         continue;
        }
       }
       else{
        if(40 === match){
         var
          sub_end$2 = search_subformat_end(str_ind + 2 | 0, end_ind, 41),
          str_ind$5 = sub_end$2 + 2 | 0;
         str_ind = str_ind$5;
         continue;
        }
        if(41 === match)
         return expected_character(str_ind + 1 | 0, cst_character$0, 41);
       }
       var str_ind$0 = str_ind + 2 | 0;
       str_ind = str_ind$0;
      }
      else{var str_ind$6 = str_ind + 1 | 0; str_ind = str_ind$6;}
     }
    }
    function compute_int_conv(pct_ind, str_ind, plus$0, hash$0, space$0, symb){
     var plus = plus$0, hash = hash$0, space = space$0;
     for(;;){
      a:
      {
       if(plus){
        if(! hash){
         if(space) break a;
         if(100 === symb) return 1;
         if(105 === symb) return 4;
         break a;
        }
       }
       else{
        if(! hash){
         if(space){
          if(100 === symb) return 2;
          if(105 === symb) return 5;
          break a;
         }
         var switcher$1 = symb - 88 | 0;
         if(32 < switcher$1 >>> 0) break a;
         switch(switcher$1){
           case 0:
            return 8;
           case 12:
            return 0;
           case 17:
            return 3;
           case 23:
            return 10;
           case 29:
            return 12;
           case 32:
            return 6;
           default: break a;
         }
        }
        if(! space){
         var switcher$0 = symb - 88 | 0;
         if(32 >= switcher$0 >>> 0)
          switch(switcher$0){
            case 0:
             return 9;
            case 12:
             return 13;
            case 17:
             return 14;
            case 23:
             return 11;
            case 29:
             return 15;
            case 32:
             return 7;
          }
        }
       }
       var switcher = symb - 88 | 0;
       if(32 >= switcher >>> 0)
        switch(switcher){
          case 0:
           if(legacy_behavior$0) return 9; break;
          case 23:
           if(legacy_behavior$0) return 11; break;
          case 32:
           if(legacy_behavior$0) return 7; break;
          case 12:
          case 17:
          case 29:
           if(! legacy_behavior$0)
            return incompatible_flag(pct_ind, str_ind, symb, cst$35);
           hash = 0;
           continue;
        }
      }
      if(plus)
       if(space){
        if(! legacy_behavior$0)
         return incompatible_flag(pct_ind, str_ind, 32, cst$32);
        space = 0;
       }
       else{
        if(! legacy_behavior$0)
         return incompatible_flag(pct_ind, str_ind, symb, cst$33);
        plus = 0;
       }
      else{
       if(! space)
        throw caml_maybe_attach_backtrace([0, Assert_failure, W], 1);
       if(! legacy_behavior$0)
        return incompatible_flag(pct_ind, str_ind, symb, cst$34);
       space = 0;
      }
     }
    }
    function incompatible_flag(pct_ind, str_ind, symb, option){
     var
      subfmt =
        Stdlib_String[16].call(null, str, pct_ind, str_ind - pct_ind | 0);
     return caml_call5
             (failwith_message(Y), str, pct_ind, option, symb, subfmt);
    }
    return parse(0, caml_ml_string_length(str));
   }
   function format_of_string_fmtty(str, fmtty){
    var fmt = fmt_ebb_of_string(0, str)[1];
    try{var b = [0, type_format(fmt, fmtty), str]; return b;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Type_mismatch) throw caml_maybe_attach_backtrace(exn, 0);
     var a = string_of_fmtty(fmtty);
     return caml_call2(failwith_message(Z), str, a);
    }
   }
   function format_of_string_format(str, param){
    var
     str$0 = param[2],
     fmt = param[1],
     fmt$0 = fmt_ebb_of_string(0, str)[1];
    try{var a = [0, type_format(fmt$0, fmtty_of_fmt(fmt)), str]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Type_mismatch)
      return caml_call2(failwith_message(_), str, str$0);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var
    CamlinternalFormat =
      [0,
       is_in_char_set,
       rev_char_set,
       create_char_set,
       add_in_char_set,
       freeze_char_set,
       param_format_of_ignored_format,
       make_printf,
       make_iprintf,
       output_acc,
       bufput_acc,
       strput_acc,
       type_format,
       fmt_ebb_of_string,
       format_of_string_fmtty,
       format_of_string_format,
       char_of_iconv,
       string_of_formatting_lit,
       string_of_fmtty,
       string_of_fmt,
       open_box_of_string,
       symm,
       trans,
       recast];
   runtime.caml_register_global(197, CamlinternalFormat, "CamlinternalFormat");
   return;
  }
  (globalThis));

//# 15712 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Printf:[F(2),F(1),F(1),F(1),F(2),F(2),F(2),F(3),F(3),F(2),F(3),F(3),F(2)]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    CamlinternalFormat = global_data.CamlinternalFormat,
    Stdlib = global_data.Stdlib;
   function kfprintf(k, o, param){
    var fmt = param[1];
    return CamlinternalFormat[7].call
            (null,
             function(acc){
              CamlinternalFormat[9].call(null, o, acc);
              return caml_call1(k, o);
             },
             0,
             fmt);
   }
   function kbprintf(k, b, param){
    var fmt = param[1];
    return CamlinternalFormat[7].call
            (null,
             function(acc){
              CamlinternalFormat[10].call(null, b, acc);
              return caml_call1(k, b);
             },
             0,
             fmt);
   }
   function ikfprintf(k, oc, param){
    var fmt = param[1];
    return CamlinternalFormat[8].call(null, k, oc, fmt);
   }
   function fprintf(oc, fmt){
    return kfprintf(function(a){return 0;}, oc, fmt);
   }
   function bprintf(b, fmt){return kbprintf(function(a){return 0;}, b, fmt);}
   function ifprintf(oc, fmt){
    return ikfprintf(function(a){return 0;}, oc, fmt);
   }
   function ibprintf(b, fmt){
    return ikfprintf(function(a){return 0;}, b, fmt);
   }
   function printf(fmt){return fprintf(Stdlib[39], fmt);}
   function eprintf(fmt){return fprintf(Stdlib[40], fmt);}
   function ksprintf(k, param){
    var fmt = param[1];
    function k$0(acc){
     var buf = Stdlib_Buffer[1].call(null, 64);
     CamlinternalFormat[11].call(null, buf, acc);
     return caml_call1(k, Stdlib_Buffer[2].call(null, buf));
    }
    return CamlinternalFormat[7].call(null, k$0, 0, fmt);
   }
   function sprintf(fmt){return ksprintf(function(s){return s;}, fmt);}
   var
    Stdlib_Printf =
      [0,
       fprintf,
       printf,
       eprintf,
       sprintf,
       bprintf,
       ifprintf,
       ibprintf,
       kfprintf,
       ikfprintf,
       ksprintf,
       kbprintf,
       ikfprintf,
       ksprintf];
   runtime.caml_register_global(3, Stdlib_Printf, "Stdlib__Printf");
   return;
  }
  (globalThis));

//# 16500 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Printexc:[F(1),F(1),F(2),F(2),F(1),F(1),F(1),F(1),F(1),F(1),F(1)*,F(1)*,F(2),F(1),F(2),F(1),F(1),F(1),N,F(1)*,F(2),F(1),F(1),F(1),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = "",
    cst_s = "%s\n",
    cst_Program_not_linked_with_g_$0 =
      "(Program not linked with -g, cannot print stack backtrace)\n",
    cst_characters = ", characters ",
    cst_Fatal_error_exception = "Fatal error: exception ",
    cst_Fatal_error_exception_s = "Fatal error: exception %s\n",
    cst_Uncaught_exception = "Uncaught exception: ",
    cst_Uncaught_exception_s = "Uncaught exception: %s\n",
    caml_check_bound = runtime.caml_check_bound,
    caml_get_exception_raw_backtra = runtime.caml_get_exception_raw_backtrace,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$4,
    cst$3 = cst$4,
    partial = [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]],
    cst$1 = cst$4,
    cst$2 = cst$4,
    cst = "_",
    locfmt =
      [0,
       [11,
        'File "',
        [2,
         0,
         [11,
          '", line ',
          [4,
           0,
           0,
           0,
           [11,
            cst_characters,
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [11, ": ", [2, 0, 0]]]]]]]]]],
       'File "%s", line %d, characters %d-%d: %s'],
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Atomic = global_data.Stdlib__Atomic,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Obj = global_data.Stdlib__Obj,
    printers = Stdlib_Atomic[1].call(null, 0),
    a = [0, [3, 0, 0], "%S"],
    b = [0, [4, 0, 0, 0, 0], "%d"],
    c = [0, [11, ", ", [2, 0, [2, 0, 0]]], ", %s%s"],
    d = [0, [12, 40, [2, 0, [2, 0, [12, 41, 0]]]], "(%s%s)"],
    e = [0, [12, 40, [2, 0, [12, 41, 0]]], "(%s)"],
    cst_Out_of_memory = "Out of memory",
    cst_Stack_overflow = "Stack overflow",
    cst_Pattern_matching_failed = "Pattern matching failed",
    cst_Assertion_failed = "Assertion failed",
    cst_Undefined_recursive_module = "Undefined recursive module",
    f =
      [0,
       [11, cst_Uncaught_exception, [2, 0, [12, 10, 0]]],
       cst_Uncaught_exception_s],
    g =
      [0,
       [11, cst_Uncaught_exception, [2, 0, [12, 10, 0]]],
       cst_Uncaught_exception_s],
    cst_Raised_at = "Raised at",
    cst_Re_raised_at = "Re-raised at",
    cst_Raised_by_primitive_operat = "Raised by primitive operation at",
    cst_Called_from = "Called from",
    h = [0, [12, 32, [4, 0, 0, 0, 0]], " %d"],
    cst_inlined = " (inlined)",
    i =
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           ' in file "',
           [2,
            0,
            [12,
             34,
             [2, 0, [11, ", line", [2, 0, [11, cst_characters, partial]]]]]]]]]],
       '%s %s in file "%s"%s, line%s, characters %d-%d'],
    j = [0, [11, "s ", [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]]], "s %d-%d"],
    k = [0, [2, 0, [11, " unknown location", 0]], "%s unknown location"],
    l = [0, [2, 0, [12, 10, 0]], cst_s],
    m =
      [0,
       [11, cst_Program_not_linked_with_g_$0, 0],
       cst_Program_not_linked_with_g_$0],
    n = [0, [2, 0, [12, 10, 0]], cst_s],
    cst_Program_not_linked_with_g_ = cst_Program_not_linked_with_g_$0;
   function field(x, i){
    var f = x[i + 1];
    if(! Stdlib_Obj[1].call(null, f))
     return caml_call1(Stdlib_Printf[4].call(null, b), f);
    var c = Stdlib_Obj[15];
    if(caml_obj_tag(f) === c)
     return caml_call1(Stdlib_Printf[4].call(null, a), f);
    var d = Stdlib_Obj[16];
    return caml_obj_tag(f) === d ? Stdlib[35].call(null, f) : cst;
   }
   function other_fields(x, i){
    if(x.length - 1 <= i) return cst$0;
    var a = other_fields(x, i + 1 | 0), b = field(x, i);
    return caml_call2(Stdlib_Printf[4].call(null, c), b, a);
   }
   function use_printers(x){
    var param = Stdlib_Atomic[3].call(null, printers);
    for(;;){
     if(! param) return 0;
     var tl = param[2], hd = param[1];
     try{var val = caml_call1(hd, x);}catch(a){param = tl; continue;}
     if(val){var s = val[1]; return [0, s];}
     param = tl;
    }
   }
   function string_of_extension_constructo(t){
    if(0 === caml_obj_tag(t)){
     var constructor = t[1][1], match = t.length - 1;
     if(2 < match >>> 0)
      var
       b = other_fields(t, 2),
       c = field(t, 1),
       a = caml_call2(Stdlib_Printf[4].call(null, d), c, b);
     else
      switch(match){
        case 2:
         var
          g = field(t, 1),
          a = caml_call1(Stdlib_Printf[4].call(null, e), g);
         break;
        case 0:
         var a = cst$1; break;
        default: var a = cst$2;
      }
     var match$0 = [0, constructor, [0, a]];
    }
    else
     var match$0 = [0, t[1], 0];
    var fields_opt = match$0[2], constructor$0 = match$0[1];
    if(! fields_opt) return constructor$0;
    var f = fields_opt[1];
    return Stdlib[28].call(null, constructor$0, f);
   }
   function to_string_default(x){
    if(x === Stdlib[9]) return cst_Out_of_memory;
    if(x === Stdlib[10]) return cst_Stack_overflow;
    var tag = x[1];
    if(tag === Stdlib[4]){
     var match = x[2], char = match[3], line = match[2], file = match[1];
     return caml_call5
             (Stdlib_Printf[4].call(null, locfmt),
              file,
              line,
              char,
              char + 5 | 0,
              cst_Pattern_matching_failed);
    }
    var tag$0 = x[1];
    if(tag$0 === Stdlib[5]){
     var
      match$0 = x[2],
      char$0 = match$0[3],
      line$0 = match$0[2],
      file$0 = match$0[1];
     return caml_call5
             (Stdlib_Printf[4].call(null, locfmt),
              file$0,
              line$0,
              char$0,
              char$0 + 6 | 0,
              cst_Assertion_failed);
    }
    var tag$1 = x[1];
    if(tag$1 !== Stdlib[15]) return string_of_extension_constructo(x);
    var
     match$1 = x[2],
     char$1 = match$1[3],
     line$1 = match$1[2],
     file$1 = match$1[1];
    return caml_call5
            (Stdlib_Printf[4].call(null, locfmt),
             file$1,
             line$1,
             char$1,
             char$1 + 6 | 0,
             cst_Undefined_recursive_module);
   }
   function to_string(e){
    var match = use_printers(e);
    if(! match) return to_string_default(e);
    var s = match[1];
    return s;
   }
   function print(fct, arg){
    try{var b = caml_call1(fct, arg); return b;}
    catch(x$0){
     var x = caml_wrap_exception(x$0), a = to_string(x);
     caml_call1(Stdlib_Printf[3].call(null, f), a);
     Stdlib[63].call(null, Stdlib[40]);
     throw caml_maybe_attach_backtrace(x, 0);
    }
   }
   function catch$(fct, arg){
    try{var b = caml_call1(fct, arg); return b;}
    catch(x$0){
     var x = caml_wrap_exception(x$0);
     Stdlib[63].call(null, Stdlib[39]);
     var a = to_string(x);
     caml_call1(Stdlib_Printf[3].call(null, g), a);
     return Stdlib[99].call(null, 2);
    }
   }
   function raw_backtrace_entries(bt){return bt;}
   function convert_raw_backtrace(bt){
    return [0, runtime.caml_convert_raw_backtrace(bt)];
   }
   function format_backtrace_slot(pos, slot){
    function info(is_raise){
     return is_raise
             ? 0 === pos ? cst_Raised_at : cst_Re_raised_at
             : 0 === pos ? cst_Raised_by_primitive_operat : cst_Called_from;
    }
    if(0 !== slot[0]){
     if(slot[1]) return 0;
     var n = info(0);
     return [0, caml_call1(Stdlib_Printf[4].call(null, k), n)];
    }
    if(slot[3] === slot[6])
     var a = slot[3], lines = caml_call1(Stdlib_Printf[4].call(null, h), a);
    else
     var
      l = slot[6],
      m = slot[3],
      lines = caml_call2(Stdlib_Printf[4].call(null, j), m, l);
    var
     b = slot[7],
     c = slot[4],
     d = slot[8] ? cst_inlined : cst$3,
     e = slot[2],
     f = slot[9],
     g = info(slot[1]);
    return [0,
            caml_call7
             (Stdlib_Printf[4].call(null, i), g, f, e, d, lines, c, b)];
   }
   function print_raw_backtrace(outchan, raw_backtrace){
    var backtrace = convert_raw_backtrace(raw_backtrace);
    if(! backtrace) return Stdlib_Printf[1].call(null, outchan, m);
    var a = backtrace[1], b = a.length - 2 | 0, c = 0;
    if(b >= 0){
     var i = c;
     for(;;){
      var match = format_backtrace_slot(i, caml_check_bound(a, i)[i + 1]);
      if(match){
       var str = match[1];
       caml_call1(Stdlib_Printf[1].call(null, outchan, l), str);
      }
      var d = i + 1 | 0;
      if(b === i) break;
      i = d;
     }
    }
    return 0;
   }
   function print_backtrace(outchan){
    return print_raw_backtrace(outchan, caml_get_exception_raw_backtra(0));
   }
   function raw_backtrace_to_string(raw_backtrace){
    var backtrace = convert_raw_backtrace(raw_backtrace);
    if(! backtrace) return cst_Program_not_linked_with_g_;
    var
     a = backtrace[1],
     b = Stdlib_Buffer[1].call(null, 1024),
     c = a.length - 2 | 0,
     d = 0;
    if(c >= 0){
     var i = d;
     for(;;){
      var match = format_backtrace_slot(i, caml_check_bound(a, i)[i + 1]);
      if(match){
       var str = match[1];
       caml_call1(Stdlib_Printf[5].call(null, b, n), str);
      }
      var e = i + 1 | 0;
      if(c === i) break;
      i = e;
     }
    }
    return Stdlib_Buffer[2].call(null, b);
   }
   function backtrace_slot_is_raise(param){
    return 0 === param[0] ? param[1] : param[1];
   }
   function backtrace_slot_is_inline(param){return 0 === param[0] ? param[8] : 0;
   }
   function backtrace_slot_location(param){
    return 0 === param[0]
            ? [0,
              [0, param[2], param[3], param[4], param[5], param[6], param[7]]]
            : 0;
   }
   function backtrace_slot_defname(param){
    if(0 === param[0] && param[9] !== cst$4) return [0, param[9]];
    return 0;
   }
   function backtrace_slots(raw_backtrace){
    var match = convert_raw_backtrace(raw_backtrace);
    if(! match) return 0;
    var backtrace = match[1], i$1 = backtrace.length - 2 | 0, i = i$1;
    for(;;){
     if(-1 === i)
      var b = 0;
     else{
      var a = 0 === caml_check_bound(backtrace, i)[i + 1][0] ? 1 : 0;
      if(! a){var i$0 = i - 1 | 0; i = i$0; continue;}
      var b = a;
     }
     return b ? [0, backtrace] : 0;
    }
   }
   function backtrace_slots_of_raw_entry(entry){return backtrace_slots([0, entry]);
   }
   function raw_backtrace_length(bt){return bt.length - 1;}
   function get_backtrace(param){
    return raw_backtrace_to_string(caml_get_exception_raw_backtra(0));
   }
   function register_printer(fn){
    for(;;){
     var
      old_printers = Stdlib_Atomic[3].call(null, printers),
      new_printers = [0, fn, old_printers],
      success =
        Stdlib_Atomic[6].call(null, printers, old_printers, new_printers),
      a = 1 - success;
     if(! a) return a;
    }
   }
   function exn_slot(x){return 0 === caml_obj_tag(x) ? x[1] : x;}
   function exn_slot_id(x){var slot = exn_slot(x); return slot[2];}
   function exn_slot_name(x){var slot = exn_slot(x); return slot[1];}
   var
    errors =
      runtime.caml_obj_dup
       ([0,
         cst$4,
         "(Cannot print locations:\n bytecode executable program file not found)",
         "(Cannot print locations:\n bytecode executable program file appears to be corrupt)",
         "(Cannot print locations:\n bytecode executable program file has wrong magic number)",
         "(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)"]),
    o =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s];
   function default_uncaught_exception_han(exn, raw_backtrace){
    var b = to_string(exn);
    caml_call1(Stdlib_Printf[3].call(null, o), b);
    print_raw_backtrace(Stdlib[40], raw_backtrace);
    var status = runtime.caml_ml_debug_info_status(0);
    if(status < 0){
     var
      a = Stdlib[18].call(null, status),
      c = caml_check_bound(errors, a)[a + 1];
     Stdlib[53].call(null, c);
    }
    return Stdlib[63].call(null, Stdlib[40]);
   }
   var uncaught_exception_handler = [0, default_uncaught_exception_han];
   function set_uncaught_exception_handler(fn){
    uncaught_exception_handler[1] = fn;
    return 0;
   }
   var
    empty_backtrace = [0],
    cst_Fatal_error_out_of_memory_ =
      "Fatal error: out of memory in uncaught exception handler",
    p =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    q =
      [0,
       [11,
        "Fatal error in uncaught exception handler: exception ",
        [2, 0, [12, 10, 0]]],
       "Fatal error in uncaught exception handler: exception %s\n"];
   function handle_uncaught_exception(exn$1, debugger_in_use){
    try{
     try{
      var
       raw_backtrace =
         debugger_in_use ? empty_backtrace : caml_get_exception_raw_backtra(0);
      try{Stdlib[103].call(null, 0);}catch(exn){}
      try{
       var
        e = caml_call2(uncaught_exception_handler[1], exn$1, raw_backtrace),
        a = e;
      }
      catch(exn){
       var
        exn$0 = caml_wrap_exception(exn),
        raw_backtrace$0 = caml_get_exception_raw_backtra(0),
        c = to_string(exn$1);
       caml_call1(Stdlib_Printf[3].call(null, p), c);
       print_raw_backtrace(Stdlib[40], raw_backtrace);
       var d = to_string(exn$0);
       caml_call1(Stdlib_Printf[3].call(null, q), d);
       print_raw_backtrace(Stdlib[40], raw_backtrace$0);
       var a = Stdlib[63].call(null, Stdlib[40]);
      }
      var b = a;
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn !== Stdlib[9]) throw caml_maybe_attach_backtrace(exn, 0);
      var b = Stdlib[53].call(null, cst_Fatal_error_out_of_memory_);
     }
     return b;
    }
    catch(exn){return 0;}
   }
   runtime.caml_register_named_value
    ("Printexc.handle_uncaught_exception", handle_uncaught_exception);
   var
    Stdlib_Printexc =
      [0,
       to_string,
       to_string_default,
       print,
       catch$,
       print_backtrace,
       get_backtrace,
       runtime.caml_record_backtrace,
       runtime.caml_backtrace_status,
       register_printer,
       use_printers,
       raw_backtrace_entries,
       caml_get_exception_raw_backtra,
       print_raw_backtrace,
       raw_backtrace_to_string,
       default_uncaught_exception_han,
       set_uncaught_exception_handler,
       backtrace_slots,
       backtrace_slots_of_raw_entry,
       [0,
        backtrace_slot_is_raise,
        backtrace_slot_is_inline,
        backtrace_slot_location,
        backtrace_slot_defname,
        format_backtrace_slot],
       raw_backtrace_length,
       runtime.caml_raw_backtrace_slot,
       runtime.caml_convert_raw_backtrace_slot,
       runtime.caml_raw_backtrace_next_slot,
       exn_slot_id,
       exn_slot_name,
       string_of_extension_constructo];
   runtime.caml_register_global(43, Stdlib_Printexc, "Stdlib__Printexc");
   return;
  }
  (globalThis));

//# 16992 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Fun:[F(2)*,F(3),F(3),F(2),F(2),N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_restore_raw_backtrace = runtime.caml_restore_raw_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib = global_data.Stdlib;
   function const$(c, param){return c;}
   function compose(f, g, x){return caml_call1(f, caml_call1(g, x));}
   function flip(f, x, y){return caml_call2(f, y, x);}
   function negate(p, v){return 1 - caml_call1(p, v);}
   var
    Finally_raised =
      [248, "Stdlib.Fun.Finally_raised", runtime.caml_fresh_oo_id(0)],
    cst_Fun_Finally_raised = "Fun.Finally_raised: ";
   Stdlib_Printexc[9].call
    (null,
     function(param){
      var tag = param[1];
      if(tag !== Finally_raised) return 0;
      var exn = param[2], a = Stdlib_Printexc[1].call(null, exn);
      return [0, Stdlib[28].call(null, cst_Fun_Finally_raised, a)];
     });
   var dummy = 0;
   function protect(finally$, work){
    function finally_no_exn(param){
     try{caml_call1(finally$, 0); return;}
     catch(e$0){
      var
       e = caml_wrap_exception(e$0),
       bt = Stdlib_Printexc[12].call(null, 0),
       exn = [0, Finally_raised, e];
      caml_restore_raw_backtrace(exn, bt);
      throw caml_maybe_attach_backtrace(exn, 0);
     }
    }
    try{var result = caml_call1(work, 0);}
    catch(work_exn$0){
     var
      work_exn = caml_wrap_exception(work_exn$0),
      work_bt = Stdlib_Printexc[12].call(null, 0);
     finally_no_exn(0);
     caml_restore_raw_backtrace(work_exn, work_bt);
     throw caml_maybe_attach_backtrace(work_exn, 0);
    }
    finally_no_exn(0);
    return result;
   }
   var
    Stdlib_Fun = [0, const$, compose, flip, negate, protect, Finally_raised];
   runtime.caml_register_global(4, Stdlib_Fun, "Stdlib__Fun");
   return;
  }
  (globalThis));

//# 17256 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__In_channel:[N,F(1),F(1),F(3),F(2),F(2),F(4),F(1),F(1),F(1),F(1),F(1),F(2),F(1),F(1),F(4),F(4),F(4),F(4),F(3),N,N,N,F(2),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_input_bigarray = runtime.caml_ml_input_bigarray,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Fun = global_data.Stdlib__Fun,
    stdin = Stdlib[38],
    open_bin = Stdlib[80],
    open_text = Stdlib[79],
    open_gen = Stdlib[81];
   function with_open(openfun, s, f){
    var ic = caml_call1(openfun, s);
    return Stdlib_Fun[5].call
            (null,
             function(param){return Stdlib[94].call(null, ic);},
             function(param){return caml_call1(f, ic);});
   }
   function with_open_bin(s, f){return with_open(Stdlib[80], s, f);}
   function with_open_text(s, f){return with_open(Stdlib[79], s, f);}
   function with_open_gen(flags, perm, s, f){
    var a = Stdlib[81];
    return with_open(function(b){return a(flags, perm, b);}, s, f);
   }
   var
    seek = Stdlib[96][4],
    pos = Stdlib[96][5],
    length = Stdlib[96][6],
    close = Stdlib[93],
    close_noerr = Stdlib[94];
   function input_char(ic){
    try{var c = Stdlib[82].call(null, ic);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return [0, c];
   }
   function input_byte(ic){
    try{var n = Stdlib[87].call(null, ic);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return [0, n];
   }
   function input_line(ic){
    try{var s = Stdlib[83].call(null, ic);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return [0, s];
   }
   var
    input = Stdlib[84],
    cst_input_bigarray = "input_bigarray",
    a = [0, 0],
    b = [0, 0],
    cst_really_input_bigarray = "really_input_bigarray",
    cst_In_channel_input_all_chann =
      "In_channel.input_all: channel content is larger than maximum string length";
   function input_bigarray(ic, buf, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ba_dim_1(buf) - len | 0) >= ofs)
     return caml_ml_input_bigarray(ic, buf, ofs, len);
    return Stdlib[1].call(null, cst_input_bigarray);
   }
   function really_input(ic, buf, pos, len){
    try{Stdlib[85].call(null, ic, buf, pos, len); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function really_input_bigarray(ic, buf, ofs$1, len$1){
    if(0 <= ofs$1 && 0 <= len$1 && (caml_ba_dim_1(buf) - len$1 | 0) >= ofs$1){
     var ofs = ofs$1, len = len$1;
     for(;;){
      if(0 >= len) return b;
      var r = caml_ml_input_bigarray(ic, buf, ofs, len);
      if(0 === r) return 0;
      var len$0 = len - r | 0, ofs$0 = ofs + r | 0;
      ofs = ofs$0;
      len = len$0;
     }
    }
    return Stdlib[1].call(null, cst_really_input_bigarray);
   }
   function really_input_string(ic, len){
    try{var s = Stdlib[86].call(null, ic, len);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    return [0, s];
   }
   function read_upto(ic, buf, ofs, len){
    var ofs$0 = ofs, len$0 = len;
    for(;;){
     if(0 !== len$0){
      var r = Stdlib[84].call(null, ic, buf, ofs$0, len$0);
      if(0 !== r){
       var len$1 = len$0 - r | 0, ofs$1 = ofs$0 + r | 0;
       ofs$0 = ofs$1;
       len$0 = len$1;
       continue;
      }
     }
     return ofs$0 - ofs | 0;
    }
   }
   function ensure(buf, ofs, n){
    var len = caml_ml_bytes_length(buf);
    if((ofs + n | 0) <= len) return buf;
    var new_len = [0, len];
    for(;;){
     if(new_len[1] >= (ofs + n | 0)) break;
     new_len[1] = (2 * new_len[1] | 0) + 1 | 0;
    }
    var
     new_len$0 = new_len[1],
     new_len$1 =
       new_len$0 <= Stdlib_Sys[12]
        ? new_len$0
        : ofs
          < Stdlib_Sys[12]
          ? Stdlib_Sys[12]
          : Stdlib[2].call(null, cst_In_channel_input_all_chann),
     new_buf = caml_create_bytes(new_len$1);
    Stdlib_Bytes[11].call(null, buf, 0, new_buf, 0, ofs);
    return new_buf;
   }
   function input_all(ic){
    var chunk_size = 65536;
    try{
     var
      a = Stdlib[91].call(null, ic),
      b = Stdlib[92].call(null, ic) - a | 0,
      initial_size = b;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Stdlib[11]) throw caml_maybe_attach_backtrace(exn, 0);
     var initial_size = -1;
    }
    var
     initial_size$0 = 0 <= initial_size ? initial_size : chunk_size,
     initial_size$1 =
       initial_size$0 <= Stdlib_Sys[12] ? initial_size$0 : Stdlib_Sys[12],
     buf = caml_create_bytes(initial_size$1),
     nread = read_upto(ic, buf, 0, initial_size$1);
    if(nread < initial_size$1)
     return Stdlib_Bytes[8].call(null, buf, 0, nread);
    try{var c = Stdlib[82].call(null, ic);}
    catch(exn){
     var exn$0 = caml_wrap_exception(exn);
     if(exn$0 === Stdlib[12]) return Stdlib_Bytes[44].call(null, buf);
     throw caml_maybe_attach_backtrace(exn$0, 0);
    }
    var buf$2 = ensure(buf, nread, 65537);
    runtime.caml_bytes_set(buf$2, nread, c);
    var ofs$1 = nread + 1 | 0, buf$0 = buf$2, ofs = ofs$1;
    for(;;){
     var
      buf$1 = ensure(buf$0, ofs, chunk_size),
      rem = caml_ml_bytes_length(buf$1) - ofs | 0,
      r = read_upto(ic, buf$1, ofs, rem);
     if(r < rem) return Stdlib_Bytes[8].call(null, buf$1, 0, ofs + r | 0);
     var ofs$0 = ofs + rem | 0;
     buf$0 = buf$1;
     ofs = ofs$0;
    }
   }
   function input_lines(ic){
    try{var line = Stdlib[83].call(null, ic);}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[12]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
    var block = [0, line, 24029], dst = block, offset = 1;
    for(;;){
     try{var line$0 = Stdlib[83].call(null, ic);}
     catch(exn){
      var exn$0 = caml_wrap_exception(exn);
      if(exn$0 !== Stdlib[12]) throw caml_maybe_attach_backtrace(exn$0, 0);
      dst[offset + 1] = 0;
      return block;
     }
     var dst$0 = [0, line$0, 24029];
     dst[offset + 1] = dst$0;
     dst = dst$0;
     offset = 1;
    }
   }
   function fold_lines(f, accu$1, ic){
    var accu = accu$1;
    for(;;){
     try{var line = Stdlib[83].call(null, ic);}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn === Stdlib[12]) return accu;
      throw caml_maybe_attach_backtrace(exn, 0);
     }
     var accu$0 = caml_call2(f, accu, line);
     accu = accu$0;
    }
   }
   var
    set_binary_mode = Stdlib[95],
    Stdlib_In_channel =
      [0,
       stdin,
       open_bin,
       open_text,
       open_gen,
       with_open_bin,
       with_open_text,
       with_open_gen,
       close,
       close_noerr,
       input_char,
       input_byte,
       input_line,
       really_input_string,
       input_all,
       input_lines,
       input,
       input_bigarray,
       really_input,
       really_input_bigarray,
       fold_lines,
       seek,
       pos,
       length,
       set_binary_mode,
       runtime.caml_ml_is_binary_mode,
       runtime.caml_sys_isatty];
   runtime.caml_register_global(9, Stdlib_In_channel, "Stdlib__In_channel");
   return;
  }
  (globalThis));

//# 17617 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Digest:[F(2)*,F(2)*,F(1),F(1),F(3),F(3),F(2),F(1),F(2),F(1),F(1),F(1),F(1),N,N,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_Digest_of_hex$1 = "Digest.of_hex",
    cst_Digest_subbytes$1 = "Digest.subbytes",
    cst_Digest_substring$1 = "Digest.substring",
    cst_Digest_to_hex$1 = "Digest.to_hex",
    caml_blake2_bytes = runtime.caml_blake2_bytes,
    caml_blake2_final = runtime.caml_blake2_final,
    caml_blake2_string = runtime.caml_blake2_string,
    caml_blake2_update = runtime.caml_blake2_update,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_md5_bytes = runtime.caml_md5_bytes,
    caml_md5_chan = runtime.caml_md5_chan,
    caml_md5_string = runtime.caml_md5_string,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_In_channel = global_data.Stdlib__In_channel,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    cst_Digest_of_hex = cst_Digest_of_hex$1,
    cst_Digest_BLAKE2_wrong_hash_s = "Digest.BLAKE2: wrong hash size",
    cst_Digest_substring = cst_Digest_substring$1,
    cst_Digest_subbytes = cst_Digest_subbytes$1,
    cst_Digest_to_hex = cst_Digest_to_hex$1,
    cst_Digest_of_hex$0 = cst_Digest_of_hex$1;
   function hex_of_string(d){
    function char_hex(n){
     var a = 10 <= n ? (97 + n | 0) - 10 | 0 : 48 + n | 0;
     return Stdlib_Char[1].call(null, a);
    }
    var
     len = caml_ml_string_length(d),
     result = caml_create_bytes(len * 2 | 0),
     a = len - 1 | 0,
     b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      var x = caml_string_get(d, i);
      caml_bytes_unsafe_set(result, i * 2 | 0, char_hex(x >>> 4 | 0));
      caml_bytes_unsafe_set(result, (i * 2 | 0) + 1 | 0, char_hex(x & 15));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return Stdlib_Bytes[44].call(null, result);
   }
   function string_of_hex(s){
    function digit(c){
     if(65 <= c){
      if(97 <= c){
       if(103 > c) return (c - 97 | 0) + 10 | 0;
      }
      else if(71 > c) return (c - 65 | 0) + 10 | 0;
     }
     else if(9 >= c - 48 >>> 0) return c - 48 | 0;
     return Stdlib[1].call(null, cst_Digest_of_hex);
    }
    return Stdlib_String[2].call
            (null,
             caml_ml_string_length(s) / 2 | 0,
             function(i){
              var
               i$0 = 2 * i | 0,
               a = digit(caml_string_get(s, i$0 + 1 | 0)),
               b = (digit(caml_string_get(s, i$0)) << 4) + a | 0;
              return Stdlib_Char[1].call(null, b);
             });
   }
   function BLAKE2(X){
    var a = X[1] < 1 ? 1 : 0, b = a || (64 < X[1] ? 1 : 0);
    if(b) Stdlib[1].call(null, cst_Digest_BLAKE2_wrong_hash_s);
    var
     hash_length = X[1],
     compare = Stdlib_String[10],
     equal = Stdlib_String[9];
    function string(str){
     return caml_blake2_string
             (hash_length, cst, str, 0, caml_ml_string_length(str));
    }
    function bytes(b){
     return caml_blake2_bytes(hash_length, cst, b, 0, caml_ml_bytes_length(b));
    }
    function substring(str, ofs, len){
     var a = ofs < 0 ? 1 : 0;
     if(a)
      var b = a;
     else
      var
       c = len < 0 ? 1 : 0,
       b = c || ((caml_ml_string_length(str) - len | 0) < ofs ? 1 : 0);
     if(b) Stdlib[1].call(null, cst_Digest_substring);
     return caml_blake2_string(hash_length, cst, str, ofs, len);
    }
    function subbytes(b, ofs, len){
     var a = ofs < 0 ? 1 : 0;
     if(a)
      var c = a;
     else
      var
       d = len < 0 ? 1 : 0,
       c = d || ((caml_ml_bytes_length(b) - len | 0) < ofs ? 1 : 0);
     if(c) Stdlib[1].call(null, cst_Digest_subbytes);
     return caml_blake2_bytes(hash_length, cst, b, ofs, len);
    }
    function channel(ic, toread){
     var
      buf_size = 4096,
      buf = caml_create_bytes(4096),
      ctx = runtime.caml_blake2_create(hash_length, cst);
     if(0 <= toread){
      var toread$0 = toread;
      for(;;){
       if(0 === toread$0) return caml_blake2_final(ctx, hash_length);
       var
        a = Stdlib_Int[10].call(null, buf_size, toread$0),
        n = Stdlib_In_channel[16].call(null, ic, buf, 0, a);
       if(0 === n) throw caml_maybe_attach_backtrace(Stdlib[12], 1);
       caml_blake2_update(ctx, buf, 0, n);
       var toread$1 = toread$0 - n | 0;
       toread$0 = toread$1;
      }
     }
     else
      for(;;){
       var n$0 = Stdlib_In_channel[16].call(null, ic, buf, 0, buf_size);
       if(0 === n$0) return caml_blake2_final(ctx, hash_length);
       caml_blake2_update(ctx, buf, 0, n$0);
      }
    }
    function file(filename){
     return Stdlib_In_channel[5].call
             (null, filename, function(ic){return channel(ic, -1);});
    }
    function output(chan, digest){return Stdlib[66].call(null, chan, digest);}
    function input(chan){return Stdlib[86].call(null, chan, hash_length);}
    function to_hex(d){
     if(caml_ml_string_length(d) !== hash_length)
      Stdlib[1].call(null, cst_Digest_to_hex);
     return hex_of_string(d);
    }
    function of_hex(s){
     if(caml_ml_string_length(s) !== (hash_length * 2 | 0))
      Stdlib[1].call(null, cst_Digest_of_hex$0);
     return string_of_hex(s);
    }
    return [0,
            hash_length,
            compare,
            equal,
            string,
            bytes,
            substring,
            subbytes,
            channel,
            file,
            output,
            input,
            to_hex,
            of_hex];
   }
   var
    BLAKE128 = BLAKE2([0, 16]),
    BLAKE256 = BLAKE2([0, 32]),
    BLAKE512 = BLAKE2([0, 64]),
    compare = Stdlib_String[10],
    equal = Stdlib_String[9],
    cst_Digest_substring$0 = cst_Digest_substring$1,
    cst_Digest_subbytes$0 = cst_Digest_subbytes$1,
    cst_Digest_to_hex$0 = cst_Digest_to_hex$1,
    cst_Digest_from_hex = "Digest.from_hex";
   function string(str){
    return caml_md5_string(str, 0, caml_ml_string_length(str));
   }
   function bytes(b){return caml_md5_bytes(b, 0, caml_ml_bytes_length(b));}
   function substring(str, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_string_length(str) - len | 0) >= ofs)
     return caml_md5_string(str, ofs, len);
    return Stdlib[1].call(null, cst_Digest_substring$0);
   }
   function subbytes(b, ofs, len){
    if(0 <= ofs && 0 <= len && (caml_ml_bytes_length(b) - len | 0) >= ofs)
     return caml_md5_bytes(b, ofs, len);
    return Stdlib[1].call(null, cst_Digest_subbytes$0);
   }
   function file(filename){
    return Stdlib_In_channel[5].call
            (null, filename, function(ic){return caml_md5_chan(ic, -1);});
   }
   function output(chan, digest){return Stdlib[66].call(null, chan, digest);}
   function input(chan){return Stdlib[86].call(null, chan, 16);}
   function to_hex(d){
    if(16 !== caml_ml_string_length(d))
     Stdlib[1].call(null, cst_Digest_to_hex$0);
    return hex_of_string(d);
   }
   function of_hex(s){
    if(32 !== caml_ml_string_length(s))
     Stdlib[1].call(null, cst_Digest_from_hex);
    return string_of_hex(s);
   }
   var
    Stdlib_Digest =
      [0,
       compare,
       equal,
       string,
       bytes,
       substring,
       subbytes,
       caml_md5_chan,
       file,
       output,
       input,
       to_hex,
       of_hex,
       of_hex,
       BLAKE128,
       BLAKE256,
       BLAKE512,
       [0,
        16,
        compare,
        equal,
        string,
        bytes,
        substring,
        subbytes,
        caml_md5_chan,
        file,
        output,
        input,
        to_hex,
        of_hex]];
   runtime.caml_register_global(21, Stdlib_Digest, "Stdlib__Digest");
   return;
  }
  (globalThis));

//# 17871 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Bigarray:[N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1)*,N,N,N,N,N,N,N,F(1),F(1),F(1),F(1),F(2),F(1),F(2),F(3),F(4)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bigarray_Array3_of_array_n$1 =
      "Bigarray.Array3.of_array: non-cubic data",
    caml_array_make = runtime.caml_array_make,
    caml_ba_change_layout = runtime.caml_ba_change_layout,
    caml_ba_create = runtime.caml_ba_create,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_dim_2 = runtime.caml_ba_dim_2,
    caml_ba_kind = runtime.caml_ba_kind,
    caml_ba_num_dims = runtime.caml_ba_num_dims,
    caml_ba_reshape = runtime.caml_ba_reshape,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_ba_set_2 = runtime.caml_ba_set_2,
    caml_ba_set_3 = runtime.caml_ba_set_3,
    caml_ba_set_generic = runtime.caml_ba_set_generic,
    caml_ba_slice = runtime.caml_ba_slice,
    caml_check_bound = runtime.caml_check_bound,
    caml_mul = runtime.caml_mul;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Sys = global_data.Stdlib__Sys;
   function kind_size_in_bytes(param){
    switch(param){
      case 11:
       return 16;
      case 0:
      case 6:
       return 4;
      case 8:
      case 9:
       return Stdlib_Sys[9] / 8 | 0;
      case 1:
      case 7:
      case 10:
       return 8;
      case 2:
      case 3:
      case 12:
       return 1;
      default: return 2;
    }
   }
   var
    cst_Bigarray_Array2_of_array_n =
      "Bigarray.Array2.of_array: non-rectangular data",
    cst_Bigarray_Array3_of_array_n = cst_Bigarray_Array3_of_array_n$1,
    cst_Bigarray_Array3_of_array_n$0 = cst_Bigarray_Array3_of_array_n$1,
    cst_Bigarray_array0_of_genarra = "Bigarray.array0_of_genarray",
    cst_Bigarray_array1_of_genarra = "Bigarray.array1_of_genarray",
    cst_Bigarray_array2_of_genarra = "Bigarray.array2_of_genarray",
    cst_Bigarray_array3_of_genarra = "Bigarray.array3_of_genarray";
   function cloop(arr, idx, f, col, max){
    if(col === idx.length - 1){
     caml_ba_set_generic(arr, idx, caml_call1(f, idx));
     return;
    }
    var a = caml_check_bound(max, col)[col + 1] - 1 | 0, b = 0;
    if(a >= 0){
     var j = b;
     for(;;){
      caml_check_bound(idx, col)[col + 1] = j;
      cloop(arr, idx, f, col + 1 | 0, max);
      var c = j + 1 | 0;
      if(a === j) break;
      j = c;
     }
    }
   }
   function floop(arr, idx, f, col, max){
    if(0 > col){caml_ba_set_generic(arr, idx, caml_call1(f, idx)); return;}
    var a = caml_check_bound(max, col)[col + 1], b = 1;
    if(a >= 1){
     var j = b;
     for(;;){
      caml_check_bound(idx, col)[col + 1] = j;
      floop(arr, idx, f, col - 1 | 0, max);
      var c = j + 1 | 0;
      if(a === j) break;
      j = c;
     }
    }
   }
   function init(kind, layout, dims, f){
    var arr = caml_ba_create(kind, layout, dims), dlen = dims.length - 1;
    return layout
            ? (floop
               (arr, caml_array_make(dlen, 1), f, dlen - 1 | 0, dims),
              arr)
            : (cloop(arr, caml_array_make(dlen, 0), f, 0, dims), arr);
   }
   function dims(a){
    var
     n = caml_ba_num_dims(a),
     d = caml_array_make(n, 0),
     b = n - 1 | 0,
     c = 0;
    if(b >= 0){
     var i = c;
     for(;;){
      var e = runtime.caml_ba_dim(a, i);
      caml_check_bound(d, i)[i + 1] = e;
      var f = i + 1 | 0;
      if(b === i) break;
      i = f;
     }
    }
    return d;
   }
   function size_in_bytes(arr){
    var a = dims(arr), b = Stdlib_Array[18].call(null, caml_mul, 1, a);
    return caml_mul(kind_size_in_bytes(caml_ba_kind(arr)), b);
   }
   function create(kind, layout){return caml_ba_create(kind, layout, [0]);}
   function get(arr){return runtime.caml_ba_get_generic(arr, [0]);}
   function set(arr){
    var a = [0];
    return function(b){return caml_ba_set_generic(arr, a, b);};
   }
   function size_in_bytes$0(arr){
    return kind_size_in_bytes(caml_ba_kind(arr));
   }
   function of_value(kind, layout, v){
    var a = create(kind, layout);
    set(a)(v);
    return a;
   }
   function create$0(kind, layout, dim){
    return caml_ba_create(kind, layout, [0, dim]);
   }
   function size_in_bytes$1(arr){
    var a = caml_ba_dim_1(arr);
    return caml_mul(kind_size_in_bytes(caml_ba_kind(arr)), a);
   }
   function slice(a, n){
    return runtime.caml_ba_layout(a)
            ? caml_ba_slice(a, [0, n])
            : caml_ba_slice(a, [0, n]);
   }
   function init$0(kind, layout, dim, f){
    var arr = create$0(kind, layout, dim);
    if(layout){
     var d = 1;
     if(dim >= 1){
      var i$0 = d;
      for(;;){
       caml_ba_set_1(arr, i$0, caml_call1(f, i$0));
       var e = i$0 + 1 | 0;
       if(dim === i$0) break;
       i$0 = e;
      }
     }
     return arr;
    }
    var a = dim - 1 | 0, b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_ba_set_1(arr, i, caml_call1(f, i));
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return arr;
   }
   function of_array(kind, layout, data){
    var
     ba = create$0(kind, layout, data.length - 1),
     ofs = layout ? 1 : 0,
     a = data.length - 2 | 0,
     b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      caml_ba_set_1(ba, i + ofs | 0, caml_check_bound(data, i)[i + 1]);
      var c = i + 1 | 0;
      if(a === i) break;
      i = c;
     }
    }
    return ba;
   }
   function create$1(kind, layout, dim1, dim2){
    return caml_ba_create(kind, layout, [0, dim1, dim2]);
   }
   function size_in_bytes$2(arr){
    var a = caml_ba_dim_2(arr), b = caml_ba_dim_1(arr);
    return caml_mul(caml_mul(kind_size_in_bytes(caml_ba_kind(arr)), b), a);
   }
   function slice_left(a, n){return caml_ba_slice(a, [0, n]);}
   function slice_right(a, n){return caml_ba_slice(a, [0, n]);}
   function init$1(kind, layout, dim1, dim2, f){
    var arr = create$1(kind, layout, dim1, dim2);
    if(layout){
     var h = 1;
     if(dim2 >= 1){
      var j$0 = h;
      for(;;){
       var k = 1;
       if(dim1 >= 1){
        var i$0 = k;
        for(;;){
         caml_ba_set_2(arr, i$0, j$0, caml_call2(f, i$0, j$0));
         var m = i$0 + 1 | 0;
         if(dim1 === i$0) break;
         i$0 = m;
        }
       }
       var l = j$0 + 1 | 0;
       if(dim2 === j$0) break;
       j$0 = l;
      }
     }
     return arr;
    }
    var a = dim1 - 1 | 0, c = 0;
    if(a >= 0){
     var i = c;
     for(;;){
      var b = dim2 - 1 | 0, d = 0;
      if(b >= 0){
       var j = d;
       for(;;){
        caml_ba_set_2(arr, i, j, caml_call2(f, i, j));
        var g = j + 1 | 0;
        if(b === j) break;
        j = g;
       }
      }
      var e = i + 1 | 0;
      if(a === i) break;
      i = e;
     }
    }
    return arr;
   }
   function of_array$0(kind, layout, data){
    var
     dim1 = data.length - 1,
     dim2 = 0 === dim1 ? 0 : caml_check_bound(data, 0)[1].length - 1,
     ba = create$1(kind, layout, dim1, dim2),
     ofs = layout ? 1 : 0,
     a = dim1 - 1 | 0,
     c = 0;
    if(a >= 0){
     var i = c;
     for(;;){
      var row = caml_check_bound(data, i)[i + 1];
      if(row.length - 1 !== dim2)
       Stdlib[1].call(null, cst_Bigarray_Array2_of_array_n);
      var b = dim2 - 1 | 0, d = 0;
      if(b >= 0){
       var j = d;
       for(;;){
        caml_ba_set_2
         (ba, i + ofs | 0, j + ofs | 0, caml_check_bound(row, j)[j + 1]);
        var f = j + 1 | 0;
        if(b === j) break;
        j = f;
       }
      }
      var e = i + 1 | 0;
      if(a === i) break;
      i = e;
     }
    }
    return ba;
   }
   function create$2(kind, layout, dim1, dim2, dim3){
    return caml_ba_create(kind, layout, [0, dim1, dim2, dim3]);
   }
   function size_in_bytes$3(arr){
    var
     a = runtime.caml_ba_dim_3(arr),
     b = caml_ba_dim_2(arr),
     c = caml_ba_dim_1(arr);
    return caml_mul
            (caml_mul(caml_mul(kind_size_in_bytes(caml_ba_kind(arr)), c), b),
             a);
   }
   function slice_left_1(a, n, m){return caml_ba_slice(a, [0, n, m]);}
   function slice_right_1(a, n, m){return caml_ba_slice(a, [0, n, m]);}
   function slice_left_2(a, n){return caml_ba_slice(a, [0, n]);}
   function slice_right_2(a, n){return caml_ba_slice(a, [0, n]);}
   function init$2(kind, layout, dim1, dim2, dim3, f){
    var arr = create$2(kind, layout, dim1, dim2, dim3);
    if(layout){
     var n = 1;
     if(dim3 >= 1){
      var k$0 = n;
      for(;;){
       var o = 1;
       if(dim2 >= 1){
        var j$0 = o;
        for(;;){
         var q = 1;
         if(dim1 >= 1){
          var i$0 = q;
          for(;;){
           caml_ba_set_3(arr, i$0, j$0, k$0, caml_call3(f, i$0, j$0, k$0));
           var s = i$0 + 1 | 0;
           if(dim1 === i$0) break;
           i$0 = s;
          }
         }
         var r = j$0 + 1 | 0;
         if(dim2 === j$0) break;
         j$0 = r;
        }
       }
       var p = k$0 + 1 | 0;
       if(dim3 === k$0) break;
       k$0 = p;
      }
     }
     return arr;
    }
    var a = dim1 - 1 | 0, d = 0;
    if(a >= 0){
     var i = d;
     for(;;){
      var b = dim2 - 1 | 0, e = 0;
      if(b >= 0){
       var j = e;
       for(;;){
        var c = dim3 - 1 | 0, h = 0;
        if(c >= 0){
         var k = h;
         for(;;){
          caml_ba_set_3(arr, i, j, k, caml_call3(f, i, j, k));
          var m = k + 1 | 0;
          if(c === k) break;
          k = m;
         }
        }
        var l = j + 1 | 0;
        if(b === j) break;
        j = l;
       }
      }
      var g = i + 1 | 0;
      if(a === i) break;
      i = g;
     }
    }
    return arr;
   }
   function of_array$1(kind, layout, data){
    var
     dim1 = data.length - 1,
     dim2 = 0 === dim1 ? 0 : caml_check_bound(data, 0)[1].length - 1,
     dim3 =
       0 === dim2
        ? 0
        : caml_check_bound(caml_check_bound(data, 0)[1], 0)[1].length - 1,
     ba = create$2(kind, layout, dim1, dim2, dim3),
     ofs = layout ? 1 : 0,
     a = dim1 - 1 | 0,
     d = 0;
    if(a >= 0){
     var i = d;
     for(;;){
      var row = caml_check_bound(data, i)[i + 1];
      if(row.length - 1 !== dim2)
       Stdlib[1].call(null, cst_Bigarray_Array3_of_array_n);
      var b = dim2 - 1 | 0, e = 0;
      if(b >= 0){
       var j = e;
       for(;;){
        var col = caml_check_bound(row, j)[j + 1];
        if(col.length - 1 !== dim3)
         Stdlib[1].call(null, cst_Bigarray_Array3_of_array_n$0);
        var c = dim3 - 1 | 0, g = 0;
        if(c >= 0){
         var k = g;
         for(;;){
          caml_ba_set_3
           (ba,
            i + ofs | 0,
            j + ofs | 0,
            k + ofs | 0,
            caml_check_bound(col, k)[k + 1]);
          var l = k + 1 | 0;
          if(c === k) break;
          k = l;
         }
        }
        var h = j + 1 | 0;
        if(b === j) break;
        j = h;
       }
      }
      var f = i + 1 | 0;
      if(a === i) break;
      i = f;
     }
    }
    return ba;
   }
   function array0_of_genarray(a){
    return 0 === caml_ba_num_dims(a)
            ? a
            : Stdlib[1].call(null, cst_Bigarray_array0_of_genarra);
   }
   function array1_of_genarray(a){
    return 1 === caml_ba_num_dims(a)
            ? a
            : Stdlib[1].call(null, cst_Bigarray_array1_of_genarra);
   }
   function array2_of_genarray(a){
    return 2 === caml_ba_num_dims(a)
            ? a
            : Stdlib[1].call(null, cst_Bigarray_array2_of_genarra);
   }
   function array3_of_genarray(a){
    return 3 === caml_ba_num_dims(a)
            ? a
            : Stdlib[1].call(null, cst_Bigarray_array3_of_genarra);
   }
   function reshape_0(a){return caml_ba_reshape(a, [0]);}
   function reshape_1(a, dim1){return caml_ba_reshape(a, [0, dim1]);}
   function reshape_2(a, dim1, dim2){
    return caml_ba_reshape(a, [0, dim1, dim2]);
   }
   function reshape_3(a, dim1, dim2, dim3){
    return caml_ba_reshape(a, [0, dim1, dim2, dim3]);
   }
   var
    Stdlib_Bigarray =
      [0,
       13,
       0,
       1,
       10,
       11,
       2,
       3,
       4,
       5,
       8,
       6,
       7,
       9,
       12,
       kind_size_in_bytes,
       0,
       1,
       [0, init, dims, size_in_bytes],
       [0,
        create,
        of_value,
        caml_ba_change_layout,
        size_in_bytes$0,
        get,
        set,
        of_value],
       [0,
        create$0,
        init$0,
        caml_ba_change_layout,
        size_in_bytes$1,
        slice,
        of_array],
       [0,
        create$1,
        init$1,
        caml_ba_change_layout,
        size_in_bytes$2,
        slice_left,
        slice_right,
        of_array$0],
       [0,
        create$2,
        init$2,
        caml_ba_change_layout,
        size_in_bytes$3,
        slice_left_1,
        slice_right_1,
        slice_left_2,
        slice_right_2,
        of_array$1],
       array0_of_genarray,
       array1_of_genarray,
       array2_of_genarray,
       array3_of_genarray,
       caml_ba_reshape,
       reshape_0,
       reshape_1,
       reshape_2,
       reshape_3];
   runtime.caml_register_global(10, Stdlib_Bigarray, "Stdlib__Bigarray");
   return;
  }
  (globalThis));

//# 18391 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Random:[F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(1),F(2),F(1),F(2),F(1),F(2),F(1),F(1),F(1),F(1),F(1),N,F(1),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_blit = runtime.caml_ba_blit,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int64_add = runtime.caml_int64_add,
    caml_int64_create_lo_mi_hi = runtime.caml_int64_create_lo_mi_hi,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_shift_right_unsigne = runtime.caml_int64_shift_right_unsigned,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_lessequal = runtime.caml_lessequal,
    caml_lessthan = runtime.caml_lessthan,
    caml_lxm_next = runtime.caml_lxm_next,
    caml_mod = runtime.caml_mod,
    caml_notequal = runtime.caml_notequal,
    caml_sys_random_seed = runtime.caml_sys_random_seed;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    serialization_prefix = "lxm1:",
    Stdlib_Domain = global_data.Stdlib__Domain,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Digest = global_data.Stdlib__Digest,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    a = caml_int64_create_lo_mi_hi(1, 0, 0),
    b = caml_int64_create_lo_mi_hi(0, 0, 0),
    c = caml_int64_create_lo_mi_hi(0, 0, 0),
    d = caml_int64_create_lo_mi_hi(2, 0, 0),
    e = caml_int64_create_lo_mi_hi(1, 0, 0);
   function create(param){return caml_call3(Stdlib_Bigarray[20][1], 7, 0, 4);}
   function set(s, i1, i2, i3, i4){
    caml_ba_set_1(s, 0, runtime.caml_int64_or(i1, a));
    caml_ba_set_1(s, 1, i2);
    var i3$0 = caml_notequal(i3, b) ? i3 : e;
    caml_ba_set_1(s, 2, i3$0);
    var i4$0 = caml_notequal(i4, c) ? i4 : d;
    return caml_ba_set_1(s, 3, i4$0);
   }
   function mk(i1, i2, i3, i4){
    var s = create(0);
    set(s, i1, i2, i3, i4);
    return s;
   }
   var
    serialization_prefix_len = 5,
    cst_Random_State_of_binary_str =
      "Random.State.of_binary_string: expected a format compatible with OCaml ";
   function to_binary_string(s){
    var buf = caml_create_bytes(37);
    Stdlib_Bytes[12].call
     (null, serialization_prefix, 0, buf, 0, serialization_prefix_len);
    var i = 0;
    for(;;){
     var a = runtime.caml_ba_get_1(s, i);
     Stdlib_Bytes[86].call(null, buf, 5 + (i * 8 | 0) | 0, a);
     var b = i + 1 | 0;
     if(3 === i) return Stdlib_Bytes[44].call(null, buf);
     i = b;
    }
   }
   function of_binary_string(buf){
    var
     a = runtime.caml_ml_string_length(buf) !== 37 ? 1 : 0,
     b = a || 1 - Stdlib_String[11].call(null, serialization_prefix, buf);
    if(b){
     var
      c =
        Stdlib[28].call(null, cst_Random_State_of_binary_str, Stdlib_Sys[46]);
     Stdlib[2].call(null, c);
    }
    var
     i1 = Stdlib_String[64].call(null, buf, 5),
     i2 = Stdlib_String[64].call(null, buf, 13),
     i3 = Stdlib_String[64].call(null, buf, 21),
     i4 = Stdlib_String[64].call(null, buf, 29);
    return mk(i1, i2, i3, i4);
   }
   function copy(src){
    var dst = create(0);
    caml_ba_blit(src, dst);
    return dst;
   }
   function reinit(s, seed){
    var
     n = seed.length - 1,
     b = caml_create_bytes((n * 8 | 0) + 1 | 0),
     a = n - 1 | 0,
     c = 0;
    if(a >= 0){
     var i = c;
     for(;;){
      var g = caml_int64_of_int32(runtime.caml_check_bound(seed, i)[i + 1]);
      Stdlib_Bytes[86].call(null, b, i * 8 | 0, g);
      var h = i + 1 | 0;
      if(a === i) break;
      i = h;
     }
    }
    caml_bytes_set(b, n * 8 | 0, 1);
    var d1 = Stdlib_Digest[4].call(null, b);
    caml_bytes_set(b, n * 8 | 0, 2);
    var
     d2 = Stdlib_Digest[4].call(null, b),
     d = Stdlib_String[64].call(null, d2, 8),
     e = Stdlib_String[64].call(null, d2, 0),
     f = Stdlib_String[64].call(null, d1, 8);
    return set(s, Stdlib_String[64].call(null, d1, 0), f, e, d);
   }
   function make(seed){var s = create(0); reinit(s, seed); return s;}
   function make_self_init(param){return make(caml_sys_random_seed(0));}
   var
    max_int31 = 1073741823,
    max_int32 = 2147483647,
    cst_Random_int = "Random.int",
    cst_Random_full_int = "Random.full_int",
    cst_Random_int_in_range = "Random.int_in_range",
    cst_Random_int32 = "Random.int32",
    cst_Random_int32_in_range = "Random.int32_in_range";
   function bits(s){
    return caml_int64_to_int32(caml_lxm_next(s)) & 1073741823;
   }
   function int_aux(s, n, mask){
    for(;;){
     var r = caml_int64_to_int32(caml_lxm_next(s)) & mask, v = caml_mod(r, n);
     if(((mask - n | 0) + 1 | 0) >= (r - v | 0)) return v;
    }
   }
   function int(s, bound){
    if(1073741823 >= bound && 0 < bound) return int_aux(s, bound, max_int31);
    return Stdlib[1].call(null, cst_Random_int);
   }
   function full_int(s, bound){
    if(0 >= bound) return Stdlib[1].call(null, cst_Random_full_int);
    var
     a =
       bound <= 1073741823
        ? max_int31
        : bound <= 2147483647 ? max_int32 : Stdlib[19];
    return int_aux(s, bound, a);
   }
   function int_in_range_aux(s, min, max, mask, nbits){
    var span = (max - min | 0) + 1 | 0;
    if(span <= mask && 0 < span) return min + int_aux(s, span, mask) | 0;
    for(;;){
     var
      drop = Stdlib_Sys[10] - nbits | 0,
      r = caml_int64_to_int32(caml_lxm_next(s)) << drop >> drop;
     if(r >= min && max >= r) return r;
    }
   }
   function int_in_range(s, min, max){
    if(max < min) Stdlib[1].call(null, cst_Random_int_in_range);
    if(-1073741824 <= min && max <= 1073741823)
     return int_in_range_aux(s, min, max, max_int31, 31);
    if(-2147483648 <= min && max <= 2147483647)
     return int_in_range_aux(s, min, max, max_int32, 32);
    return int_in_range_aux(s, min, max, Stdlib[19], Stdlib_Sys[10]);
   }
   function bits32(s){return caml_int64_to_int32(caml_lxm_next(s));}
   function int32aux(s, n){
    for(;;){
     var r = bits32(s) >>> 1 | 0, v = caml_mod(r, n);
     if(! caml_greaterthan(r - v | 0, (Stdlib_Int32[9] - n | 0) + 1 | 0))
      return v;
    }
   }
   function int32(s, bound){
    return caml_lessequal(bound, 0)
            ? Stdlib[1].call(null, cst_Random_int32)
            : int32aux(s, bound);
   }
   function int32_in_range(s, min, max){
    if(caml_greaterthan(min, max))
     return Stdlib[1].call(null, cst_Random_int32_in_range);
    var span = Stdlib_Int32[6].call(null, max - min | 0);
    if(! caml_lessequal(span, Stdlib_Int32[1]))
     return min + int32aux(s, span) | 0;
    for(;;){
     var r = caml_int64_to_int32(caml_lxm_next(s));
     if(! caml_lessthan(r, min) && ! caml_greaterthan(r, max)) return r;
    }
   }
   var
    bits64 = caml_lxm_next,
    f = caml_int64_create_lo_mi_hi(1, 0, 0),
    g = caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_Random_int64 = "Random.int64",
    cst_Random_int64_in_range = "Random.int64_in_range";
   function int64aux(s, n){
    for(;;){
     var
      r = caml_int64_shift_right_unsigne(caml_lxm_next(s), 1),
      v = runtime.caml_int64_mod(r, n);
     if
      (!
       caml_greaterthan
        (caml_int64_sub(r, v),
         caml_int64_add(caml_int64_sub(Stdlib_Int64[9], n), f)))
      return v;
    }
   }
   function int64(s, bound){
    return caml_lessequal(bound, g)
            ? Stdlib[1].call(null, cst_Random_int64)
            : int64aux(s, bound);
   }
   function int64_in_range(s, min, max){
    if(caml_greaterthan(min, max))
     return Stdlib[1].call(null, cst_Random_int64_in_range);
    var span = Stdlib_Int64[6].call(null, caml_int64_sub(max, min));
    if(! caml_lessequal(span, Stdlib_Int64[1]))
     return caml_int64_add(min, int64aux(s, span));
    for(;;){
     var r = caml_lxm_next(s);
     if(! caml_lessthan(r, min) && ! caml_greaterthan(r, max)) return r;
    }
   }
   var
    j = caml_int64_create_lo_mi_hi(14371852, 15349651, 22696),
    k = caml_int64_create_lo_mi_hi(12230193, 11438743, 35013),
    l = caml_int64_create_lo_mi_hi(1424933, 15549263, 2083),
    m = caml_int64_create_lo_mi_hi(9492471, 4696708, 43520),
    h = caml_int64_create_lo_mi_hi(0, 0, 0),
    i = caml_int64_create_lo_mi_hi(0, 0, 0),
    nativebits =
      32 === Stdlib_Nativeint[9]
       ? function(s){return bits32(s);}
       : function(s){return caml_int64_to_int32(caml_lxm_next(s));},
    nativeint =
      32 === Stdlib_Nativeint[9]
       ? function(s, bound){return int32(s, bound);}
       : function
        (s, bound){
         return caml_int64_to_int32(int64(s, caml_int64_of_int32(bound)));
        },
    nativeint_in_range =
      32 === Stdlib_Nativeint[9]
       ? function(s, min, max){return int32_in_range(s, min, max);}
       : function
        (s, min, max){
         return caml_int64_to_int32
                 (int64_in_range
                   (s, caml_int64_of_int32(min), caml_int64_of_int32(max)));
        };
   function float(s, bound){
    for(;;){
     var b = caml_lxm_next(s), n = caml_int64_shift_right_unsigne(b, 11);
     if(caml_notequal(n, h))
      return runtime.caml_int64_to_float(n) * 1.1102230246251565e-16 * bound;
    }
   }
   function bool(s){return caml_lessthan(caml_lxm_next(s), i);}
   function split(s){
    var
     i1 = caml_lxm_next(s),
     i2 = caml_lxm_next(s),
     i3 = caml_lxm_next(s),
     i4 = caml_lxm_next(s);
    return mk(i1, i2, i3, i4);
   }
   function mk_default(param){return mk(m, l, k, j);}
   var random_key = caml_call2(Stdlib_Domain[11][1], [0, split], mk_default);
   function bits$0(param){
    return bits(caml_call1(Stdlib_Domain[11][2], random_key));
   }
   function int$0(bound){
    return int(caml_call1(Stdlib_Domain[11][2], random_key), bound);
   }
   function full_int$0(bound){
    return full_int(caml_call1(Stdlib_Domain[11][2], random_key), bound);
   }
   function int_in_range$0(min, max){
    return int_in_range
            (caml_call1(Stdlib_Domain[11][2], random_key), min, max);
   }
   function int32$0(bound){
    return int32(caml_call1(Stdlib_Domain[11][2], random_key), bound);
   }
   function int32_in_range$0(min, max){
    return int32_in_range
            (caml_call1(Stdlib_Domain[11][2], random_key), min, max);
   }
   function nativeint$0(bound){
    return nativeint(caml_call1(Stdlib_Domain[11][2], random_key), bound);
   }
   function nativeint_in_range$0(min, max){
    return nativeint_in_range
            (caml_call1(Stdlib_Domain[11][2], random_key), min, max);
   }
   function int64$0(bound){
    return int64(caml_call1(Stdlib_Domain[11][2], random_key), bound);
   }
   function int64_in_range$0(min, max){
    return int64_in_range
            (caml_call1(Stdlib_Domain[11][2], random_key), min, max);
   }
   function float$0(scale){
    return float(caml_call1(Stdlib_Domain[11][2], random_key), scale);
   }
   function bool$0(param){
    return bool(caml_call1(Stdlib_Domain[11][2], random_key));
   }
   function bits32$0(param){
    return bits32(caml_call1(Stdlib_Domain[11][2], random_key));
   }
   function bits64$0(param){
    var s = caml_call1(Stdlib_Domain[11][2], random_key);
    return caml_lxm_next(s);
   }
   function nativebits$0(param){
    return nativebits(caml_call1(Stdlib_Domain[11][2], random_key));
   }
   function full_init(seed){
    return reinit(caml_call1(Stdlib_Domain[11][2], random_key), seed);
   }
   function init(seed){return full_init([0, seed]);}
   function self_init(param){return full_init(caml_sys_random_seed(0));}
   function split$0(param){
    return split(caml_call1(Stdlib_Domain[11][2], random_key));
   }
   function get_state(param){
    return copy(caml_call1(Stdlib_Domain[11][2], random_key));
   }
   function set_state(src){
    var dst = caml_call1(Stdlib_Domain[11][2], random_key);
    return caml_ba_blit(src, dst);
   }
   var
    Stdlib_Random =
      [0,
       init,
       full_init,
       self_init,
       bits$0,
       int$0,
       full_int$0,
       int_in_range$0,
       int32$0,
       int32_in_range$0,
       nativeint$0,
       nativeint_in_range$0,
       int64$0,
       int64_in_range$0,
       float$0,
       bool$0,
       bits32$0,
       bits64$0,
       nativebits$0,
       [0,
        make,
        make_self_init,
        copy,
        bits,
        int,
        full_int,
        int_in_range,
        int32,
        int32_in_range,
        nativeint,
        nativeint_in_range,
        int64,
        int64_in_range,
        float,
        bool,
        bits32,
        bits64,
        nativebits,
        split,
        to_binary_string,
        of_binary_string],
       get_state,
       set_state,
       split$0];
   runtime.caml_register_global(35, Stdlib_Random, "Stdlib__Random");
   return;
  }
  (globalThis));

//# 23473 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: Stdlib__Callback:[F(2),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_register_named_value = runtime.caml_register_named_value,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Obj = global_data.Stdlib__Obj,
    register = caml_register_named_value;
   function register_exception(name, exn){
    var
     a = Stdlib_Obj[10],
     slot = runtime.caml_obj_tag(exn) === a ? exn : exn[1];
    return caml_register_named_value(name, slot);
   }
   var Stdlib_Callback = [0, register, register_exception];
   runtime.caml_register_global(1, Stdlib_Callback, "Stdlib__Callback");
   return;
  }
  (globalThis));

//# 23497 "../../.js/default/stdlib/stdlib.cma.js"
//# shape: CamlinternalOO:[F(1),F(1),F(2),F(3),F(2),F(2),F(2),F(2),F(2),F(3),F(2),F(4),F(1),F(2),N,F(1),F(1),F(6),F(2),F(3),F(1)*,F(1),F(1),F(2),F(2),F(3),F(2),F(2),N,F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_camlinternalOO_ml = "camlinternalOO.ml",
    caml_array_make = runtime.caml_array_make,
    caml_check_bound = runtime.caml_check_bound,
    caml_div = runtime.caml_div,
    caml_get_public_method = runtime.caml_get_public_method,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_block = runtime.caml_obj_block,
    caml_set_oo_id = runtime.caml_set_oo_id,
    caml_string_compare = runtime.caml_string_compare,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Map = global_data.Stdlib__Map;
   function copy(o){
    var o$0 = runtime.caml_obj_dup(o);
    return caml_set_oo_id(o$0);
   }
   var params = [0, 1, 1, 1, 3, 16];
   function public_method_label(s){
    var accu = [0, 0], a = runtime.caml_ml_string_length(s) - 1 | 0, b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      var c = runtime.caml_string_get(s, i);
      accu[1] = (223 * accu[1] | 0) + c | 0;
      var d = i + 1 | 0;
      if(a === i) break;
      i = d;
     }
    }
    accu[1] = accu[1] & 2147483647;
    var tag = 1073741823 < accu[1] ? accu[1] + 2147483648 | 0 : accu[1];
    return tag;
   }
   var
    compare = caml_string_compare,
    Vars = Stdlib_Map[1].call(null, [0, compare]),
    compare$0 = caml_string_compare,
    Meths = Stdlib_Map[1].call(null, [0, compare$0]),
    compare$1 = runtime.caml_int_compare,
    Labs = Stdlib_Map[1].call(null, [0, compare$1]),
    dummy_table = [0, 0, [0, 0], Meths[1], Labs[1], 0, 0, Vars[1], 0],
    table_count = [0, 0],
    dummy_met = caml_obj_block(0, 0),
    initial_object_size = 2;
   function fit_size(n){
    return 2 < n ? fit_size((n + 1 | 0) / 2 | 0) * 2 | 0 : n;
   }
   function new_table(pub_labels){
    table_count[1]++;
    var
     len = pub_labels.length - 1,
     methods = caml_array_make((len * 2 | 0) + 2 | 0, dummy_met);
    caml_check_bound(methods, 0)[1] = len;
    var
     c = Stdlib_Sys[9],
     d = (runtime.caml_mul(fit_size(len), c) / 8 | 0) - 1 | 0;
    caml_check_bound(methods, 1)[2] = d;
    var a = len - 1 | 0, e = 0;
    if(a >= 0){
     var i = e;
     for(;;){
      var b = (i * 2 | 0) + 3 | 0, f = caml_check_bound(pub_labels, i)[i + 1];
      caml_check_bound(methods, b)[b + 1] = f;
      var g = i + 1 | 0;
      if(a === i) break;
      i = g;
     }
    }
    return [0,
            initial_object_size,
            methods,
            Meths[1],
            Labs[1],
            0,
            0,
            Vars[1],
            0];
   }
   function resize(array, new_size){
    var old_size = array[2].length - 1, a = old_size < new_size ? 1 : 0;
    if(a){
     var new_buck = caml_array_make(new_size, dummy_met);
     Stdlib_Array[9].call(null, array[2], 0, new_buck, 0, old_size);
     array[2] = new_buck;
     var b = 0;
    }
    else
     var b = a;
    return b;
   }
   var
    method_count = [0, 0],
    inst_var_count = [0, 0],
    a = [0, cst_camlinternalOO_ml, 279, 50],
    b = [0, cst_camlinternalOO_ml, 407, 13],
    c = [0, cst_camlinternalOO_ml, 410, 13],
    d = [0, cst_camlinternalOO_ml, 413, 13],
    e = [0, cst_camlinternalOO_ml, 416, 13],
    f = [0, cst_camlinternalOO_ml, 419, 13],
    g = [0, cst_camlinternalOO_ml, 437, 17];
   function new_method(table){
    var index = table[2].length - 1;
    resize(table, index + 1 | 0);
    return index;
   }
   function get_method_label(table, name){
    try{var a = caml_call2(Meths[17], name, table[3]); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
     var label = new_method(table);
     table[3] = caml_call3(Meths[2], name, label, table[3]);
     table[4] = caml_call3(Labs[2], label, 1, table[4]);
     return label;
    }
   }
   function get_method_labels(table, names){
    return Stdlib_Array[14].call
            (null, function(a){return get_method_label(table, a);}, names);
   }
   function set_method(table, label, element){
    method_count[1]++;
    return caml_call2(Labs[17], label, table[4])
            ? (resize
               (table, label + 1 | 0),
              caml_check_bound(table[2], label)[label + 1] = element,
              0)
            : (table[6] = [0, [0, label, element], table[6]], 0);
   }
   function get_method(table, label){
    try{var a = Stdlib_List[53].call(null, label, table[6]); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8])
      return caml_check_bound(table[2], label)[label + 1];
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function to_list(arr){
    return 0 === arr ? 0 : Stdlib_Array[10].call(null, arr);
   }
   function narrow(table, vars, virt_meths, concr_meths){
    var
     vars$0 = to_list(vars),
     virt_meths$0 = to_list(virt_meths),
     concr_meths$0 = to_list(concr_meths),
     virt_meth_labs =
       Stdlib_List[20].call
        (null, function(a){return get_method_label(table, a);}, virt_meths$0),
     concr_meth_labs =
       Stdlib_List[20].call
        (null, function(a){return get_method_label(table, a);}, concr_meths$0);
    table[5] =
     [0,
      [0, table[3], table[4], table[6], table[7], virt_meth_labs, vars$0],
      table[5]];
    table[7] =
     caml_call3
      (Vars[24],
       function(lab, info, tvars){
        return Stdlib_List[37].call(null, lab, vars$0)
                ? caml_call3(Vars[2], lab, info, tvars)
                : tvars;
       },
       table[7],
       Vars[1]);
    var by_name = [0, Meths[1]], by_label = [0, Labs[1]];
    Stdlib_List[28].call
     (null,
      function(met, label){
       by_name[1] = caml_call3(Meths[2], met, label, by_name[1]);
       var b = by_label[1];
       try{var c = caml_call2(Labs[17], label, table[4]), a = c;}
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
        var a = 1;
       }
       by_label[1] = caml_call3(Labs[2], label, a, b);
       return 0;
      },
      concr_meths$0,
      concr_meth_labs);
    Stdlib_List[28].call
     (null,
      function(met, label){
       by_name[1] = caml_call3(Meths[2], met, label, by_name[1]);
       by_label[1] = caml_call3(Labs[2], label, 0, by_label[1]);
       return 0;
      },
      virt_meths$0,
      virt_meth_labs);
    table[3] = by_name[1];
    table[4] = by_label[1];
    table[6] =
     Stdlib_List[27].call
      (null,
       function(met, hm){
        var lab = met[1];
        return Stdlib_List[37].call(null, lab, virt_meth_labs)
                ? hm
                : [0, met, hm];
       },
       table[6],
       0);
    return 0;
   }
   function widen(table){
    var
     match = Stdlib_List[6].call(null, table[5]),
     vars = match[6],
     virt_meths = match[5],
     saved_vars = match[4],
     saved_hidden_meths = match[3],
     by_label = match[2],
     by_name = match[1];
    table[5] = Stdlib_List[7].call(null, table[5]);
    table[7] =
     Stdlib_List[26].call
      (null,
       function(s, v){
        var a = caml_call2(Vars[17], v, table[7]);
        return caml_call3(Vars[2], v, a, s);
       },
       saved_vars,
       vars);
    table[3] = by_name;
    table[4] = by_label;
    table[6] =
     Stdlib_List[27].call
      (null,
       function(met, hm){
        var lab = met[1];
        return Stdlib_List[37].call(null, lab, virt_meths) ? hm : [0, met, hm];
       },
       table[6],
       saved_hidden_meths);
    return 0;
   }
   function new_variable(table, name){
    try{var a = caml_call2(Vars[17], name, table[7]); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
     var index = table[1];
     table[1] = index + 1 | 0;
     if(name !== "") table[7] = caml_call3(Vars[2], name, index, table[7]);
     return index;
    }
   }
   function to_array(arr){return runtime.caml_equal(arr, 0) ? [0] : arr;}
   function new_methods_variables(table, meths, vals){
    var
     meths$0 = to_array(meths),
     nmeths = meths$0.length - 1,
     nvals = vals.length - 1,
     res = caml_array_make(nmeths + nvals | 0, 0),
     a = nmeths - 1 | 0,
     d = 0;
    if(a >= 0){
     var i$0 = d;
     for(;;){
      var
       h = get_method_label(table, caml_check_bound(meths$0, i$0)[i$0 + 1]);
      caml_check_bound(res, i$0)[i$0 + 1] = h;
      var j = i$0 + 1 | 0;
      if(a === i$0) break;
      i$0 = j;
     }
    }
    var b = nvals - 1 | 0, e = 0;
    if(b >= 0){
     var i = e;
     for(;;){
      var
       c = i + nmeths | 0,
       f = new_variable(table, caml_check_bound(vals, i)[i + 1]);
      caml_check_bound(res, c)[c + 1] = f;
      var g = i + 1 | 0;
      if(b === i) break;
      i = g;
     }
    }
    return res;
   }
   function get_variable(table, name){
    try{var b = caml_call2(Vars[17], name, table[7]); return b;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8])
      throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function get_variables(table, names){
    return Stdlib_Array[14].call
            (null, function(a){return get_variable(table, a);}, names);
   }
   function add_initializer(table, f){table[8] = [0, f, table[8]]; return 0;}
   function create_table(public_methods){
    if(0 === public_methods) return new_table([0]);
    var
     tags = Stdlib_Array[14].call(null, public_method_label, public_methods),
     table = new_table(tags);
    Stdlib_Array[13].call
     (null,
      function(i, met){
       var lab = (i * 2 | 0) + 2 | 0;
       table[3] = caml_call3(Meths[2], met, lab, table[3]);
       table[4] = caml_call3(Labs[2], lab, 1, table[4]);
       return 0;
      },
      public_methods);
    return table;
   }
   function init_class(table){
    inst_var_count[1] = (inst_var_count[1] + table[1] | 0) - 1 | 0;
    table[8] = Stdlib_List[10].call(null, table[8]);
    var a = Stdlib_Sys[9];
    return resize
            (table,
             3 + caml_div(caml_check_bound(table[2], 1)[2] * 16 | 0, a) | 0);
   }
   function inherits(cla, vals, virt_meths, concr_meths, param, top){
    var env = param[3], super$ = param[2];
    narrow(cla, vals, virt_meths, concr_meths);
    var init = top ? caml_call2(super$, cla, env) : caml_call1(super$, cla);
    widen(cla);
    var
     a = to_array(concr_meths),
     b =
       [0,
        Stdlib_Array[14].call
         (null,
          function(nm){return get_method(cla, get_method_label(cla, nm));},
          a),
        0],
     c = to_array(vals),
     d =
       [0,
        [0, init],
        [0,
         Stdlib_Array[14].call
          (null, function(a){return get_variable(cla, a);}, c),
         b]];
    return Stdlib_Array[5].call(null, d);
   }
   function make_class(pub_meths, class_init){
    var
     table = create_table(pub_meths),
     env_init = caml_call1(class_init, table);
    init_class(table);
    return [0, caml_call1(env_init, 0), class_init, 0];
   }
   function make_class_store(pub_meths, class_init, init_table){
    var
     table = create_table(pub_meths),
     env_init = caml_call1(class_init, table);
    init_class(table);
    init_table[2] = class_init;
    init_table[1] = env_init;
    return 0;
   }
   function dummy_class(loc){
    function undef(param){
     throw caml_maybe_attach_backtrace([0, Stdlib[15], loc], 1);
    }
    return [0, undef, undef, 0];
   }
   function create_object(table){
    var obj = caml_obj_block(Stdlib_Obj[10], table[1]);
    obj[1] = table[2];
    return caml_set_oo_id(obj);
   }
   function create_object_opt(obj_0, table){
    if(obj_0) return obj_0;
    var obj = caml_obj_block(Stdlib_Obj[10], table[1]);
    obj[1] = table[2];
    return caml_set_oo_id(obj);
   }
   function iter_f(obj, param$0){
    var param = param$0;
    for(;;){
     if(! param) return 0;
     var l = param[2], f = param[1];
     caml_call1(f, obj);
     param = l;
    }
   }
   function run_initializers(obj, table){
    var inits = table[8], a = 0 !== inits ? 1 : 0;
    return a ? iter_f(obj, inits) : a;
   }
   function run_initializers_opt(obj_0, obj, table){
    if(obj_0) return obj;
    var inits = table[8];
    if(0 !== inits) iter_f(obj, inits);
    return obj;
   }
   function create_object_and_run_initiali(obj_0, table){
    if(obj_0) return obj_0;
    var obj = create_object(table);
    run_initializers(obj, table);
    return obj;
   }
   function get_data(param){
    if(param) return param[2];
    throw caml_maybe_attach_backtrace([0, Assert_failure, e], 1);
   }
   function build_path(n, keys, tables){
    var res = [0, 0, 0, 0], r = [0, res], a = 0;
    if(n >= 0){
     var i = a;
     for(;;){
      var c = r[1];
      r[1] = [0, caml_check_bound(keys, i)[i + 1], c, 0];
      var d = i + 1 | 0;
      if(n === i) break;
      i = d;
     }
    }
    var v = r[1];
    if(! tables) throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
    tables[2] = v;
    return res;
   }
   function lookup_tables(root, keys){
    var root_data = get_data(root);
    if(! root_data) return build_path(keys.length - 2 | 0, keys, root);
    var i$1 = keys.length - 2 | 0, i = i$1, tables$0 = root_data;
    for(;;){
     if(0 > i) return tables$0;
     var key = caml_check_bound(keys, i)[i + 1], tables$1 = tables$0;
     for(;;){
      if(! tables$1)
       throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
      if(tables$1[1] === key){
       var tables_data = get_data(tables$1);
       if(! tables_data)
        throw caml_maybe_attach_backtrace([0, Assert_failure, g], 1);
       var i$0 = i - 1 | 0;
       i = i$0;
       tables$0 = tables_data;
       break;
      }
      if(! tables$1)
       throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
      var tables = tables$1[3];
      if(! tables){
       var next = [0, key, 0, 0];
       if(! tables$1)
        throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
       tables$1[3] = next;
       return build_path(i - 1 | 0, keys, next);
      }
      tables$1 = tables;
     }
    }
   }
   function new_cache(table){
    var n = new_method(table);
    if(0 === (n % 2 | 0))
     var n$0 = n;
    else
     var
      a = Stdlib_Sys[9],
      n$0 =
        (2 + caml_div(caml_check_bound(table[2], 1)[2] * 16 | 0, a) | 0) < n
         ? n
         : new_method(table);
    caml_check_bound(table[2], n$0)[n$0 + 1] = 0;
    return n$0;
   }
   function method_impl(table, i, arr){
    function next(param){
     i[1]++;
     var a = i[1];
     return caml_check_bound(arr, a)[a + 1];
    }
    var clo = next(0);
    if(typeof clo === "number")
     switch(clo){
       case 0:
        var x = next(0); return function(obj){return x;};
       case 1:
        var n = next(0); return function(obj){return obj[n + 1];};
       case 2:
        var e = next(0), n$0 = next(0);
        return function(obj){return obj[e + 1][n$0 + 1];};
       case 3:
        var n$1 = next(0);
        return function(obj){return caml_call1(obj[1][n$1 + 1], obj);};
       case 4:
        var n$2 = next(0);
        return function(obj, x){obj[n$2 + 1] = x; return 0;};
       case 5:
        var f = next(0), x$0 = next(0);
        return function(obj){return caml_call1(f, x$0);};
       case 6:
        var f$0 = next(0), n$3 = next(0);
        return function(obj){return caml_call1(f$0, obj[n$3 + 1]);};
       case 7:
        var f$1 = next(0), e$0 = next(0), n$4 = next(0);
        return function(obj){return caml_call1(f$1, obj[e$0 + 1][n$4 + 1]);};
       case 8:
        var f$2 = next(0), n$5 = next(0);
        return function(obj){
         return caml_call1(f$2, caml_call1(obj[1][n$5 + 1], obj));};
       case 9:
        var f$3 = next(0), x$1 = next(0), y = next(0);
        return function(obj){return caml_call2(f$3, x$1, y);};
       case 10:
        var f$4 = next(0), x$2 = next(0), n$6 = next(0);
        return function(obj){return caml_call2(f$4, x$2, obj[n$6 + 1]);};
       case 11:
        var f$5 = next(0), x$3 = next(0), e$1 = next(0), n$7 = next(0);
        return function(obj){
         return caml_call2(f$5, x$3, obj[e$1 + 1][n$7 + 1]);};
       case 12:
        var f$6 = next(0), x$4 = next(0), n$8 = next(0);
        return function(obj){
         return caml_call2(f$6, x$4, caml_call1(obj[1][n$8 + 1], obj));};
       case 13:
        var f$7 = next(0), n$9 = next(0), x$5 = next(0);
        return function(obj){return caml_call2(f$7, obj[n$9 + 1], x$5);};
       case 14:
        var f$8 = next(0), e$2 = next(0), n$10 = next(0), x$6 = next(0);
        return function(obj){
         return caml_call2(f$8, obj[e$2 + 1][n$10 + 1], x$6);};
       case 15:
        var f$9 = next(0), n$11 = next(0), x$7 = next(0);
        return function(obj){
         return caml_call2(f$9, caml_call1(obj[1][n$11 + 1], obj), x$7);};
       case 16:
        var n$12 = next(0), x$8 = next(0);
        return function(obj){return caml_call2(obj[1][n$12 + 1], obj, x$8);};
       case 17:
        var n$13 = next(0), m = next(0);
        return function(obj){
         return caml_call2(obj[1][n$13 + 1], obj, obj[m + 1]);};
       case 18:
        var n$14 = next(0), e$3 = next(0), m$0 = next(0);
        return function(obj){
         return caml_call2(obj[1][n$14 + 1], obj, obj[e$3 + 1][m$0 + 1]);};
       case 19:
        var n$15 = next(0), m$1 = next(0);
        return function(obj){
         var a = caml_call1(obj[1][m$1 + 1], obj);
         return caml_call2(obj[1][n$15 + 1], obj, a);};
       case 20:
        var m$2 = next(0), x$9 = next(0);
        new_cache(table);
        return function(obj){
         return caml_call1(caml_get_public_method(x$9, m$2), x$9);};
       case 21:
        var m$3 = next(0), n$16 = next(0);
        new_cache(table);
        return function(obj){
         var a = obj[n$16 + 1];
         return caml_call1(caml_get_public_method(a, m$3), a);};
       case 22:
        var m$4 = next(0), e$4 = next(0), n$17 = next(0);
        new_cache(table);
        return function(obj){
         var a = obj[e$4 + 1][n$17 + 1];
         return caml_call1(caml_get_public_method(a, m$4), a);};
       default:
        var m$5 = next(0), n$18 = next(0);
        new_cache(table);
        return function(obj){
         var a = caml_call1(obj[1][n$18 + 1], obj);
         return caml_call1(caml_get_public_method(a, m$5), a);};
     }
    return clo;
   }
   function set_methods(table, methods){
    var len = methods.length - 1, i = [0, 0];
    for(;;){
     if(i[1] >= len) return 0;
     var
      a = i[1],
      label = caml_check_bound(methods, a)[a + 1],
      clo = method_impl(table, i, methods);
     set_method(table, label, clo);
     i[1]++;
    }
   }
   function stats(param){
    return [0, table_count[1], method_count[1], inst_var_count[1]];
   }
   var
    CamlinternalOO =
      [0,
       public_method_label,
       new_method,
       new_variable,
       new_methods_variables,
       get_variable,
       get_variables,
       get_method_label,
       get_method_labels,
       get_method,
       set_method,
       set_methods,
       narrow,
       widen,
       add_initializer,
       dummy_table,
       create_table,
       init_class,
       inherits,
       make_class,
       make_class_store,
       dummy_class,
       copy,
       create_object,
       create_object_opt,
       run_initializers,
       run_initializers_opt,
       create_object_and_run_initiali,
       lookup_tables,
       params,
       stats];
   runtime.caml_register_global(17, CamlinternalOO, "CamlinternalOO");
   return;
  }
  (globalThis));

//# 18 "../../lib/runtime/.jsoo_runtime.objs/jsoo/default/jsoo_runtime.cma.js"
//# shape: Jsoo_runtime__Runtime_version:[N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    s = "6.2.0",
    git_version = "5859d56",
    Jsoo_runtime_Runtime_version = [0, s, git_version];
   runtime.caml_register_global
    (2, Jsoo_runtime_Runtime_version, "Jsoo_runtime__Runtime_version");
   return;
  }
  (globalThis));

//# 35 "../../lib/runtime/.jsoo_runtime.objs/jsoo/default/jsoo_runtime.cma.js"
//# shape: Jsoo_runtime:[[],[[F(1)],N,N],[F(1),F(2),F(1),N],[],[[]],[],[]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Jsoo_runtime_Runtime_version = global_data.Jsoo_runtime__Runtime_version,
    Stdlib_Callback = global_data.Stdlib__Callback,
    Js = [0],
    a = [0, "lib/runtime/jsoo_runtime.ml", 143, 13];
   function effects(param){
    var match = runtime.caml_jsoo_flags_effects(0);
    if(match === "cps") return 3356934;
    if(match === "disabled") return -709493348;
    if(match !== "double-translation")
     throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
    return -766114909;
   }
   var
    Config = [0, effects],
    version = Jsoo_runtime_Runtime_version[1],
    git_version = Jsoo_runtime_Runtime_version[2],
    Sys = [0, Config, version, git_version],
    Exn = [248, "Jsoo_runtime.Error.Exn", runtime.caml_fresh_oo_id(0)];
   Stdlib_Callback[2].call(null, "jsError", [0, Exn, [0]]);
   var
    Error =
      [0,
       runtime.caml_throw_js_exception,
       runtime.caml_exn_with_js_backtrace,
       runtime.caml_js_error_option_of_exception,
       Exn],
    For_compatibility_only = [0],
    Bigstring = [0],
    Typed_array = [0, Bigstring],
    Int64 = [0],
    Effect = [0],
    Jsoo_runtime =
      [0, Js, Sys, Error, For_compatibility_only, Typed_array, Int64, Effect];
   runtime.caml_register_global(9, Jsoo_runtime, "Jsoo_runtime");
   return;
  }
  (globalThis));

//# 19 "../../lib/js_of_ocaml/.js_of_ocaml.objs/jsoo/default/js_of_ocaml.cma.js"
//# shape: Js_of_ocaml__Import:[[],[F(2)*,F(2)*],[F(2),F(2),N,F(1),F(1),F(5),F(2),F(2)*,F(2)*,F(2),F(2),F(3),F(3),F(2),F(3),F(2),F(2),F(2),F(3),F(3),F(2),F(2),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(2),F(3),F(3),F(3),F(3),F(2),F(2),F(2),F(2),F(1)*,F(1)*,F(1),F(2),F(1),F(2),F(1),F(2),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2)*],[F(1),F(1),F(1)*,F(1)*,F(2)*,F(2)*,F(1)*,F(2)*],F(2)*,F(2)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Char = global_data.Stdlib__Char,
    Poly = [0];
   function max(x, y){return y <= x ? x : y;}
   function min(x, y){return x <= y ? x : y;}
   var
    Int_replace_polymorphic_compar = [0, max, min],
    make = Stdlib_String[1],
    init = Stdlib_String[2],
    empty = Stdlib_String[3],
    of_bytes = Stdlib_String[4],
    to_bytes = Stdlib_String[5],
    blit = Stdlib_String[6],
    concat = Stdlib_String[7],
    cat = Stdlib_String[8],
    compare = Stdlib_String[10],
    starts_with = Stdlib_String[11],
    ends_with = Stdlib_String[12],
    contains_from = Stdlib_String[13],
    rcontains_from = Stdlib_String[14],
    contains = Stdlib_String[15],
    sub = Stdlib_String[16],
    split_on_char = Stdlib_String[17],
    map = Stdlib_String[18],
    mapi = Stdlib_String[19],
    fold_left = Stdlib_String[20],
    fold_right = Stdlib_String[21],
    for_all = Stdlib_String[22],
    exists = Stdlib_String[23],
    trim = Stdlib_String[24],
    escaped = Stdlib_String[25],
    uppercase_ascii = Stdlib_String[26],
    lowercase_ascii = Stdlib_String[27],
    capitalize_ascii = Stdlib_String[28],
    uncapitalize_ascii = Stdlib_String[29],
    iter = Stdlib_String[30],
    iteri = Stdlib_String[31],
    index_from = Stdlib_String[32],
    index_from_opt = Stdlib_String[33],
    rindex_from = Stdlib_String[34],
    rindex_from_opt = Stdlib_String[35],
    index = Stdlib_String[36],
    index_opt = Stdlib_String[37],
    rindex = Stdlib_String[38],
    rindex_opt = Stdlib_String[39],
    to_seq = Stdlib_String[40],
    to_seqi = Stdlib_String[41],
    of_seq = Stdlib_String[42],
    get_utf_8_uchar = Stdlib_String[43],
    is_valid_utf_8 = Stdlib_String[44],
    get_utf_16be_uchar = Stdlib_String[45],
    is_valid_utf_16be = Stdlib_String[46],
    get_utf_16le_uchar = Stdlib_String[47],
    is_valid_utf_16le = Stdlib_String[48],
    get_uint8 = Stdlib_String[49],
    get_int8 = Stdlib_String[50],
    get_uint16_ne = Stdlib_String[51],
    get_uint16_be = Stdlib_String[52],
    get_uint16_le = Stdlib_String[53],
    get_int16_ne = Stdlib_String[54],
    get_int16_be = Stdlib_String[55],
    get_int16_le = Stdlib_String[56],
    get_int32_ne = Stdlib_String[57],
    hash = Stdlib_String[58],
    seeded_hash = Stdlib_String[59],
    get_int32_be = Stdlib_String[60],
    get_int32_le = Stdlib_String[61],
    get_int64_ne = Stdlib_String[62],
    get_int64_be = Stdlib_String[63],
    get_int64_le = Stdlib_String[64],
    equal = runtime.caml_string_equal,
    String =
      [0,
       make,
       init,
       empty,
       of_bytes,
       to_bytes,
       blit,
       concat,
       cat,
       compare,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       is_valid_utf_16le,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       hash,
       seeded_hash,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       equal],
    chr = Stdlib_Char[1],
    escaped$0 = Stdlib_Char[2],
    lowercase_ascii$0 = Stdlib_Char[3],
    uppercase_ascii$0 = Stdlib_Char[4],
    compare$0 = Stdlib_Char[5],
    seeded_hash$0 = Stdlib_Char[7],
    hash$0 = Stdlib_Char[8];
   function equal$0(x, y){return x === y ? 1 : 0;}
   var
    Char =
      [0,
       chr,
       escaped$0,
       lowercase_ascii$0,
       uppercase_ascii$0,
       compare$0,
       seeded_hash$0,
       hash$0,
       equal$0],
    Js_of_ocaml_Import =
      [0, Poly, Int_replace_polymorphic_compar, String, Char, max, min];
   runtime.caml_register_global(2, Js_of_ocaml_Import, "Js_of_ocaml__Import");
   return;
  }
  (globalThis));

//# 191 "../../lib/js_of_ocaml/.js_of_ocaml.objs/jsoo/default/js_of_ocaml.cma.js"
//# shape: Js_of_ocaml__Js:[N,F(1)*,N,F(1)*,[N,F(1)*,F(2),F(2),F(1)*,F(2),F(3),F(2),F(1)*,F(1)*],[N,F(1)*,F(2),F(2),F(1)*,F(2),F(3),F(2),F(1)*,F(1)*],N,N,N,N,N,N,N,N,N,N,F(1),N,N,F(2),F(3),F(2),F(2),F(1)*,F(1)*,N,N,N,N,N,N,N,N,N,N,N,N,N,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(3),F(3),F(2),F(1),[N],F(1),F(1),F(2),F(1),N]
(function
  (globalThis){
   "use strict";
   var
    jsoo_exports = typeof module === "object" && module.exports || globalThis,
    runtime = globalThis.jsoo_runtime,
    cst_parseFloat$0 = "parseFloat",
    cst_parseInt$0 = "parseInt",
    caml_js_get = runtime.caml_js_get,
    caml_js_set = runtime.caml_js_set,
    caml_js_wrap_callback = runtime.caml_js_wrap_callback,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Import = global_data.Js_of_ocaml__Import,
    Stdlib = global_data.Stdlib,
    Jsoo_runtime = global_data.Jsoo_runtime,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    global = globalThis,
    Unsafe = [0, global],
    null$ = null,
    undefined$ = undefined;
   function return$(a){return a;}
   function map(x, f){return x == null$ ? null$ : caml_call1(f, x);}
   function bind(x, f){return x == null$ ? null$ : caml_call1(f, x);}
   function test(x){return 1 - (x == null$ ? 1 : 0);}
   function iter(x, f){
    var a = 1 - (x == null$ ? 1 : 0);
    return a ? caml_call1(f, x) : a;
   }
   function case$(x, f, g){
    return x == null$ ? caml_call1(f, 0) : caml_call1(g, x);
   }
   function get(x, f){return x == null$ ? caml_call1(f, 0) : x;}
   function option(x){if(! x) return null$; var x$0 = x[1]; return x$0;}
   function to_option(x){return x == null$ ? 0 : [0, x];}
   var
    Opt =
      [0,
       null$,
       return$,
       map,
       bind,
       test,
       iter,
       case$,
       get,
       option,
       to_option];
   function return$0(a){return a;}
   function map$0(x, f){
    return x === undefined$ ? undefined$ : caml_call1(f, x);
   }
   function bind$0(x, f){
    return x === undefined$ ? undefined$ : caml_call1(f, x);
   }
   function test$0(x){return 1 - (x === undefined$ ? 1 : 0);}
   function iter$0(x, f){
    var a = 1 - (x === undefined$ ? 1 : 0);
    return a ? caml_call1(f, x) : a;
   }
   function case$0(x, f, g){
    return x === undefined$ ? caml_call1(f, 0) : caml_call1(g, x);
   }
   function get$0(x, f){return x === undefined$ ? caml_call1(f, 0) : x;}
   function option$0(x){
    if(! x) return undefined$;
    var x$0 = x[1];
    return x$0;
   }
   function to_option$0(x){return x === undefined$ ? 0 : [0, x];}
   var
    Optdef =
      [0,
       undefined$,
       return$0,
       map$0,
       bind$0,
       test$0,
       iter$0,
       case$0,
       get$0,
       option$0,
       to_option$0];
   function coerce(x, f, g){
    var x$0 = caml_call1(f, x);
    return x$0 == null$ ? caml_call1(g, x) : x$0;
   }
   function coerce_opt(x, f, g){
    var x$0 = bind(x, f);
    return x$0 == null$ ? caml_call1(g, x) : x$0;
   }
   var
    true$ = true,
    false$ = false,
    nfc = "NFC",
    nfd = "NFD",
    nfkc = "NFKC",
    nfkd = "NFKD",
    string_constr = global.String,
    regExp = global.RegExp,
    object_constructor = global.Object;
   function object_keys(t4){return object_constructor.keys(t4);}
   var
    array_constructor = global.Array,
    array_get = caml_js_get,
    array_set = caml_js_set;
   function array_map(f, t6){
    var
     cb =
       caml_js_wrap_callback
        (function(x, idx, param){return caml_call1(f, x);});
    return t6.map(cb);
   }
   function array_mapi(f, t6){
    var
     cb =
       caml_js_wrap_callback
        (function(x, idx, param){return caml_call2(f, idx, x);});
    return t6.map(cb);
   }
   function str_array(a){return a;}
   function match_result(a){return a;}
   var
    date_constr = global.Date,
    math = global.Math,
    error_constr = global.Error,
    include = Jsoo_runtime[3],
    raise = include[1],
    exn_with_js_backtrace = include[2],
    of_exn = include[3],
    Error = include[4];
   function name(t11){return caml_string_of_jsstring(t11.name);}
   function message(t12){return caml_string_of_jsstring(t12.message);}
   function stack(t13){
    var x = t13.stack, a = x == null$ ? null$ : caml_string_of_jsstring(x);
    return to_option(a);
   }
   function to_string(t14){return caml_string_of_jsstring(t14.toString());}
   function raise_js_error(e){return raise(e);}
   function string_of_error(e){return to_string(e);}
   var
    JSON = global.JSON,
    cst_parseInt = cst_parseInt$0,
    cst_parseFloat = cst_parseFloat$0;
   function decodeURI(s){return global.decodeURI(s);}
   function decodeURIComponent(s){return global.decodeURIComponent(s);}
   function encodeURI(s){return global.encodeURI(s);}
   function encodeURIComponent(s){return global.encodeURIComponent(s);}
   function escape(s){return global.escape(s);}
   function unescape(s){return global.unescape(s);}
   function isNaN(i){return global.isNaN(i) | 0;}
   function parseInt(s){
    var s$0 = global.parseInt(s);
    return isNaN(s$0) ? Stdlib[2].call(null, cst_parseInt) : s$0;
   }
   function parseFloat(s){
    var s$0 = global.parseFloat(s);
    return isNaN(s$0) ? Stdlib[2].call(null, cst_parseFloat) : s$0;
   }
   Stdlib_Printexc[9].call
    (null,
     function(e){
      if(e instanceof error_constr) return [0, to_string(e)];
      var tag = e[1];
      if(tag !== Error) return 0;
      var e$0 = e[2];
      return [0, to_string(e$0)];
     });
   var cst_function = "function";
   function export_js(field, x){
    var
     a = caml_string_of_jsstring(typeof x),
     b =
       Js_of_ocaml_Import[3][64].call(null, a, cst_function)
        ? 0 < x.length ? caml_js_wrap_callback(x) : x
        : x;
    return jsoo_exports[field] = b;
   }
   function export$(field, x){
    return export_js(runtime.caml_jsstring_of_string(field), x);
   }
   function export_all(obj){
    var
     keys = object_constructor.keys(obj),
     t26 =
       caml_js_wrap_callback
        (function(key, a, param){return export_js(key, obj[key]);});
    return keys.forEach(t26);
   }
   var
    Js_of_ocaml_Js =
      [0,
       null$,
       function(a){return a;},
       undefined$,
       function(a){return a;},
       Opt,
       Optdef,
       true$,
       false$,
       nfd,
       nfc,
       nfkd,
       nfkc,
       string_constr,
       regExp,
       regExp,
       regExp,
       object_keys,
       array_constructor,
       array_constructor,
       array_get,
       array_set,
       array_map,
       array_mapi,
       str_array,
       match_result,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       date_constr,
       math,
       error_constr,
       [0,
        to_string,
        name,
        message,
        stack,
        raise,
        exn_with_js_backtrace,
        of_exn,
        Error,
        function(a){return a;},
        function(a){return a;}],
       JSON,
       decodeURI,
       decodeURIComponent,
       encodeURI,
       encodeURIComponent,
       escape,
       unescape,
       isNaN,
       parseInt,
       parseFloat,
       coerce,
       coerce_opt,
       export$,
       export_all,
       Unsafe,
       string_of_error,
       raise_js_error,
       exn_with_js_backtrace,
       runtime.caml_js_error_of_exception,
       Error];
   runtime.caml_register_global(42, Js_of_ocaml_Js, "Js_of_ocaml__Js");
   return;
  }
  (globalThis));

//# 469 "../../lib/js_of_ocaml/.js_of_ocaml.objs/jsoo/default/js_of_ocaml.cma.js"
//# shape: Js_of_ocaml__Dom:[[N,N,N,N,N,N,F(2)*,F(2)*,F(2)*],F(3),F(3),F(2),F(2),F(1),F(1),N,N,F(1)*,F(1)*,F(3),F(1),[F(1)*],F(6)->F(1),F(4),F(1),F(1),F(4)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List;
   function list_of_nodeList(nodeList){
    var length = nodeList.length, acc = 0, t2 = 0;
    for(;;){
     if(t2 >= length) return Stdlib_List[10].call(null, acc);
     var a = nodeList.item(t2), match = Js_of_ocaml_Js[5][10].call(null, a);
     if(match){
      var e = match[1], i = t2 + 1 | 0, acc$0 = [0, e, acc];
      acc = acc$0;
      t2 = i;
     }
     else{var i$0 = t2 + 1 | 0; t2 = i$0;}
    }
   }
   function has(t, mask){return (t & mask) === mask ? 1 : 0;}
   function add(x, y){return x | y;}
   var DocumentPosition = [0, 1, 2, 4, 8, 16, 32, has, add, add];
   function appendChild(t3, t4){t3.appendChild(t4); return 0;}
   function removeChild(t5, t6){t5.removeChild(t6); return 0;}
   function replaceChild(t7, t8, t9){t7.replaceChild(t8, t9); return 0;}
   function insertBefore(t10, t11, t12){t10.insertBefore(t11, t12); return 0;}
   function nodeType(t13){
    var match = t13.nodeType;
    if(match)
     switch(match - 1 | 0){
       case 0:
        return [0, t13];
       case 1:
        return [1, t13];
       case 2:
       case 3:
        return [2, t13];
     }
    return [3, t13];
   }
   function cast(t14, t){
    return t14.nodeType === t
            ? Js_of_ocaml_Js[2].call(null, t14)
            : Js_of_ocaml_Js[1];
   }
   function element(e){return cast(e, 1);}
   function text(t15){
    if(3 !== t15.nodeType && 4 !== t15.nodeType) return Js_of_ocaml_Js[1];
    return Js_of_ocaml_Js[2].call(null, t15);
   }
   function attr(e){return cast(e, 2);}
   var no_handler = Js_of_ocaml_Js[1];
   function handler(f){
    return Js_of_ocaml_Js[2].call
            (null,
             runtime.caml_js_wrap_callback_unsafe
              (function(t17){
                var res = caml_call1(f, t17);
                if(1 - (res | 0)) t17.preventDefault();
                return res;
               }));
   }
   function full_handler(f){
    return Js_of_ocaml_Js[2].call
            (null,
             runtime.caml_js_wrap_meth_callback_unsafe
              (function(this$, t18){
                var res = caml_call2(f, this$, t18);
                if(1 - (res | 0)) t18.preventDefault();
                return res;
               }));
   }
   function invoke_handler(f, this$, event){return f.call(this$, event);}
   function eventTarget(t20){
    return Js_of_ocaml_Js[5][8].call
            (null,
             t20.target,
             function(param){
              return Js_of_ocaml_Js[5][8].call
                      (null,
                       t20.srcElement,
                       function(param){
                        throw caml_maybe_attach_backtrace(Stdlib[8], 1);
                       });
             });
   }
   var make = runtime.caml_jsstring_of_string, Event = [0, make];
   function addEventListenerWithOptions(t21, typ, capture, once, passive, t38){
    if(! Js_of_ocaml_Js[6][5].call(null, t21.addEventListener)){
     var
      t25 = "on".concat(typ),
      callback =
        function(e){
         var a = [0, t38, e, [0]];
         return function(b, c){return runtime.caml_js_call(a, b, c);};
        };
     t21.attachEvent(t25, callback);
     return function(param){return t21.detachEvent(t25, callback);};
    }
    var opts = {};
    if(capture){var t30 = capture[1]; opts.capture = t30;}
    if(once){var t32 = once[1]; opts.once = t32;}
    if(passive){var t34 = passive[1]; opts.passive = t34;}
    t21.addEventListener(typ, t38, opts);
    return function(param){return t21.removeEventListener(typ, t38, opts);};
   }
   function addEventListener(e, typ, h, capt){
    return addEventListenerWithOptions(e, typ, [0, capt], 0, 0, h);
   }
   function removeEventListener(id){return caml_call1(id, 0);}
   function preventDefault(t44){return t44.preventDefault();}
   function createCustomEvent(bubbles, cancelable, detail, typ){
    var opts = {};
    if(bubbles){var x = bubbles[1], t45 = ! ! x; opts.bubbles = t45;}
    if(cancelable){
     var x$1 = cancelable[1], t47 = ! ! x$1;
     opts.cancelable = t47;
    }
    if(detail){
     var x$0 = detail[1], t49 = Js_of_ocaml_Js[2].call(null, x$0);
     opts.detail = t49;
    }
    var t51 = Js_of_ocaml_Js[52][1], constr = t51.CustomEvent;
    return new constr(typ, opts);
   }
   var
    Js_of_ocaml_Dom =
      [0,
       DocumentPosition,
       insertBefore,
       replaceChild,
       removeChild,
       appendChild,
       list_of_nodeList,
       nodeType,
       [0, element, text, attr],
       no_handler,
       handler,
       full_handler,
       invoke_handler,
       eventTarget,
       Event,
       addEventListenerWithOptions,
       addEventListener,
       removeEventListener,
       preventDefault,
       createCustomEvent];
   runtime.caml_register_global(32, Js_of_ocaml_Dom, "Js_of_ocaml__Dom");
   return;
  }
  (globalThis));

//# 639 "../../lib/js_of_ocaml/.js_of_ocaml.objs/jsoo/default/js_of_ocaml.cma.js"
//# shape: Js_of_ocaml__Typed_array:[N,F(1)*,F(2)*,F(1)*,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,N,F(3),F(2),F(2),N,N,N,N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_of_uint8_array = runtime.caml_bytes_of_uint8_array,
    caml_js_get = runtime.caml_js_get,
    caml_string_of_uint8_array = runtime.caml_string_of_uint8_array,
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    t0 = Js_of_ocaml_Js[52][1],
    arrayBuffer = t0.ArrayBuffer;
   function from_genarray(param, a){return runtime.caml_ba_to_typed_array(a);}
   var
    t1 = Js_of_ocaml_Js[52][1],
    int8Array = t1.Int8Array,
    t2 = Js_of_ocaml_Js[52][1],
    uint8Array = t2.Uint8Array,
    t3 = Js_of_ocaml_Js[52][1],
    int16Array = t3.Int16Array,
    t4 = Js_of_ocaml_Js[52][1],
    uint16Array = t4.Uint16Array,
    t5 = Js_of_ocaml_Js[52][1],
    int32Array = t5.Int32Array,
    t6 = Js_of_ocaml_Js[52][1],
    uint32Array = t6.Uint32Array,
    t7 = Js_of_ocaml_Js[52][1],
    float32Array = t7.Float32Array,
    t8 = Js_of_ocaml_Js[52][1],
    float64Array = t8.Float64Array;
   function set(a, i, v){return Js_of_ocaml_Js[21].call(null, a, i, v);}
   var
    get = caml_js_get,
    unsafe_get = caml_js_get,
    t9 = Js_of_ocaml_Js[52][1],
    dataView = t9.DataView;
   function of_arrayBuffer(t11){
    var uint8 = new uint8Array(t11);
    return caml_string_of_uint8_array(uint8);
   }
   function of_arrayBuffer$0(t13){
    var uint8 = new uint8Array(t13);
    return caml_bytes_of_uint8_array(uint8);
   }
   var
    Js_of_ocaml_Typed_array =
      [0,
       arrayBuffer,
       runtime.caml_ba_kind_of_typed_array,
       from_genarray,
       runtime.caml_ba_from_typed_array,
       int8Array,
       int8Array,
       int8Array,
       int8Array,
       int8Array,
       uint8Array,
       uint8Array,
       uint8Array,
       uint8Array,
       uint8Array,
       int16Array,
       int16Array,
       int16Array,
       int16Array,
       int16Array,
       uint16Array,
       uint16Array,
       uint16Array,
       uint16Array,
       uint16Array,
       int32Array,
       int32Array,
       int32Array,
       int32Array,
       int32Array,
       uint32Array,
       uint32Array,
       uint32Array,
       uint32Array,
       uint32Array,
       float32Array,
       float32Array,
       float32Array,
       float32Array,
       float32Array,
       float64Array,
       float64Array,
       float64Array,
       float64Array,
       float64Array,
       set,
       get,
       unsafe_get,
       dataView,
       dataView,
       [0,
        runtime.bigstring_to_array_buffer,
        runtime.bigstring_to_typed_array,
        runtime.bigstring_of_array_buffer,
        runtime.bigstring_of_typed_array],
       [0, of_arrayBuffer, caml_string_of_uint8_array],
       [0,
        caml_bytes_of_uint8_array,
        runtime.caml_uint8_array_of_bytes,
        of_arrayBuffer$0]];
   runtime.caml_register_global
    (11, Js_of_ocaml_Typed_array, "Js_of_ocaml__Typed_array");
   return;
  }
  (globalThis));

//# 754 "../../lib/js_of_ocaml/.js_of_ocaml.objs/jsoo/default/js_of_ocaml.cma.js"
//# shape: Js_of_ocaml__File:[F(3),F(3),N,[N,N,N,N,N,N],F(1),N,F(4)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Typed_array = global_data.Js_of_ocaml__Typed_array,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Stdlib = global_data.Stdlib,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Array = global_data.Stdlib__Array,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    t0 = Js_of_ocaml_Js[52][1],
    blob_constr = t0.Blob,
    a = [0, "transparent"],
    cst_endings = "endings",
    cst_type = "type",
    b = [0, "native"],
    cst_can_t_retrieve_file_name_n =
      "can't retrieve file name: not implemented";
   function filter_map(f, param$0){
    var param = param$0;
    for(;;){
     if(! param) return 0;
     var q = param[2], v = param[1], match = caml_call1(f, v);
     if(match){var v$0 = match[1]; return [0, v$0, filter_map(f, q)];}
     param = q;
    }
   }
   function blob_raw(contentType, endings, a$0){
    var
     c = 0,
     d = endings ? 116179762 <= endings[1] ? a : b : 0,
     options =
       filter_map
        (function(param){
          var v = param[2], name = param[1];
          if(! v) return 0;
          var v$0 = v[1];
          return [0, [0, name, caml_jsstring_of_string(v$0)]];
         },
         [0, [0, cst_type, contentType], [0, [0, cst_endings, d], c]]),
     options$0 =
       options
        ? runtime.caml_js_object(Stdlib_Array[11].call(null, options))
        : Js_of_ocaml_Js[3],
     t2 = runtime.caml_js_from_array(a$0);
    return new blob_constr(t2, options$0);
   }
   function blob_from_string(contentType, endings, s){
    return blob_raw(contentType, endings, [0, caml_jsstring_of_string(s)]);
   }
   function blob_from_any(contentType, endings, l){
    var
     l$0 =
       Stdlib_List[20].call
        (null,
         function(param){
          var variant = param[1];
          if(155580615 === variant){var s = param[2]; return s;}
          if(486041214 <= variant){
           if(1037850489 <= variant){var a = param[2]; return a;}
           var a$0 = param[2];
           return a$0;
          }
          if(288368849 <= variant){
           var s$0 = param[2];
           return caml_jsstring_of_string(s$0);
          }
          var b = param[2];
          return b;
         },
         l);
    return blob_raw(contentType, endings, Stdlib_Array[11].call(null, l$0));
   }
   function filename(file){
    var match = Js_of_ocaml_Js[6][10].call(null, file.name);
    if(match){var name = match[1]; return name;}
    var match$0 = Js_of_ocaml_Js[6][10].call(null, file.fileName);
    if(! match$0) return Stdlib[2].call(null, cst_can_t_retrieve_file_name_n);
    var name$0 = match$0[1];
    return name$0;
   }
   var t6 = Js_of_ocaml_Js[52][1], doc_constr = t6.Document;
   function document(e){
    return e instanceof doc_constr
            ? Js_of_ocaml_Js[2].call(null, e)
            : Js_of_ocaml_Js[1];
   }
   function blob(e){
    return e instanceof blob_constr
            ? Js_of_ocaml_Js[2].call(null, e)
            : Js_of_ocaml_Js[1];
   }
   function string(e){
    return typeof e == "string"
            ? Js_of_ocaml_Js[2].call(null, e)
            : Js_of_ocaml_Js[1];
   }
   function arrayBuffer(e){
    return e instanceof Js_of_ocaml_Typed_array[1]
            ? Js_of_ocaml_Js[2].call(null, e)
            : Js_of_ocaml_Js[1];
   }
   var
    loadstart = Js_of_ocaml_Dom[14][1].call(null, "loadstart"),
    progress = Js_of_ocaml_Dom[14][1].call(null, "progress"),
    abort = Js_of_ocaml_Dom[14][1].call(null, "abort"),
    error = Js_of_ocaml_Dom[14][1].call(null, "error"),
    load = Js_of_ocaml_Dom[14][1].call(null, "load"),
    loadend = Js_of_ocaml_Dom[14][1].call(null, "loadend"),
    ReaderEvent = [0, loadstart, progress, abort, error, load, loadend],
    t7 = Js_of_ocaml_Js[52][1],
    fileReader = t7.FileReader,
    addEventListener = Js_of_ocaml_Dom[16],
    Js_of_ocaml_File =
      [0,
       blob_from_string,
       blob_from_any,
       [0, document, blob, function(a){return a;}, string, arrayBuffer],
       ReaderEvent,
       filename,
       fileReader,
       addEventListener];
   runtime.caml_register_global(23, Js_of_ocaml_File, "Js_of_ocaml__File");
   return;
  }
  (globalThis));

//# 893 "../../lib/js_of_ocaml/.js_of_ocaml.objs/jsoo/default/js_of_ocaml.cma.js"
//# shape: Js_of_ocaml__Dom_html:[N,N,F(1),F(1),F(2),F(1),F(1),N,N,F(1)*,F(1)*,F(3),F(1),F(1),N,F(6)->F(1),F(4),F(1),F(5),F(3),F(4),F(1),F(1),F(1),F(1),N,N,F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(3),F(3),F(3),F(3),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),N,F(1),F(1)*,F(1),F(1),F(1),F(1),F(1),N,F(2),F(1),F(1),N,F(1),F(1),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    cst = '"',
    cst_a$0 = "a",
    cst_area$0 = "area",
    cst_audio$0 = "audio",
    cst_base$0 = "base",
    cst_blockquote$0 = "blockquote",
    cst_body$0 = "body",
    cst_br$0 = "br",
    cst_button$1 = "button",
    cst_canvas$0 = "canvas",
    cst_caption$0 = "caption",
    cst_code$0 = "code",
    cst_col$0 = "col",
    cst_colgroup$0 = "colgroup",
    cst_del$0 = "del",
    cst_div$0 = "div",
    cst_dl$0 = "dl",
    cst_embed$0 = "embed",
    cst_fieldset$0 = "fieldset",
    cst_form$0 = "form",
    cst_frame$0 = "frame",
    cst_frameset$0 = "frameset",
    cst_h1$0 = "h1",
    cst_h2$0 = "h2",
    cst_h3$0 = "h3",
    cst_h4$0 = "h4",
    cst_h5$0 = "h5",
    cst_h6$0 = "h6",
    cst_head$0 = "head",
    cst_hr$0 = "hr",
    cst_html$0 = "html",
    cst_iframe$0 = "iframe",
    cst_img$0 = "img",
    cst_input$1 = "input",
    cst_ins$0 = "ins",
    cst_label$0 = "label",
    cst_legend$0 = "legend",
    cst_li$0 = "li",
    cst_link$0 = "link",
    cst_map$0 = "map",
    cst_meta$0 = "meta",
    cst_object$0 = "object",
    cst_ol$0 = "ol",
    cst_optgroup$0 = "optgroup",
    cst_option$0 = "option",
    cst_p$0 = "p",
    cst_param$0 = "param",
    cst_pre$0 = "pre",
    cst_q$0 = "q",
    cst_script$0 = "script",
    cst_select$1 = "select",
    cst_style$0 = "style",
    cst_table$0 = "table",
    cst_tbody$0 = "tbody",
    cst_td$0 = "td",
    cst_textarea$1 = "textarea",
    cst_tfoot$0 = "tfoot",
    cst_th$0 = "th",
    cst_thead$0 = "thead",
    cst_title$0 = "title",
    cst_tr$0 = "tr",
    cst_ul$0 = "ul",
    cst_video$0 = "video",
    caml_js_html_escape = runtime.caml_js_html_escape,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_compare = runtime.caml_string_compare,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    name$56 = cst_canvas$0,
    name$55 = cst_video$0,
    name$54 = cst_audio$0,
    name$53 = cst_iframe$0,
    name$52 = cst_frame$0,
    name$51 = cst_frameset$0,
    name$50 = cst_td$0,
    name$49 = cst_th$0,
    name$48 = cst_tr$0,
    name$47 = cst_tbody$0,
    name$46 = cst_tfoot$0,
    name$45 = cst_thead$0,
    name$44 = cst_colgroup$0,
    name$43 = cst_col$0,
    name$42 = cst_caption$0,
    name$41 = cst_table$0,
    name$40 = cst_script$0,
    name$39 = cst_area$0,
    name$38 = cst_map$0,
    name$37 = cst_param$0,
    name$36 = cst_object$0,
    name$35 = cst_img$0,
    name$34 = cst_a$0,
    name$33 = cst_del$0,
    name$32 = cst_ins$0,
    name$31 = cst_hr$0,
    name$30 = cst_br$0,
    name$29 = cst_pre$0,
    name$28 = cst_blockquote$0,
    name$27 = cst_q$0,
    name$26 = cst_h6$0,
    name$25 = cst_h5$0,
    name$24 = cst_h4$0,
    name$23 = cst_h3$0,
    name$22 = cst_h2$0,
    name$21 = cst_h1$0,
    name$20 = cst_p$0,
    name$19 = cst_embed$0,
    name$18 = cst_div$0,
    name$17 = "dialog",
    name$16 = cst_li$0,
    name$15 = cst_dl$0,
    name$14 = cst_ol$0,
    name$13 = cst_ul$0,
    name$12 = cst_legend$0,
    name$11 = cst_fieldset$0,
    name$10 = cst_label$0,
    cst_input = cst_input$1,
    name$9 = cst_option$0,
    name$8 = cst_optgroup$0,
    name$7 = cst_form$0,
    name$6 = cst_body$0,
    name$5 = cst_style$0,
    name$4 = cst_base$0,
    name$3 = cst_meta$0,
    name$2 = cst_title$0,
    name$1 = cst_link$0,
    name$0 = cst_head$0,
    name = cst_html$0,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    cst_Invalid_entity = "Invalid entity ";
   function decode_html_entities(s){
    var a = runtime.caml_js_html_entities(s);
    return Js_of_ocaml_Js[5][8].call
            (null,
             a,
             function(param){
              var
               a =
                 Stdlib[28].call
                  (null, cst_Invalid_entity, caml_string_of_jsstring(s));
              return Stdlib[2].call(null, a);
             });
   }
   var
    no_handler = Js_of_ocaml_Dom[9],
    handler = Js_of_ocaml_Dom[10],
    full_handler = Js_of_ocaml_Dom[11],
    invoke_handler = Js_of_ocaml_Dom[12],
    cancel = Js_of_ocaml_Dom[14][1].call(null, "cancel"),
    click = Js_of_ocaml_Dom[14][1].call(null, "click"),
    close = Js_of_ocaml_Dom[14][1].call(null, "close"),
    copy = Js_of_ocaml_Dom[14][1].call(null, "copy"),
    cut = Js_of_ocaml_Dom[14][1].call(null, "cut"),
    paste = Js_of_ocaml_Dom[14][1].call(null, "paste"),
    dblclick = Js_of_ocaml_Dom[14][1].call(null, "dblclick"),
    mousedown = Js_of_ocaml_Dom[14][1].call(null, "mousedown"),
    mouseup = Js_of_ocaml_Dom[14][1].call(null, "mouseup"),
    mouseover = Js_of_ocaml_Dom[14][1].call(null, "mouseover"),
    mousemove = Js_of_ocaml_Dom[14][1].call(null, "mousemove"),
    mouseout = Js_of_ocaml_Dom[14][1].call(null, "mouseout"),
    keypress = Js_of_ocaml_Dom[14][1].call(null, "keypress"),
    keydown = Js_of_ocaml_Dom[14][1].call(null, "keydown"),
    keyup = Js_of_ocaml_Dom[14][1].call(null, "keyup"),
    mousewheel = Js_of_ocaml_Dom[14][1].call(null, "mousewheel"),
    wheel = Js_of_ocaml_Dom[14][1].call(null, "wheel"),
    DOMMouseScroll = Js_of_ocaml_Dom[14][1].call(null, "DOMMouseScroll"),
    touchstart = Js_of_ocaml_Dom[14][1].call(null, "touchstart"),
    touchmove = Js_of_ocaml_Dom[14][1].call(null, "touchmove"),
    touchend = Js_of_ocaml_Dom[14][1].call(null, "touchend"),
    touchcancel = Js_of_ocaml_Dom[14][1].call(null, "touchcancel"),
    dragstart = Js_of_ocaml_Dom[14][1].call(null, "dragstart"),
    dragend = Js_of_ocaml_Dom[14][1].call(null, "dragend"),
    dragenter = Js_of_ocaml_Dom[14][1].call(null, "dragenter"),
    dragover = Js_of_ocaml_Dom[14][1].call(null, "dragover"),
    dragleave = Js_of_ocaml_Dom[14][1].call(null, "dragleave"),
    drag = Js_of_ocaml_Dom[14][1].call(null, "drag"),
    drop = Js_of_ocaml_Dom[14][1].call(null, "drop"),
    hashchange = Js_of_ocaml_Dom[14][1].call(null, "hashchange"),
    change = Js_of_ocaml_Dom[14][1].call(null, "change"),
    input = Js_of_ocaml_Dom[14][1].call(null, cst_input$1),
    timeupdate = Js_of_ocaml_Dom[14][1].call(null, "timeupdate"),
    submit = Js_of_ocaml_Dom[14][1].call(null, "submit"),
    scroll = Js_of_ocaml_Dom[14][1].call(null, "scroll"),
    focus = Js_of_ocaml_Dom[14][1].call(null, "focus"),
    blur = Js_of_ocaml_Dom[14][1].call(null, "blur"),
    load = Js_of_ocaml_Dom[14][1].call(null, "load"),
    unload = Js_of_ocaml_Dom[14][1].call(null, "unload"),
    beforeunload = Js_of_ocaml_Dom[14][1].call(null, "beforeunload"),
    resize = Js_of_ocaml_Dom[14][1].call(null, "resize"),
    orientationchange = Js_of_ocaml_Dom[14][1].call(null, "orientationchange"),
    popstate = Js_of_ocaml_Dom[14][1].call(null, "popstate"),
    error = Js_of_ocaml_Dom[14][1].call(null, "error"),
    abort = Js_of_ocaml_Dom[14][1].call(null, "abort"),
    select = Js_of_ocaml_Dom[14][1].call(null, cst_select$1),
    online = Js_of_ocaml_Dom[14][1].call(null, "online"),
    offline = Js_of_ocaml_Dom[14][1].call(null, "offline"),
    checking = Js_of_ocaml_Dom[14][1].call(null, "checking"),
    noupdate = Js_of_ocaml_Dom[14][1].call(null, "noupdate"),
    downloading = Js_of_ocaml_Dom[14][1].call(null, "downloading"),
    progress = Js_of_ocaml_Dom[14][1].call(null, "progress"),
    updateready = Js_of_ocaml_Dom[14][1].call(null, "updateready"),
    cached = Js_of_ocaml_Dom[14][1].call(null, "cached"),
    obsolete = Js_of_ocaml_Dom[14][1].call(null, "obsolete"),
    domContentLoaded = Js_of_ocaml_Dom[14][1].call(null, "DOMContentLoaded"),
    animationstart = Js_of_ocaml_Dom[14][1].call(null, "animationstart"),
    animationend = Js_of_ocaml_Dom[14][1].call(null, "animationend"),
    animationiteration =
      Js_of_ocaml_Dom[14][1].call(null, "animationiteration"),
    animationcancel = Js_of_ocaml_Dom[14][1].call(null, "animationcancel"),
    transitionrun = Js_of_ocaml_Dom[14][1].call(null, "transitionrun"),
    transitionstart = Js_of_ocaml_Dom[14][1].call(null, "transitionstart"),
    transitionend = Js_of_ocaml_Dom[14][1].call(null, "transitionend"),
    transitioncancel = Js_of_ocaml_Dom[14][1].call(null, "transitioncancel"),
    canplay = Js_of_ocaml_Dom[14][1].call(null, "canplay"),
    canplaythrough = Js_of_ocaml_Dom[14][1].call(null, "canplaythrough"),
    durationchange = Js_of_ocaml_Dom[14][1].call(null, "durationchange"),
    emptied = Js_of_ocaml_Dom[14][1].call(null, "emptied"),
    ended = Js_of_ocaml_Dom[14][1].call(null, "ended"),
    gotpointercapture = Js_of_ocaml_Dom[14][1].call(null, "gotpointercapture"),
    loadeddata = Js_of_ocaml_Dom[14][1].call(null, "loadeddata"),
    loadedmetadata = Js_of_ocaml_Dom[14][1].call(null, "loadedmetadata"),
    loadstart = Js_of_ocaml_Dom[14][1].call(null, "loadstart"),
    lostpointercapture =
      Js_of_ocaml_Dom[14][1].call(null, "lostpointercapture"),
    message = Js_of_ocaml_Dom[14][1].call(null, "message"),
    pause = Js_of_ocaml_Dom[14][1].call(null, "pause"),
    play = Js_of_ocaml_Dom[14][1].call(null, "play"),
    playing = Js_of_ocaml_Dom[14][1].call(null, "playing"),
    pointerenter = Js_of_ocaml_Dom[14][1].call(null, "pointerenter"),
    pointercancel = Js_of_ocaml_Dom[14][1].call(null, "pointercancel"),
    pointerdown = Js_of_ocaml_Dom[14][1].call(null, "pointerdown"),
    pointerleave = Js_of_ocaml_Dom[14][1].call(null, "pointerleave"),
    pointermove = Js_of_ocaml_Dom[14][1].call(null, "pointermove"),
    pointerout = Js_of_ocaml_Dom[14][1].call(null, "pointerout"),
    pointerover = Js_of_ocaml_Dom[14][1].call(null, "pointerover"),
    pointerup = Js_of_ocaml_Dom[14][1].call(null, "pointerup"),
    ratechange = Js_of_ocaml_Dom[14][1].call(null, "ratechange"),
    seeked = Js_of_ocaml_Dom[14][1].call(null, "seeked"),
    seeking = Js_of_ocaml_Dom[14][1].call(null, "seeking"),
    stalled = Js_of_ocaml_Dom[14][1].call(null, "stalled"),
    suspend = Js_of_ocaml_Dom[14][1].call(null, "suspend"),
    volumechange = Js_of_ocaml_Dom[14][1].call(null, "volumechange"),
    waiting = Js_of_ocaml_Dom[14][1].call(null, "waiting"),
    toggle = Js_of_ocaml_Dom[14][1].call(null, "toggle"),
    make = Js_of_ocaml_Dom[14][1],
    addEventListener = Js_of_ocaml_Dom[16],
    addEventListenerWithOptions = Js_of_ocaml_Dom[15],
    removeEventListener = Js_of_ocaml_Dom[17],
    createCustomEvent = Js_of_ocaml_Dom[19],
    d = "2d";
   function location_origin(loc){return loc.origin;}
   var
    window = Js_of_ocaml_Js[52][1],
    document = window.document,
    b =
      [0,
       [11, "getElementById_exn: ", [3, 0, [11, " not found", 0]]],
       "getElementById_exn: %S not found"];
   function getElementById(id){
    var t3 = caml_jsstring_of_string(id), a = document.getElementById(t3);
    return Js_of_ocaml_Js[5][7].call
            (null,
             a,
             function(param){throw caml_maybe_attach_backtrace(Stdlib[8], 1);},
             function(pnode){return pnode;});
   }
   function getElementById_exn(id){
    var t5 = caml_jsstring_of_string(id), a = document.getElementById(t5);
    return Js_of_ocaml_Js[5][7].call
            (null,
             a,
             function(param){
              var a = caml_call1(Stdlib_Printf[4].call(null, b), id);
              return Stdlib[2].call(null, a);
             },
             function(pnode){return pnode;});
   }
   function getElementById_opt(id){
    var t7 = caml_jsstring_of_string(id), a = document.getElementById(t7);
    return Js_of_ocaml_Js[5][10].call(null, a);
   }
   function getElementById_coerce(id, coerce){
    var t9 = caml_jsstring_of_string(id), a = document.getElementById(t9);
    return Js_of_ocaml_Js[5][7].call
            (null,
             a,
             function(param){return 0;},
             function(e){
              var a = caml_call1(coerce, e);
              return Js_of_ocaml_Js[5][10].call(null, a);
             });
   }
   function createElement(doc, name){
    var t11 = caml_jsstring_of_string(name);
    return doc.createElement(t11);
   }
   var
    createElementSyntax = [0, 785140586],
    cst_select = cst_select$1,
    cst_textarea = cst_textarea$1,
    cst_button = cst_button$1,
    cst_sub = "sub",
    cst_sup = "sup",
    cst_span = "span",
    cst_tt = "tt",
    cst_i = "i",
    cst_b = "b",
    cst_big = "big",
    cst_small = "small",
    cst_em = "em",
    cst_strong = "strong",
    cst_cite = "cite",
    cst_dfn = "dfn",
    cst_code = cst_code$0,
    cst_samp = "samp",
    cst_kbd = "kbd",
    cst_var = "var",
    cst_abbr = "abbr",
    cst_dd = "dd",
    cst_dt = "dt",
    cst_noscript = "noscript",
    cst_address = "address";
   function unsafeCreateElementEx(type, name, doc, elt){
    for(;;){
     if(0 === type && 0 === name) return createElement(doc, elt);
     var match = createElementSyntax[1];
     if(785140586 !== match) break;
     try{
      var
       t36 = document.createElement('<input name="x">'),
       t37 = t36.tagName,
       b = t37.toLowerCase() == cst_input$1 ? 1 : 0,
       d = b ? t36.name == "x" ? 1 : 0 : b,
       a = d;
     }
     catch(exn){var a = 0;}
     var c = a ? 982028505 : -1003883683;
     createElementSyntax[1] = c;
    }
    if(982028505 <= match){
     var
      t16 = Js_of_ocaml_Js[18],
      t17 = new t16,
      t19 = caml_jsstring_of_string(elt);
     t17.push("<", t19);
     if(type){
      var v$0 = type[1], t22 = caml_js_html_escape(v$0);
      t17.push(' type="', t22, cst);
     }
     if(name){
      var v = name[1], t26 = caml_js_html_escape(v);
      t17.push(' name="', t26, cst);
     }
     t17.push(">");
     var t33 = t17.join(cst$0);
     return doc.createElement(t33);
    }
    var res = createElement(doc, elt);
    if(type){var t12 = type[1]; res.type = t12;}
    if(name){var t14 = name[1]; res.name = t14;}
    return res;
   }
   function createHtml(doc){return createElement(doc, name);}
   function createHead(doc){return createElement(doc, name$0);}
   function createLink(doc){return createElement(doc, name$1);}
   function createTitle(doc){return createElement(doc, name$2);}
   function createMeta(doc){return createElement(doc, name$3);}
   function createBase(doc){return createElement(doc, name$4);}
   function createStyle(doc){return createElement(doc, name$5);}
   function createBody(doc){return createElement(doc, name$6);}
   function createForm(doc){return createElement(doc, name$7);}
   function createOptgroup(doc){return createElement(doc, name$8);}
   function createOption(doc){return createElement(doc, name$9);}
   function createSelect(type, name, doc){
    return unsafeCreateElementEx(type, name, doc, cst_select);
   }
   function createInput(type, name, doc){
    return unsafeCreateElementEx(type, name, doc, cst_input);
   }
   function createTextarea(type, name, doc){
    return unsafeCreateElementEx(type, name, doc, cst_textarea);
   }
   function createButton(type, name, doc){
    return unsafeCreateElementEx(type, name, doc, cst_button);
   }
   function createLabel(doc){return createElement(doc, name$10);}
   function createFieldset(doc){return createElement(doc, name$11);}
   function createLegend(doc){return createElement(doc, name$12);}
   function createUl(doc){return createElement(doc, name$13);}
   function createOl(doc){return createElement(doc, name$14);}
   function createDl(doc){return createElement(doc, name$15);}
   function createLi(doc){return createElement(doc, name$16);}
   function createDialog(doc){return createElement(doc, name$17);}
   function createDiv(doc){return createElement(doc, name$18);}
   function createEmbed(doc){return createElement(doc, name$19);}
   function createP(doc){return createElement(doc, name$20);}
   function createH1(doc){return createElement(doc, name$21);}
   function createH2(doc){return createElement(doc, name$22);}
   function createH3(doc){return createElement(doc, name$23);}
   function createH4(doc){return createElement(doc, name$24);}
   function createH5(doc){return createElement(doc, name$25);}
   function createH6(doc){return createElement(doc, name$26);}
   function createQ(doc){return createElement(doc, name$27);}
   function createBlockquote(doc){return createElement(doc, name$28);}
   function createPre(doc){return createElement(doc, name$29);}
   function createBr(doc){return createElement(doc, name$30);}
   function createHr(doc){return createElement(doc, name$31);}
   function createIns(doc){return createElement(doc, name$32);}
   function createDel(doc){return createElement(doc, name$33);}
   function createA(doc){return createElement(doc, name$34);}
   function createImg(doc){return createElement(doc, name$35);}
   function createObject(doc){return createElement(doc, name$36);}
   function createParam(doc){return createElement(doc, name$37);}
   function createMap(doc){return createElement(doc, name$38);}
   function createArea(doc){return createElement(doc, name$39);}
   function createScript(doc){return createElement(doc, name$40);}
   function createTable(doc){return createElement(doc, name$41);}
   function createCaption(doc){return createElement(doc, name$42);}
   function createCol(doc){return createElement(doc, name$43);}
   function createColgroup(doc){return createElement(doc, name$44);}
   function createThead(doc){return createElement(doc, name$45);}
   function createTfoot(doc){return createElement(doc, name$46);}
   function createTbody(doc){return createElement(doc, name$47);}
   function createTr(doc){return createElement(doc, name$48);}
   function createTh(doc){return createElement(doc, name$49);}
   function createTd(doc){return createElement(doc, name$50);}
   function createSub(doc){return createElement(doc, cst_sub);}
   function createSup(doc){return createElement(doc, cst_sup);}
   function createSpan(doc){return createElement(doc, cst_span);}
   function createTt(doc){return createElement(doc, cst_tt);}
   function createI(doc){return createElement(doc, cst_i);}
   function createB(doc){return createElement(doc, cst_b);}
   function createBig(doc){return createElement(doc, cst_big);}
   function createSmall(doc){return createElement(doc, cst_small);}
   function createEm(doc){return createElement(doc, cst_em);}
   function createStrong(doc){return createElement(doc, cst_strong);}
   function createCite(doc){return createElement(doc, cst_cite);}
   function createDfn(doc){return createElement(doc, cst_dfn);}
   function createCode(doc){return createElement(doc, cst_code);}
   function createSamp(doc){return createElement(doc, cst_samp);}
   function createKbd(doc){return createElement(doc, cst_kbd);}
   function createVar(doc){return createElement(doc, cst_var);}
   function createAbbr(doc){return createElement(doc, cst_abbr);}
   function createDd(doc){return createElement(doc, cst_dd);}
   function createDt(doc){return createElement(doc, cst_dt);}
   function createNoscript(doc){return createElement(doc, cst_noscript);}
   function createAddress(doc){return createElement(doc, cst_address);}
   function createFrameset(doc){return createElement(doc, name$51);}
   function createFrame(doc){return createElement(doc, name$52);}
   function createIframe(doc){return createElement(doc, name$53);}
   function createAudio(doc){return createElement(doc, name$54);}
   function createVideo(doc){return createElement(doc, name$55);}
   var
    Canvas_not_available =
      [248,
       "Js_of_ocaml__Dom_html.Canvas_not_available",
       runtime.caml_fresh_oo_id(0)];
   function createCanvas(doc){
    var t39 = createElement(doc, name$56);
    if(1 - Js_of_ocaml_Js[5][5].call(null, t39.getContext))
     throw caml_maybe_attach_backtrace(Canvas_not_available, 1);
    return t39;
   }
   var
    t40 = Js_of_ocaml_Js[52][1],
    html_element = t40.HTMLElement,
    cst_a = cst_a$0,
    cst_area = cst_area$0,
    cst_base = cst_base$0,
    cst_blockquote = cst_blockquote$0,
    cst_body = cst_body$0,
    cst_br = cst_br$0,
    cst_button$0 = cst_button$1,
    cst_canvas = cst_canvas$0,
    cst_caption = cst_caption$0,
    cst_col = cst_col$0,
    cst_colgroup = cst_colgroup$0,
    cst_del = cst_del$0,
    cst_details = "details",
    cst_div = cst_div$0,
    cst_dl = cst_dl$0,
    cst_fieldset = cst_fieldset$0,
    cst_embed = cst_embed$0,
    cst_form = cst_form$0,
    cst_frameset = cst_frameset$0,
    cst_frame = cst_frame$0,
    cst_h1 = cst_h1$0,
    cst_h2 = cst_h2$0,
    cst_h3 = cst_h3$0,
    cst_h4 = cst_h4$0,
    cst_h5 = cst_h5$0,
    cst_h6 = cst_h6$0,
    cst_head = cst_head$0,
    cst_hr = cst_hr$0,
    cst_html = cst_html$0,
    cst_iframe = cst_iframe$0,
    cst_img = cst_img$0,
    cst_input$0 = cst_input$1,
    cst_ins = cst_ins$0,
    cst_label = cst_label$0,
    cst_legend = cst_legend$0,
    cst_li = cst_li$0,
    cst_link = cst_link$0,
    cst_map = cst_map$0,
    cst_meta = cst_meta$0,
    cst_object = cst_object$0,
    cst_ol = cst_ol$0,
    cst_optgroup = cst_optgroup$0,
    cst_option = cst_option$0,
    cst_p = cst_p$0,
    cst_param = cst_param$0,
    cst_pre = cst_pre$0,
    cst_q = cst_q$0,
    cst_script = cst_script$0,
    cst_select$0 = cst_select$1,
    cst_style = cst_style$0,
    cst_table = cst_table$0,
    cst_tbody = cst_tbody$0,
    cst_td = cst_td$0,
    cst_textarea$0 = cst_textarea$1,
    cst_tfoot = cst_tfoot$0,
    cst_th = cst_th$0,
    cst_thead = cst_thead$0,
    cst_title = cst_title$0,
    cst_tr = cst_tr$0,
    cst_ul = cst_ul$0,
    cst_audio = cst_audio$0,
    cst_video = cst_video$0;
   function element(e){
    return e instanceof html_element
            ? Js_of_ocaml_Js[2].call(null, e)
            : Js_of_ocaml_Js[1];
   }
   function unsafeCoerce(tag, t41){
    var t42 = t41.tagName;
    return t42.toLowerCase() == caml_jsstring_of_string(tag)
            ? Js_of_ocaml_Js[2].call(null, t41)
            : Js_of_ocaml_Js[1];
   }
   function a(e){return unsafeCoerce(cst_a, e);}
   function area(e){return unsafeCoerce(cst_area, e);}
   function base(e){return unsafeCoerce(cst_base, e);}
   function blockquote(e){return unsafeCoerce(cst_blockquote, e);}
   function body(e){return unsafeCoerce(cst_body, e);}
   function br(e){return unsafeCoerce(cst_br, e);}
   function button(e){return unsafeCoerce(cst_button$0, e);}
   function canvas(e){return unsafeCoerce(cst_canvas, e);}
   function caption(e){return unsafeCoerce(cst_caption, e);}
   function col(e){return unsafeCoerce(cst_col, e);}
   function colgroup(e){return unsafeCoerce(cst_colgroup, e);}
   function del(e){return unsafeCoerce(cst_del, e);}
   function details(e){return unsafeCoerce(cst_details, e);}
   function div(e){return unsafeCoerce(cst_div, e);}
   function dl(e){return unsafeCoerce(cst_dl, e);}
   function fieldset(e){return unsafeCoerce(cst_fieldset, e);}
   function embed(e){return unsafeCoerce(cst_embed, e);}
   function form(e){return unsafeCoerce(cst_form, e);}
   function frameset(e){return unsafeCoerce(cst_frameset, e);}
   function frame(e){return unsafeCoerce(cst_frame, e);}
   function h1(e){return unsafeCoerce(cst_h1, e);}
   function h2(e){return unsafeCoerce(cst_h2, e);}
   function h3(e){return unsafeCoerce(cst_h3, e);}
   function h4(e){return unsafeCoerce(cst_h4, e);}
   function h5(e){return unsafeCoerce(cst_h5, e);}
   function h6(e){return unsafeCoerce(cst_h6, e);}
   function head(e){return unsafeCoerce(cst_head, e);}
   function hr(e){return unsafeCoerce(cst_hr, e);}
   function html(e){return unsafeCoerce(cst_html, e);}
   function iframe(e){return unsafeCoerce(cst_iframe, e);}
   function img(e){return unsafeCoerce(cst_img, e);}
   function input$0(e){return unsafeCoerce(cst_input$0, e);}
   function ins(e){return unsafeCoerce(cst_ins, e);}
   function label(e){return unsafeCoerce(cst_label, e);}
   function legend(e){return unsafeCoerce(cst_legend, e);}
   function li(e){return unsafeCoerce(cst_li, e);}
   function link(e){return unsafeCoerce(cst_link, e);}
   function map(e){return unsafeCoerce(cst_map, e);}
   function meta(e){return unsafeCoerce(cst_meta, e);}
   function object(e){return unsafeCoerce(cst_object, e);}
   function ol(e){return unsafeCoerce(cst_ol, e);}
   function optgroup(e){return unsafeCoerce(cst_optgroup, e);}
   function option(e){return unsafeCoerce(cst_option, e);}
   function p(e){return unsafeCoerce(cst_p, e);}
   function pre(e){return unsafeCoerce(cst_pre, e);}
   function q(e){return unsafeCoerce(cst_q, e);}
   function script(e){return unsafeCoerce(cst_script, e);}
   function select$0(e){return unsafeCoerce(cst_select$0, e);}
   function style(e){return unsafeCoerce(cst_style, e);}
   function table(e){return unsafeCoerce(cst_table, e);}
   function tbody(e){return unsafeCoerce(cst_tbody, e);}
   function td(e){return unsafeCoerce(cst_td, e);}
   function textarea(e){return unsafeCoerce(cst_textarea$0, e);}
   function tfoot(e){return unsafeCoerce(cst_tfoot, e);}
   function th(e){return unsafeCoerce(cst_th, e);}
   function thead(e){return unsafeCoerce(cst_thead, e);}
   function title(e){return unsafeCoerce(cst_title, e);}
   function tr(e){return unsafeCoerce(cst_tr, e);}
   function ul(e){return unsafeCoerce(cst_ul, e);}
   function audio(e){return unsafeCoerce(cst_audio, e);}
   function video(e){return unsafeCoerce(cst_video, e);}
   function unsafeCoerceEvent(constr, ev){
    var a = Js_of_ocaml_Js[4].call(null, constr);
    if(Js_of_ocaml_Js[6][5].call(null, a) && ev instanceof constr)
     return Js_of_ocaml_Js[2].call(null, ev);
    return Js_of_ocaml_Js[1];
   }
   function mouseEvent(ev){
    var t43 = Js_of_ocaml_Js[52][1];
    return unsafeCoerceEvent(t43.MouseEvent, ev);
   }
   function keyboardEvent(ev){
    var t44 = Js_of_ocaml_Js[52][1];
    return unsafeCoerceEvent(t44.KeyboardEvent, ev);
   }
   function wheelEvent(ev){
    var t45 = Js_of_ocaml_Js[52][1];
    return unsafeCoerceEvent(t45.WheelEvent, ev);
   }
   function mouseScrollEvent(ev){
    var t46 = Js_of_ocaml_Js[52][1];
    return unsafeCoerceEvent(t46.MouseScrollEvent, ev);
   }
   function popStateEvent(ev){
    var t47 = Js_of_ocaml_Js[52][1];
    return unsafeCoerceEvent(t47.PopStateEvent, ev);
   }
   function messageEvent(ev){
    var t48 = Js_of_ocaml_Js[52][1];
    return unsafeCoerceEvent(t48.MessageEvent, ev);
   }
   var eventTarget = Js_of_ocaml_Dom[13];
   function eventRelatedTarget(t49){return t49.relatedTarget;}
   function eventAbsolutePosition(t55){
    var body = document.body, html = document.documentElement;
    return [0,
            t55.clientX + body.scrollLeft + html.scrollLeft,
            t55.clientY + body.scrollTop + html.scrollTop];
   }
   function eventAbsolutePosition$0(t59){
    return Js_of_ocaml_Js[6][7].call
            (null,
             t59.pageX,
             function(param){return eventAbsolutePosition(t59);},
             function(x){
              return Js_of_ocaml_Js[6][7].call
                      (null,
                       t59.pageY,
                       function(param){return eventAbsolutePosition(t59);},
                       function(y){return [0, x, y];});
             });
   }
   function elementClientPosition(t60){
    var
     t66 = t60.getBoundingClientRect(),
     body = document.body,
     html = document.documentElement;
    return [0,
            ((t66.left | 0) - body.clientLeft | 0) - html.clientLeft | 0,
            ((t66.top | 0) - body.clientTop | 0) - html.clientTop | 0];
   }
   function getDocumentScroll(param){
    var body = document.body, html = document.documentElement;
    return [0,
            body.scrollLeft + html.scrollLeft,
            body.scrollTop + html.scrollTop];
   }
   function buttonPressed(t76){
    return Js_of_ocaml_Js[6][7].call
            (null,
             t76.which,
             function(param){
              var switcher = t76.button - 1 | 0;
              if(3 >= switcher >>> 0)
               switch(switcher){
                 case 0:
                  return 1;
                 case 1:
                  return 3;
                 case 3:
                  return 2;
               }
              return 0;
             },
             function(x){return x;});
   }
   function addMousewheelEventListenerWith(e, capture, once, passive, h){
    return addEventListenerWithOptions
            (e,
             wheel,
             capture,
             once,
             passive,
             handler
              (function(t77){
                var
                 dx =
                   (-
                   Js_of_ocaml_Js[6][8].call
                    (null, t77.wheelDeltaX, function(param){return 0;})
                   | 0)
                   / 40
                   | 0,
                 dy =
                   (-
                   Js_of_ocaml_Js[6][8].call
                    (null,
                     t77.wheelDeltaY,
                     function(param){return t77.wheelDelta;})
                   | 0)
                   / 40
                   | 0;
                return caml_call3(h, t77, dx, dy);
               }));
   }
   function addMousewheelEventListener(e, h, capt){
    return addMousewheelEventListenerWith(e, [0, capt], 0, 0, h);
   }
   function try_code(v){
    var
     match = caml_string_of_jsstring(v),
     switch$ = caml_string_compare(match, "KeyH");
    if(0 <= switch$){
     if(0 >= switch$) return 8;
     var switch$0 = caml_string_compare(match, "Numpad4");
     if(0 <= switch$0){
      if(0 >= switch$0) return 72;
      var switch$1 = caml_string_compare(match, "PageUp");
      if(0 <= switch$1){
       if(0 >= switch$1) return 98;
       var switch$2 = caml_string_compare(match, "ShiftRight");
       if(0 <= switch$2){
        if(0 >= switch$2) return 91;
        if(match === "Slash") return 55;
        if(match === "Space") return 41;
        if(match === "Tab") return 39;
        if(match === "VolumeDown") return 103;
        if(match === "VolumeMute") return 102;
        if(match === "VolumeUp") return 104;
       }
       else{
        if(match === "Pause") return 123;
        if(match === "Period") return 54;
        if(match === "PrintScreen") return 120;
        if(match === "Quote") return 50;
        if(match === "ScrollLock") return 119;
        if(match === "Semicolon") return 49;
        if(match === "ShiftLeft") return 90;
       }
      }
      else{
       var switch$3 = caml_string_compare(match, "NumpadDivide");
       if(0 <= switch$3){
        if(0 >= switch$3) return 84;
        if(match === "NumpadEnter") return 83;
        if(match === "NumpadEqual") return 82;
        if(match === "NumpadMultiply") return 78;
        if(match === "NumpadSubtract") return 79;
        if(match === "OSLeft") return 117;
        if(match === "OSRight") return 118;
        if(match === "PageDown") return 99;
       }
       else{
        if(match === "Numpad5") return 73;
        if(match === "Numpad6") return 74;
        if(match === "Numpad7") return 75;
        if(match === "Numpad8") return 76;
        if(match === "Numpad9") return 77;
        if(match === "NumpadAdd") return 80;
        if(match === "NumpadDecimal") return 81;
       }
      }
     }
     else{
      var switch$4 = caml_string_compare(match, "KeyX");
      if(0 <= switch$4){
       if(0 >= switch$4) return 24;
       var switch$5 = caml_string_compare(match, "MetaRight");
       if(0 <= switch$5){
        if(0 >= switch$5) return 89;
        if(match === "Minus") return 37;
        if(match === "NumLock") return 85;
        if(match === "Numpad0") return 68;
        if(match === "Numpad1") return 69;
        if(match === "Numpad2") return 70;
        if(match === "Numpad3") return 71;
       }
       else{
        if(match === "KeyY") return 25;
        if(match === "KeyZ") return 26;
        if(match === "MediaPlayPause") return 107;
        if(match === "MediaStop") return 108;
        if(match === "MediaTrackNext") return 106;
        if(match === "MediaTrackPrevious") return 105;
        if(match === "MetaLeft") return 88;
       }
      }
      else{
       var switch$6 = caml_string_compare(match, "KeyP");
       if(0 <= switch$6){
        if(0 >= switch$6) return 16;
        if(match === "KeyQ") return 17;
        if(match === "KeyR") return 18;
        if(match === "KeyS") return 19;
        if(match === "KeyT") return 20;
        if(match === "KeyU") return 21;
        if(match === "KeyV") return 22;
        if(match === "KeyW") return 23;
       }
       else{
        if(match === "KeyI") return 9;
        if(match === "KeyJ") return 10;
        if(match === "KeyK") return 11;
        if(match === "KeyL") return 12;
        if(match === "KeyM") return 13;
        if(match === "KeyN") return 14;
        if(match === "KeyO") return 15;
       }
      }
     }
    }
    else{
     var switch$7 = caml_string_compare(match, "Digit6");
     if(0 <= switch$7){
      if(0 >= switch$7) return 33;
      var switch$8 = caml_string_compare(match, "F6");
      if(0 <= switch$8){
       if(0 >= switch$8) return 61;
       var switch$9 = caml_string_compare(match, "KeyA");
       if(0 <= switch$9){
        if(0 >= switch$9) return 1;
        if(match === "KeyB") return 2;
        if(match === "KeyC") return 3;
        if(match === "KeyD") return 4;
        if(match === "KeyE") return 5;
        if(match === "KeyF") return 6;
        if(match === "KeyG") return 7;
       }
       else{
        if(match === "F7") return 62;
        if(match === "F8") return 63;
        if(match === "F9") return 64;
        if(match === "Home") return 100;
        if(match === "Insert") return 44;
        if(match === "IntlBackslash") return 121;
        if(match === "IntlYen") return 122;
       }
      }
      else{
       var switch$10 = caml_string_compare(match, "F1");
       if(0 <= switch$10){
        if(0 >= switch$10) return 56;
        if(match === "F10") return 65;
        if(match === "F11") return 66;
        if(match === "F12") return 67;
        if(match === "F2") return 57;
        if(match === "F3") return 58;
        if(match === "F4") return 59;
        if(match === "F5") return 60;
       }
       else{
        if(match === "Digit7") return 34;
        if(match === "Digit8") return 35;
        if(match === "Digit9") return 36;
        if(match === "End") return 101;
        if(match === "Enter") return 40;
        if(match === "Equal") return 38;
        if(match === "Escape") return 42;
       }
      }
     }
     else{
      var switch$11 = caml_string_compare(match, "BrowserRefresh");
      if(0 <= switch$11){
       if(0 >= switch$11) return 113;
       var switch$12 = caml_string_compare(match, "Delete");
       if(0 <= switch$12){
        if(0 >= switch$12) return 45;
        if(match === "Digit0") return 27;
        if(match === "Digit1") return 28;
        if(match === "Digit2") return 29;
        if(match === "Digit3") return 30;
        if(match === "Digit4") return 31;
        if(match === "Digit5") return 32;
       }
       else{
        if(match === "BrowserSearch") return 110;
        if(match === "BrowserStop") return 114;
        if(match === "CapsLock") return 46;
        if(match === "Comma") return 53;
        if(match === "ContextMenu") return 109;
        if(match === "ControlLeft") return 86;
        if(match === "ControlRight") return 87;
       }
      }
      else{
       var switch$13 = caml_string_compare(match, "Backslash");
       if(0 <= switch$13){
        if(0 >= switch$13) return 52;
        if(match === "Backspace") return 43;
        if(match === "BracketLeft") return 47;
        if(match === "BracketRight") return 48;
        if(match === "BrowserBack") return 116;
        if(match === "BrowserFavorites") return 112;
        if(match === "BrowserForward") return 115;
        if(match === "BrowserHome") return 111;
       }
       else{
        if(match === "AltLeft") return 92;
        if(match === "AltRight") return 93;
        if(match === "ArrowDown") return 97;
        if(match === "ArrowLeft") return 94;
        if(match === "ArrowRight") return 95;
        if(match === "ArrowUp") return 96;
        if(match === "Backquote") return 51;
       }
      }
     }
    }
    return 0;
   }
   function try_key_code_normal(param){
    var switcher = param - 8 | 0;
    if(214 >= switcher >>> 0){
     var a = switcher;
     if(67 <= a)
      switch(a){
        case 67:
         return 11;
        case 68:
         return 12;
        case 69:
         return 13;
        case 70:
         return 14;
        case 71:
         return 15;
        case 72:
         return 16;
        case 73:
         return 17;
        case 74:
         return 18;
        case 75:
         return 19;
        case 76:
         return 20;
        case 77:
         return 21;
        case 78:
         return 22;
        case 79:
         return 23;
        case 80:
         return 24;
        case 81:
         return 25;
        case 82:
         return 26;
        case 85:
         return 109;
        case 104:
         return 56;
        case 105:
         return 57;
        case 106:
         return 58;
        case 107:
         return 59;
        case 108:
         return 60;
        case 109:
         return 61;
        case 110:
         return 62;
        case 111:
         return 63;
        case 112:
         return 64;
        case 113:
         return 65;
        case 114:
         return 66;
        case 115:
         return 67;
        case 137:
         return 119;
        case 178:
         return 49;
        case 179:
         return 38;
        case 180:
         return 53;
        case 181:
         return 37;
        case 182:
         return 54;
        case 183:
         return 55;
        case 184:
         return 51;
        case 211:
         return 47;
        case 212:
         return 52;
        case 213:
         return 48;
        case 214:
         return 50;
      }
     else
      switch(a){
        case 0:
         return 43;
        case 1:
         return 39;
        case 5:
         return 40;
        case 11:
         return 123;
        case 12:
         return 46;
        case 19:
         return 42;
        case 24:
         return 41;
        case 25:
         return 98;
        case 26:
         return 99;
        case 27:
         return 101;
        case 28:
         return 100;
        case 29:
         return 94;
        case 30:
         return 96;
        case 31:
         return 95;
        case 32:
         return 97;
        case 34:
         return 120;
        case 37:
         return 44;
        case 38:
         return 45;
        case 40:
         return 27;
        case 41:
         return 28;
        case 42:
         return 29;
        case 43:
         return 30;
        case 44:
         return 31;
        case 45:
         return 32;
        case 46:
         return 33;
        case 47:
         return 34;
        case 48:
         return 35;
        case 49:
         return 36;
        case 57:
         return 1;
        case 58:
         return 2;
        case 59:
         return 3;
        case 60:
         return 4;
        case 61:
         return 5;
        case 62:
         return 6;
        case 63:
         return 7;
        case 64:
         return 8;
        case 65:
         return 9;
        case 66:
         return 10;
      }
    }
    return 0;
   }
   function make_unidentified(param){return 0;}
   function of_event(evt){
    var value = evt.keyCode, switcher = evt.location - 1 | 0;
    if(2 < switcher >>> 0)
     var f = function(v){return v;};
    else
     switch(switcher){
       case 0:
        var
         value$3 = evt.keyCode,
         f =
           function(v){
            if(v) return v;
            if(19 <= value$3){
             if(91 === value$3) return 88;
            }
            else if(16 <= value$3)
             switch(value$3 - 16 | 0){
               case 0:
                return 90;
               case 1:
                return 86;
               default: return 92;
             }
            return 0;
           };
        break;
       case 1:
        var
         value$2 = evt.keyCode,
         f =
           function(v){
            if(v) return v;
            if(19 <= value$2){
             if(91 === value$2) return 89;
            }
            else if(16 <= value$2)
             switch(value$2 - 16 | 0){
               case 0:
                return 91;
               case 1:
                return 87;
               default: return 93;
             }
            return 0;
           };
        break;
       default:
        var
         value$1 = evt.keyCode,
         f =
           function(v){
            if(v) return v;
            if(47 <= value$1){
             var switcher = value$1 - 96 | 0;
             if(15 >= switcher >>> 0)
              switch(switcher){
                case 0:
                 return 68;
                case 1:
                 return 69;
                case 2:
                 return 70;
                case 3:
                 return 71;
                case 4:
                 return 72;
                case 5:
                 return 73;
                case 6:
                 return 74;
                case 7:
                 return 75;
                case 8:
                 return 76;
                case 9:
                 return 77;
                case 10:
                 return 78;
                case 11:
                 return 80;
                case 13:
                 return 79;
                case 14:
                 return 81;
                case 15:
                 return 84;
              }
            }
            else if(12 <= value$1)
             switch(value$1 - 12 | 0){
               case 0:
                return 73;
               case 1:
                return 83;
               case 21:
                return 77;
               case 22:
                return 71;
               case 23:
                return 69;
               case 24:
                return 75;
               case 25:
                return 72;
               case 26:
                return 76;
               case 27:
                return 74;
               case 28:
                return 70;
               case 33:
                return 68;
               case 34:
                return 81;
             }
            return 0;
           };
     }
    var
     value$0 = evt.code,
     x = Js_of_ocaml_Js[6][7].call(null, value$0, make_unidentified, try_code),
     x$0 = f(x);
    return x$0 ? x$0 : try_key_code_normal(value);
   }
   function char_of_int(value){
    if(0 >= value) return 0;
    try{var a = [0, Stdlib_Uchar[8].call(null, value)]; return a;}
    catch(exn){return 0;}
   }
   function empty_string(param){return cst$0;}
   function none(param){return 0;}
   function of_event$0(evt){
    var
     key = Js_of_ocaml_Js[6][8].call(null, evt.key, empty_string),
     match = key.length;
    return 0 === match
            ? Js_of_ocaml_Js[6][7].call(null, evt.charCode, none, char_of_int)
            : 1 === match ? char_of_int(key.charCodeAt(0) | 0) : 0;
   }
   function element$0(a){return a;}
   function tagged(t88){
    var
     t89 = t88.tagName,
     tag = runtime.caml_string_of_jsbytes(t89.toLowerCase());
    if(0 === runtime.caml_ml_string_length(tag)) return [62, t88];
    var switcher = runtime.caml_string_unsafe_get(tag, 0) - 97 | 0;
    if(21 >= switcher >>> 0)
     switch(switcher){
       case 0:
        return tag !== cst_a$0
                ? tag
                  !== cst_area$0
                  ? tag !== cst_audio$0 ? [62, t88] : [2, t88]
                  : [1, t88]
                : [0, t88];
       case 1:
        return tag !== cst_base$0
                ? tag
                  !== cst_blockquote$0
                  ? tag
                    !== cst_body$0
                    ? tag
                      !== cst_br$0
                      ? tag !== cst_button$1 ? [62, t88] : [7, t88]
                      : [6, t88]
                    : [5, t88]
                  : [4, t88]
                : [3, t88];
       case 2:
        return tag !== cst_canvas$0
                ? tag
                  !== cst_caption$0
                  ? tag
                    !== cst_col$0
                    ? tag !== cst_colgroup$0 ? [62, t88] : [11, t88]
                    : [10, t88]
                  : [9, t88]
                : [8, t88];
       case 3:
        return tag !== cst_del$0
                ? tag
                  !== cst_div$0
                  ? tag !== cst_dl$0 ? [62, t88] : [15, t88]
                  : [14, t88]
                : [12, t88];
       case 4:
        return tag !== cst_embed$0 ? [62, t88] : [16, t88];
       case 5:
        return tag !== cst_fieldset$0
                ? tag
                  !== cst_form$0
                  ? tag
                    !== cst_frame$0
                    ? tag !== cst_frameset$0 ? [62, t88] : [19, t88]
                    : [20, t88]
                  : [18, t88]
                : [17, t88];
       case 7:
        return tag !== cst_h1$0
                ? tag
                  !== cst_h2$0
                  ? tag
                    !== cst_h3$0
                    ? tag
                      !== cst_h4$0
                      ? tag
                        !== cst_h5$0
                        ? tag
                          !== cst_h6$0
                          ? tag
                            !== cst_head$0
                            ? tag
                              !== cst_hr$0
                              ? tag !== cst_html$0 ? [62, t88] : [29, t88]
                              : [28, t88]
                            : [27, t88]
                          : [26, t88]
                        : [25, t88]
                      : [24, t88]
                    : [23, t88]
                  : [22, t88]
                : [21, t88];
       case 8:
        return tag !== cst_iframe$0
                ? tag
                  !== cst_img$0
                  ? tag
                    !== cst_input$1
                    ? tag !== cst_ins$0 ? [62, t88] : [33, t88]
                    : [32, t88]
                  : [31, t88]
                : [30, t88];
       case 11:
        return tag !== cst_label$0
                ? tag
                  !== cst_legend$0
                  ? tag
                    !== cst_li$0
                    ? tag !== cst_link$0 ? [62, t88] : [37, t88]
                    : [36, t88]
                  : [35, t88]
                : [34, t88];
       case 12:
        return tag !== cst_map$0
                ? tag !== cst_meta$0 ? [62, t88] : [39, t88]
                : [38, t88];
       case 14:
        return tag !== cst_object$0
                ? tag
                  !== cst_ol$0
                  ? tag
                    !== cst_optgroup$0
                    ? tag !== cst_option$0 ? [62, t88] : [43, t88]
                    : [42, t88]
                  : [41, t88]
                : [40, t88];
       case 15:
        return tag !== cst_p$0
                ? tag
                  !== cst_param$0
                  ? tag !== cst_pre$0 ? [62, t88] : [46, t88]
                  : [45, t88]
                : [44, t88];
       case 16:
        return tag !== cst_q$0 ? [62, t88] : [47, t88];
       case 18:
        return tag !== cst_script$0
                ? tag
                  !== cst_select$1
                  ? tag !== cst_style$0 ? [62, t88] : [50, t88]
                  : [49, t88]
                : [48, t88];
       case 19:
        return tag !== cst_table$0
                ? tag
                  !== cst_tbody$0
                  ? tag
                    !== cst_td$0
                    ? tag
                      !== cst_textarea$1
                      ? tag
                        !== cst_tfoot$0
                        ? tag
                          !== cst_th$0
                          ? tag
                            !== cst_thead$0
                            ? tag
                              !== cst_title$0
                              ? tag !== cst_tr$0 ? [62, t88] : [59, t88]
                              : [58, t88]
                            : [57, t88]
                          : [56, t88]
                        : [55, t88]
                      : [54, t88]
                    : [53, t88]
                  : [52, t88]
                : [51, t88];
       case 20:
        return tag !== cst_ul$0 ? [62, t88] : [60, t88];
       case 21:
        return tag !== cst_video$0 ? [62, t88] : [61, t88];
     }
    return [62, t88];
   }
   function opt_tagged(e){
    return Js_of_ocaml_Js[5][7].call
            (null,
             e,
             function(param){return 0;},
             function(e){return [0, tagged(e)];});
   }
   function taggedEvent(ev){
    var a = mouseEvent(ev);
    return Js_of_ocaml_Js[5][7].call
            (null,
             a,
             function(param){
              var a = keyboardEvent(ev);
              return Js_of_ocaml_Js[5][7].call
                      (null,
                       a,
                       function(param){
                        var a = wheelEvent(ev);
                        return Js_of_ocaml_Js[5][7].call
                                (null,
                                 a,
                                 function(param){
                                  var a = mouseScrollEvent(ev);
                                  return Js_of_ocaml_Js[5][7].call
                                          (null,
                                           a,
                                           function(param){
                                            var a = popStateEvent(ev);
                                            return Js_of_ocaml_Js[5][7].call
                                                    (null,
                                                     a,
                                                     function(param){
                                                      var a = messageEvent(ev);
                                                      return Js_of_ocaml_Js[5][7].call
                                                              (null,
                                                               a,
                                                               function(param){return [6, ev];},
                                                               function(ev){return [2, ev];});
                                                     },
                                                     function(ev){return [5, ev];});
                                           },
                                           function(ev){return [4, ev];});
                                 },
                                 function(ev){return [3, ev];});
                       },
                       function(ev){return [1, ev];});
             },
             function(ev){return [0, ev];});
   }
   function opt_taggedEvent(ev){
    return Js_of_ocaml_Js[5][7].call
            (null,
             ev,
             function(param){return 0;},
             function(ev){return [0, taggedEvent(ev)];});
   }
   function stopPropagation(t93){
    return Js_of_ocaml_Js[6][7].call
            (null,
             t93.stopPropagation,
             function(param){
              var t91 = Js_of_ocaml_Js[7];
              return t93.cancelBubble = t91;
             },
             function(param){return t93.stopPropagation();});
   }
   var
    requestAnimationFrame =
      runtime.caml_js_pure_expr
       (function(param){
         var
          l =
            [0,
             window.requestAnimationFrame,
             [0,
              window.mozRequestAnimationFrame,
              [0,
               window.webkitRequestAnimationFrame,
               [0,
                window.oRequestAnimationFrame,
                [0, window.msRequestAnimationFrame, 0]]]]];
         try{
          var
           req =
             Stdlib_List[39].call
              (null,
               function(c){return Js_of_ocaml_Js[6][5].call(null, c);},
               l),
           a = function(callback){return req(callback);};
          return a;
         }
         catch(exn$0){
          var exn = caml_wrap_exception(exn$0);
          if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
          var
           now =
             function(param){
              var t99 = Js_of_ocaml_Js[26], t100 = new t99;
              return t100.getTime();
             },
           last = [0, now(0)];
          return function(callback){
           var
            t = now(0),
            dt = last[1] + 16.666666666666668 - t,
            t103 = dt < 0. ? 0. : dt;
           last[1] = t;
           window.setTimeout(callback, t103);
           return 0;};
         }
        });
   function hasPushState(param){
    var t105 = window.history;
    return Js_of_ocaml_Js[6][5].call(null, t105.pushState);
   }
   function hasPlaceholder(param){
    var t106 = unsafeCreateElementEx(0, 0, document, cst_input);
    return Js_of_ocaml_Js[6][5].call(null, t106.placeholder);
   }
   function hasRequired(param){
    var t107 = unsafeCreateElementEx(0, 0, document, cst_input);
    return Js_of_ocaml_Js[6][5].call(null, t107.required);
   }
   var overflow_limit = 2147483000.;
   function setTimeout(callback, d){
    var id = [0, 0];
    function loop(d, param){
     if(2147483000. < d)
      var remain = d - 2147483000., step = overflow_limit;
     else
      var remain = 0., step = d;
     var
      cb = remain === 0. ? callback : function(a){return loop(remain, a);},
      t109 = runtime.caml_js_wrap_callback(cb);
     id[1] = [0, window.setTimeout(t109, step)];
     return 0;
    }
    loop(d, 0);
    return id;
   }
   function clearTimeout(id){
    var match = id[1];
    if(! match) return 0;
    var t112 = match[1];
    id[1] = 0;
    return window.clearTimeout(t112);
   }
   function js_array_of_collection(c){return [].slice.call(c);}
   var
    Js_of_ocaml_Dom_html =
      [0,
       d,
       document,
       getElementById_opt,
       getElementById_exn,
       getElementById_coerce,
       getElementById,
       location_origin,
       window,
       no_handler,
       handler,
       full_handler,
       invoke_handler,
       eventTarget,
       eventRelatedTarget,
       [0,
        cancel,
        click,
        close,
        copy,
        cut,
        paste,
        dblclick,
        mousedown,
        mouseup,
        mouseover,
        mousemove,
        mouseout,
        keypress,
        keydown,
        keyup,
        mousewheel,
        DOMMouseScroll,
        wheel,
        touchstart,
        touchmove,
        touchend,
        touchcancel,
        dragstart,
        dragend,
        dragenter,
        dragover,
        dragleave,
        drag,
        drop,
        hashchange,
        change,
        input,
        timeupdate,
        submit,
        scroll,
        focus,
        blur,
        load,
        unload,
        beforeunload,
        resize,
        orientationchange,
        popstate,
        error,
        abort,
        select,
        online,
        offline,
        checking,
        noupdate,
        downloading,
        progress,
        updateready,
        cached,
        obsolete,
        domContentLoaded,
        animationstart,
        animationend,
        animationiteration,
        animationcancel,
        transitionrun,
        transitionstart,
        transitionend,
        transitioncancel,
        canplay,
        canplaythrough,
        durationchange,
        emptied,
        ended,
        gotpointercapture,
        loadeddata,
        loadedmetadata,
        loadstart,
        lostpointercapture,
        message,
        pause,
        play,
        playing,
        pointerenter,
        pointercancel,
        pointerdown,
        pointerleave,
        pointermove,
        pointerout,
        pointerover,
        pointerup,
        ratechange,
        seeked,
        seeking,
        stalled,
        suspend,
        volumechange,
        waiting,
        toggle,
        make],
       addEventListenerWithOptions,
       addEventListener,
       removeEventListener,
       addMousewheelEventListenerWith,
       addMousewheelEventListener,
       createCustomEvent,
       buttonPressed,
       eventAbsolutePosition$0,
       elementClientPosition,
       getDocumentScroll,
       [0, of_event, try_key_code_normal],
       [0, of_event$0],
       createHtml,
       createHead,
       createLink,
       createTitle,
       createMeta,
       createBase,
       createStyle,
       createBody,
       createForm,
       createOptgroup,
       createOption,
       createSelect,
       createInput,
       createTextarea,
       createButton,
       createLabel,
       createFieldset,
       createLegend,
       createUl,
       createOl,
       createDl,
       createLi,
       createDialog,
       createDiv,
       createEmbed,
       createP,
       createH1,
       createH2,
       createH3,
       createH4,
       createH5,
       createH6,
       createQ,
       createBlockquote,
       createPre,
       createBr,
       createHr,
       createIns,
       createDel,
       createA,
       createImg,
       createObject,
       createParam,
       createMap,
       createArea,
       createScript,
       createTable,
       createCaption,
       createCol,
       createColgroup,
       createThead,
       createTfoot,
       createTbody,
       createTr,
       createTh,
       createTd,
       createSub,
       createSup,
       createSpan,
       createTt,
       createI,
       createB,
       createBig,
       createSmall,
       createEm,
       createStrong,
       createCite,
       createDfn,
       createCode,
       createSamp,
       createKbd,
       createVar,
       createAbbr,
       createDd,
       createDt,
       createNoscript,
       createAddress,
       createFrameset,
       createFrame,
       createIframe,
       createAudio,
       createVideo,
       Canvas_not_available,
       createCanvas,
       element$0,
       tagged,
       opt_tagged,
       taggedEvent,
       opt_taggedEvent,
       stopPropagation,
       [0,
        element,
        a,
        area,
        audio,
        base,
        blockquote,
        body,
        br,
        button,
        canvas,
        caption,
        col,
        colgroup,
        del,
        details,
        div,
        embed,
        dl,
        fieldset,
        form,
        frameset,
        frame,
        h1,
        h2,
        h3,
        h4,
        h5,
        h6,
        head,
        hr,
        html,
        iframe,
        img,
        input$0,
        ins,
        label,
        legend,
        li,
        link,
        map,
        meta,
        object,
        ol,
        optgroup,
        option,
        p,
        function(e){return unsafeCoerce(cst_param, e);},
        pre,
        q,
        script,
        select$0,
        style,
        table,
        tbody,
        td,
        textarea,
        tfoot,
        th,
        thead,
        title,
        tr,
        ul,
        video,
        mouseEvent,
        keyboardEvent,
        wheelEvent,
        mouseScrollEvent,
        popStateEvent,
        messageEvent],
       setTimeout,
       clearTimeout,
       js_array_of_collection,
       requestAnimationFrame,
       decode_html_entities,
       hasPushState,
       hasPlaceholder,
       hasRequired];
   runtime.caml_register_global
    (538, Js_of_ocaml_Dom_html, "Js_of_ocaml__Dom_html");
   return;
  }
  (globalThis));

//# 2763 "../../lib/js_of_ocaml/.js_of_ocaml.objs/jsoo/default/js_of_ocaml.cma.js"
//# shape: Js_of_ocaml__Form:[N,N,F(2),F(1),F(1),F(1),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Stdlib_List = global_data.Stdlib__List,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Stdlib_Array = global_data.Stdlib__Array,
    t0 = Js_of_ocaml_Js[52][1],
    formData = t0.FormData,
    t1 = Js_of_ocaml_Js[52][1],
    formData_form = t1.FormData,
    a = [0, 1],
    b = [0, "lib/js_of_ocaml/form.ml", 173, 13];
   function filter_map(f, param$0){
    var param = param$0;
    for(;;){
     if(! param) return 0;
     var q = param[2], v = param[1], match = caml_call1(f, v);
     if(match){var v$0 = match[1]; return [0, v$0, filter_map(f, q)];}
     param = q;
    }
   }
   function have_content(elt){
    var
     t3 = elt.name,
     a = 0 < t3.length ? 1 : 0,
     b = a ? 1 - (elt.disabled | 0) : a;
    return b;
   }
   function get_element_content(get$0, v){
    var match$2 = Js_of_ocaml_Dom_html[113].call(null, v);
    switch(match$2[0]){
      case 32:
       var elt = match$2[1], get = get$0 ? get$0[1] : 0;
       if(! have_content(elt)) return 0;
       var
        name$1 = caml_string_of_jsstring(elt.name),
        value = elt.value,
        t20 = elt.type,
        match = runtime.caml_string_of_jsbytes(t20.toLowerCase());
       a:
       if(match !== "checkbox"){
        if(match === "file"){
         if(get) return [0, [0, name$1, [0, -976970511, value]], 0];
         var list = elt.files;
         if(0 === list.length)
          return [0, [0, name$1, [0, -976970511, ""]], 0];
         var match$0 = Js_of_ocaml_Js[6][10].call(null, elt.multiple);
         if(match$0 && match$0[1]){
          var
           a =
             Stdlib_Array[1].call
              (null, list.length, function(t29){return list.item(t29);});
          return filter_map
                  (function(f){
                    var match = Js_of_ocaml_Js[5][10].call(null, f);
                    if(! match) return 0;
                    var file = match[1];
                    return [0, [0, name$1, [0, 781515420, file]]];
                   },
                   Stdlib_Array[10].call(null, a));
         }
         var b = list.item(0), match$1 = Js_of_ocaml_Js[5][10].call(null, b);
         if(! match$1) return 0;
         var file = match$1[1];
         return [0, [0, name$1, [0, 781515420, file]], 0];
        }
        b:
        if(match !== "password"){
         if(match === "radio") break a;
         if(match !== "reset" && match !== "submit"){
          if(match !== "text")
           return [0, [0, name$1, [0, -976970511, value]], 0];
          break b;
         }
         return 0;
        }
        return [0, [0, name$1, [0, -976970511, value]], 0];
       }
       return elt.checked | 0
               ? [0, [0, name$1, [0, -976970511, value]], 0]
               : 0;
      case 49:
       var elt$0 = match$2[1];
       if(! have_content(elt$0)) return 0;
       var name$0 = caml_string_of_jsstring(elt$0.name);
       if(! (elt$0.multiple | 0))
        return [0, [0, name$0, [0, -976970511, elt$0.value]], 0];
       var
        t10 = elt$0.options,
        options =
          Stdlib_Array[1].call
           (null,
            t10.length,
            function(t13){
             var t12 = elt$0.options, a = t12.item(t13);
             return Js_of_ocaml_Js[5][10].call(null, a);
            });
       return filter_map
               (function(param){
                 if(! param) return 0;
                 var t14 = param[1];
                 return t14.selected | 0
                         ? [0, [0, name$0, [0, -976970511, t14.value]]]
                         : 0;
                },
                Stdlib_Array[10].call(null, options));
      case 54:
       var elt$1 = match$2[1];
       if(! have_content(elt$1)) return 0;
       var name = caml_string_of_jsstring(elt$1.name);
       return [0, [0, name, [0, -976970511, elt$1.value]], 0];
      default: return 0;
    }
   }
   function form_elements(get, form){
    var t34 = form.elements, i$1 = t34.length - 1 | 0, acc = 0, t32 = i$1;
    for(;;){
     if(0 > t32) break;
     var
      t31 = form.elements,
      a = t31.item(t32),
      match = Js_of_ocaml_Js[5][10].call(null, a);
     if(match){
      var x = match[1], i = t32 - 1 | 0, acc$0 = [0, x, acc];
      acc = acc$0;
      t32 = i;
     }
     else{var i$0 = t32 - t32 | 0; t32 = i$0;}
    }
    var
     b =
       Stdlib_List[20].call
        (null, function(v){return get_element_content(get, v);}, acc);
    return Stdlib_List[15].call(null, b);
   }
   function append(form_contents, form_elt){
    var variant = form_contents[1];
    if(891486873 <= variant){
     var list = form_contents[2];
     list[1] = [0, form_elt, list[1]];
     return 0;
    }
    var
     t38 = form_contents[2],
     match = form_elt[2],
     variant$0 = match[1],
     name = form_elt[1];
    if(781515420 <= variant$0){
     var file = match[2], t39 = caml_jsstring_of_string(name);
     return t38.append(t39, file);
    }
    var t37 = match[2], t36 = caml_jsstring_of_string(name);
    return t38.append(t36, t37);
   }
   function empty_form_contents(param){
    var
     a = Js_of_ocaml_Js[4].call(null, formData),
     match = Js_of_ocaml_Js[6][10].call(null, a);
    if(! match) return [0, 891486873, [0, 0]];
    var constr = match[1];
    return [0, 808620462, new constr];
   }
   function post_form_contents(form){
    var contents = empty_form_contents(0), a = form_elements(0, form);
    Stdlib_List[18].call(null, function(a){return append(contents, a);}, a);
    return contents;
   }
   function get_form_contents(form){
    var c = form_elements(a, form);
    return Stdlib_List[20].call
            (null,
             function(param){
              var match = param[2];
              if(typeof match !== "number"){
               var variant = match[1];
               if(-976970511 === variant){
                var s = match[2], name = param[1];
                return [0, name, caml_string_of_jsstring(s)];
               }
              }
              throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
             },
             c);
   }
   var
    Js_of_ocaml_Form =
      [0,
       formData,
       formData_form,
       append,
       post_form_contents,
       get_form_contents,
       empty_form_contents,
       form_elements];
   runtime.caml_register_global(48, Js_of_ocaml_Form, "Js_of_ocaml__Form");
   return;
  }
  (globalThis));

//# 2979 "../../lib/js_of_ocaml/.js_of_ocaml.objs/jsoo/default/js_of_ocaml.cma.js"
//# shape: Js_of_ocaml__XmlHttpRequest:[F(1),[N,N,N,N,N,N,N,N]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    readystatechange = Js_of_ocaml_Dom[14][1].call(null, "readystatechange"),
    loadstart = Js_of_ocaml_Dom[14][1].call(null, "loadstart"),
    progress = Js_of_ocaml_Dom[14][1].call(null, "progress"),
    abort = Js_of_ocaml_Dom[14][1].call(null, "abort"),
    error = Js_of_ocaml_Dom[14][1].call(null, "error"),
    load = Js_of_ocaml_Dom[14][1].call(null, "load"),
    timeout = Js_of_ocaml_Dom[14][1].call(null, "timeout"),
    loadend = Js_of_ocaml_Dom[14][1].call(null, "loadend"),
    Event =
      [0,
       readystatechange,
       loadstart,
       progress,
       abort,
       error,
       load,
       timeout,
       loadend],
    Js_of_ocaml_XmlHttpRequest =
      [0, runtime.caml_xmlhttprequest_create, Event];
   runtime.caml_register_global
    (9, Js_of_ocaml_XmlHttpRequest, "Js_of_ocaml__XmlHttpRequest");
   return;
  }
  (globalThis));

//# 3163 "../../lib/js_of_ocaml/.js_of_ocaml.objs/jsoo/default/js_of_ocaml.cma.js"
//# shape: Js_of_ocaml__Regexp:[F(1),F(1),F(2),F(1),F(1),F(1),F(3),F(3),F(3),F(1),F(2),F(3),F(3),F(2),F(3)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_g$0 = "g",
    caml_jsbytes_of_string = runtime.caml_jsbytes_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_of_jsbytes = runtime.caml_string_of_jsbytes,
    global_data = runtime.caml_get_global_data(),
    cst = "[\\][()\\\\|+*.?{}^$]",
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    cst_g = cst_g$0,
    a = [0, "lib/js_of_ocaml/regexp.ml", 34, 64];
   function regexp(s){
    var t1 = caml_jsbytes_of_string(s), t0 = Js_of_ocaml_Js[15];
    return new t0(t1, cst_g$0);
   }
   function regexp_case_fold(s){
    var t4 = caml_jsbytes_of_string(s), t3 = Js_of_ocaml_Js[15];
    return new t3(t4, "gi");
   }
   function regexp_with_flag(s, f){
    var
     t8 = runtime.caml_jsstring_of_string(Stdlib[28].call(null, cst_g, f)),
     t7 = caml_jsbytes_of_string(s),
     t6 = Js_of_ocaml_Js[15];
    return new t6(t7, t8);
   }
   function blunt_str_array_get(a$0, i){
    var b = Js_of_ocaml_Js[20].call(null, a$0, i);
    return caml_string_of_jsbytes
            (Js_of_ocaml_Js[6][8].call
              (null,
               b,
               function(param){
                throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
               }));
   }
   function string_match(t10, s, t9){
    t10.lastIndex = t9;
    var
     t12 = caml_jsbytes_of_string(s),
     a = Js_of_ocaml_Js[25],
     b = t10.exec(t12),
     c = Js_of_ocaml_Js[5][3].call(null, b, a);
    return Js_of_ocaml_Js[5][10].call(null, c);
   }
   function search(t14, s, t13){
    t14.lastIndex = t13;
    var
     t16 = caml_jsbytes_of_string(s),
     a = t14.exec(t16),
     b =
       Js_of_ocaml_Js[5][3].call
        (null,
         a,
         function(res_pre){
          var res = Js_of_ocaml_Js[25].call(null, res_pre);
          return [0, res.index, res];
         });
    return Js_of_ocaml_Js[5][10].call(null, b);
   }
   function matched_string(r){return blunt_str_array_get(r, 0);}
   function matched_group(r, i){
    var
     a = Js_of_ocaml_Js[20].call(null, r, i),
     b = Js_of_ocaml_Js[6][3].call(null, a, caml_string_of_jsbytes);
    return Js_of_ocaml_Js[6][10].call(null, b);
   }
   var t18 = Js_of_ocaml_Js[15], quote_repl_re = new t18("[$]", cst_g$0);
   function quote_repl(s){
    var t21 = caml_jsbytes_of_string(s);
    return t21.replace(quote_repl_re, "$$$$");
   }
   function global_replace(t25, s, s_by){
    t25.lastIndex = 0;
    var t28 = quote_repl(s_by), t26 = caml_jsbytes_of_string(s);
    return caml_string_of_jsbytes(t26.replace(t25, t28));
   }
   function replace_first(t29, s, s_by){
    var
     match = t29.multiline | 0,
     flags = t29.ignoreCase | 0 ? match ? "mi" : "i" : match ? "m" : "",
     t33 = t29.source,
     t32 = Js_of_ocaml_Js[15],
     t36 = new t32(t33, flags),
     t37 = quote_repl(s_by),
     t35 = caml_jsbytes_of_string(s);
    return caml_string_of_jsbytes(t35.replace(t36, t37));
   }
   function list_of_js_array(t38){
    var idx$1 = t38.length - 1 | 0, accu = 0, idx = idx$1;
    for(;;){
     if(0 > idx) return accu;
     var
      idx$0 = idx - 1 | 0,
      accu$0 = [0, blunt_str_array_get(t38, idx), accu];
     accu = accu$0;
     idx = idx$0;
    }
   }
   function split(t40, s){
    t40.lastIndex = 0;
    var t41 = caml_jsbytes_of_string(s), a = t41.split(t40);
    return list_of_js_array(Js_of_ocaml_Js[24].call(null, a));
   }
   function bounded_split(t44, s, t47){
    t44.lastIndex = 0;
    var t45 = caml_jsbytes_of_string(s), a = t45.split(t44, t47);
    return list_of_js_array(Js_of_ocaml_Js[24].call(null, a));
   }
   var quote_re = regexp(cst);
   function quote(s){
    var t48 = caml_jsbytes_of_string(s);
    return caml_string_of_jsbytes(t48.replace(quote_re, "\\$&"));
   }
   function regexp_string(s){return regexp(quote(s));}
   function regexp_string_case_fold(s){return regexp_case_fold(quote(s));}
   var
    Js_of_ocaml_Regexp =
      [0,
       regexp,
       regexp_case_fold,
       regexp_with_flag,
       quote,
       regexp_string,
       regexp_string_case_fold,
       string_match,
       search,
       search,
       matched_string,
       matched_group,
       global_replace,
       replace_first,
       split,
       bounded_split];
   runtime.caml_register_global(34, Js_of_ocaml_Regexp, "Js_of_ocaml__Regexp");
   return;
  }
  (globalThis));

//# 3310 "../../lib/js_of_ocaml/.js_of_ocaml.objs/jsoo/default/js_of_ocaml.cma.js"
//# shape: Js_of_ocaml__Url:[F(1),F(2),N,N,F(1),F(1),F(1),F(1),F(1),N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$24 = "",
    cst$29 = " ",
    cst$25 = "#",
    cst$27 = "/",
    cst$28 = ":",
    cst$26 = "?",
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_int_of_string = runtime.caml_int_of_string,
    caml_js_wrap_meth_callback = runtime.caml_js_wrap_meth_callback,
    caml_jsbytes_of_string = runtime.caml_jsbytes_of_string,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_of_jsbytes = runtime.caml_string_of_jsbytes,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    cst$10 = cst$24,
    cst$3 = cst$25,
    cst$4 = cst$26,
    cst$9 = cst$24,
    cst$5 = cst$27,
    cst$6 = cst$27,
    cst$8 = cst$28,
    cst$7 = cst$24,
    cst$18 = cst$24,
    cst$11 = cst$25,
    cst$12 = cst$26,
    cst$17 = cst$24,
    cst$13 = cst$27,
    cst$14 = cst$27,
    cst$16 = cst$28,
    cst$15 = cst$24,
    cst$23 = cst$24,
    cst$19 = cst$25,
    cst$20 = cst$26,
    cst$22 = cst$24,
    cst$21 = cst$27,
    cst$1 = "=",
    cst$2 = "&",
    cst$0 = cst$29,
    cst = "+",
    Js_of_ocaml_Import = global_data.Js_of_ocaml__Import,
    Stdlib = global_data.Stdlib;
   global_data.CamlinternalOO;
   var
    Stdlib_List = global_data.Stdlib__List,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Regexp = global_data.Js_of_ocaml__Regexp,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Local_exn = [248, "Js_of_ocaml__Url.Local_exn", caml_fresh_oo_id(0)];
   function interrupt(param){throw caml_maybe_attach_backtrace(Local_exn, 1);}
   var
    plus_re = Js_of_ocaml_Regexp[5].call(null, cst),
    t9 = Js_of_ocaml_Js[15],
    plus_re_js_string = new t9("\\+", "g"),
    cst_2B = "%2B";
   function urldecode_js_string_string(t14){
    plus_re_js_string.lastIndex = 0;
    var a = t14.replace(plus_re_js_string, cst$29);
    return caml_string_of_jsbytes(Js_of_ocaml_Js[44].call(null, a));
   }
   function urldecode(s){
    var
     a =
       caml_jsbytes_of_string
        (Js_of_ocaml_Regexp[12].call(null, plus_re, s, cst$0));
    return caml_string_of_jsbytes(Js_of_ocaml_Js[44].call(null, a));
   }
   function urlencode(opt, s){
    var with_plus = opt ? opt[1] : 1;
    if(! with_plus)
     return caml_string_of_jsbytes
             (Js_of_ocaml_Js[43].call(null, caml_jsbytes_of_string(s)));
    var
     s$0 =
       caml_string_of_jsbytes
        (Js_of_ocaml_Js[43].call(null, caml_jsbytes_of_string(s)));
    return Js_of_ocaml_Regexp[12].call(null, plus_re, s$0, cst_2B);
   }
   var
    Not_an_http_protocol =
      [248, "Js_of_ocaml__Url.Not_an_http_protocol", caml_fresh_oo_id(0)],
    b = [0, cst$24, 0];
   function path_of_path_string(s){
    var l = caml_ml_string_length(s);
    function aux(i){
     try{var a = Js_of_ocaml_Import[3][31].call(null, s, i, 47), j = a;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
      var j = l;
     }
     var word = Js_of_ocaml_Import[3][15].call(null, s, i, j - i | 0);
     return l <= j ? [0, word, 0] : [0, word, aux(j + 1 | 0)];
    }
    var a = aux(0);
    if(a && a[1] === cst$24){
     var match = a[2];
     if(! match) return 0;
     if(match[1] === cst$24 && ! match[2]) return b;
    }
    return a;
   }
   function encode_arguments(l){
    var
     a =
       Stdlib_List[20].call
        (null,
         function(param){
          var
           v = param[2],
           n = param[1],
           a = urlencode(0, v),
           b = Stdlib[28].call(null, cst$1, a),
           c = urlencode(0, n);
          return Stdlib[28].call(null, c, b);
         },
         l);
    return Js_of_ocaml_Import[3][7].call(null, cst$2, a);
   }
   function decode_arguments_js_string(t0){
    var
     t1 = caml_jsstring_of_string(Js_of_ocaml_Import[3][1].call(null, 1, 38)),
     a = t0.split(t1),
     arr = Js_of_ocaml_Js[24].call(null, a),
     len = arr.length;
    function aux(acc, idx$1){
     var idx = idx$1;
     for(;;){
      if(0 > idx) return acc;
      try{
       var
        a = Js_of_ocaml_Js[20].call(null, arr, idx),
        b =
          aux
           ([0,
             Js_of_ocaml_Js[6][7].call
              (null,
               a,
               interrupt,
               function(t2){
                var
                 t3 =
                   caml_jsstring_of_string
                    (Js_of_ocaml_Import[3][1].call(null, 1, 61)),
                 index = t2.indexOf(t3);
                function d(param){
                 var
                  y = param[2],
                  x = param[1],
                  a = urldecode_js_string_string(y);
                 return [0, urldecode_js_string_string(x), a];
                }
                if(0 <= index)
                 var
                  t8 = index + 1 | 0,
                  b = t2.slice(t8),
                  c = [0, t2.slice(0, index), b],
                  a = Js_of_ocaml_Js[4].call(null, c);
                else
                 var a = Js_of_ocaml_Js[3];
                return Js_of_ocaml_Js[6][7].call(null, a, interrupt, d);
               }),
             acc],
            idx - 1 | 0);
       return b;
      }
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(exn !== Local_exn) throw caml_maybe_attach_backtrace(exn, 0);
       var idx$0 = idx - 1 | 0;
       idx = idx$0;
      }
     }
    }
    return aux(0, len - 1 | 0);
   }
   function decode_arguments(s){
    return decode_arguments_js_string(caml_jsbytes_of_string(s));
   }
   var
    t19 = Js_of_ocaml_Js[14],
    url_re =
      new
       t19
       ("^([Hh][Tt][Tt][Pp][Ss]?)://([0-9a-zA-Z.-]+|\\[[0-9a-zA-Z.-]+\\]|\\[[0-9A-Fa-f:.]+\\])?(:([0-9]+))?(/([^\\?#]*)(\\?([^#]*))?(#(.*))?)?$"),
    t21 = Js_of_ocaml_Js[14],
    file_re =
      new t21("^([Ff][Ii][Ll][Ee])://([^\\?#]*)(\\?([^#]*))?(#(.*))?$"),
    cst_http = "http://",
    cst_https = "https://",
    cst_file = "file://";
   function url_of_js_string(t26){
    var a = url_re.exec(t26);
    return Js_of_ocaml_Js[5][7].call
            (null,
             a,
             function(param){
              var a = file_re.exec(t26);
              return Js_of_ocaml_Js[5][7].call
                      (null,
                       a,
                       function(param){return 0;},
                       function(handle){
                        var
                         res = Js_of_ocaml_Js[25].call(null, handle),
                         a = Js_of_ocaml_Js[20].call(null, res, 2),
                         path_str =
                           urldecode_js_string_string
                            (Js_of_ocaml_Js[6][8].call(null, a, interrupt)),
                         b = Js_of_ocaml_Js[20].call(null, res, 6),
                         c =
                           caml_string_of_jsbytes
                            (Js_of_ocaml_Js[6][8].call
                              (null, b, function(param){return cst$24;})),
                         d = Js_of_ocaml_Js[20].call(null, res, 4),
                         e =
                           decode_arguments_js_string
                            (Js_of_ocaml_Js[6][8].call
                              (null, d, function(param){return cst$24;}));
                        return [0,
                                [2, [0, path_of_path_string(path_str), path_str, e, c]]];
                       });
             },
             function(handle){
              var
               res = Js_of_ocaml_Js[25].call(null, handle),
               a = Js_of_ocaml_Js[20].call(null, res, 1),
               prot_string = Js_of_ocaml_Js[6][8].call(null, a, interrupt),
               match = caml_string_of_jsbytes(prot_string.toLowerCase());
              a:
              if(match !== "file" && match !== "file:"){
               b:
               {
                if(match !== "http" && match !== "http:"){
                 if(match !== "https" && match !== "https:") break a;
                 var ssl = 1;
                 break b;
                }
                var ssl = 0;
               }
               var
                b = Js_of_ocaml_Js[20].call(null, res, 6),
                path_str =
                  urldecode_js_string_string
                   (Js_of_ocaml_Js[6][8].call
                     (null, b, function(param){return cst$24;})),
                c = Js_of_ocaml_Js[20].call(null, res, 10),
                d =
                  urldecode_js_string_string
                   (Js_of_ocaml_Js[6][8].call
                     (null, c, function(param){return cst$24;})),
                e = Js_of_ocaml_Js[20].call(null, res, 8),
                f =
                  decode_arguments_js_string
                   (Js_of_ocaml_Js[6][8].call
                     (null, e, function(param){return cst$24;})),
                g = path_of_path_string(path_str),
                h = Js_of_ocaml_Js[20].call(null, res, 4),
                s =
                  caml_string_of_jsbytes
                   (Js_of_ocaml_Js[6][8].call
                     (null, h, function(param){return cst$24;})),
                i = s !== cst$24 ? caml_int_of_string(s) : ssl ? 443 : 80,
                j = Js_of_ocaml_Js[20].call(null, res, 2),
                url =
                  [0,
                   urldecode_js_string_string
                    (Js_of_ocaml_Js[6][8].call(null, j, interrupt)),
                   i,
                   g,
                   path_str,
                   f,
                   d],
                k = ssl ? [1, url] : [0, url];
               return [0, k];
              }
              throw caml_maybe_attach_backtrace(Not_an_http_protocol, 1);
             });
   }
   function url_of_string(s){
    return url_of_js_string(caml_jsbytes_of_string(s));
   }
   function string_of_url(param){
    switch(param[0]){
      case 0:
       var
        match = param[1],
        frag = match[6],
        args = match[5],
        path = match[3],
        port = match[2],
        host = match[1];
       if(frag !== cst$24)
        var i = urlencode(0, frag), a = Stdlib[28].call(null, cst$3, i);
       else
        var a = cst$10;
       if(args)
        var j = encode_arguments(args), b = Stdlib[28].call(null, cst$4, j);
       else
        var b = cst$9;
       var
        k = Stdlib[28].call(null, b, a),
        l =
          Stdlib_List[20].call
           (null, function(x){return urlencode(0, x);}, path),
        m = Js_of_ocaml_Import[3][7].call(null, cst$5, l),
        n = Stdlib[28].call(null, m, k),
        o = Stdlib[28].call(null, cst$6, n);
       if(80 === port)
        var c = cst$7;
       else
        var
         s = Stdlib[33].call(null, port),
         c = Stdlib[28].call(null, cst$8, s);
       var
        p = Stdlib[28].call(null, c, o),
        q = urlencode(0, host),
        r = Stdlib[28].call(null, q, p);
       return Stdlib[28].call(null, cst_http, r);
      case 1:
       var
        match$0 = param[1],
        frag$0 = match$0[6],
        args$0 = match$0[5],
        path$0 = match$0[3],
        port$0 = match$0[2],
        host$0 = match$0[1];
       if(frag$0 !== cst$24)
        var t = urlencode(0, frag$0), d = Stdlib[28].call(null, cst$11, t);
       else
        var d = cst$18;
       if(args$0)
        var
         u = encode_arguments(args$0),
         e = Stdlib[28].call(null, cst$12, u);
       else
        var e = cst$17;
       var
        v = Stdlib[28].call(null, e, d),
        w =
          Stdlib_List[20].call
           (null, function(x){return urlencode(0, x);}, path$0),
        x = Js_of_ocaml_Import[3][7].call(null, cst$13, w),
        y = Stdlib[28].call(null, x, v),
        z = Stdlib[28].call(null, cst$14, y);
       if(443 === port$0)
        var f = cst$15;
       else
        var
         D = Stdlib[33].call(null, port$0),
         f = Stdlib[28].call(null, cst$16, D);
       var
        A = Stdlib[28].call(null, f, z),
        B = urlencode(0, host$0),
        C = Stdlib[28].call(null, B, A);
       return Stdlib[28].call(null, cst_https, C);
      default:
       var
        match$1 = param[1],
        frag$1 = match$1[4],
        args$1 = match$1[3],
        path$1 = match$1[1];
       if(frag$1 !== cst$24)
        var E = urlencode(0, frag$1), g = Stdlib[28].call(null, cst$19, E);
       else
        var g = cst$23;
       if(args$1)
        var
         F = encode_arguments(args$1),
         h = Stdlib[28].call(null, cst$20, F);
       else
        var h = cst$22;
       var
        G = Stdlib[28].call(null, h, g),
        H =
          Stdlib_List[20].call
           (null, function(x){return urlencode(0, x);}, path$1),
        I = Js_of_ocaml_Import[3][7].call(null, cst$21, H),
        J = Stdlib[28].call(null, I, G);
       return Stdlib[28].call(null, cst_file, J);
    }
   }
   var
    t27 = Js_of_ocaml_Dom_html[8],
    c = Js_of_ocaml_Js[6][2].call(null, t27.location),
    default_http_port = 80,
    default_https_port = 443;
   if(Js_of_ocaml_Js[6][5].call(null, c))
    var t28 = Js_of_ocaml_Dom_html[8], t43 = t28.location;
   else
    var
     t42 = function(a, param){return 0;},
     t41 = function(a, param){return 0;},
     t40 = function(param){return 0;},
     t43 =
       {href: cst$24,
        protocol: cst$24,
        host: cst$24,
        hostname: cst$24,
        port: cst$24,
        pathname: cst$24,
        search: cst$24,
        hash: cst$24,
        origin: cst$24,
        reload: caml_js_wrap_meth_callback(t40),
        replace: caml_js_wrap_meth_callback(t41),
        assign: caml_js_wrap_meth_callback(t42)};
   var
    host = urldecode_js_string_string(t43.hostname),
    protocol = urldecode_js_string_string(t43.protocol);
   try{
    var
     d = [0, caml_int_of_string(caml_string_of_jsbytes(t43.port))],
     port = d;
   }
   catch(exn$0){
    var exn = caml_wrap_exception(exn$0), tag = exn[1];
    if(tag !== Stdlib[7]) throw caml_maybe_attach_backtrace(exn, 0);
    var port = 0;
   }
   var
    path_string = urldecode_js_string_string(t43.pathname),
    path = path_of_path_string(path_string),
    t48 = t43.search;
   if(t48.charAt(0) == cst$26)
    var t51 = t43.search, a = t51.slice(1);
   else
    var a = t43.search;
   var arguments$ = decode_arguments_js_string(a);
   function get_fragment(param){
    var s = caml_string_of_jsbytes(t43.hash);
    if(0 < caml_ml_string_length(s)){
     var a = runtime.caml_string_get(s, 0);
     if(Js_of_ocaml_Import[4][8].call(null, a, 35))
      return Js_of_ocaml_Import[3][15].call
              (null, s, 1, caml_ml_string_length(s) - 1 | 0);
    }
    return s;
   }
   function set_fragment(s){
    var t55 = caml_jsbytes_of_string(s);
    return t43.hash = t55;
   }
   function get(param){return url_of_js_string(t43.href);}
   function set(u){
    var t58 = caml_jsbytes_of_string(string_of_url(u));
    return t43.href = t58;
   }
   var
    as_string = urldecode_js_string_string(t43.href),
    Js_of_ocaml_Url =
      [0,
       urldecode,
       urlencode,
       default_http_port,
       default_https_port,
       path_of_path_string,
       encode_arguments,
       decode_arguments,
       url_of_string,
       string_of_url,
       [0,
        host,
        port,
        protocol,
        path_string,
        path,
        arguments$,
        get_fragment,
        set_fragment,
        get,
        set,
        as_string]];
   runtime.caml_register_global(105, Js_of_ocaml_Url, "Js_of_ocaml__Url");
   return;
  }
  (globalThis));

//# 3796 "../../lib/js_of_ocaml/.js_of_ocaml.objs/jsoo/default/js_of_ocaml.cma.js"
//# shape: Js_of_ocaml__Lib_version:[N,N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    s = "6.2.0",
    git_version = "5859d56",
    Js_of_ocaml_Lib_version = [0, s, git_version];
   runtime.caml_register_global
    (2, Js_of_ocaml_Lib_version, "Js_of_ocaml__Lib_version");
   return;
  }
  (globalThis));

//# 3813 "../../lib/js_of_ocaml/.js_of_ocaml.objs/jsoo/default/js_of_ocaml.cma.js"
//# shape: Js_of_ocaml__Sys_js:[F(2),F(2),F(1),F(1),F(2),F(1),F(2),F(2),N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_js_wrap_callback = runtime.caml_js_wrap_callback;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    cst$0 = "+",
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_Lib_version = global_data.Js_of_ocaml__Lib_version,
    Js_of_ocaml_Import = global_data.Js_of_ocaml__Import;
   function update_file(name, content){
    var oc = Stdlib[60].call(null, name);
    Stdlib[66].call(null, oc, content);
    return Stdlib[76].call(null, oc);
   }
   function set_channel_flusher(out_channel, f){
    var
     f$0 =
       caml_js_wrap_callback
        (function(s){return caml_call1(f, runtime.caml_string_of_jsbytes(s));});
    return runtime.caml_ml_set_channel_output(out_channel, f$0);
   }
   function set_channel_filler(in_channel, f){
    var f$0 = caml_js_wrap_callback(f);
    return runtime.caml_ml_set_channel_refill(in_channel, f$0);
   }
   function mount(path, f){
    return runtime.caml_mount_autoload
            (path,
             caml_js_wrap_callback
              (function(prefix, path){return caml_call2(f, prefix, path);}));
   }
   var unmount = runtime.caml_unmount;
   if(Js_of_ocaml_Import[3][64].call(null, Js_of_ocaml_Lib_version[2], cst))
    var js_of_ocaml_version = Js_of_ocaml_Lib_version[1];
   else
    var
     a = Stdlib[28].call(null, cst$0, Js_of_ocaml_Lib_version[2]),
     js_of_ocaml_version =
       Stdlib[28].call(null, Js_of_ocaml_Lib_version[1], a);
   var
    Js_of_ocaml_Sys_js =
      [0,
       set_channel_flusher,
       set_channel_filler,
       function(a){return runtime.caml_list_mount_point(a);},
       unmount,
       mount,
       runtime.caml_read_file_content,
       runtime.caml_create_file,
       update_file,
       js_of_ocaml_version];
   runtime.caml_register_global(5, Js_of_ocaml_Sys_js, "Js_of_ocaml__Sys_js");
   return;
  }
  (globalThis));

//# 6271 "../../lib/js_of_ocaml/.js_of_ocaml.objs/jsoo/default/js_of_ocaml.cma.js"
//# shape: Js_of_ocaml__Console:[N]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    console = runtime.caml_js_get_console(0),
    Js_of_ocaml_Console = [0, console];
   runtime.caml_register_global
    (0, Js_of_ocaml_Console, "Js_of_ocaml__Console");
   return;
  }
  (globalThis));

//# 5 "../../.js/default/lwt/lwt.cma.js"
//# shape: Lwt_sequence:[F(1)*,F(2),F(1),F(1),F(1),F(1)*,F(1),F(2),F(2),N,F(1),F(1),F(1),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(3),F(3),F(2),F(2),F(2),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Empty = [248, "Lwt_sequence.Empty", runtime.caml_fresh_oo_id(0)];
   function get(node){return node[3];}
   function set(node, data){node[3] = data; return 0;}
   function remove(node){
    var
     a = node[4],
     b = a ? (node[4] = 0, node[1][2] = node[2], node[2][1] = node[1], 0) : a;
    return b;
   }
   function create(param){
    var seq = [];
    runtime.caml_update_dummy(seq, [0, seq, seq]);
    return seq;
   }
   function clear(seq){seq[1] = seq; seq[2] = seq; return 0;}
   function is_empty(seq){return seq[2] === seq ? 1 : 0;}
   function length(seq){
    var curr$1 = seq[2], curr = curr$1, len = 0;
    for(;;){
     if(curr === seq) return len;
     var len$0 = len + 1 | 0, curr$0 = curr[2];
     curr = curr$0;
     len = len$0;
    }
   }
   function add_l(data, seq){
    var node = [0, seq, seq[2], data, 1];
    seq[2][1] = node;
    seq[2] = node;
    return node;
   }
   function add_r(data, seq){
    var node = [0, seq[1], seq, data, 1];
    seq[1][2] = node;
    seq[1] = node;
    return node;
   }
   function take_l(seq){
    if(is_empty(seq)) throw caml_maybe_attach_backtrace(Empty, 1);
    var node = seq[2];
    remove(node);
    return node[3];
   }
   function take_r(seq){
    if(is_empty(seq)) throw caml_maybe_attach_backtrace(Empty, 1);
    var node = seq[1];
    remove(node);
    return node[3];
   }
   function take_opt_l(seq){
    if(is_empty(seq)) return 0;
    var node = seq[2];
    remove(node);
    return [0, node[3]];
   }
   function take_opt_r(seq){
    if(is_empty(seq)) return 0;
    var node = seq[1];
    remove(node);
    return [0, node[3]];
   }
   function transfer_l(s1, s2){
    s2[2][1] = s1[1];
    s1[1][2] = s2[2];
    s2[2] = s1[2];
    s1[2][1] = s2;
    s1[1] = s1;
    s1[2] = s1;
    return 0;
   }
   function transfer_r(s1, s2){
    s2[1][2] = s1[2];
    s1[2][1] = s2[1];
    s2[1] = s1[1];
    s1[1][2] = s2;
    s1[1] = s1;
    s1[2] = s1;
    return 0;
   }
   function iter_l(f, seq){
    var curr$1 = seq[2], curr = curr$1;
    for(;;){
     var a = curr !== seq ? 1 : 0;
     if(! a) return a;
     if(curr[4]) caml_call1(f, curr[3]);
     var curr$0 = curr[2];
     curr = curr$0;
    }
   }
   function iter_r(f, seq){
    var curr$1 = seq[1], curr = curr$1;
    for(;;){
     var a = curr !== seq ? 1 : 0;
     if(! a) return a;
     if(curr[4]) caml_call1(f, curr[3]);
     var curr$0 = curr[1];
     curr = curr$0;
    }
   }
   function iter_node_l(f, seq){
    var curr$1 = seq[2], curr = curr$1;
    for(;;){
     var a = curr !== seq ? 1 : 0;
     if(! a) return a;
     if(curr[4]) caml_call1(f, curr);
     var curr$0 = curr[2];
     curr = curr$0;
    }
   }
   function iter_node_r(f, seq){
    var curr$1 = seq[1], curr = curr$1;
    for(;;){
     var a = curr !== seq ? 1 : 0;
     if(! a) return a;
     if(curr[4]) caml_call1(f, curr);
     var curr$0 = curr[1];
     curr = curr$0;
    }
   }
   function fold_l(f, seq, acc){
    var curr$2 = seq[2], curr = curr$2, acc$0 = acc;
    for(;;){
     if(curr === seq) return acc$0;
     if(curr[4]){
      var acc$1 = caml_call2(f, curr[3], acc$0), curr$0 = curr[2];
      curr = curr$0;
      acc$0 = acc$1;
     }
     else{var curr$1 = curr[2]; curr = curr$1;}
    }
   }
   function fold_r(f, seq, acc){
    var curr$2 = seq[1], curr = curr$2, acc$0 = acc;
    for(;;){
     if(curr === seq) return acc$0;
     if(curr[4]){
      var acc$1 = caml_call2(f, curr[3], acc$0), curr$0 = curr[1];
      curr = curr$0;
      acc$0 = acc$1;
     }
     else{var curr$1 = curr[1]; curr = curr$1;}
    }
   }
   function find_node_l(f, seq){
    var curr$2 = seq[2], curr = curr$2;
    for(;;){
     if(curr === seq) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(curr[4]){
      if(caml_call1(f, curr[3])) return curr;
      var curr$0 = curr[2];
      curr = curr$0;
     }
     else{var curr$1 = curr[2]; curr = curr$1;}
    }
   }
   function find_node_r(f, seq){
    var curr$2 = seq[1], curr = curr$2;
    for(;;){
     if(curr === seq) throw caml_maybe_attach_backtrace(Stdlib[8], 1);
     if(curr[4]){
      if(caml_call1(f, curr[3])) return curr;
      var curr$0 = curr[1];
      curr = curr$0;
     }
     else{var curr$1 = curr[1]; curr = curr$1;}
    }
   }
   function find_node_opt_l(f, seq){
    try{var a = [0, find_node_l(f, seq)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function find_node_opt_r(f, seq){
    try{var a = [0, find_node_r(f, seq)]; return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn === Stdlib[8]) return 0;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var
    Lwt_sequence =
      [0,
       get,
       set,
       remove,
       create,
       clear,
       is_empty,
       length,
       add_l,
       add_r,
       Empty,
       take_l,
       take_r,
       take_opt_l,
       take_opt_r,
       transfer_l,
       transfer_r,
       iter_l,
       iter_r,
       iter_node_l,
       iter_node_r,
       fold_l,
       fold_r,
       find_node_opt_l,
       find_node_opt_r,
       find_node_l,
       find_node_r];
   runtime.caml_register_global(2, Lwt_sequence, "Lwt_sequence");
   return;
  }
  (globalThis));

//# 245 "../../.js/default/lwt/lwt.cma.js"
//# shape: Lwt:[F(1)*,F(2),F(2),F(1)*,F(1)*,F(2),F(2),F(2),F(3),F(2),F(1),N,F(2),F(1),F(1),F(1),F(1),F(1),F(1),F(1),N,F(1)*,F(1),F(2),F(1),F(1),F(1),F(2),F(2),F(2),F(2),F(3),N,[[F(1)*,F(2),F(2),F(2),[]]],[F(2),F(2),F(2),F(2)],N,N,N,N,N,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(1)*,F(2),F(1),F(1),F(1),F(3),F(2),F(2),F(2),F(1),F(1),F(1),F(1),F(1)*,F(1),F(1),F(1),F(2),F(3),F(4),F(5),F(6),F(7),F(8),F(2),F(2),F(2),F(2),F(2),F(2),F(1),F(1),N,F(1),F(2),F(3),F(3),F(3),F(4),F(1),F(2)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Lwt = "Lwt.",
    cst_Lwt_s = "Lwt.%s",
    cst_src_core_lwt_ml = "src/core/lwt.ml",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Lwt_sequence = global_data.Lwt_sequence,
    Assert_failure = global_data.Assert_failure,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Random = global_data.Stdlib__Random,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Queue = global_data.Stdlib__Queue,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib_Map = global_data.Stdlib__Map,
    compare = runtime.caml_compare,
    Storage_map = Stdlib_Map[1].call(null, [0, compare]);
   function state_of_result(param){
    if(0 === param[0]){var x = param[1]; return [0, x];}
    var exn = param[1];
    return [1, exn];
   }
   function underlying(p){
    var match = p[1];
    if(3 !== match[0]) return p;
    var p2 = match[1], p1 = underlying(p2);
    if(1 - (p1 === p2 ? 1 : 0)) p[1] = [3, p1];
    return p1;
   }
   function handle_all(param){return 1;}
   function handle_all_except_runtime(param){
    return param === Stdlib[9] ? 0 : param === Stdlib[10] ? 0 : 1;
   }
   var v = [0, handle_all];
   function set(f){v[1] = f; return 0;}
   function run(e){return caml_call1(v[1], e);}
   var next_key_id = [0, 0];
   function new_key(param){
    var id = next_key_id[1];
    next_key_id[1] = id + 1 | 0;
    return [0, id, 0];
   }
   var
    current_storage = [0, Storage_map[1]],
    b = [0, cst_src_core_lwt_ml, 980, 23],
    c = [0, cst_src_core_lwt_ml, 981, 22],
    cst_Fatal_error_exception = "Fatal error: exception ";
   function get(key){
    if(! caml_call2(Storage_map[32], key[1], current_storage[1])) return 0;
    var refresh = caml_call2(Storage_map[17], key[1], current_storage[1]);
    caml_call1(refresh, 0);
    var value = key[2];
    key[2] = 0;
    return value;
   }
   function with_value(key, value, f){
    if(value)
     var
      refresh = function(param){key[2] = value; return 0;},
      new_storage =
        caml_call3(Storage_map[2], key[1], refresh, current_storage[1]);
    else
     var new_storage = caml_call2(Storage_map[6], key[1], current_storage[1]);
    var saved_storage = current_storage[1];
    current_storage[1] = new_storage;
    try{
     var result = caml_call1(f, 0);
     current_storage[1] = saved_storage;
     return result;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
     current_storage[1] = saved_storage;
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function concat_regular_callbacks(l1, l2){
    return typeof l1 === "number"
            ? l2
            : typeof l2 === "number" ? l1 : [0, l1, l2];
   }
   function clean_up_callback_cells(callbacks){
    if(typeof callbacks !== "number")
     switch(callbacks[0]){
       case 0:
        var
         l2 = callbacks[2],
         l1 = callbacks[1],
         l1$0 = clean_up_callback_cells(l1),
         l2$0 = clean_up_callback_cells(l2);
        return concat_regular_callbacks(l1$0, l2$0);
       case 2:
        if(! callbacks[1][1]) return 0; break;
     }
    return callbacks;
   }
   function clear_explicitly_removable_cal(cell, ps){
    cell[1] = 0;
    return Stdlib_List[18].call
            (null,
             function(p){
              var match = underlying(p)[1];
              switch(match[0]){
                case 1:
                 return 0;
                case 2:
                 var callbacks = match[1], match$0 = callbacks[1];
                 if(typeof match$0 !== "number" && 2 === match$0[0]){callbacks[1] = 0; return 0;}
                 var cleanups_deferred = callbacks[4] + 1 | 0;
                 return 42 < cleanups_deferred
                         ? (callbacks
                            [4]
                           = 0,
                           callbacks[1] = clean_up_callback_cells(callbacks[1]),
                           0)
                         : (callbacks[4] = cleanups_deferred, 0);
                default: return 0;
              }
             },
             ps);
   }
   function add_regular_callback_list_node(callbacks, node){
    var
     existing = callbacks[1],
     node$0 = typeof existing === "number" ? node : [0, node, existing];
    callbacks[1] = node$0;
    return 0;
   }
   function add_implicitly_removed_callbac(callbacks, f){
    return add_regular_callback_list_node(callbacks, [1, f]);
   }
   function add_explicitly_removable_callb(ps, f){
    var cell = [];
    function self_removing_callback_wrapper(result){
     clear_explicitly_removable_cal(cell, ps);
     return caml_call1(f, result);
    }
    runtime.caml_update_dummy(cell, [0, [0, self_removing_callback_wrapper]]);
    var node = [2, cell];
    Stdlib_List[18].call
     (null,
      function(p){
       var match = underlying(p)[1];
       switch(match[0]){
         case 1:
          throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
         case 2:
          var callbacks = match[1];
          return add_regular_callback_list_node(callbacks, node);
         default:
          throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
       }
      },
      ps);
    return cell;
   }
   function add_explicitly_removable_callb$0(ps, f){add_explicitly_removable_callb(ps, f);
   }
   function add_cancel_callback(callbacks, f){
    var
     node = [1, current_storage[1], f],
     node$0 =
       typeof callbacks[2] === "number" ? node : [0, node, callbacks[2]];
    callbacks[2] = node$0;
    return 0;
   }
   var
    async_exception_hook =
      [0,
       function(exn){
        Stdlib[49].call(null, cst_Fatal_error_exception);
        var a = Stdlib_Printexc[1].call(null, exn);
        Stdlib[49].call(null, a);
        Stdlib[48].call(null, 10);
        Stdlib_Printexc[5].call(null, Stdlib[40]);
        Stdlib[63].call(null, Stdlib[40]);
        return Stdlib[99].call(null, 2);
       }];
   function handle_with_async_exception_ho(f, v){
    try{var a = caml_call1(f, v); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(run(exn)) return caml_call1(async_exception_hook[1], exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var
    Canceled =
      [248, "Lwt.Resolution_loop.Canceled", runtime.caml_fresh_oo_id(0)];
   function run_callbacks(callbacks, result){
    var is_canceled = 1 === result[0] ? result[1] === Canceled ? 1 : 0 : 0;
    if(is_canceled){
     var
      fs = callbacks[2],
      iter_callback_list$1 =
        function(counter, fs$2, rest$1){
         var fs = fs$2, rest = rest$1;
         for(;;){
          if(typeof fs === "number"){
           if(counter >= 50)
            return caml_trampoline_return(iter_list, [0, rest]);
           var counter$0 = counter + 1 | 0;
           return iter_list(counter$0, rest);
          }
          switch(fs[0]){
            case 0:
             var fs$0 = fs[2], fs$1 = fs[1], rest$0 = [0, fs$0, rest];
             fs = fs$1;
             rest = rest$0;
             break;
            case 1:
             var f = fs[2], storage = fs[1];
             current_storage[1] = storage;
             handle_with_async_exception_ho(f, 0);
             if(counter >= 50)
              return caml_trampoline_return(iter_list, [0, rest]);
             var counter$1 = counter + 1 | 0;
             return iter_list(counter$1, rest);
            default:
             var node = fs[1];
             Lwt_sequence[3].call(null, node);
             if(counter >= 50)
              return caml_trampoline_return(iter_list, [0, rest]);
             var counter$2 = counter + 1 | 0;
             return iter_list(counter$2, rest);
          }
         }
        },
      iter_callback_list =
        function(fs, rest){
         return caml_trampoline(iter_callback_list$1(0, fs, rest));
        },
      iter_list =
        function(counter, rest){
         if(! rest) return;
         var rest$0 = rest[2], fs = rest[1];
         if(counter >= 50)
          return caml_trampoline_return(iter_callback_list$1, [0, fs, rest$0]);
         var counter$0 = counter + 1 | 0;
         return iter_callback_list$1(counter$0, fs, rest$0);
        };
     iter_callback_list(fs, 0);
    }
    var fs$0 = callbacks[1];
    function iter_callback_list$2(counter, fs$2, rest$1){
     var fs = fs$2, rest = rest$1;
     for(;;){
      if(typeof fs === "number"){
       if(counter >= 50)
        return caml_trampoline_return(iter_list$0, [0, rest]);
       var counter$0 = counter + 1 | 0;
       return iter_list$0(counter$0, rest);
      }
      switch(fs[0]){
        case 0:
         var fs$0 = fs[2], fs$1 = fs[1], rest$0 = [0, fs$0, rest];
         fs = fs$1;
         rest = rest$0;
         break;
        case 1:
         var f = fs[1];
         caml_call1(f, result);
         if(counter >= 50)
          return caml_trampoline_return(iter_list$0, [0, rest]);
         var counter$1 = counter + 1 | 0;
         return iter_list$0(counter$1, rest);
        default:
         var match = fs[1][1];
         if(match){
          var f$0 = match[1];
          caml_call1(f$0, result);
          if(counter >= 50)
           return caml_trampoline_return(iter_list$0, [0, rest]);
          var counter$2 = counter + 1 | 0;
          return iter_list$0(counter$2, rest);
         }
         if(counter >= 50)
          return caml_trampoline_return(iter_list$0, [0, rest]);
         var counter$3 = counter + 1 | 0;
         return iter_list$0(counter$3, rest);
      }
     }
    }
    function iter_callback_list$0(fs, rest){
     return caml_trampoline(iter_callback_list$2(0, fs, rest));
    }
    function iter_list$0(counter, rest){
     if(! rest) return 0;
     var rest$0 = rest[2], fs = rest[1];
     if(counter >= 50)
      return caml_trampoline_return(iter_callback_list$2, [0, fs, rest$0]);
     var counter$0 = counter + 1 | 0;
     return iter_callback_list$2(counter$0, fs, rest$0);
    }
    return iter_callback_list$0(fs$0, 0);
   }
   var
    current_callback_nesting_depth = [0, 0],
    deferred_callbacks = Stdlib_Queue[2].call(null, 0),
    default_maximum_callback_nesti = 42,
    d = [0, [11, cst_Lwt, [2, 0, 0]], cst_Lwt_s],
    e = [0, [11, cst_Lwt, [2, 0, 0]], cst_Lwt_s],
    f = [0, 0],
    cst_wakeup_result = "wakeup_result",
    cst_wakeup = "wakeup",
    cst_wakeup_exn = "wakeup_exn",
    g = [0, [11, cst_Lwt, [2, 0, 0]], cst_Lwt_s],
    h = [0, [11, cst_Lwt, [2, 0, 0]], cst_Lwt_s],
    i = [0, 1],
    cst_wakeup_later_result = "wakeup_later_result",
    cst_wakeup_later = "wakeup_later",
    cst_wakeup_later_exn = "wakeup_later_exn",
    j = [0, 0];
   function leave_resolution_loop(storage_snapshot){
    if(1 === current_callback_nesting_depth[1])
     for(;;){
      if(Stdlib_Queue[14].call(null, deferred_callbacks)) break;
      var
       match = Stdlib_Queue[7].call(null, deferred_callbacks),
       result = match[2],
       callbacks = match[1];
      run_callbacks(callbacks, result);
     }
    current_callback_nesting_depth[1] =
     current_callback_nesting_depth[1] - 1 | 0;
    current_storage[1] = storage_snapshot;
    return 0;
   }
   function abandon_wakeups(param){
    var a = 0 !== current_callback_nesting_depth[1] ? 1 : 0;
    return a ? leave_resolution_loop(Storage_map[1]) : a;
   }
   function run_callbacks_or_defer_them(a, opt, callbacks, result){
    var
     allow_deferring = a ? a[1] : 1,
     maximum_callback_nesting_depth =
       opt ? opt[1] : default_maximum_callback_nesti,
     should_defer =
       allow_deferring
        ? maximum_callback_nesting_depth
          <= current_callback_nesting_depth[1]
          ? 1
          : 0
        : allow_deferring;
    if(should_defer)
     return Stdlib_Queue[4].call
             (null, [0, callbacks, result], deferred_callbacks);
    current_callback_nesting_depth[1] =
     current_callback_nesting_depth[1] + 1 | 0;
    var
     storage_snapshot = current_storage[1],
     result$0 = run_callbacks(callbacks, result);
    leave_resolution_loop(storage_snapshot);
    return result$0;
   }
   function resolve
   (allow_deferring, maximum_callback_nesting_depth, p, result){
    var callbacks = p[1][1];
    p[1] = result;
    run_callbacks_or_defer_them
     (allow_deferring, maximum_callback_nesting_depth, callbacks, result);
    return p;
   }
   function run_callback_or_defer_it(opt, f, if_deferred){
    var run_immediately_and_ensure_tai = opt ? opt[1] : 0;
    if(run_immediately_and_ensure_tai) return caml_call1(f, 0);
    var should_defer = 42 <= current_callback_nesting_depth[1] ? 1 : 0;
    if(should_defer){
     var
      match = caml_call1(if_deferred, 0),
      deferred_result = match[3],
      deferred_callback = match[2],
      immediate_result = match[1],
      deferred_record = [0, [1, deferred_callback], 0, 0, 0];
     Stdlib_Queue[4].call
      (null, [0, deferred_record, deferred_result], deferred_callbacks);
     return immediate_result;
    }
    current_callback_nesting_depth[1] =
     current_callback_nesting_depth[1] + 1 | 0;
    var storage_snapshot = current_storage[1], result = caml_call1(f, 0);
    leave_resolution_loop(storage_snapshot);
    return result;
   }
   function wakeup_general(api_function_name, r, result){
    var p = underlying(r), match = p[1];
    switch(match[0]){
      case 1:
       return match[1] === Canceled
               ? 0
               : caml_call1
                 (Stdlib_Printf[10].call(null, Stdlib[1], e),
                  api_function_name);
      case 2:
       var result$0 = state_of_result(result);
       resolve(f, 0, p, result$0);
       return 0;
      default:
       return caml_call1
               (Stdlib_Printf[10].call(null, Stdlib[1], d), api_function_name);
    }
   }
   function wakeup_result(r, result){
    return wakeup_general(cst_wakeup_result, r, result);
   }
   function wakeup(r, v){return wakeup_general(cst_wakeup, r, [0, v]);}
   function wakeup_exn(r, exn){
    return wakeup_general(cst_wakeup_exn, r, [1, exn]);
   }
   function wakeup_later_general(api_function_name, r, result){
    var p = underlying(r), match = p[1];
    switch(match[0]){
      case 1:
       return match[1] === Canceled
               ? 0
               : caml_call1
                 (Stdlib_Printf[10].call(null, Stdlib[1], h),
                  api_function_name);
      case 2:
       var result$0 = state_of_result(result);
       resolve(0, i, p, result$0);
       return 0;
      default:
       return caml_call1
               (Stdlib_Printf[10].call(null, Stdlib[1], g), api_function_name);
    }
   }
   function wakeup_later_result(r, result){
    return wakeup_later_general(cst_wakeup_later_result, r, result);
   }
   function wakeup_later(r, v){
    return wakeup_later_general(cst_wakeup_later, r, [0, v]);
   }
   function wakeup_later_exn(r, exn){
    return wakeup_later_general(cst_wakeup_later_exn, r, [1, exn]);
   }
   function cancel(p){
    var canceled_result = [1, Canceled];
    function cancel_and_collect_callbacks(callbacks_accumulator, p$2){
     var p = p$2;
     for(;;){
      var p$0 = underlying(p), match = p$0[1];
      switch(match[0]){
        case 1:
         return callbacks_accumulator;
        case 2:
         var callbacks = match[1], match$0 = callbacks[3];
         if(typeof match$0 === "number")
          return 0 === match$0
                  ? callbacks_accumulator
                  : (p$0
                     [1]
                    = canceled_result,
                    [0, callbacks, callbacks_accumulator]);
         if(0 !== match$0[0]){
          var ps = match$0[1];
          return Stdlib_List[26].call
                  (null,
                   cancel_and_collect_callbacks,
                   callbacks_accumulator,
                   ps);
         }
         var p$1 = match$0[1];
         p = p$1;
         break;
        default: return callbacks_accumulator;
      }
     }
    }
    var callbacks = cancel_and_collect_callbacks(0, p);
    return Stdlib_List[18].call
            (null,
             function(param){
              return run_callbacks_or_defer_them(j, 0, param, canceled_result);
             },
             callbacks);
   }
   function return$(v){return [0, [0, v]];}
   function of_result(result){return [0, state_of_result(result)];}
   function fail(exn){return [0, [1, exn]];}
   var return_unit = return$(0), return_none = return$(0);
   function return_some(x){return return$([0, x]);}
   var
    return_nil = return$(0),
    return_true = return$(1),
    return_false = return$(0),
    k = [0, 0],
    l = [0, 0],
    m = [0, 0],
    n = [0, 0],
    o = [0, 0],
    p = [0, 1],
    q = [0, 0],
    r = [0, 1],
    s = [0, 0],
    t = [0, 0],
    u = [0, 1],
    w = [0, 0],
    x = [0, 1],
    y = [0, 0],
    z = [0, 1],
    A = [0, 1],
    B = [0, 1],
    C = [0, 1],
    D = [0, 1],
    E = [0, 0],
    F = [0, 1],
    G = [0, 1],
    H = [0, 1],
    I = [0, 1],
    J = [0, 1],
    K = [0, 1],
    L = [0, 1],
    M = [0, 0],
    N = [0, 0],
    O = [0, cst_src_core_lwt_ml, 2651, 13],
    P = [0, cst_src_core_lwt_ml, 2670, 24],
    Q = [0, cst_src_core_lwt_ml, 2709, 6],
    R = [0, cst_src_core_lwt_ml, 2729, 6];
   function return_ok(x){return return$([0, x]);}
   function return_error(x){return return$([1, x]);}
   function fail_with(msg){return [0, [1, [0, Stdlib[7], msg]]];}
   function fail_invalid_arg(msg){return [0, [1, [0, Stdlib[6], msg]]];}
   function new_pending(how_to_cancel){
    var state = [2, [0, 0, 0, how_to_cancel, 0]];
    return [0, state];
   }
   function wait(param){var p = new_pending(0); return [0, p, p];}
   function task(param){var p = new_pending(1); return [0, p, p];}
   function add_task_r(sequence){
    var
     actual_content = new_pending(1),
     node = Lwt_sequence[9].call(null, actual_content, sequence),
     callbacks = actual_content[1][1];
    callbacks[2] = [2, node];
    return actual_content;
   }
   function add_task_l(sequence){
    var
     actual_content = new_pending(1),
     node = Lwt_sequence[8].call(null, actual_content, sequence),
     callbacks = actual_content[1][1];
    callbacks[2] = [2, node];
    return actual_content;
   }
   function protected$(p_internal){
    switch(underlying(p_internal)[1][0]){
      case 1:
       return p_internal;
      case 2:
       var
        p = new_pending(1),
        callback =
          function(p_result){
           var p$0 = underlying(p);
           resolve(k, 0, p$0, p_result);
           return 0;
          },
        ps = [0, p_internal, 0],
        cell = add_explicitly_removable_callb(ps, callback),
        remove_the_callback =
          function(param){return clear_explicitly_removable_cal(cell, ps);},
        p_callbacks = p[1][1];
       add_cancel_callback(p_callbacks, remove_the_callback);
       return p;
      default: return p_internal;
    }
   }
   function no_cancel(p_internal){
    var match = underlying(p_internal)[1];
    switch(match[0]){
      case 1:
       return p_internal;
      case 2:
       var
        p_callbacks = match[1],
        p = new_pending(0),
        callback =
          function(p_result){
           var p$0 = underlying(p);
           resolve(l, 0, p$0, p_result);
           return 0;
          };
       add_implicitly_removed_callbac(p_callbacks, callback);
       return p;
      default: return p_internal;
    }
   }
   function make_into_proxy(outer_promise, user_provided_promise){
    var p1 = underlying(user_provided_promise);
    if(p1 === outer_promise) return p1;
    var match = p1[1];
    switch(match[0]){
      case 1:
       return resolve(n, 0, outer_promise, p1[1]);
      case 2:
       var
        p_callbacks = match[1],
        outer_callbacks = outer_promise[1][1],
        regular_callbacks =
          concat_regular_callbacks(outer_callbacks[1], p_callbacks[1]),
        cleanups_deferred = outer_callbacks[4] + p_callbacks[4] | 0;
       if(42 < cleanups_deferred)
        var
         cleanups_deferred$0 = 0,
         regular_callbacks$0 = clean_up_callback_cells(regular_callbacks);
       else
        var
         cleanups_deferred$0 = cleanups_deferred,
         regular_callbacks$0 = regular_callbacks;
       var
        l2 = p_callbacks[2],
        l1 = outer_callbacks[2],
        cancel_callbacks =
          typeof l1 === "number"
           ? l2
           : typeof l2 === "number" ? l1 : [0, l1, l2];
       outer_callbacks[1] = regular_callbacks$0;
       outer_callbacks[2] = cancel_callbacks;
       outer_callbacks[4] = cleanups_deferred$0;
       outer_callbacks[3] = p_callbacks[3];
       var state = [3, outer_promise];
       p1[1] = state;
       return outer_promise;
      default: return resolve(m, 0, outer_promise, p1[1]);
    }
   }
   function symbol_bind(p$0, f){
    var p$1 = underlying(p$0);
    function create_result_promise_and_call(param){
     var p = new_pending([0, p$1]), saved_storage = current_storage[1];
     function callback(p_result){
      if(1 === p_result[0]){
       var p$2 = underlying(p);
       resolve(o, 0, p$2, p_result);
       return 0;
      }
      var v = p_result[1];
      current_storage[1] = saved_storage;
      try{var a = caml_call1(f, v), p$0 = a;}
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
       var p$0 = fail(exn);
      }
      var p$1 = underlying(p);
      make_into_proxy(p$1, p$0);
      return 0;
     }
     return [0, p, callback];
    }
    var result = p$1[1];
    switch(result[0]){
      case 1:
       return [0, result];
      case 2:
       var
        p_callbacks = result[1],
        match = create_result_promise_and_call(0),
        callback = match[2],
        p$2 = match[1];
       add_implicitly_removed_callbac(p_callbacks, callback);
       return p$2;
      default:
       var v = result[1];
       return run_callback_or_defer_it
               (p,
                function(param){return caml_call1(f, v);},
                function(param){
                 var
                  match = create_result_promise_and_call(0),
                  callback = match[2],
                  p = match[1];
                 return [0, p, callback, p$1[1]];
                });
    }
   }
   function backtrace_bind(add_loc, p, f){
    var p$0 = underlying(p);
    function create_result_promise_and_call(param){
     var p = new_pending([0, p$0]), saved_storage = current_storage[1];
     function callback(p_result){
      if(1 === p_result[0]){
       var exn$0 = p_result[1], p$2 = underlying(p);
       resolve(q, 0, p$2, [1, caml_call1(add_loc, exn$0)]);
       return 0;
      }
      var v = p_result[1];
      current_storage[1] = saved_storage;
      try{var a = caml_call1(f, v), p$0 = a;}
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
       var p$0 = fail(caml_call1(add_loc, exn));
      }
      var p$1 = underlying(p);
      make_into_proxy(p$1, p$0);
      return 0;
     }
     return [0, p, callback];
    }
    var match = p$0[1];
    switch(match[0]){
      case 1:
       var exn = match[1]; return [0, [1, caml_call1(add_loc, exn)]];
      case 2:
       var
        p_callbacks = match[1],
        match$0 = create_result_promise_and_call(0),
        callback = match$0[2],
        p$1 = match$0[1];
       add_implicitly_removed_callbac(p_callbacks, callback);
       return p$1;
      default:
       var v = match[1];
       return run_callback_or_defer_it
               (r,
                function(param){return caml_call1(f, v);},
                function(param){
                 var
                  match = create_result_promise_and_call(0),
                  callback = match[2],
                  p = match[1];
                 return [0, p, callback, p$0[1]];
                });
    }
   }
   function symbol(f, p){
    var p$0 = underlying(p);
    function create_result_promise_and_call(param){
     var p = new_pending([0, p$0]), saved_storage = current_storage[1];
     function callback(p_result){
      if(1 === p_result[0]){
       var p$1 = underlying(p);
       resolve(t, 0, p$1, p_result);
       return 0;
      }
      var v = p_result[1];
      current_storage[1] = saved_storage;
      try{var a = [0, caml_call1(f, v)], p_result$0 = a;}
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
       var p_result$0 = [1, exn];
      }
      var p$0 = underlying(p);
      resolve(s, 0, p$0, p_result$0);
      return 0;
     }
     return [0, p, callback];
    }
    var result = p$0[1];
    switch(result[0]){
      case 1:
       return [0, result];
      case 2:
       var
        p_callbacks = result[1],
        match = create_result_promise_and_call(0),
        callback = match[2],
        p$1 = match[1];
       add_implicitly_removed_callbac(p_callbacks, callback);
       return p$1;
      default:
       var v = result[1];
       return run_callback_or_defer_it
               (u,
                function(param){
                 try{var b = [0, caml_call1(f, v)], a = b;}
                 catch(exn$0){
                  var exn = caml_wrap_exception(exn$0);
                  if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
                  var a = [1, exn];
                 }
                 return [0, a];
                },
                function(param){
                 var
                  match = create_result_promise_and_call(0),
                  callback = match[2],
                  p = match[1];
                 return [0, p, callback, p$0[1]];
                });
    }
   }
   function catch$(f, h){
    try{var a = caml_call1(f, 0), p = a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
     var p = fail(exn);
    }
    var p$0 = underlying(p);
    function create_result_promise_and_call(param){
     var p = new_pending([0, p$0]), saved_storage = current_storage[1];
     function callback(p_result){
      if(1 !== p_result[0]){
       var p$0 = underlying(p);
       resolve(w, 0, p$0, p_result);
       return 0;
      }
      var exn = p_result[1];
      current_storage[1] = saved_storage;
      try{var a = caml_call1(h, exn), p$1 = a;}
      catch(exn){
       var exn$0 = caml_wrap_exception(exn);
       if(! run(exn$0)) throw caml_maybe_attach_backtrace(exn$0, 0);
       var p$1 = fail(exn$0);
      }
      var p$2 = underlying(p);
      make_into_proxy(p$2, p$1);
      return 0;
     }
     return [0, p, callback];
    }
    var match = p$0[1];
    switch(match[0]){
      case 1:
       var exn$0 = match[1];
       return run_callback_or_defer_it
               (x,
                function(param){return caml_call1(h, exn$0);},
                function(param){
                 var
                  match = create_result_promise_and_call(0),
                  callback = match[2],
                  p = match[1];
                 return [0, p, callback, p$0[1]];
                });
      case 2:
       var
        p_callbacks = match[1],
        match$0 = create_result_promise_and_call(0),
        callback = match$0[2],
        p$1 = match$0[1];
       add_implicitly_removed_callbac(p_callbacks, callback);
       return p$1;
      default: return p$0;
    }
   }
   function backtrace_catch(add_loc, f, h){
    try{var a = caml_call1(f, 0), p = a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
     var p = fail(exn);
    }
    var p$0 = underlying(p);
    function create_result_promise_and_call(param){
     var p = new_pending([0, p$0]), saved_storage = current_storage[1];
     function callback(p_result){
      if(1 !== p_result[0]){
       var p$0 = underlying(p);
       resolve(y, 0, p$0, p_result);
       return 0;
      }
      var exn = p_result[1];
      current_storage[1] = saved_storage;
      try{var a = caml_call1(h, exn), p$1 = a;}
      catch(exn){
       var exn$0 = caml_wrap_exception(exn);
       if(! run(exn$0)) throw caml_maybe_attach_backtrace(exn$0, 0);
       var p$1 = fail(caml_call1(add_loc, exn$0));
      }
      var p$2 = underlying(p);
      make_into_proxy(p$2, p$1);
      return 0;
     }
     return [0, p, callback];
    }
    var match = p$0[1];
    switch(match[0]){
      case 1:
       var exn$0 = match[1];
       return run_callback_or_defer_it
               (z,
                function(param){
                 return caml_call1(h, caml_call1(add_loc, exn$0));
                },
                function(param){
                 var
                  match = create_result_promise_and_call(0),
                  callback = match[2],
                  p = match[1];
                 return [0, p, callback, p$0[1]];
                });
      case 2:
       var
        p_callbacks = match[1],
        match$0 = create_result_promise_and_call(0),
        callback = match$0[2],
        p$1 = match$0[1];
       add_implicitly_removed_callbac(p_callbacks, callback);
       return p$1;
      default: return p$0;
    }
   }
   function try_bind(f$0, f, h){
    try{var a = caml_call1(f$0, 0), p = a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
     var p = fail(exn);
    }
    var p$0 = underlying(p);
    function create_result_promise_and_call(param){
     var p = new_pending([0, p$0]), saved_storage = current_storage[1];
     function callback(p_result){
      if(1 === p_result[0]){
       var exn$0 = p_result[1];
       current_storage[1] = saved_storage;
       try{var b = caml_call1(h, exn$0), p$2 = b;}
       catch(exn){
        var exn$1 = caml_wrap_exception(exn);
        if(! run(exn$1)) throw caml_maybe_attach_backtrace(exn$1, 0);
        var p$2 = fail(exn$1);
       }
       var p$3 = underlying(p);
       make_into_proxy(p$3, p$2);
       return 0;
      }
      var v = p_result[1];
      current_storage[1] = saved_storage;
      try{var a = caml_call1(f, v), p$0 = a;}
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
       var p$0 = fail(exn);
      }
      var p$1 = underlying(p);
      make_into_proxy(p$1, p$0);
      return 0;
     }
     return [0, p, callback];
    }
    var match = p$0[1];
    switch(match[0]){
      case 1:
       var exn$0 = match[1];
       return run_callback_or_defer_it
               (B,
                function(param){return caml_call1(h, exn$0);},
                function(param){
                 var
                  match = create_result_promise_and_call(0),
                  callback = match[2],
                  p = match[1];
                 return [0, p, callback, p$0[1]];
                });
      case 2:
       var
        p_callbacks = match[1],
        match$0 = create_result_promise_and_call(0),
        callback = match$0[2],
        p$1 = match$0[1];
       add_implicitly_removed_callbac(p_callbacks, callback);
       return p$1;
      default:
       var v = match[1];
       return run_callback_or_defer_it
               (A,
                function(param){return caml_call1(f, v);},
                function(param){
                 var
                  match = create_result_promise_and_call(0),
                  callback = match[2],
                  p = match[1];
                 return [0, p, callback, p$0[1]];
                });
    }
   }
   function backtrace_try_bind(add_loc, f$0, f, h){
    try{var a = caml_call1(f$0, 0), p = a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
     var p = fail(exn);
    }
    var p$0 = underlying(p);
    function create_result_promise_and_call(param){
     var p = new_pending([0, p$0]), saved_storage = current_storage[1];
     function callback(p_result){
      if(1 === p_result[0]){
       var exn$0 = p_result[1];
       current_storage[1] = saved_storage;
       try{var b = caml_call1(h, exn$0), p$2 = b;}
       catch(exn){
        var exn$1 = caml_wrap_exception(exn);
        if(! run(exn$1)) throw caml_maybe_attach_backtrace(exn$1, 0);
        var p$2 = fail(caml_call1(add_loc, exn$1));
       }
       var p$3 = underlying(p);
       make_into_proxy(p$3, p$2);
       return 0;
      }
      var v = p_result[1];
      current_storage[1] = saved_storage;
      try{var a = caml_call1(f, v), p$0 = a;}
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
       var p$0 = fail(caml_call1(add_loc, exn));
      }
      var p$1 = underlying(p);
      make_into_proxy(p$1, p$0);
      return 0;
     }
     return [0, p, callback];
    }
    var match = p$0[1];
    switch(match[0]){
      case 1:
       var exn$0 = match[1];
       return run_callback_or_defer_it
               (D,
                function(param){
                 return caml_call1(h, caml_call1(add_loc, exn$0));
                },
                function(param){
                 var
                  match = create_result_promise_and_call(0),
                  callback = match[2],
                  p = match[1];
                 return [0, p, callback, p$0[1]];
                });
      case 2:
       var
        p_callbacks = match[1],
        match$0 = create_result_promise_and_call(0),
        callback = match$0[2],
        p$1 = match$0[1];
       add_implicitly_removed_callbac(p_callbacks, callback);
       return p$1;
      default:
       var v = match[1];
       return run_callback_or_defer_it
               (C,
                function(param){return caml_call1(f, v);},
                function(param){
                 var
                  match = create_result_promise_and_call(0),
                  callback = match[2],
                  p = match[1];
                 return [0, p, callback, p$0[1]];
                });
    }
   }
   function finalize(f$0, f){
    return try_bind
            (f$0,
             function(x){
              return symbol_bind
                      (caml_call1(f, 0), function(param){return return$(x);});
             },
             function(e){
              return symbol_bind
                      (caml_call1(f, 0), function(param){return fail(e);});
             });
   }
   function backtrace_finalize(add_loc, f$0, f){
    return backtrace_try_bind
            (add_loc,
             f$0,
             function(x){
              return symbol_bind
                      (caml_call1(f, 0), function(param){return return$(x);});
             },
             function(e){
              return symbol_bind
                      (caml_call1(f, 0),
                       function(param){return fail(caml_call1(add_loc, e));});
             });
   }
   function on_cancel(p, f){
    var p$0 = underlying(p), match = p$0[1];
    switch(match[0]){
      case 1:
       return match[1] === Canceled
               ? run_callback_or_defer_it
                 (F,
                  function(param){
                   return handle_with_async_exception_ho(f, 0);
                  },
                  function(param){
                   return [0,
                           0,
                           function(param){
                            return handle_with_async_exception_ho(f, 0);
                           },
                           E];
                  })
               : 0;
      case 2:
       var callbacks = match[1]; return add_cancel_callback(callbacks, f);
      default: return 0;
    }
   }
   function on_success(p, f){
    var p$0 = underlying(p);
    function callback_if_deferred(param){
     var saved_storage = current_storage[1];
     return function(result){
      if(1 === result[0]) return 0;
      var v = result[1];
      current_storage[1] = saved_storage;
      return handle_with_async_exception_ho(f, v);};
    }
    var match = p$0[1];
    switch(match[0]){
      case 1:
       return 0;
      case 2:
       var p_callbacks = match[1], callback = callback_if_deferred(0);
       return add_implicitly_removed_callbac(p_callbacks, callback);
      default:
       var v = match[1];
       return run_callback_or_defer_it
               (G,
                function(param){return handle_with_async_exception_ho(f, v);},
                function(param){
                 var callback = callback_if_deferred(0);
                 return [0, 0, callback, p$0[1]];
                });
    }
   }
   function on_failure(p, f){
    var p$0 = underlying(p);
    function callback_if_deferred(param){
     var saved_storage = current_storage[1];
     return function(result){
      if(1 !== result[0]) return 0;
      var exn = result[1];
      current_storage[1] = saved_storage;
      return handle_with_async_exception_ho(f, exn);};
    }
    var match = p$0[1];
    switch(match[0]){
      case 1:
       var exn = match[1];
       return run_callback_or_defer_it
               (H,
                function(param){
                 return handle_with_async_exception_ho(f, exn);
                },
                function(param){
                 var callback = callback_if_deferred(0);
                 return [0, 0, callback, p$0[1]];
                });
      case 2:
       var p_callbacks = match[1], callback = callback_if_deferred(0);
       return add_implicitly_removed_callbac(p_callbacks, callback);
      default: return 0;
    }
   }
   function on_termination(p, f){
    var p$0 = underlying(p);
    function callback_if_deferred(param){
     var saved_storage = current_storage[1];
     return function(result){
      current_storage[1] = saved_storage;
      return handle_with_async_exception_ho(f, 0);};
    }
    var match = p$0[1];
    switch(match[0]){
      case 1:
       return run_callback_or_defer_it
               (J,
                function(param){return handle_with_async_exception_ho(f, 0);},
                function(param){
                 var callback = callback_if_deferred(0);
                 return [0, 0, callback, p$0[1]];
                });
      case 2:
       var p_callbacks = match[1], callback = callback_if_deferred(0);
       return add_implicitly_removed_callbac(p_callbacks, callback);
      default:
       return run_callback_or_defer_it
               (I,
                function(param){return handle_with_async_exception_ho(f, 0);},
                function(param){
                 var callback = callback_if_deferred(0);
                 return [0, 0, callback, p$0[1]];
                });
    }
   }
   function on_any(p, f, g){
    var p$0 = underlying(p);
    function callback_if_deferred(param){
     var saved_storage = current_storage[1];
     return function(result){
      if(1 === result[0]){
       var exn = result[1];
       current_storage[1] = saved_storage;
       return handle_with_async_exception_ho(g, exn);
      }
      var v = result[1];
      current_storage[1] = saved_storage;
      return handle_with_async_exception_ho(f, v);};
    }
    var match = p$0[1];
    switch(match[0]){
      case 1:
       var exn = match[1];
       return run_callback_or_defer_it
               (L,
                function(param){
                 return handle_with_async_exception_ho(g, exn);
                },
                function(param){
                 var callback = callback_if_deferred(0);
                 return [0, 0, callback, p$0[1]];
                });
      case 2:
       var p_callbacks = match[1], callback = callback_if_deferred(0);
       return add_implicitly_removed_callbac(p_callbacks, callback);
      default:
       var v = match[1];
       return run_callback_or_defer_it
               (K,
                function(param){return handle_with_async_exception_ho(f, v);},
                function(param){
                 var callback = callback_if_deferred(0);
                 return [0, 0, callback, p$0[1]];
                });
    }
   }
   function wrap_in_cancelable(p_internal){
    var p_underlying = underlying(p_internal);
    switch(p_underlying[1][0]){
      case 1:
       return p_internal;
      case 2:
       var match = task(0), r = match[2], p = match[1];
       on_cancel(p, function(param){return cancel(p_internal);});
       on_any
        (p_internal,
         function(a){return wakeup(r, a);},
         function(a){return wakeup_exn(r, a);});
       return p;
      default: return p_internal;
    }
   }
   function dont_wait(f, h){
    try{var a = caml_call1(f, 0), p = a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
     var p = fail(exn);
    }
    var match = underlying(p)[1];
    switch(match[0]){
      case 1:
       var exn$0 = match[1]; return caml_call1(h, exn$0);
      case 2:
       var
        p_callbacks = match[1],
        callback =
          function(result){
           if(1 !== result[0]) return 0;
           var exn = result[1];
           return caml_call1(h, exn);
          };
       return add_implicitly_removed_callbac(p_callbacks, callback);
      default: return 0;
    }
   }
   function async(f){
    try{var a = caml_call1(f, 0), p = a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(! run(exn)) throw caml_maybe_attach_backtrace(exn, 0);
     var p = fail(exn);
    }
    var match = underlying(p)[1];
    switch(match[0]){
      case 1:
       var exn$0 = match[1];
       return caml_call1(async_exception_hook[1], exn$0);
      case 2:
       var
        p_callbacks = match[1],
        callback =
          function(result){
           if(1 !== result[0]) return 0;
           var exn = result[1];
           return caml_call1(async_exception_hook[1], exn);
          };
       return add_implicitly_removed_callbac(p_callbacks, callback);
      default: return 0;
    }
   }
   function ignore_result(p){
    var match = underlying(p)[1];
    switch(match[0]){
      case 1:
       var exn = match[1]; throw caml_maybe_attach_backtrace(exn, 0);
      case 2:
       var
        p_callbacks = match[1],
        callback =
          function(result){
           if(1 !== result[0]) return 0;
           var exn = result[1];
           return caml_call1(async_exception_hook[1], exn);
          };
       return add_implicitly_removed_callbac(p_callbacks, callback);
      default: return 0;
    }
   }
   function join(ps){
    var
     p = new_pending([1, ps]),
     number_pending_in_ps = [0, 0],
     join_result = [0, M];
    function callback(new_result){
     if(1 === new_result[0] && 1 !== join_result[1][0])
      join_result[1] = new_result;
     number_pending_in_ps[1] = number_pending_in_ps[1] - 1 | 0;
     var a = 0 === number_pending_in_ps[1] ? 1 : 0;
     if(a){
      var p$0 = underlying(p), c = join_result[1];
      resolve(N, 0, underlying(p$0), c);
      var b = 0;
     }
     else
      var b = a;
     return b;
    }
    var ps$0 = ps;
    for(;;){
     if(! ps$0)
      return 0 === number_pending_in_ps[1] ? [0, join_result[1]] : p;
     var ps$1 = ps$0[2], p$0 = ps$0[1], p_result = underlying(p$0)[1];
     switch(p_result[0]){
       case 1:
        if(1 === join_result[1][0])
         ps$0 = ps$1;
        else{join_result[1] = p_result; ps$0 = ps$1;}
        break;
       case 2:
        var p_callbacks = p_result[1];
        number_pending_in_ps[1] = number_pending_in_ps[1] + 1 | 0;
        add_implicitly_removed_callbac(p_callbacks, callback);
        ps$0 = ps$1;
        break;
       default: ps$0 = ps$1;
     }
    }
   }
   function both(p1, p2){
    var
     pair = [0, 0, 0],
     p1$0 =
       symbol_bind(p1, function(v){pair[1] = [0, v]; return return_unit;}),
     p2$0 =
       symbol_bind(p2, function(v){pair[2] = [0, v]; return return_unit;});
    return symbol
            (function(param){
              var a = pair[1], match = pair[2];
              if(a && match){
               var v2 = match[1], v1 = a[1];
               return [0, v1, v2];
              }
              throw caml_maybe_attach_backtrace([0, Assert_failure, O], 1);
             },
             join([0, p1$0, [0, p2$0, 0]]));
   }
   function all(ps){
    if(! ps) return return_nil;
    var match = ps[2], x = ps[1];
    if(! match) return symbol(function(y){return [0, y, 0];}, x);
    if(match[2]){
     var vs = runtime.caml_array_make(Stdlib_List[1].call(null, ps), 0);
     return symbol
             (function(param){
               var i$1 = vs.length - 2 | 0, i = i$1, acc = 0;
               for(;;){
                if(0 > i) return acc;
                var match = vs[i + 1];
                if(! match)
                 throw caml_maybe_attach_backtrace([0, Assert_failure, P], 1);
                var x = match[1], acc$0 = [0, x, acc], i$0 = i - 1 | 0;
                i = i$0;
                acc = acc$0;
               }
              },
              join
               (Stdlib_List[21].call
                 (null,
                  function(index, p){
                   return symbol_bind
                           (p,
                            function(v){
                             runtime.caml_check_bound(vs, index)[index + 1] = [0, v];
                             return return_unit;
                            });
                  },
                  ps)));
    }
    var y = match[1];
    return symbol
            (function(param){
              var y = param[2], x = param[1];
              return [0, x, [0, y, 0]];
             },
             both(x, y));
   }
   function count_resolved_promises_in(ps){
    var total$1 = 0, ps$2 = ps;
    a:
    for(;;){
     if(! ps$2) return [0, total$1];
     var ps$3 = ps$2[2], p$0 = ps$2[1];
     switch(underlying(p$0)[1][0]){
       case 1:
        break a;
       case 2:
        ps$2 = ps$3; break;
       default: var total$2 = total$1 + 1 | 0; total$1 = total$2; ps$2 = ps$3;
     }
    }
    var
     rejected$1 = [0, p$0, 0],
     total = 1,
     rejected = rejected$1,
     ps$0 = ps$3;
    for(;;){
     if(! ps$0) return [1, [0, total, rejected]];
     var ps$1 = ps$0[2], p = ps$0[1];
     if(1 === underlying(p)[1][0]){
      var rejected$0 = [0, p, rejected], total$0 = total + 1 | 0;
      total = total$0;
      rejected = rejected$0;
      ps$0 = ps$1;
     }
     else
      ps$0 = ps$1;
    }
   }
   function nth_resolved(ps$1, n$2){
    var ps = ps$1, n = n$2;
    for(;;){
     if(! ps) throw caml_maybe_attach_backtrace([0, Assert_failure, Q], 1);
     var ps$0 = ps[2], p = ps[1];
     switch(underlying(p)[1][0]){
       case 1:
        if(0 >= n) return p; var n$1 = n - 1 | 0; ps = ps$0; n = n$1; break;
       case 2:
        ps = ps$0; break;
       default: if(0 >= n) return p; var n$0 = n - 1 | 0; ps = ps$0; n = n$0;
     }
    }
   }
   function nth_resolved_and_cancel_pendin(ps$1, n$2){
    var ps = ps$1, n = n$2;
    for(;;){
     if(! ps) throw caml_maybe_attach_backtrace([0, Assert_failure, R], 1);
     var ps$0 = ps[2], p = ps[1];
     switch(underlying(p)[1][0]){
       case 1:
        if(0 >= n){Stdlib_List[18].call(null, cancel, ps$0); return p;}
        var n$1 = n - 1 | 0;
        ps = ps$0;
        n = n$1;
        break;
       case 2:
        cancel(p); ps = ps$0; break;
       default:
        if(0 >= n){Stdlib_List[18].call(null, cancel, ps$0); return p;}
        var n$0 = n - 1 | 0;
        ps = ps$0;
        n = n$0;
     }
    }
   }
   var
    prng = [246, function(a){return caml_call1(Stdlib_Random[19][1], [0]);}],
    cst_Lwt_choose_would_return_a_ =
      "Lwt.choose [] would return a promise that is pending forever",
    S = [0, 0],
    cst_Lwt_pick_would_return_a_pr =
      "Lwt.pick [] would return a promise that is pending forever",
    T = [0, 0],
    cst_Lwt_nchoose_would_return_a =
      "Lwt.nchoose [] would return a promise that is pending forever",
    U = [0, 0],
    cst_Lwt_npick_would_return_a_p =
      "Lwt.npick [] would return a promise that is pending forever",
    V = [0, 0],
    cst_Lwt_nchoose_split_would_re =
      "Lwt.nchoose_split [] would return a promise that is pending forever",
    W = [0, 0],
    X = [0, 0];
   function choose(ps){
    if(0 === ps) Stdlib[1].call(null, cst_Lwt_choose_would_return_a_);
    var match = count_resolved_promises_in(ps);
    if(0 === match[0]){
     var n = match[1];
     if(0 === n){
      var
       p = new_pending([1, ps]),
       callback =
         function(result){
          var p$0 = underlying(p);
          resolve(S, 0, p$0, result);
          return 0;
         };
      add_explicitly_removable_callb$0(ps, callback);
      return p;
     }
     if(1 === n) return nth_resolved(ps, 0);
     var a = caml_obj_tag(prng);
     a:
     if(250 === a)
      var b = prng[1];
     else{
      if(246 !== a && 244 !== a){var b = prng; break a;}
      var b = CamlinternalLazy[2].call(null, prng);
     }
     return nth_resolved(ps, caml_call2(Stdlib_Random[19][5], b, n));
    }
    var
     match$0 = match[1],
     ps$0 = match$0[2],
     n$0 = match$0[1],
     c = caml_obj_tag(prng);
    a:
    if(250 === c)
     var d = prng[1];
    else{
     if(246 !== c && 244 !== c){var d = prng; break a;}
     var d = CamlinternalLazy[2].call(null, prng);
    }
    return nth_resolved(ps$0, caml_call2(Stdlib_Random[19][5], d, n$0));
   }
   function pick(ps){
    if(0 === ps) Stdlib[1].call(null, cst_Lwt_pick_would_return_a_pr);
    var match = count_resolved_promises_in(ps);
    if(0 === match[0]){
     var n = match[1];
     if(0 === n){
      var
       p = new_pending([1, ps]),
       callback =
         function(result){
          Stdlib_List[18].call(null, cancel, ps);
          var p$0 = underlying(p);
          resolve(T, 0, p$0, result);
          return 0;
         };
      add_explicitly_removable_callb$0(ps, callback);
      return p;
     }
     if(1 === n) return nth_resolved_and_cancel_pendin(ps, 0);
     var a = caml_obj_tag(prng);
     a:
     if(250 === a)
      var b = prng[1];
     else{
      if(246 !== a && 244 !== a){var b = prng; break a;}
      var b = CamlinternalLazy[2].call(null, prng);
     }
     return nth_resolved_and_cancel_pendin
             (ps, caml_call2(Stdlib_Random[19][5], b, n));
    }
    var match$0 = match[1], qs = match$0[2], n$0 = match$0[1];
    Stdlib_List[18].call(null, cancel, ps);
    var c = caml_obj_tag(prng);
    a:
    if(250 === c)
     var d = prng[1];
    else{
     if(246 !== c && 244 !== c){var d = prng; break a;}
     var d = CamlinternalLazy[2].call(null, prng);
    }
    return nth_resolved(qs, caml_call2(Stdlib_Random[19][5], d, n$0));
   }
   function collect_fulfilled_promises_aft(results$1, ps$1){
    var results = results$1, ps = ps$1;
    for(;;){
     if(! ps) return [0, Stdlib_List[10].call(null, results)];
     var ps$0 = ps[2], p = ps[1], result = underlying(p)[1];
     switch(result[0]){
       case 1:
        return result;
       case 2:
        ps = ps$0; break;
       default:
        var v = result[1], results$0 = [0, v, results];
        results = results$0;
        ps = ps$0;
     }
    }
   }
   function nchoose(ps){
    a:
    {
     b:
     {
      var
       ps$2 =
         0 === ps
          ? (Stdlib[1].call(null, cst_Lwt_nchoose_would_return_a), ps)
          : ps;
      for(;;){
       if(! ps$2) break;
       var ps$3 = ps$2[2], p$0 = ps$2[1], result$0 = underlying(p$0)[1];
       switch(result$0[0]){
         case 1:
          var p$2 = [0, result$0]; break a;
         case 2:
          ps$2 = ps$3; break;
         default: break b;
       }
      }
      var
       p$1 = new_pending([1, ps]),
       callback =
         function(result){
          var
           p = underlying(p$1),
           result$0 = collect_fulfilled_promises_aft(0, ps);
          resolve(U, 0, p, result$0);
          return 0;
         };
      add_explicitly_removable_callb$0(ps, callback);
      var p$2 = p$1;
      break a;
     }
     var v$0 = result$0[1], acc$1 = [0, v$0, 0], acc = acc$1, ps$0 = ps$3;
     b:
     for(;;){
      if(! ps$0){var p$2 = return$(Stdlib_List[10].call(null, acc)); break;}
      var ps$1 = ps$0[2], p = ps$0[1], result = underlying(p)[1];
      switch(result[0]){
        case 1:
         var p$2 = [0, result]; break b;
        case 2:
         ps$0 = ps$1; break;
        default:
         var v = result[1], acc$0 = [0, v, acc]; acc = acc$0; ps$0 = ps$1;
      }
     }
    }
    return p$2;
   }
   function npick(ps){
    a:
    {
     b:
     {
      var
       ps$2 =
         0 === ps
          ? (Stdlib[1].call(null, cst_Lwt_npick_would_return_a_p), ps)
          : ps;
      for(;;){
       if(! ps$2) break;
       var ps$3 = ps$2[2], p$0 = ps$2[1], result$0 = underlying(p$0)[1];
       switch(result$0[0]){
         case 1:
          Stdlib_List[18].call(null, cancel, ps);
          var p$2 = [0, result$0];
          break a;
         case 2:
          ps$2 = ps$3; break;
         default: break b;
       }
      }
      var
       p$1 = new_pending([1, ps]),
       callback =
         function(result){
          var
           p = underlying(p$1),
           result$0 = collect_fulfilled_promises_aft(0, ps);
          Stdlib_List[18].call(null, cancel, ps);
          resolve(V, 0, p, result$0);
          return 0;
         };
      add_explicitly_removable_callb$0(ps, callback);
      var p$2 = p$1;
      break a;
     }
     var v$0 = result$0[1], acc$1 = [0, v$0, 0], acc = acc$1, ps$0 = ps$3;
     b:
     for(;;){
      if(! ps$0){
       Stdlib_List[18].call(null, cancel, ps);
       var p$2 = return$(Stdlib_List[10].call(null, acc));
       break;
      }
      var ps$1 = ps$0[2], p = ps$0[1], result = underlying(p)[1];
      switch(result[0]){
        case 1:
         Stdlib_List[18].call(null, cancel, ps);
         var p$2 = [0, result];
         break b;
        case 2:
         ps$0 = ps$1; break;
        default:
         var v = result[1], acc$0 = [0, v, acc]; acc = acc$0; ps$0 = ps$1;
      }
     }
    }
    return p$2;
   }
   function nchoose_split(ps){
    if(0 === ps) Stdlib[1].call(null, cst_Lwt_nchoose_split_would_re);
    a:
    {
     b:
     {
      var pending_acc = 0, ps$2 = ps;
      for(;;){
       if(! ps$2) break;
       var
        ps$3 = ps$2[2],
        p_internal$0 = ps$2[1],
        result$0 = underlying(p_internal$0)[1];
       switch(result$0[0]){
         case 1:
          var p$0 = [0, result$0]; break a;
         case 2:
          var pending_acc$0 = [0, p_internal$0, pending_acc];
          pending_acc = pending_acc$0;
          ps$2 = ps$3;
          break;
         default: break b;
       }
      }
      var
       p = new_pending([1, ps]),
       callback =
         function(result$0){
          var
           to_resolve = underlying(p),
           fulfilled = 0,
           pending = 0,
           ps$0 = ps;
          for(;;){
           if(ps$0){
            var
             ps$1 = ps$0[2],
             p_internal = ps$0[1],
             result = underlying(p_internal)[1];
            switch(result[0]){
              case 1:
               resolve(W, 0, to_resolve, result); break;
              case 2:
               var pending$0 = [0, p_internal, pending];
               pending = pending$0;
               ps$0 = ps$1;
               continue;
              default:
               var v = result[1], fulfilled$0 = [0, v, fulfilled];
               fulfilled = fulfilled$0;
               ps$0 = ps$1;
               continue;
            }
           }
           else{
            var a = Stdlib_List[10].call(null, pending);
            resolve
             (X,
              0,
              to_resolve,
              [0, [0, Stdlib_List[10].call(null, fulfilled), a]]);
           }
           return 0;
          }
         };
      add_explicitly_removable_callb$0(ps, callback);
      var p$0 = p;
      break a;
     }
     var
      v$0 = result$0[1],
      results$1 = [0, v$0, 0],
      results = results$1,
      pending = pending_acc,
      ps$0 = ps$3;
     b:
     for(;;){
      if(! ps$0){
       var p$0 = return$([0, Stdlib_List[10].call(null, results), pending]);
       break;
      }
      var
       ps$1 = ps$0[2],
       p_internal = ps$0[1],
       result = underlying(p_internal)[1];
      switch(result[0]){
        case 1:
         var p$0 = [0, result]; break b;
        case 2:
         var pending$0 = [0, p_internal, pending];
         pending = pending$0;
         ps$0 = ps$1;
         break;
        default:
         var v = result[1], results$0 = [0, v, results];
         results = results$0;
         ps$0 = ps$1;
      }
     }
    }
    return p$0;
   }
   function state(p){
    var match = underlying(p)[1];
    switch(match[0]){
      case 1:
       var exn = match[1]; return [1, exn];
      case 2:
       return 0;
      default: var v = match[1]; return [0, v];
    }
   }
   function debug_state_is(expected_state, p){
    return return$(runtime.caml_equal(state(p), expected_state));
   }
   function is_sleeping(p){
    switch(underlying(p)[1][0]){
      case 1:
       return 0;
      case 2:
       return 1;
      default: return 0;
    }
   }
   function poll(p){
    var match = underlying(p)[1];
    switch(match[0]){
      case 1:
       var e = match[1]; throw caml_maybe_attach_backtrace(e, 0);
      case 2:
       return 0;
      default: var v = match[1]; return [0, v];
    }
   }
   function apply(f, x){
    try{var a = caml_call1(f, x); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(run(exn)) return fail(exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function wrap(f){
    try{var a = return$(caml_call1(f, 0)); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(run(exn)) return fail(exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function wrap1(f, x1){
    try{var a = return$(caml_call1(f, x1)); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(run(exn)) return fail(exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function wrap2(f, x1, x2){
    try{var a = return$(caml_call2(f, x1, x2)); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(run(exn)) return fail(exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function wrap3(f, x1, x2, x3){
    try{var a = return$(caml_call3(f, x1, x2, x3)); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(run(exn)) return fail(exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function wrap4(f, x1, x2, x3, x4){
    try{var a = return$(caml_call4(f, x1, x2, x3, x4)); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(run(exn)) return fail(exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function wrap5(f, x1, x2, x3, x4, x5){
    try{var a = return$(caml_call5(f, x1, x2, x3, x4, x5)); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(run(exn)) return fail(exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function wrap6(f, x1, x2, x3, x4, x5, x6){
    try{var a = return$(caml_call6(f, x1, x2, x3, x4, x5, x6)); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(run(exn)) return fail(exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   function wrap7(f, x1, x2, x3, x4, x5, x6, x7){
    try{var a = return$(caml_call7(f, x1, x2, x3, x4, x5, x6, x7)); return a;}
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(run(exn)) return fail(exn);
     throw caml_maybe_attach_backtrace(exn, 0);
    }
   }
   var
    pause_hook = [0, function(a){}],
    paused = Lwt_sequence[4].call(null, 0),
    a = [0, 0];
   function pause(param){
    var p = add_task_r(paused);
    a[1]++;
    caml_call1(pause_hook[1], a[1]);
    return p;
   }
   function wakeup_paused(param){
    if(Lwt_sequence[6].call(null, paused)){a[1] = 0; return 0;}
    var tmp = Lwt_sequence[4].call(null, 0);
    Lwt_sequence[16].call(null, paused, tmp);
    a[1] = 0;
    return Lwt_sequence[17].call(null, function(r){return wakeup(r, 0);}, tmp);
   }
   function register_pause_notifier(f){pause_hook[1] = f; return 0;}
   function abandon_paused(param){
    Lwt_sequence[5].call(null, paused);
    a[1] = 0;
    return 0;
   }
   function paused_count(param){return a[1];}
   function map(t, f){return symbol(f, t);}
   function bind(t, f){return symbol_bind(t, f);}
   var
    Open_on_rhs = [0],
    Let_syntax = [0, return$, map, bind, both, Open_on_rhs],
    Let_syntax$0 = [0, Let_syntax];
   function symbol$0(f, p){return symbol_bind(p, f);}
   function symbol$1(p, f){return symbol(f, p);}
   function symbol$2(p$0, p){return join([0, p$0, [0, p, 0]]);}
   function symbol$3(p$0, p){return choose([0, p$0, [0, p, 0]]);}
   function let$(x, f){return symbol(f, x);}
   var
    Syntax = [0, symbol_bind, both, let$, both],
    Lwt =
      [0,
       wait,
       wakeup_later,
       wakeup_later_exn,
       return$,
       fail,
       symbol_bind,
       catch$,
       finalize,
       try_bind,
       dont_wait,
       async,
       async_exception_hook,
       both,
       join,
       all,
       pick,
       choose,
       npick,
       nchoose,
       nchoose_split,
       Canceled,
       task,
       cancel,
       on_cancel,
       protected$,
       no_cancel,
       wrap_in_cancelable,
       symbol,
       on_success,
       on_failure,
       on_termination,
       on_any,
       [0,
        symbol_bind,
        symbol$1,
        symbol$2,
        symbol$3,
        symbol$0,
        symbol,
        Let_syntax],
       Let_syntax$0,
       Syntax,
       return_unit,
       return_none,
       return_nil,
       return_true,
       return_false,
       return_some,
       return_ok,
       return_error,
       fail_with,
       fail_invalid_arg,
       of_result,
       wakeup_later_result,
       state,
       new_key,
       get,
       with_value,
       wakeup,
       wakeup_exn,
       wakeup_result,
       add_task_r,
       add_task_l,
       pause,
       wakeup_paused,
       paused_count,
       register_pause_notifier,
       abandon_paused,
       wrap,
       wrap1,
       wrap2,
       wrap3,
       wrap4,
       wrap5,
       wrap6,
       wrap7,
       symbol_bind,
       symbol$1,
       symbol$3,
       symbol$2,
       symbol$0,
       symbol,
       is_sleeping,
       ignore_result,
       [0, handle_all, handle_all_except_runtime, set, run],
       poll,
       apply,
       backtrace_bind,
       backtrace_catch,
       backtrace_finalize,
       backtrace_try_bind,
       abandon_wakeups,
       debug_state_is];
   runtime.caml_register_global(71, Lwt, "Lwt");
   return;
  }
  (globalThis));

//# 19 "../../lib/lwt/.js_of_ocaml_lwt.objs/jsoo/default/js_of_ocaml_lwt.cma.js"
//# shape: Js_of_ocaml_lwt__Import:[[],[F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*],[F(2),F(2),N,F(1),F(1),F(5),F(2),F(2)*,F(2)*,F(2),F(2),F(3),F(3),F(2),F(3),F(2),F(2),F(2),F(3),F(3),F(2),F(2),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(2),F(3),F(3),F(3),F(3),F(2),F(2),F(2),F(2),F(1)*,F(1)*,F(1),F(2),F(1),F(2),F(1),F(2),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2)*],[F(1),F(1),F(1)*,F(1)*,F(2)*,F(2)*,F(1)*,F(2)*],F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Char = global_data.Stdlib__Char,
    Poly = [0];
   function symbol(x, y){return x < y ? 1 : 0;}
   function symbol$0(x, y){return x <= y ? 1 : 0;}
   function symbol$1(x, y){return x !== y ? 1 : 0;}
   function symbol$2(x, y){return x === y ? 1 : 0;}
   function symbol$3(x, y){return y < x ? 1 : 0;}
   function symbol$4(x, y){return y <= x ? 1 : 0;}
   var compare = runtime.caml_int_compare;
   function equal(x, y){return x === y ? 1 : 0;}
   function max(x, y){return y <= x ? x : y;}
   function min(x, y){return x <= y ? x : y;}
   var
    Int_replace_polymorphic_compar =
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       compare,
       equal,
       max,
       min],
    make = Stdlib_String[1],
    init = Stdlib_String[2],
    empty = Stdlib_String[3],
    of_bytes = Stdlib_String[4],
    to_bytes = Stdlib_String[5],
    blit = Stdlib_String[6],
    concat = Stdlib_String[7],
    cat = Stdlib_String[8],
    compare$0 = Stdlib_String[10],
    starts_with = Stdlib_String[11],
    ends_with = Stdlib_String[12],
    contains_from = Stdlib_String[13],
    rcontains_from = Stdlib_String[14],
    contains = Stdlib_String[15],
    sub = Stdlib_String[16],
    split_on_char = Stdlib_String[17],
    map = Stdlib_String[18],
    mapi = Stdlib_String[19],
    fold_left = Stdlib_String[20],
    fold_right = Stdlib_String[21],
    for_all = Stdlib_String[22],
    exists = Stdlib_String[23],
    trim = Stdlib_String[24],
    escaped = Stdlib_String[25],
    uppercase_ascii = Stdlib_String[26],
    lowercase_ascii = Stdlib_String[27],
    capitalize_ascii = Stdlib_String[28],
    uncapitalize_ascii = Stdlib_String[29],
    iter = Stdlib_String[30],
    iteri = Stdlib_String[31],
    index_from = Stdlib_String[32],
    index_from_opt = Stdlib_String[33],
    rindex_from = Stdlib_String[34],
    rindex_from_opt = Stdlib_String[35],
    index = Stdlib_String[36],
    index_opt = Stdlib_String[37],
    rindex = Stdlib_String[38],
    rindex_opt = Stdlib_String[39],
    to_seq = Stdlib_String[40],
    to_seqi = Stdlib_String[41],
    of_seq = Stdlib_String[42],
    get_utf_8_uchar = Stdlib_String[43],
    is_valid_utf_8 = Stdlib_String[44],
    get_utf_16be_uchar = Stdlib_String[45],
    is_valid_utf_16be = Stdlib_String[46],
    get_utf_16le_uchar = Stdlib_String[47],
    is_valid_utf_16le = Stdlib_String[48],
    get_uint8 = Stdlib_String[49],
    get_int8 = Stdlib_String[50],
    get_uint16_ne = Stdlib_String[51],
    get_uint16_be = Stdlib_String[52],
    get_uint16_le = Stdlib_String[53],
    get_int16_ne = Stdlib_String[54],
    get_int16_be = Stdlib_String[55],
    get_int16_le = Stdlib_String[56],
    get_int32_ne = Stdlib_String[57],
    hash = Stdlib_String[58],
    seeded_hash = Stdlib_String[59],
    get_int32_be = Stdlib_String[60],
    get_int32_le = Stdlib_String[61],
    get_int64_ne = Stdlib_String[62],
    get_int64_be = Stdlib_String[63],
    get_int64_le = Stdlib_String[64],
    equal$0 = runtime.caml_string_equal,
    String =
      [0,
       make,
       init,
       empty,
       of_bytes,
       to_bytes,
       blit,
       concat,
       cat,
       compare$0,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       is_valid_utf_16le,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       hash,
       seeded_hash,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       equal$0],
    chr = Stdlib_Char[1],
    escaped$0 = Stdlib_Char[2],
    lowercase_ascii$0 = Stdlib_Char[3],
    uppercase_ascii$0 = Stdlib_Char[4],
    compare$1 = Stdlib_Char[5],
    seeded_hash$0 = Stdlib_Char[7],
    hash$0 = Stdlib_Char[8];
   function equal$1(x, y){return x === y ? 1 : 0;}
   var
    Char =
      [0,
       chr,
       escaped$0,
       lowercase_ascii$0,
       uppercase_ascii$0,
       compare$1,
       seeded_hash$0,
       hash$0,
       equal$1],
    Js_of_ocaml_lwt_Import =
      [0,
       Poly,
       Int_replace_polymorphic_compar,
       String,
       Char,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       compare,
       equal,
       max,
       min];
   runtime.caml_register_global
    (2, Js_of_ocaml_lwt_Import, "Js_of_ocaml_lwt__Import");
   return;
  }
  (globalThis));

//# 225 "../../lib/lwt/.js_of_ocaml_lwt.objs/jsoo/default/js_of_ocaml_lwt.cma.js"
//# shape: Js_of_ocaml_lwt__Lwt_xmlHttpRequest:[N,F(12),F(11),F(11),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$6 = "",
    cst$5 = "&",
    cst$7 = "=",
    cst_GET$1 = "GET",
    cst_POST$3 = "POST",
    cst_lib_lwt_lwt_xmlHttpRequest = "lib/lwt/lwt_xmlHttpRequest.ml",
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_of_jsstring = runtime.caml_string_of_jsstring,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    c = "application/x-www-form-urlencoded",
    cst$3 = cst$5,
    cst$4 = "?",
    cst$2 = cst$6,
    cst = cst$7,
    cst$0 = cst$7,
    cst$1 = cst$5,
    Js_of_ocaml_Url = global_data.Js_of_ocaml__Url,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Lwt = global_data.Lwt,
    Js_of_ocaml_Form = global_data.Js_of_ocaml__Form,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_XmlHttpRequest = global_data.Js_of_ocaml__XmlHttpRequest,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Js_of_ocaml_lwt_Import = global_data.Js_of_ocaml_lwt__Import,
    Assert_failure = global_data.Assert_failure,
    Js_of_ocaml_File = global_data.Js_of_ocaml__File,
    Wrong_headers =
      [248,
       "Js_of_ocaml_lwt__Lwt_xmlHttpRequest.Wrong_headers",
       runtime.caml_fresh_oo_id(0)],
    a = [0, cst_lib_lwt_lwt_xmlHttpRequest, 66, 29],
    b = [0, cst_lib_lwt_lwt_xmlHttpRequest, 74, 29],
    d = [0, cst_lib_lwt_lwt_xmlHttpRequest, 82, 29],
    e = [0, cst_lib_lwt_lwt_xmlHttpRequest, 90, 29],
    f = [0, cst_lib_lwt_lwt_xmlHttpRequest, 98, 29],
    cst_PATCH = "PATCH",
    cst_POST = cst_POST$3,
    cst_HEAD = "HEAD",
    cst_DELETE = "DELETE",
    cst_GET = cst_GET$1,
    cst_PUT = "PUT",
    cst_OPTIONS = "OPTIONS",
    cst_POST$0 = cst_POST$3,
    cst_POST$1 = cst_POST$3,
    cst_POST$2 = cst_POST$3,
    cst_GET$0 = cst_GET$1;
   function default_response(url, code, headers, req){
    return [0,
            url,
            code,
            headers,
            Js_of_ocaml_Js[5][7].call
             (null,
              req.responseText,
              function(param){return cst$2;},
              caml_string_of_jsstring),
            function(param){
             var match = Js_of_ocaml_Js[5][10].call(null, req.responseXML);
             if(! match) return 0;
             var doc = match[1], a = Js_of_ocaml_Js[1];
             return Js_of_ocaml_Js[2].call(null, doc.documentElement) === a
                     ? 0
                     : [0, doc];
            }];
   }
   function text_response(url, code, headers, req){
    return [0,
            url,
            code,
            headers,
            Js_of_ocaml_Js[5][7].call
             (null,
              req.responseText,
              function(param){return cst$6;},
              function(x){return x;}),
            function(param){
             throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
            }];
   }
   function document_response(url, code, headers, req){
    return [0,
            url,
            code,
            headers,
            caml_call1(Js_of_ocaml_File[3][1], req.response),
            function(param){
             throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
            }];
   }
   function json_response(url, code, headers, req){
    return [0,
            url,
            code,
            headers,
            caml_call1(Js_of_ocaml_File[3][3], req.response),
            function(param){
             throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
            }];
   }
   function blob_response(url, code, headers, req){
    return [0,
            url,
            code,
            headers,
            caml_call1(Js_of_ocaml_File[3][2], req.response),
            function(param){
             throw caml_maybe_attach_backtrace([0, Assert_failure, e], 1);
            }];
   }
   function arraybuffer_response(url, code, headers, req){
    return [0,
            url,
            code,
            headers,
            caml_call1(Js_of_ocaml_File[3][5], req.response),
            function(param){
             throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
            }];
   }
   function perform_raw
   (h,
    content_type,
    g,
    opt,
    progress,
    upload_progress,
    contents,
    override_mime_type,
    override_method,
    with_credentials,
    response_type,
    url){
    var
     headers = h ? h[1] : 0,
     get_args = g ? g[1] : 0,
     check_headers = opt ? opt[1] : function(a, param){return 1;};
    if(contents){
     var c$0 = contents[1], variant = c$0[1];
     if(440620227 === variant){
      var
       args = c$0[2],
       only_strings =
         Stdlib_List[33].call
          (null,
           function(x){
            var match = x[2];
            if(typeof match !== "number"){
             var variant = match[1];
             if(-976970511 === variant) return 1;
            }
            return 0;
           },
           args),
       form_contents =
         only_strings
          ? [0, 891486873, [0, 0]]
          : Js_of_ocaml_Form[6].call(null, 0);
      Stdlib_List[18].call
       (null,
        function(param){
         var value = param[2], name = param[1];
         return Js_of_ocaml_Form[3].call
                 (null, form_contents, [0, name, value]);
        },
        args);
      var a = [0, -836918635, form_contents];
     }
     else if(737307005 <= variant)
      var b = c$0[2], a = [0, 737307005, b];
     else
      var a = c$0;
     var contents$0 = [0, a];
    }
    else
     var contents$0 = 0;
    function override_method$0(m){
     if(! override_method) return m;
     var v = override_method[1];
     return 492530731 <= v
             ? 891112544
               <= v
               ? 994393768 <= v ? cst_PATCH : cst_POST
               : 801894688 <= v ? cst_HEAD : cst_DELETE
             : 3546230 === v ? cst_GET : 3997359 <= v ? cst_PUT : cst_OPTIONS;
    }
    if(contents$0){
     var match = contents$0[1], variant$0 = match[1];
     if(-836918635 === variant$0){
      var form = match[2], variant$1 = form[1];
      if(891486873 <= variant$1)
       var
        content_type$0 = content_type || [0, c],
        content_type$1 = content_type$0,
        method = override_method$0(cst_POST$0);
      else
       var
        content_type$1 = content_type,
        method = override_method$0(cst_POST$1);
     }
     else
      var
       content_type$1 = content_type,
       method = override_method$0(cst_POST$2);
    }
    else
     var
      method$0 = override_method$0(cst_GET$0),
      content_type$1 = content_type,
      method = method$0;
    if(0 === get_args)
     var url$0 = url;
    else{
     var j = Js_of_ocaml_Url[6].call(null, get_args);
     try{Js_of_ocaml_lwt_Import[3][35].call(null, url, 63); var f = 1, d = f;}
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn !== Stdlib[8]) throw caml_maybe_attach_backtrace(exn, 0);
      var d = 0;
     }
     var
      k = d ? cst$3 : cst$4,
      m = Stdlib[28].call(null, k, j),
      url$0 = Stdlib[28].call(null, url, m);
    }
    var
     match$0 = Lwt[22].call(null, 0),
     w = match$0[2],
     res = match$0[1],
     req = Js_of_ocaml_XmlHttpRequest[1].call(null, 0),
     t12 = Js_of_ocaml_Js[7],
     t11 = caml_jsstring_of_string(url$0),
     t10 = caml_jsstring_of_string(method);
    req.open(t10, t11, t12);
    if(override_mime_type){
     var
      mime_type = override_mime_type[1],
      t14 = caml_jsstring_of_string(mime_type);
     req.overrideMimeType(t14);
    }
    switch(response_type){
      case 0:
       req.responseType = "arraybuffer"; break;
      case 1:
       req.responseType = "blob"; break;
      case 2:
       req.responseType = "document"; break;
      case 3:
       req.responseType = "json"; break;
      case 4:
       req.responseType = "text"; break;
      default: req.responseType = cst$6;
    }
    if(with_credentials){
     var c$1 = with_credentials[1], t27 = ! ! c$1;
     req.withCredentials = t27;
    }
    if(content_type$1){
     var
      content_type$2 = content_type$1[1],
      t31 = caml_jsstring_of_string(content_type$2);
     req.setRequestHeader("Content-type", t31);
    }
    Stdlib_List[18].call
     (null,
      function(param){
       var
        v = param[2],
        n = param[1],
        t34 = caml_jsstring_of_string(v),
        t33 = caml_jsstring_of_string(n);
       return req.setRequestHeader(t33, t34);
      },
      headers);
    function headers$0(s){
     var
      t36 = runtime.caml_jsbytes_of_string(s),
      a = req.getResponseHeader(t36);
     return Js_of_ocaml_Js[5][7].call
             (null,
              a,
              function(param){return 0;},
              function(v){return [0, caml_string_of_jsstring(v)];});
    }
    var st = [0, 382334108];
    function do_check_headers(param){
     if(382334108 === st[1])
      if(caml_call2(check_headers, req.status, headers$0))
       st[1] = 583419792;
      else{
       Lwt[53].call(null, w, [0, Wrong_headers, [0, req.status, headers$0]]);
       st[1] = 479410653;
       req.abort();
      }
     return 479410653 !== st[1] ? 1 : 0;
    }
    var
     t47 =
       runtime.caml_js_wrap_callback
        (function(param){
          var match = req.readyState;
          if(2 <= match)
           switch(match - 2 | 0){
             case 0:
              do_check_headers(0); return 0;
             case 2:
              var a = do_check_headers(0);
              if(! a) return a;
              switch(response_type){
                case 0:
                 var
                  response =
                    arraybuffer_response(url$0, req.status, headers$0, req);
                 break;
                case 1:
                 var
                  response = blob_response(url$0, req.status, headers$0, req);
                 break;
                case 2:
                 var
                  response =
                    document_response(url$0, req.status, headers$0, req);
                 break;
                case 3:
                 var
                  response = json_response(url$0, req.status, headers$0, req);
                 break;
                case 4:
                 var
                  response = text_response(url$0, req.status, headers$0, req);
                 break;
                default:
                 var
                  response =
                    default_response(url$0, req.status, headers$0, req);
              }
              return Lwt[52].call(null, w, response);
           }
          return 0;
         });
    req.onreadystatechange = t47;
    if(progress){
     var
      progress$0 = progress[1],
      t51 =
        Js_of_ocaml_Dom[10].call
         (null,
          function(t50){
           caml_call2(progress$0, t50.loaded, t50.total);
           return Js_of_ocaml_Js[7];
          });
     req.onprogress = t51;
    }
    if(upload_progress){
     var
      upload_progress$0 = upload_progress[1],
      t56 =
        Js_of_ocaml_Dom[10].call
         (null,
          function(t55){
           caml_call2(upload_progress$0, t55.loaded, t55.total);
           return Js_of_ocaml_Js[7];
          }),
      t57 = req.upload;
     t57.onprogress = t56;
    }
    if(contents$0){
     var match$1 = contents$0[1], variant$2 = match$1[1];
     if(-836918635 === variant$2){
      var match$2 = match$1[2], variant$3 = match$2[1];
      if(891486873 <= variant$3){
       var
        l = match$2[2],
        l$0 = l[1],
        e =
          Stdlib_List[20].call
           (null,
            function(param){
             var match = param[2], variant = match[1], name = param[1];
             if(781515420 <= variant){
              var
               t0 = match[2],
               a =
                 Js_of_ocaml_Url[2].call
                  (null, 0, caml_string_of_jsstring(t0.name)),
               b = Stdlib[28].call(null, cst, a),
               c = Js_of_ocaml_Url[2].call(null, 0, name);
              return Stdlib[28].call(null, c, b);
             }
             var
              s = match[2],
              d = Js_of_ocaml_Url[2].call(null, 0, caml_string_of_jsstring(s)),
              e = Stdlib[28].call(null, cst$0, d),
              f = Js_of_ocaml_Url[2].call(null, 0, name);
             return Stdlib[28].call(null, f, e);
            },
            l$0),
        i =
          caml_jsstring_of_string
           (Js_of_ocaml_lwt_Import[3][7].call(null, cst$1, e)),
        t61 = Js_of_ocaml_Js[2].call(null, i);
       req.send(t61);
      }
      else{var t63 = match$2[2]; req.send(t63);}
     }
     else if(737307005 <= variant$2){
      var t67 = match$1[2];
      req.send(t67);
     }
     else{
      var
       s = match$1[2],
       t65 = Js_of_ocaml_Js[2].call(null, caml_jsstring_of_string(s));
      req.send(t65);
     }
    }
    else{var t59 = Js_of_ocaml_Js[1]; req.send(t59);}
    Lwt[24].call(null, res, function(param){return req.abort();});
    return res;
   }
   function perform_raw_url
   (a,
    content_type,
    opt,
    check_headers,
    progress,
    upload_progress,
    contents,
    override_mime_type,
    override_method,
    with_credentials,
    url){
    var headers = a ? a[1] : 0, get_args = opt ? opt[1] : 0;
    return perform_raw
            ([0, headers],
             content_type,
             [0, get_args],
             check_headers,
             progress,
             upload_progress,
             contents,
             override_mime_type,
             override_method,
             with_credentials,
             5,
             url);
   }
   function perform
   (a,
    content_type,
    opt,
    check_headers,
    progress,
    upload_progress,
    contents,
    override_mime_type,
    override_method,
    with_credentials,
    url){
    var headers = a ? a[1] : 0, get_args = opt ? opt[1] : 0;
    return perform_raw
            ([0, headers],
             content_type,
             [0, get_args],
             check_headers,
             progress,
             upload_progress,
             contents,
             override_mime_type,
             override_method,
             with_credentials,
             5,
             Js_of_ocaml_Url[9].call(null, url));
   }
   function get(s){return perform_raw_url(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, s);}
   var
    Js_of_ocaml_lwt_Lwt_xmlHttpReq =
      [0, Wrong_headers, perform_raw, perform_raw_url, perform, get];
   runtime.caml_register_global
    (88,
     Js_of_ocaml_lwt_Lwt_xmlHttpReq,
     "Js_of_ocaml_lwt__Lwt_xmlHttpRequest");
   return;
  }
  (globalThis));

//# 732 "../../lib/lwt/.js_of_ocaml_lwt.objs/jsoo/default/js_of_ocaml_lwt.cma.js"
//# shape: Js_of_ocaml_lwt__Lwt_js:[F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib = global_data.Stdlib,
    Js_of_ocaml_Console = global_data.Js_of_ocaml__Console,
    Lwt = global_data.Lwt,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html;
   function sleep(d){
    var
     match = Lwt[22].call(null, 0),
     w = match[2],
     t = match[1],
     a = Lwt[52],
     id =
       Js_of_ocaml_Dom_html[119].call
        (null, function(b){return a(w, b);}, d * 1000.);
    Lwt[24].call
     (null,
      t,
      function(param){return Js_of_ocaml_Dom_html[120].call(null, id);});
    return t;
   }
   function yield$(param){return sleep(0.);}
   function wakeup(param){
    if(1 !== param) return 0;
    var
     t1 = runtime.caml_js_wrap_callback(Lwt[58]),
     t0 = Js_of_ocaml_Dom_html[8];
    t0.setTimeout(t1, 0.);
    return 0;
   }
   Lwt[60].call(null, wakeup);
   var
    cst_Exception_during_Lwt_async = "Exception during Lwt.async: ",
    dummy = 0;
   function prerr_string(s){
    var t4 = runtime.caml_jsstring_of_string(s), t3 = Js_of_ocaml_Console[1];
    t3.log(t4);
   }
   Lwt[12][1] =
    function(exn){
     prerr_string(cst_Exception_during_Lwt_async);
     prerr_string(Stdlib_Printexc[1].call(null, exn));
     return Stdlib_Printexc[5].call(null, Stdlib[40]);
    };
   var Js_of_ocaml_lwt_Lwt_js = [0, sleep, yield$];
   runtime.caml_register_global
    (11, Js_of_ocaml_lwt_Lwt_js, "Js_of_ocaml_lwt__Lwt_js");
   return;
  }
  (globalThis));

//# 2076 "../../lib/lwt/.js_of_ocaml_lwt.objs/jsoo/default/js_of_ocaml_lwt.cma.js"
//# shape: Js_of_ocaml_lwt__Lwt_file:[F(1),F(1),F(2),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_File = global_data.Js_of_ocaml__File,
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Assert_failure = global_data.Assert_failure,
    Lwt = global_data.Lwt,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    a = [0, "lib/lwt/lwt_file.ml", 37, 22];
   function reader(kind, file){
    var
     fileReader = Js_of_ocaml_File[6],
     reader = new fileReader,
     match = Lwt[22].call(null, 0),
     w = match[2],
     res = match[1],
     t3 =
       Js_of_ocaml_Dom[10].call
        (null,
         function(param){
          if(2 === reader.readyState){
           var
            b = caml_call1(Js_of_ocaml_File[3][4], reader.result),
            match = Js_of_ocaml_Js[5][10].call(null, b);
           if(! match)
            throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
           var s = match[1];
           Lwt[52].call(null, w, s);
          }
          return Js_of_ocaml_Js[8];
         });
    reader.onloadend = t3;
    Lwt[24].call(null, res, function(param){return reader.abort();});
    if(typeof kind === "number")
     if(-550809787 === kind)
      reader.readAsDataURL(file);
     else if(936573133 <= kind)
      reader.readAsText(file);
     else
      reader.readAsBinaryString(file);
    else{var t12 = kind[2]; reader.readAsText(file, t12);}
    return res;
   }
   function readAsBinaryString(file){return reader(-1041425454, file);}
   function readAsText(file){return reader(936573133, file);}
   function readAsText_withEncoding(file, e){return reader([0, -973237525, e], file);
   }
   function readAsDataURL(file){return reader(-550809787, file);}
   var
    Js_of_ocaml_lwt_Lwt_file =
      [0,
       readAsBinaryString,
       readAsText,
       readAsText_withEncoding,
       readAsDataURL];
   runtime.caml_register_global
    (14, Js_of_ocaml_lwt_Lwt_file, "Js_of_ocaml_lwt__Lwt_file");
   return;
  }
  (globalThis));

//# 2150 "../../lib/lwt/.js_of_ocaml_lwt.objs/jsoo/default/js_of_ocaml_lwt.cma.js"
//# shape: Js_of_ocaml_lwt:[[F(1),[N,N,N,N,N,N,N,N],N,F(12),F(11),F(11),F(1)],[F(3),F(3),N,[N,N,N,N,N,N],F(1),N,F(4),F(1),F(1),F(2),F(1)]]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Js_of_ocaml_XmlHttpRequest = global_data.Js_of_ocaml__XmlHttpRequest,
    Js_of_ocaml_lwt_Lwt_xmlHttpReq =
      global_data.Js_of_ocaml_lwt__Lwt_xmlHttpRequest,
    Js_of_ocaml_File = global_data.Js_of_ocaml__File,
    Js_of_ocaml_lwt_Lwt_file = global_data.Js_of_ocaml_lwt__Lwt_file,
    create = Js_of_ocaml_XmlHttpRequest[1],
    Event = Js_of_ocaml_XmlHttpRequest[2],
    Wrong_headers = Js_of_ocaml_lwt_Lwt_xmlHttpReq[1],
    perform_raw = Js_of_ocaml_lwt_Lwt_xmlHttpReq[2],
    perform_raw_url = Js_of_ocaml_lwt_Lwt_xmlHttpReq[3],
    perform = Js_of_ocaml_lwt_Lwt_xmlHttpReq[4],
    get = Js_of_ocaml_lwt_Lwt_xmlHttpReq[5],
    XmlHttpRequest =
      [0,
       create,
       Event,
       Wrong_headers,
       perform_raw,
       perform_raw_url,
       perform,
       get],
    blob_from_string = Js_of_ocaml_File[1],
    blob_from_any = Js_of_ocaml_File[2],
    CoerceTo = Js_of_ocaml_File[3],
    ReaderEvent = Js_of_ocaml_File[4],
    filename = Js_of_ocaml_File[5],
    fileReader = Js_of_ocaml_File[6],
    addEventListener = Js_of_ocaml_File[7],
    readAsBinaryString = Js_of_ocaml_lwt_Lwt_file[1],
    readAsText = Js_of_ocaml_lwt_Lwt_file[2],
    readAsText_withEncoding = Js_of_ocaml_lwt_Lwt_file[3],
    readAsDataURL = Js_of_ocaml_lwt_Lwt_file[4],
    File =
      [0,
       blob_from_string,
       blob_from_any,
       CoerceTo,
       ReaderEvent,
       filename,
       fileReader,
       addEventListener,
       readAsBinaryString,
       readAsText,
       readAsText_withEncoding,
       readAsDataURL],
    Js_of_ocaml_lwt = [0, XmlHttpRequest, File];
   runtime.caml_register_global(4, Js_of_ocaml_lwt, "Js_of_ocaml_lwt");
   return;
  }
  (globalThis));

//# 5 "../../lib/deriving_json/.js_of_ocaml_deriving.objs/jsoo/default/js_of_ocaml_deriving.cma.js"
//# shape: Deriving_Json_import:[[],[F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*],[F(2),F(2),N,F(1),F(1),F(5),F(2),F(2)*,F(2)*,F(2),F(2),F(3),F(3),F(2),F(3),F(2),F(2),F(2),F(3),F(3),F(2),F(2),F(1),F(1),F(1),F(1),F(1),F(1),F(2),F(2),F(3),F(3),F(3),F(3),F(2),F(2),F(2),F(2),F(1)*,F(1)*,F(1),F(2),F(1),F(2),F(1),F(2),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(2),F(1),F(2),F(2),F(2),F(2),F(2),F(2),F(2)*],[F(1),F(1),F(1)*,F(1)*,F(2)*,F(2)*,F(1)*,F(2)*],F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*,F(2)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Char = global_data.Stdlib__Char,
    Poly = [0];
   function symbol(x, y){return x < y ? 1 : 0;}
   function symbol$0(x, y){return x <= y ? 1 : 0;}
   function symbol$1(x, y){return x !== y ? 1 : 0;}
   function symbol$2(x, y){return x === y ? 1 : 0;}
   function symbol$3(x, y){return y < x ? 1 : 0;}
   function symbol$4(x, y){return y <= x ? 1 : 0;}
   var compare = runtime.caml_int_compare;
   function equal(x, y){return x === y ? 1 : 0;}
   function max(x, y){return y <= x ? x : y;}
   function min(x, y){return x <= y ? x : y;}
   var
    Int_replace_polymorphic_compar =
      [0,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       compare,
       equal,
       max,
       min],
    make = Stdlib_String[1],
    init = Stdlib_String[2],
    empty = Stdlib_String[3],
    of_bytes = Stdlib_String[4],
    to_bytes = Stdlib_String[5],
    blit = Stdlib_String[6],
    concat = Stdlib_String[7],
    cat = Stdlib_String[8],
    compare$0 = Stdlib_String[10],
    starts_with = Stdlib_String[11],
    ends_with = Stdlib_String[12],
    contains_from = Stdlib_String[13],
    rcontains_from = Stdlib_String[14],
    contains = Stdlib_String[15],
    sub = Stdlib_String[16],
    split_on_char = Stdlib_String[17],
    map = Stdlib_String[18],
    mapi = Stdlib_String[19],
    fold_left = Stdlib_String[20],
    fold_right = Stdlib_String[21],
    for_all = Stdlib_String[22],
    exists = Stdlib_String[23],
    trim = Stdlib_String[24],
    escaped = Stdlib_String[25],
    uppercase_ascii = Stdlib_String[26],
    lowercase_ascii = Stdlib_String[27],
    capitalize_ascii = Stdlib_String[28],
    uncapitalize_ascii = Stdlib_String[29],
    iter = Stdlib_String[30],
    iteri = Stdlib_String[31],
    index_from = Stdlib_String[32],
    index_from_opt = Stdlib_String[33],
    rindex_from = Stdlib_String[34],
    rindex_from_opt = Stdlib_String[35],
    index = Stdlib_String[36],
    index_opt = Stdlib_String[37],
    rindex = Stdlib_String[38],
    rindex_opt = Stdlib_String[39],
    to_seq = Stdlib_String[40],
    to_seqi = Stdlib_String[41],
    of_seq = Stdlib_String[42],
    get_utf_8_uchar = Stdlib_String[43],
    is_valid_utf_8 = Stdlib_String[44],
    get_utf_16be_uchar = Stdlib_String[45],
    is_valid_utf_16be = Stdlib_String[46],
    get_utf_16le_uchar = Stdlib_String[47],
    is_valid_utf_16le = Stdlib_String[48],
    get_uint8 = Stdlib_String[49],
    get_int8 = Stdlib_String[50],
    get_uint16_ne = Stdlib_String[51],
    get_uint16_be = Stdlib_String[52],
    get_uint16_le = Stdlib_String[53],
    get_int16_ne = Stdlib_String[54],
    get_int16_be = Stdlib_String[55],
    get_int16_le = Stdlib_String[56],
    get_int32_ne = Stdlib_String[57],
    hash = Stdlib_String[58],
    seeded_hash = Stdlib_String[59],
    get_int32_be = Stdlib_String[60],
    get_int32_le = Stdlib_String[61],
    get_int64_ne = Stdlib_String[62],
    get_int64_be = Stdlib_String[63],
    get_int64_le = Stdlib_String[64],
    equal$0 = runtime.caml_string_equal,
    String =
      [0,
       make,
       init,
       empty,
       of_bytes,
       to_bytes,
       blit,
       concat,
       cat,
       compare$0,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       is_valid_utf_16le,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       hash,
       seeded_hash,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       equal$0],
    chr = Stdlib_Char[1],
    escaped$0 = Stdlib_Char[2],
    lowercase_ascii$0 = Stdlib_Char[3],
    uppercase_ascii$0 = Stdlib_Char[4],
    compare$1 = Stdlib_Char[5],
    seeded_hash$0 = Stdlib_Char[7],
    hash$0 = Stdlib_Char[8];
   function equal$1(x, y){return x === y ? 1 : 0;}
   var
    Char =
      [0,
       chr,
       escaped$0,
       lowercase_ascii$0,
       uppercase_ascii$0,
       compare$1,
       seeded_hash$0,
       hash$0,
       equal$1],
    Deriving_Json_import =
      [0,
       Poly,
       Int_replace_polymorphic_compar,
       String,
       Char,
       symbol,
       symbol$0,
       symbol$1,
       symbol$2,
       symbol$3,
       symbol$4,
       compare,
       equal,
       max,
       min];
   runtime.caml_register_global
    (2, Deriving_Json_import, "Deriving_Json_import");
   return;
  }
  (globalThis));

//# 211 "../../lib/deriving_json/.js_of_ocaml_deriving.objs/jsoo/default/js_of_ocaml_deriving.cma.js"
//# shape: Deriving_Json_lexer:[F(2)*,F(2),F(1),F(3),F(2),F(3),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    cst_Expected_integer_but_found$1 = "Expected integer but found",
    cst_Expected_positive_integer_$1 =
      "Expected positive integer or '[' but found",
    cst_Int_overflow$5 = "Int overflow",
    cst_Int32_overflow$1 = "Int32 overflow",
    caml_bytes_get = runtime.caml_bytes_get,
    caml_lex_engine = runtime.caml_lex_engine,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst_Unexpected_byte_in_string = "Unexpected byte in string",
    cst_Unexpected_end_of_input = "Unexpected end of input",
    ocaml_lex_tables =
      [0,
       '\0\0\xfc\xff\xfd\xff\xfe\xff\xff\xff\x01\0\xfe\xff\xff\xff\x02\0\xf7\xff\xf8\xff\b\0\xfa\xff\xfb\xff\xfc\xff\xfd\xff\xfe\xff\xff\xffH\0_\0\x85\0\xf9\xff\x03\0\xfd\xff\xfe\xff\xff\xff\x04\0\xfc\xff\xfd\xff\xfe\xff\xff\xff\b\0\xfc\xff\xfd\xff\xfe\xff\x04\0\xff\xff\x06\0\0\0\xfd\xff\x18\0\xfe\xff\x07\0\xff\xff"\0\xfc\xff\xfd\xff\x9c\0\xff\xff\xa6\0\xfe\xff\xbc\0\xc6\0\xfd\xff\xfe\xff\xff\xff\xd9\0\xe6\0\xfd\xff\xfe\xff\xff\xff\xf3\0\xfd\0\n\x01\xfd\xff\xfe\xff\xff\xff\x14\x01\x1e\x01+\x01\xfa\xff\xfb\xff\0\x007\x01M\x01\x01\0\x01\0\x02\0\xff\xff\0\0\b\0\x04\0\n\0\x01\0\t\0\xfe\xff\x15\0\x01\0\x1b\0\x17\0\x1d\0\x13\0\x0f\0\xfd\xff\\\x01m\x01w\x01\x97\x01\x81\x01\xa1\x01\xb7\x01\xc1\x01\x05\0\xfd\xff\xfe\xff\xff\xffY\0\xfd\xff\xfe\xff\xff\xff\x06\0\xfd\xff\xfe\xff\xff\xff\xcb\x01\xfc\xff\xfd\xff\xfe\xff\xff\xff\xdb\x01\xe8\x01\xfb\xff\xfc\xff\xfd\xff\xfc\x01\xff\xff\x06\x02\xfe\xff\x14\x02',
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x07\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x04\0\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x02\0\xff\xff\0\0\xff\xff\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x01\0\xff\xff\xff\xff\xff\xff\xff\xff\0\0\x01\0\xff\xff\xff\xff\xff\xff\x03\0\x03\0\x04\0\x04\0\x04\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\x03\0\xff\xff\x03\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\x03\0\xff\xff\0\0\xff\xff\x01\0",
       "\x02\0\0\0\0\0\0\0\0\0\x07\0\0\0\0\0\n\0\0\0\0\0\xff\xff\0\0\0\0\0\0\0\0\0\0\0\0\xff\xff\xff\xff\xff\xff\0\0\x18\0\0\0\0\0\0\0\x1c\0\0\0\0\0\0\0\0\0 \0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\xff\xff\0\0\xff\xff\0\0*\0\0\0.\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff6\0\0\0\0\0\0\0\xff\xff;\0\0\0\0\0\0\0\xff\xff\xff\xffA\0\0\0\0\0\0\0\xff\xff\xff\xffG\0\0\0\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\0\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffh\0\0\0\0\0\0\0l\0\0\0\0\0\0\0p\0\0\0\0\0\0\0t\0\0\0\0\0\0\0\0\0\xff\xffz\0\0\0\0\0\0\0\xff\xff\0\0\xff\xff\0\0\xff\xff",
       "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&\0\0\0\0\0\0\0&\0\0\0&\0'\0+\0!\0&\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0&\0\0\0\x04\0\0\0\x11\0\0\0&\0i\0\0\0\0\0\0\0\0\0\0\0\0\0_\0\x19\0\x1e\0\x11\0#\0$\0\0\0(\0\0\0\0\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0)\0\0\0\0\0^\0\0\0*\0\0\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0/\0N\0\0\x000\x001\x001\x001\x001\x001\x001\x001\x001\x001\0\x03\0\0\0\x11\0\0\0\0\0\x1d\0M\0q\0\x10\0^\0P\0X\0\x0f\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0O\0\x0e\0Q\0R\0S\0\r\0T\0\f\0\v\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0U\0W\0Y\0Z\0[\0\\\0]\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\0\0\0\0\0\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\0\0\0\0\0\0\0\0\0\0m\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\0\0\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\x002\x003\x003\x003\x003\x003\x003\x003\x003\x003\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\x15\0\x15\0\x15\0\x15\0\x15\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x007\x008\x008\x008\x008\x008\x008\x008\x008\x008\0\x01\0\x06\0\t\0\x17\0\x1b\0g\0o\0+\0\"\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\0>\0\0\0\0\0<\0=\0=\0=\0=\0=\0=\0=\0=\0=\0\0\0\0\0-\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0<\0=\0=\0=\0=\0=\0=\0=\0=\0=\0D\0\0\0\0\0B\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0B\0C\0C\0C\0C\0C\0C\0C\0C\0C\0J\0k\0\0\0H\0I\0I\0I\0I\0I\0I\0I\0I\0I\0_\0\0\0I\0I\0I\0I\0I\0I\0I\0I\0I\0I\0\0\0\0\0\0\0K\0\0\0\0\0\0\0\0\0L\0\0\0\0\0^\0H\0I\0I\0I\0I\0I\0I\0I\0I\0I\0e\0\0\0e\0\0\0\0\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0V\0\0\0\0\0\0\0\0\0\0\0^\0`\0`\0`\0`\0`\0`\0`\0`\0`\0`\0`\0`\0`\0`\0`\0`\0`\0`\0`\0`\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0\0\0a\0\0\0\0\0\0\0\0\0\0\0c\0\0\0c\0\0\x005\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0\0\0a\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0:\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0v\0w\0w\0w\0w\0w\0w\0w\0w\0w\0\0\0\0\0\0\0\0\0\0\0@\0w\0w\0w\0w\0w\0w\0w\0w\0w\0w\0|\0\0\0\0\0}\0~\0~\0~\0~\0~\0~\0~\0~\0~\0\0\0\0\0\0\0\0\0u\0\0\0\0\0\0\0\0\0F\0\x7f\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0~\0~\0~\0~\0~\0~\0~\0~\0~\0~\0\0\0\0\0\0\0{\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0s\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0y\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0",
       "\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff&\0\xff\xff\xff\xff\xff\xff&\0\xff\xff%\0%\0*\0\x1f\0%\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff&\0\xff\xff\0\0\xff\xff\b\0\xff\xff%\0f\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffH\0\x16\0\x1a\0\b\0\x1f\0#\0\xff\xff%\0\xff\xff\xff\xff\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0\v\0(\0\xff\xff\xff\xffH\0\xff\xff(\0\xff\xff\v\0\v\0\v\0\v\0\v\0\v\0,\0M\0\xff\xff,\0,\0,\0,\0,\0,\0,\0,\0,\0,\0\0\0\xff\xff\b\0\xff\xff\xff\xff\x1a\0L\0n\0\b\0H\0O\0W\0\b\0\v\0\v\0\v\0\v\0\v\0\v\0K\0\b\0P\0Q\0R\0\b\0S\0\b\0\b\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0T\0V\0X\0Y\0Z\0[\0\\\0\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\xff\xff\xff\xff\xff\xff\x12\0\x12\0\x12\0\x12\0\x12\0\x12\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffj\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0\xff\xff\x13\0\x13\0\x13\0\x13\0\x13\0\x13\0\x14\0\x14\0\x14\0\x14\0\x14\0\x14\0/\0/\0/\0/\0/\0/\0/\0/\0/\0/\x001\x001\x001\x001\x001\x001\x001\x001\x001\x001\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\x14\0\x14\0\x14\0\x14\0\x14\0\x14\x003\x003\x003\x003\x003\x003\x003\x003\x003\x003\x004\x004\x004\x004\x004\x004\x004\x004\x004\x004\0\0\0\x05\0\b\0\x16\0\x1a\0f\0n\0*\0\x1f\x008\x008\x008\x008\x008\x008\x008\x008\x008\x008\x009\0\xff\xff\xff\xff9\x009\x009\x009\x009\x009\x009\x009\x009\x009\0\xff\xff\xff\xff,\0=\0=\0=\0=\0=\0=\0=\0=\0=\0=\0>\0>\0>\0>\0>\0>\0>\0>\0>\0>\0?\0\xff\xff\xff\xff?\0?\0?\0?\0?\0?\0?\0?\0?\0?\0C\0C\0C\0C\0C\0C\0C\0C\0C\0C\0D\0D\0D\0D\0D\0D\0D\0D\0D\0D\0E\0j\0\xff\xffE\0E\0E\0E\0E\0E\0E\0E\0E\0E\0I\0\xff\xffI\0I\0I\0I\0I\0I\0I\0I\0I\0I\0\xff\xff\xff\xff\xff\xffE\0\xff\xff\xff\xff\xff\xff\xff\xffE\0\xff\xff\xff\xffI\0J\0J\0J\0J\0J\0J\0J\0J\0J\0J\0^\0\xff\xff^\0\xff\xff\xff\xff^\0^\0^\0^\0^\0^\0^\0^\0^\0^\0J\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffI\0_\0_\0_\0_\0_\0_\0_\0_\0_\0_\0`\0`\0`\0`\0`\0`\0`\0`\0`\0`\0b\0b\0b\0b\0b\0b\0b\0b\0b\0b\0\xff\xff`\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffa\0\xff\xffa\0\xff\xff4\0a\0a\0a\0a\0a\0a\0a\0a\0a\0a\0c\0c\0c\0c\0c\0c\0c\0c\0c\0c\0\xff\xff`\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff9\0d\0d\0d\0d\0d\0d\0d\0d\0d\0d\0e\0e\0e\0e\0e\0e\0e\0e\0e\0e\0r\0r\0r\0r\0r\0r\0r\0r\0r\0r\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff?\0w\0w\0w\0w\0w\0w\0w\0w\0w\0w\0x\0\xff\xff\xff\xffx\0x\0x\0x\0x\0x\0x\0x\0x\0x\0\xff\xff\xff\xff\xff\xff\xff\xffr\0\xff\xff\xff\xff\xff\xff\xff\xffE\0|\0|\0|\0|\0|\0|\0|\0|\0|\0|\0~\0~\0~\0~\0~\0~\0~\0~\0~\0~\0\xff\xff\xff\xff\xff\xffx\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\x80\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffr\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xffx\0\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff\xff",
       cst,
       cst,
       cst,
       cst,
       cst,
       cst],
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Deriving_Json_import = global_data.Deriving_Json_import,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    lexeme = Stdlib_Lexing[8],
    sub_lexeme_char = Stdlib_Lexing[18],
    c = [0, "lib/deriving_json/deriving_Json_lexer.mll", 80, 9],
    cst_Deriving_Json = "Deriving.Json: ",
    d = [0, [11, "byte ", [4, 3, 0, 0, 0]], "byte %i"],
    e =
      [0,
       [11, "Line ", [4, 3, 0, 0, [11, ", ", [2, 0, [11, ":\n", [2, 0, 0]]]]]],
       "Line %i, %s:\n%s"],
    f =
      [0,
       [11, "bytes ", [4, 3, 0, 0, [12, 45, [4, 3, 0, 0, 0]]]],
       "bytes %i-%i"],
    g =
      [0,
       [11, "Unexpected constructor ", [2, 0, [11, " for Json_", [2, 0, 0]]]],
       "Unexpected constructor %s for Json_%s"],
    h = [0, [2, 0, [11, " '", [2, 0, [12, 39, 0]]]], "%s '%s'"];
   function hex(c$0){
    if(65 <= c$0){
     if(97 <= c$0){
      if(103 > c$0) return (c$0 - 97 | 0) + 10 | 0;
     }
     else if(71 > c$0) return (c$0 - 65 | 0) + 10 | 0;
    }
    else if(9 >= c$0 - 48 >>> 0) return c$0 - 48 | 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
   }
   function custom_error(descr, v, lexbuf){
    var
     offs = lexbuf[4],
     bol = v[3],
     pos1 = (offs + lexbuf[5] | 0) - bol | 0,
     pos2 =
       Deriving_Json_import[13].call
        (null, pos1, ((offs + lexbuf[6] | 0) - bol | 0) - 1 | 0),
     bytes =
       Deriving_Json_import[8].call(null, pos1, pos2)
        ? caml_call1(Stdlib_Printf[4].call(null, d), pos1 + 1 | 0)
        : caml_call2
          (Stdlib_Printf[4].call(null, f), pos1 + 1 | 0, pos2 + 1 | 0),
     b = v[2],
     msg = caml_call3(Stdlib_Printf[4].call(null, e), b, bytes, descr),
     a = Stdlib[28].call(null, cst_Deriving_Json, msg);
    return Stdlib[2].call(null, a);
   }
   function tag_error(typename, v){
    var a = v[4], b = lexeme(v[4]);
    return custom_error
            (caml_call2(Stdlib_Printf[4].call(null, g), b, typename), v, a);
   }
   function lexer_error(descr, v, lexbuf){
    var a = lexeme(lexbuf);
    return custom_error
            (caml_call2(Stdlib_Printf[4].call(null, h), descr, a), v, lexbuf);
   }
   var
    cst_Invalid_escape_sequence = "Invalid escape sequence",
    cst_Expected_but_found = "Expected ',' but found",
    cst_Expected_or_but_found = "Expected ',' or ']' but found",
    cst_Unterminated_comment = "Unterminated comment",
    cst_Int_overflow = cst_Int_overflow$5,
    cst_Int_overflow$0 = cst_Int_overflow$5,
    cst_Expected_integer_but_found = cst_Expected_integer_but_found$1,
    cst_Int_overflow$1 = cst_Int_overflow$5,
    cst_Expected_integer_but_found$0 = cst_Expected_integer_but_found$1,
    cst_Int32_overflow = cst_Int32_overflow$1,
    cst_Expected_int32_but_found = "Expected int32 but found",
    cst_Int32_overflow$0 = cst_Int32_overflow$1,
    cst_Expected_int64_but_found = "Expected int64 but found",
    cst_Expected_number_but_found = "Expected number but found",
    cst_Expected_but_found$0 = "Expected '\"' but found",
    cst_Expected_but_found$1 = "Expected '[' but found",
    cst_Expected_but_found$2 = "Expected ']' but found",
    cst_Int_overflow$2 = cst_Int_overflow$5,
    cst_Expected_positive_integer_ = cst_Expected_positive_integer_$1,
    cst_Int_overflow$3 = cst_Int_overflow$5,
    cst_Int_overflow$4 = cst_Int_overflow$5,
    k =
      [0,
       [11, "Expected 0 but found ", [4, 0, 0, 0, 0]],
       "Expected 0 but found %d"],
    cst_Expected_positive_integer_$0 = cst_Expected_positive_integer_$1,
    n =
      [0,
       [11,
        "Int expected to be either ",
        [4, 0, 0, 0, [11, " or ", [4, 0, 0, 0, 0]]]],
       "Int expected to be either %d or %d"],
    m =
      [0,
       [11, "Int expected to be ", [4, 0, 0, 0, 0]],
       "Int expected to be %d"],
    l =
      [0,
       [11,
        "Int outside of bounds [",
        [4, 0, 0, 0, [11, " - ", [4, 0, 0, 0, [12, 93, 0]]]]],
       "Int outside of bounds [%d - %d]"],
    cst_Deriving_Json_lexer_Int_ov = "Deriving_Json_lexer.Int_overflow",
    i = Deriving_Json_import[8].call(null, Stdlib[20] % 10 | 0, 0) ? 0 : 1,
    min10 = (Stdlib[20] / 10 | 0) - i | 0,
    j = Deriving_Json_import[8].call(null, Stdlib[19] % 10 | 0, 0) ? 0 : 1,
    max10 = (Stdlib[19] / 10 | 0) + j | 0,
    Int_overflow =
      [248, cst_Deriving_Json_lexer_Int_ov, runtime.caml_fresh_oo_id(0)];
   function extract_positive_int(lexbuf){
    var
     start = lexbuf[5],
     stop = lexbuf[6],
     s = lexbuf[2],
     n = [0, 0],
     a = stop - 1 | 0;
    if(a >= start){
     var i = start;
     for(;;){
      if(Deriving_Json_import[10].call(null, n[1], max10))
       throw caml_maybe_attach_backtrace(Int_overflow, 1);
      var c = caml_bytes_get(s, i);
      n[1] = (10 * n[1] | 0) + (c - 48 | 0) | 0;
      var b = i + 1 | 0;
      if(a === i) break;
      i = b;
     }
    }
    if(Deriving_Json_import[5].call(null, n[1], 0))
     throw caml_maybe_attach_backtrace(Int_overflow, 1);
    return n[1];
   }
   function extract_negative_int(lexbuf){
    var
     start = lexbuf[5] + 1 | 0,
     stop = lexbuf[6],
     s = lexbuf[2],
     n = [0, 0],
     a = stop - 1 | 0;
    if(a >= start){
     var i = start;
     for(;;){
      if(Deriving_Json_import[6].call(null, n[1], min10))
       throw caml_maybe_attach_backtrace(Int_overflow, 1);
      var c = caml_bytes_get(s, i);
      n[1] = (10 * n[1] | 0) - (c - 48 | 0) | 0;
      var b = i + 1 | 0;
      if(a === i) break;
      i = b;
     }
    }
    if(Deriving_Json_import[9].call(null, n[1], 0))
     throw caml_maybe_attach_backtrace(Int_overflow, 1);
    return n[1];
   }
   function newline(v, lexbuf){
    v[2] = v[2] + 1 | 0;
    v[3] = lexbuf[4] + lexbuf[6] | 0;
   }
   function b(v, lexbuf){
    var ocaml_lex_state = 22;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return 0;
        case 1:
         return lexer_error(cst_Expected_but_found, v, lexbuf);
        default: return custom_error(cst_Unexpected_end_of_input, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_space(v, lexbuf){
    for(;;){
     var ocaml_lex_state$0 = 37;
     for(;;){
      var
       ocaml_lex_state$2 =
         caml_lex_engine(ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
      if(4 >= ocaml_lex_state$2 >>> 0) break;
      caml_call1(lexbuf[1], lexbuf);
      ocaml_lex_state$0 = ocaml_lex_state$2;
     }
     switch(ocaml_lex_state$2){
       case 1:
        a:
        for(;;){
         var ocaml_lex_state = 31;
         b:
         for(;;){
          var
           ocaml_lex_state$1 =
             caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
          if(3 >= ocaml_lex_state$1 >>> 0)
           switch(ocaml_lex_state$1){
             case 3:
              break b;
             case 1:
              lexer_error(cst_Unterminated_comment, v, lexbuf); break a;
             case 2:
              newline(v, lexbuf); break b;
             default: break a;
           }
          caml_call1(lexbuf[1], lexbuf);
          ocaml_lex_state = ocaml_lex_state$1;
         }
        }
        break;
       case 3: break;
       case 4:
        return;
       default: newline(v, lexbuf);
     }
    }
   }
   function a(v, lexbuf){
    var ocaml_lex_state = 44;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(3 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         try{var a = extract_positive_int(lexbuf); return a;}
         catch(exn$0){
          var exn = caml_wrap_exception(exn$0);
          if(exn === Int_overflow)
           return lexer_error(cst_Int_overflow, v, lexbuf);
          throw caml_maybe_attach_backtrace(exn, 0);
         }
        case 1:
         try{var b = extract_negative_int(lexbuf); return b;}
         catch(exn){
          var exn$0 = caml_wrap_exception(exn);
          if(exn$0 === Int_overflow)
           return lexer_error(cst_Int_overflow$0, v, lexbuf);
          throw caml_maybe_attach_backtrace(exn$0, 0);
         }
        case 2:
         return lexer_error(cst_Expected_integer_but_found, v, lexbuf);
        default: return custom_error(cst_Unexpected_end_of_input, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_positive_int(v, lexbuf){
    var ocaml_lex_state = 52;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         try{var a = extract_positive_int(lexbuf); return a;}
         catch(exn$0){
          var exn = caml_wrap_exception(exn$0);
          if(exn === Int_overflow)
           return lexer_error(cst_Int_overflow$1, v, lexbuf);
          throw caml_maybe_attach_backtrace(exn, 0);
         }
        case 1:
         return lexer_error(cst_Expected_integer_but_found$0, v, lexbuf);
        default: return custom_error(cst_Unexpected_end_of_input, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function init_lexer(buf, lexbuf){
    if(buf)
     var buf$0 = buf[1], buf$1 = buf$0;
    else
     var buf$1 = Stdlib_Buffer[1].call(null, 256);
    return [0, buf$1, 1, 0, lexbuf];
   }
   function read_int(v){read_space(v, v[4]); return a(v, v[4]);}
   function read_bounded_int(opt, max, v){
    var min = opt ? opt[1] : 0;
    read_space(v, v[4]);
    var lexbuf = v[4], n = a(v, lexbuf);
    if
     (!
      Deriving_Json_import[5].call(null, n, min)
      && ! Deriving_Json_import[9].call(null, n, max))
     return n;
    return lexer_error
            (caml_call2(Stdlib_Printf[4].call(null, l), min, max), v, lexbuf);
   }
   function read_tag_1(n, v){
    read_space(v, v[4]);
    var lexbuf = v[4], b = a(v, lexbuf);
    return Deriving_Json_import[8].call(null, n, b)
            ? n
            : lexer_error
              (caml_call1(Stdlib_Printf[4].call(null, m), n), v, lexbuf);
   }
   function read_tag_2(n1, n2, v){
    read_space(v, v[4]);
    var lexbuf = v[4], n$0 = a(v, lexbuf);
    if
     (!
      Deriving_Json_import[8].call(null, n$0, n1)
      && ! Deriving_Json_import[8].call(null, n$0, n2))
     return lexer_error
             (caml_call2(Stdlib_Printf[4].call(null, n), n1, n2), v, lexbuf);
    return n$0;
   }
   function read_int32(v){
    read_space(v, v[4]);
    var lexbuf = v[4], ocaml_lex_state = 57;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         try{var a = runtime.caml_int_of_string(lexeme(lexbuf)); return a;}
         catch(exn){return lexer_error(cst_Int32_overflow, v, lexbuf);}
        case 1:
         return lexer_error(cst_Expected_int32_but_found, v, lexbuf);
        default: return custom_error(cst_Unexpected_end_of_input, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_int64(v){
    read_space(v, v[4]);
    var lexbuf = v[4], ocaml_lex_state = 63;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         try{var a = runtime.caml_int64_of_string(lexeme(lexbuf)); return a;}
         catch(exn){return lexer_error(cst_Int32_overflow$0, v, lexbuf);}
        case 1:
         return lexer_error(cst_Expected_int64_but_found, v, lexbuf);
        default: return custom_error(cst_Unexpected_end_of_input, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_number(v){
    read_space(v, v[4]);
    var lexbuf = v[4], ocaml_lex_state = 69;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(5 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return Stdlib[24];
        case 1:
         return Stdlib[22];
        case 2:
         return Stdlib[23];
        case 3:
         return runtime.caml_float_of_string(lexeme(lexbuf));
        case 4:
         return lexer_error(cst_Expected_number_but_found, v, lexbuf);
        default: return custom_error(cst_Unexpected_end_of_input, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_string(v){
    read_space(v, v[4]);
    var lexbuf = v[4], ocaml_lex_state$2 = 102;
    for(;;){
     var
      ocaml_lex_state$6 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state$2, lexbuf);
     if(2 >= ocaml_lex_state$6 >>> 0) break;
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state$2 = ocaml_lex_state$6;
    }
    switch(ocaml_lex_state$6){
      case 0:
       Stdlib_Buffer[8].call(null, v[1]);
       for(;;){
        var ocaml_lex_state = 0;
        for(;;){
         var
          ocaml_lex_state$5 =
            caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
         if(3 >= ocaml_lex_state$5 >>> 0) break;
         caml_call1(lexbuf[1], lexbuf);
         ocaml_lex_state = ocaml_lex_state$5;
        }
        switch(ocaml_lex_state$5){
          case 0:
           return Stdlib_Buffer[2].call(null, v[1]);
          case 1:
           var ocaml_lex_state$1 = 8;
           for(;;){
            var
             ocaml_lex_state$4 =
               caml_lex_engine(ocaml_lex_tables, ocaml_lex_state$1, lexbuf);
            if(8 >= ocaml_lex_state$4 >>> 0) break;
            caml_call1(lexbuf[1], lexbuf);
            ocaml_lex_state$1 = ocaml_lex_state$4;
           }
           switch(ocaml_lex_state$4){
             case 0:
              var c$0 = sub_lexeme_char(lexbuf, lexbuf[5]);
              Stdlib_Buffer[12].call(null, v[1], c$0);
              break;
             case 1:
              Stdlib_Buffer[12].call(null, v[1], 8); break;
             case 2:
              Stdlib_Buffer[12].call(null, v[1], 12); break;
             case 3:
              Stdlib_Buffer[12].call(null, v[1], 10); break;
             case 4:
              Stdlib_Buffer[12].call(null, v[1], 13); break;
             case 5:
              Stdlib_Buffer[12].call(null, v[1], 9); break;
             case 6:
              var
               a = sub_lexeme_char(lexbuf, lexbuf[5] + 1 | 0),
               b = sub_lexeme_char(lexbuf, lexbuf[5] + 2 | 0),
               c$1 = sub_lexeme_char(lexbuf, lexbuf[5] + 3 | 0),
               d = sub_lexeme_char(lexbuf, lexbuf[5] + 4 | 0),
               f = hex(a);
              if(Deriving_Json_import[8].call(null, f, 0)){
               var g = hex(b);
               if(Deriving_Json_import[8].call(null, g, 0)){
                var
                 h = hex(d),
                 c$2 = hex(c$1) << 4 | h,
                 i = Deriving_Json_import[4][1].call(null, c$2);
                Stdlib_Buffer[12].call(null, v[1], i);
                break;
               }
              }
              custom_error(cst_Unexpected_byte_in_string, v, lexbuf);
              break;
             case 7:
              lexer_error(cst_Invalid_escape_sequence, v, lexbuf); break;
             default: custom_error(cst_Unexpected_end_of_input, v, lexbuf);
           }
           break;
          case 2:
           var c1 = sub_lexeme_char(lexbuf, lexbuf[5]);
           if(128 <= c1){
            var ocaml_lex_state$0 = 5;
            for(;;){
             var
              ocaml_lex_state$3 =
                caml_lex_engine(ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
             if(0 === ocaml_lex_state$3){
              var c2 = sub_lexeme_char(lexbuf, lexbuf[5]);
              if(194 <= c1 && 196 > c1 && 128 <= c2 && 192 > c2){
               var
                c = (c1 << 6 | c2) & 255,
                e = Deriving_Json_import[4][1].call(null, c);
               Stdlib_Buffer[12].call(null, v[1], e);
               break;
              }
              custom_error(cst_Unexpected_byte_in_string, v, lexbuf);
              break;
             }
             if(1 === ocaml_lex_state$3){
              custom_error(cst_Unexpected_end_of_input, v, lexbuf);
              break;
             }
             caml_call1(lexbuf[1], lexbuf);
             ocaml_lex_state$0 = ocaml_lex_state$3;
            }
           }
           else
            Stdlib_Buffer[12].call(null, v[1], c1);
           break;
          default:
           return custom_error(cst_Unexpected_end_of_input, v, lexbuf);
        }
       }
       break;
      case 1:
       return lexer_error(cst_Expected_but_found$0, v, lexbuf);
      default: return custom_error(cst_Unexpected_end_of_input, v, lexbuf);
    }
   }
   function read_case(v){
    read_space(v, v[4]);
    var lexbuf = v[4], ocaml_lex_state = 114;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(3 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         try{var a = [0, 3357604, extract_positive_int(lexbuf)]; return a;}
         catch(exn$0){
          var exn = caml_wrap_exception(exn$0);
          if(exn === Int_overflow)
           return lexer_error(cst_Int_overflow$2, v, lexbuf);
          throw caml_maybe_attach_backtrace(exn, 0);
         }
        case 1:
         read_space(v, lexbuf);
         return [0, 868343830, read_positive_int(v, lexbuf)];
        case 2:
         return lexer_error(cst_Expected_positive_integer_, v, lexbuf);
        default: return custom_error(cst_Unexpected_end_of_input, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_vcase(v){
    read_space(v, v[4]);
    var lexbuf = v[4], ocaml_lex_state$0 = 120;
    for(;;){
     var
      ocaml_lex_state =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state$0, lexbuf);
     if(4 >= ocaml_lex_state >>> 0) break;
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state$0 = ocaml_lex_state;
    }
    switch(ocaml_lex_state){
      case 0:
       try{var c = [0, 3357604, extract_positive_int(lexbuf)]; return c;}
       catch(exn$0){
        var exn = caml_wrap_exception(exn$0);
        if(exn === Int_overflow)
         return lexer_error(cst_Int_overflow$3, v, lexbuf);
        throw caml_maybe_attach_backtrace(exn, 0);
       }
      case 1:
       try{var d = [0, 3357604, extract_negative_int(lexbuf)]; return d;}
       catch(exn){
        var exn$0 = caml_wrap_exception(exn);
        if(exn$0 === Int_overflow)
         return lexer_error(cst_Int_overflow$4, v, lexbuf);
        throw caml_maybe_attach_backtrace(exn$0, 0);
       }
      case 2:
       read_space(v, lexbuf);
       var zero = read_positive_int(v, lexbuf);
       if(Deriving_Json_import[7].call(null, zero, 0))
        lexer_error
         (caml_call1(Stdlib_Printf[4].call(null, k), zero), v, lexbuf);
       read_space(v, lexbuf);
       b(v, lexbuf);
       read_space(v, lexbuf);
       return [0, 868343830, a(v, lexbuf)];
      case 3:
       return lexer_error(cst_Expected_positive_integer_$0, v, lexbuf);
      default: return custom_error(cst_Unexpected_end_of_input, v, lexbuf);
    }
   }
   function read_lbracket(v){
    read_space(v, v[4]);
    var lexbuf = v[4], ocaml_lex_state = 106;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return 0;
        case 1:
         return lexer_error(cst_Expected_but_found$1, v, lexbuf);
        default: return custom_error(cst_Unexpected_end_of_input, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_rbracket(v){
    read_space(v, v[4]);
    var lexbuf = v[4], ocaml_lex_state = 110;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(2 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return 0;
        case 1:
         return lexer_error(cst_Expected_but_found$2, v, lexbuf);
        default: return custom_error(cst_Unexpected_end_of_input, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   function read_comma(v){read_space(v, v[4]); return b(v, v[4]);}
   function read_comma_or_rbracket(v){
    read_space(v, v[4]);
    var lexbuf = v[4], ocaml_lex_state = 26;
    for(;;){
     var
      ocaml_lex_state$0 =
        caml_lex_engine(ocaml_lex_tables, ocaml_lex_state, lexbuf);
     if(3 >= ocaml_lex_state$0 >>> 0)
      switch(ocaml_lex_state$0){
        case 0:
         return -578117195;
        case 1:
         return 989871094;
        case 2:
         return lexer_error(cst_Expected_or_but_found, v, lexbuf);
        default: return custom_error(cst_Unexpected_end_of_input, v, lexbuf);
      }
     caml_call1(lexbuf[1], lexbuf);
     ocaml_lex_state = ocaml_lex_state$0;
    }
   }
   var
    Deriving_Json_lexer =
      [0,
       init_lexer,
       tag_error,
       read_int,
       read_bounded_int,
       read_tag_1,
       read_tag_2,
       read_int32,
       read_int64,
       read_number,
       read_string,
       read_case,
       read_vcase,
       read_comma,
       read_lbracket,
       read_rbracket,
       read_comma_or_rbracket];
   runtime.caml_register_global
    (43, Deriving_Json_lexer, "Deriving_Json_lexer");
   return;
  }
  (globalThis));

//# 919 "../../lib/deriving_json/.js_of_ocaml_deriving.objs/jsoo/default/js_of_ocaml_deriving.cma.js"
//# shape: Deriving_Json:[F(2)*,F(1)*,F(1)*,F(2),F(2),F(3)*,F(1)*,F(1)*,F(1)*,F(1)*,N,N,N,N,N,N,N,N,N,F(1)*,F(1)*,F(1)*,F(1)*,F(2),F(3),F(2),F(3),F(2),F(3),F(2),F(3)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Unimplemented$1 = "Unimplemented",
    cst_0$0 = "[0,",
    cst_0_a = "[0,%a]",
    cst_lib_deriving_json_deriving = "lib/deriving_json/deriving_Json.ml",
    caml_int64_and = runtime.caml_int64_and,
    caml_int64_create_lo_mi_hi = runtime.caml_int64_create_lo_mi_hi,
    caml_int64_or = runtime.caml_int64_or,
    caml_int64_shift_left = runtime.caml_int64_shift_left,
    caml_int64_shift_right = runtime.caml_int64_shift_right,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_string_get = runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = "\\\\",
    cst = '\\"',
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Deriving_Json_lexer = global_data.Deriving_Json_lexer,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Deriving_Json_import = global_data.Deriving_Json_import,
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    a = [0, cst_lib_deriving_json_deriving, 128, 28],
    b = [0, cst_lib_deriving_json_deriving, 130, 32],
    c = [0, cst_lib_deriving_json_deriving, 159, 28],
    d = [0, cst_lib_deriving_json_deriving, 161, 32];
   function make(write, read){return [0, write, read];}
   function read(t){return t[2];}
   function write(t){return t[1];}
   function convert(t, f1, f2){
    return [0,
            function(buf, a){
             var b = caml_call1(f2, a);
             return caml_call2(t[1], buf, b);
            },
            function(buf){return caml_call1(f1, caml_call1(t[2], buf));}];
   }
   function to_string(t, v){
    var buf = Stdlib_Buffer[1].call(null, 50);
    caml_call2(t[1], buf, v);
    return Stdlib_Buffer[2].call(null, buf);
   }
   function from_string(t, s){
    var
     a = Stdlib_Lexing[3].call(null, 0, s),
     b = Deriving_Json_lexer[1].call(null, 0, a);
    return caml_call1(t[2], b);
   }
   function Defaults(J){
    var write = J[1], read = J[2], t = [0, write, read];
    function to_string$0(v){return to_string(t, v);}
    function from_string$0(s){return from_string(t, s);}
    function match_variant(hash){
     throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
    }
    function read_variant(buf, hash){
     throw caml_maybe_attach_backtrace([0, Assert_failure, b], 1);
    }
    return [0,
            t,
            write,
            read,
            to_string$0,
            from_string$0,
            match_variant,
            read_variant];
   }
   function Defaults$0(J){
    var
     write = J[1],
     read = J[2],
     match_variant = J[3],
     read_variant = J[4],
     t = [0, write, read];
    function to_string$0(v){return to_string(t, v);}
    function from_string$0(s){return from_string(t, s);}
    return [0,
            t,
            write,
            read,
            to_string$0,
            from_string$0,
            match_variant,
            read_variant];
   }
   function Defaults$1(J){
    var t = J[1], read = t[2], write = t[1];
    function to_string$0(v){return to_string(t, v);}
    function from_string$0(s){return from_string(t, s);}
    function match_variant(hash){
     throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
    }
    function read_variant(buf, hash){
     throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
    }
    return [0,
            t,
            write,
            read,
            to_string$0,
            from_string$0,
            match_variant,
            read_variant];
   }
   function Convert(J){
    var
     t = convert(J[1], J[2], J[3]),
     Tmp = Defaults$1([0, t]),
     t$0 = Tmp[1],
     write = Tmp[2],
     read = Tmp[3],
     to_string = Tmp[4],
     from_string = Tmp[5],
     match_variant = Tmp[6],
     read_variant = Tmp[7];
    return [0,
            t$0,
            write,
            read,
            to_string,
            from_string,
            match_variant,
            read_variant];
   }
   function write$1(buffer, c){
    var a = Stdlib[33].call(null, c);
    return Stdlib_Buffer[16].call(null, buffer, a);
   }
   function read$1(buf){
    var a = Deriving_Json_lexer[4].call(null, 0, 255, buf);
    return Stdlib[29].call(null, a);
   }
   var Json_char = Defaults([0, write$1, read$1]);
   function write$2(buffer, b){
    var a = b ? 49 : 48;
    return Stdlib_Buffer[12].call(null, buffer, a);
   }
   function read$2(buf){
    var a = Deriving_Json_lexer[6].call(null, 0, 1, buf);
    return Deriving_Json_import[8].call(null, 1, a);
   }
   var Json_bool = Defaults([0, write$2, read$2]);
   function write$3(buffer, param){
    return Stdlib_Buffer[12].call(null, buffer, 48);
   }
   function read$3(buf){Deriving_Json_lexer[5].call(null, 0, buf); return 0;}
   var
    Json_unit = Defaults([0, write$3, read$3]),
    e = [0, [4, 0, 0, 0, 0], "%d"];
   function write$4(buffer, i){
    return caml_call1(Stdlib_Printf[5].call(null, buffer, e), i);
   }
   function read$4(buf){return Deriving_Json_lexer[3].call(null, buf);}
   var
    Json_int = Defaults([0, write$4, read$4]),
    f = [0, [5, 0, 0, 0, 0], "%ld"];
   function write$5(buffer, i){
    return caml_call1(Stdlib_Printf[5].call(null, buffer, f), i);
   }
   function read$5(buf){return Deriving_Json_lexer[7].call(null, buf);}
   var
    Json_int32 = Defaults([0, write$5, read$5]),
    mask24 = caml_int64_create_lo_mi_hi(16777215, 0, 0),
    mask16 = caml_int64_create_lo_mi_hi(65535, 0, 0),
    g =
      [0,
       [11,
        "[255,",
        [7,
         0,
         0,
         0,
         [12, 44, [7, 0, 0, 0, [12, 44, [7, 0, 0, 0, [12, 93, 0]]]]]]],
       "[255,%Ld,%Ld,%Ld]"];
   function write$6(buffer, i){
    return caml_call3
            (Stdlib_Printf[5].call(null, buffer, g),
             caml_int64_and(i, mask24),
             caml_int64_and(caml_int64_shift_right(i, 24), mask24),
             caml_int64_and(caml_int64_shift_right(i, 48), mask16));
   }
   function read$6(buf){
    Deriving_Json_lexer[14].call(null, buf);
    Deriving_Json_lexer[5].call(null, 255, buf);
    Deriving_Json_lexer[13].call(null, buf);
    var h1 = Deriving_Json_lexer[8].call(null, buf);
    Deriving_Json_lexer[13].call(null, buf);
    var
     h2 = caml_int64_shift_left(Deriving_Json_lexer[8].call(null, buf), 24);
    Deriving_Json_lexer[13].call(null, buf);
    var
     h3 = caml_int64_shift_left(Deriving_Json_lexer[8].call(null, buf), 48);
    Deriving_Json_lexer[15].call(null, buf);
    return caml_int64_or(h3, caml_int64_or(h2, h1));
   }
   var
    Json_int64 = Defaults([0, write$6, read$6]),
    cst_Unimplemented = cst_Unimplemented$1,
    cst_Unimplemented$0 = cst_Unimplemented$1;
   function write$0(buf, param){
    return Stdlib[2].call(null, cst_Unimplemented);
   }
   function read$0(buf){return Stdlib[2].call(null, cst_Unimplemented$0);}
   var
    Json_nativeint = Defaults([0, write$0, read$0]),
    h = [0, [8, [0, 0, 3], 0, [0, 15], 0], "%.15g"],
    i = [0, [8, [0, 0, 3], 0, [0, 17], 0], "%.17g"];
   function write$7(buffer, f){
    var s = caml_call1(Stdlib_Printf[4].call(null, h), f);
    return runtime.caml_float_of_string(s) === f
            ? Stdlib_Buffer[16].call(null, buffer, s)
            : caml_call1(Stdlib_Printf[5].call(null, buffer, i), f);
   }
   function read$7(buf){return Deriving_Json_lexer[9].call(null, buf);}
   var
    Json_float = Defaults([0, write$7, read$7]),
    j = [0, [11, "\\u", [4, 8, [0, 2, 4], 0, 0]], "\\u%04X"],
    cst_b = "\\b",
    cst_t = "\\t",
    cst_n = "\\n",
    cst_f = "\\f",
    cst_r = "\\r";
   function write$8(buffer, s){
    Stdlib_Buffer[12].call(null, buffer, 34);
    var a = runtime.caml_ml_string_length(s) - 1 | 0, b = 0;
    if(a >= 0){
     var i = b;
     for(;;){
      var c = caml_string_get(s, i);
      a:
      if(34 === c)
       Stdlib_Buffer[16].call(null, buffer, cst);
      else if(92 === c)
       Stdlib_Buffer[16].call(null, buffer, cst$0);
      else{
       if(14 > c)
        switch(c){
          case 8:
           Stdlib_Buffer[16].call(null, buffer, cst_b); break a;
          case 9:
           Stdlib_Buffer[16].call(null, buffer, cst_t); break a;
          case 10:
           Stdlib_Buffer[16].call(null, buffer, cst_n); break a;
          case 12:
           Stdlib_Buffer[16].call(null, buffer, cst_f); break a;
          case 13:
           Stdlib_Buffer[16].call(null, buffer, cst_r); break a;
        }
       if(31 < c)
        if(128 <= c){
         var
          e = 194 | caml_string_get(s, i) >>> 6 | 0,
          f = Deriving_Json_import[4][1].call(null, e);
         Stdlib_Buffer[12].call(null, buffer, f);
         var
          g = 128 | caml_string_get(s, i) & 63,
          h = Deriving_Json_import[4][1].call(null, g);
         Stdlib_Buffer[12].call(null, buffer, h);
        }
        else{
         var k = caml_string_get(s, i);
         Stdlib_Buffer[12].call(null, buffer, k);
        }
       else
        caml_call1(Stdlib_Printf[5].call(null, buffer, j), c);
      }
      var d = i + 1 | 0;
      if(a === i) break;
      i = d;
     }
    }
    return Stdlib_Buffer[12].call(null, buffer, 34);
   }
   function read$8(buf){return Deriving_Json_lexer[10].call(null, buf);}
   var
    Json_string = Defaults([0, write$8, read$8]),
    cst_list = "list",
    k = [0, [11, cst_0$0, [15, [12, 44, 0]]], "[0,%a,"],
    cst_ref = "ref",
    l = [0, [11, cst_0$0, [15, [12, 93, 0]]], cst_0_a],
    cst_option = "option",
    m = [0, [11, cst_0$0, [15, [12, 93, 0]]], cst_0_a],
    cst_array = "array",
    cst_0 = "[0";
   function read_list(f, buf){
    a:
    {
     var l = 0, c = 0;
     for(;;){
      var match = Deriving_Json_lexer[11].call(null, buf), variant = match[1];
      if(868343830 > variant) break;
      if(0 !== match[2]) break a;
      Deriving_Json_lexer[13].call(null, buf);
      var x = caml_call1(f, buf);
      Deriving_Json_lexer[13].call(null, buf);
      var c$0 = c + 1 | 0, l$0 = [0, x, l];
      l = l$0;
      c = c$0;
     }
     if(0 === match[2]){
      if(c >= 1){
       var i = c;
       for(;;){
        Deriving_Json_lexer[15].call(null, buf);
        var a = i - 1 | 0;
        if(1 === i) break;
        i = a;
       }
      }
      return Stdlib_List[10].call(null, l);
     }
    }
    return Deriving_Json_lexer[2].call(null, cst_list, buf);
   }
   function write_list(f, buffer, xs){
    var l = xs, c = 0;
    for(;;){
     if(! l) break;
     var xs$0 = l[2], x = l[1];
     caml_call2(Stdlib_Printf[5].call(null, buffer, k), f, x);
     var c$0 = c + 1 | 0;
     l = xs$0;
     c = c$0;
    }
    Stdlib_Buffer[12].call(null, buffer, 48);
    if(c >= 1){
     var i = c;
     for(;;){
      Stdlib_Buffer[12].call(null, buffer, 93);
      var a = i - 1 | 0;
      if(1 === i) break;
      i = a;
     }
    }
    return 0;
   }
   function Json_list(A){
    var a = A[3];
    function read(b){return read_list(a, b);}
    var b = A[2];
    function write(a, c){return write_list(b, a, c);}
    return Defaults([0, write, read]);
   }
   function read_ref(f, buf){
    var match = Deriving_Json_lexer[11].call(null, buf);
    if(typeof match !== "number"){
     var variant = match[1];
     if(868343830 === variant && 0 === match[2]){
      Deriving_Json_lexer[13].call(null, buf);
      var x = caml_call1(f, buf);
      Deriving_Json_lexer[15].call(null, buf);
      return [0, x];
     }
    }
    return Deriving_Json_lexer[2].call(null, cst_ref, buf);
   }
   function write_ref(f, buffer, r){
    var a = r[1];
    return caml_call2(Stdlib_Printf[5].call(null, buffer, l), f, a);
   }
   function Json_ref(A){
    var a = A[2];
    function write(b, c){return write_ref(a, b, c);}
    var b = A[3];
    function read(a){return read_ref(b, a);}
    return Defaults([0, write, read]);
   }
   function read_option(f, buf){
    var match = Deriving_Json_lexer[11].call(null, buf), variant = match[1];
    if(868343830 <= variant){
     if(0 === match[2]){
      Deriving_Json_lexer[13].call(null, buf);
      var x = caml_call1(f, buf);
      Deriving_Json_lexer[15].call(null, buf);
      return [0, x];
     }
    }
    else if(0 === match[2]) return 0;
    return Deriving_Json_lexer[2].call(null, cst_option, buf);
   }
   function write_option(f, buffer, o){
    if(! o) return Stdlib_Buffer[12].call(null, buffer, 48);
    var x = o[1];
    return caml_call2(Stdlib_Printf[5].call(null, buffer, m), f, x);
   }
   function Json_option(A){
    var a = A[3];
    function read(b){return read_option(a, b);}
    var b = A[2];
    function write(a, c){return write_option(b, a, c);}
    return Defaults([0, write, read]);
   }
   function read_array(f, buf){
    var match = Deriving_Json_lexer[11].call(null, buf);
    a:
    if(typeof match !== "number" && 868343830 === match[1]){
     var a = match[2];
     if(0 !== a && 254 !== a) break a;
     var acc = 0;
     for(;;){
      if(989871094 <= Deriving_Json_lexer[16].call(null, buf)){
       var b = Stdlib_List[10].call(null, acc);
       return Stdlib_Array[11].call(null, b);
      }
      var x = caml_call1(f, buf), acc$0 = [0, x, acc];
      acc = acc$0;
     }
    }
    return Deriving_Json_lexer[2].call(null, cst_array, buf);
   }
   function write_array(f, buffer, a){
    Stdlib_Buffer[16].call(null, buffer, cst_0);
    var b = a.length - 2 | 0, c = 0;
    if(b >= 0){
     var i = c;
     for(;;){
      Stdlib_Buffer[12].call(null, buffer, 44);
      caml_call2(f, buffer, runtime.caml_check_bound(a, i)[i + 1]);
      var d = i + 1 | 0;
      if(b === i) break;
      i = d;
     }
    }
    return Stdlib_Buffer[12].call(null, buffer, 93);
   }
   function Json_array(A){
    var a = A[3];
    function read(b){return read_array(a, b);}
    var b = A[2];
    function write(a, c){return write_array(b, a, c);}
    return Defaults([0, write, read]);
   }
   var
    Deriving_Json =
      [0,
       make,
       write,
       read,
       to_string,
       from_string,
       convert,
       Convert,
       Defaults,
       Defaults$0,
       Defaults$1,
       Json_char,
       Json_bool,
       Json_unit,
       Json_int,
       Json_int32,
       Json_int64,
       Json_nativeint,
       Json_float,
       Json_string,
       Json_list,
       Json_ref,
       Json_option,
       Json_array,
       read_list,
       write_list,
       read_ref,
       write_ref,
       read_option,
       write_option,
       read_array,
       write_array];
   runtime.caml_register_global(36, Deriving_Json, "Deriving_Json");
   return;
  }
  (globalThis));

//# 4 ".viewer_js.eobjs/jsoo/dune__exe.cmo.js"
//# shape: Dune__exe:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Dune_exe = [0];
   runtime.caml_register_global(0, Dune_exe, "Dune__exe");
   return;
  }
  (globalThis));

//# 5 ".viewer_js.eobjs/jsoo/dune__exe__Scene.cmo.js"
//# shape: Dune__exe__Scene:[F(1),F(2),N,F(4),F(5),F(3)*,F(3)*,F(1)*,F(2),F(1)]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$36 = "",
    cst$37 = ",",
    cst_0$2 = "[0",
    cst_1$1 = "[1",
    cst$38 = "]";
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$10 = cst$36,
    cst$16 = cst$37,
    cst$17 = cst$37,
    cst$18 = cst$38,
    cst$11 = cst$37,
    cst$12 = cst$37,
    cst$13 = cst$37,
    cst$14 = cst$38,
    cst$15 = cst$37,
    cst$19 = cst$37,
    cst$20 = cst$37,
    cst$21 = cst$38,
    cst$22 = cst$37,
    cst$23 = cst$37,
    cst$24 = cst$37,
    cst$25 = cst$37,
    cst$26 = cst$37,
    cst$27 = cst$37,
    cst$28 = cst$38,
    cst$29 = cst$37,
    cst$30 = cst$37,
    cst$31 = cst$37,
    cst$32 = cst$37,
    cst$33 = cst$37,
    cst$34 = cst$37,
    cst$35 = cst$38,
    cst = cst$36,
    cst$0 = cst$37,
    cst$1 = cst$37,
    cst$2 = cst$38,
    cst$3 = cst$37,
    cst$4 = cst$37,
    cst$5 = cst$37,
    cst$6 = cst$37,
    cst$7 = cst$37,
    cst$8 = cst$37,
    cst$9 = cst$38,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Array = global_data.Stdlib__Array,
    Deriving_Json_lexer = global_data.Deriving_Json_lexer,
    Deriving_Json = global_data.Deriving_Json,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    cst_0 = cst_0$2,
    cst_1 = cst_1$1;
   function command_of_json(buf){
    var match = Deriving_Json_lexer[11].call(null, buf);
    if(typeof match !== "number"){
     var variant = match[1];
     if(868343830 === variant){
      var match$0 = match[2];
      if(0 === match$0){
       Deriving_Json_lexer[13].call(null, buf);
       var a = caml_call1(Deriving_Json[18][3], buf);
       Deriving_Json_lexer[13].call(null, buf);
       var b = caml_call1(Deriving_Json[18][3], buf);
       Deriving_Json_lexer[15].call(null, buf);
       return [0, a, b];
      }
      if(1 === match$0){
       Deriving_Json_lexer[13].call(null, buf);
       var a$0 = caml_call1(Deriving_Json[18][3], buf);
       Deriving_Json_lexer[13].call(null, buf);
       var b$0 = caml_call1(Deriving_Json[18][3], buf);
       Deriving_Json_lexer[13].call(null, buf);
       var c = caml_call1(Deriving_Json[18][3], buf);
       Deriving_Json_lexer[13].call(null, buf);
       var d = caml_call1(Deriving_Json[18][3], buf);
       Deriving_Json_lexer[13].call(null, buf);
       var e = caml_call1(Deriving_Json[18][3], buf);
       Deriving_Json_lexer[13].call(null, buf);
       var f = caml_call1(Deriving_Json[18][3], buf);
       Deriving_Json_lexer[15].call(null, buf);
       return [1, a$0, b$0, c, d, e, f];
      }
     }
    }
    return Deriving_Json_lexer[2].call(null, cst, buf);
   }
   function command_to_json(buf, param){
    if(0 === param[0]){
     var b = param[2], a = param[1];
     Stdlib_Buffer[16].call(null, buf, cst_0);
     Stdlib_Buffer[16].call(null, buf, cst$0);
     caml_call2(Deriving_Json[18][2], buf, a);
     Stdlib_Buffer[16].call(null, buf, cst$1);
     caml_call2(Deriving_Json[18][2], buf, b);
     return Stdlib_Buffer[16].call(null, buf, cst$2);
    }
    var
     f = param[6],
     e = param[5],
     d = param[4],
     c = param[3],
     b$0 = param[2],
     a$0 = param[1];
    Stdlib_Buffer[16].call(null, buf, cst_1);
    Stdlib_Buffer[16].call(null, buf, cst$3);
    caml_call2(Deriving_Json[18][2], buf, a$0);
    Stdlib_Buffer[16].call(null, buf, cst$4);
    caml_call2(Deriving_Json[18][2], buf, b$0);
    Stdlib_Buffer[16].call(null, buf, cst$5);
    caml_call2(Deriving_Json[18][2], buf, c);
    Stdlib_Buffer[16].call(null, buf, cst$6);
    caml_call2(Deriving_Json[18][2], buf, d);
    Stdlib_Buffer[16].call(null, buf, cst$7);
    caml_call2(Deriving_Json[18][2], buf, e);
    Stdlib_Buffer[16].call(null, buf, cst$8);
    caml_call2(Deriving_Json[18][2], buf, f);
    return Stdlib_Buffer[16].call(null, buf, cst$9);
   }
   var
    command_json =
      Deriving_Json[1].call(null, command_to_json, command_of_json),
    cst_0$0 = cst_0$2,
    cst_1$0 = cst_1$1,
    cst_0$1 = cst_0$2,
    cst_2 = "[2",
    cst_3 = "[3";
   function element_of_json(poly_color, poly_font, poly_text, buf){
    var match = Deriving_Json_lexer[11].call(null, buf);
    if(typeof match !== "number"){
     var variant = match[1];
     if(868343830 === variant){
      var match$0 = match[2];
      if(3 >= match$0 >>> 0)
       switch(match$0){
         case 0:
          Deriving_Json_lexer[13].call(null, buf);
          var
           a =
             Deriving_Json[30].call
              (null, function(buf){return command_of_json(buf);}, buf);
          Deriving_Json_lexer[13].call(null, buf);
          var
           b =
             Deriving_Json[28].call
              (null, function(buf){return caml_call1(poly_color, buf);}, buf);
          Deriving_Json_lexer[13].call(null, buf);
          var
           c =
             Deriving_Json[28].call
              (null, function(buf){return caml_call1(poly_color, buf);}, buf);
          Deriving_Json_lexer[15].call(null, buf);
          return [0, a, b, c];
         case 1:
          Deriving_Json_lexer[13].call(null, buf);
          var
           a$0 =
             Deriving_Json[30].call
              (null,
               function(buf){
                Deriving_Json_lexer[14].call(null, buf);
                Deriving_Json_lexer[5].call(null, 0, buf);
                Deriving_Json_lexer[13].call(null, buf);
                var a = caml_call1(Deriving_Json[18][3], buf);
                Deriving_Json_lexer[13].call(null, buf);
                var b = caml_call1(Deriving_Json[18][3], buf);
                Deriving_Json_lexer[15].call(null, buf);
                return [0, a, b];
               },
               buf);
          Deriving_Json_lexer[13].call(null, buf);
          var
           b$0 =
             Deriving_Json[28].call
              (null, function(buf){return caml_call1(poly_color, buf);}, buf);
          Deriving_Json_lexer[13].call(null, buf);
          var
           c$0 =
             Deriving_Json[28].call
              (null, function(buf){return caml_call1(poly_color, buf);}, buf);
          Deriving_Json_lexer[15].call(null, buf);
          return [1, a$0, b$0, c$0];
         case 2:
          Deriving_Json_lexer[13].call(null, buf);
          var a$1 = caml_call1(Deriving_Json[18][3], buf);
          Deriving_Json_lexer[13].call(null, buf);
          var b$1 = caml_call1(Deriving_Json[18][3], buf);
          Deriving_Json_lexer[13].call(null, buf);
          var c$1 = caml_call1(Deriving_Json[18][3], buf);
          Deriving_Json_lexer[13].call(null, buf);
          var d = caml_call1(Deriving_Json[18][3], buf);
          Deriving_Json_lexer[13].call(null, buf);
          var
           e =
             Deriving_Json[28].call
              (null, function(buf){return caml_call1(poly_color, buf);}, buf);
          Deriving_Json_lexer[13].call(null, buf);
          var
           f =
             Deriving_Json[28].call
              (null, function(buf){return caml_call1(poly_color, buf);}, buf);
          Deriving_Json_lexer[15].call(null, buf);
          return [2, a$1, b$1, c$1, d, e, f];
         default:
          Deriving_Json_lexer[13].call(null, buf);
          var a$2 = caml_call1(Deriving_Json[18][3], buf);
          Deriving_Json_lexer[13].call(null, buf);
          var b$2 = caml_call1(Deriving_Json[18][3], buf);
          Deriving_Json_lexer[13].call(null, buf);
          var c$2 = caml_call1(poly_text, buf);
          Deriving_Json_lexer[13].call(null, buf);
          var d$0 = caml_call1(poly_font, buf);
          Deriving_Json_lexer[13].call(null, buf);
          var
           e$0 =
             Deriving_Json[28].call
              (null, function(buf){return caml_call1(poly_color, buf);}, buf);
          Deriving_Json_lexer[13].call(null, buf);
          var
           f$0 =
             Deriving_Json[28].call
              (null, function(buf){return caml_call1(poly_color, buf);}, buf);
          Deriving_Json_lexer[15].call(null, buf);
          return [3, a$2, b$2, c$2, d$0, e$0, f$0];
       }
     }
    }
    return Deriving_Json_lexer[2].call(null, cst$10, buf);
   }
   function element_to_json(poly_color, poly_font, poly_text, buf, param){
    switch(param[0]){
      case 0:
       var c = param[3], b = param[2], a = param[1];
       Stdlib_Buffer[16].call(null, buf, cst_0$0);
       Stdlib_Buffer[16].call(null, buf, cst$11);
       Deriving_Json[31].call
        (null, function(buf, a){return command_to_json(buf, a);}, buf, a);
       Stdlib_Buffer[16].call(null, buf, cst$12);
       Deriving_Json[29].call
        (null,
         function(buf, a){return caml_call2(poly_color, buf, a);},
         buf,
         b);
       Stdlib_Buffer[16].call(null, buf, cst$13);
       Deriving_Json[29].call
        (null,
         function(buf, a){return caml_call2(poly_color, buf, a);},
         buf,
         c);
       return Stdlib_Buffer[16].call(null, buf, cst$14);
      case 1:
       var c$0 = param[3], b$0 = param[2], a$0 = param[1];
       Stdlib_Buffer[16].call(null, buf, cst_1$0);
       Stdlib_Buffer[16].call(null, buf, cst$15);
       Deriving_Json[31].call
        (null,
         function(buf, a){
          var b = a[2], a$0 = a[1];
          Stdlib_Buffer[16].call(null, buf, cst_0$1);
          Stdlib_Buffer[16].call(null, buf, cst$16);
          caml_call2(Deriving_Json[18][2], buf, a$0);
          Stdlib_Buffer[16].call(null, buf, cst$17);
          caml_call2(Deriving_Json[18][2], buf, b);
          return Stdlib_Buffer[16].call(null, buf, cst$18);
         },
         buf,
         a$0);
       Stdlib_Buffer[16].call(null, buf, cst$19);
       Deriving_Json[29].call
        (null,
         function(buf, a){return caml_call2(poly_color, buf, a);},
         buf,
         b$0);
       Stdlib_Buffer[16].call(null, buf, cst$20);
       Deriving_Json[29].call
        (null,
         function(buf, a){return caml_call2(poly_color, buf, a);},
         buf,
         c$0);
       return Stdlib_Buffer[16].call(null, buf, cst$21);
      case 2:
       var
        f = param[6],
        e = param[5],
        d = param[4],
        c$1 = param[3],
        b$1 = param[2],
        a$1 = param[1];
       Stdlib_Buffer[16].call(null, buf, cst_2);
       Stdlib_Buffer[16].call(null, buf, cst$22);
       caml_call2(Deriving_Json[18][2], buf, a$1);
       Stdlib_Buffer[16].call(null, buf, cst$23);
       caml_call2(Deriving_Json[18][2], buf, b$1);
       Stdlib_Buffer[16].call(null, buf, cst$24);
       caml_call2(Deriving_Json[18][2], buf, c$1);
       Stdlib_Buffer[16].call(null, buf, cst$25);
       caml_call2(Deriving_Json[18][2], buf, d);
       Stdlib_Buffer[16].call(null, buf, cst$26);
       Deriving_Json[29].call
        (null,
         function(buf, a){return caml_call2(poly_color, buf, a);},
         buf,
         e);
       Stdlib_Buffer[16].call(null, buf, cst$27);
       Deriving_Json[29].call
        (null,
         function(buf, a){return caml_call2(poly_color, buf, a);},
         buf,
         f);
       return Stdlib_Buffer[16].call(null, buf, cst$28);
      default:
       var
        f$0 = param[6],
        e$0 = param[5],
        d$0 = param[4],
        c$2 = param[3],
        b$2 = param[2],
        a$2 = param[1];
       Stdlib_Buffer[16].call(null, buf, cst_3);
       Stdlib_Buffer[16].call(null, buf, cst$29);
       caml_call2(Deriving_Json[18][2], buf, a$2);
       Stdlib_Buffer[16].call(null, buf, cst$30);
       caml_call2(Deriving_Json[18][2], buf, b$2);
       Stdlib_Buffer[16].call(null, buf, cst$31);
       caml_call2(poly_text, buf, c$2);
       Stdlib_Buffer[16].call(null, buf, cst$32);
       caml_call2(poly_font, buf, d$0);
       Stdlib_Buffer[16].call(null, buf, cst$33);
       Deriving_Json[29].call
        (null,
         function(buf, a){return caml_call2(poly_color, buf, a);},
         buf,
         e$0);
       Stdlib_Buffer[16].call(null, buf, cst$34);
       Deriving_Json[29].call
        (null,
         function(buf, a){return caml_call2(poly_color, buf, a);},
         buf,
         f$0);
       return Stdlib_Buffer[16].call(null, buf, cst$35);
    }
   }
   function element_json(poly_color, poly_font, poly_text){
    var
     a = Deriving_Json[3].call(null, poly_text),
     b = Deriving_Json[3].call(null, poly_font),
     c = Deriving_Json[3].call(null, poly_color),
     d = Deriving_Json[2].call(null, poly_text),
     e = Deriving_Json[2].call(null, poly_font),
     f = Deriving_Json[2].call(null, poly_color);
    return Deriving_Json[1].call
            (null,
             function(a, b){return element_to_json(f, e, d, a, b);},
             function(d){return element_of_json(c, b, a, d);});
   }
   function rectangle(param, fill, stroke){
    var y2 = param[4], x2 = param[3], y1 = param[2], x1 = param[1];
    return [1,
            [0, [0, x1, y1], [0, x2, y1], [0, x2, y2], [0, x1, y2]],
            fill,
            stroke];
   }
   function make(param){return [0, 0];}
   function add(sc, e){sc[1] = [0, e, sc[1]]; return 0;}
   function get(sc){
    var a = Stdlib_List[10].call(null, sc[1]);
    return Stdlib_Array[11].call(null, a);
   }
   var
    Dune_exe_Scene =
      [0,
       command_of_json,
       command_to_json,
       command_json,
       element_of_json,
       element_to_json,
       element_json,
       rectangle,
       make,
       add,
       get];
   runtime.caml_register_global(49, Dune_exe_Scene, "Dune__exe__Scene");
   return;
  }
  (globalThis));

//# 5 ".viewer_js.eobjs/jsoo/dune__exe__Viewer_common.cmo.js"
//# shape: Dune__exe__Viewer_common:[F(1)*]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_examples_graph_viewer_view = "examples/graph_viewer/viewer_common.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    empty_rectangle = [0, 0, 0, 0, 0],
    Assert_failure = global_data.Assert_failure,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib = global_data.Stdlib,
    a = [0, cst_examples_graph_viewer_view, 157, 14],
    b = [0, 0, 0],
    c = [0, cst_examples_graph_viewer_view, 307, 8],
    d = [0, cst_examples_graph_viewer_view, 310, 8],
    e = [0, cst_examples_graph_viewer_view, 300, 10],
    f = [0, cst_examples_graph_viewer_view, 303, 10],
    dummy = 0,
    Dune_exe_Viewer_common =
      [0,
       function(M){
        function make_pixmap(param){return [0, 0, 0, 0, empty_rectangle];}
        function invalidate_pixmap(p){p[4] = empty_rectangle; return 0;}
        function get_pixmap(pm){
         var match = pm[1];
         if(! match)
          throw caml_maybe_attach_backtrace([0, Assert_failure, a], 1);
         var p = match[1];
         return p;
        }
        function perform_draw(ctx, fill, stroke){
         if(fill){var c = fill[1]; caml_call2(M[13], ctx, c);}
         if(! stroke) return;
         var c$0 = stroke[1];
         return caml_call2(M[14], ctx, c$0);
        }
        function g(st, scale, x$1, y$1, x$0, y$0, w, h){
         var j = get_pixmap(st[8]), ctx = caml_call1(M[20], j);
         caml_call1(M[2], ctx);
         var
          f = 0 === st[1].length - 1 ? 1 : 0,
          k = f ? 0 < st[2].length - 1 ? 1 : 0 : f;
         if(k) st[1] = caml_call2(M[22], ctx, st[2]);
         caml_call1(M[6], ctx);
         caml_call5(M[12], ctx, x$0, y$0, w, h);
         caml_call2(M[13], ctx, M[1]);
         caml_call1(M[15], ctx);
         var x$2 = x$1 / scale, y$2 = y$1 / scale;
         caml_call3(M[4], ctx, scale, scale);
         caml_call3(M[5], ctx, - st[4] - x$2, - st[5] - y$2);
         var
          x3 = st[4] + x$2 + x$0 / scale,
          y3 = st[5] + y$2 + y$0 / scale,
          y4 = y3 + st[8][3] / scale,
          x4 = x3 + st[8][2] / scale,
          g = st[2].length - 2 | 0,
          l = 0;
         if(g >= 0){
          var i = l;
          for(;;){
           var
            box = caml_check_bound(st[1], i)[i + 1],
            e = caml_check_bound(st[2], i)[i + 1],
            y2 = box[4],
            x2 = box[3],
            y1 = box[2],
            x1 = box[1],
            b = x1 <= x4 ? 1 : 0;
           if(b){
            var c = y1 <= y4 ? 1 : 0;
            if(c)
             var d = x3 <= x2 ? 1 : 0, a = d ? y3 <= y2 ? 1 : 0 : d;
            else
             var a = c;
           }
           else
            var a = b;
           if(a){
            caml_call1(M[6], ctx);
            switch(e[0]){
              case 0:
               var stroke = e[3], fill = e[2], cmd = e[1];
               Stdlib_Array[12].call
                (null,
                 function(c){
                  if(0 === c[0]){
                   var y = c[2], x = c[1];
                   return caml_call3(M[8], ctx, x, y);
                  }
                  var
                   y3 = c[6],
                   x3 = c[5],
                   y2 = c[4],
                   x2 = c[3],
                   y1 = c[2],
                   x1 = c[1];
                  return caml_call7(M[10], ctx, x1, y1, x2, y2, x3, y3);
                 },
                 cmd);
               perform_draw(ctx, fill, stroke);
               break;
              case 1:
               var stroke$0 = e[3], fill$0 = e[2], points = e[1];
               Stdlib_Array[13].call
                (null,
                 function(i, param){
                  var y = param[2], x = param[1];
                  return 0 === i
                          ? caml_call3(M[8], ctx, x, y)
                          : caml_call3(M[9], ctx, x, y);
                 },
                 points);
               caml_call1(M[7], ctx);
               perform_draw(ctx, fill$0, stroke$0);
               break;
              case 2:
               var
                stroke$1 = e[6],
                fill$1 = e[5],
                ry = e[4],
                rx = e[3],
                cy = e[2],
                cx = e[1];
               caml_call1(M[2], ctx);
               caml_call3(M[5], ctx, cx, cy);
               caml_call3(M[4], ctx, rx, ry);
               caml_call6(M[11], ctx, 0., 0., 1., 0., 6.283185307179586);
               caml_call1(M[3], ctx);
               perform_draw(ctx, fill$1, stroke$1);
               break;
              default:
               var
                stroke$2 = e[6],
                fill$2 = e[5],
                font = e[4],
                txt = e[3],
                y = e[2],
                x = e[1];
               caml_call7(M[16], ctx, x, y, txt, font, fill$2, stroke$2);
            }
           }
           var m = i + 1 | 0;
           if(g === i) break;
           i = m;
          }
         }
         return caml_call1(M[3], ctx);
        }
        function redraw(st, scale, x0, y0, window, a, x, y, width$0, height$0){
         var
          pm = st[8],
          height$1 = a[4],
          width$1 = a[3],
          width = Stdlib[17].call(null, width$1, pm[2]),
          height = Stdlib[17].call(null, height$1, pm[3]),
          m = pm[2] < width ? 1 : 0,
          n = m || (pm[3] < height ? 1 : 0);
         if(n){
          var
           old_p = pm[1],
           p = caml_call3(M[18], window, width, height),
           r = pm[4];
          if(old_p){
           var
            old_p$0 = old_p[1],
            o = r[4],
            q = r[3],
            s = caml_call1(M[19], p);
           caml_call8(M[21], s, 0, 0, 0, 0, q, o, old_p$0);
          }
          pm[1] = [0, p];
          pm[2] = width;
          pm[3] = height;
         }
         function round(x){return x * scale + 0.5 | 0;}
         var
          x0$0 = round(x0),
          x0$1 = round((a[3] / scale - st[6]) / 2.),
          x0$2 = 0 < x0$1 ? - x0$1 | 0 : x0$0,
          y0$0 = round(y0),
          y0$1 = round((a[4] / scale - st[7]) / 2.),
          y0$2 = 0 < y0$1 ? - y0$1 | 0 : y0$0,
          dx = pm[4][1] - x0$2 | 0,
          dy = pm[4][2] - y0$2 | 0;
         a:
         {
          b:
          {
           if(0 < dx && (pm[4][3] + dx | 0) < a[3]) break b;
           if(0 < dy && (pm[4][4] + dy | 0) < a[4]) break b;
           var
            r$1 = pm[4],
            k = 0 === r$1[3] ? 1 : 0,
            l = k || (0 === r$1[4] ? 1 : 0);
           if(! (1 - l)) break a;
           var
            p$0 = get_pixmap(pm),
            r$2 = pm[4],
            w = 0 !== dx ? 1 : 0,
            z = w || (0 !== dy ? 1 : 0);
           if(z){
            var A = r$2[4], B = r$2[3], C = caml_call1(M[19], p$0);
            caml_call8(M[21], C, dx, dy, 0, 0, B, A, p$0);
           }
           var
            offset =
              function(p, l, d, m){
               return 0 < ((p + d | 0) + l | 0)
                       ? 0
                         <= (p + d | 0)
                         ? m
                           <= (p + d | 0)
                           ? [0, m, 0]
                           : m
                             < ((p + d | 0) + l | 0)
                             ? [0, p + d | 0, (m - p | 0) - d | 0]
                             : [0, p + d | 0, l]
                         : [0, 0, (l + p | 0) + d | 0]
                       : b;
              },
            match = offset(0, r$2[3], dx, pm[2]),
            width$2 = match[2],
            x$0 = match[1],
            match$0 = offset(0, r$2[4], dy, pm[3]),
            height$2 = match$0[2],
            y$0 = match$0[1];
           if(0 < height$2)
            if(0 < x$0){
             if(a[3] > (x$0 + width$2 | 0))
              throw caml_maybe_attach_backtrace([0, Assert_failure, e], 1);
             g(st, scale, x0$2, y0$2, 0, y$0, x$0, height$2);
            }
            else{
             if(0 !== x$0)
              throw caml_maybe_attach_backtrace([0, Assert_failure, f], 1);
             if(width$2 < a[3])
              g
               (st,
                scale,
                x0$2,
                y0$2,
                width$2,
                y$0,
                a[3] - width$2 | 0,
                height$2);
            }
           if(0 < y$0){
            if(a[4] > (y$0 + height$2 | 0))
             throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
            g(st, scale, x0$2, y0$2, 0, 0, a[3], y$0);
           }
           else{
            if(0 !== y$0)
             throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
            if(height$2 < a[4])
             g(st, scale, x0$2, y0$2, 0, height$2, a[3], a[4] - height$2 | 0);
           }
           pm[4] = [0, x0$2, y0$2, a[3], a[4]];
           break a;
          }
          pm[4] = empty_rectangle;
         }
         var r$0 = pm[4], i = x < 0 ? 1 : 0;
         if(i)
          var h = i;
         else{
          var j = y < 0 ? 1 : 0;
          if(j)
           var h = j;
          else
           var
            v = r$0[3] < (x + width$0 | 0) ? 1 : 0,
            h = v || (r$0[4] < (y + height$0 | 0) ? 1 : 0);
         }
         if(h){
          g(st, scale, x0$2, y0$2, 0, 0, a[3], a[4]);
          pm[4] = [0, x0$2, y0$2, a[3], a[4]];
         }
         var t = get_pixmap(pm), u = caml_call1(M[17], window);
         return caml_call8(M[21], u, x, y, x, y, width$0, height$0, t);
        }
        return [0, make_pixmap, invalidate_pixmap, redraw];
       }];
   runtime.caml_register_global
    (20, Dune_exe_Viewer_common, "Dune__exe__Viewer_common");
   return;
  }
  (globalThis));

//# 5 ".viewer_js.eobjs/jsoo/dune__exe__Viewer_js.cmo.js"
//# shape: Dune__exe__Viewer_js:[]
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$13 = ",",
    cst_0px = "0px",
    cst_10px = "10px",
    cst_1px = "1px",
    cst_0$2 = "[0",
    cst$14 = "]",
    cst_absolute = "absolute",
    cst_examples_graph_viewer_view = "examples/graph_viewer/viewer_js.ml",
    cst_hidden = "hidden",
    cst_lower = "lower",
    cst_page_increment = "page_increment",
    cst_page_size = "page_size",
    cst_set_bounds = "set_bounds",
    cst_set_value = "set_value",
    cst_step_increment = "step_increment",
    cst_upper = "upper",
    cst_value = "value",
    caml_get_cached_method = runtime.caml_get_cached_method,
    caml_jsstring_of_string = runtime.caml_jsstring_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_oo_cache_id = runtime.caml_oo_cache_id,
    caml_wrap_exception = runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call7(f, a0, a1, a2, a3, a4, a5, a6){
    return (f.l >= 0 ? f.l : f.l = f.length) === 7
            ? f(a0, a1, a2, a3, a4, a5, a6)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   function caml_call10(f, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9){
    return (f.l >= 0 ? f.l : f.l = f.length) === 10
            ? f(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9)
            : runtime.caml_call_gen
              (f, [a0, a1, a2, a3, a4, a5, a6, a7, a8, a9]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    url = "scene.json",
    cst$6 = cst$13,
    cst$7 = cst$13,
    cst$8 = cst$13,
    cst$9 = cst$13,
    cst$10 = cst$14,
    cst = cst$13,
    cst$0 = cst$13,
    cst$1 = cst$13,
    cst$2 = cst$13,
    cst$3 = cst$13,
    cst$4 = cst$14,
    cst$5 = cst$13,
    cst$11 = cst$13,
    cst$12 = cst$14,
    shared =
      [0,
       cst_set_value,
       cst_set_bounds,
       cst_step_increment,
       cst_page_increment,
       cst_lower,
       cst_page_size,
       cst_upper,
       cst_value],
    Js_of_ocaml_Js = global_data.Js_of_ocaml__Js,
    Js_of_ocaml_Dom_html = global_data.Js_of_ocaml__Dom_html,
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Deriving_Json = global_data.Deriving_Json,
    Js_of_ocaml_Dom = global_data.Js_of_ocaml__Dom,
    Lwt = global_data.Lwt,
    Js_of_ocaml_lwt_Lwt_js = global_data.Js_of_ocaml_lwt__Lwt_js,
    Dune_exe_Scene = global_data.Dune__exe__Scene,
    Deriving_Json_lexer = global_data.Deriving_Json_lexer,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Sys = global_data.Stdlib__Sys,
    CamlinternalOO = global_data.CamlinternalOO,
    Js_of_ocaml_Sys_js = global_data.Js_of_ocaml__Sys_js,
    Js_of_ocaml_lwt = global_data.Js_of_ocaml_lwt,
    Dune_exe_Viewer_common = global_data.Dune__exe__Viewer_common,
    cache_id = caml_oo_cache_id(),
    cache_id$0 = caml_oo_cache_id(),
    cache_id$1 = caml_oo_cache_id(),
    cache_id$2 = caml_oo_cache_id(),
    cache_id$3 = caml_oo_cache_id(),
    cache_id$4 = caml_oo_cache_id(),
    cache_id$5 = caml_oo_cache_id(),
    cache_id$6 = caml_oo_cache_id(),
    cache_id$7 = caml_oo_cache_id(),
    cache_id$8 = caml_oo_cache_id(),
    cache_id$9 = caml_oo_cache_id(),
    cache_id$10 = caml_oo_cache_id(),
    cache_id$11 = caml_oo_cache_id(),
    cache_id$12 = caml_oo_cache_id(),
    cache_id$13 = caml_oo_cache_id(),
    cache_id$14 = caml_oo_cache_id(),
    cache_id$15 = caml_oo_cache_id(),
    cache_id$16 = caml_oo_cache_id(),
    cache_id$17 = caml_oo_cache_id(),
    cache_id$18 = caml_oo_cache_id(),
    cache_id$19 = caml_oo_cache_id(),
    cache_id$20 = caml_oo_cache_id(),
    cache_id$21 = caml_oo_cache_id(),
    cache_id$22 = caml_oo_cache_id(),
    cache_id$23 = caml_oo_cache_id(),
    cache_id$24 = caml_oo_cache_id(),
    cache_id$25 = caml_oo_cache_id(),
    cache_id$26 = caml_oo_cache_id(),
    cache_id$27 = caml_oo_cache_id(),
    cache_id$28 = caml_oo_cache_id(),
    cache_id$29 = caml_oo_cache_id(),
    cache_id$30 = caml_oo_cache_id(),
    cache_id$31 = caml_oo_cache_id(),
    cache_id$32 = caml_oo_cache_id(),
    cache_id$33 = caml_oo_cache_id(),
    cache_id$34 = caml_oo_cache_id(),
    cache_id$35 = caml_oo_cache_id(),
    cache_id$36 = caml_oo_cache_id(),
    cache_id$37 = caml_oo_cache_id(),
    cache_id$38 = caml_oo_cache_id(),
    cache_id$39 = caml_oo_cache_id(),
    cache_id$40 = caml_oo_cache_id(),
    cache_id$41 = caml_oo_cache_id(),
    cache_id$42 = caml_oo_cache_id(),
    cache_id$43 = caml_oo_cache_id(),
    cache_id$44 = caml_oo_cache_id(),
    cache_id$45 = caml_oo_cache_id(),
    white = "white",
    c = [0, cst_examples_graph_viewer_view, 161, 26];
   function save(ctx){return ctx.save();}
   function restore(ctx){return ctx.restore();}
   function scale(ctx, sx, sy){return ctx.scale(sx, sy);}
   function translate(ctx, t10, t11){return ctx.translate(t10, t11);}
   function begin_path(ctx){return ctx.beginPath();}
   function close_path(ctx){return ctx.closePath();}
   function move_to(ctx, t15, t16){return ctx.moveTo(t15, t16);}
   function line_to(ctx, t18, t19){return ctx.lineTo(t18, t19);}
   function curve_to(ctx, t21, t22, t23, t24, t25, t26){
    return ctx.bezierCurveTo(t21, t22, t23, t24, t25, t26);
   }
   function arc(ctx, t28, t29, radius, angle1, angle2){
    var t33 = Js_of_ocaml_Js[7];
    return ctx.arc(t28, t29, radius, angle1, angle2, t33);
   }
   function rectangle(ctx, t35, t36, width, height){return ctx.rect(t35, t36, width, height);
   }
   function fill(ctx, t39){ctx.fillStyle = t39; return ctx.fill();}
   function stroke(ctx, t42){ctx.strokeStyle = t42; return ctx.stroke();}
   function clip(ctx){return ctx.clip();}
   function draw_text(ctx, t56, t57, txt, font, fill_color, stroke_color){
    ctx.font = font;
    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    if(fill_color){
     var t52 = fill_color[1];
     ctx.fillStyle = t52;
     ctx.fillText(txt, t56, t57);
    }
    if(! stroke_color) return 0;
    var t58 = stroke_color[1];
    ctx.strokeStyle = t58;
    return ctx.strokeText(txt, t56, t57);
   }
   function get_drawable(t64){
    var t65 = Js_of_ocaml_Dom_html[1], ctx = t64.getContext(t65);
    ctx.lineWidth = 2.;
    return [0, t64, ctx];
   }
   function make_pixmap(param, width, height){
    var t69 = Js_of_ocaml_Dom_html[111].call(null, Js_of_ocaml_Dom_html[2]);
    t69.width = width;
    t69.height = height;
    return get_drawable(t69);
   }
   function drawable_of_pixmap(p){return p;}
   function get_context(param){var c = param[2]; return c;}
   function put_pixmap(a, x, y, xsrc, ysrc, width, height, param){
    var
     t73 = param[1],
     t72 = a[2],
     t81 = height,
     t80 = width,
     t79 = y,
     t78 = x,
     t77 = height,
     t76 = width,
     t75 = ysrc,
     t74 = xsrc;
    return t72.drawImage(t73, t74, t75, t76, t77, t78, t79, t80, t81);
   }
   function compute_extents(param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, c], 1);
   }
   var
    Common =
      Dune_exe_Viewer_common[1].call
       (null,
        [0,
         white,
         save,
         restore,
         scale,
         translate,
         begin_path,
         close_path,
         move_to,
         line_to,
         curve_to,
         arc,
         rectangle,
         fill,
         stroke,
         clip,
         draw_text,
         get_drawable,
         make_pixmap,
         drawable_of_pixmap,
         get_context,
         put_pixmap,
         compute_extents]),
    symbol_bind = Lwt[6],
    a =
      [0,
       "_value",
       "_lower",
       "_upper",
       "_step_incr",
       "_page_incr",
       "_page_size"],
    b =
      [0,
       cst_value,
       cst_upper,
       cst_step_increment,
       cst_set_value,
       cst_set_bounds,
       cst_page_size,
       cst_page_increment,
       cst_lower],
    adjustment =
      CamlinternalOO[19].call
       (null,
        shared,
        function(j){
         var
          c = CamlinternalOO[4].call(null, j, b, a),
          d = c[9],
          e = c[10],
          f = c[11],
          g = c[12],
          h = c[13],
          i = c[14];
         CamlinternalOO[11].call
          (null,
           j,
           [0,
            c[1],
            function(self_1){return self_1[d + 1];},
            c[8],
            function(self_1){return self_1[e + 1];},
            c[2],
            function(self_1){return self_1[f + 1];},
            c[3],
            function(self_1){return self_1[g + 1];},
            c[7],
            function(self_1){return self_1[h + 1];},
            c[6],
            function(self_1){return self_1[i + 1];},
            c[4],
            function(self_1, v){self_1[d + 1] = v; return 0;},
            c[5],
            function
            (self_1, lower, upper, step_incr, page_incr, page_size, param){
             if(lower){var v = lower[1]; self_1[e + 1] = v;}
             if(upper){var v$0 = upper[1]; self_1[f + 1] = v$0;}
             if(step_incr){var v$1 = step_incr[1]; self_1[g + 1] = v$1;}
             if(page_incr){var v$2 = page_incr[1]; self_1[h + 1] = v$2;}
             if(! page_size) return 0;
             var v$3 = page_size[1];
             self_1[i + 1] = v$3;
             return 0;
            }]);
         return function(env, self, opt){
          if(opt) var sth = opt[1], sth$0 = sth; else var sth$0 = 0.;
          return function(opt){
           if(opt) var sth = opt[1], sth$1 = sth; else var sth$1 = 0.;
           return function(opt){
            if(opt) var sth = opt[1], sth$2 = sth; else var sth$2 = 100.;
            return function(opt){
             if(opt) var sth = opt[1], sth$3 = sth; else var sth$3 = 1.;
             return function(opt){
              if(opt) var sth = opt[1], sth$4 = sth; else var sth$4 = 10.;
              return function(opt){
               if(opt) var sth = opt[1], sth$5 = sth; else var sth$5 = 10.;
               return function(b){
                var a = CamlinternalOO[24].call(null, self, j);
                a[d + 1] = sth$0;
                a[e + 1] = sth$1;
                a[f + 1] = sth$2;
                a[g + 1] = sth$3;
                a[h + 1] = sth$4;
                a[i + 1] = sth$5;
                return a;};};};};};};};
        }),
    d = [0, cst_examples_graph_viewer_view, 278, 35],
    cst_0 = cst_0$2,
    cst_0$0 = cst_0$2,
    cst_0$1 = cst_0$2,
    e = [0, 0.],
    f = [0, 0.],
    g = [0, 1.],
    h = [0, 20.],
    i = [0, [4, 0, 0, 0, [11, "px", 0]], "%dpx"];
   function handle_drag(element, f){
    var
     mx = [0, 0.],
     my = [0, 0.],
     t94 =
       Js_of_ocaml_Dom_html[10].call
        (null,
         function(t84){
          mx[1] = t84.clientX;
          my[1] = t84.clientY;
          var t88 = element.style;
          t88.cursor = "move";
          var
           a = Js_of_ocaml_Js[7],
           b =
             Js_of_ocaml_Dom_html[10].call
              (null,
               function(t89){
                var
                 x = t89.clientX,
                 y = t89.clientY,
                 x$0 = mx[1],
                 y$0 = my[1];
                mx[1] = x;
                my[1] = y;
                caml_call2(f, x - x$0, y - y$0);
                return Js_of_ocaml_Js[7];
               }),
           c1 =
             Js_of_ocaml_Dom_html[17].call
              (null,
               Js_of_ocaml_Dom_html[2],
               Js_of_ocaml_Dom_html[15][11],
               b,
               a),
           c2 = [0, Js_of_ocaml_Js[1]],
           c = Js_of_ocaml_Js[7],
           d =
             Js_of_ocaml_Dom_html[10].call
              (null,
               function(param){
                Js_of_ocaml_Dom_html[18].call(null, c1);
                Js_of_ocaml_Js[5][6].call
                 (null, c2[1], Js_of_ocaml_Dom_html[18]);
                var t93 = element.style;
                t93.cursor = "";
                return Js_of_ocaml_Js[7];
               }),
           e =
             Js_of_ocaml_Dom_html[17].call
              (null,
               Js_of_ocaml_Dom_html[2],
               Js_of_ocaml_Dom_html[15][9],
               d,
               c);
          c2[1] = Js_of_ocaml_Js[2].call(null, e);
          return Js_of_ocaml_Js[7];
         });
    element.onmousedown = t94;
   }
   function js_string_to_json(a, param){
    throw caml_maybe_attach_backtrace([0, Assert_failure, d], 1);
   }
   function js_string_of_json(buf){
    return runtime.caml_jsbytes_of_string
            (caml_call1(Deriving_Json[19][3], buf));
   }
   function scene_of_json(buf){
    Deriving_Json_lexer[14].call(null, buf);
    Deriving_Json_lexer[5].call(null, 0, buf);
    Deriving_Json_lexer[13].call(null, buf);
    Deriving_Json_lexer[14].call(null, buf);
    Deriving_Json_lexer[5].call(null, 0, buf);
    Deriving_Json_lexer[13].call(null, buf);
    var a = caml_call1(Deriving_Json[18][3], buf);
    Deriving_Json_lexer[13].call(null, buf);
    var b = caml_call1(Deriving_Json[18][3], buf);
    Deriving_Json_lexer[13].call(null, buf);
    var c = caml_call1(Deriving_Json[18][3], buf);
    Deriving_Json_lexer[13].call(null, buf);
    var d = caml_call1(Deriving_Json[18][3], buf);
    Deriving_Json_lexer[15].call(null, buf);
    var a$0 = [0, a, b, c, d];
    Deriving_Json_lexer[13].call(null, buf);
    var
     b$0 =
       Deriving_Json[30].call
        (null,
         function(buf){
          Deriving_Json_lexer[14].call(null, buf);
          Deriving_Json_lexer[5].call(null, 0, buf);
          Deriving_Json_lexer[13].call(null, buf);
          var a = caml_call1(Deriving_Json[18][3], buf);
          Deriving_Json_lexer[13].call(null, buf);
          var b = caml_call1(Deriving_Json[18][3], buf);
          Deriving_Json_lexer[13].call(null, buf);
          var c = caml_call1(Deriving_Json[18][3], buf);
          Deriving_Json_lexer[13].call(null, buf);
          var d = caml_call1(Deriving_Json[18][3], buf);
          Deriving_Json_lexer[15].call(null, buf);
          return [0, a, b, c, d];
         },
         buf);
    Deriving_Json_lexer[13].call(null, buf);
    var
     c$0 =
       Deriving_Json[30].call
        (null,
         function(buf){
          return Dune_exe_Scene[4].call
                  (null,
                   function(buf){return js_string_of_json(buf);},
                   function(buf){return js_string_of_json(buf);},
                   function(buf){return js_string_of_json(buf);},
                   buf);
         },
         buf);
    Deriving_Json_lexer[15].call(null, buf);
    return [0, a$0, b$0, c$0];
   }
   function scene_to_json(buf, a){
    var c = a[3], b = a[2], a$0 = a[1];
    Stdlib_Buffer[16].call(null, buf, cst_0);
    Stdlib_Buffer[16].call(null, buf, cst);
    var d = a$0[4], c$0 = a$0[3], b$0 = a$0[2], a$1 = a$0[1];
    Stdlib_Buffer[16].call(null, buf, cst_0$0);
    Stdlib_Buffer[16].call(null, buf, cst$0);
    caml_call2(Deriving_Json[18][2], buf, a$1);
    Stdlib_Buffer[16].call(null, buf, cst$1);
    caml_call2(Deriving_Json[18][2], buf, b$0);
    Stdlib_Buffer[16].call(null, buf, cst$2);
    caml_call2(Deriving_Json[18][2], buf, c$0);
    Stdlib_Buffer[16].call(null, buf, cst$3);
    caml_call2(Deriving_Json[18][2], buf, d);
    Stdlib_Buffer[16].call(null, buf, cst$4);
    Stdlib_Buffer[16].call(null, buf, cst$5);
    Deriving_Json[31].call
     (null,
      function(buf, a){
       var d = a[4], c = a[3], b = a[2], a$0 = a[1];
       Stdlib_Buffer[16].call(null, buf, cst_0$1);
       Stdlib_Buffer[16].call(null, buf, cst$6);
       caml_call2(Deriving_Json[18][2], buf, a$0);
       Stdlib_Buffer[16].call(null, buf, cst$7);
       caml_call2(Deriving_Json[18][2], buf, b);
       Stdlib_Buffer[16].call(null, buf, cst$8);
       caml_call2(Deriving_Json[18][2], buf, c);
       Stdlib_Buffer[16].call(null, buf, cst$9);
       caml_call2(Deriving_Json[18][2], buf, d);
       return Stdlib_Buffer[16].call(null, buf, cst$10);
      },
      buf,
      b);
    Stdlib_Buffer[16].call(null, buf, cst$11);
    Deriving_Json[31].call
     (null,
      function(buf, a){
       return Dune_exe_Scene[5].call
               (null,
                function(buf, a){return js_string_to_json(buf, a);},
                function(buf, a){return js_string_to_json(buf, a);},
                function(buf, a){return js_string_to_json(buf, a);},
                buf,
                a);
      },
      buf,
      c);
    return Stdlib_Buffer[16].call(null, buf, cst$12);
   }
   function start(param){
    var
     t102 = Js_of_ocaml_Dom_html[2],
     page = t102.documentElement,
     t101 = page.style;
    t101.overflow = cst_hidden;
    var t103 = t102.body, t105 = t103.style;
    t105.overflow = cst_hidden;
    var t107 = t102.body, t109 = t107.style;
    t109.margin = cst_0px;
    var started = [0, 0], t111 = Js_of_ocaml_Dom_html[53].call(null, t102);
    t111.innerHTML = "Loading graph...";
    var t114 = t111.style;
    t114.display = "none";
    Js_of_ocaml_Dom[5].call(null, t102.body, t111);
    symbol_bind
     (Js_of_ocaml_lwt_Lwt_js[1].call(null, 0.5),
      function(param){
       if(1 - started[1]){var t118 = t111.style; t118.display = "inline";}
       return Lwt[4].call(null, 0);
      });
    function d(s){
     var
      typ =
        Deriving_Json[1].call
         (null,
          function(buf, a){return scene_to_json(buf, a);},
          function(buf){return scene_of_json(buf);}),
      match = Stdlib_Sys[5];
     a:
     {
      if(typeof match !== "number" && match[1] === "js_of_ocaml"){
       var
        t97 = caml_jsstring_of_string(s),
        t96 = Js_of_ocaml_Js[38],
        b = t96.parse(t97);
       break a;
      }
      var b = Deriving_Json[5].call(null, typ, s);
     }
     var
      scene = b[3],
      bboxes = b[2],
      match$0 = b[1],
      y2 = match$0[4],
      x2 = match$0[3],
      y1 = match$0[2],
      x1 = match$0[1];
     started[1] = 1;
     Js_of_ocaml_Dom[4].call(null, t102.body, t111);
     var
      st =
        [0,
         bboxes,
         scene,
         0.05,
         x1,
         y1,
         x2 - x1,
         y2 - y1,
         caml_call1(Common[1], 0)],
      t2 = page.clientHeight,
      t0 = page.clientWidth,
      canvas = Js_of_ocaml_Dom_html[111].call(null, Js_of_ocaml_Dom_html[2]);
     canvas.width = t0;
     canvas.height = t2;
     Js_of_ocaml_Dom[5].call(null, t102.body, canvas);
     function allocation(param){return [0, , , canvas.width, canvas.height];}
     var
      hadj = caml_call8(adjustment[1], 0, 0, 0, 0, 0, 0, 0, 0),
      vadj = caml_call8(adjustment[1], 0, 0, 0, 0, 0, 0, 0, 0),
      sadj = caml_call8(adjustment[1], 0, 0, 0, h, g, f, e, 0);
     function get_scale(param){
      var a = st[3];
      return Math.pow
              (2.,
               caml_call1
                (caml_get_cached_method(sadj, 834174833, cache_id$0), sadj)
               / 8.)
             / a;
     }
     var redraw_queued = [0, 0];
     function update_view(force){
      var
       a = allocation(0),
       scale = get_scale(0),
       aw = Math.ceil(a[3] / scale),
       ah = Math.ceil(a[4] / scale),
       d = [0, Stdlib[16].call(null, aw, st[6])];
      caml_call7
       (caml_get_cached_method(hadj, -635267918, cache_id$1),
        hadj,
        0,
        [0, st[6]],
        [0, aw / 20.],
        [0, aw / 2.],
        d,
        0);
      var
       e =
         caml_call1(caml_get_cached_method(hadj, 307110897, cache_id$2), hadj),
       mv = st[6] - e;
      if
       (caml_call1(caml_get_cached_method(hadj, 834174833, cache_id$3), hadj)
        < 0.)
       caml_call2
        (caml_get_cached_method(hadj, -659372076, cache_id$4), hadj, 0.);
      if
       (mv
        <
         caml_call1(caml_get_cached_method(hadj, 834174833, cache_id$5), hadj))
       caml_call2
        (caml_get_cached_method(hadj, -659372076, cache_id$6), hadj, mv);
      var f = [0, Stdlib[16].call(null, ah, st[7])];
      caml_call7
       (caml_get_cached_method(vadj, -635267918, cache_id$7),
        vadj,
        0,
        [0, st[7]],
        [0, ah / 20.],
        [0, ah / 2.],
        f,
        0);
      var
       g =
         caml_call1(caml_get_cached_method(vadj, 307110897, cache_id$8), vadj),
       mv$0 = st[7] - g;
      if
       (caml_call1(caml_get_cached_method(vadj, 834174833, cache_id$9), vadj)
        < 0.)
       caml_call2
        (caml_get_cached_method(vadj, -659372076, cache_id$10), vadj, 0.);
      if
       (mv$0
        <
         caml_call1
          (caml_get_cached_method(vadj, 834174833, cache_id$11), vadj))
       caml_call2
        (caml_get_cached_method(vadj, -659372076, cache_id$12), vadj, mv$0);
      var b = 1 - redraw_queued[1];
      if(b){
       redraw_queued[1] = 1;
       var
        t126 =
          runtime.caml_js_wrap_callback
           (function(param){
             redraw_queued[1] = 0;
             var
              v =
                caml_call1
                 (caml_get_cached_method(vadj, 834174833, cache_id$13), vadj),
              h =
                caml_call1
                 (caml_get_cached_method(hadj, 834174833, cache_id$14), hadj),
              s = get_scale(0),
              width = canvas.width,
              height = canvas.height;
             return caml_call10
                     (Common[3],
                      st,
                      s,
                      h,
                      v,
                      canvas,
                      [0, 0, 0, width, height],
                      0,
                      0,
                      width,
                      height);
            }),
        t125 = Js_of_ocaml_Dom_html[8];
       t125.requestAnimationFrame(t126);
       var c = 0;
      }
      else
       var c = b;
      return c;
     }
     var
      a = allocation(0),
      zoom_factor = Stdlib[17].call(null, st[6] / a[3], st[7] / a[4]),
      count = Math.ceil(Math.log(zoom_factor) / 0.6931471805599453 * 8.),
      f$0 = Math.pow(2., count / 8.);
     caml_call7
      (caml_get_cached_method(sadj, -635267918, cache_id),
       sadj,
       0,
       [0, count],
       0,
       0,
       0,
       0);
     st[3] = f$0;
     var prev_scale = [0, get_scale(0)];
     function rescale(x, y){
      var
       scale = get_scale(0),
       r = 1. - prev_scale[1] / scale,
       a =
         caml_call1
          (caml_get_cached_method(hadj, 307110897, cache_id$15), hadj)
         * r
         * x;
      caml_call2
       (caml_get_cached_method(hadj, -659372076, cache_id$17),
        hadj,
        caml_call1(caml_get_cached_method(hadj, 834174833, cache_id$16), hadj)
        + a);
      var
       b =
         caml_call1
          (caml_get_cached_method(vadj, 307110897, cache_id$18), vadj)
         * r
         * y;
      caml_call2
       (caml_get_cached_method(vadj, -659372076, cache_id$20),
        vadj,
        caml_call1(caml_get_cached_method(vadj, 834174833, cache_id$19), vadj)
        + b);
      prev_scale[1] = scale;
      caml_call1(Common[2], st[8]);
      return update_view(0);
     }
     var height = 284;
     function points(d){
      return caml_jsstring_of_string
              (caml_call1(Stdlib_Printf[4].call(null, i), d));
     }
     var
      size_px = points(16),
      pos = [0, height],
      thumb = Js_of_ocaml_Dom_html[51].call(null, t102),
      style = thumb.style;
     style.position = cst_absolute;
     style.width = size_px;
     style.height = size_px;
     var t134 = points(pos[1]);
     style.top = t134;
     style.left = cst_0px;
     style.margin = cst_1px;
     style.backgroundColor = "black";
     var
      slider = Js_of_ocaml_Dom_html[51].call(null, t102),
      style$0 = slider.style;
     style$0.position = cst_absolute;
     style$0.width = size_px;
     var t147 = points(300);
     style$0.height = t147;
     style$0.border = "2px solid black";
     style$0.padding = cst_1px;
     style$0.top = cst_10px;
     style$0.left = cst_10px;
     Js_of_ocaml_Dom[5].call(null, slider, thumb);
     Js_of_ocaml_Dom[5].call(null, t102.body, slider);
     function set_slider_position(pos$0){
      var a = pos$0 !== pos[1] ? 1 : 0;
      if(! a) return a;
      var t159 = points(pos$0), t160 = thumb.style;
      t160.top = t159;
      pos[1] = pos$0;
      caml_call2
       (caml_get_cached_method(sadj, -659372076, cache_id$22),
        sadj,
        (284 - pos$0 | 0)
        *
         caml_call1
          (caml_get_cached_method(sadj, 675223906, cache_id$21), sadj)
        / 284.);
      return rescale(0.5, 0.5);
     }
     handle_drag
      (thumb,
       function(dx, dy){
        var a = Stdlib[17].call(null, 0, pos[1] + (dy | 0) | 0);
        return set_slider_position(Stdlib[16].call(null, height, a));
       });
     var
      t162 =
        Js_of_ocaml_Dom_html[10].call
         (null,
          function(t161){
           var
            ey = t161.clientY,
            sy = Js_of_ocaml_Dom_html[24].call(null, slider)[2],
            a = Stdlib[16].call(null, height, ((ey | 0) - sy | 0) - 8 | 0);
           set_slider_position(Stdlib[17].call(null, 0, a));
           return Js_of_ocaml_Js[8];
          });
     slider.onmousedown = t162;
     var
      t174 =
        Js_of_ocaml_Dom_html[10].call
         (null,
          function(param){
           var page = t102.documentElement, t169 = page.clientWidth;
           canvas.width = t169;
           var t172 = page.clientHeight;
           canvas.height = t172;
           update_view(1);
           return Js_of_ocaml_Js[7];
          }),
      t175 = Js_of_ocaml_Dom_html[8];
     t175.onresize = t174;
     handle_drag
      (canvas,
       function(dx, dy){
        var scale = get_scale(0);
        function offset(a, d){
         var
          b = caml_call1(caml_get_cached_method(a, 307110897, cache_id$25), a),
          c =
            caml_call1(caml_get_cached_method(a, 675223906, cache_id$26), a)
            - b,
          e =
            caml_call1(caml_get_cached_method(a, 834174833, cache_id$27), a)
            - d / scale;
         return caml_call2
                 (caml_get_cached_method(a, -659372076, cache_id$28),
                  a,
                  Stdlib[16].call(null, e, c));
        }
        offset(hadj, dx);
        offset(vadj, dy);
        return update_view(1);
       });
     function bump_scale(x, y, v){
      var
       a = allocation(0),
       x$0 = x / a[3],
       y$0 = y / a[4],
       prev =
         caml_call1
          (caml_get_cached_method(sadj, 834174833, cache_id$29), sadj),
       c =
         prev
         +
          v
          *
           caml_call1
            (caml_get_cached_method(sadj, -292814788, cache_id$30), sadj),
       d =
         caml_call1
          (caml_get_cached_method(sadj, -117442047, cache_id$31), sadj),
       e = Stdlib[17].call(null, d, c),
       f =
         caml_call1
          (caml_get_cached_method(sadj, 675223906, cache_id$32), sadj),
       vl = Stdlib[16].call(null, f, e);
      a:
      if(vl !== prev){
       caml_call2
        (caml_get_cached_method(sadj, -659372076, cache_id$33), sadj, vl);
       var
        b =
          caml_call1
           (caml_get_cached_method(sadj, 675223906, cache_id$23), sadj),
        pos$0 =
          284
          -
           (caml_call1
            (caml_get_cached_method(sadj, 834174833, cache_id$24), sadj)
           * 284.
           / b
           + 0.5
           | 0)
          | 0,
        t165 = points(pos$0),
        t166 = thumb.style;
       t166.top = t165;
       pos[1] = pos$0;
       if(0. <= x$0 && x$0 <= 1. && 0. <= y$0 && y$0 <= 1.){rescale(x$0, y$0); break a;}
       rescale(0.5, 0.5);
      }
      return Js_of_ocaml_Js[8];
     }
     Js_of_ocaml_Dom_html[20].call
      (null,
       canvas,
       function(t176, param, dy){
        var
         match = Js_of_ocaml_Dom_html[24].call(null, canvas),
         ey = match[2],
         ex = match[1],
         x = t176.clientX - ex,
         y = t176.clientY - ey;
        return 0 <= dy
                ? 0 < dy ? bump_scale(x, y, -1.) : Js_of_ocaml_Js[8]
                : bump_scale(x, y, 1.);
       },
       Js_of_ocaml_Js[7]);
     function handle_key_event(t178){
      var switcher = t178.keyCode - 37 | 0;
      if(3 < switcher >>> 0) return Js_of_ocaml_Js[7];
      switch(switcher){
        case 0:
         var
          a =
            caml_call1
             (caml_get_cached_method(hadj, -292814788, cache_id$34), hadj);
         caml_call2
          (caml_get_cached_method(hadj, -659372076, cache_id$36),
           hadj,
           caml_call1
            (caml_get_cached_method(hadj, 834174833, cache_id$35), hadj)
           - a);
         update_view(0);
         return Js_of_ocaml_Js[8];
        case 1:
         var
          b =
            caml_call1
             (caml_get_cached_method(vadj, -292814788, cache_id$37), vadj);
         caml_call2
          (caml_get_cached_method(vadj, -659372076, cache_id$39),
           vadj,
           caml_call1
            (caml_get_cached_method(vadj, 834174833, cache_id$38), vadj)
           - b);
         update_view(0);
         return Js_of_ocaml_Js[8];
        case 2:
         var
          c =
            caml_call1
             (caml_get_cached_method(hadj, -292814788, cache_id$40), hadj);
         caml_call2
          (caml_get_cached_method(hadj, -659372076, cache_id$42),
           hadj,
           caml_call1
            (caml_get_cached_method(hadj, 834174833, cache_id$41), hadj)
           + c);
         update_view(0);
         return Js_of_ocaml_Js[8];
        default:
         var
          d =
            caml_call1
             (caml_get_cached_method(vadj, -292814788, cache_id$43), vadj);
         caml_call2
          (caml_get_cached_method(vadj, -659372076, cache_id$45),
           vadj,
           caml_call1
            (caml_get_cached_method(vadj, 834174833, cache_id$44), vadj)
           + d);
         update_view(0);
         return Js_of_ocaml_Js[8];
      }
     }
     var
      ignored_keycode = [0, -1],
      t180 =
        Js_of_ocaml_Dom_html[10].call
         (null,
          function(t179){
           ignored_keycode[1] = t179.keyCode;
           return handle_key_event(t179);
          }),
      t181 = Js_of_ocaml_Dom_html[2];
     t181.onkeydown = t180;
     var
      t183 =
        Js_of_ocaml_Dom_html[10].call
         (null,
          function(t182){
           var k = ignored_keycode[1];
           ignored_keycode[1] = -1;
           return t182.keyCode === k
                   ? Js_of_ocaml_Js[7]
                   : handle_key_event(t182);
          }),
      t184 = Js_of_ocaml_Dom_html[2];
     t184.onkeypress = t183;
     update_view(1);
     return Lwt[4].call(null, 0);
    }
    try{
     var
      b = Js_of_ocaml_Sys_js[6].call(null, url),
      c = Lwt[4].call(null, b),
      a = c;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0), tag = exn[1];
     if(tag !== Stdlib[11]) throw caml_maybe_attach_backtrace(exn, 0);
     var
      a =
        symbol_bind
         (Js_of_ocaml_lwt[1][7].call(null, url),
          function(param){
           var msg = param[4], cod = param[2];
           if(0 !== cod && 200 !== cod) return Lwt[1].call(null, 0)[1];
           return Lwt[4].call(null, msg);
          });
    }
    return symbol_bind(a, d);
   }
   Lwt[11].call(null, start);
   var Dune_exe_Viewer_js = [0];
   runtime.caml_register_global
    (202, Dune_exe_Viewer_js, "Dune__exe__Viewer_js");
   return;
  }
  (globalThis));

//# 5 "../../.js/default/stdlib/std_exit.cmo.js"
//# shape: Std_exit:[]
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib;
   caml_call1(Stdlib[103], 0);
   var Std_exit = [0];
   runtime.caml_register_global(1, Std_exit, "Std_exit");
   return;
  }
  (globalThis));

//# sourceMappingURL=data:application/json;base64,
