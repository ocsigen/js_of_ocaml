= Wasm_of_ocaml =

== Overview ==

Wasm_of_ocaml is a compiler from OCaml bytecode programs to WebAssembly.
It provides an alternative way to run pure OCaml programs in JavaScript environment like browsers and Node.js.

The compiler is provided by the wasm_of_ocaml-package. <<a_manual chapter="overview" |Js_of_ocaml packages>> are compatible with this compiler.

== Installation

The easiest way to install wasm_of_ocaml is to use opam.
{{{opam install wasm_of_ocaml-compiler js_of_ocaml js_of_ocaml-ppx js_of_ocaml-lwt}}}

== Usage ==

  Your program must first be compiled using the OCaml bytecode
  compiler {{{ocamlc}}}.  JavaScript bindings are provided by the
  {{{js_of_ocaml}}} package and the syntax extension by the
  {{{js_of_ocaml-ppx}}} package
{{{
      ocamlfind ocamlc -package js_of_ocaml -package js_of_ocaml-ppx \
          -linkpkg -o cubes.byte cubes.ml
}}}
  Then, run the {{{wasm_of_ocaml}}} compiler to produce Wasm code:
{{{
      wasm_of_ocaml cubes.byte
}}}

This produces a Javascript loading script {{{cube.js}} and a directory
{{{cube.assets}} containing the Wasm code.

=== with dune ===
  Dune has native support for wasm_of_ocaml.
  It supports both standard and separate compilation. See https://dune.readthedocs.io/en/latest/wasmoo.html

== Supported features ==

Most of the OCaml standard library is supported. However,
  * Most of Sys module is not supported.

Extra libraries distributed with Ocaml (such as Thread) are not
supported in general. However,
  * Bigarray: bigarray are supported using Typed Arrays
  * Str: supported
  * Graphics: partially supported using canvas (see also js_of_ocaml-lwt.graphics)
  * Unix: time related functions are supported

Effect handlers are fully supported with the {{{--enable=effects}}} flag. This is not the default for now since effects are not widely used at the moment and the generated code can be slower, larger and less readable.
