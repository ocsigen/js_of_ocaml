module Js = struct
  type +'a t
  type (-'a, +'b) meth_callback
  type 'a opt = 'a
  type 'a optdef = 'a

  type +'a meth
  type +'a gen_prop
  type 'a readonly_prop = <get : 'a> gen_prop
  type 'a writeonly_prop = <set : 'a -> unit> gen_prop
  type 'a prop = <get : 'a; set : 'a -> unit> gen_prop
  type 'a optdef_prop = <get : 'a optdef; set : 'a -> unit> gen_prop

  type +'a constr

  (****)

  type 'a callback = (unit, 'a) meth_callback
  module Unsafe = struct
    type any
    type any_js_array = any

    let inject : 'a -> any =
      fun _ -> assert false

    let get : 'a -> 'b -> 'c = fun _ _ -> assert false
    let set : 'a -> 'b -> 'c -> unit = fun _ _ _ -> assert false

    let meth_call : 'a -> string -> any array -> 'b =
      fun _ _ _ -> assert false

    let obj : (string * any) array -> 'a =
      fun _ -> assert false

  end
  let wrap_meth_callback : ('a -> 'b) -> ('a, 'b) meth_callback =
    fun _ -> assert false

end;;

(* Test methods. *)

fun (obj : int) -> obj##m
[%%expect {|
Line _, characters 19-22:
Error: This expression has type int but an expression was expected of type
         < .. > Js.t
|}]
;;

fun (obj : < > Js.t) -> obj##m
[%%expect {|
Line _, characters 24-27:
Error: This expression has type <  >
       It has no method m
|}]
;;

fun (obj : < m : float Js.prop > Js.t) -> obj##m
[%%expect {|
Line _, characters 42-48:
Error: This expression has type
         float Js.prop = < get : float; set : float -> unit > Js.gen_prop
       but an expression was expected of type 'a Js.meth
|}]
;;

fun (obj : < m : float Js.meth > Js.t) -> obj##m + 1
[%%expect {|
Line _, characters 42-48:
Error: This expression has type float but an expression was expected of type
         int
|}]
;;

fun (obj : < m : int -> int Js.meth > Js.t) -> obj##m + 1
[%%expect {|
Line _, characters 47-53:
Error: This expression has type int -> int Js.meth
       but an expression was expected of type 'a Js.meth
|}]
;;

fun (obj : < m : int Js.meth > Js.t) -> obj##m 1
[%%expect {|
Line _, characters 40-46:
Error: This expression has type int Js.meth
       but an expression was expected of type int -> 'a Js.meth
|}]
;;

fun (obj : < m : int -> float Js.meth > Js.t) -> obj##m 1 + 1
[%%expect {|
Line _, characters 49-57:
Error: This expression has type float but an expression was expected of type
         int
|}]
;;

fun (obj : < m : 'a. 'a -> unit Js.meth > Js.t) -> obj##m "string"; obj##m (); obj##w
[%%expect {|
Line _, characters 79-82:
Error: This expression has type < m : 'a. 'a -> unit Js.meth >
       It has no method w
|}]
;;


(* Test prop reading. *)

fun (obj : int) -> obj##.p
[%%expect {|
Line _, characters 19-22:
Error: This expression has type int but an expression was expected of type
         < .. > Js.t
|}]
;;

fun (obj : < > Js.t) -> obj##.p
[%%expect {|
Line _, characters 24-27:
Error: This expression has type <  >
       It has no method p
|}]
;;

fun (obj : < p : float Js.writeonly_prop > Js.t) -> obj##.p + 1
[%%expect {|
Line _, characters 52-59:
Error: This expression has type
         float Js.writeonly_prop = < set : float -> unit > Js.gen_prop
       but an expression was expected of type < get : 'a; .. > Js.gen_prop
       The first object type has no method get
|}]
;;

fun (obj : < p : float Js.prop > Js.t) -> obj##.p + 1
[%%expect {|
Line _, characters 42-49:
Error: This expression has type float but an expression was expected of type
         int
|}]
;;


(* Test prop writing. *)

fun (obj : int) -> obj##.p := 2
[%%expect {|
Line _, characters 19-22:
Error: This expression has type int but an expression was expected of type
         < .. > Js.t
|}]
;;

fun (obj : < > Js.t) -> obj##.p := 2
[%%expect {|
Line _, characters 24-27:
Error: This expression has type <  >
       It has no method p
|}]
;;

fun (obj : < p : float Js.readonly_prop > Js.t) -> obj##.p := 1
[%%expect {|
Line _, characters 51-58:
Error: This expression has type
         float Js.readonly_prop = < get : float > Js.gen_prop
       but an expression was expected of type
         < set : int -> unit; .. > Js.gen_prop
       The first object type has no method set
|}]
;;

fun (obj : < p : float Js.prop > Js.t) -> obj##.p := 1
[%%expect {|
Line _, characters 42-49:
Error: This expression has type
         float Js.prop = < get : float; set : float -> unit > Js.gen_prop
       but an expression was expected of type
         < set : int -> unit; .. > Js.gen_prop
       Types for method set are incompatible
|}]
;;

fun (obj : < p : int Js.prop > Js.t) -> (obj##.p := 1) + 1
[%%expect {|
Line _, characters 40-54:
Error: This expression has type unit but an expression was expected of type
         int
|}]
;;


(* Test objects. *)

fun (obj : < > Js.t) -> obj = object%js val m = () end
[%%expect {|
Line _, characters 30-54:
Error: This expression has type < m : unit Js.readonly_prop > Js.t
       but an expression was expected of type <  > Js.t
       The second object type has no method m
|}]
;;

fun (obj : < m : float Js.prop > Js.t) -> obj = object%js val mutable m = 0 end
[%%expect {|
Line _, characters 48-79:
Error: This expression has type < m : int Js.prop > Js.t
       but an expression was expected of type < m : float Js.prop > Js.t
       Type int Js.prop = < get : int; set : int -> unit > Js.gen_prop
       is not compatible with type
         float Js.prop = < get : float; set : float -> unit > Js.gen_prop
       Types for method get are incompatible
|}]
  ;;

fun () ->
  (object%js
    val r = 2
    val mutable w = 3.
    method m = ""
  end : < m : int Js.meth; .. > Js.t)
[%%expect {|
Line _, characters 3-73:
Error: This expression has type
         < m : string Js.meth; r : int Js.readonly_prop; w : float Js.prop >
         Js.t
       but an expression was expected of type < m : int Js.meth; .. > Js.t
       Types for method m are incompatible
|}]
;;

fun () ->
  object%js
    val r = 2
    val _r = 2
  end
[%%expect {|
Line _, characters 8-10:
Duplicated val or method "_r" (normalized to "r").
Line _, characters 8-9:
Duplicated val or method "r".
|}]
;;

fun () ->
  (object%js
    val _r_a = 2
    val _r_b = 2
  end : <_r_a : int Js.readonly_prop > Js.t)
[%%expect {|
Line _, characters 8-12:
Duplicated val or method "_r_b" (normalized to "r").
Line _, characters 8-12:
Duplicated val or method "_r_a" (normalized to "r").
|}]
;;

fun () ->
  object%js
    val mutable w = 2
    val mutable _w = 2
  end
[%%expect {|
Line _, characters 16-18:
Duplicated val or method "_w" (normalized to "w").
Line _, characters 16-17:
Duplicated val or method "w".
|}]
;;

fun () ->
  (object%js
    val mutable _w_a = 2
    val mutable _w_b = 2
  end : <_r_a : int Js.prop > Js.t)
[%%expect {|
Line _, characters 16-20:
Duplicated val or method "_w_b" (normalized to "w").
Line _, characters 16-20:
Duplicated val or method "_w_a" (normalized to "w").
|}]
;;

fun () ->
  object%js
    method m = ""
    method _m = ""
  end
[%%expect {|
Line _, characters 11-13:
Duplicated val or method "_m" (normalized to "m").
Line _, characters 11-12:
Duplicated val or method "m".
|}]
;;

fun () ->
  (object%js
    method _m_a = ""
    method _m_bc = ""
  end : <_m_a : string Js.meth; .. > Js.t)
[%%expect {|
Line _, characters 11-16:
Duplicated val or method "_m_bc" (normalized to "m").
Line _, characters 11-15:
Duplicated val or method "_m_a" (normalized to "m").
|}]
;;
