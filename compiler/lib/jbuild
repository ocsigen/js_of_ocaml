(jbuild_version 1)
(library
 ((name js_of_ocaml_compiler)
  (public_name js_of_ocaml-compiler)
  (synopsis "Js_of_ocaml compiler library")
  (libraries (compiler-libs.common bytes
   (select source_map_io.ml from
    (yojson -> source_map_yojson.ml.in)
    (       -> source_map_unsupported.ml.in))
  ))
  (flags (:standard -w -7-37 -safe-string))
  (modules (:standard \ control))
  ))

(rule
  ((targets (js_lexer.ml))
   (deps    (js_lexer.mll))
   (fallback)
   (action  (chdir ${ROOT} (run ${bin:ocamllex} -q -o ${<})))))

(rule
  ((targets (annot_lexer.ml))
   (deps    (annot_lexer.mll))
   (fallback)
   (action  (chdir ${ROOT} (run ${bin:ocamllex} -q -o ${<})))))

;; menhir is just noisy, both because this parser has conflicts, or
;; because we don't use --infer (to avoid having to write  manually and
;; badly specified dependencieds), so we just discard stderr.
(rule
 ((targets (js_parser.mli js_parser.ml))
  (deps (js_parser.mly))
  (fallback)
  (action (ignore-stderr (run menhir --external-tokens Js_token --explain ${<})))))

(rule
 ((targets (annot_parser.mli annot_parser.ml))
  (deps (annot_parser.mly))
  (fallback)
  (action (ignore-stderr (run menhir --explain ${<})))))

(rule
 ((targets (util.ml))
  (deps (util.cppo.ml))
  (action (run ${bin:cppo} -V OCAML:${ocaml_version}
           ;; Uncomment for bucklescript support
           ;; -D BUCKLESCRIPT
           ${<} -o ${@}))
  ))

(rule
 ((targets (compiler_version.ml))
  (deps (../../git_version.ml.in))
  (action (with-stdout-to ${@}
           (progn
            (echo "let s = \"")
            (echo ${version:js_of_ocaml-compiler})
            (echo "\"\n")
            (cat ../../git_version.ml.in))))
  ))
