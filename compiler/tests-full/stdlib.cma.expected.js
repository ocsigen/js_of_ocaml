
//# unitInfo: Provides: CamlinternalFormatBasics
(function
  (globalThis){
   "use strict";
   var runtime =  /*<<?>>*/ globalThis.jsoo_runtime;
   function erase_rel(param){
     /*<<camlinternalFormatBasics.ml:528:8>>*/ if(typeof param === "number")
      /*<<camlinternalFormatBasics.ml:562:20>>*/ return 0 /*<<camlinternalFormatBasics.ml:562:20>>*/ ;
    switch(param[0]){
      case 0:
       var rest = param[1];
        /*<<camlinternalFormatBasics.ml:533:4>>*/ return [0,
                /*<<camlinternalFormatBasics.ml:533:12>>*/ erase_rel
                 /*<<camlinternalFormatBasics.ml:533:12>>*/ (rest)] /*<<camlinternalFormatBasics.ml:533:4>>*/ ;
      case 1:
       var rest$0 = param[1];
        /*<<camlinternalFormatBasics.ml:535:4>>*/ return [1,
                /*<<camlinternalFormatBasics.ml:535:14>>*/ erase_rel
                 /*<<camlinternalFormatBasics.ml:535:14>>*/ (rest$0)] /*<<camlinternalFormatBasics.ml:535:4>>*/ ;
      case 2:
       var rest$1 = param[1];
        /*<<camlinternalFormatBasics.ml:537:4>>*/ return [2,
                /*<<camlinternalFormatBasics.ml:537:11>>*/ erase_rel
                 /*<<camlinternalFormatBasics.ml:537:11>>*/ (rest$1)] /*<<camlinternalFormatBasics.ml:537:4>>*/ ;
      case 3:
       var rest$2 = param[1];
        /*<<camlinternalFormatBasics.ml:539:4>>*/ return [3,
                /*<<camlinternalFormatBasics.ml:539:13>>*/ erase_rel
                 /*<<camlinternalFormatBasics.ml:539:13>>*/ (rest$2)] /*<<camlinternalFormatBasics.ml:539:4>>*/ ;
      case 4:
       var rest$3 = param[1];
        /*<<camlinternalFormatBasics.ml:543:4>>*/ return [4,
                /*<<camlinternalFormatBasics.ml:543:17>>*/ erase_rel
                 /*<<camlinternalFormatBasics.ml:543:17>>*/ (rest$3)] /*<<camlinternalFormatBasics.ml:543:4>>*/ ;
      case 5:
       var rest$4 = param[1];
        /*<<camlinternalFormatBasics.ml:541:4>>*/ return [5,
                /*<<camlinternalFormatBasics.ml:541:13>>*/ erase_rel
                 /*<<camlinternalFormatBasics.ml:541:13>>*/ (rest$4)] /*<<camlinternalFormatBasics.ml:541:4>>*/ ;
      case 6:
       var rest$5 = param[1];
        /*<<camlinternalFormatBasics.ml:545:4>>*/ return [6,
                /*<<camlinternalFormatBasics.ml:545:13>>*/ erase_rel
                 /*<<camlinternalFormatBasics.ml:545:13>>*/ (rest$5)] /*<<camlinternalFormatBasics.ml:545:4>>*/ ;
      case 7:
       var rest$6 = param[1];
        /*<<camlinternalFormatBasics.ml:547:4>>*/ return [7,
                /*<<camlinternalFormatBasics.ml:547:12>>*/ erase_rel
                 /*<<camlinternalFormatBasics.ml:547:12>>*/ (rest$6)] /*<<camlinternalFormatBasics.ml:547:4>>*/ ;
      case 8:
       var rest$7 = param[2], ty = param[1];
        /*<<camlinternalFormatBasics.ml:549:4>>*/ return [8,
               ty,
                /*<<camlinternalFormatBasics.ml:549:23>>*/ erase_rel
                 /*<<camlinternalFormatBasics.ml:549:23>>*/ (rest$7)] /*<<camlinternalFormatBasics.ml:549:4>>*/ ;
      case 9:
       var rest$8 = param[3], ty1 = param[1];
        /*<<camlinternalFormatBasics.ml:551:4>>*/ return [9,
               ty1,
               ty1,
                /*<<camlinternalFormatBasics.ml:551:31>>*/ erase_rel
                 /*<<camlinternalFormatBasics.ml:551:31>>*/ (rest$8)] /*<<camlinternalFormatBasics.ml:551:4>>*/ ;
      case 10:
       var rest$9 = param[1];
        /*<<camlinternalFormatBasics.ml:553:4>>*/ return [10,
                /*<<camlinternalFormatBasics.ml:553:13>>*/ erase_rel
                 /*<<camlinternalFormatBasics.ml:553:13>>*/ (rest$9)] /*<<camlinternalFormatBasics.ml:553:4>>*/ ;
      case 11:
       var rest$10 = param[1];
        /*<<camlinternalFormatBasics.ml:555:4>>*/ return [11,
                /*<<camlinternalFormatBasics.ml:555:13>>*/ erase_rel
                 /*<<camlinternalFormatBasics.ml:555:13>>*/ (rest$10)] /*<<camlinternalFormatBasics.ml:555:4>>*/ ;
      case 12:
       var rest$11 = param[1];
        /*<<camlinternalFormatBasics.ml:557:4>>*/ return [12,
                /*<<camlinternalFormatBasics.ml:557:11>>*/ erase_rel
                 /*<<camlinternalFormatBasics.ml:557:11>>*/ (rest$11)] /*<<camlinternalFormatBasics.ml:557:4>>*/ ;
      case 13:
       var rest$12 = param[1];
        /*<<camlinternalFormatBasics.ml:559:4>>*/ return [13,
                /*<<camlinternalFormatBasics.ml:559:14>>*/ erase_rel
                 /*<<camlinternalFormatBasics.ml:559:14>>*/ (rest$12)] /*<<camlinternalFormatBasics.ml:559:4>>*/ ;
      default:
       var rest$13 = param[1];
        /*<<camlinternalFormatBasics.ml:561:4>>*/ return [14,
                /*<<camlinternalFormatBasics.ml:561:22>>*/ erase_rel
                 /*<<camlinternalFormatBasics.ml:561:22>>*/ (rest$13)] /*<<camlinternalFormatBasics.ml:561:4>>*/ ;
    }
    /*<<camlinternalFormatBasics.ml:562:32>>*/ }
   function concat_fmtty(fmtty1, fmtty2){
     /*<<camlinternalFormatBasics.ml:590:21>>*/ if(typeof fmtty1 === "number")
      /*<<camlinternalFormatBasics.ml:621:20>>*/ return fmtty2 /*<<camlinternalFormatBasics.ml:621:20>>*/ ;
    switch(fmtty1[0]){
      case 0:
       var rest = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:592:4>>*/ return [0,
                /*<<camlinternalFormatBasics.ml:592:12>>*/ concat_fmtty
                 /*<<camlinternalFormatBasics.ml:592:12>>*/ (rest, fmtty2)] /*<<camlinternalFormatBasics.ml:592:4>>*/ ;
      case 1:
       var rest$0 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:594:4>>*/ return [1,
                /*<<camlinternalFormatBasics.ml:594:14>>*/ concat_fmtty
                 /*<<camlinternalFormatBasics.ml:594:14>>*/ (rest$0, fmtty2)] /*<<camlinternalFormatBasics.ml:594:4>>*/ ;
      case 2:
       var rest$1 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:596:4>>*/ return [2,
                /*<<camlinternalFormatBasics.ml:596:11>>*/ concat_fmtty
                 /*<<camlinternalFormatBasics.ml:596:11>>*/ (rest$1, fmtty2)] /*<<camlinternalFormatBasics.ml:596:4>>*/ ;
      case 3:
       var rest$2 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:598:4>>*/ return [3,
                /*<<camlinternalFormatBasics.ml:598:13>>*/ concat_fmtty
                 /*<<camlinternalFormatBasics.ml:598:13>>*/ (rest$2, fmtty2)] /*<<camlinternalFormatBasics.ml:598:4>>*/ ;
      case 4:
       var rest$3 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:600:4>>*/ return [4,
                /*<<camlinternalFormatBasics.ml:600:17>>*/ concat_fmtty
                 /*<<camlinternalFormatBasics.ml:600:17>>*/ (rest$3, fmtty2)] /*<<camlinternalFormatBasics.ml:600:4>>*/ ;
      case 5:
       var rest$4 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:602:4>>*/ return [5,
                /*<<camlinternalFormatBasics.ml:602:13>>*/ concat_fmtty
                 /*<<camlinternalFormatBasics.ml:602:13>>*/ (rest$4, fmtty2)] /*<<camlinternalFormatBasics.ml:602:4>>*/ ;
      case 6:
       var rest$5 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:604:4>>*/ return [6,
                /*<<camlinternalFormatBasics.ml:604:13>>*/ concat_fmtty
                 /*<<camlinternalFormatBasics.ml:604:13>>*/ (rest$5, fmtty2)] /*<<camlinternalFormatBasics.ml:604:4>>*/ ;
      case 7:
       var rest$6 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:606:4>>*/ return [7,
                /*<<camlinternalFormatBasics.ml:606:12>>*/ concat_fmtty
                 /*<<camlinternalFormatBasics.ml:606:12>>*/ (rest$6, fmtty2)] /*<<camlinternalFormatBasics.ml:606:4>>*/ ;
      case 8:
       var rest$7 = fmtty1[2], ty = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:618:4>>*/ return [8,
               ty,
                /*<<camlinternalFormatBasics.ml:618:23>>*/ concat_fmtty
                 /*<<camlinternalFormatBasics.ml:618:23>>*/ (rest$7, fmtty2)] /*<<camlinternalFormatBasics.ml:618:4>>*/ ;
      case 9:
       var rest$8 = fmtty1[3], ty2 = fmtty1[2], ty1 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:620:4>>*/ return [9,
               ty1,
               ty2,
                /*<<camlinternalFormatBasics.ml:620:31>>*/ concat_fmtty
                 /*<<camlinternalFormatBasics.ml:620:31>>*/ (rest$8, fmtty2)] /*<<camlinternalFormatBasics.ml:620:4>>*/ ;
      case 10:
       var rest$9 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:608:4>>*/ return [10,
                /*<<camlinternalFormatBasics.ml:608:13>>*/ concat_fmtty
                 /*<<camlinternalFormatBasics.ml:608:13>>*/ (rest$9, fmtty2)] /*<<camlinternalFormatBasics.ml:608:4>>*/ ;
      case 11:
       var rest$10 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:610:4>>*/ return [11,
                /*<<camlinternalFormatBasics.ml:610:13>>*/ concat_fmtty
                 /*<<camlinternalFormatBasics.ml:610:13>>*/ (rest$10, fmtty2)] /*<<camlinternalFormatBasics.ml:610:4>>*/ ;
      case 12:
       var rest$11 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:612:4>>*/ return [12,
                /*<<camlinternalFormatBasics.ml:612:11>>*/ concat_fmtty
                 /*<<camlinternalFormatBasics.ml:612:11>>*/ (rest$11, fmtty2)] /*<<camlinternalFormatBasics.ml:612:4>>*/ ;
      case 13:
       var rest$12 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:614:4>>*/ return [13,
                /*<<camlinternalFormatBasics.ml:614:14>>*/ concat_fmtty
                 /*<<camlinternalFormatBasics.ml:614:14>>*/ (rest$12, fmtty2)] /*<<camlinternalFormatBasics.ml:614:4>>*/ ;
      default:
       var rest$13 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:616:4>>*/ return [14,
                /*<<camlinternalFormatBasics.ml:616:22>>*/ concat_fmtty
                 /*<<camlinternalFormatBasics.ml:616:22>>*/ (rest$13, fmtty2)] /*<<camlinternalFormatBasics.ml:616:4>>*/ ;
    }
    /*<<camlinternalFormatBasics.ml:621:26>>*/ }
   function concat_fmt(fmt1, fmt2){
     /*<<camlinternalFormatBasics.ml:631:17>>*/ if(typeof fmt1 === "number")
      /*<<camlinternalFormatBasics.ml:690:4>>*/ return fmt2 /*<<camlinternalFormatBasics.ml:690:4>>*/ ;
    switch(fmt1[0]){
      case 0:
       var rest = fmt1[1];
        /*<<camlinternalFormatBasics.ml:649:4>>*/ return [0,
                /*<<camlinternalFormatBasics.ml:649:9>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:649:9>>*/ (rest, fmt2)] /*<<camlinternalFormatBasics.ml:649:4>>*/ ;
      case 1:
       var rest$0 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:651:4>>*/ return [1,
                /*<<camlinternalFormatBasics.ml:651:14>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:651:14>>*/ (rest$0, fmt2)] /*<<camlinternalFormatBasics.ml:651:4>>*/ ;
      case 2:
       var rest$1 = fmt1[2], pad = fmt1[1];
        /*<<camlinternalFormatBasics.ml:633:4>>*/ return [2,
               pad,
                /*<<camlinternalFormatBasics.ml:633:17>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:633:17>>*/ (rest$1, fmt2)] /*<<camlinternalFormatBasics.ml:633:4>>*/ ;
      case 3:
       var rest$2 = fmt1[2], pad$0 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:635:4>>*/ return [3,
               pad$0,
                /*<<camlinternalFormatBasics.ml:635:22>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:635:22>>*/ (rest$2, fmt2)] /*<<camlinternalFormatBasics.ml:635:4>>*/ ;
      case 4:
       var rest$3 = fmt1[4], prec = fmt1[3], pad$1 = fmt1[2], iconv = fmt1[1];
        /*<<camlinternalFormatBasics.ml:638:4>>*/ return [4,
               iconv,
               pad$1,
               prec,
                /*<<camlinternalFormatBasics.ml:638:27>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:638:27>>*/ (rest$3, fmt2)] /*<<camlinternalFormatBasics.ml:638:4>>*/ ;
      case 5:
       var
        rest$4 = fmt1[4],
        prec$0 = fmt1[3],
        pad$2 = fmt1[2],
        iconv$0 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:640:4>>*/ return [5,
               iconv$0,
               pad$2,
               prec$0,
                /*<<camlinternalFormatBasics.ml:640:29>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:640:29>>*/ (rest$4, fmt2)] /*<<camlinternalFormatBasics.ml:640:4>>*/ ;
      case 6:
       var
        rest$5 = fmt1[4],
        prec$1 = fmt1[3],
        pad$3 = fmt1[2],
        iconv$1 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:642:4>>*/ return [6,
               iconv$1,
               pad$3,
               prec$1,
                /*<<camlinternalFormatBasics.ml:642:33>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:642:33>>*/ (rest$5, fmt2)] /*<<camlinternalFormatBasics.ml:642:4>>*/ ;
      case 7:
       var
        rest$6 = fmt1[4],
        prec$2 = fmt1[3],
        pad$4 = fmt1[2],
        iconv$2 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:644:4>>*/ return [7,
               iconv$2,
               pad$4,
               prec$2,
                /*<<camlinternalFormatBasics.ml:644:29>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:644:29>>*/ (rest$6, fmt2)] /*<<camlinternalFormatBasics.ml:644:4>>*/ ;
      case 8:
       var
        rest$7 = fmt1[4],
        prec$3 = fmt1[3],
        pad$5 = fmt1[2],
        fconv = fmt1[1];
        /*<<camlinternalFormatBasics.ml:646:4>>*/ return [8,
               fconv,
               pad$5,
               prec$3,
                /*<<camlinternalFormatBasics.ml:646:29>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:646:29>>*/ (rest$7, fmt2)] /*<<camlinternalFormatBasics.ml:646:4>>*/ ;
      case 9:
       var rest$8 = fmt1[2], pad$6 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:653:4>>*/ return [9,
               pad$6,
                /*<<camlinternalFormatBasics.ml:653:15>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:653:15>>*/ (rest$8, fmt2)] /*<<camlinternalFormatBasics.ml:653:4>>*/ ;
      case 10:
       var rest$9 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:663:4>>*/ return [10,
                /*<<camlinternalFormatBasics.ml:663:10>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:663:10>>*/ (rest$9, fmt2)] /*<<camlinternalFormatBasics.ml:663:4>>*/ ;
      case 11:
       var rest$10 = fmt1[2], str = fmt1[1];
        /*<<camlinternalFormatBasics.ml:666:4>>*/ return [11,
               str,
                /*<<camlinternalFormatBasics.ml:666:25>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:666:25>>*/ (rest$10, fmt2)] /*<<camlinternalFormatBasics.ml:666:4>>*/ ;
      case 12:
       var rest$11 = fmt1[2], chr = fmt1[1];
        /*<<camlinternalFormatBasics.ml:668:4>>*/ return [12,
               chr,
                /*<<camlinternalFormatBasics.ml:668:25>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:668:25>>*/ (rest$11, fmt2)] /*<<camlinternalFormatBasics.ml:668:4>>*/ ;
      case 13:
       var rest$12 = fmt1[3], fmtty = fmt1[2], pad$7 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:671:4>>*/ return [13,
               pad$7,
               fmtty,
                /*<<camlinternalFormatBasics.ml:671:30>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:671:30>>*/ (rest$12, fmt2)] /*<<camlinternalFormatBasics.ml:671:4>>*/ ;
      case 14:
       var rest$13 = fmt1[3], fmtty$0 = fmt1[2], pad$8 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:673:4>>*/ return [14,
               pad$8,
               fmtty$0,
                /*<<camlinternalFormatBasics.ml:673:30>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:673:30>>*/ (rest$13, fmt2)] /*<<camlinternalFormatBasics.ml:673:4>>*/ ;
      case 15:
       var rest$14 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:655:4>>*/ return [15,
                /*<<camlinternalFormatBasics.ml:655:10>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:655:10>>*/ (rest$14, fmt2)] /*<<camlinternalFormatBasics.ml:655:4>>*/ ;
      case 16:
       var rest$15 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:657:4>>*/ return [16,
                /*<<camlinternalFormatBasics.ml:657:10>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:657:10>>*/ (rest$15, fmt2)] /*<<camlinternalFormatBasics.ml:657:4>>*/ ;
      case 17:
       var rest$16 = fmt1[2], fmting_lit = fmt1[1];
        /*<<camlinternalFormatBasics.ml:685:4>>*/ return [17,
               fmting_lit,
                /*<<camlinternalFormatBasics.ml:685:32>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:685:32>>*/ (rest$16, fmt2)] /*<<camlinternalFormatBasics.ml:685:4>>*/ ;
      case 18:
       var rest$17 = fmt1[2], fmting_gen = fmt1[1];
        /*<<camlinternalFormatBasics.ml:687:4>>*/ return [18,
               fmting_gen,
                /*<<camlinternalFormatBasics.ml:687:32>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:687:32>>*/ (rest$17, fmt2)] /*<<camlinternalFormatBasics.ml:687:4>>*/ ;
      case 19:
       var rest$18 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:661:4>>*/ return [19,
                /*<<camlinternalFormatBasics.ml:661:11>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:661:11>>*/ (rest$18, fmt2)] /*<<camlinternalFormatBasics.ml:661:4>>*/ ;
      case 20:
       var rest$19 = fmt1[3], char_set = fmt1[2], width_opt = fmt1[1];
        /*<<camlinternalFormatBasics.ml:676:4>>*/ return [20,
               width_opt,
               char_set,
                /*<<camlinternalFormatBasics.ml:676:40>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:676:40>>*/ (rest$19, fmt2)] /*<<camlinternalFormatBasics.ml:676:4>>*/ ;
      case 21:
       var rest$20 = fmt1[2], counter = fmt1[1];
        /*<<camlinternalFormatBasics.ml:678:4>>*/ return [21,
               counter,
                /*<<camlinternalFormatBasics.ml:678:31>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:678:31>>*/ (rest$20, fmt2)] /*<<camlinternalFormatBasics.ml:678:4>>*/ ;
      case 22:
       var rest$21 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:680:4>>*/ return [22,
                /*<<camlinternalFormatBasics.ml:680:19>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:680:19>>*/ (rest$21, fmt2)] /*<<camlinternalFormatBasics.ml:680:4>>*/ ;
      case 23:
       var rest$22 = fmt1[2], ign = fmt1[1];
        /*<<camlinternalFormatBasics.ml:682:4>>*/ return [23,
               ign,
                /*<<camlinternalFormatBasics.ml:682:24>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:682:24>>*/ (rest$22, fmt2)] /*<<camlinternalFormatBasics.ml:682:4>>*/ ;
      default:
       var rest$23 = fmt1[3], f = fmt1[2], arity = fmt1[1];
        /*<<camlinternalFormatBasics.ml:659:4>>*/ return [24,
               arity,
               f,
                /*<<camlinternalFormatBasics.ml:659:22>>*/ concat_fmt
                 /*<<camlinternalFormatBasics.ml:659:22>>*/ (rest$23, fmt2)] /*<<camlinternalFormatBasics.ml:659:4>>*/ ;
    }
    /*<<camlinternalFormatBasics.ml:690:8>>*/ }
   var CamlinternalFormatBasics = [0, concat_fmtty, erase_rel, concat_fmt];
   runtime.caml_register_global
    (0, CamlinternalFormatBasics, "CamlinternalFormatBasics");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib
//# unitInfo: Requires: CamlinternalFormatBasics
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst_false$0 =  /*<<?>>*/ "false",
    cst_true$0 =  /*<<?>>*/ "true",
    caml_atomic_cas =  /*<<?>>*/ runtime.caml_atomic_cas,
    caml_atomic_load =  /*<<?>>*/ runtime.caml_atomic_load,
    caml_create_bytes =  /*<<?>>*/ runtime.caml_create_bytes,
    caml_float_of_string =  /*<<?>>*/ runtime.caml_float_of_string,
    caml_int64_float_of_bits =  /*<<?>>*/ runtime.caml_int64_float_of_bits,
    caml_int_of_string =  /*<<?>>*/ runtime.caml_int_of_string,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length =  /*<<?>>*/ runtime.caml_ml_bytes_length,
    caml_ml_channel_size =  /*<<?>>*/ runtime.caml_ml_channel_size,
    caml_ml_channel_size_64 =  /*<<?>>*/ runtime.caml_ml_channel_size_64,
    caml_ml_close_channel =  /*<<?>>*/ runtime.caml_ml_close_channel,
    caml_ml_flush =  /*<<?>>*/ runtime.caml_ml_flush,
    caml_ml_input =  /*<<?>>*/ runtime.caml_ml_input,
    caml_ml_input_char =  /*<<?>>*/ runtime.caml_ml_input_char,
    caml_ml_open_descriptor_in =  /*<<?>>*/ runtime.caml_ml_open_descriptor_in,
    caml_ml_open_descriptor_out =
       /*<<?>>*/ runtime.caml_ml_open_descriptor_out,
    caml_ml_output =  /*<<?>>*/ runtime.caml_ml_output,
    caml_ml_output_bytes =  /*<<?>>*/ runtime.caml_ml_output_bytes,
    caml_ml_output_char =  /*<<?>>*/ runtime.caml_ml_output_char,
    caml_ml_set_binary_mode =  /*<<?>>*/ runtime.caml_ml_set_binary_mode,
    caml_ml_set_channel_name =  /*<<?>>*/ runtime.caml_ml_set_channel_name,
    caml_ml_string_length =  /*<<?>>*/ runtime.caml_ml_string_length,
    caml_string_concat =  /*<<?>>*/ runtime.caml_string_concat,
    caml_string_of_bytes =  /*<<?>>*/ runtime.caml_string_of_bytes,
    caml_sys_open =  /*<<?>>*/ runtime.caml_sys_open,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    CamlinternalFormatBasics = global_data.CamlinternalFormatBasics,
    Invalid_argument = global_data.Invalid_argument,
    Failure = global_data.Failure,
    Match_failure = global_data.Match_failure,
    Assert_failure = global_data.Assert_failure,
    Not_found = global_data.Not_found,
    Out_of_memory = global_data.Out_of_memory,
    Stack_overflow = global_data.Stack_overflow,
    Sys_error = global_data.Sys_error,
    End_of_file = global_data.End_of_file,
    Division_by_zero = global_data.Division_by_zero,
    Sys_blocked_io = global_data.Sys_blocked_io,
    Undefined_recursive_module = global_data.Undefined_recursive_module;
   function failwith(s){
     /*<<stdlib.ml:29:17>>*/ throw  /*<<stdlib.ml:29:17>>*/ caml_maybe_attach_backtrace
            /*<<stdlib.ml:29:17>>*/ ([0, Failure, s], 1);
    /*<<stdlib.ml:29:33>>*/ }
   function invalid_arg(s){
     /*<<stdlib.ml:30:20>>*/ throw  /*<<stdlib.ml:30:20>>*/ caml_maybe_attach_backtrace
            /*<<stdlib.ml:30:20>>*/ ([0, Invalid_argument, s], 1);
    /*<<stdlib.ml:30:45>>*/ }
   var
    Exit =
       /*<<stdlib.ml:32:0>>*/ [248,
       "Stdlib.Exit",
       runtime.caml_fresh_oo_id(0)];
   function min(x, y){
     /*<<stdlib.ml:74:14>>*/ return  /*<<stdlib.ml:74:17>>*/ runtime.caml_lessequal
              /*<<stdlib.ml:74:17>>*/ (x, y)
            ? x
            : y /*<<stdlib.ml:74:37>>*/ ;
    /*<<stdlib.ml:74:37>>*/ }
   function max(x, y){
     /*<<stdlib.ml:75:14>>*/ return  /*<<stdlib.ml:75:17>>*/ runtime.caml_greaterequal
              /*<<stdlib.ml:75:17>>*/ (x, y)
            ? x
            : y /*<<stdlib.ml:75:37>>*/ ;
    /*<<stdlib.ml:75:37>>*/ }
   function abs(x){
     /*<<stdlib.ml:98:12>>*/ return 0 <= x ? x : - x | 0 /*<<stdlib.ml:98:36>>*/ ;
    /*<<stdlib.ml:98:36>>*/ }
   function lnot(x){
     /*<<stdlib.ml:104:13>>*/ return x ^ -1;
    /*<<stdlib.ml:104:24>>*/ }
   var
    infinity =
       /*<<stdlib.ml:180:2>>*/  /*<<stdlib.ml:180:2>>*/ caml_int64_float_of_bits
        /*<<stdlib.ml:180:2>>*/ (runtime.caml_int64_create_lo_mi_hi
         (0, 0, 32752)),
    neg_infinity =
       /*<<stdlib.ml:182:2>>*/  /*<<stdlib.ml:182:2>>*/ caml_int64_float_of_bits
        /*<<stdlib.ml:182:2>>*/ (runtime.caml_int64_create_lo_mi_hi
         (0, 0, 65520)),
    nan =
       /*<<stdlib.ml:184:2>>*/  /*<<stdlib.ml:184:2>>*/ caml_int64_float_of_bits
        /*<<stdlib.ml:184:2>>*/ (runtime.caml_int64_create_lo_mi_hi
         (1, 0, 32760)),
    max_float =
       /*<<stdlib.ml:186:2>>*/  /*<<stdlib.ml:186:2>>*/ caml_int64_float_of_bits
        /*<<stdlib.ml:186:2>>*/ (runtime.caml_int64_create_lo_mi_hi
         (16777215, 16777215, 32751)),
    min_float =
       /*<<stdlib.ml:188:2>>*/  /*<<stdlib.ml:188:2>>*/ caml_int64_float_of_bits
        /*<<stdlib.ml:188:2>>*/ (runtime.caml_int64_create_lo_mi_hi(0, 0, 16)),
    epsilon_float =
       /*<<stdlib.ml:190:2>>*/  /*<<stdlib.ml:190:2>>*/ caml_int64_float_of_bits
        /*<<stdlib.ml:190:2>>*/ (runtime.caml_int64_create_lo_mi_hi
         (0, 0, 15536)),
    symbol_concat = caml_string_concat,
    cst_char_of_int = "char_of_int",
    cst_true = cst_true$0,
    cst_false = cst_false$0,
    cst_bool_of_string = "bool_of_string",
    _a_ = [0, 1],
    _b_ = [0, 0];
   function char_of_int(n){
     /*<<stdlib.ml:224:2>>*/ if(0 <= n && 255 >= n)
      /*<<stdlib.ml:224:58>>*/ return n /*<<stdlib.ml:224:58>>*/ ;
     /*<<stdlib.ml:224:27>>*/ return  /*<<stdlib.ml:224:27>>*/ invalid_arg
             /*<<stdlib.ml:224:27>>*/ (cst_char_of_int) /*<<stdlib.ml:224:78>>*/ ;
    /*<<stdlib.ml:224:78>>*/ }
   function string_of_bool(b){
     /*<<stdlib.ml:254:2>>*/ return b ? cst_true : cst_false /*<<stdlib.ml:254:31>>*/ ;
    /*<<stdlib.ml:254:31>>*/ }
   function bool_of_string(param){
     /*<<stdlib.ml:255:21>>*/ return param !== cst_false$0
            ? param
              !== cst_true$0
              ?  /*<<stdlib.ml:258:9>>*/ invalid_arg
                 /*<<stdlib.ml:258:9>>*/ (cst_bool_of_string)
              : 1
            : 0 /*<<stdlib.ml:258:37>>*/ ;
    /*<<stdlib.ml:258:37>>*/ }
   function bool_of_string_opt(param){
     /*<<stdlib.ml:260:25>>*/ return param !== cst_false$0
            ? param !== cst_true$0 ? 0 : _a_
            : _b_ /*<<stdlib.ml:263:13>>*/ ;
    /*<<stdlib.ml:263:13>>*/ }
   function string_of_int(n){
     /*<<stdlib.ml:266:2>>*/ return "" + n /*<<stdlib.ml:266:2>>*/ ;
    /*<<stdlib.ml:266:19>>*/ }
   function int_of_string_opt(s){
     /*<<stdlib.ml:272:2>>*/ try{
     var
      _w_ =
         /*<<stdlib.ml:272:6>>*/ [0,
          /*<<stdlib.ml:272:11>>*/ caml_int_of_string
           /*<<stdlib.ml:272:11>>*/ (s)];
      /*<<stdlib.ml:272:6>>*/ return _w_ /*<<stdlib.ml:272:6>>*/ ;
    }
    catch(_x_){
     var _v_ = caml_wrap_exception(_x_);
     if(_v_[1] === Failure)
       /*<<stdlib.ml:273:20>>*/ return 0 /*<<stdlib.ml:273:20>>*/ ;
     throw caml_maybe_attach_backtrace(_v_, 0);
    }
    /*<<stdlib.ml:273:24>>*/ }
   function valid_float_lexem(s1){
    var l = caml_ml_string_length(s1), i = 0;
     /*<<stdlib.ml:280:4>>*/ for(;;){
     if(l <= i) return s1 + ".";
     var
      match =
         /*<<stdlib.ml:281:10>>*/  /*<<stdlib.ml:281:10>>*/ runtime.caml_string_get
          /*<<stdlib.ml:281:10>>*/ (s1, i);
     a:
     {
      if(48 <= match){if(58 > match) break a;} else if(45 === match) break a;
       /*<<stdlib.ml:279:2>>*/ return s1 /*<<stdlib.ml:279:2>>*/ ;
     }
     var i$0 =  /*<<stdlib.ml:282:26>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<stdlib.ml:285:8>>*/ }
   function string_of_float(f){
     /*<<stdlib.ml:287:24>>*/ return  /*<<stdlib.ml:287:42>>*/ valid_float_lexem
             /*<<stdlib.ml:287:42>>*/ ( /*<<stdlib.ml:287:42>>*/ runtime.caml_format_float
               /*<<stdlib.ml:287:42>>*/ ("%.12g", f)) /*<<stdlib.ml:287:66>>*/ ;
    /*<<stdlib.ml:287:66>>*/ }
   function float_of_string_opt(s){
     /*<<stdlib.ml:293:2>>*/ try{
     var
      _t_ =
         /*<<stdlib.ml:293:6>>*/ [0,
          /*<<stdlib.ml:293:11>>*/ caml_float_of_string
           /*<<stdlib.ml:293:11>>*/ (s)];
      /*<<stdlib.ml:293:6>>*/ return _t_ /*<<stdlib.ml:293:6>>*/ ;
    }
    catch(_u_){
     var _s_ = caml_wrap_exception(_u_);
     if(_s_[1] === Failure)
       /*<<stdlib.ml:294:20>>*/ return 0 /*<<stdlib.ml:294:20>>*/ ;
     throw caml_maybe_attach_backtrace(_s_, 0);
    }
    /*<<stdlib.ml:294:24>>*/ }
   function symbol(l1, l2){
     /*<<stdlib.ml:299:2>>*/ if(! l1)
      /*<<stdlib.ml:300:10>>*/ return l2 /*<<stdlib.ml:300:10>>*/ ;
    var _q_ = l1[2], h1 = l1[1];
    if(! _q_)
      /*<<stdlib.ml:301:16>>*/ return [0, h1, l2] /*<<stdlib.ml:301:16>>*/ ;
    var match = _q_[2], h2 = _q_[1];
    if(! match)
      /*<<stdlib.ml:302:22>>*/ return [0, h1, [0, h2, l2]] /*<<stdlib.ml:302:22>>*/ ;
    var
     tl = match[2],
     h3 = match[1],
     block =  /*<<stdlib.ml:303:40>>*/ [0, h3, 24029],
     dst = block,
     offset = 1,
     l1$0 = tl;
     /*<<stdlib.ml:299:2>>*/ for(;;){
     if(l1$0){
      var _r_ = l1$0[2], h1$0 = l1$0[1];
      if(_r_){
       var match$0 = _r_[2], h2$0 = _r_[1];
       if(match$0){
        var
         tl$0 = match$0[2],
         h3$0 = match$0[1],
         dst$0 =  /*<<stdlib.ml:303:40>>*/ [0, h3$0, 24029];
        dst[1 + offset] = [0, h1$0, [0, h2$0, dst$0]];
        dst = dst$0;
        offset = 1;
        l1$0 = tl$0;
        continue;
       }
       dst[1 + offset] = [0, h1$0, [0, h2$0, l2]];
      }
      else
       dst[1 + offset] = [0, h1$0, l2];
     }
     else
      dst[1 + offset] = l2;
      /*<<stdlib.ml:303:28>>*/ return [0, h1, [0, h2, block]] /*<<stdlib.ml:303:28>>*/ ;
    }
    /*<<stdlib.ml:303:55>>*/ }
   var
    stdin =
       /*<<stdlib.ml:314:12>>*/  /*<<stdlib.ml:314:12>>*/ caml_ml_open_descriptor_in
        /*<<stdlib.ml:314:12>>*/ (0),
    stdout =
       /*<<stdlib.ml:315:13>>*/  /*<<stdlib.ml:315:13>>*/ caml_ml_open_descriptor_out
        /*<<stdlib.ml:315:13>>*/ (1),
    stderr =
       /*<<stdlib.ml:316:13>>*/  /*<<stdlib.ml:316:13>>*/ caml_ml_open_descriptor_out
        /*<<stdlib.ml:316:13>>*/ (2),
    _c_ = [0, 1, [0, 3, [0, 4, [0, 7, 0]]]],
    _d_ = [0, 1, [0, 3, [0, 4, [0, 6, 0]]]],
    cst_output = "output",
    cst_output_substring = "output_substring",
    _e_ = [0, 0, [0, 7, 0]],
    _f_ = [0, 0, [0, 6, 0]],
    cst_input = "input",
    cst_really_input = "really_input";
   function open_out_gen(mode, perm, name){
    var
     c =
        /*<<stdlib.ml:331:10>>*/  /*<<stdlib.ml:331:10>>*/ caml_ml_open_descriptor_out
         /*<<stdlib.ml:331:10>>*/ ( /*<<stdlib.ml:331:29>>*/ caml_sys_open
           /*<<stdlib.ml:331:29>>*/ (name, mode, perm));
     /*<<stdlib.ml:332:2>>*/  /*<<stdlib.ml:332:2>>*/ caml_ml_set_channel_name
      /*<<stdlib.ml:332:2>>*/ (c, name);
     /*<<stdlib.ml:332:2>>*/ return c /*<<stdlib.ml:332:2>>*/ ;
    /*<<stdlib.ml:333:3>>*/ }
   function open_out(name){
     /*<<stdlib.ml:336:2>>*/ return  /*<<stdlib.ml:336:2>>*/ open_out_gen
             /*<<stdlib.ml:336:2>>*/ (_c_, 438, name) /*<<stdlib.ml:336:74>>*/ ;
    /*<<stdlib.ml:336:74>>*/ }
   function open_out_bin(name){
     /*<<stdlib.ml:339:2>>*/ return  /*<<stdlib.ml:339:2>>*/ open_out_gen
             /*<<stdlib.ml:339:2>>*/ (_d_, 438, name) /*<<stdlib.ml:339:76>>*/ ;
    /*<<stdlib.ml:339:76>>*/ }
   function flush_all(param){
    var
     param$0 =
        /*<<stdlib.ml:356:10>>*/ runtime.caml_ml_out_channels_list
         /*<<stdlib.ml:356:10>>*/ (0);
     /*<<stdlib.ml:347:17>>*/ for(;;){
     if(! param$0)
       /*<<stdlib.ml:348:12>>*/ return 0 /*<<stdlib.ml:348:12>>*/ ;
     var l = param$0[2], a = param$0[1];
      /*<<stdlib.ml:350:8>>*/ try{
       /*<<stdlib.ml:351:12>>*/  /*<<stdlib.ml:351:12>>*/ caml_ml_flush
        /*<<stdlib.ml:351:12>>*/ (a);
     }
     catch(_p_){
      var _o_ = caml_wrap_exception(_p_);
      if(_o_[1] !== Sys_error) throw caml_maybe_attach_backtrace(_o_, 0);
     }
     param$0 = l;
    }
    /*<<stdlib.ml:356:32>>*/ }
   function output_bytes(oc, s){
     /*<<stdlib.ml:366:2>>*/ return  /*<<stdlib.ml:366:2>>*/ caml_ml_output_bytes
             /*<<stdlib.ml:366:2>>*/ (oc, s, 0, caml_ml_bytes_length(s)) /*<<stdlib.ml:366:39>>*/ ;
    /*<<stdlib.ml:366:39>>*/ }
   function output_string(oc, s){
     /*<<stdlib.ml:369:2>>*/ return  /*<<stdlib.ml:369:2>>*/ caml_ml_output
             /*<<stdlib.ml:369:2>>*/ (oc, s, 0, caml_ml_string_length(s)) /*<<stdlib.ml:369:47>>*/ ;
    /*<<stdlib.ml:369:47>>*/ }
   function output(oc, s, ofs, len){
     /*<<stdlib.ml:372:2>>*/ if
     (0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
      /*<<stdlib.ml:374:7>>*/ return  /*<<stdlib.ml:374:7>>*/ caml_ml_output_bytes
              /*<<stdlib.ml:374:7>>*/ (oc, s, ofs, len) /*<<stdlib.ml:374:33>>*/ ;
     /*<<stdlib.ml:373:7>>*/ return  /*<<stdlib.ml:373:7>>*/ invalid_arg
             /*<<stdlib.ml:373:7>>*/ (cst_output) /*<<stdlib.ml:374:33>>*/ ;
    /*<<stdlib.ml:374:33>>*/ }
   function output_substring(oc, s, ofs, len){
     /*<<stdlib.ml:377:2>>*/ if
     (0 <= ofs && 0 <= len && (caml_ml_string_length(s) - len | 0) >= ofs)
      /*<<stdlib.ml:379:7>>*/ return  /*<<stdlib.ml:379:7>>*/ caml_ml_output
              /*<<stdlib.ml:379:7>>*/ (oc, s, ofs, len) /*<<stdlib.ml:379:40>>*/ ;
     /*<<stdlib.ml:378:7>>*/ return  /*<<stdlib.ml:378:7>>*/ invalid_arg
             /*<<stdlib.ml:378:7>>*/ (cst_output_substring) /*<<stdlib.ml:379:40>>*/ ;
    /*<<stdlib.ml:379:40>>*/ }
   function output_value(chan, v){
     /*<<stdlib.ml:386:26>>*/ return  /*<<stdlib.ml:386:26>>*/ runtime.caml_output_value
             /*<<stdlib.ml:386:26>>*/ (chan, v, 0) /*<<stdlib.ml:386:54>>*/ ;
    /*<<stdlib.ml:386:54>>*/ }
   function close_out(oc){
     /*<<stdlib.ml:392:19>>*/  /*<<stdlib.ml:392:19>>*/ caml_ml_flush
      /*<<stdlib.ml:392:19>>*/ (oc);
     /*<<stdlib.ml:392:29>>*/ return  /*<<stdlib.ml:392:29>>*/ caml_ml_close_channel
             /*<<stdlib.ml:392:29>>*/ (oc) /*<<stdlib.ml:392:49>>*/ ;
    /*<<stdlib.ml:392:49>>*/ }
   function close_out_noerr(oc){
     /*<<stdlib.ml:394:2>>*/ try{
      /*<<stdlib.ml:394:7>>*/  /*<<stdlib.ml:394:7>>*/ caml_ml_flush
       /*<<stdlib.ml:394:7>>*/ (oc);
    }
    catch(_n_){}
     /*<<stdlib.ml:395:2>>*/ try{
     var
      _l_ =
         /*<<stdlib.ml:395:7>>*/  /*<<stdlib.ml:395:7>>*/ caml_ml_close_channel
          /*<<stdlib.ml:395:7>>*/ (oc);
      /*<<stdlib.ml:395:7>>*/ return _l_ /*<<stdlib.ml:395:7>>*/ ;
    }
    catch(_m_){ /*<<stdlib.ml:395:38>>*/ return 0 /*<<stdlib.ml:395:38>>*/ ;}
    /*<<stdlib.ml:395:41>>*/ }
   function open_in_gen(mode, perm, name){
    var
     c =
        /*<<stdlib.ml:405:10>>*/  /*<<stdlib.ml:405:10>>*/ caml_ml_open_descriptor_in
         /*<<stdlib.ml:405:10>>*/ ( /*<<stdlib.ml:405:28>>*/ caml_sys_open
           /*<<stdlib.ml:405:28>>*/ (name, mode, perm));
     /*<<stdlib.ml:406:2>>*/  /*<<stdlib.ml:406:2>>*/ caml_ml_set_channel_name
      /*<<stdlib.ml:406:2>>*/ (c, name);
     /*<<stdlib.ml:406:2>>*/ return c /*<<stdlib.ml:406:2>>*/ ;
    /*<<stdlib.ml:407:3>>*/ }
   function open_in(name){
     /*<<stdlib.ml:410:2>>*/ return  /*<<stdlib.ml:410:2>>*/ open_in_gen
             /*<<stdlib.ml:410:2>>*/ (_e_, 0, name) /*<<stdlib.ml:410:45>>*/ ;
    /*<<stdlib.ml:410:45>>*/ }
   function open_in_bin(name){
     /*<<stdlib.ml:413:2>>*/ return  /*<<stdlib.ml:413:2>>*/ open_in_gen
             /*<<stdlib.ml:413:2>>*/ (_f_, 0, name) /*<<stdlib.ml:413:47>>*/ ;
    /*<<stdlib.ml:413:47>>*/ }
   function input(ic, s, ofs, len){
     /*<<stdlib.ml:421:2>>*/ if
     (0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
      /*<<stdlib.ml:423:7>>*/ return  /*<<stdlib.ml:423:7>>*/ caml_ml_input
              /*<<stdlib.ml:423:7>>*/ (ic, s, ofs, len) /*<<stdlib.ml:423:32>>*/ ;
     /*<<stdlib.ml:422:7>>*/ return  /*<<stdlib.ml:422:7>>*/ invalid_arg
             /*<<stdlib.ml:422:7>>*/ (cst_input) /*<<stdlib.ml:423:32>>*/ ;
    /*<<stdlib.ml:423:32>>*/ }
   function unsafe_really_input(ic, s, ofs, len){
    var ofs$0 = ofs, len$0 = len;
     /*<<stdlib.ml:426:2>>*/ for(;;){
     if(0 >= len$0)
       /*<<stdlib.ml:426:19>>*/ return 0 /*<<stdlib.ml:426:19>>*/ ;
     var
      r =
         /*<<stdlib.ml:427:12>>*/  /*<<stdlib.ml:427:12>>*/ caml_ml_input
          /*<<stdlib.ml:427:12>>*/ (ic, s, ofs$0, len$0);
      /*<<stdlib.ml:428:4>>*/ if(0 === r)
       /*<<stdlib.ml:429:9>>*/ throw  /*<<stdlib.ml:429:9>>*/ caml_maybe_attach_backtrace
              /*<<stdlib.ml:429:9>>*/ (End_of_file, 1);
     var len$1 = len$0 - r | 0, ofs$1 = ofs$0 + r | 0;
     ofs$0 = ofs$1;
     len$0 = len$1;
    }
    /*<<stdlib.ml:431:5>>*/ }
   function really_input(ic, s, ofs, len){
     /*<<stdlib.ml:434:2>>*/ if
     (0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
      /*<<stdlib.ml:436:7>>*/ return  /*<<stdlib.ml:436:7>>*/ unsafe_really_input
              /*<<stdlib.ml:436:7>>*/ (ic, s, ofs, len) /*<<stdlib.ml:436:39>>*/ ;
     /*<<stdlib.ml:435:7>>*/ return  /*<<stdlib.ml:435:7>>*/ invalid_arg
             /*<<stdlib.ml:435:7>>*/ (cst_really_input) /*<<stdlib.ml:436:39>>*/ ;
    /*<<stdlib.ml:436:39>>*/ }
   function really_input_string(ic, len){
    var
     s =
        /*<<stdlib.ml:439:10>>*/  /*<<stdlib.ml:439:10>>*/ caml_create_bytes
         /*<<stdlib.ml:439:10>>*/ (len);
     /*<<stdlib.ml:440:2>>*/  /*<<stdlib.ml:440:2>>*/ really_input
      /*<<stdlib.ml:440:2>>*/ (ic, s, 0, len);
    return caml_string_of_bytes(s) /*<<stdlib.ml:441:26>>*/ ;
    /*<<stdlib.ml:441:26>>*/ }
   function input_line(chan){
    function build_result(buf, pos, param){
     var pos$0 = pos, param$0 = param;
      /*<<stdlib.ml:446:23>>*/ for(;;){
      if(! param$0)
        /*<<stdlib.ml:447:10>>*/ return buf /*<<stdlib.ml:447:10>>*/ ;
      var
       tl = param$0[2],
       hd = param$0[1],
       len =
          /*<<stdlib.ml:449:6>>*/  /*<<stdlib.ml:449:6>>*/ caml_ml_bytes_length
           /*<<stdlib.ml:449:6>>*/ (hd);
       /*<<stdlib.ml:450:6>>*/  /*<<stdlib.ml:450:6>>*/ runtime.caml_blit_bytes
        /*<<stdlib.ml:450:6>>*/ (hd, 0, buf, pos$0 - len | 0, len);
      var pos$1 = pos$0 - len | 0;
      pos$0 = pos$1;
      param$0 = tl;
     }
     /*<<stdlib.ml:451:37>>*/ }
    var accu = 0, len = 0;
     /*<<stdlib.ml:453:4>>*/ for(;;){
     var
      n =
         /*<<stdlib.ml:453:12>>*/  /*<<stdlib.ml:453:12>>*/ runtime.caml_ml_input_scan_line
          /*<<stdlib.ml:453:12>>*/ (chan);
      /*<<stdlib.ml:454:4>>*/ if(0 === n){
      if(! accu)
        /*<<stdlib.ml:456:14>>*/ throw  /*<<stdlib.ml:456:14>>*/ caml_maybe_attach_backtrace
               /*<<stdlib.ml:456:14>>*/ (End_of_file, 1);
      var
       _k_ =
          /*<<stdlib.ml:457:14>>*/ build_result
           /*<<stdlib.ml:457:14>>*/ ( /*<<stdlib.ml:457:27>>*/ caml_create_bytes
             /*<<stdlib.ml:457:27>>*/ (len),
           len,
           accu);
     }
     else{
      if(0 >= n){
       var
        beg =
           /*<<stdlib.ml:467:16>>*/  /*<<stdlib.ml:467:16>>*/ caml_create_bytes
            /*<<stdlib.ml:467:16>>*/ (- n | 0);
        /*<<stdlib.ml:468:12>>*/  /*<<stdlib.ml:468:12>>*/ caml_ml_input
         /*<<stdlib.ml:468:12>>*/ (chan, beg, 0, - n | 0);
       var
        len$1 = len - n | 0,
        accu$0 =  /*<<stdlib.ml:469:11>>*/ [0, beg, accu];
       accu = accu$0;
       len = len$1;
       continue;
      }
      var
       res =
          /*<<stdlib.ml:459:16>>*/  /*<<stdlib.ml:459:16>>*/ caml_create_bytes
           /*<<stdlib.ml:459:16>>*/ (n - 1 | 0);
       /*<<stdlib.ml:460:13>>*/  /*<<stdlib.ml:460:13>>*/ caml_ml_input
        /*<<stdlib.ml:460:13>>*/ (chan, res, 0, n - 1 | 0);
       /*<<stdlib.ml:461:13>>*/  /*<<stdlib.ml:461:13>>*/ caml_ml_input_char
        /*<<stdlib.ml:461:13>>*/ (chan);
      if(accu)
       var
        len$0 = (len + n | 0) - 1 | 0,
        _k_ =
           /*<<stdlib.ml:465:50>>*/ build_result
            /*<<stdlib.ml:465:50>>*/ ( /*<<stdlib.ml:465:27>>*/ caml_create_bytes
              /*<<stdlib.ml:465:27>>*/ (len$0),
            len$0,
            [0, res, accu]);
      else
       var _k_ = res;
     }
      /*<<stdlib.ml:471:28>>*/ return  /*<<stdlib.ml:471:28>>*/ caml_string_of_bytes
              /*<<stdlib.ml:471:28>>*/ (_k_) /*<<stdlib.ml:471:39>>*/ ;
    }
    /*<<stdlib.ml:471:39>>*/ }
   function close_in_noerr(ic){
     /*<<stdlib.ml:480:24>>*/ try{
     var
      _i_ =
         /*<<stdlib.ml:480:29>>*/  /*<<stdlib.ml:480:29>>*/ caml_ml_close_channel
          /*<<stdlib.ml:480:29>>*/ (ic);
      /*<<stdlib.ml:480:29>>*/ return _i_ /*<<stdlib.ml:480:29>>*/ ;
    }
    catch(_j_){ /*<<stdlib.ml:480:51>>*/ return 0 /*<<stdlib.ml:480:51>>*/ ;}
    /*<<stdlib.ml:480:54>>*/ }
   function print_char(c){
     /*<<stdlib.ml:486:19>>*/ return  /*<<stdlib.ml:486:19>>*/ caml_ml_output_char
             /*<<stdlib.ml:486:19>>*/ (stdout, c) /*<<stdlib.ml:486:39>>*/ ;
    /*<<stdlib.ml:486:39>>*/ }
   function print_string(s){
     /*<<stdlib.ml:487:21>>*/ return  /*<<stdlib.ml:487:21>>*/ output_string
             /*<<stdlib.ml:487:21>>*/ (stdout, s) /*<<stdlib.ml:487:43>>*/ ;
    /*<<stdlib.ml:487:43>>*/ }
   function print_bytes(s){
     /*<<stdlib.ml:488:20>>*/ return  /*<<stdlib.ml:488:20>>*/ output_bytes
             /*<<stdlib.ml:488:20>>*/ (stdout, s) /*<<stdlib.ml:488:41>>*/ ;
    /*<<stdlib.ml:488:41>>*/ }
   function print_int(i){
     /*<<stdlib.ml:489:18>>*/ return  /*<<stdlib.ml:489:39>>*/ output_string
             /*<<stdlib.ml:489:39>>*/ (stdout, "" + i) /*<<stdlib.ml:489:56>>*/ ;
    /*<<stdlib.ml:489:56>>*/ }
   function print_float(f){
     /*<<stdlib.ml:490:20>>*/ return  /*<<stdlib.ml:490:41>>*/ output_string
             /*<<stdlib.ml:490:41>>*/ (stdout,
              /*<<stdlib.ml:490:41>>*/ string_of_float
               /*<<stdlib.ml:490:41>>*/ (f)) /*<<stdlib.ml:490:60>>*/ ;
    /*<<stdlib.ml:490:60>>*/ }
   function print_endline(s){
     /*<<stdlib.ml:492:2>>*/  /*<<stdlib.ml:492:2>>*/ output_string
      /*<<stdlib.ml:492:2>>*/ (stdout, s);
     /*<<stdlib.ml:492:26>>*/  /*<<stdlib.ml:492:26>>*/ caml_ml_output_char
      /*<<stdlib.ml:492:26>>*/ (stdout, 10);
     /*<<stdlib.ml:492:51>>*/ return  /*<<stdlib.ml:492:51>>*/ caml_ml_flush
             /*<<stdlib.ml:492:51>>*/ (stdout) /*<<stdlib.ml:492:63>>*/ ;
    /*<<stdlib.ml:492:63>>*/ }
   function print_newline(param){
     /*<<stdlib.ml:493:23>>*/  /*<<stdlib.ml:493:23>>*/ caml_ml_output_char
      /*<<stdlib.ml:493:23>>*/ (stdout, 10);
     /*<<stdlib.ml:493:48>>*/ return  /*<<stdlib.ml:493:48>>*/ caml_ml_flush
             /*<<stdlib.ml:493:48>>*/ (stdout) /*<<stdlib.ml:493:60>>*/ ;
    /*<<stdlib.ml:493:60>>*/ }
   function prerr_char(c){
     /*<<stdlib.ml:497:19>>*/ return  /*<<stdlib.ml:497:19>>*/ caml_ml_output_char
             /*<<stdlib.ml:497:19>>*/ (stderr, c) /*<<stdlib.ml:497:39>>*/ ;
    /*<<stdlib.ml:497:39>>*/ }
   function prerr_string(s){
     /*<<stdlib.ml:498:21>>*/ return  /*<<stdlib.ml:498:21>>*/ output_string
             /*<<stdlib.ml:498:21>>*/ (stderr, s) /*<<stdlib.ml:498:43>>*/ ;
    /*<<stdlib.ml:498:43>>*/ }
   function prerr_bytes(s){
     /*<<stdlib.ml:499:20>>*/ return  /*<<stdlib.ml:499:20>>*/ output_bytes
             /*<<stdlib.ml:499:20>>*/ (stderr, s) /*<<stdlib.ml:499:41>>*/ ;
    /*<<stdlib.ml:499:41>>*/ }
   function prerr_int(i){
     /*<<stdlib.ml:500:18>>*/ return  /*<<stdlib.ml:500:39>>*/ output_string
             /*<<stdlib.ml:500:39>>*/ (stderr, "" + i) /*<<stdlib.ml:500:56>>*/ ;
    /*<<stdlib.ml:500:56>>*/ }
   function prerr_float(f){
     /*<<stdlib.ml:501:20>>*/ return  /*<<stdlib.ml:501:41>>*/ output_string
             /*<<stdlib.ml:501:41>>*/ (stderr,
              /*<<stdlib.ml:501:41>>*/ string_of_float
               /*<<stdlib.ml:501:41>>*/ (f)) /*<<stdlib.ml:501:60>>*/ ;
    /*<<stdlib.ml:501:60>>*/ }
   function prerr_endline(s){
     /*<<stdlib.ml:503:2>>*/  /*<<stdlib.ml:503:2>>*/ output_string
      /*<<stdlib.ml:503:2>>*/ (stderr, s);
     /*<<stdlib.ml:503:26>>*/  /*<<stdlib.ml:503:26>>*/ caml_ml_output_char
      /*<<stdlib.ml:503:26>>*/ (stderr, 10);
     /*<<stdlib.ml:503:51>>*/ return  /*<<stdlib.ml:503:51>>*/ caml_ml_flush
             /*<<stdlib.ml:503:51>>*/ (stderr) /*<<stdlib.ml:503:63>>*/ ;
    /*<<stdlib.ml:503:63>>*/ }
   function prerr_newline(param){
     /*<<stdlib.ml:504:23>>*/  /*<<stdlib.ml:504:23>>*/ caml_ml_output_char
      /*<<stdlib.ml:504:23>>*/ (stderr, 10);
     /*<<stdlib.ml:504:48>>*/ return  /*<<stdlib.ml:504:48>>*/ caml_ml_flush
             /*<<stdlib.ml:504:48>>*/ (stderr) /*<<stdlib.ml:504:60>>*/ ;
    /*<<stdlib.ml:504:60>>*/ }
   function read_line(param){
     /*<<stdlib.ml:508:19>>*/  /*<<stdlib.ml:508:19>>*/ caml_ml_flush
      /*<<stdlib.ml:508:19>>*/ (stdout);
     /*<<stdlib.ml:314:12>>*/ return  /*<<stdlib.ml:314:12>>*/ input_line
             /*<<stdlib.ml:314:12>>*/ (stdin) /*<<stdlib.ml:508:49>>*/ ;
    /*<<stdlib.ml:508:49>>*/ }
   function read_int(param){
     /*<<stdlib.ml:509:18>>*/ return  /*<<stdlib.ml:509:18>>*/ caml_int_of_string
             /*<<stdlib.ml:509:18>>*/ ( /*<<stdlib.ml:509:31>>*/ read_line
               /*<<stdlib.ml:509:31>>*/ (0)) /*<<stdlib.ml:509:44>>*/ ;
    /*<<stdlib.ml:509:44>>*/ }
   function read_int_opt(param){
     /*<<stdlib.ml:510:22>>*/ return  /*<<stdlib.ml:510:39>>*/ int_of_string_opt
             /*<<stdlib.ml:510:39>>*/ ( /*<<stdlib.ml:510:39>>*/ read_line
               /*<<stdlib.ml:510:39>>*/ (0)) /*<<stdlib.ml:510:52>>*/ ;
    /*<<stdlib.ml:510:52>>*/ }
   function read_float(param){
     /*<<stdlib.ml:511:20>>*/ return  /*<<stdlib.ml:511:20>>*/ caml_float_of_string
             /*<<stdlib.ml:511:20>>*/ ( /*<<stdlib.ml:511:35>>*/ read_line
               /*<<stdlib.ml:511:35>>*/ (0)) /*<<stdlib.ml:511:48>>*/ ;
    /*<<stdlib.ml:511:48>>*/ }
   function read_float_opt(param){
     /*<<stdlib.ml:512:24>>*/ return  /*<<stdlib.ml:512:43>>*/ float_of_string_opt
             /*<<stdlib.ml:512:43>>*/ ( /*<<stdlib.ml:512:43>>*/ read_line
               /*<<stdlib.ml:512:43>>*/ (0)) /*<<stdlib.ml:512:56>>*/ ;
    /*<<stdlib.ml:512:56>>*/ }
   function string_of_format(param){
    var str = param[2];
     /*<<stdlib.ml:538:44>>*/ return str /*<<stdlib.ml:538:44>>*/ ;
    /*<<stdlib.ml:538:47>>*/ }
   function symbol$0(_h_, param){
    var
     str2 = param[2],
     fmt2 = param[1],
     str1 = _h_[2],
     fmt1 = _h_[1],
     s2 = "%," + str2;
     /*<<stdlib.ml:545:2>>*/ return [0,
             /*<<stdlib.ml:545:10>>*/ caml_call2
              /*<<stdlib.ml:545:10>>*/ (CamlinternalFormatBasics[3],
              fmt1,
              fmt2),
            str1 + s2] /*<<stdlib.ml:545:2>>*/ ;
    /*<<stdlib.ml:546:29>>*/ }
   var exit_function =  /*<<stdlib.ml:559:20>>*/ [0, flush_all];
   function at_exit(f){
     /*<<stdlib.ml:563:2>>*/ for(;;){
     var
      f_yet_to_run =  /*<<stdlib.ml:563:21>>*/ [0, 1],
      old_exit =
         /*<<stdlib.ml:564:2>>*/  /*<<stdlib.ml:564:2>>*/ caml_atomic_load
          /*<<stdlib.ml:564:2>>*/ (exit_function);
     let f_yet_to_run$0 = f_yet_to_run, old_exit$0 = old_exit;
     var
      new_exit =
        function(param){
          /*<<stdlib.ml:566:4>>*/ if(caml_atomic_cas(f_yet_to_run$0, 1, 0))
           /*<<stdlib.ml:566:59>>*/  /*<<stdlib.ml:566:59>>*/ caml_call1
            /*<<stdlib.ml:566:59>>*/ (f, 0);
          /*<<stdlib.ml:566:59>>*/ return  /*<<stdlib.ml:566:59>>*/ caml_call1
                  /*<<stdlib.ml:566:59>>*/ (old_exit$0, 0) /*<<stdlib.ml:567:15>>*/ ;
         /*<<stdlib.ml:567:15>>*/ },
      success = caml_atomic_cas(exit_function, old_exit, new_exit),
      _g_ =  /*<<stdlib.ml:570:2>>*/ 1 - success;
     if(! _g_)  /*<<stdlib.ml:570:2>>*/ return _g_ /*<<stdlib.ml:570:2>>*/ ;
    }
    /*<<stdlib.ml:570:31>>*/ }
   var
    do_domain_local_at_exit =
       /*<<stdlib.ml:572:30>>*/ [0,
       function(param){
         /*<<stdlib.ml:572:45>>*/ return 0 /*<<stdlib.ml:572:45>>*/ ;
        /*<<stdlib.ml:572:47>>*/ }];
   function do_at_exit(param){
     /*<<stdlib.ml:575:2>>*/  /*<<stdlib.ml:575:2>>*/ caml_call1
      /*<<stdlib.ml:575:2>>*/ (do_domain_local_at_exit[1], 0);
     /*<<stdlib.ml:575:2>>*/ return  /*<<stdlib.ml:575:2>>*/ caml_call1
             /*<<stdlib.ml:575:2>>*/ (caml_atomic_load(exit_function), 0) /*<<stdlib.ml:576:31>>*/ ;
    /*<<stdlib.ml:576:31>>*/ }
   function exit(retcode){
     /*<<stdlib.ml:579:2>>*/  /*<<stdlib.ml:579:2>>*/ do_at_exit
      /*<<stdlib.ml:579:2>>*/ (0);
     /*<<stdlib.ml:580:2>>*/ return  /*<<stdlib.ml:580:2>>*/ runtime.caml_sys_exit
             /*<<stdlib.ml:580:2>>*/ (retcode) /*<<stdlib.ml:580:18>>*/ ;
    /*<<stdlib.ml:580:18>>*/ }
    /*<<stdlib.ml:582:8>>*/  /*<<stdlib.ml:582:8>>*/ runtime.caml_register_named_value
     /*<<stdlib.ml:582:8>>*/ ("Pervasives.do_at_exit", do_at_exit);
   var
    Stdlib =
      [0,
       invalid_arg,
       failwith,
       Exit,
       Match_failure,
       Assert_failure,
       Invalid_argument,
       Failure,
       Not_found,
       Out_of_memory,
       Stack_overflow,
       Sys_error,
       End_of_file,
       Division_by_zero,
       Sys_blocked_io,
       Undefined_recursive_module,
       min,
       max,
       abs,
       2147483647,
       -2147483648,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       symbol_concat,
       char_of_int,
       string_of_bool,
       bool_of_string_opt,
       bool_of_string,
       string_of_int,
       int_of_string_opt,
       string_of_float,
       float_of_string_opt,
       symbol,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int_opt,
       read_int,
       read_float_opt,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       caml_ml_flush,
       flush_all,
       caml_ml_output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       caml_ml_output_char,
       runtime.caml_ml_output_int,
       output_value,
       runtime.caml_ml_seek_out,
       runtime.caml_ml_pos_out,
       caml_ml_channel_size,
       close_out,
       close_out_noerr,
       caml_ml_set_binary_mode,
       open_in,
       open_in_bin,
       open_in_gen,
       caml_ml_input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       caml_ml_input_char,
       runtime.caml_ml_input_int,
       runtime.caml_input_value,
       runtime.caml_ml_seek_in,
       runtime.caml_ml_pos_in,
       caml_ml_channel_size,
       caml_ml_close_channel,
       close_in_noerr,
       caml_ml_set_binary_mode,
       [0,
        runtime.caml_ml_seek_out_64,
        runtime.caml_ml_pos_out_64,
        caml_ml_channel_size_64,
        runtime.caml_ml_seek_in_64,
        runtime.caml_ml_pos_in_64,
        caml_ml_channel_size_64],
       string_of_format,
       symbol$0,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit,
       do_domain_local_at_exit];
   runtime.caml_register_global(45, Stdlib, "Stdlib");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Either
(function(globalThis){
   "use strict";
   var runtime =  /*<<?>>*/ globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function left(v){
     /*<<either.ml:18:13>>*/ return [0, v] /*<<either.ml:18:13>>*/ ;
    /*<<either.ml:18:19>>*/ }
   function right(v){
     /*<<either.ml:19:14>>*/ return [1, v] /*<<either.ml:19:14>>*/ ;
    /*<<either.ml:19:21>>*/ }
   function is_left(param){
     /*<<either.ml:21:14>>*/ return 0 === param[0] ? 1 : 0 /*<<either.ml:23:18>>*/ ;
    /*<<either.ml:23:18>>*/ }
   function is_right(param){
     /*<<either.ml:25:15>>*/ return 0 === param[0] ? 0 : 1 /*<<either.ml:27:17>>*/ ;
    /*<<either.ml:27:17>>*/ }
   function find_left(param){
     /*<<either.ml:29:16>>*/ if(0 !== param[0])
      /*<<either.ml:31:13>>*/ return 0 /*<<either.ml:31:13>>*/ ;
    var v = param[1];
     /*<<either.ml:30:12>>*/ return [0, v] /*<<either.ml:30:12>>*/ ;
    /*<<either.ml:31:17>>*/ }
   function find_right(param){
     /*<<either.ml:33:17>>*/ if(0 === param[0])
      /*<<either.ml:34:12>>*/ return 0 /*<<either.ml:34:12>>*/ ;
    var v = param[1];
     /*<<either.ml:35:13>>*/ return [0, v] /*<<either.ml:35:13>>*/ ;
    /*<<either.ml:35:19>>*/ }
   function map_left(f, e){
     /*<<either.ml:37:13>>*/ if(0 !== e[0])
      /*<<either.ml:39:18>>*/ return e /*<<either.ml:39:18>>*/ ;
    var v = e[1];
     /*<<either.ml:38:12>>*/ return [0,
             /*<<either.ml:38:17>>*/ caml_call1 /*<<either.ml:38:17>>*/ (f, v)] /*<<either.ml:38:12>>*/ ;
    /*<<either.ml:39:19>>*/ }
   function map_right(f, e){
     /*<<either.ml:41:14>>*/ if(0 === e[0])
      /*<<either.ml:42:17>>*/ return e /*<<either.ml:42:17>>*/ ;
    var v = e[1];
     /*<<either.ml:43:13>>*/ return [1,
             /*<<either.ml:43:19>>*/ caml_call1 /*<<either.ml:43:19>>*/ (f, v)] /*<<either.ml:43:13>>*/ ;
    /*<<either.ml:43:24>>*/ }
   function map(left, right, param){
     /*<<either.ml:45:8>>*/ if(0 === param[0]){
     var v = param[1];
      /*<<either.ml:46:12>>*/ return [0,
              /*<<either.ml:46:17>>*/ caml_call1
               /*<<either.ml:46:17>>*/ (left, v)] /*<<either.ml:46:12>>*/ ;
    }
    var v$0 = param[1];
     /*<<either.ml:47:13>>*/ return [1,
             /*<<either.ml:47:19>>*/ caml_call1
              /*<<either.ml:47:19>>*/ (right, v$0)] /*<<either.ml:47:13>>*/ ;
    /*<<either.ml:47:28>>*/ }
   function fold(left, right, param){
     /*<<either.ml:49:9>>*/ if(0 === param[0]){
     var v = param[1];
      /*<<either.ml:50:12>>*/ return  /*<<either.ml:50:12>>*/ caml_call1
              /*<<either.ml:50:12>>*/ (left, v) /*<<either.ml:51:20>>*/ ;
    }
    var v$0 = param[1];
     /*<<either.ml:51:13>>*/ return  /*<<either.ml:51:13>>*/ caml_call1
             /*<<either.ml:51:13>>*/ (right, v$0) /*<<either.ml:51:20>>*/ ;
    /*<<either.ml:51:20>>*/ }
   function equal(left, right, e1, e2){
     /*<<either.ml:57:31>>*/ if(0 === e1[0]){
     var v1 = e1[1];
     if(0 === e2[0]){
      var v2 = e2[1];
       /*<<either.ml:58:22>>*/ return  /*<<either.ml:58:22>>*/ caml_call2
               /*<<either.ml:58:22>>*/ (left, v1, v2) /*<<either.ml:60:44>>*/ ;
     }
    }
    else{
     var v1$0 = e1[1];
     if(0 !== e2[0]){
      var v2$0 = e2[1];
       /*<<either.ml:59:24>>*/ return  /*<<either.ml:59:24>>*/ caml_call2
               /*<<either.ml:59:24>>*/ (right, v1$0, v2$0) /*<<either.ml:60:44>>*/ ;
     }
    }
     /*<<either.ml:60:39>>*/ return 0 /*<<either.ml:60:39>>*/ ;
    /*<<either.ml:60:44>>*/ }
   function compare(left, right, e1, e2){
     /*<<either.ml:62:33>>*/ if(0 === e1[0]){
     var v1 = e1[1];
     if(0 !== e2[0])
       /*<<either.ml:65:21>>*/ return -1 /*<<either.ml:65:21>>*/ ;
     var v2 = e2[1];
      /*<<either.ml:63:22>>*/ return  /*<<either.ml:63:22>>*/ caml_call2
              /*<<either.ml:63:22>>*/ (left, v1, v2) /*<<either.ml:66:22>>*/ ;
    }
    var v1$0 = e1[1];
    if(0 === e2[0])
      /*<<either.ml:66:21>>*/ return 1 /*<<either.ml:66:21>>*/ ;
    var v2$0 = e2[1];
     /*<<either.ml:64:24>>*/ return  /*<<either.ml:64:24>>*/ caml_call2
             /*<<either.ml:64:24>>*/ (right, v1$0, v2$0) /*<<either.ml:66:22>>*/ ;
    /*<<either.ml:66:22>>*/ }
   var
    Stdlib_Either =
      [0,
       left,
       right,
       is_left,
       is_right,
       find_left,
       find_right,
       map_left,
       map_right,
       map,
       fold,
       fold,
       fold,
       equal,
       compare];
   runtime.caml_register_global(0, Stdlib_Either, "Stdlib__Either");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Sys
//# unitInfo: Requires: Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    ocaml_version = "5.2.0",
    ocaml_release = [0, 5, 2, 0, 0],
    Stdlib = global_data.Stdlib,
    executable_name =
       /*<<sys.ml.in:36:22>>*/  /*<<sys.ml.in:36:22>>*/ runtime.caml_sys_executable_name
        /*<<sys.ml.in:36:22>>*/ (0),
    os_type =
       /*<<sys.ml.in:37:22>>*/ runtime.caml_sys_get_config
         /*<<sys.ml.in:37:22>>*/ (0)
       [1],
    backend_type = [0, "js_of_ocaml"],
    unix = runtime.caml_sys_const_ostype_unix(0),
    win32 = runtime.caml_sys_const_ostype_win32(0),
    cygwin = runtime.caml_sys_const_ostype_cygwin(0),
    max_array_length = runtime.caml_sys_const_max_wosize(0),
    max_floatarray_length = max_array_length / 2 | 0,
    max_string_length = (4 * max_array_length | 0) - 1 | 0;
   function getenv_opt(s){
     /*<<sys.ml.in:60:2>>*/ try{
     var
      _d_ =
         /*<<sys.ml.in:60:6>>*/ [0,
          /*<<sys.ml.in:60:11>>*/ runtime.caml_sys_getenv
           /*<<sys.ml.in:60:11>>*/ (s)];
      /*<<sys.ml.in:60:6>>*/ return _d_ /*<<sys.ml.in:60:6>>*/ ;
    }
    catch(_e_){
     var _c_ = caml_wrap_exception(_e_);
     if(_c_ === Stdlib[8])
       /*<<sys.ml.in:61:20>>*/ return 0 /*<<sys.ml.in:61:20>>*/ ;
     throw caml_maybe_attach_backtrace(_c_, 0);
    }
    /*<<sys.ml.in:61:24>>*/ }
   var interactive =  /*<<sys.ml.in:72:18>>*/ [0, 0];
   function set_signal(sig_num, sig_beh){
     /*<<sys.ml.in:82:33>>*/ return 0 /*<<sys.ml.in:82:39>>*/ ;
    /*<<sys.ml.in:82:63>>*/ }
   var
    Break =
       /*<<sys.ml.in:113:0>>*/ [248,
       "Stdlib.Sys.Break",
       runtime.caml_fresh_oo_id(0)];
   function catch_break(on){
     /*<<sys.ml.in:116:2>>*/ return on ? 0 : 0 /*<<sys.ml.in:119:36>>*/ ;
    /*<<sys.ml.in:119:36>>*/ }
   function Make(_b_, _a_){
     /*<<sys.ml.in:163:70>>*/ return [0, 1] /*<<sys.ml.in:163:70>>*/ ;
   }
   var
    Immediate64 =  /*<<sys.ml.in:155:21>>*/ [0, Make],
    Stdlib_Sys =
      [0,
       executable_name,
       getenv_opt,
       interactive,
       os_type,
       backend_type,
       unix,
       win32,
       cygwin,
       32,
       32,
       0,
       max_string_length,
       max_array_length,
       max_floatarray_length,
       set_signal,
       -1,
       -2,
       -3,
       -4,
       -5,
       -6,
       -7,
       -8,
       -9,
       -10,
       -11,
       -12,
       -13,
       -14,
       -15,
       -16,
       -17,
       -18,
       -19,
       -20,
       -21,
       -22,
       -23,
       -24,
       -25,
       -26,
       -27,
       -28,
       Break,
       catch_break,
       ocaml_version,
       0,
       ocaml_release,
       runtime.caml_ml_enable_runtime_warnings,
       runtime.caml_ml_runtime_warnings_enabled,
       Immediate64];
   runtime.caml_register_global(4, Stdlib_Sys, "Stdlib__Sys");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Obj
//# unitInfo: Requires: Stdlib, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst_Obj_extension_constructor$1 =  /*<<?>>*/ "Obj.extension_constructor",
    caml_check_bound =  /*<<?>>*/ runtime.caml_check_bound,
    caml_obj_tag =  /*<<?>>*/ runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys;
   function is_block(a){
     /*<<obj.ml:26:34>>*/ return 1 - (typeof a === "number" ? 1 : 0);
    /*<<obj.ml:26:48>>*/ }
   function double_field(x, i){
     /*<<obj.ml:35:40>>*/ return caml_check_bound(x, i)[1 + i] /*<<obj.ml:35:40>>*/ ;
    /*<<obj.ml:35:77>>*/ }
   function set_double_field(x, i, v){
     /*<<obj.ml:37:2>>*/ caml_check_bound(x, i)[1 + i] = v;
     /*<<obj.ml:37:2>>*/ return 0 /*<<obj.ml:37:2>>*/ ;
    /*<<obj.ml:37:41>>*/ }
   var
    cst_Obj_extension_constructor = cst_Obj_extension_constructor$1,
    cst_Obj_extension_constructor$0 = cst_Obj_extension_constructor$1;
   function of_val(x){
    a:
    {
      /*<<obj.ml:77:9>>*/ if
      ( /*<<obj.ml:77:9>>*/ is_block /*<<obj.ml:77:9>>*/ (x)
       &&
         /*<<obj.ml:77:25>>*/ caml_obj_tag /*<<obj.ml:77:25>>*/ (x) !== 248
        && 1 <= x.length - 1){
      var slot = x[1];
      break a;
     }
     var slot = x;
    }
    a:
    {
      /*<<obj.ml:81:9>>*/ if
      ( /*<<obj.ml:81:9>>*/ is_block /*<<obj.ml:81:9>>*/ (slot)
       &&
         /*<<obj.ml:81:28>>*/ caml_obj_tag /*<<obj.ml:81:28>>*/ (slot) === 248){var name = slot[1]; break a;}
     var
      name =
         /*<<obj.ml:82:11>>*/ caml_call1
          /*<<obj.ml:82:11>>*/ (Stdlib[1], cst_Obj_extension_constructor$0);
    }
    return  /*<<obj.ml:84:9>>*/ caml_obj_tag /*<<obj.ml:84:9>>*/ (name)
            === 252
            ? slot
            :  /*<<obj.ml:85:11>>*/ caml_call1
               /*<<obj.ml:85:11>>*/ (Stdlib[1], cst_Obj_extension_constructor) /*<<obj.ml:85:50>>*/ ;
    /*<<obj.ml:85:50>>*/ }
   function name(slot){
     /*<<obj.ml:88:5>>*/ return slot[1] /*<<obj.ml:88:9>>*/ ;
    /*<<obj.ml:88:30>>*/ }
   function id(slot){
     /*<<obj.ml:91:5>>*/ return slot[2] /*<<obj.ml:91:9>>*/ ;
    /*<<obj.ml:91:30>>*/ }
   var
    Extension_constructor =  /*<<obj.ml:72:0>>*/ [0, of_val, name, id],
    max_ephe_length = Stdlib_Sys[13] - 2 | 0,
    cst_Obj_Ephemeron_create = "Obj.Ephemeron.create",
    cst_Obj_Ephemeron_get_key = "Obj.Ephemeron.get_key",
    cst_Obj_Ephemeron_get_key_copy = "Obj.Ephemeron.get_key_copy",
    cst_Obj_Ephemeron_set_key = "Obj.Ephemeron.set_key",
    cst_Obj_Ephemeron_unset_key = "Obj.Ephemeron.unset_key",
    cst_Obj_Ephemeron_check_key = "Obj.Ephemeron.check_key",
    cst_Obj_Ephemeron_blit_key = "Obj.Ephemeron.blit_key";
   function create(l){
    var _f_ = 0 <= l ? 1 : 0, _g_ = _f_ ? l <= max_ephe_length ? 1 : 0 : _f_;
    if(1 - _g_)
      /*<<obj.ml:106:6>>*/  /*<<obj.ml:106:6>>*/ caml_call1
       /*<<obj.ml:106:6>>*/ (Stdlib[1], cst_Obj_Ephemeron_create);
     /*<<obj.ml:107:4>>*/ return  /*<<obj.ml:107:4>>*/ runtime.caml_ephe_create
             /*<<obj.ml:107:4>>*/ (l) /*<<obj.ml:107:12>>*/ ;
    /*<<obj.ml:107:12>>*/ }
   function length(x){
     /*<<obj.ml:109:17>>*/ return x.length - 3 | 0;
    /*<<obj.ml:109:49>>*/ }
   function raise_if_invalid_offset(e, o, msg){
    var
     _c_ = 0 <= o ? 1 : 0,
     _d_ =
       _c_
        ? o <  /*<<obj.ml:112:26>>*/ length /*<<obj.ml:112:26>>*/ (e) ? 1 : 0
        : _c_,
     _e_ = 1 - _d_;
    return _e_
            ?  /*<<obj.ml:113:6>>*/ caml_call1
               /*<<obj.ml:113:6>>*/ (Stdlib[1], msg)
            : _e_ /*<<obj.ml:113:21>>*/ ;
    /*<<obj.ml:113:21>>*/ }
   function get_key(e, o){
     /*<<obj.ml:117:4>>*/  /*<<obj.ml:117:4>>*/ raise_if_invalid_offset
      /*<<obj.ml:117:4>>*/ (e, o, cst_Obj_Ephemeron_get_key);
     /*<<obj.ml:118:4>>*/ return  /*<<obj.ml:118:4>>*/ runtime.caml_ephe_get_key
             /*<<obj.ml:118:4>>*/ (e, o) /*<<obj.ml:118:15>>*/ ;
    /*<<obj.ml:118:15>>*/ }
   function get_key_copy(e, o){
     /*<<obj.ml:122:4>>*/  /*<<obj.ml:122:4>>*/ raise_if_invalid_offset
      /*<<obj.ml:122:4>>*/ (e, o, cst_Obj_Ephemeron_get_key_copy);
     /*<<obj.ml:123:4>>*/ return  /*<<obj.ml:123:4>>*/ runtime.caml_ephe_get_key_copy
             /*<<obj.ml:123:4>>*/ (e, o) /*<<obj.ml:123:20>>*/ ;
    /*<<obj.ml:123:20>>*/ }
   function set_key(e, o, x){
     /*<<obj.ml:127:4>>*/  /*<<obj.ml:127:4>>*/ raise_if_invalid_offset
      /*<<obj.ml:127:4>>*/ (e, o, cst_Obj_Ephemeron_set_key);
     /*<<obj.ml:128:4>>*/ return  /*<<obj.ml:128:4>>*/ runtime.caml_ephe_set_key
             /*<<obj.ml:128:4>>*/ (e, o, x) /*<<obj.ml:128:17>>*/ ;
    /*<<obj.ml:128:17>>*/ }
   function unset_key(e, o){
     /*<<obj.ml:132:4>>*/  /*<<obj.ml:132:4>>*/ raise_if_invalid_offset
      /*<<obj.ml:132:4>>*/ (e, o, cst_Obj_Ephemeron_unset_key);
     /*<<obj.ml:133:4>>*/ return  /*<<obj.ml:133:4>>*/ runtime.caml_ephe_unset_key
             /*<<obj.ml:133:4>>*/ (e, o) /*<<obj.ml:133:17>>*/ ;
    /*<<obj.ml:133:17>>*/ }
   function check_key(e, o){
     /*<<obj.ml:137:4>>*/  /*<<obj.ml:137:4>>*/ raise_if_invalid_offset
      /*<<obj.ml:137:4>>*/ (e, o, cst_Obj_Ephemeron_check_key);
     /*<<obj.ml:138:4>>*/ return  /*<<obj.ml:138:4>>*/ runtime.caml_ephe_check_key
             /*<<obj.ml:138:4>>*/ (e, o) /*<<obj.ml:138:17>>*/ ;
    /*<<obj.ml:138:17>>*/ }
   function blit_key(e1, o1, e2, o2, l){
     /*<<obj.ml:144:4>>*/ if
     (0 <= l
      &&
       0 <= o1
       &&
        ( /*<<obj.ml:144:31>>*/ length /*<<obj.ml:144:31>>*/ (e1) - l | 0)
        >= o1
        &&
         0 <= o2
         &&
          ( /*<<obj.ml:145:25>>*/ length /*<<obj.ml:145:25>>*/ (e2) - l | 0)
          >= o2){
     var
      _a_ = 0 !== l ? 1 : 0,
      _b_ =
        _a_
         ?  /*<<obj.ml:147:24>>*/ runtime.caml_ephe_blit_key
            /*<<obj.ml:147:24>>*/ (e1, o1, e2, o2, l)
         : _a_;
      /*<<obj.ml:147:24>>*/ return _b_ /*<<obj.ml:147:24>>*/ ;
    }
     /*<<obj.ml:146:9>>*/ return  /*<<obj.ml:146:9>>*/ caml_call1
             /*<<obj.ml:146:9>>*/ (Stdlib[1], cst_Obj_Ephemeron_blit_key) /*<<obj.ml:147:46>>*/ ;
    /*<<obj.ml:147:46>>*/ }
   var
    Stdlib_Obj =
      [0,
       is_block,
       double_field,
       set_double_field,
       0,
       243,
       244,
       245,
       246,
       247,
       248,
       249,
       250,
       251,
       251,
       252,
       253,
       254,
       255,
       1000,
       1001,
       1002,
       Extension_constructor,
       [0,
        create,
        length,
        get_key,
        get_key_copy,
        set_key,
        unset_key,
        check_key,
        blit_key,
        runtime.caml_ephe_get_data,
        runtime.caml_ephe_get_data_copy,
        runtime.caml_ephe_set_data,
        runtime.caml_ephe_unset_data,
        runtime.caml_ephe_check_data,
        runtime.caml_ephe_blit_data,
        max_ephe_length]];
   runtime.caml_register_global(11, Stdlib_Obj, "Stdlib__Obj");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Type
//# unitInfo: Requires: Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var runtime =  /*<<?>>*/ globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Obj = global_data.Stdlib__Obj,
    cst_Id = "Id",
    _a_ = [0, 0];
   function make(param){
    var
     Id =  /*<<type.ml:32:43>>*/ [248, cst_Id, runtime.caml_fresh_oo_id(0)];
     /*<<type.ml:32:12>>*/ return [0, Id] /*<<type.ml:32:12>>*/ ;
    /*<<type.ml:32:57>>*/ }
   function uid(A){
    var
     _b_ =
        /*<<type.ml:35:33>>*/  /*<<type.ml:35:33>>*/ caml_call1
         /*<<type.ml:35:33>>*/ (Stdlib_Obj[22][1], A[1]);
     /*<<type.ml:35:33>>*/ return  /*<<type.ml:35:33>>*/ caml_call1
             /*<<type.ml:35:33>>*/ (Stdlib_Obj[22][3], _b_) /*<<type.ml:35:72>>*/ ;
    /*<<type.ml:35:72>>*/ }
   function provably_equal(A, B){
     /*<<type.ml:40:4>>*/ return A[1] === B[1] ? _a_ : 0 /*<<type.ml:40:50>>*/ ;
    /*<<type.ml:40:50>>*/ }
   var
    Id =  /*<<type.ml:22:12>>*/ [0, make, uid, provably_equal],
    Stdlib_Type = [0, Id];
   runtime.caml_register_global(3, Stdlib_Type, "Stdlib__Type");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Atomic
(function(globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_atomic_exchange =  /*<<?>>*/ runtime.caml_atomic_exchange,
    caml_atomic_fetch_add =  /*<<?>>*/ runtime.caml_atomic_fetch_add;
   function set(r, x){
     /*<<atomic.ml:25:14>>*/ caml_atomic_exchange(r, x);
    return 0;
    /*<<atomic.ml:25:35>>*/ }
   function incr(r){
     /*<<atomic.ml:26:13>>*/ caml_atomic_fetch_add(r, 1);
    return 0;
    /*<<atomic.ml:26:39>>*/ }
   function decr(r){
     /*<<atomic.ml:27:13>>*/ caml_atomic_fetch_add(r, -1);
    return 0;
    /*<<atomic.ml:27:42>>*/ }
   var
    Stdlib_Atomic =
      [0,
       function(_a_){
         /*<<atomic.ml:17:0>>*/ return [0, _a_] /*<<atomic.ml:17:0>>*/ ;
       },
       runtime.caml_atomic_make_contended,
       runtime.caml_atomic_load,
       set,
       caml_atomic_exchange,
       runtime.caml_atomic_cas,
       caml_atomic_fetch_add,
       incr,
       decr];
   runtime.caml_register_global(0, Stdlib_Atomic, "Stdlib__Atomic");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: CamlinternalLazy
//# unitInfo: Requires: Stdlib, Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_lazy_update_to_forward =
       /*<<?>>*/ runtime.caml_lazy_update_to_forward,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Obj = global_data.Stdlib__Obj,
    Undefined =
       /*<<camlinternalLazy.ml:20:0>>*/ [248,
       "CamlinternalLazy.Undefined",
       runtime.caml_fresh_oo_id(0)];
   function force_gen_lazy_block(only_val, blk){
     /*<<camlinternalLazy.ml:72:2>>*/ if
     (0
      !==
        /*<<camlinternalLazy.ml:72:8>>*/ runtime.caml_lazy_update_to_forcing
         /*<<camlinternalLazy.ml:72:8>>*/ (blk))
      /*<<camlinternalLazy.ml:75:9>>*/ throw  /*<<camlinternalLazy.ml:75:9>>*/ caml_maybe_attach_backtrace
             /*<<camlinternalLazy.ml:75:9>>*/ (Undefined, 1);
    if(only_val){
     var closure$0 =  /*<<camlinternalLazy.ml:61:25>>*/ blk[1];
      /*<<camlinternalLazy.ml:62:2>>*/ blk[1] = 0;
     var
      result$0 =
         /*<<camlinternalLazy.ml:63:15>>*/  /*<<camlinternalLazy.ml:63:15>>*/ caml_call1
          /*<<camlinternalLazy.ml:63:15>>*/ (closure$0, 0);
      /*<<camlinternalLazy.ml:64:2>>*/ blk[1] = result$0;
      /*<<camlinternalLazy.ml:65:2>>*/  /*<<camlinternalLazy.ml:65:2>>*/ caml_lazy_update_to_forward
       /*<<camlinternalLazy.ml:65:2>>*/ (blk);
      /*<<camlinternalLazy.ml:65:2>>*/ return result$0 /*<<camlinternalLazy.ml:65:2>>*/ ;
    }
    var closure =  /*<<camlinternalLazy.ml:46:25>>*/ blk[1];
     /*<<camlinternalLazy.ml:47:2>>*/ blk[1] = 0;
     /*<<camlinternalLazy.ml:47:2>>*/ try{
     var
      result =
         /*<<camlinternalLazy.ml:49:17>>*/  /*<<camlinternalLazy.ml:49:17>>*/ caml_call1
          /*<<camlinternalLazy.ml:49:17>>*/ (closure, 0);
      /*<<camlinternalLazy.ml:50:4>>*/ blk[1] = result;
      /*<<camlinternalLazy.ml:51:4>>*/  /*<<camlinternalLazy.ml:51:4>>*/ caml_lazy_update_to_forward
       /*<<camlinternalLazy.ml:51:4>>*/ (blk);
      /*<<camlinternalLazy.ml:51:4>>*/ return result /*<<camlinternalLazy.ml:51:4>>*/ ;
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
      /*<<camlinternalLazy.ml:54:4>>*/ blk[1] =
      function(param){
        /*<<camlinternalLazy.ml:54:43>>*/ throw  /*<<camlinternalLazy.ml:54:43>>*/ caml_maybe_attach_backtrace
               /*<<camlinternalLazy.ml:54:43>>*/ (e, 0);
       /*<<camlinternalLazy.ml:54:50>>*/ };
      /*<<camlinternalLazy.ml:55:4>>*/  /*<<camlinternalLazy.ml:55:4>>*/ runtime.caml_lazy_reset_to_lazy
       /*<<camlinternalLazy.ml:55:4>>*/ (blk);
      /*<<camlinternalLazy.ml:56:4>>*/ throw  /*<<camlinternalLazy.ml:56:4>>*/ caml_maybe_attach_backtrace
             /*<<camlinternalLazy.ml:56:4>>*/ (e, 0);
    }
    /*<<camlinternalLazy.ml:75:24>>*/ }
   function force_lazy_block(blk){
     /*<<camlinternalLazy.ml:78:27>>*/ return  /*<<camlinternalLazy.ml:78:27>>*/ force_gen_lazy_block
             /*<<camlinternalLazy.ml:78:27>>*/ (0, blk) /*<<camlinternalLazy.ml:78:67>>*/ ;
    /*<<camlinternalLazy.ml:78:67>>*/ }
   function force_gen(only_val, lzv){
    var
     t =
        /*<<camlinternalLazy.ml:99:10>>*/  /*<<camlinternalLazy.ml:99:10>>*/ runtime.caml_obj_tag
         /*<<camlinternalLazy.ml:99:10>>*/ (lzv);
    if(t === Stdlib_Obj[12])
      /*<<camlinternalLazy.ml:101:13>>*/ return lzv[1] /*<<camlinternalLazy.ml:101:13>>*/ ;
    if(t === Stdlib_Obj[6])
      /*<<camlinternalLazy.ml:103:35>>*/ throw  /*<<camlinternalLazy.ml:103:35>>*/ caml_maybe_attach_backtrace
             /*<<camlinternalLazy.ml:103:35>>*/ (Undefined, 1);
    return t !== Stdlib_Obj[8]
            ? lzv
            :  /*<<camlinternalLazy.ml:105:7>>*/ force_gen_lazy_block
               /*<<camlinternalLazy.ml:105:7>>*/ (only_val, lzv) /*<<camlinternalLazy.ml:105:41>>*/ ;
    /*<<camlinternalLazy.ml:105:41>>*/ }
   var CamlinternalLazy = [0, Undefined, force_lazy_block, force_gen];
   runtime.caml_register_global(2, CamlinternalLazy, "CamlinternalLazy");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Lazy
//# unitInfo: Requires: CamlinternalLazy, Stdlib, Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_obj_tag =  /*<<?>>*/ runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Undefined = CamlinternalLazy[1];
   function force_val(l){
     /*<<lazy.ml:56:18>>*/ return  /*<<lazy.ml:56:18>>*/ caml_call2
             /*<<lazy.ml:56:18>>*/ (CamlinternalLazy[3], 1, l) /*<<lazy.ml:56:61>>*/ ;
    /*<<lazy.ml:56:61>>*/ }
   function from_fun(f){
    var
     x =
        /*<<lazy.ml:59:10>>*/  /*<<lazy.ml:59:10>>*/ runtime.caml_obj_block
         /*<<lazy.ml:59:10>>*/ (Stdlib_Obj[8], 1);
     /*<<lazy.ml:60:2>>*/ x[1] = f;
     /*<<lazy.ml:60:2>>*/ return x /*<<lazy.ml:60:2>>*/ ;
    /*<<lazy.ml:61:22>>*/ }
   function from_val(v){
    var
     t =
        /*<<lazy.ml:64:10>>*/  /*<<lazy.ml:64:10>>*/ caml_obj_tag
         /*<<lazy.ml:64:10>>*/ (v);
    if
     (t !== Stdlib_Obj[12]
      && t !== Stdlib_Obj[8] && t !== Stdlib_Obj[6] && t !== Stdlib_Obj[16])
      /*<<lazy.ml:69:5>>*/ return v /*<<lazy.ml:69:5>>*/ ;
     /*<<lazy.ml:66:52>>*/ return  /*<<lazy.ml:66:52>>*/ runtime.caml_lazy_make_forward
             /*<<lazy.ml:66:52>>*/ (v) /*<<lazy.ml:70:5>>*/ ;
    /*<<lazy.ml:70:5>>*/ }
   function is_val(l){
    var _i_ =  /*<<lazy.ml:72:26>>*/ Stdlib_Obj[8];
     /*<<lazy.ml:72:26>>*/ return  /*<<lazy.ml:72:26>>*/ caml_obj_tag
              /*<<lazy.ml:72:26>>*/ (l)
            !== _i_
            ? 1
            : 0 /*<<lazy.ml:72:26>>*/ ;
    /*<<lazy.ml:72:62>>*/ }
   function map(f, x){
     /*<<lazy.ml:75:2>>*/ return [246,
            function(_f_){
             var _g_ = caml_obj_tag(x);
             a:
             if(250 === _g_)
              var _h_ = x[1];
             else{
              if(246 !== _g_ && 244 !== _g_){var _h_ = x; break a;}
              var _h_ = caml_call1(CamlinternalLazy[2], x);
             }
              /*<<lazy.ml:75:10>>*/ return  /*<<lazy.ml:75:10>>*/ caml_call1
                      /*<<lazy.ml:75:10>>*/ (f, _h_) /*<<lazy.ml:75:10>>*/ ;
            }] /*<<lazy.ml:75:7>>*/ ;
    /*<<lazy.ml:75:20>>*/ }
   function map_val(f, x){
     /*<<lazy.ml:78:2>>*/ if
     (!  /*<<lazy.ml:78:5>>*/ is_val /*<<lazy.ml:78:5>>*/ (x))
      /*<<lazy.ml:80:12>>*/ return [246,
             function(_c_){
              var _d_ = caml_obj_tag(x);
              a:
              if(250 === _d_)
               var _e_ = x[1];
              else{
               if(246 !== _d_ && 244 !== _d_){var _e_ = x; break a;}
               var _e_ = caml_call1(CamlinternalLazy[2], x);
              }
               /*<<lazy.ml:80:15>>*/ return  /*<<lazy.ml:80:15>>*/ caml_call1
                       /*<<lazy.ml:80:15>>*/ (f, _e_) /*<<lazy.ml:80:15>>*/ ;
             }] /*<<lazy.ml:80:12>>*/ ;
    var _a_ = caml_obj_tag(x);
    a:
    if(250 === _a_)
     var _b_ = x[1];
    else{
     if(246 !== _a_ && 244 !== _a_){var _b_ = x; break a;}
     var _b_ = caml_call1(CamlinternalLazy[2], x);
    }
     /*<<lazy.ml:79:16>>*/ return  /*<<lazy.ml:79:16>>*/ from_val
             /*<<lazy.ml:79:16>>*/ ( /*<<lazy.ml:79:16>>*/ caml_call1
               /*<<lazy.ml:79:16>>*/ (f, _b_)) /*<<lazy.ml:80:25>>*/ ;
    /*<<lazy.ml:80:25>>*/ }
   var
    Stdlib_Lazy =
      [0, Undefined, map, is_val, from_val, map_val, from_fun, force_val];
   runtime.caml_register_global(2, Stdlib_Lazy, "Stdlib__Lazy");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Seq
//# unitInfo: Requires: CamlinternalLazy, Stdlib, Stdlib__Atomic, Stdlib__Lazy
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Stdlib_Atomic = global_data.Stdlib__Atomic,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib = global_data.Stdlib,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    cst_Seq_init = "Seq.init",
    cst_Seq_take = "Seq.take",
    cst_Seq_drop = "Seq.drop";
   function empty(param){
     /*<<seq.ml:24:15>>*/ return 0 /*<<seq.ml:24:15>>*/ ;
    /*<<seq.ml:24:18>>*/ }
   function return$0(x, param){
     /*<<seq.ml:26:18>>*/ return [0, x, empty] /*<<seq.ml:26:18>>*/ ;
    /*<<seq.ml:26:33>>*/ }
   function cons(x, next, param){
     /*<<seq.ml:28:21>>*/ return [0, x, next] /*<<seq.ml:28:21>>*/ ;
    /*<<seq.ml:28:35>>*/ }
   function append(seq1, seq2, param){
    var
     match =
        /*<<seq.ml:31:8>>*/  /*<<seq.ml:31:8>>*/ caml_call1
         /*<<seq.ml:31:8>>*/ (seq1, 0);
    if(! match)
      /*<<seq.ml:32:11>>*/ return  /*<<seq.ml:32:11>>*/ caml_call1
              /*<<seq.ml:32:11>>*/ (seq2, 0) /*<<seq.ml:33:48>>*/ ;
    var next = match[2], x = match[1];
     /*<<seq.ml:33:22>>*/ return [0,
            x,
            function(_au_){ /*<<?>>*/ return append(next, seq2, _au_);}] /*<<seq.ml:33:22>>*/ ;
    /*<<seq.ml:33:48>>*/ }
   function map(f, seq, param){
    var
     match =
        /*<<seq.ml:35:29>>*/  /*<<seq.ml:35:29>>*/ caml_call1
         /*<<seq.ml:35:29>>*/ (seq, 0);
    if(! match)  /*<<seq.ml:36:11>>*/ return 0 /*<<seq.ml:36:11>>*/ ;
    var next = match[2], x = match[1];
     /*<<seq.ml:37:22>>*/ return [0,
             /*<<seq.ml:37:28>>*/ caml_call1 /*<<seq.ml:37:28>>*/ (f, x),
            function(_at_){ /*<<?>>*/ return map(f, next, _at_);}] /*<<seq.ml:37:22>>*/ ;
    /*<<seq.ml:37:44>>*/ }
   function filter_map(f, seq, param){
    var seq$0 = seq;
     /*<<seq.ml:39:30>>*/ for(;;){
     var
      match =
         /*<<seq.ml:39:36>>*/  /*<<seq.ml:39:36>>*/ caml_call1
          /*<<seq.ml:39:36>>*/ (seq$0, 0);
     if(! match)  /*<<seq.ml:40:11>>*/ return 0 /*<<seq.ml:40:11>>*/ ;
     var
      next = match[2],
      x = match[1],
      match$0 =
         /*<<seq.ml:42:12>>*/  /*<<seq.ml:42:12>>*/ caml_call1
          /*<<seq.ml:42:12>>*/ (f, x);
     if(match$0){
      var y = match$0[1];
       /*<<seq.ml:44:20>>*/ return [0,
              y,
              function(_as_){ /*<<?>>*/ return filter_map(f, next, _as_);}] /*<<seq.ml:44:20>>*/ ;
     }
     seq$0 = next;
    }
    /*<<seq.ml:44:47>>*/ }
   function filter(f, seq, param){
    var seq$0 = seq;
     /*<<seq.ml:46:26>>*/ for(;;){
     var
      match =
         /*<<seq.ml:46:32>>*/  /*<<seq.ml:46:32>>*/ caml_call1
          /*<<seq.ml:46:32>>*/ (seq$0, 0);
     if(! match)  /*<<seq.ml:47:11>>*/ return 0 /*<<seq.ml:47:11>>*/ ;
     var next = match[2], x = match[1];
      /*<<seq.ml:49:9>>*/ if
      ( /*<<seq.ml:49:9>>*/ caml_call1 /*<<seq.ml:49:9>>*/ (f, x))
       /*<<seq.ml:50:11>>*/ return [0,
              x,
              function(_ar_){ /*<<?>>*/ return filter(f, next, _ar_);}] /*<<seq.ml:50:11>>*/ ;
     seq$0 = next;
    }
    /*<<seq.ml:51:27>>*/ }
   function concat(seq, param){
    var
     match =
        /*<<seq.ml:53:30>>*/  /*<<seq.ml:53:30>>*/ caml_call1
         /*<<seq.ml:53:30>>*/ (seq, 0);
    if(! match)  /*<<seq.ml:54:11>>*/ return 0 /*<<seq.ml:54:11>>*/ ;
    var next = match[2], x = match[1];
     /*<<seq.ml:56:5>>*/ return  /*<<seq.ml:56:5>>*/ append
             /*<<seq.ml:56:5>>*/ (x,
             function(_aq_){ /*<<?>>*/ return concat(next, _aq_);},
             0) /*<<seq.ml:56:30>>*/ ;
    /*<<seq.ml:56:30>>*/ }
   function flat_map(f, seq, param){
    var
     match =
        /*<<seq.ml:58:34>>*/  /*<<seq.ml:58:34>>*/ caml_call1
         /*<<seq.ml:58:34>>*/ (seq, 0);
    if(! match)  /*<<seq.ml:59:11>>*/ return 0 /*<<seq.ml:59:11>>*/ ;
    var next = match[2], x = match[1];
     /*<<seq.ml:61:4>>*/ return  /*<<seq.ml:61:4>>*/ append
             /*<<seq.ml:61:4>>*/ ( /*<<seq.ml:61:11>>*/ caml_call1
               /*<<seq.ml:61:11>>*/ (f, x),
             function(_ap_){ /*<<?>>*/ return flat_map(f, next, _ap_);},
             0) /*<<seq.ml:61:37>>*/ ;
    /*<<seq.ml:61:37>>*/ }
   function fold_left(f, acc, seq){
    var acc$0 = acc, seq$0 = seq;
     /*<<seq.ml:66:2>>*/ for(;;){
     var
      match =
         /*<<seq.ml:66:8>>*/  /*<<seq.ml:66:8>>*/ caml_call1
          /*<<seq.ml:66:8>>*/ (seq$0, 0);
     if(! match)  /*<<seq.ml:67:13>>*/ return acc$0 /*<<seq.ml:67:13>>*/ ;
     var
      next = match[2],
      x = match[1],
      acc$1 =
         /*<<seq.ml:69:18>>*/  /*<<seq.ml:69:18>>*/ caml_call2
          /*<<seq.ml:69:18>>*/ (f, acc$0, x);
     acc$0 = acc$1;
     seq$0 = next;
    }
    /*<<seq.ml:70:28>>*/ }
   function iter(f, seq){
    var seq$0 = seq;
     /*<<seq.ml:73:2>>*/ for(;;){
     var
      match =
         /*<<seq.ml:73:8>>*/  /*<<seq.ml:73:8>>*/ caml_call1
          /*<<seq.ml:73:8>>*/ (seq$0, 0);
     if(! match)  /*<<seq.ml:74:13>>*/ return 0 /*<<seq.ml:74:13>>*/ ;
     var next = match[2], x = match[1];
      /*<<seq.ml:76:8>>*/  /*<<seq.ml:76:8>>*/ caml_call1
       /*<<seq.ml:76:8>>*/ (f, x);
     seq$0 = next;
    }
    /*<<seq.ml:77:19>>*/ }
   function unfold(f, u, param){
    var
     match =
        /*<<seq.ml:80:8>>*/  /*<<seq.ml:80:8>>*/ caml_call1
         /*<<seq.ml:80:8>>*/ (f, u);
    if(! match)  /*<<seq.ml:81:12>>*/ return 0 /*<<seq.ml:81:12>>*/ ;
    var match$0 = match[1], u$0 = match$0[2], x = match$0[1];
     /*<<seq.ml:82:20>>*/ return [0,
            x,
            function(_ao_){ /*<<?>>*/ return unfold(f, u$0, _ao_);}] /*<<seq.ml:82:20>>*/ ;
    /*<<seq.ml:82:41>>*/ }
   function is_empty(xs){
     /*<<seq.ml:85:2>>*/ return  /*<<seq.ml:85:8>>*/ caml_call1
              /*<<seq.ml:85:8>>*/ (xs, 0)
            ? 0
            : 1 /*<<seq.ml:89:11>>*/ ;
    /*<<seq.ml:89:11>>*/ }
   function uncons(xs){
    var
     match =
        /*<<seq.ml:92:8>>*/  /*<<seq.ml:92:8>>*/ caml_call1
         /*<<seq.ml:92:8>>*/ (xs, 0);
    if(! match)  /*<<seq.ml:96:6>>*/ return 0 /*<<seq.ml:96:6>>*/ ;
    var xs$0 = match[2], x = match[1];
     /*<<seq.ml:94:6>>*/ return [0, [0, x, xs$0]] /*<<seq.ml:94:6>>*/ ;
    /*<<seq.ml:96:10>>*/ }
   function length(xs$1){
    var accu = 0, xs = xs$1;
     /*<<seq.ml:101:2>>*/ for(;;){
     var
      match =
         /*<<seq.ml:101:8>>*/  /*<<seq.ml:101:8>>*/ caml_call1
          /*<<seq.ml:101:8>>*/ (xs, 0);
     if(! match)  /*<<seq.ml:103:6>>*/ return accu /*<<seq.ml:103:6>>*/ ;
     var xs$0 = match[2], accu$0 =  /*<<seq.ml:105:6>>*/ accu + 1 | 0;
     accu = accu$0;
     xs = xs$0;
    }
    /*<<seq.ml:108:17>>*/ }
   function iteri(f, xs$1){
    var i = 0, xs = xs$1;
     /*<<seq.ml:111:2>>*/ for(;;){
     var
      match =
         /*<<seq.ml:111:8>>*/  /*<<seq.ml:111:8>>*/ caml_call1
          /*<<seq.ml:111:8>>*/ (xs, 0);
     if(! match)  /*<<seq.ml:113:6>>*/ return 0 /*<<seq.ml:113:6>>*/ ;
     var xs$0 = match[2], x = match[1];
      /*<<seq.ml:115:6>>*/  /*<<seq.ml:115:6>>*/ caml_call2
       /*<<seq.ml:115:6>>*/ (f, i, x);
     var i$0 = i + 1 | 0;
     i = i$0;
     xs = xs$0;
    }
    /*<<seq.ml:119:18>>*/ }
   function fold_lefti(f, accu$1, xs$1){
    var accu = accu$1, i = 0, xs = xs$1;
     /*<<seq.ml:122:2>>*/ for(;;){
     var
      match =
         /*<<seq.ml:122:8>>*/  /*<<seq.ml:122:8>>*/ caml_call1
          /*<<seq.ml:122:8>>*/ (xs, 0);
     if(! match)  /*<<seq.ml:124:6>>*/ return accu /*<<seq.ml:124:6>>*/ ;
     var
      xs$0 = match[2],
      x = match[1],
      accu$0 =
         /*<<seq.ml:126:17>>*/  /*<<seq.ml:126:17>>*/ caml_call3
          /*<<seq.ml:126:17>>*/ (f, accu, i, x),
      i$0 =  /*<<seq.ml:127:6>>*/ i + 1 | 0;
     accu = accu$0;
     i = i$0;
     xs = xs$0;
    }
    /*<<seq.ml:130:28>>*/ }
   function for_all(p, xs){
    var xs$0 = xs;
     /*<<seq.ml:133:2>>*/ for(;;){
     var
      match =
         /*<<seq.ml:133:8>>*/  /*<<seq.ml:133:8>>*/ caml_call1
          /*<<seq.ml:133:8>>*/ (xs$0, 0);
     if(! match)  /*<<seq.ml:135:6>>*/ return 1 /*<<seq.ml:135:6>>*/ ;
     var
      xs$1 = match[2],
      x = match[1],
      _an_ =
         /*<<seq.ml:137:6>>*/  /*<<seq.ml:137:6>>*/ caml_call1
          /*<<seq.ml:137:6>>*/ (p, x);
      /*<<seq.ml:137:6>>*/ if(! _an_)
       /*<<seq.ml:137:6>>*/ return _an_ /*<<seq.ml:137:6>>*/ ;
     xs$0 = xs$1;
    }
    /*<<seq.ml:137:25>>*/ }
   function exists(p, xs){
    var xs$0 = xs;
     /*<<seq.ml:140:2>>*/ for(;;){
     var
      match =
         /*<<seq.ml:140:8>>*/  /*<<seq.ml:140:8>>*/ caml_call1
          /*<<seq.ml:140:8>>*/ (xs$0, 0);
     if(! match)  /*<<seq.ml:142:6>>*/ return 0 /*<<seq.ml:142:6>>*/ ;
     var
      xs$1 = match[2],
      x = match[1],
      _am_ =
         /*<<seq.ml:144:6>>*/  /*<<seq.ml:144:6>>*/ caml_call1
          /*<<seq.ml:144:6>>*/ (p, x);
      /*<<seq.ml:144:6>>*/ if(_am_)
       /*<<seq.ml:144:6>>*/ return _am_ /*<<seq.ml:144:6>>*/ ;
     xs$0 = xs$1;
    }
    /*<<seq.ml:144:24>>*/ }
   function find(p, xs){
    var xs$0 = xs;
     /*<<seq.ml:147:2>>*/ for(;;){
     var
      match =
         /*<<seq.ml:147:8>>*/  /*<<seq.ml:147:8>>*/ caml_call1
          /*<<seq.ml:147:8>>*/ (xs$0, 0);
     if(! match)  /*<<seq.ml:149:6>>*/ return 0 /*<<seq.ml:149:6>>*/ ;
     var xs$1 = match[2], x = match[1];
      /*<<seq.ml:151:9>>*/ if
      ( /*<<seq.ml:151:9>>*/ caml_call1 /*<<seq.ml:151:9>>*/ (p, x))
       /*<<seq.ml:151:18>>*/ return [0, x] /*<<seq.ml:151:18>>*/ ;
     xs$0 = xs$1;
    }
    /*<<seq.ml:151:39>>*/ }
   function find_index(p, xs){
    var i = 0, xs$0 = xs;
     /*<<seq.ml:154:21>>*/ for(;;){
     var
      match =
         /*<<seq.ml:154:27>>*/  /*<<seq.ml:154:27>>*/ caml_call1
          /*<<seq.ml:154:27>>*/ (xs$0, 0);
     if(! match)  /*<<seq.ml:156:8>>*/ return 0 /*<<seq.ml:156:8>>*/ ;
     var xs$1 = match[2], x = match[1];
      /*<<seq.ml:158:11>>*/ if
      ( /*<<seq.ml:158:11>>*/ caml_call1 /*<<seq.ml:158:11>>*/ (p, x))
       /*<<seq.ml:158:20>>*/ return [0, i] /*<<seq.ml:158:20>>*/ ;
     var i$0 = i + 1 | 0;
     i = i$0;
     xs$0 = xs$1;
    }
    /*<<seq.ml:159:10>>*/ }
   function find_map(f, xs){
    var xs$0 = xs;
     /*<<seq.ml:162:2>>*/ for(;;){
     var
      match =
         /*<<seq.ml:162:8>>*/  /*<<seq.ml:162:8>>*/ caml_call1
          /*<<seq.ml:162:8>>*/ (xs$0, 0);
     if(! match)  /*<<seq.ml:164:6>>*/ return 0 /*<<seq.ml:164:6>>*/ ;
     var
      xs$1 = match[2],
      x = match[1],
      result =
         /*<<seq.ml:166:12>>*/  /*<<seq.ml:166:12>>*/ caml_call1
          /*<<seq.ml:166:12>>*/ (f, x);
     if(result)  /*<<seq.ml:170:10>>*/ return result /*<<seq.ml:170:10>>*/ ;
     xs$0 = xs$1;
    }
    /*<<seq.ml:170:16>>*/ }
   function find_mapi(f, xs){
    var i = 0, xs$0 = xs;
     /*<<seq.ml:173:21>>*/ for(;;){
     var
      match =
         /*<<seq.ml:173:27>>*/  /*<<seq.ml:173:27>>*/ caml_call1
          /*<<seq.ml:173:27>>*/ (xs$0, 0);
     if(! match)  /*<<seq.ml:175:8>>*/ return 0 /*<<seq.ml:175:8>>*/ ;
     var
      xs$1 = match[2],
      x = match[1],
      result =
         /*<<seq.ml:177:14>>*/  /*<<seq.ml:177:14>>*/ caml_call2
          /*<<seq.ml:177:14>>*/ (f, i, x);
     if(result)  /*<<seq.ml:181:12>>*/ return result /*<<seq.ml:181:12>>*/ ;
     var i$0 = i + 1 | 0;
     i = i$0;
     xs$0 = xs$1;
    }
    /*<<seq.ml:182:10>>*/ }
   function iter2(f, xs, ys){
    var xs$0 = xs, ys$0 = ys;
     /*<<seq.ml:192:2>>*/ for(;;){
     var
      match =
         /*<<seq.ml:192:8>>*/  /*<<seq.ml:192:8>>*/ caml_call1
          /*<<seq.ml:192:8>>*/ (xs$0, 0);
     if(! match)  /*<<seq.ml:194:6>>*/ return 0 /*<<seq.ml:194:6>>*/ ;
     var
      xs$1 = match[2],
      x = match[1],
      match$0 =
         /*<<seq.ml:196:12>>*/  /*<<seq.ml:196:12>>*/ caml_call1
          /*<<seq.ml:196:12>>*/ (ys$0, 0);
     if(! match$0)  /*<<seq.ml:198:10>>*/ return 0 /*<<seq.ml:198:10>>*/ ;
     var ys$1 = match$0[2], y = match$0[1];
      /*<<seq.ml:200:10>>*/  /*<<seq.ml:200:10>>*/ caml_call2
       /*<<seq.ml:200:10>>*/ (f, x, y);
     xs$0 = xs$1;
     ys$0 = ys$1;
    }
    /*<<seq.ml:201:23>>*/ }
   function fold_left2(f, accu, xs, ys){
    var accu$0 = accu, xs$0 = xs, ys$0 = ys;
     /*<<seq.ml:204:2>>*/ for(;;){
     var
      match =
         /*<<seq.ml:204:8>>*/  /*<<seq.ml:204:8>>*/ caml_call1
          /*<<seq.ml:204:8>>*/ (xs$0, 0);
     if(! match)  /*<<seq.ml:206:6>>*/ return accu$0 /*<<seq.ml:206:6>>*/ ;
     var
      xs$1 = match[2],
      x = match[1],
      match$0 =
         /*<<seq.ml:208:12>>*/  /*<<seq.ml:208:12>>*/ caml_call1
          /*<<seq.ml:208:12>>*/ (ys$0, 0);
     if(! match$0)
       /*<<seq.ml:210:10>>*/ return accu$0 /*<<seq.ml:210:10>>*/ ;
     var
      ys$1 = match$0[2],
      y = match$0[1],
      accu$1 =
         /*<<seq.ml:212:21>>*/  /*<<seq.ml:212:21>>*/ caml_call3
          /*<<seq.ml:212:21>>*/ (f, accu$0, x, y);
     accu$0 = accu$1;
     xs$0 = xs$1;
     ys$0 = ys$1;
    }
    /*<<seq.ml:213:33>>*/ }
   function for_all2(f, xs, ys){
    var xs$0 = xs, ys$0 = ys;
     /*<<seq.ml:216:2>>*/ for(;;){
     var
      match =
         /*<<seq.ml:216:8>>*/  /*<<seq.ml:216:8>>*/ caml_call1
          /*<<seq.ml:216:8>>*/ (xs$0, 0);
     if(! match)  /*<<seq.ml:218:6>>*/ return 1 /*<<seq.ml:218:6>>*/ ;
     var
      xs$1 = match[2],
      x = match[1],
      match$0 =
         /*<<seq.ml:220:12>>*/  /*<<seq.ml:220:12>>*/ caml_call1
          /*<<seq.ml:220:12>>*/ (ys$0, 0);
     if(! match$0)  /*<<seq.ml:222:10>>*/ return 1 /*<<seq.ml:222:10>>*/ ;
     var
      ys$1 = match$0[2],
      y = match$0[1],
      _al_ =
         /*<<seq.ml:224:10>>*/  /*<<seq.ml:224:10>>*/ caml_call2
          /*<<seq.ml:224:10>>*/ (f, x, y);
      /*<<seq.ml:224:10>>*/ if(! _al_)
       /*<<seq.ml:224:10>>*/ return _al_ /*<<seq.ml:224:10>>*/ ;
     xs$0 = xs$1;
     ys$0 = ys$1;
    }
    /*<<seq.ml:224:35>>*/ }
   function exists2(f, xs, ys){
    var xs$0 = xs, ys$0 = ys;
     /*<<seq.ml:227:2>>*/ for(;;){
     var
      match =
         /*<<seq.ml:227:8>>*/  /*<<seq.ml:227:8>>*/ caml_call1
          /*<<seq.ml:227:8>>*/ (xs$0, 0);
     if(! match)  /*<<seq.ml:229:6>>*/ return 0 /*<<seq.ml:229:6>>*/ ;
     var
      xs$1 = match[2],
      x = match[1],
      match$0 =
         /*<<seq.ml:231:12>>*/  /*<<seq.ml:231:12>>*/ caml_call1
          /*<<seq.ml:231:12>>*/ (ys$0, 0);
     if(! match$0)  /*<<seq.ml:233:10>>*/ return 0 /*<<seq.ml:233:10>>*/ ;
     var
      ys$1 = match$0[2],
      y = match$0[1],
      _ak_ =
         /*<<seq.ml:235:10>>*/  /*<<seq.ml:235:10>>*/ caml_call2
          /*<<seq.ml:235:10>>*/ (f, x, y);
      /*<<seq.ml:235:10>>*/ if(_ak_)
       /*<<seq.ml:235:10>>*/ return _ak_ /*<<seq.ml:235:10>>*/ ;
     xs$0 = xs$1;
     ys$0 = ys$1;
    }
    /*<<seq.ml:235:34>>*/ }
   function equal(eq, xs, ys){
    var xs$0 = xs, ys$0 = ys;
     /*<<seq.ml:238:2>>*/ for(;;){
     var
      match =
         /*<<seq.ml:238:8>>*/  /*<<seq.ml:238:8>>*/ caml_call1
          /*<<seq.ml:238:8>>*/ (xs$0, 0),
      match$0 =
         /*<<seq.ml:238:14>>*/  /*<<seq.ml:238:14>>*/ caml_call1
          /*<<seq.ml:238:14>>*/ (ys$0, 0);
     if(match){
      if(match$0){
       var
        ys$1 = match$0[2],
        y = match$0[1],
        xs$1 = match[2],
        x = match[1],
        _aj_ =
           /*<<seq.ml:242:6>>*/  /*<<seq.ml:242:6>>*/ caml_call2
            /*<<seq.ml:242:6>>*/ (eq, x, y);
        /*<<seq.ml:242:6>>*/ if(! _aj_)
         /*<<seq.ml:242:6>>*/ return _aj_ /*<<seq.ml:242:6>>*/ ;
       xs$0 = xs$1;
       ys$0 = ys$1;
       continue;
      }
     }
     else if(! match$0)  /*<<seq.ml:240:6>>*/ return 1 /*<<seq.ml:240:6>>*/ ;
      /*<<seq.ml:245:6>>*/ return 0 /*<<seq.ml:245:6>>*/ ;
    }
    /*<<seq.ml:245:11>>*/ }
   function compare(cmp, xs, ys){
    var xs$0 = xs, ys$0 = ys;
     /*<<seq.ml:248:2>>*/ for(;;){
     var
      match =
         /*<<seq.ml:248:8>>*/  /*<<seq.ml:248:8>>*/ caml_call1
          /*<<seq.ml:248:8>>*/ (xs$0, 0),
      match$0 =
         /*<<seq.ml:248:14>>*/  /*<<seq.ml:248:14>>*/ caml_call1
          /*<<seq.ml:248:14>>*/ (ys$0, 0);
     if(! match) return match$0 ? -1 : 0 /*<<seq.ml:257:8>>*/ ;
     var xs$1 = match[2], x = match[1];
     if(! match$0)  /*<<seq.ml:257:6>>*/ return 1 /*<<seq.ml:257:6>>*/ ;
     var
      ys$1 = match$0[2],
      y = match$0[1],
      c =
         /*<<seq.ml:252:14>>*/  /*<<seq.ml:252:14>>*/ caml_call2
          /*<<seq.ml:252:14>>*/ (cmp, x, y);
      /*<<seq.ml:253:6>>*/ if(0 !== c)
       /*<<seq.ml:253:21>>*/ return c /*<<seq.ml:253:21>>*/ ;
     xs$0 = xs$1;
     ys$0 = ys$1;
    }
    /*<<seq.ml:257:8>>*/ }
   function init_aux(f, i, j, param){
     /*<<seq.ml:264:2>>*/ if(i >= j)
      /*<<seq.ml:268:4>>*/ return 0 /*<<seq.ml:268:4>>*/ ;
    var _ah_ = i + 1 | 0;
     /*<<seq.ml:264:16>>*/ return [0,
             /*<<seq.ml:265:10>>*/ caml_call1 /*<<seq.ml:265:10>>*/ (f, i),
            function(_ai_){ /*<<?>>*/ return init_aux(f, _ah_, j, _ai_);}] /*<<seq.ml:264:16>>*/ ;
    /*<<seq.ml:268:7>>*/ }
   function init(n, f){
     /*<<seq.ml:271:2>>*/ if(0 > n)
      /*<<seq.ml:272:4>>*/ return  /*<<seq.ml:272:4>>*/ caml_call1
              /*<<seq.ml:272:4>>*/ (Stdlib[1], cst_Seq_init) /*<<seq.ml:274:18>>*/ ;
    var _af_ = 0;
     /*<<seq.ml:274:4>>*/ return function(_ag_){
      /*<<?>>*/ return init_aux(f, _af_, n, _ag_);} /*<<seq.ml:274:4>>*/ ;
    /*<<seq.ml:274:18>>*/ }
   function repeat(x, param){
     /*<<seq.ml:277:2>>*/ return [0,
            x,
            function(_ae_){ /*<<?>>*/ return repeat(x, _ae_);}] /*<<seq.ml:277:2>>*/ ;
    /*<<seq.ml:277:20>>*/ }
   function forever(f, param){
     /*<<seq.ml:280:2>>*/ return [0,
             /*<<seq.ml:280:8>>*/ caml_call1 /*<<seq.ml:280:8>>*/ (f, 0),
            function(_ad_){ /*<<?>>*/ return forever(f, _ad_);}] /*<<seq.ml:280:2>>*/ ;
    /*<<seq.ml:280:23>>*/ }
   function cycle_nonempty(xs, param){
     /*<<seq.ml:287:2>>*/ return  /*<<seq.ml:287:2>>*/ append
             /*<<seq.ml:287:2>>*/ (xs,
             function(_ac_){ /*<<?>>*/ return cycle_nonempty(xs, _ac_);},
             0) /*<<seq.ml:287:34>>*/ ;
    /*<<seq.ml:287:34>>*/ }
   function cycle(xs, param){
    var
     match =
        /*<<seq.ml:295:8>>*/  /*<<seq.ml:295:8>>*/ caml_call1
         /*<<seq.ml:295:8>>*/ (xs, 0);
    if(! match)  /*<<seq.ml:297:6>>*/ return 0 /*<<seq.ml:297:6>>*/ ;
    var xs$0 = match[2], x = match[1];
    function _$_(_ab_){ /*<<?>>*/ return cycle_nonempty(xs, _ab_);}
     /*<<seq.ml:299:6>>*/ return [0,
            x,
            function(_aa_){ /*<<?>>*/ return append(xs$0, _$_, _aa_);}] /*<<seq.ml:299:6>>*/ ;
    /*<<seq.ml:299:46>>*/ }
   function iterate1(f, x, param){
    var
     y =
        /*<<seq.ml:306:10>>*/  /*<<seq.ml:306:10>>*/ caml_call1
         /*<<seq.ml:306:10>>*/ (f, x);
     /*<<seq.ml:307:2>>*/ return [0,
            y,
            function(___){ /*<<?>>*/ return iterate1(f, y, ___);}] /*<<seq.ml:307:2>>*/ ;
    /*<<seq.ml:307:24>>*/ }
   function iterate(f, x){
    function next(_Z_){ /*<<?>>*/ return iterate1(f, x, _Z_);}
     /*<<seq.ml:319:9>>*/ return function(_Y_){
      /*<<seq.ml:28:21>>*/ return [0, x, next] /*<<seq.ml:28:21>>*/ ;} /*<<seq.ml:319:9>>*/ ;
    /*<<seq.ml:319:23>>*/ }
   function mapi_aux(f, i, xs, param){
    var
     match =
        /*<<seq.ml:324:8>>*/  /*<<seq.ml:324:8>>*/ caml_call1
         /*<<seq.ml:324:8>>*/ (xs, 0);
    if(! match)  /*<<seq.ml:326:6>>*/ return 0 /*<<seq.ml:326:6>>*/ ;
    var xs$0 = match[2], x = match[1], _W_ =  /*<<seq.ml:328:6>>*/ i + 1 | 0;
     /*<<seq.ml:328:6>>*/ return [0,
             /*<<seq.ml:328:12>>*/ caml_call2 /*<<seq.ml:328:12>>*/ (f, i, x),
            function(_X_){ /*<<?>>*/ return mapi_aux(f, _W_, xs$0, _X_);}] /*<<seq.ml:328:6>>*/ ;
    /*<<seq.ml:328:39>>*/ }
   function mapi(f, xs){
    var _U_ = 0;
     /*<<seq.ml:331:2>>*/ return function(_V_){
      /*<<?>>*/ return mapi_aux(f, _U_, xs, _V_);} /*<<seq.ml:331:2>>*/ ;
    /*<<seq.ml:331:17>>*/ }
   function tail_scan(f, s, xs, param){
    var
     match =
        /*<<seq.ml:340:8>>*/  /*<<seq.ml:340:8>>*/ caml_call1
         /*<<seq.ml:340:8>>*/ (xs, 0);
    if(! match)  /*<<seq.ml:342:6>>*/ return 0 /*<<seq.ml:342:6>>*/ ;
    var
     xs$0 = match[2],
     x = match[1],
     s$0 =
        /*<<seq.ml:344:14>>*/  /*<<seq.ml:344:14>>*/ caml_call2
         /*<<seq.ml:344:14>>*/ (f, s, x);
     /*<<seq.ml:345:6>>*/ return [0,
            s$0,
            function(_T_){ /*<<?>>*/ return tail_scan(f, s$0, xs$0, _T_);}] /*<<seq.ml:345:6>>*/ ;
    /*<<seq.ml:345:32>>*/ }
   function scan(f, s, xs){
    function next(_S_){ /*<<?>>*/ return tail_scan(f, s, xs, _S_);}
     /*<<seq.ml:348:9>>*/ return function(_R_){
      /*<<seq.ml:28:21>>*/ return [0, s, next] /*<<seq.ml:28:21>>*/ ;} /*<<seq.ml:348:9>>*/ ;
    /*<<seq.ml:348:27>>*/ }
   function take_aux(n, xs){
     /*<<seq.ml:354:2>>*/ return 0 === n
            ? empty
            : function
             (param){
              var
               match =
                  /*<<seq.ml:358:12>>*/  /*<<seq.ml:358:12>>*/ caml_call1
                   /*<<seq.ml:358:12>>*/ (xs, 0);
              if(! match)
                /*<<seq.ml:360:10>>*/ return 0 /*<<seq.ml:360:10>>*/ ;
              var xs$0 = match[2], x = match[1];
               /*<<seq.ml:362:10>>*/ return [0,
                      x,
                       /*<<seq.ml:362:19>>*/ take_aux
                        /*<<seq.ml:362:19>>*/ (n - 1 | 0, xs$0)] /*<<seq.ml:362:10>>*/ ;
              /*<<seq.ml:362:37>>*/ } /*<<seq.ml:362:37>>*/ ;
    /*<<seq.ml:362:37>>*/ }
   function take(n, xs){
     /*<<seq.ml:365:2>>*/ if(n < 0)
      /*<<seq.ml:365:16>>*/  /*<<seq.ml:365:16>>*/ caml_call1
       /*<<seq.ml:365:16>>*/ (Stdlib[1], cst_Seq_take);
     /*<<seq.ml:365:16>>*/ return  /*<<seq.ml:365:16>>*/ take_aux
             /*<<seq.ml:365:16>>*/ (n, xs) /*<<seq.ml:366:15>>*/ ;
    /*<<seq.ml:366:15>>*/ }
   function drop(n, xs){
     /*<<seq.ml:387:2>>*/ return 0 <= n
            ? 0
              === n
              ? xs
              : function
               (param){
                var n$0 = n, xs$0 = xs;
                 /*<<seq.ml:373:2>>*/ for(;;){
                 var
                  match =
                     /*<<seq.ml:373:8>>*/  /*<<seq.ml:373:8>>*/ caml_call1
                      /*<<seq.ml:373:8>>*/ (xs$0, 0);
                 if(! match)
                   /*<<seq.ml:375:6>>*/ return 0 /*<<seq.ml:375:6>>*/ ;
                 var xs$1 = match[2], n$1 =  /*<<seq.ml:377:6>>*/ n$0 - 1 | 0;
                  /*<<seq.ml:378:6>>*/ if(0 === n$1)
                   /*<<seq.ml:379:8>>*/ return  /*<<seq.ml:379:8>>*/ caml_call1
                           /*<<seq.ml:379:8>>*/ (xs$1, 0) /*<<seq.ml:392:21>>*/ ;
                 n$0 = n$1;
                 xs$0 = xs$1;
                }
                /*<<seq.ml:392:21>>*/ }
            :  /*<<seq.ml:387:16>>*/ caml_call1
               /*<<seq.ml:387:16>>*/ (Stdlib[1], cst_Seq_drop) /*<<seq.ml:392:21>>*/ ;
    /*<<seq.ml:392:21>>*/ }
   function take_while(p, xs, param){
    var
     match =
        /*<<seq.ml:395:8>>*/  /*<<seq.ml:395:8>>*/ caml_call1
         /*<<seq.ml:395:8>>*/ (xs, 0);
    if(! match)  /*<<seq.ml:397:6>>*/ return 0 /*<<seq.ml:397:6>>*/ ;
    var xs$0 = match[2], x = match[1];
     /*<<seq.ml:399:9>>*/ return  /*<<seq.ml:399:9>>*/ caml_call1
              /*<<seq.ml:399:9>>*/ (p, x)
            ? [0,
              x,
              function(_Q_){ /*<<?>>*/ return take_while(p, xs$0, _Q_);}]
            : 0 /*<<seq.ml:399:52>>*/ ;
    /*<<seq.ml:399:52>>*/ }
   function drop_while(p, xs, param){
    var xs$0 = xs;
     /*<<seq.ml:402:2>>*/ for(;;){
     var
      node =
         /*<<seq.ml:402:8>>*/  /*<<seq.ml:402:8>>*/ caml_call1
          /*<<seq.ml:402:8>>*/ (xs$0, 0);
     if(! node)  /*<<seq.ml:404:6>>*/ return 0 /*<<seq.ml:404:6>>*/ ;
     var xs$1 = node[2], x = node[1];
      /*<<seq.ml:406:9>>*/ if
      (!  /*<<seq.ml:406:9>>*/ caml_call1 /*<<seq.ml:406:9>>*/ (p, x))
       /*<<seq.ml:406:42>>*/ return node /*<<seq.ml:406:42>>*/ ;
     xs$0 = xs$1;
    }
    /*<<seq.ml:406:46>>*/ }
   function group(eq, xs, param){
    var
     match =
        /*<<seq.ml:409:8>>*/  /*<<seq.ml:409:8>>*/ caml_call1
         /*<<seq.ml:409:8>>*/ (xs, 0);
    if(! match)  /*<<seq.ml:411:6>>*/ return 0 /*<<seq.ml:411:6>>*/ ;
    var
     xs$0 = match[2],
     x = match[1],
     _J_ =
        /*<<seq.ml:413:64>>*/  /*<<seq.ml:413:64>>*/ caml_call1
         /*<<seq.ml:413:64>>*/ (eq, x);
    function _K_(_P_){ /*<<?>>*/ return drop_while(_J_, xs$0, _P_);}
    var
     _L_ =
        /*<<seq.ml:413:31>>*/  /*<<seq.ml:413:31>>*/ caml_call1
         /*<<seq.ml:413:31>>*/ (eq, x);
    function next(_O_){ /*<<?>>*/ return take_while(_L_, xs$0, _O_);}
     /*<<seq.ml:413:6>>*/ return [0,
            function(_N_){
              /*<<seq.ml:28:21>>*/ return [0, x, next] /*<<seq.ml:28:21>>*/ ;
            },
            function(_M_){ /*<<?>>*/ return group(eq, _K_, _M_);}] /*<<seq.ml:413:6>>*/ ;
    /*<<seq.ml:413:75>>*/ }
   var
    Forced_twice =
       /*<<seq.ml:415:0>>*/ [248,
       "Stdlib.Seq.Forced_twice",
       runtime.caml_fresh_oo_id(0)],
    to_lazy =  /*<<seq.ml:415:0>>*/ Stdlib_Lazy[6],
    _a_ = [0, "seq.ml", 616, 4];
   function failure(param){
     /*<<seq.ml:441:6>>*/ throw  /*<<seq.ml:441:6>>*/ caml_maybe_attach_backtrace
            /*<<seq.ml:441:6>>*/ (Forced_twice, 1);
    /*<<seq.ml:441:24>>*/ }
   function memoize(xs){
    function s$0(param){
     var
      match =
         /*<<seq.ml:460:10>>*/  /*<<seq.ml:460:10>>*/ caml_call1
          /*<<seq.ml:460:10>>*/ (xs, 0);
     if(! match)  /*<<seq.ml:462:8>>*/ return 0 /*<<seq.ml:462:8>>*/ ;
     var xs$0 = match[2], x = match[1];
      /*<<seq.ml:464:8>>*/ return [0,
             x,
              /*<<seq.ml:464:17>>*/ memoize /*<<seq.ml:464:17>>*/ (xs$0)] /*<<seq.ml:464:8>>*/ ;
     /*<<seq.ml:464:28>>*/ }
    var
     s =
        /*<<seq.ml:434:14>>*/  /*<<seq.ml:434:14>>*/ caml_call1
         /*<<seq.ml:434:14>>*/ (to_lazy, s$0);
     /*<<seq.ml:429:4>>*/ return function(param){
     var _I_ = runtime.caml_obj_tag(s);
     if(250 === _I_) return s[1];
     if(246 !== _I_ && 244 !== _I_)
       /*<<seq.ml:429:4>>*/ return s /*<<seq.ml:429:4>>*/ ;
      /*<<seq.ml:429:4>>*/ return  /*<<seq.ml:429:4>>*/ caml_call1
              /*<<seq.ml:429:4>>*/ (CamlinternalLazy[2], s) /*<<seq.ml:429:26>>*/ ; /*<<seq.ml:429:26>>*/ } /*<<seq.ml:429:4>>*/ ;
    /*<<seq.ml:465:3>>*/ }
   function once(xs){
    function f(param){
     var
      match =
         /*<<seq.ml:469:10>>*/  /*<<seq.ml:469:10>>*/ caml_call1
          /*<<seq.ml:469:10>>*/ (xs, 0);
     if(! match)  /*<<seq.ml:471:8>>*/ return 0 /*<<seq.ml:471:8>>*/ ;
     var xs$0 = match[2], x = match[1];
      /*<<seq.ml:473:8>>*/ return [0,
             x,
              /*<<seq.ml:473:17>>*/ once /*<<seq.ml:473:17>>*/ (xs$0)] /*<<seq.ml:473:8>>*/ ;
     /*<<seq.ml:473:25>>*/ }
    var
     action =
        /*<<seq.ml:448:17>>*/  /*<<seq.ml:448:17>>*/ caml_call1
         /*<<seq.ml:448:17>>*/ (Stdlib_Atomic[1], f);
     /*<<seq.ml:449:4>>*/ return function(param){
     var
      f =
         /*<<seq.ml:453:14>>*/  /*<<seq.ml:453:14>>*/ caml_call2
          /*<<seq.ml:453:14>>*/ (Stdlib_Atomic[5], action, failure);
      /*<<seq.ml:454:6>>*/ return  /*<<seq.ml:454:6>>*/ caml_call1
              /*<<seq.ml:454:6>>*/ (f, 0) /*<<seq.ml:454:9>>*/ ; /*<<seq.ml:454:9>>*/ } /*<<seq.ml:449:4>>*/ ;
    /*<<seq.ml:474:3>>*/ }
   function zip(xs, ys, param){
    var
     match =
        /*<<seq.ml:478:8>>*/  /*<<seq.ml:478:8>>*/ caml_call1
         /*<<seq.ml:478:8>>*/ (xs, 0);
    if(! match)  /*<<seq.ml:480:6>>*/ return 0 /*<<seq.ml:480:6>>*/ ;
    var
     xs$0 = match[2],
     x = match[1],
     match$0 =
        /*<<seq.ml:482:12>>*/  /*<<seq.ml:482:12>>*/ caml_call1
         /*<<seq.ml:482:12>>*/ (ys, 0);
    if(! match$0)  /*<<seq.ml:484:10>>*/ return 0 /*<<seq.ml:484:10>>*/ ;
    var ys$0 = match$0[2], y = match$0[1];
     /*<<seq.ml:486:10>>*/ return [0,
            [0, x, y],
            function(_H_){ /*<<?>>*/ return zip(xs$0, ys$0, _H_);}] /*<<seq.ml:486:10>>*/ ;
    /*<<seq.ml:486:34>>*/ }
   function map2(f, xs, ys, param){
    var
     match =
        /*<<seq.ml:489:8>>*/  /*<<seq.ml:489:8>>*/ caml_call1
         /*<<seq.ml:489:8>>*/ (xs, 0);
    if(! match)  /*<<seq.ml:491:6>>*/ return 0 /*<<seq.ml:491:6>>*/ ;
    var
     xs$0 = match[2],
     x = match[1],
     match$0 =
        /*<<seq.ml:493:12>>*/  /*<<seq.ml:493:12>>*/ caml_call1
         /*<<seq.ml:493:12>>*/ (ys, 0);
    if(! match$0)  /*<<seq.ml:495:10>>*/ return 0 /*<<seq.ml:495:10>>*/ ;
    var ys$0 = match$0[2], y = match$0[1];
     /*<<seq.ml:497:10>>*/ return [0,
             /*<<seq.ml:497:16>>*/ caml_call2 /*<<seq.ml:497:16>>*/ (f, x, y),
            function(_G_){ /*<<?>>*/ return map2(f, xs$0, ys$0, _G_);}] /*<<seq.ml:497:10>>*/ ;
    /*<<seq.ml:497:36>>*/ }
   function interleave(xs, ys, param){
    var
     match =
        /*<<seq.ml:500:8>>*/  /*<<seq.ml:500:8>>*/ caml_call1
         /*<<seq.ml:500:8>>*/ (xs, 0);
    if(! match)
      /*<<seq.ml:502:6>>*/ return  /*<<seq.ml:502:6>>*/ caml_call1
              /*<<seq.ml:502:6>>*/ (ys, 0) /*<<seq.ml:504:32>>*/ ;
    var xs$0 = match[2], x = match[1];
     /*<<seq.ml:504:6>>*/ return [0,
            x,
            function(_F_){ /*<<?>>*/ return interleave(ys, xs$0, _F_);}] /*<<seq.ml:504:6>>*/ ;
    /*<<seq.ml:504:32>>*/ }
   function sorted_merge1(cmp, x, xs, y, ys){
     /*<<seq.ml:533:2>>*/ return 0
            <
              /*<<seq.ml:533:5>>*/ caml_call2 /*<<seq.ml:533:5>>*/ (cmp, x, y)
            ? [0,
              y,
              function(_D_){
               var
                match =
                   /*<<seq.ml:519:8>>*/  /*<<seq.ml:519:8>>*/ caml_call1
                    /*<<seq.ml:519:8>>*/ (ys, 0);
               if(! match)
                 /*<<seq.ml:521:6>>*/ return [0, x, xs] /*<<seq.ml:521:6>>*/ ;
               var ys$0 = match[2], y = match[1];
                /*<<seq.ml:523:6>>*/ return  /*<<seq.ml:523:6>>*/ sorted_merge1
                        /*<<seq.ml:523:6>>*/ (cmp, x, xs, y, ys$0) /*<<seq.ml:523:6>>*/ ;
              }]
            : [0,
              x,
              function(_E_){
               var
                match =
                   /*<<seq.ml:526:8>>*/  /*<<seq.ml:526:8>>*/ caml_call1
                    /*<<seq.ml:526:8>>*/ (xs, 0);
               if(! match)
                 /*<<seq.ml:528:6>>*/ return [0, y, ys] /*<<seq.ml:528:6>>*/ ;
               var xs$0 = match[2], x = match[1];
                /*<<seq.ml:530:6>>*/ return  /*<<seq.ml:530:6>>*/ sorted_merge1
                        /*<<seq.ml:530:6>>*/ (cmp, x, xs$0, y, ys) /*<<seq.ml:530:6>>*/ ;
              }] /*<<seq.ml:536:40>>*/ ;
    /*<<seq.ml:536:40>>*/ }
   function sorted_merge(cmp, xs, ys, param){
    var
     match =
        /*<<seq.ml:539:8>>*/  /*<<seq.ml:539:8>>*/ caml_call1
         /*<<seq.ml:539:8>>*/ (xs, 0),
     match$0 =
        /*<<seq.ml:539:14>>*/  /*<<seq.ml:539:14>>*/ caml_call1
         /*<<seq.ml:539:14>>*/ (ys, 0);
    if(match){
     if(match$0){
      var ys$0 = match$0[2], y = match$0[1], xs$0 = match[2], x = match[1];
       /*<<seq.ml:546:8>>*/ return  /*<<seq.ml:546:8>>*/ sorted_merge1
               /*<<seq.ml:546:8>>*/ (cmp, x, xs$0, y, ys$0) /*<<seq.ml:546:35>>*/ ;
     }
     var c = match;
    }
    else{
     if(! match$0)  /*<<seq.ml:541:8>>*/ return 0 /*<<seq.ml:541:8>>*/ ;
     var c = match$0;
    }
     /*<<seq.ml:544:8>>*/ return c /*<<seq.ml:544:8>>*/ ;
    /*<<seq.ml:546:35>>*/ }
   function map_fst(xys, param){
    var
     match =
        /*<<seq.ml:550:8>>*/  /*<<seq.ml:550:8>>*/ caml_call1
         /*<<seq.ml:550:8>>*/ (xys, 0);
    if(! match)  /*<<seq.ml:552:6>>*/ return 0 /*<<seq.ml:552:6>>*/ ;
    var xys$0 = match[2], x = match[1][1];
     /*<<seq.ml:554:6>>*/ return [0,
            x,
            function(_C_){ /*<<?>>*/ return map_fst(xys$0, _C_);}] /*<<seq.ml:554:6>>*/ ;
    /*<<seq.ml:554:27>>*/ }
   function map_snd(xys, param){
    var
     match =
        /*<<seq.ml:557:8>>*/  /*<<seq.ml:557:8>>*/ caml_call1
         /*<<seq.ml:557:8>>*/ (xys, 0);
    if(! match)  /*<<seq.ml:559:6>>*/ return 0 /*<<seq.ml:559:6>>*/ ;
    var xys$0 = match[2], y = match[1][2];
     /*<<seq.ml:561:6>>*/ return [0,
            y,
            function(_B_){ /*<<?>>*/ return map_snd(xys$0, _B_);}] /*<<seq.ml:561:6>>*/ ;
    /*<<seq.ml:561:27>>*/ }
   function unzip(xys){
     /*<<seq.ml:564:2>>*/ return [0,
            function(_A_){ /*<<?>>*/ return map_fst(xys, _A_);},
            function(_z_){ /*<<?>>*/ return map_snd(xys, _z_);}] /*<<seq.ml:564:2>>*/ ;
    /*<<seq.ml:564:26>>*/ }
   function filter_map_find_left_map(f, xs, param){
    var xs$0 = xs;
     /*<<seq.ml:573:2>>*/ for(;;){
     var
      match =
         /*<<seq.ml:573:8>>*/  /*<<seq.ml:573:8>>*/ caml_call1
          /*<<seq.ml:573:8>>*/ (xs$0, 0);
     if(! match)  /*<<seq.ml:575:6>>*/ return 0 /*<<seq.ml:575:6>>*/ ;
     var
      xs$1 = match[2],
      x = match[1],
      match$0 =
         /*<<seq.ml:577:12>>*/  /*<<seq.ml:577:12>>*/ caml_call1
          /*<<seq.ml:577:12>>*/ (f, x);
     if(0 === match$0[0]){
      var y = match$0[1];
       /*<<seq.ml:579:10>>*/ return [0,
              y,
              function(_y_){
                /*<<?>>*/ return filter_map_find_left_map(f, xs$1, _y_);
              }] /*<<seq.ml:579:10>>*/ ;
     }
     xs$0 = xs$1;
    }
    /*<<seq.ml:581:42>>*/ }
   function filter_map_find_right_map(f, xs, param){
    var xs$0 = xs;
     /*<<seq.ml:584:2>>*/ for(;;){
     var
      match =
         /*<<seq.ml:584:8>>*/  /*<<seq.ml:584:8>>*/ caml_call1
          /*<<seq.ml:584:8>>*/ (xs$0, 0);
     if(! match)  /*<<seq.ml:586:6>>*/ return 0 /*<<seq.ml:586:6>>*/ ;
     var
      xs$1 = match[2],
      x = match[1],
      match$0 =
         /*<<seq.ml:588:12>>*/  /*<<seq.ml:588:12>>*/ caml_call1
          /*<<seq.ml:588:12>>*/ (f, x);
     if(0 !== match$0[0]){
      var z = match$0[1];
       /*<<seq.ml:592:10>>*/ return [0,
              z,
              function(_x_){
                /*<<?>>*/ return filter_map_find_right_map(f, xs$1, _x_);
              }] /*<<seq.ml:592:10>>*/ ;
     }
     xs$0 = xs$1;
    }
    /*<<seq.ml:592:50>>*/ }
   function partition_map(f, xs){
     /*<<seq.ml:595:2>>*/ return [0,
            function(_w_){
              /*<<?>>*/ return filter_map_find_left_map(f, xs, _w_);
            },
            function(_v_){
              /*<<?>>*/ return filter_map_find_right_map(f, xs, _v_);
            }] /*<<seq.ml:595:2>>*/ ;
    /*<<seq.ml:596:32>>*/ }
   function partition(p, xs){
    function _s_(x){
      /*<<seq.ml:599:32>>*/ return 1
            -  /*<<seq.ml:599:36>>*/ caml_call1 /*<<seq.ml:599:36>>*/ (p, x) /*<<seq.ml:599:36>>*/ ;
     /*<<seq.ml:599:41>>*/ }
     /*<<seq.ml:599:2>>*/ return [0,
            function(_u_){ /*<<?>>*/ return filter(p, xs, _u_);},
            function(_t_){ /*<<?>>*/ return filter(_s_, xs, _t_);}] /*<<seq.ml:599:2>>*/ ;
    /*<<seq.ml:599:45>>*/ }
   function peel(xss){
     /*<<seq.ml:611:2>>*/ return  /*<<seq.ml:611:8>>*/ unzip
             /*<<seq.ml:611:8>>*/ (function(_r_){
               /*<<?>>*/ return filter_map(uncons, xss, _r_);
             }) /*<<seq.ml:611:31>>*/ ;
    /*<<seq.ml:611:31>>*/ }
   function transpose(xss, param){
    var
     match =
        /*<<seq.ml:614:21>>*/  /*<<seq.ml:614:21>>*/ peel
         /*<<seq.ml:614:21>>*/ (xss),
     tails = match[2],
     heads = match[1];
     /*<<seq.ml:615:5>>*/ if
     (!  /*<<seq.ml:615:5>>*/ is_empty /*<<seq.ml:615:5>>*/ (heads))
      /*<<seq.ml:620:4>>*/ return [0,
             heads,
             function(_q_){ /*<<?>>*/ return transpose(tails, _q_);}] /*<<seq.ml:620:4>>*/ ;
     /*<<seq.ml:616:11>>*/ if
     ( /*<<seq.ml:616:11>>*/ is_empty /*<<seq.ml:616:11>>*/ (tails))
      /*<<seq.ml:617:4>>*/ return 0 /*<<seq.ml:617:4>>*/ ;
     /*<<seq.ml:616:4>>*/ throw  /*<<seq.ml:616:4>>*/ caml_maybe_attach_backtrace
            /*<<seq.ml:616:4>>*/ ([0, Assert_failure, _a_], 1);
    /*<<seq.ml:620:33>>*/ }
   function _b_(remainders, xss, param){
    var
     match =
        /*<<seq.ml:627:8>>*/  /*<<seq.ml:627:8>>*/ caml_call1
         /*<<seq.ml:627:8>>*/ (xss, 0);
    if(! match)
      /*<<seq.ml:649:6>>*/ return  /*<<seq.ml:649:6>>*/ transpose
              /*<<seq.ml:649:6>>*/ (remainders, 0) /*<<seq.ml:649:29>>*/ ;
    var
     xss$0 = match[2],
     xs = match[1],
     match$0 =
        /*<<seq.ml:629:18>>*/  /*<<seq.ml:629:18>>*/ caml_call1
         /*<<seq.ml:629:18>>*/ (xs, 0);
    if(match$0){
     var
      xs$0 = match$0[2],
      x = match$0[1],
      match$1 =
         /*<<seq.ml:637:29>>*/  /*<<seq.ml:637:29>>*/ peel
          /*<<seq.ml:637:29>>*/ (remainders),
      tails = match$1[2],
      heads = match$1[1],
      _l_ =
         /*<<seq.ml:638:40>>*/ function(_p_){
          /*<<seq.ml:28:21>>*/ return [0, xs$0, tails] /*<<seq.ml:28:21>>*/ ;
        };
      /*<<seq.ml:638:10>>*/ return [0,
             function(_o_){
               /*<<seq.ml:28:21>>*/ return [0, x, heads] /*<<seq.ml:28:21>>*/ ;
             },
             function(_n_){ /*<<?>>*/ return _b_(_l_, xss$0, _n_);}] /*<<seq.ml:638:10>>*/ ;
    }
    var
     match$2 =
        /*<<seq.ml:643:29>>*/  /*<<seq.ml:643:29>>*/ peel
         /*<<seq.ml:643:29>>*/ (remainders),
     tails$0 = match$2[2],
     heads$0 = match$2[1];
     /*<<seq.ml:644:10>>*/ return [0,
            heads$0,
            function(_m_){ /*<<?>>*/ return _b_(tails$0, xss$0, _m_);}] /*<<seq.ml:644:10>>*/ ;
    /*<<seq.ml:649:29>>*/ }
   function map_product(f, xs, ys){
    function _f_(x){
     function _j_(y){
       /*<<seq.ml:671:8>>*/ return  /*<<seq.ml:671:8>>*/ caml_call2
               /*<<seq.ml:671:8>>*/ (f, x, y) /*<<seq.ml:671:13>>*/ ;
      /*<<seq.ml:671:13>>*/ }
      /*<<seq.ml:670:10>>*/ return function(_k_){
       /*<<?>>*/ return map(_j_, ys, _k_);} /*<<seq.ml:670:10>>*/ ;
     /*<<seq.ml:672:10>>*/ }
    function xss(_i_){ /*<<?>>*/ return map(_f_, xs, _i_);}
    function _e_(_h_){ /*<<?>>*/ return _b_(empty, xss, _h_);}
     /*<<seq.ml:668:9>>*/ return function(_g_){
      /*<<?>>*/ return concat(_e_, _g_);} /*<<seq.ml:668:9>>*/ ;
    /*<<seq.ml:674:4>>*/ }
   function product(xs, ys){
     /*<<seq.ml:677:2>>*/ return  /*<<seq.ml:677:2>>*/ map_product
             /*<<seq.ml:677:2>>*/ (function(x, y){
               /*<<seq.ml:677:26>>*/ return [0, x, y] /*<<seq.ml:677:26>>*/ ;
              /*<<seq.ml:677:32>>*/ },
             xs,
             ys) /*<<seq.ml:677:39>>*/ ;
    /*<<seq.ml:677:39>>*/ }
   function of_dispenser(it){
    function c(param){
     var
      match =
         /*<<seq.ml:681:10>>*/  /*<<seq.ml:681:10>>*/ caml_call1
          /*<<seq.ml:681:10>>*/ (it, 0);
     if(! match)  /*<<seq.ml:683:8>>*/ return 0 /*<<seq.ml:683:8>>*/ ;
     var x = match[1];
      /*<<seq.ml:685:8>>*/ return [0, x, c] /*<<seq.ml:685:8>>*/ ;
     /*<<seq.ml:685:19>>*/ }
     /*<<seq.ml:687:2>>*/ return c /*<<seq.ml:687:2>>*/ ;
    /*<<seq.ml:687:3>>*/ }
   function to_dispenser(xs){
    var s =  /*<<seq.ml:690:10>>*/ [0, xs];
     /*<<seq.ml:691:2>>*/ return function(param){
     var
      match =
         /*<<seq.ml:692:10>>*/  /*<<seq.ml:692:10>>*/ caml_call1
          /*<<seq.ml:692:10>>*/ (s[1], 0);
     if(! match)  /*<<seq.ml:694:8>>*/ return 0 /*<<seq.ml:694:8>>*/ ;
     var xs = match[2], x = match[1];
     s[1] = xs;
      /*<<seq.ml:697:8>>*/ return [0, x] /*<<seq.ml:697:8>>*/ ; /*<<seq.ml:697:14>>*/ } /*<<seq.ml:691:2>>*/ ;
    /*<<seq.ml:697:14>>*/ }
   function ints(i, param){
    var _c_ =  /*<<seq.ml:702:2>>*/ i + 1 | 0;
     /*<<seq.ml:702:2>>*/ return [0,
            i,
            function(_d_){ /*<<?>>*/ return ints(_c_, _d_);}] /*<<seq.ml:702:2>>*/ ;
    /*<<seq.ml:702:24>>*/ }
   var
    Stdlib_Seq =
      [0,
       is_empty,
       uncons,
       length,
       iter,
       fold_left,
       iteri,
       fold_lefti,
       for_all,
       exists,
       find,
       find_index,
       find_map,
       find_mapi,
       iter2,
       fold_left2,
       for_all2,
       exists2,
       equal,
       compare,
       empty,
       return$0,
       cons,
       init,
       unfold,
       repeat,
       forever,
       cycle,
       iterate,
       map,
       mapi,
       filter,
       filter_map,
       scan,
       take,
       drop,
       take_while,
       drop_while,
       group,
       memoize,
       Forced_twice,
       once,
       transpose,
       append,
       concat,
       flat_map,
       flat_map,
       zip,
       map2,
       interleave,
       sorted_merge,
       product,
       map_product,
       unzip,
       unzip,
       partition_map,
       partition,
       of_dispenser,
       to_dispenser,
       ints];
   runtime.caml_register_global(10, Stdlib_Seq, "Stdlib__Seq");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Option
//# unitInfo: Requires: Stdlib, Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var runtime =  /*<<?>>*/ globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib = global_data.Stdlib,
    cst_option_is_None = "option is None";
   function some(v){
     /*<<option.ml:19:13>>*/ return [0, v] /*<<option.ml:19:13>>*/ ;
    /*<<option.ml:19:19>>*/ }
   function value(o, default$0){
     /*<<option.ml:20:23>>*/ if(! o)
      /*<<option.ml:20:58>>*/ return default$0 /*<<option.ml:20:58>>*/ ;
    var v = o[1];
     /*<<option.ml:20:46>>*/ return v /*<<option.ml:20:46>>*/ ;
    /*<<option.ml:20:65>>*/ }
   function get(param){
     /*<<option.ml:21:10>>*/ if(! param)
      /*<<option.ml:21:41>>*/ return  /*<<option.ml:21:41>>*/ caml_call1
              /*<<option.ml:21:41>>*/ (Stdlib[1], cst_option_is_None) /*<<option.ml:21:69>>*/ ;
    var v = param[1];
     /*<<option.ml:21:29>>*/ return v /*<<option.ml:21:29>>*/ ;
    /*<<option.ml:21:69>>*/ }
   function bind(o, f){
     /*<<option.ml:22:15>>*/ if(! o)
      /*<<option.ml:22:36>>*/ return 0 /*<<option.ml:22:36>>*/ ;
    var v = o[1];
     /*<<option.ml:22:53>>*/ return  /*<<option.ml:22:53>>*/ caml_call1
             /*<<option.ml:22:53>>*/ (f, v) /*<<option.ml:22:56>>*/ ;
    /*<<option.ml:22:56>>*/ }
   function join(param){
     /*<<option.ml:23:11>>*/ if(! param)
      /*<<option.ml:23:42>>*/ return 0 /*<<option.ml:23:42>>*/ ;
    var o = param[1];
     /*<<option.ml:23:30>>*/ return o /*<<option.ml:23:30>>*/ ;
    /*<<option.ml:23:46>>*/ }
   function map(f, o){
     /*<<option.ml:24:14>>*/ if(! o)
      /*<<option.ml:24:35>>*/ return 0 /*<<option.ml:24:35>>*/ ;
    var v = o[1];
     /*<<option.ml:24:52>>*/ return [0,
             /*<<option.ml:24:57>>*/ caml_call1 /*<<option.ml:24:57>>*/ (f, v)] /*<<option.ml:24:52>>*/ ;
    /*<<option.ml:24:62>>*/ }
   function fold(none, some, param){
     /*<<option.ml:25:9>>*/ if(! param)
      /*<<option.ml:25:59>>*/ return none /*<<option.ml:25:59>>*/ ;
    var v = param[1];
     /*<<option.ml:25:42>>*/ return  /*<<option.ml:25:42>>*/ caml_call1
             /*<<option.ml:25:42>>*/ (some, v) /*<<option.ml:25:63>>*/ ;
    /*<<option.ml:25:63>>*/ }
   function iter(f, param){
     /*<<option.ml:26:9>>*/ if(! param)
      /*<<option.ml:26:46>>*/ return 0 /*<<option.ml:26:46>>*/ ;
    var v = param[1];
     /*<<option.ml:26:32>>*/ return  /*<<option.ml:26:32>>*/ caml_call1
             /*<<option.ml:26:32>>*/ (f, v) /*<<option.ml:26:48>>*/ ;
    /*<<option.ml:26:48>>*/ }
   function is_none(param){
     /*<<option.ml:27:14>>*/ return param ? 0 : 1 /*<<option.ml:27:53>>*/ ;
    /*<<option.ml:27:53>>*/ }
   function is_some(param){
     /*<<option.ml:28:14>>*/ return param ? 1 : 0 /*<<option.ml:28:53>>*/ ;
    /*<<option.ml:28:53>>*/ }
   function equal(eq, o0, o1){
     /*<<option.ml:30:21>>*/ if(o0){
     if(o1){
      var v1 = o1[1], v0 = o0[1];
       /*<<option.ml:31:22>>*/ return  /*<<option.ml:31:22>>*/ caml_call2
               /*<<option.ml:31:22>>*/ (eq, v0, v1) /*<<option.ml:33:12>>*/ ;
     }
    }
    else if(! o1)  /*<<option.ml:32:16>>*/ return 1 /*<<option.ml:32:16>>*/ ;
     /*<<option.ml:33:7>>*/ return 0 /*<<option.ml:33:7>>*/ ;
    /*<<option.ml:33:12>>*/ }
   function compare(cmp, o0, o1){
     /*<<option.ml:35:24>>*/ if(! o0)
     return o1 ? -1 : 0 /*<<option.ml:39:19>>*/ ;
    var v0 = o0[1];
    if(! o1)  /*<<option.ml:39:18>>*/ return 1 /*<<option.ml:39:18>>*/ ;
    var v1 = o1[1];
     /*<<option.ml:36:22>>*/ return  /*<<option.ml:36:22>>*/ caml_call2
             /*<<option.ml:36:22>>*/ (cmp, v0, v1) /*<<option.ml:39:19>>*/ ;
    /*<<option.ml:39:19>>*/ }
   function to_result(none, param){
     /*<<option.ml:41:14>>*/ if(! param)
      /*<<option.ml:41:39>>*/ return [1, none] /*<<option.ml:41:39>>*/ ;
    var v = param[1];
     /*<<option.ml:41:62>>*/ return [0, v] /*<<option.ml:41:62>>*/ ;
    /*<<option.ml:41:66>>*/ }
   function to_list(param){
     /*<<option.ml:42:14>>*/ if(! param)
      /*<<option.ml:42:31>>*/ return 0 /*<<option.ml:42:31>>*/ ;
    var v = param[1];
     /*<<option.ml:42:46>>*/ return [0, v, 0] /*<<option.ml:42:46>>*/ ;
    /*<<option.ml:42:49>>*/ }
   function to_seq(param){
     /*<<option.ml:43:13>>*/ if(! param)
      /*<<option.ml:43:30>>*/ return Stdlib_Seq[20] /*<<option.ml:43:30>>*/ ;
    var v = param[1];
     /*<<option.ml:43:52>>*/ return  /*<<option.ml:43:52>>*/ caml_call1
             /*<<option.ml:43:52>>*/ (Stdlib_Seq[21], v) /*<<option.ml:43:64>>*/ ;
    /*<<option.ml:43:64>>*/ }
   var
    Stdlib_Option =
      [0,
       0,
       some,
       value,
       get,
       bind,
       join,
       map,
       fold,
       iter,
       is_none,
       is_some,
       equal,
       compare,
       to_result,
       to_list,
       to_seq];
   runtime.caml_register_global(3, Stdlib_Option, "Stdlib__Option");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Result
//# unitInfo: Requires: Stdlib, Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var runtime =  /*<<?>>*/ globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib = global_data.Stdlib,
    cst_result_is_Error = "result is Error _",
    cst_result_is_Ok = "result is Ok _";
   function ok(v){
     /*<<result.ml:18:11>>*/ return [0, v] /*<<result.ml:18:11>>*/ ;
    /*<<result.ml:18:15>>*/ }
   function error(e){
     /*<<result.ml:19:14>>*/ return [1, e] /*<<result.ml:19:14>>*/ ;
    /*<<result.ml:19:21>>*/ }
   function value(r, default$0){
     /*<<result.ml:20:23>>*/ if(0 !== r[0])
      /*<<result.ml:20:59>>*/ return default$0 /*<<result.ml:20:59>>*/ ;
    var v = r[1];
     /*<<result.ml:20:44>>*/ return v /*<<result.ml:20:44>>*/ ;
    /*<<result.ml:20:66>>*/ }
   function get_ok(param){
     /*<<result.ml:21:13>>*/ if(0 !== param[0])
      /*<<result.ml:21:45>>*/ return  /*<<result.ml:21:45>>*/ caml_call1
              /*<<result.ml:21:45>>*/ (Stdlib[1], cst_result_is_Error) /*<<result.ml:21:76>>*/ ;
    var v = param[1];
     /*<<result.ml:21:30>>*/ return v /*<<result.ml:21:30>>*/ ;
    /*<<result.ml:21:76>>*/ }
   function get_error(param){
     /*<<result.ml:22:16>>*/ if(0 === param[0])
      /*<<result.ml:22:48>>*/ return  /*<<result.ml:22:48>>*/ caml_call1
              /*<<result.ml:22:48>>*/ (Stdlib[1], cst_result_is_Ok) /*<<result.ml:22:76>>*/ ;
    var e = param[1];
     /*<<result.ml:22:36>>*/ return e /*<<result.ml:22:36>>*/ ;
    /*<<result.ml:22:76>>*/ }
   function bind(r, f){
     /*<<result.ml:23:15>>*/ if(0 !== r[0])
      /*<<result.ml:23:58>>*/ return r /*<<result.ml:23:58>>*/ ;
    var v = r[1];
     /*<<result.ml:23:36>>*/ return  /*<<result.ml:23:36>>*/ caml_call1
             /*<<result.ml:23:36>>*/ (f, v) /*<<result.ml:23:59>>*/ ;
    /*<<result.ml:23:59>>*/ }
   function join(e){
     /*<<result.ml:24:11>>*/ if(0 !== e[0])
      /*<<result.ml:24:48>>*/ return e /*<<result.ml:24:48>>*/ ;
    var r = e[1];
     /*<<result.ml:24:28>>*/ return r /*<<result.ml:24:28>>*/ ;
    /*<<result.ml:24:49>>*/ }
   function map(f, e){
     /*<<result.ml:25:8>>*/ if(0 !== e[0])
      /*<<result.ml:25:56>>*/ return e /*<<result.ml:25:56>>*/ ;
    var v = e[1];
     /*<<result.ml:25:29>>*/ return [0,
             /*<<result.ml:25:32>>*/ caml_call1 /*<<result.ml:25:32>>*/ (f, v)] /*<<result.ml:25:29>>*/ ;
    /*<<result.ml:25:57>>*/ }
   function map_error(f, v){
     /*<<result.ml:26:14>>*/ if(0 === v[0])
      /*<<result.ml:26:65>>*/ return v /*<<result.ml:26:65>>*/ ;
    var e = v[1];
     /*<<result.ml:26:38>>*/ return [1,
             /*<<result.ml:26:44>>*/ caml_call1 /*<<result.ml:26:44>>*/ (f, e)] /*<<result.ml:26:38>>*/ ;
    /*<<result.ml:26:66>>*/ }
   function fold(ok, error, param){
     /*<<result.ml:27:9>>*/ if(0 === param[0]){
     var v = param[1];
      /*<<result.ml:27:39>>*/ return  /*<<result.ml:27:39>>*/ caml_call1
              /*<<result.ml:27:39>>*/ (ok, v) /*<<result.ml:27:64>>*/ ;
    }
    var e = param[1];
     /*<<result.ml:27:57>>*/ return  /*<<result.ml:27:57>>*/ caml_call1
             /*<<result.ml:27:57>>*/ (error, e) /*<<result.ml:27:64>>*/ ;
    /*<<result.ml:27:64>>*/ }
   function iter(f, param){
     /*<<result.ml:28:9>>*/ if(0 !== param[0])
      /*<<result.ml:28:47>>*/ return 0 /*<<result.ml:28:47>>*/ ;
    var v = param[1];
     /*<<result.ml:28:30>>*/ return  /*<<result.ml:28:30>>*/ caml_call1
             /*<<result.ml:28:30>>*/ (f, v) /*<<result.ml:28:49>>*/ ;
    /*<<result.ml:28:49>>*/ }
   function iter_error(f, param){
     /*<<result.ml:29:15>>*/ if(0 === param[0])
      /*<<result.ml:29:53>>*/ return 0 /*<<result.ml:29:53>>*/ ;
    var e = param[1];
     /*<<result.ml:29:39>>*/ return  /*<<result.ml:29:39>>*/ caml_call1
             /*<<result.ml:29:39>>*/ (f, e) /*<<result.ml:29:55>>*/ ;
    /*<<result.ml:29:55>>*/ }
   function is_ok(param){
     /*<<result.ml:30:12>>*/ return 0 === param[0] ? 1 : 0 /*<<result.ml:30:52>>*/ ;
    /*<<result.ml:30:52>>*/ }
   function is_error(param){
     /*<<result.ml:31:15>>*/ return 0 === param[0] ? 0 : 1 /*<<result.ml:31:55>>*/ ;
    /*<<result.ml:31:55>>*/ }
   function equal(ok, error, r0, r1){
     /*<<result.ml:33:29>>*/ if(0 === r0[0]){
     var v0 = r0[1];
     if(0 === r1[0]){
      var v1 = r1[1];
       /*<<result.ml:34:18>>*/ return  /*<<result.ml:34:18>>*/ caml_call2
               /*<<result.ml:34:18>>*/ (ok, v0, v1) /*<<result.ml:36:15>>*/ ;
     }
    }
    else{
     var e0 = r0[1];
     if(0 !== r1[0]){
      var e1 = r1[1];
       /*<<result.ml:35:24>>*/ return  /*<<result.ml:35:24>>*/ caml_call2
               /*<<result.ml:35:24>>*/ (error, e0, e1) /*<<result.ml:36:15>>*/ ;
     }
    }
     /*<<result.ml:36:10>>*/ return 0 /*<<result.ml:36:10>>*/ ;
    /*<<result.ml:36:15>>*/ }
   function compare(ok, error, r0, r1){
     /*<<result.ml:38:31>>*/ if(0 === r0[0]){
     var v0 = r0[1];
     if(0 !== r1[0])
       /*<<result.ml:41:19>>*/ return -1 /*<<result.ml:41:19>>*/ ;
     var v1 = r1[1];
      /*<<result.ml:39:18>>*/ return  /*<<result.ml:39:18>>*/ caml_call2
              /*<<result.ml:39:18>>*/ (ok, v0, v1) /*<<result.ml:42:20>>*/ ;
    }
    var e0 = r0[1];
    if(0 === r1[0])
      /*<<result.ml:42:19>>*/ return 1 /*<<result.ml:42:19>>*/ ;
    var e1 = r1[1];
     /*<<result.ml:40:24>>*/ return  /*<<result.ml:40:24>>*/ caml_call2
             /*<<result.ml:40:24>>*/ (error, e0, e1) /*<<result.ml:42:20>>*/ ;
    /*<<result.ml:42:20>>*/ }
   function to_option(param){
     /*<<result.ml:44:16>>*/ if(0 !== param[0])
      /*<<result.ml:44:53>>*/ return 0 /*<<result.ml:44:53>>*/ ;
    var v = param[1];
     /*<<result.ml:44:33>>*/ return [0, v] /*<<result.ml:44:33>>*/ ;
    /*<<result.ml:44:57>>*/ }
   function to_list(param){
     /*<<result.ml:45:14>>*/ if(0 !== param[0])
      /*<<result.ml:45:48>>*/ return 0 /*<<result.ml:45:48>>*/ ;
    var v = param[1];
     /*<<result.ml:45:31>>*/ return [0, v, 0] /*<<result.ml:45:31>>*/ ;
    /*<<result.ml:45:50>>*/ }
   function to_seq(param){
     /*<<result.ml:46:13>>*/ if(0 !== param[0])
      /*<<result.ml:46:56>>*/ return Stdlib_Seq[20] /*<<result.ml:46:56>>*/ ;
    var v = param[1];
     /*<<result.ml:46:30>>*/ return  /*<<result.ml:46:30>>*/ caml_call1
             /*<<result.ml:46:30>>*/ (Stdlib_Seq[21], v) /*<<result.ml:46:65>>*/ ;
    /*<<result.ml:46:65>>*/ }
   var
    Stdlib_Result =
      [0,
       ok,
       error,
       value,
       get_ok,
       get_error,
       bind,
       join,
       map,
       map_error,
       fold,
       iter,
       iter_error,
       is_ok,
       is_error,
       equal,
       compare,
       to_option,
       to_list,
       to_seq];
   runtime.caml_register_global(4, Stdlib_Result, "Stdlib__Result");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Bool
(function(globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_hash =  /*<<?>>*/ runtime.caml_hash;
   function equal(_d_, _c_){ /*<<?>>*/ return _d_ === _c_ ? 1 : 0;}
   var
    compare = runtime.caml_int_compare,
    cst_true = "true",
    cst_false = "false";
   function to_float(param){
     /*<<bool.ml:24:15>>*/ return param ? 1. : 0. /*<<bool.ml:24:48>>*/ ;
    /*<<bool.ml:24:48>>*/ }
   function to_string(param){
     /*<<bool.ml:33:16>>*/ return param ? cst_true : cst_false /*<<bool.ml:33:58>>*/ ;
    /*<<bool.ml:33:58>>*/ }
   function seeded_hash(seed, x){
     /*<<bool.ml:37:25>>*/ return  /*<<bool.ml:37:25>>*/ caml_hash
             /*<<bool.ml:37:25>>*/ (10, 100, seed, x) /*<<bool.ml:37:56>>*/ ;
    /*<<bool.ml:37:56>>*/ }
   function hash(x){
     /*<<bool.ml:38:13>>*/ return  /*<<bool.ml:38:13>>*/ caml_hash
             /*<<bool.ml:38:13>>*/ (10, 100, 0, x) /*<<bool.ml:38:41>>*/ ;
    /*<<bool.ml:38:41>>*/ }
   var
    Stdlib_Bool =
      [0,
       function(_b_){ /*<<?>>*/ return 1 - _b_;},
       equal,
       compare,
       function(_a_){ /*<<?>>*/ return _a_;},
       to_float,
       to_string,
       seeded_hash,
       hash];
   runtime.caml_register_global(4, Stdlib_Bool, "Stdlib__Bool");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Char
//# unitInfo: Requires: Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_bytes_unsafe_set =  /*<<?>>*/ runtime.caml_bytes_unsafe_set,
    caml_create_bytes =  /*<<?>>*/ runtime.caml_create_bytes,
    caml_hash =  /*<<?>>*/ runtime.caml_hash,
    caml_string_of_bytes =  /*<<?>>*/ runtime.caml_string_of_bytes;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "\\\\",
    cst$0 = "\\'",
    Stdlib = global_data.Stdlib,
    cst_Char_chr = "Char.chr",
    cst_b = "\\b",
    cst_t = "\\t",
    cst_n = "\\n",
    cst_r = "\\r";
   function chr(n){
     /*<<char.ml:22:2>>*/ if(0 <= n && 255 >= n)
      /*<<char.ml:22:55>>*/ return n /*<<char.ml:22:55>>*/ ;
     /*<<char.ml:22:27>>*/ return  /*<<char.ml:22:27>>*/ caml_call1
             /*<<char.ml:22:27>>*/ (Stdlib[1], cst_Char_chr) /*<<char.ml:22:67>>*/ ;
    /*<<char.ml:22:67>>*/ }
   function escaped(c){
    a:
    {
     if(40 <= c){
      if(92 === c)  /*<<char.ml:31:12>>*/ return cst /*<<char.ml:31:12>>*/ ;
      if(127 > c) break a;
     }
     else{
      if(32 <= c){
       if(39 <= c)  /*<<char.ml:30:12>>*/ return cst$0 /*<<char.ml:30:12>>*/ ;
       break a;
      }
      if(14 > c)
       switch(c){
         case 8:
           /*<<char.ml:35:12>>*/ return cst_b /*<<char.ml:35:12>>*/ ;
         case 9:
           /*<<char.ml:33:12>>*/ return cst_t /*<<char.ml:33:12>>*/ ;
         case 10:
           /*<<char.ml:32:12>>*/ return cst_n /*<<char.ml:32:12>>*/ ;
         case 13:
           /*<<char.ml:34:12>>*/ return cst_r /*<<char.ml:34:12>>*/ ;
       }
     }
     var
      s =
         /*<<char.ml:42:14>>*/  /*<<char.ml:42:14>>*/ caml_create_bytes
          /*<<char.ml:42:14>>*/ (4);
     caml_bytes_unsafe_set(s, 0, 92);
     caml_bytes_unsafe_set(s, 1, 48 + (c / 100 | 0) | 0);
     caml_bytes_unsafe_set(s, 2, 48 + ((c / 10 | 0) % 10 | 0) | 0);
     caml_bytes_unsafe_set(s, 3, 48 + (c % 10 | 0) | 0);
     return caml_string_of_bytes(s) /*<<char.ml:47:24>>*/ ;
    }
    var
     s$0 =
        /*<<char.ml:37:14>>*/  /*<<char.ml:37:14>>*/ caml_create_bytes
         /*<<char.ml:37:14>>*/ (1);
    caml_bytes_unsafe_set(s$0, 0, c);
    return caml_string_of_bytes(s$0) /*<<char.ml:47:24>>*/ ;
    /*<<char.ml:47:24>>*/ }
   function lowercase_ascii(c){
     /*<<char.ml:49:22>>*/ return 25 < c - 65 >>> 0 ? c : c + 32 | 0 /*<<char.ml:51:10>>*/ ;
    /*<<char.ml:51:10>>*/ }
   function uppercase_ascii(c){
     /*<<char.ml:53:22>>*/ return 25 < c - 97 >>> 0 ? c : c - 32 | 0 /*<<char.ml:55:10>>*/ ;
    /*<<char.ml:55:10>>*/ }
   function compare(c1, c2){
     /*<<char.ml:59:20>>*/ return c1 - c2 | 0;
    /*<<char.ml:59:37>>*/ }
   function equal(c1, c2){
     /*<<char.ml:60:28>>*/ return 0 === (c1 - c2 | 0) ? 1 : 0;
    /*<<char.ml:60:45>>*/ }
   function seeded_hash(seed, x){
     /*<<char.ml:64:25>>*/ return  /*<<char.ml:64:25>>*/ caml_hash
             /*<<char.ml:64:25>>*/ (10, 100, seed, x) /*<<char.ml:64:56>>*/ ;
    /*<<char.ml:64:56>>*/ }
   function hash(x){
     /*<<char.ml:65:13>>*/ return  /*<<char.ml:65:13>>*/ caml_hash
             /*<<char.ml:65:13>>*/ (10, 100, 0, x) /*<<char.ml:65:41>>*/ ;
    /*<<char.ml:65:41>>*/ }
   var
    Stdlib_Char =
      [0,
       chr,
       escaped,
       lowercase_ascii,
       uppercase_ascii,
       compare,
       equal,
       seeded_hash,
       hash];
   runtime.caml_register_global(8, Stdlib_Char, "Stdlib__Char");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Uchar
//# unitInfo: Requires: Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst_uchar_ml =  /*<<?>>*/ "uchar.ml",
    caml_format_int =  /*<<?>>*/ runtime.caml_format_int,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    err_no_pred = "U+0000 has no predecessor",
    err_no_succ = "U+10FFFF has no successor",
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    cst_is_not_an_Unicode_scalar_v = " is not an Unicode scalar value",
    cst_is_not_a_latin1_character = " is not a latin1 character",
    cst_U = "U+",
    lo_bound = 55295,
    hi_bound = 57344;
   function succ(u){
     /*<<uchar.ml:34:2>>*/ return u === 55295
            ? hi_bound
            : u === 1114111 ? caml_call1(Stdlib[1], err_no_succ) : u + 1 | 0 /*<<uchar.ml:36:7>>*/ ;
    /*<<uchar.ml:36:7>>*/ }
   function pred(u){
     /*<<uchar.ml:39:2>>*/ return u === 57344
            ? lo_bound
            : u === 0 ? caml_call1(Stdlib[1], err_no_pred) : u - 1 | 0 /*<<uchar.ml:41:7>>*/ ;
    /*<<uchar.ml:41:7>>*/ }
   function is_valid(i){
    var _n_ = 0 <= i ? 1 : 0, _o_ = _n_ ? i <= 55295 ? 1 : 0 : _n_;
    if(_o_)
     var _p_ = _o_;
    else
     var _q_ = 57344 <= i ? 1 : 0, _p_ = _q_ ? i <= 1114111 ? 1 : 0 : _q_;
    return _p_;
    /*<<uchar.ml:43:75>>*/ }
   function of_int(i){
     /*<<uchar.ml:44:15>>*/ if
     ( /*<<uchar.ml:44:18>>*/ is_valid /*<<uchar.ml:44:18>>*/ (i))
      /*<<uchar.ml:44:34>>*/ return i /*<<uchar.ml:44:34>>*/ ;
    var
     _m_ =
        /*<<uchar.ml:20:19>>*/  /*<<uchar.ml:20:19>>*/ caml_call2
         /*<<uchar.ml:20:19>>*/ (Stdlib[28],
          /*<<uchar.ml:20:19>>*/ caml_format_int
           /*<<uchar.ml:20:19>>*/ ("%X", i),
         cst_is_not_an_Unicode_scalar_v);
     /*<<uchar.ml:44:53>>*/ return  /*<<uchar.ml:44:53>>*/ caml_call1
             /*<<uchar.ml:44:53>>*/ (Stdlib[1], _m_) /*<<uchar.ml:44:67>>*/ ;
    /*<<uchar.ml:44:67>>*/ }
   function is_char(u){
     /*<<uchar.ml:48:16>>*/ return u < 256 ? 1 : 0;
    /*<<uchar.ml:48:23>>*/ }
   function of_char(c){
     /*<<uchar.ml:49:16>>*/ return c /*<<uchar.ml:49:16>>*/ ;
    /*<<uchar.ml:49:27>>*/ }
   function to_char(u){
     /*<<uchar.ml:51:2>>*/ if(255 >= u)
      /*<<uchar.ml:52:2>>*/ return u /*<<uchar.ml:52:2>>*/ ;
    var
     _k_ =
        /*<<uchar.ml:21:30>>*/  /*<<uchar.ml:21:30>>*/ caml_call2
         /*<<uchar.ml:21:30>>*/ (Stdlib[28],
          /*<<uchar.ml:21:30>>*/ caml_format_int
           /*<<uchar.ml:21:30>>*/ ("%04X", u),
         cst_is_not_a_latin1_character),
     _l_ =
        /*<<uchar.ml:21:30>>*/  /*<<uchar.ml:21:30>>*/ caml_call2
         /*<<uchar.ml:21:30>>*/ (Stdlib[28], cst_U, _k_);
     /*<<uchar.ml:51:30>>*/ return  /*<<uchar.ml:51:30>>*/ caml_call1
             /*<<uchar.ml:51:30>>*/ (Stdlib[1], _l_) /*<<uchar.ml:52:19>>*/ ;
    /*<<uchar.ml:52:19>>*/ }
   function unsafe_to_char(_j_){ /*<<?>>*/ return _j_;}
   function equal(_i_, _h_){ /*<<?>>*/ return _i_ === _h_ ? 1 : 0;}
   var
    compare = runtime.caml_int_compare,
    _a_ = [0, cst_uchar_ml, 85, 7],
    _b_ = [0, cst_uchar_ml, 80, 18],
    _c_ = [0, cst_uchar_ml, 91, 7],
    _d_ = [0, cst_uchar_ml, 88, 18];
   function hash(_g_){ /*<<?>>*/ return _g_;}
   function utf_decode_is_valid(d){
     /*<<uchar.ml:73:37>>*/ return 1 === (d >>> 27 | 0) ? 1 : 0;
    /*<<uchar.ml:73:58>>*/ }
   function utf_decode_length(d){
     /*<<uchar.ml:74:35>>*/ return (d >>> 24 | 0) & 7;
    /*<<uchar.ml:74:65>>*/ }
   function utf_decode_uchar(d){
     /*<<uchar.ml:75:34>>*/ return d & 16777215;
    /*<<uchar.ml:75:65>>*/ }
   function utf_decode(n, u){
     /*<<uchar.ml:76:30>>*/ return (8 | n) << 24 | u;
    /*<<uchar.ml:76:72>>*/ }
   function utf_decode_invalid(n){
     /*<<uchar.ml:77:36>>*/ return n << 24 | 65533;
    /*<<uchar.ml:77:63>>*/ }
   function utf_8_byte_length(u){
     /*<<uchar.ml:79:26>>*/ if(0 > u)
      /*<<uchar.ml:80:18>>*/ throw  /*<<uchar.ml:80:18>>*/ caml_maybe_attach_backtrace
             /*<<uchar.ml:80:18>>*/ ([0, Assert_failure, _b_], 1);
     /*<<uchar.ml:81:9>>*/ if(127 >= u)
      /*<<uchar.ml:81:24>>*/ return 1 /*<<uchar.ml:81:24>>*/ ;
     /*<<uchar.ml:82:9>>*/ if(2047 >= u)
      /*<<uchar.ml:82:24>>*/ return 2 /*<<uchar.ml:82:24>>*/ ;
     /*<<uchar.ml:83:9>>*/ if(65535 >= u)
      /*<<uchar.ml:83:24>>*/ return 3 /*<<uchar.ml:83:24>>*/ ;
     /*<<uchar.ml:84:9>>*/ if(1114111 < u)
      /*<<uchar.ml:85:7>>*/ throw  /*<<uchar.ml:85:7>>*/ caml_maybe_attach_backtrace
             /*<<uchar.ml:85:7>>*/ ([0, Assert_failure, _a_], 1);
     /*<<uchar.ml:84:26>>*/ return 4 /*<<uchar.ml:84:26>>*/ ;
    /*<<uchar.ml:85:19>>*/ }
   function utf_16_byte_length(u){
     /*<<uchar.ml:87:27>>*/ if(0 > u)
      /*<<uchar.ml:88:18>>*/ throw  /*<<uchar.ml:88:18>>*/ caml_maybe_attach_backtrace
             /*<<uchar.ml:88:18>>*/ ([0, Assert_failure, _d_], 1);
     /*<<uchar.ml:89:9>>*/ if(65535 >= u)
      /*<<uchar.ml:89:24>>*/ return 2 /*<<uchar.ml:89:24>>*/ ;
     /*<<uchar.ml:90:9>>*/ if(1114111 < u)
      /*<<uchar.ml:91:7>>*/ throw  /*<<uchar.ml:91:7>>*/ caml_maybe_attach_backtrace
             /*<<uchar.ml:91:7>>*/ ([0, Assert_failure, _c_], 1);
     /*<<uchar.ml:90:26>>*/ return 4 /*<<uchar.ml:90:26>>*/ ;
    /*<<uchar.ml:91:19>>*/ }
   var
    Stdlib_Uchar =
      [0,
       0,
       1114111,
       65279,
       65533,
       succ,
       pred,
       is_valid,
       of_int,
       function(_f_){ /*<<?>>*/ return _f_;},
       function(_e_){ /*<<?>>*/ return _e_;},
       is_char,
       of_char,
       to_char,
       unsafe_to_char,
       equal,
       compare,
       hash,
       utf_decode_is_valid,
       utf_decode_uchar,
       utf_decode_length,
       utf_decode,
       utf_decode_invalid,
       utf_8_byte_length,
       utf_16_byte_length];
   runtime.caml_register_global(13, Stdlib_Uchar, "Stdlib__Uchar");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__List
//# unitInfo: Requires: Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst_List_map2$1 =  /*<<?>>*/ "List.map2",
    cst_List_nth$1 =  /*<<?>>*/ "List.nth",
    caml_compare =  /*<<?>>*/ runtime.caml_compare,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    cst_hd = "hd",
    cst_tl = "tl",
    cst_nth = "nth",
    cst_List_nth = cst_List_nth$1,
    cst_List_nth$0 = cst_List_nth$1;
   function length(l$0){
    var len = 0, param = l$0;
     /*<<list.ml:21:19>>*/ for(;;){
     if(! param)  /*<<list.ml:22:10>>*/ return len /*<<list.ml:22:10>>*/ ;
     var l = param[2], len$0 =  /*<<list.ml:23:12>>*/ len + 1 | 0;
     len = len$0;
     param = l;
    }
    /*<<list.ml:25:29>>*/ }
   function cons(a, l){
     /*<<list.ml:27:15>>*/ return [0, a, l] /*<<list.ml:27:15>>*/ ;
    /*<<list.ml:27:19>>*/ }
   function hd(param){
     /*<<list.ml:29:9>>*/ if(! param)
      /*<<list.ml:30:10>>*/ return  /*<<list.ml:30:10>>*/ caml_call1
              /*<<list.ml:30:10>>*/ (Stdlib[2], cst_hd) /*<<list.ml:31:13>>*/ ;
    var a = param[1];
     /*<<list.ml:31:12>>*/ return a /*<<list.ml:31:12>>*/ ;
    /*<<list.ml:31:13>>*/ }
   function tl(param){
     /*<<list.ml:33:9>>*/ if(! param)
      /*<<list.ml:34:10>>*/ return  /*<<list.ml:34:10>>*/ caml_call1
              /*<<list.ml:34:10>>*/ (Stdlib[2], cst_tl) /*<<list.ml:35:13>>*/ ;
    var l = param[2];
     /*<<list.ml:35:12>>*/ return l /*<<list.ml:35:12>>*/ ;
    /*<<list.ml:35:13>>*/ }
   function nth(l, n){
     /*<<list.ml:38:2>>*/ if(0 > n)
      /*<<list.ml:38:16>>*/ return  /*<<list.ml:38:16>>*/ caml_call1
              /*<<list.ml:38:16>>*/ (Stdlib[1], cst_List_nth) /*<<list.ml:43:16>>*/ ;
    var l$0 = l, n$0 = n;
     /*<<list.ml:40:4>>*/ for(;;){
     if(! l$0)
       /*<<list.ml:41:12>>*/ return  /*<<list.ml:41:12>>*/ caml_call1
               /*<<list.ml:41:12>>*/ (Stdlib[2], cst_nth) /*<<list.ml:43:16>>*/ ;
     var l$1 = l$0[2], a = l$0[1];
      /*<<list.ml:42:14>>*/ if(0 === n$0)
       /*<<list.ml:42:28>>*/ return a /*<<list.ml:42:28>>*/ ;
     var n$1 =  /*<<list.ml:42:35>>*/ n$0 - 1 | 0;
     l$0 = l$1;
     n$0 = n$1;
    }
    /*<<list.ml:43:16>>*/ }
   function nth_opt(l, n){
     /*<<list.ml:46:2>>*/ if(0 > n)
      /*<<list.ml:46:16>>*/ return  /*<<list.ml:46:16>>*/ caml_call1
              /*<<list.ml:46:16>>*/ (Stdlib[1], cst_List_nth$0) /*<<list.ml:51:16>>*/ ;
    var l$0 = l, n$0 = n;
     /*<<list.ml:48:4>>*/ for(;;){
     if(! l$0)  /*<<list.ml:49:12>>*/ return 0 /*<<list.ml:49:12>>*/ ;
     var l$1 = l$0[2], a = l$0[1];
      /*<<list.ml:50:14>>*/ if(0 === n$0)
       /*<<list.ml:50:28>>*/ return [0, a] /*<<list.ml:50:28>>*/ ;
     var n$1 =  /*<<list.ml:50:40>>*/ n$0 - 1 | 0;
     l$0 = l$1;
     n$0 = n$1;
    }
    /*<<list.ml:51:16>>*/ }
   var
    append =  /*<<list.ml:45:12>>*/ Stdlib[37],
    cst_List_init = "List.init",
    cst_List_map2 = cst_List_map2$1,
    cst_List_map2$0 = cst_List_map2$1,
    cst_List_rev_map2 = "List.rev_map2",
    cst_List_iter2 = "List.iter2",
    cst_List_fold_left2 = "List.fold_left2",
    cst_List_fold_right2 = "List.fold_right2",
    cst_List_for_all2 = "List.for_all2",
    cst_List_exists2 = "List.exists2",
    _a_ = [0, 0, 0],
    cst_List_combine = "List.combine";
   function rev_append(l1, l2){
    var l1$0 = l1, l2$0 = l2;
     /*<<list.ml:56:2>>*/ for(;;){
     if(! l1$0)  /*<<list.ml:57:10>>*/ return l2$0 /*<<list.ml:57:10>>*/ ;
     var
      l1$1 = l1$0[2],
      a = l1$0[1],
      l2$1 =  /*<<list.ml:58:27>>*/ [0, a, l2$0];
     l1$0 = l1$1;
     l2$0 = l2$1;
    }
    /*<<list.ml:58:36>>*/ }
   function rev(l){
     /*<<list.ml:60:12>>*/ return  /*<<list.ml:60:12>>*/ rev_append
             /*<<list.ml:60:12>>*/ (l, 0) /*<<list.ml:60:27>>*/ ;
    /*<<list.ml:60:27>>*/ }
   function init(len, f){
     /*<<list.ml:71:2>>*/ if(0 > len)
      /*<<list.ml:71:18>>*/ return  /*<<list.ml:71:18>>*/ caml_call1
              /*<<list.ml:71:18>>*/ (Stdlib[1], cst_List_init) /*<<list.ml:72:20>>*/ ;
    var last = len - 1 | 0, i$1 = 0;
    if(last < 0)  /*<<list.ml:63:19>>*/ return 0 /*<<list.ml:63:19>>*/ ;
    if(0 === last)
      /*<<list.ml:64:24>>*/ return [0,
              /*<<list.ml:64:25>>*/ caml_call1 /*<<list.ml:64:25>>*/ (f, i$1),
             0] /*<<list.ml:64:24>>*/ ;
    var
     r1 =
        /*<<list.ml:66:13>>*/  /*<<list.ml:66:13>>*/ caml_call1
         /*<<list.ml:66:13>>*/ (f, i$1),
     r2 =
        /*<<list.ml:67:13>>*/  /*<<list.ml:67:13>>*/ caml_call1
         /*<<list.ml:67:13>>*/ (f, 1),
     block =  /*<<list.ml:68:10>>*/ [0, r2, 24029],
     dst = block,
     offset = 1,
     i = 2;
     /*<<list.ml:63:2>>*/ for(;;){
     if(last < i)
      dst[1 + offset] = 0;
     else{
      if(i !== last){
       var
        r1$0 =
           /*<<list.ml:66:13>>*/  /*<<list.ml:66:13>>*/ caml_call1
            /*<<list.ml:66:13>>*/ (f, i),
        r2$0 =
           /*<<list.ml:67:13>>*/  /*<<list.ml:67:13>>*/ caml_call1
            /*<<list.ml:67:13>>*/ (f, i + 1 | 0),
        dst$0 =  /*<<list.ml:68:10>>*/ [0, r2$0, 24029];
       dst[1 + offset] = [0, r1$0, dst$0];
       var i$0 = i + 2 | 0;
       dst = dst$0;
       offset = 1;
       i = i$0;
       continue;
      }
      dst[1 + offset] =
       [0,  /*<<list.ml:64:25>>*/ caml_call1 /*<<list.ml:64:25>>*/ (f, i), 0];
     }
      /*<<list.ml:68:4>>*/ return [0, r1, block] /*<<list.ml:68:4>>*/ ;
    }
    /*<<list.ml:72:20>>*/ }
   function flatten(param){
     /*<<list.ml:74:18>>*/ if(! param)
      /*<<list.ml:75:10>>*/ return 0 /*<<list.ml:75:10>>*/ ;
    var
     r = param[2],
     l = param[1],
     _I_ =
        /*<<list.ml:76:16>>*/  /*<<list.ml:76:16>>*/ flatten
         /*<<list.ml:76:16>>*/ (r);
     /*<<list.ml:76:16>>*/ return  /*<<list.ml:76:16>>*/ caml_call2
             /*<<list.ml:76:16>>*/ (Stdlib[37], l, _I_) /*<<list.ml:76:25>>*/ ;
    /*<<list.ml:76:25>>*/ }
   function map(f, param){
     /*<<list.ml:80:28>>*/ if(! param)
      /*<<list.ml:81:10>>*/ return 0 /*<<list.ml:81:10>>*/ ;
    var match = param[2], a1 = param[1];
    if(! match){
     var
      r1$0 =
         /*<<list.ml:83:15>>*/  /*<<list.ml:83:15>>*/ caml_call1
          /*<<list.ml:83:15>>*/ (f, a1);
      /*<<list.ml:84:6>>*/ return [0, r1$0, 0] /*<<list.ml:84:6>>*/ ;
    }
    var
     l = match[2],
     a2 = match[1],
     r1 =
        /*<<list.ml:86:15>>*/  /*<<list.ml:86:15>>*/ caml_call1
         /*<<list.ml:86:15>>*/ (f, a1),
     r2 =
        /*<<list.ml:87:15>>*/  /*<<list.ml:87:15>>*/ caml_call1
         /*<<list.ml:87:15>>*/ (f, a2),
     block =  /*<<list.ml:88:10>>*/ [0, r2, 24029],
     dst = block,
     offset = 1,
     param$0 = l;
     /*<<list.ml:80:28>>*/ for(;;){
     if(param$0){
      var match$0 = param$0[2], a1$0 = param$0[1];
      if(match$0){
       var
        l$0 = match$0[2],
        a2$0 = match$0[1],
        r1$1 =
           /*<<list.ml:86:15>>*/  /*<<list.ml:86:15>>*/ caml_call1
            /*<<list.ml:86:15>>*/ (f, a1$0),
        r2$0 =
           /*<<list.ml:87:15>>*/  /*<<list.ml:87:15>>*/ caml_call1
            /*<<list.ml:87:15>>*/ (f, a2$0),
        dst$0 =  /*<<list.ml:88:10>>*/ [0, r2$0, 24029];
       dst[1 + offset] = [0, r1$1, dst$0];
       dst = dst$0;
       offset = 1;
       param$0 = l$0;
       continue;
      }
      var
       r1$2 =
          /*<<list.ml:83:15>>*/  /*<<list.ml:83:15>>*/ caml_call1
           /*<<list.ml:83:15>>*/ (f, a1$0);
      dst[1 + offset] = [0, r1$2, 0];
     }
     else
      dst[1 + offset] = 0;
      /*<<list.ml:88:6>>*/ return [0, r1, block] /*<<list.ml:88:6>>*/ ;
    }
    /*<<list.ml:88:21>>*/ }
   function mapi(f, l$1){
    var i$1 = 0;
    if(! l$1)  /*<<list.ml:91:10>>*/ return 0 /*<<list.ml:91:10>>*/ ;
    var match = l$1[2], a1 = l$1[1];
    if(! match){
     var
      r1$0 =
         /*<<list.ml:93:15>>*/  /*<<list.ml:93:15>>*/ caml_call2
          /*<<list.ml:93:15>>*/ (f, i$1, a1);
      /*<<list.ml:94:6>>*/ return [0, r1$0, 0] /*<<list.ml:94:6>>*/ ;
    }
    var
     l = match[2],
     a2 = match[1],
     r1 =
        /*<<list.ml:96:15>>*/  /*<<list.ml:96:15>>*/ caml_call2
         /*<<list.ml:96:15>>*/ (f, i$1, a1),
     r2 =
        /*<<list.ml:97:15>>*/  /*<<list.ml:97:15>>*/ caml_call2
         /*<<list.ml:97:15>>*/ (f, 1, a2),
     block =  /*<<list.ml:98:10>>*/ [0, r2, 24029],
     dst = block,
     offset = 1,
     i = 2,
     param = l;
     /*<<list.ml:90:29>>*/ for(;;){
     if(param){
      var match$0 = param[2], a1$0 = param[1];
      if(match$0){
       var
        l$0 = match$0[2],
        a2$0 = match$0[1],
        r1$1 =
           /*<<list.ml:96:15>>*/  /*<<list.ml:96:15>>*/ caml_call2
            /*<<list.ml:96:15>>*/ (f, i, a1$0),
        r2$0 =
           /*<<list.ml:97:15>>*/  /*<<list.ml:97:15>>*/ caml_call2
            /*<<list.ml:97:15>>*/ (f, i + 1 | 0, a2$0),
        dst$0 =  /*<<list.ml:98:10>>*/ [0, r2$0, 24029];
       dst[1 + offset] = [0, r1$1, dst$0];
       var i$0 = i + 2 | 0;
       dst = dst$0;
       offset = 1;
       i = i$0;
       param = l$0;
       continue;
      }
      var
       r1$2 =
          /*<<list.ml:93:15>>*/  /*<<list.ml:93:15>>*/ caml_call2
           /*<<list.ml:93:15>>*/ (f, i, a1$0);
      dst[1 + offset] = [0, r1$2, 0];
     }
     else
      dst[1 + offset] = 0;
      /*<<list.ml:98:6>>*/ return [0, r1, block] /*<<list.ml:98:6>>*/ ;
    }
    /*<<list.ml:100:25>>*/ }
   function rev_map(f, l){
    var accu = 0, param = l;
     /*<<list.ml:103:17>>*/ for(;;){
     if(! param)  /*<<list.ml:104:12>>*/ return accu /*<<list.ml:104:12>>*/ ;
     var
      l$0 = param[2],
      a = param[1],
      accu$0 =
         /*<<list.ml:105:21>>*/ [0,
          /*<<list.ml:105:22>>*/ caml_call1 /*<<list.ml:105:22>>*/ (f, a),
         accu];
     accu = accu$0;
     param = l$0;
    }
    /*<<list.ml:107:13>>*/ }
   function iter(f, param){
    var param$0 = param;
     /*<<list.ml:110:13>>*/ for(;;){
     if(! param$0)  /*<<list.ml:111:10>>*/ return 0 /*<<list.ml:111:10>>*/ ;
     var l = param$0[2], a = param$0[1];
      /*<<list.ml:112:12>>*/  /*<<list.ml:112:12>>*/ caml_call1
       /*<<list.ml:112:12>>*/ (f, a);
     param$0 = l;
    }
    /*<<list.ml:112:25>>*/ }
   function iteri(f, l$0){
    var i = 0, param = l$0;
     /*<<list.ml:114:14>>*/ for(;;){
     if(! param)  /*<<list.ml:115:10>>*/ return 0 /*<<list.ml:115:10>>*/ ;
     var l = param[2], a = param[1];
      /*<<list.ml:116:12>>*/  /*<<list.ml:116:12>>*/ caml_call2
       /*<<list.ml:116:12>>*/ (f, i, a);
     var i$0 = i + 1 | 0;
     i = i$0;
     param = l;
    }
    /*<<list.ml:118:27>>*/ }
   function fold_left(f, accu, l){
    var accu$0 = accu, l$0 = l;
     /*<<list.ml:121:2>>*/ for(;;){
     if(! l$0)  /*<<list.ml:122:10>>*/ return accu$0 /*<<list.ml:122:10>>*/ ;
     var
      l$1 = l$0[2],
      a = l$0[1],
      accu$1 =
         /*<<list.ml:123:24>>*/  /*<<list.ml:123:24>>*/ caml_call2
          /*<<list.ml:123:24>>*/ (f, accu$0, a);
     accu$0 = accu$1;
     l$0 = l$1;
    }
    /*<<list.ml:123:36>>*/ }
   function fold_right(f, l, accu){
     /*<<list.ml:126:2>>*/ if(! l)
      /*<<list.ml:127:10>>*/ return accu /*<<list.ml:127:10>>*/ ;
    var l$0 = l[2], a = l[1];
     /*<<list.ml:128:16>>*/ return  /*<<list.ml:128:16>>*/ caml_call2
             /*<<list.ml:128:16>>*/ (f,
             a,
              /*<<list.ml:128:16>>*/ fold_right
               /*<<list.ml:128:16>>*/ (f, l$0, accu)) /*<<list.ml:128:37>>*/ ;
    /*<<list.ml:128:37>>*/ }
   function map2(f, l1, l2){
     /*<<list.ml:131:2>>*/ if(l1){
     var _G_ = l1[2], a1 = l1[1];
     if(_G_){
      if(l2){
       var match = l2[2];
       if(match){
        var
         l2$0 = match[2],
         b2 = match[1],
         b1 = l2[1],
         l1$0 = _G_[2],
         a2 = _G_[1],
         r1 =
            /*<<list.ml:137:15>>*/  /*<<list.ml:137:15>>*/ caml_call2
             /*<<list.ml:137:15>>*/ (f, a1, b1),
         r2 =
            /*<<list.ml:138:15>>*/  /*<<list.ml:138:15>>*/ caml_call2
             /*<<list.ml:138:15>>*/ (f, a2, b2),
         block =  /*<<list.ml:139:10>>*/ [0, r2, 24029],
         dst = block,
         offset = 1,
         l1$1 = l1$0,
         l2$1 = l2$0;
         /*<<list.ml:131:2>>*/ for(;;){
         a:
         {
          if(l1$1){
           var _H_ = l1$1[2], a1$0 = l1$1[1];
           if(_H_){
            if(l2$1){
             var match$0 = l2$1[2];
             if(match$0){
              var
               l2$2 = match$0[2],
               b2$0 = match$0[1],
               b1$1 = l2$1[1],
               l1$2 = _H_[2],
               a2$0 = _H_[1],
               r1$1 =
                  /*<<list.ml:137:15>>*/  /*<<list.ml:137:15>>*/ caml_call2
                   /*<<list.ml:137:15>>*/ (f, a1$0, b1$1),
               r2$0 =
                  /*<<list.ml:138:15>>*/  /*<<list.ml:138:15>>*/ caml_call2
                   /*<<list.ml:138:15>>*/ (f, a2$0, b2$0),
               dst$0 =  /*<<list.ml:139:10>>*/ [0, r2$0, 24029];
              dst[1 + offset] = [0, r1$1, dst$0];
              dst = dst$0;
              offset = 1;
              l1$1 = l1$2;
              l2$1 = l2$2;
              continue;
             }
            }
           }
           else if(l2$1 && ! l2$1[2]){
            var
             b1$2 = l2$1[1],
             r1$2 =
                /*<<list.ml:134:15>>*/  /*<<list.ml:134:15>>*/ caml_call2
                 /*<<list.ml:134:15>>*/ (f, a1$0, b1$2);
            dst[1 + offset] = [0, r1$2, 0];
            break a;
           }
          }
          else if(! l2$1){dst[1 + offset] = 0; break a;}
          dst[1 + offset] = caml_call1(Stdlib[1], cst_List_map2$0);
         }
          /*<<list.ml:139:6>>*/ return [0, r1, block] /*<<list.ml:139:6>>*/ ;
        }
       }
      }
     }
     else if(l2 && ! l2[2]){
      var
       b1$0 = l2[1],
       r1$0 =
          /*<<list.ml:134:15>>*/  /*<<list.ml:134:15>>*/ caml_call2
           /*<<list.ml:134:15>>*/ (f, a1, b1$0);
       /*<<list.ml:135:6>>*/ return [0, r1$0, 0] /*<<list.ml:135:6>>*/ ;
     }
    }
    else if(! l2)  /*<<list.ml:132:16>>*/ return 0 /*<<list.ml:132:16>>*/ ;
     /*<<list.ml:140:14>>*/ return  /*<<list.ml:140:14>>*/ caml_call1
             /*<<list.ml:140:14>>*/ (Stdlib[1], cst_List_map2) /*<<list.ml:140:37>>*/ ;
    /*<<list.ml:140:37>>*/ }
   function rev_map2(f, l1, l2){
    var accu = 0, l1$0 = l1, l2$0 = l2;
     /*<<list.ml:144:4>>*/ for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        accu$0 =
           /*<<list.ml:146:34>>*/ [0,
            /*<<list.ml:146:35>>*/ caml_call2
             /*<<list.ml:146:35>>*/ (f, a1, a2),
           accu];
       accu = accu$0;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0)
       /*<<list.ml:145:18>>*/ return accu /*<<list.ml:145:18>>*/ ;
      /*<<list.ml:147:16>>*/ return  /*<<list.ml:147:16>>*/ caml_call1
              /*<<list.ml:147:16>>*/ (Stdlib[1], cst_List_rev_map2) /*<<list.ml:149:18>>*/ ;
    }
    /*<<list.ml:149:18>>*/ }
   function iter2(f, l1, l2){
    var l1$0 = l1, l2$0 = l2;
     /*<<list.ml:153:2>>*/ for(;;){
     if(l1$0){
      if(l2$0){
       var l2$1 = l2$0[2], a2 = l2$0[1], l1$1 = l1$0[2], a1 = l1$0[1];
        /*<<list.ml:155:24>>*/  /*<<list.ml:155:24>>*/ caml_call2
         /*<<list.ml:155:24>>*/ (f, a1, a2);
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0)  /*<<list.ml:154:16>>*/ return 0 /*<<list.ml:154:16>>*/ ;
      /*<<list.ml:156:14>>*/ return  /*<<list.ml:156:14>>*/ caml_call1
              /*<<list.ml:156:14>>*/ (Stdlib[1], cst_List_iter2) /*<<list.ml:156:38>>*/ ;
    }
    /*<<list.ml:156:38>>*/ }
   function fold_left2(f, accu, l1, l2){
    var accu$0 = accu, l1$0 = l1, l2$0 = l2;
     /*<<list.ml:159:2>>*/ for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        accu$1 =
           /*<<list.ml:161:37>>*/  /*<<list.ml:161:37>>*/ caml_call3
            /*<<list.ml:161:37>>*/ (f, accu$0, a1, a2);
       accu$0 = accu$1;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0)
       /*<<list.ml:160:16>>*/ return accu$0 /*<<list.ml:160:16>>*/ ;
      /*<<list.ml:162:14>>*/ return  /*<<list.ml:162:14>>*/ caml_call1
              /*<<list.ml:162:14>>*/ (Stdlib[1], cst_List_fold_left2) /*<<list.ml:162:43>>*/ ;
    }
    /*<<list.ml:162:43>>*/ }
   function fold_right2(f, l1, l2, accu){
     /*<<list.ml:165:2>>*/ if(l1){
     if(l2){
      var l2$0 = l2[2], a2 = l2[1], l1$0 = l1[2], a1 = l1[1];
       /*<<list.ml:167:32>>*/ return  /*<<list.ml:167:32>>*/ caml_call3
               /*<<list.ml:167:32>>*/ (f,
               a1,
               a2,
                /*<<list.ml:167:32>>*/ fold_right2
                 /*<<list.ml:167:32>>*/ (f, l1$0, l2$0, accu)) /*<<list.ml:168:44>>*/ ;
     }
    }
    else if(! l2)  /*<<list.ml:166:16>>*/ return accu /*<<list.ml:166:16>>*/ ;
     /*<<list.ml:168:14>>*/ return  /*<<list.ml:168:14>>*/ caml_call1
             /*<<list.ml:168:14>>*/ (Stdlib[1], cst_List_fold_right2) /*<<list.ml:168:44>>*/ ;
    /*<<list.ml:168:44>>*/ }
   function for_all(p, param){
    var param$0 = param;
     /*<<list.ml:170:16>>*/ for(;;){
     if(! param$0)  /*<<list.ml:171:10>>*/ return 1 /*<<list.ml:171:10>>*/ ;
     var
      l = param$0[2],
      a = param$0[1],
      _F_ =
         /*<<list.ml:172:12>>*/  /*<<list.ml:172:12>>*/ caml_call1
          /*<<list.ml:172:12>>*/ (p, a);
      /*<<list.ml:172:12>>*/ if(! _F_)
       /*<<list.ml:172:12>>*/ return _F_ /*<<list.ml:172:12>>*/ ;
     param$0 = l;
    }
    /*<<list.ml:172:30>>*/ }
   function exists(p, param){
    var param$0 = param;
     /*<<list.ml:174:15>>*/ for(;;){
     if(! param$0)  /*<<list.ml:175:10>>*/ return 0 /*<<list.ml:175:10>>*/ ;
     var
      l = param$0[2],
      a = param$0[1],
      _E_ =
         /*<<list.ml:176:12>>*/  /*<<list.ml:176:12>>*/ caml_call1
          /*<<list.ml:176:12>>*/ (p, a);
      /*<<list.ml:176:12>>*/ if(_E_)
       /*<<list.ml:176:12>>*/ return _E_ /*<<list.ml:176:12>>*/ ;
     param$0 = l;
    }
    /*<<list.ml:176:29>>*/ }
   function for_all2(p, l1, l2){
    var l1$0 = l1, l2$0 = l2;
     /*<<list.ml:179:2>>*/ for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        _D_ =
           /*<<list.ml:181:24>>*/  /*<<list.ml:181:24>>*/ caml_call2
            /*<<list.ml:181:24>>*/ (p, a1, a2);
        /*<<list.ml:181:24>>*/ if(! _D_)
         /*<<list.ml:181:24>>*/ return _D_ /*<<list.ml:181:24>>*/ ;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0)  /*<<list.ml:180:16>>*/ return 1 /*<<list.ml:180:16>>*/ ;
      /*<<list.ml:182:14>>*/ return  /*<<list.ml:182:14>>*/ caml_call1
              /*<<list.ml:182:14>>*/ (Stdlib[1], cst_List_for_all2) /*<<list.ml:182:41>>*/ ;
    }
    /*<<list.ml:182:41>>*/ }
   function exists2(p, l1, l2){
    var l1$0 = l1, l2$0 = l2;
     /*<<list.ml:185:2>>*/ for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        _C_ =
           /*<<list.ml:187:24>>*/  /*<<list.ml:187:24>>*/ caml_call2
            /*<<list.ml:187:24>>*/ (p, a1, a2);
        /*<<list.ml:187:24>>*/ if(_C_)
         /*<<list.ml:187:24>>*/ return _C_ /*<<list.ml:187:24>>*/ ;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0)  /*<<list.ml:186:16>>*/ return 0 /*<<list.ml:186:16>>*/ ;
      /*<<list.ml:188:14>>*/ return  /*<<list.ml:188:14>>*/ caml_call1
              /*<<list.ml:188:14>>*/ (Stdlib[1], cst_List_exists2) /*<<list.ml:188:40>>*/ ;
    }
    /*<<list.ml:188:40>>*/ }
   function mem(x, param){
    var param$0 = param;
     /*<<list.ml:190:12>>*/ for(;;){
     if(! param$0)  /*<<list.ml:191:10>>*/ return 0 /*<<list.ml:191:10>>*/ ;
     var
      l = param$0[2],
      a = param$0[1],
      _B_ =
        0
         ===
           /*<<list.ml:192:12>>*/ caml_compare /*<<list.ml:192:12>>*/ (a, x)
         ? 1
         : 0;
     if(_B_) return _B_;
     param$0 = l;
    }
    /*<<list.ml:192:38>>*/ }
   function memq(x, param){
    var param$0 = param;
     /*<<list.ml:194:13>>*/ for(;;){
     if(! param$0)  /*<<list.ml:195:10>>*/ return 0 /*<<list.ml:195:10>>*/ ;
     var l = param$0[2], a = param$0[1], _A_ = a === x ? 1 : 0;
     if(_A_) return _A_;
     param$0 = l;
    }
    /*<<list.ml:196:30>>*/ }
   function assoc(x, param){
    var param$0 = param;
     /*<<list.ml:198:14>>*/ for(;;){
     if(! param$0)
       /*<<list.ml:199:10>>*/ throw  /*<<list.ml:199:10>>*/ caml_maybe_attach_backtrace
              /*<<list.ml:199:10>>*/ (Stdlib[8], 1);
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
      /*<<list.ml:200:19>>*/ if
      (0
       ===  /*<<list.ml:200:19>>*/ caml_compare /*<<list.ml:200:19>>*/ (a, x))
       /*<<list.ml:200:40>>*/ return b /*<<list.ml:200:40>>*/ ;
     param$0 = l;
    }
    /*<<list.ml:200:56>>*/ }
   function assoc_opt(x, param){
    var param$0 = param;
     /*<<list.ml:202:18>>*/ for(;;){
     if(! param$0)  /*<<list.ml:203:10>>*/ return 0 /*<<list.ml:203:10>>*/ ;
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
      /*<<list.ml:204:19>>*/ if
      (0
       ===  /*<<list.ml:204:19>>*/ caml_compare /*<<list.ml:204:19>>*/ (a, x))
       /*<<list.ml:204:40>>*/ return [0, b] /*<<list.ml:204:40>>*/ ;
     param$0 = l;
    }
    /*<<list.ml:204:65>>*/ }
   function assq(x, param){
    var param$0 = param;
     /*<<list.ml:206:13>>*/ for(;;){
     if(! param$0)
       /*<<list.ml:207:10>>*/ throw  /*<<list.ml:207:10>>*/ caml_maybe_attach_backtrace
              /*<<list.ml:207:10>>*/ (Stdlib[8], 1);
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(a === x)  /*<<list.ml:208:31>>*/ return b /*<<list.ml:208:31>>*/ ;
     param$0 = l;
    }
    /*<<list.ml:208:46>>*/ }
   function assq_opt(x, param){
    var param$0 = param;
     /*<<list.ml:210:17>>*/ for(;;){
     if(! param$0)  /*<<list.ml:211:10>>*/ return 0 /*<<list.ml:211:10>>*/ ;
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(a === x)
       /*<<list.ml:212:31>>*/ return [0, b] /*<<list.ml:212:31>>*/ ;
     param$0 = l;
    }
    /*<<list.ml:212:55>>*/ }
   function mem_assoc(x, param){
    var param$0 = param;
     /*<<list.ml:214:18>>*/ for(;;){
     if(! param$0)  /*<<list.ml:215:10>>*/ return 0 /*<<list.ml:215:10>>*/ ;
     var
      l = param$0[2],
      a = param$0[1][1],
      _z_ =
        0
         ===
           /*<<list.ml:216:19>>*/ caml_compare /*<<list.ml:216:19>>*/ (a, x)
         ? 1
         : 0;
     if(_z_) return _z_;
     param$0 = l;
    }
    /*<<list.ml:216:51>>*/ }
   function mem_assq(x, param){
    var param$0 = param;
     /*<<list.ml:218:17>>*/ for(;;){
     if(! param$0)  /*<<list.ml:219:10>>*/ return 0 /*<<list.ml:219:10>>*/ ;
     var l = param$0[2], a = param$0[1][1], _y_ = a === x ? 1 : 0;
     if(_y_) return _y_;
     param$0 = l;
    }
    /*<<list.ml:220:41>>*/ }
   function remove_assoc(x, param){
     /*<<list.ml:222:21>>*/ if(! param)
      /*<<list.ml:223:10>>*/ return 0 /*<<list.ml:223:10>>*/ ;
    var l = param[2], pair = param[1], a = pair[1];
     /*<<list.ml:225:9>>*/ return 0
            ===
              /*<<list.ml:225:9>>*/ caml_compare /*<<list.ml:225:9>>*/ (a, x)
            ? l
            : [0,
              pair,
               /*<<list.ml:225:45>>*/ remove_assoc
                /*<<list.ml:225:45>>*/ (x, l)] /*<<list.ml:225:61>>*/ ;
    /*<<list.ml:225:61>>*/ }
   function remove_assq(x, param){
     /*<<list.ml:227:20>>*/ if(! param)
      /*<<list.ml:228:10>>*/ return 0 /*<<list.ml:228:10>>*/ ;
    var l = param[2], pair = param[1], a = pair[1];
    return a === x
            ? l
            : [0,
              pair,
               /*<<list.ml:229:57>>*/ remove_assq
                /*<<list.ml:229:57>>*/ (x, l)] /*<<list.ml:229:72>>*/ ;
    /*<<list.ml:229:72>>*/ }
   function find(p, param){
    var param$0 = param;
     /*<<list.ml:231:13>>*/ for(;;){
     if(! param$0)
       /*<<list.ml:232:10>>*/ throw  /*<<list.ml:232:10>>*/ caml_maybe_attach_backtrace
              /*<<list.ml:232:10>>*/ (Stdlib[8], 1);
     var l = param$0[2], x = param$0[1];
      /*<<list.ml:233:17>>*/ if
      ( /*<<list.ml:233:17>>*/ caml_call1 /*<<list.ml:233:17>>*/ (p, x))
       /*<<list.ml:233:26>>*/ return x /*<<list.ml:233:26>>*/ ;
     param$0 = l;
    }
    /*<<list.ml:233:41>>*/ }
   function find_opt(p, param){
    var param$0 = param;
     /*<<list.ml:235:17>>*/ for(;;){
     if(! param$0)  /*<<list.ml:236:10>>*/ return 0 /*<<list.ml:236:10>>*/ ;
     var l = param$0[2], x = param$0[1];
      /*<<list.ml:237:17>>*/ if
      ( /*<<list.ml:237:17>>*/ caml_call1 /*<<list.ml:237:17>>*/ (p, x))
       /*<<list.ml:237:26>>*/ return [0, x] /*<<list.ml:237:26>>*/ ;
     param$0 = l;
    }
    /*<<list.ml:237:50>>*/ }
   function find_index(p){
    var i =  /*<<list.ml:243:2>>*/ 0;
     /*<<list.ml:243:2>>*/ return function(param$0){
     var i$0 = i, param = param$0;
      /*<<list.ml:240:14>>*/ for(;;){
      if(! param)  /*<<list.ml:241:10>>*/ return 0 /*<<list.ml:241:10>>*/ ;
      var l = param[2], a = param[1];
       /*<<list.ml:242:17>>*/ if
       ( /*<<list.ml:242:17>>*/ caml_call1 /*<<list.ml:242:17>>*/ (p, a))
        /*<<list.ml:242:26>>*/ return [0, i$0] /*<<list.ml:242:26>>*/ ;
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
      param = l;
     }} /*<<list.ml:243:2>>*/ ;
    /*<<list.ml:243:7>>*/ }
   function find_map(f, param){
    var param$0 = param;
     /*<<list.ml:245:17>>*/ for(;;){
     if(! param$0)  /*<<list.ml:246:10>>*/ return 0 /*<<list.ml:246:10>>*/ ;
     var
      l = param$0[2],
      x = param$0[1],
      result =
         /*<<list.ml:248:17>>*/  /*<<list.ml:248:17>>*/ caml_call1
          /*<<list.ml:248:17>>*/ (f, x);
     if(result)  /*<<list.ml:249:29>>*/ return result /*<<list.ml:249:29>>*/ ;
     param$0 = l;
    }
    /*<<list.ml:251:8>>*/ }
   function find_mapi(f){
    var i =  /*<<list.ml:261:2>>*/ 0;
     /*<<list.ml:261:2>>*/ return function(param$0){
     var i$0 = i, param = param$0;
      /*<<list.ml:254:14>>*/ for(;;){
      if(! param)  /*<<list.ml:255:10>>*/ return 0 /*<<list.ml:255:10>>*/ ;
      var
       l = param[2],
       x = param[1],
       result =
          /*<<list.ml:257:17>>*/  /*<<list.ml:257:17>>*/ caml_call2
           /*<<list.ml:257:17>>*/ (f, i$0, x);
      if(result)
        /*<<list.ml:258:29>>*/ return result /*<<list.ml:258:29>>*/ ;
      var i$1 = i$0 + 1 | 0;
      i$0 = i$1;
      param = l;
     }} /*<<list.ml:261:2>>*/ ;
    /*<<list.ml:261:7>>*/ }
   function find_all(p, param){
    var param$0 = param;
     /*<<list.ml:263:33>>*/ for(;;){
     if(! param$0)  /*<<list.ml:264:10>>*/ return 0 /*<<list.ml:264:10>>*/ ;
     var l = param$0[2], x = param$0[1];
      /*<<list.ml:265:17>>*/ if
      ( /*<<list.ml:265:17>>*/ caml_call1 /*<<list.ml:265:17>>*/ (p, x)){
      var
       block =  /*<<list.ml:265:26>>*/ [0, x, 24029],
       dst = block,
       offset = 1,
       param$1 = l;
       /*<<list.ml:263:33>>*/ for(;;){
       if(! param$1){
        dst[1 + offset] = 0;
         /*<<list.ml:265:31>>*/ return block /*<<list.ml:265:31>>*/ ;
       }
       var l$0 = param$1[2], x$0 = param$1[1];
        /*<<list.ml:265:17>>*/ if
        ( /*<<list.ml:265:17>>*/ caml_call1 /*<<list.ml:265:17>>*/ (p, x$0)){
        var dst$0 =  /*<<list.ml:265:26>>*/ [0, x$0, 24029];
        dst[1 + offset] = dst$0;
        dst = dst$0;
        offset = 1;
        param$1 = l$0;
       }
       else
        param$1 = l$0;
      }
     }
     else
      param$0 = l;
    }
    /*<<list.ml:265:61>>*/ }
   function filteri(p, l$1){
    var i = 0, param = l$1;
     /*<<list.ml:269:32>>*/ for(;;){
     if(! param)  /*<<list.ml:270:10>>*/ return 0 /*<<list.ml:270:10>>*/ ;
     var l = param[2], x = param[1], i$0 =  /*<<list.ml:272:6>>*/ i + 1 | 0;
      /*<<list.ml:273:9>>*/ if
      ( /*<<list.ml:273:9>>*/ caml_call2 /*<<list.ml:273:9>>*/ (p, i, x))
      break;
     i = i$0;
     param = l;
    }
    var
     block =  /*<<list.ml:273:20>>*/ [0, x, 24029],
     dst = block,
     offset = 1,
     i$1 = i$0,
     param$0 = l;
     /*<<list.ml:269:32>>*/ for(;;){
     if(! param$0){
      dst[1 + offset] = 0;
       /*<<list.ml:273:25>>*/ return block /*<<list.ml:273:25>>*/ ;
     }
     var
      l$0 = param$0[2],
      x$0 = param$0[1],
      i$2 =  /*<<list.ml:272:6>>*/ i$1 + 1 | 0;
      /*<<list.ml:273:9>>*/ if
      ( /*<<list.ml:273:9>>*/ caml_call2 /*<<list.ml:273:9>>*/ (p, i$1, x$0)){
      var dst$0 =  /*<<list.ml:273:20>>*/ [0, x$0, 24029];
      dst[1 + offset] = dst$0;
      dst = dst$0;
      offset = 1;
      i$1 = i$2;
      param$0 = l$0;
     }
     else{i$1 = i$2; param$0 = l$0;}
    }
    /*<<list.ml:275:31>>*/ }
   function filter_map(f, param){
    var param$0 = param;
     /*<<list.ml:277:35>>*/ for(;;){
     if(! param$0)  /*<<list.ml:278:10>>*/ return 0 /*<<list.ml:278:10>>*/ ;
     var
      l = param$0[2],
      x = param$0[1],
      match =
         /*<<list.ml:280:12>>*/  /*<<list.ml:280:12>>*/ caml_call1
          /*<<list.ml:280:12>>*/ (f, x);
     if(match){
      var
       v = match[1],
       block =  /*<<list.ml:282:18>>*/ [0, v, 24029],
       dst = block,
       offset = 1,
       param$1 = l;
       /*<<list.ml:277:35>>*/ for(;;){
       if(! param$1){
        dst[1 + offset] = 0;
         /*<<list.ml:282:23>>*/ return block /*<<list.ml:282:23>>*/ ;
       }
       var
        l$0 = param$1[2],
        x$0 = param$1[1],
        match$0 =
           /*<<list.ml:280:12>>*/  /*<<list.ml:280:12>>*/ caml_call1
            /*<<list.ml:280:12>>*/ (f, x$0);
       if(match$0){
        var v$0 = match$0[1], dst$0 =  /*<<list.ml:282:18>>*/ [0, v$0, 24029];
        dst[1 + offset] = dst$0;
        dst = dst$0;
        offset = 1;
        param$1 = l$0;
       }
       else
        param$1 = l$0;
      }
     }
     else
      param$0 = l;
    }
    /*<<list.ml:282:37>>*/ }
   function concat_map(f, param){
    var param$0 = param;
     /*<<list.ml:284:35>>*/ for(;;){
     if(! param$0)  /*<<list.ml:285:10>>*/ return 0 /*<<list.ml:285:10>>*/ ;
     var
      xs = param$0[2],
      x = param$0[1],
      ys =
         /*<<list.ml:286:32>>*/  /*<<list.ml:286:32>>*/ caml_call1
          /*<<list.ml:286:32>>*/ (f, x);
     if(ys){
      var
       ys$1 = ys[2],
       y = ys[1],
       block =  /*<<list.ml:290:15>>*/ [0, y, 24029],
       dst = block,
       offset = 1,
       ys$2 = ys$1,
       xs$1 = xs;
       /*<<list.ml:288:2>>*/ for(;;)
       if(ys$2){
        var
         ys$3 = ys$2[2],
         y$0 = ys$2[1],
         dst$0 =  /*<<list.ml:290:15>>*/ [0, y$0, 24029];
        dst[1 + offset] = dst$0;
        dst = dst$0;
        offset = 1;
        ys$2 = ys$3;
       }
       else{
        if(! xs$1){
         dst[1 + offset] = 0;
          /*<<list.ml:290:20>>*/ return block /*<<list.ml:290:20>>*/ ;
        }
        var
         xs$0 = xs$1[2],
         x$0 = xs$1[1],
         ys$0 =
            /*<<list.ml:286:32>>*/  /*<<list.ml:286:32>>*/ caml_call1
             /*<<list.ml:286:32>>*/ (f, x$0);
        ys$2 = ys$0;
        xs$1 = xs$0;
       }
     }
     else
      param$0 = xs;
    }
    /*<<list.ml:286:42>>*/ }
   function fold_left_map(f, accu, l){
    var accu$0 = accu, l_accu = 0, param = l;
     /*<<list.ml:293:14>>*/ for(;;){
     if(! param)
       /*<<list.ml:294:12>>*/ return [0,
              accu$0,
               /*<<list.ml:294:18>>*/ rev /*<<list.ml:294:18>>*/ (l_accu)] /*<<list.ml:294:12>>*/ ;
     var
      l$0 = param[2],
      x = param[1],
      match =
         /*<<list.ml:296:22>>*/  /*<<list.ml:296:22>>*/ caml_call2
          /*<<list.ml:296:22>>*/ (f, accu$0, x),
      x$0 = match[2],
      accu$1 = match[1],
      l_accu$0 =  /*<<list.ml:297:17>>*/ [0, x$0, l_accu];
     accu$0 = accu$1;
     l_accu = l_accu$0;
     param = l$0;
    }
    /*<<list.ml:298:15>>*/ }
   function partition(p, l){
    var yes = 0, no = 0, param = l;
     /*<<list.ml:301:15>>*/ for(;;){
     if(! param){
      var
       _x_ =
          /*<<list.ml:302:20>>*/  /*<<list.ml:302:20>>*/ rev
           /*<<list.ml:302:20>>*/ (no);
       /*<<list.ml:302:10>>*/ return [0,
               /*<<list.ml:302:11>>*/ rev /*<<list.ml:302:11>>*/ (yes),
              _x_] /*<<list.ml:302:10>>*/ ;
     }
     var l$0 = param[2], x = param[1];
      /*<<list.ml:303:17>>*/ if
      ( /*<<list.ml:303:17>>*/ caml_call1 /*<<list.ml:303:17>>*/ (p, x)){
      var yes$0 =  /*<<list.ml:303:31>>*/ [0, x, yes];
      yes = yes$0;
      param = l$0;
     }
     else{
      var no$0 =  /*<<list.ml:303:61>>*/ [0, x, no];
      no = no$0;
      param = l$0;
     }
    }
    /*<<list.ml:304:14>>*/ }
   function partition_map(p, l){
    var left = 0, right = 0, param = l;
     /*<<list.ml:307:15>>*/ for(;;){
     if(! param){
      var
       _w_ =
          /*<<list.ml:308:21>>*/  /*<<list.ml:308:21>>*/ rev
           /*<<list.ml:308:21>>*/ (right);
       /*<<list.ml:308:10>>*/ return [0,
               /*<<list.ml:308:11>>*/ rev /*<<list.ml:308:11>>*/ (left),
              _w_] /*<<list.ml:308:10>>*/ ;
     }
     var
      l$0 = param[2],
      x = param[1],
      match =
         /*<<list.ml:310:17>>*/  /*<<list.ml:310:17>>*/ caml_call1
          /*<<list.ml:310:17>>*/ (p, x);
     if(0 === match[0]){
      var v = match[1], left$0 =  /*<<list.ml:311:31>>*/ [0, v, left];
      left = left$0;
      param = l$0;
     }
     else{
      var v$0 = match[1], right$0 =  /*<<list.ml:312:37>>*/ [0, v$0, right];
      right = right$0;
      param = l$0;
     }
    }
    /*<<list.ml:315:14>>*/ }
   function split(param){
     /*<<list.ml:317:16>>*/ if(! param)
      /*<<list.ml:318:10>>*/ return _a_ /*<<list.ml:318:10>>*/ ;
    var
     l = param[2],
     match = param[1],
     y = match[2],
     x = match[1],
     match$0 =
        /*<<list.ml:320:21>>*/  /*<<list.ml:320:21>>*/ split
         /*<<list.ml:320:21>>*/ (l),
     ry = match$0[2],
     rx = match$0[1];
     /*<<list.ml:320:32>>*/ return [0, [0, x, rx], [0, y, ry]] /*<<list.ml:320:32>>*/ ;
    /*<<list.ml:320:46>>*/ }
   function combine(l1, l2){
     /*<<list.ml:323:2>>*/ if(l1){
     if(l2){
      var l2$0 = l2[2], a2 = l2[1], l1$0 = l1[2], a1 = l1[1];
       /*<<list.ml:325:24>>*/ return [0,
              [0, a1, a2],
               /*<<list.ml:325:36>>*/ combine
                /*<<list.ml:325:36>>*/ (l1$0, l2$0)] /*<<list.ml:325:24>>*/ ;
     }
    }
    else if(! l2)  /*<<list.ml:324:16>>*/ return 0 /*<<list.ml:324:16>>*/ ;
     /*<<list.ml:326:14>>*/ return  /*<<list.ml:326:14>>*/ caml_call1
             /*<<list.ml:326:14>>*/ (Stdlib[1], cst_List_combine) /*<<list.ml:326:40>>*/ ;
    /*<<list.ml:326:40>>*/ }
   function merge(cmp, l1, l2){
     /*<<list.ml:331:2>>*/ if(! l1)
      /*<<list.ml:332:14>>*/ return l2 /*<<list.ml:332:14>>*/ ;
    if(! l2)  /*<<list.ml:333:14>>*/ return l1 /*<<list.ml:333:14>>*/ ;
    var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
     /*<<list.ml:335:9>>*/ return 0
            <
              /*<<list.ml:335:9>>*/ caml_call2
               /*<<list.ml:335:9>>*/ (cmp, h1, h2)
            ? [0,
              h2,
               /*<<list.ml:337:17>>*/ merge
                /*<<list.ml:337:17>>*/ (cmp, l1, t2)]
            : [0,
              h1,
               /*<<list.ml:336:17>>*/ merge
                /*<<list.ml:336:17>>*/ (cmp, t1, l2)] /*<<list.ml:337:32>>*/ ;
    /*<<list.ml:337:32>>*/ }
   function stable_sort(cmp, l){
    function sort(n, l){
      /*<<list.ml:360:4>>*/ if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         s =
            /*<<list.ml:362:19>>*/ 0
            <
              /*<<list.ml:362:19>>*/ caml_call2
               /*<<list.ml:362:19>>*/ (cmp, x1, x2)
            ? [0, x2, [0, x1, 0]]
            : [0, x1, [0, x2, 0]];
         /*<<list.ml:363:8>>*/ return [0, s, tl] /*<<list.ml:363:8>>*/ ;
       }
      }
     }
     else if(3 === n && l){
      var _v_ = l[2];
      if(_v_){
       var match$2 = _v_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _v_[1],
         x1$0 = l[1],
         s$0 =
            /*<<list.ml:366:13>>*/ 0
            <
              /*<<list.ml:366:13>>*/ caml_call2
               /*<<list.ml:366:13>>*/ (cmp, x1$0, x2$0)
            ? 0
              <
                /*<<list.ml:370:18>>*/ caml_call2
                 /*<<list.ml:370:18>>*/ (cmp, x1$0, x3)
              ? 0
                <
                  /*<<list.ml:371:18>>*/ caml_call2
                   /*<<list.ml:371:18>>*/ (cmp, x2$0, x3)
                ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                : [0, x2$0, [0, x3, [0, x1$0, 0]]]
              : [0, x2$0, [0, x1$0, [0, x3, 0]]]
            : 0
              <
                /*<<list.ml:367:15>>*/ caml_call2
                 /*<<list.ml:367:15>>*/ (cmp, x2$0, x3)
              ? 0
                <
                  /*<<list.ml:368:20>>*/ caml_call2
                   /*<<list.ml:368:20>>*/ (cmp, x1$0, x3)
                ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                : [0, x1$0, [0, x3, [0, x2$0, 0]]]
              : [0, x1$0, [0, x2$0, [0, x3, 0]]];
         /*<<list.ml:374:8>>*/ return [0, s$0, tl$1] /*<<list.ml:374:8>>*/ ;
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 =
         /*<<list.ml:378:21>>*/  /*<<list.ml:378:21>>*/ rev_sort
          /*<<list.ml:378:21>>*/ (n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 =
         /*<<list.ml:379:21>>*/  /*<<list.ml:379:21>>*/ rev_sort
          /*<<list.ml:379:21>>*/ (n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
      /*<<list.ml:351:4>>*/ for(;;){
      if(l1){
       if(l2){
        var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
         /*<<list.ml:355:11>>*/ if
         (0
          <
            /*<<list.ml:355:11>>*/ caml_call2
             /*<<list.ml:355:11>>*/ (cmp, h1, h2)){
         var accu$0 =  /*<<list.ml:356:33>>*/ [0, h1, accu];
         l1 = t1;
         accu = accu$0;
         continue;
        }
        var accu$1 =  /*<<list.ml:357:33>>*/ [0, h2, accu];
        l2 = t2;
        accu = accu$1;
        continue;
       }
       var
        _u_ =
           /*<<list.ml:353:16>>*/ rev_append /*<<list.ml:353:16>>*/ (l1, accu);
      }
      else
       var
        _u_ =
           /*<<list.ml:352:16>>*/ rev_append /*<<list.ml:352:16>>*/ (l2, accu);
       /*<<list.ml:380:8>>*/ return [0, _u_, tl$0] /*<<list.ml:380:8>>*/ ;
     }
     /*<<list.ml:380:36>>*/ }
    function rev_sort(n, l){
      /*<<list.ml:382:4>>*/ if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         s =
            /*<<list.ml:384:19>>*/ 0
            <
              /*<<list.ml:384:19>>*/ caml_call2
               /*<<list.ml:384:19>>*/ (cmp, x1, x2)
            ? [0, x1, [0, x2, 0]]
            : [0, x2, [0, x1, 0]];
         /*<<list.ml:385:8>>*/ return [0, s, tl] /*<<list.ml:385:8>>*/ ;
       }
      }
     }
     else if(3 === n && l){
      var _t_ = l[2];
      if(_t_){
       var match$2 = _t_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _t_[1],
         x1$0 = l[1],
         s$0 =
            /*<<list.ml:388:13>>*/ 0
            <
              /*<<list.ml:388:13>>*/ caml_call2
               /*<<list.ml:388:13>>*/ (cmp, x1$0, x2$0)
            ? 0
              <
                /*<<list.ml:389:15>>*/ caml_call2
                 /*<<list.ml:389:15>>*/ (cmp, x2$0, x3)
              ? [0, x1$0, [0, x2$0, [0, x3, 0]]]
              : 0
                <
                  /*<<list.ml:390:20>>*/ caml_call2
                   /*<<list.ml:390:20>>*/ (cmp, x1$0, x3)
                ? [0, x1$0, [0, x3, [0, x2$0, 0]]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]]
            : 0
              <
                /*<<list.ml:392:18>>*/ caml_call2
                 /*<<list.ml:392:18>>*/ (cmp, x1$0, x3)
              ? [0, x2$0, [0, x1$0, [0, x3, 0]]]
              : 0
                <
                  /*<<list.ml:393:18>>*/ caml_call2
                   /*<<list.ml:393:18>>*/ (cmp, x2$0, x3)
                ? [0, x2$0, [0, x3, [0, x1$0, 0]]]
                : [0, x3, [0, x2$0, [0, x1$0, 0]]];
         /*<<list.ml:396:8>>*/ return [0, s$0, tl$1] /*<<list.ml:396:8>>*/ ;
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 =
         /*<<list.ml:400:21>>*/  /*<<list.ml:400:21>>*/ sort
          /*<<list.ml:400:21>>*/ (n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 =
         /*<<list.ml:401:21>>*/  /*<<list.ml:401:21>>*/ sort
          /*<<list.ml:401:21>>*/ (n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
      /*<<list.ml:342:4>>*/ for(;;){
      if(l1){
       if(l2){
        var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
         /*<<list.ml:346:11>>*/ if
         (0
          <
            /*<<list.ml:346:11>>*/ caml_call2
             /*<<list.ml:346:11>>*/ (cmp, h1, h2)){
         var accu$0 =  /*<<list.ml:348:29>>*/ [0, h2, accu];
         l2 = t2;
         accu = accu$0;
         continue;
        }
        var accu$1 =  /*<<list.ml:347:29>>*/ [0, h1, accu];
        l1 = t1;
        accu = accu$1;
        continue;
       }
       var
        _s_ =
           /*<<list.ml:344:16>>*/ rev_append /*<<list.ml:344:16>>*/ (l1, accu);
      }
      else
       var
        _s_ =
           /*<<list.ml:343:16>>*/ rev_append /*<<list.ml:343:16>>*/ (l2, accu);
       /*<<list.ml:402:8>>*/ return [0, _s_, tl$0] /*<<list.ml:402:8>>*/ ;
     }
     /*<<list.ml:402:32>>*/ }
    var
     len =
        /*<<list.ml:404:12>>*/  /*<<list.ml:404:12>>*/ length
         /*<<list.ml:404:12>>*/ (l);
     /*<<list.ml:405:2>>*/ return 2 <= len
            ?  /*<<list.ml:405:29>>*/ sort /*<<list.ml:405:29>>*/ (len, l)[1]
            : l /*<<list.ml:405:41>>*/ ;
    /*<<list.ml:405:41>>*/ }
   function sort_uniq(cmp, l){
    function sort(n, l){
      /*<<list.ml:443:4>>*/ if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         c$0 =
            /*<<list.ml:446:18>>*/  /*<<list.ml:446:18>>*/ caml_call2
             /*<<list.ml:446:18>>*/ (cmp, x1, x2),
         s =
            /*<<list.ml:447:10>>*/ 0 === c$0
            ? [0, x1, 0]
            : 0 <= c$0 ? [0, x2, [0, x1, 0]] : [0, x1, [0, x2, 0]];
         /*<<list.ml:449:8>>*/ return [0, s, tl] /*<<list.ml:449:8>>*/ ;
       }
      }
     }
     else if(3 === n && l){
      var _m_ = l[2];
      if(_m_){
       var match$2 = _m_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _m_[1],
         x1$0 = l[1],
         c$1 =
            /*<<list.ml:452:18>>*/  /*<<list.ml:452:18>>*/ caml_call2
             /*<<list.ml:452:18>>*/ (cmp, x1$0, x2$0);
         /*<<list.ml:453:10>>*/ if(0 === c$1)
         var
          c$2 =
             /*<<list.ml:454:20>>*/  /*<<list.ml:454:20>>*/ caml_call2
              /*<<list.ml:454:20>>*/ (cmp, x2$0, x3),
          _n_ =
             /*<<list.ml:455:12>>*/ 0 === c$2
             ? [0, x2$0, 0]
             : 0 <= c$2 ? [0, x3, [0, x2$0, 0]] : [0, x2$0, [0, x3, 0]],
          s$0 = _n_;
        else if(0 <= c$1){
         var
          c$3 =
             /*<<list.ml:466:20>>*/  /*<<list.ml:466:20>>*/ caml_call2
              /*<<list.ml:466:20>>*/ (cmp, x1$0, x3);
          /*<<list.ml:467:12>>*/ if(0 === c$3)
          var _o_ = [0, x2$0, [0, x1$0, 0]];
         else if(0 <= c$3)
          var
           c$4 =
              /*<<list.ml:470:22>>*/  /*<<list.ml:470:22>>*/ caml_call2
               /*<<list.ml:470:22>>*/ (cmp, x2$0, x3),
           _p_ =
              /*<<list.ml:471:14>>*/ 0 === c$4
              ? [0, x2$0, [0, x1$0, 0]]
              : 0
                <= c$4
                ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                : [0, x2$0, [0, x3, [0, x1$0, 0]]],
           _o_ = _p_;
         else
          var _o_ = [0, x2$0, [0, x1$0, [0, x3, 0]]];
         var s$0 = _o_;
        }
        else{
         var
          c$5 =
             /*<<list.ml:457:20>>*/  /*<<list.ml:457:20>>*/ caml_call2
              /*<<list.ml:457:20>>*/ (cmp, x2$0, x3);
          /*<<list.ml:458:12>>*/ if(0 === c$5)
          var _q_ = [0, x1$0, [0, x2$0, 0]];
         else if(0 <= c$5)
          var
           c$6 =
              /*<<list.ml:461:22>>*/  /*<<list.ml:461:22>>*/ caml_call2
               /*<<list.ml:461:22>>*/ (cmp, x1$0, x3),
           _r_ =
              /*<<list.ml:462:14>>*/ 0 === c$6
              ? [0, x1$0, [0, x2$0, 0]]
              : 0
                <= c$6
                ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                : [0, x1$0, [0, x3, [0, x2$0, 0]]],
           _q_ = _r_;
         else
          var _q_ = [0, x1$0, [0, x2$0, [0, x3, 0]]];
         var s$0 = _q_;
        }
         /*<<list.ml:475:8>>*/ return [0, s$0, tl$1] /*<<list.ml:475:8>>*/ ;
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 =
         /*<<list.ml:479:21>>*/  /*<<list.ml:479:21>>*/ rev_sort
          /*<<list.ml:479:21>>*/ (n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 =
         /*<<list.ml:480:21>>*/  /*<<list.ml:480:21>>*/ rev_sort
          /*<<list.ml:480:21>>*/ (n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
      /*<<list.ml:432:4>>*/ for(;;){
      if(l1){
       if(l2){
        var
         t2 = l2[2],
         h2 = l2[1],
         t1 = l1[2],
         h1 = l1[1],
         c =
            /*<<list.ml:436:16>>*/  /*<<list.ml:436:16>>*/ caml_call2
             /*<<list.ml:436:16>>*/ (cmp, h1, h2);
         /*<<list.ml:437:8>>*/ if(0 === c){
         var accu$0 =  /*<<list.ml:437:42>>*/ [0, h1, accu];
         l1 = t1;
         l2 = t2;
         accu = accu$0;
         continue;
        }
        if(0 < c){
         var accu$1 =  /*<<list.ml:439:33>>*/ [0, h1, accu];
         l1 = t1;
         accu = accu$1;
         continue;
        }
        var accu$2 =  /*<<list.ml:440:33>>*/ [0, h2, accu];
        l2 = t2;
        accu = accu$2;
        continue;
       }
       var
        _l_ =
           /*<<list.ml:434:16>>*/ rev_append /*<<list.ml:434:16>>*/ (l1, accu);
      }
      else
       var
        _l_ =
           /*<<list.ml:433:16>>*/ rev_append /*<<list.ml:433:16>>*/ (l2, accu);
       /*<<list.ml:481:8>>*/ return [0, _l_, tl$0] /*<<list.ml:481:8>>*/ ;
     }
     /*<<list.ml:481:36>>*/ }
    function rev_sort(n, l){
      /*<<list.ml:483:4>>*/ if(2 === n){
      if(l){
       var match = l[2];
       if(match){
        var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
         c$0 =
            /*<<list.ml:486:18>>*/  /*<<list.ml:486:18>>*/ caml_call2
             /*<<list.ml:486:18>>*/ (cmp, x1, x2),
         s =
            /*<<list.ml:487:10>>*/ 0 === c$0
            ? [0, x1, 0]
            : 0 < c$0 ? [0, x1, [0, x2, 0]] : [0, x2, [0, x1, 0]];
         /*<<list.ml:489:8>>*/ return [0, s, tl] /*<<list.ml:489:8>>*/ ;
       }
      }
     }
     else if(3 === n && l){
      var _f_ = l[2];
      if(_f_){
       var match$2 = _f_[2];
       if(match$2){
        var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _f_[1],
         x1$0 = l[1],
         c$1 =
            /*<<list.ml:492:18>>*/  /*<<list.ml:492:18>>*/ caml_call2
             /*<<list.ml:492:18>>*/ (cmp, x1$0, x2$0);
         /*<<list.ml:493:10>>*/ if(0 === c$1)
         var
          c$2 =
             /*<<list.ml:494:20>>*/  /*<<list.ml:494:20>>*/ caml_call2
              /*<<list.ml:494:20>>*/ (cmp, x2$0, x3),
          _g_ =
             /*<<list.ml:495:12>>*/ 0 === c$2
             ? [0, x2$0, 0]
             : 0 < c$2 ? [0, x2$0, [0, x3, 0]] : [0, x3, [0, x2$0, 0]],
          s$0 = _g_;
        else if(0 < c$1){
         var
          c$3 =
             /*<<list.ml:497:20>>*/  /*<<list.ml:497:20>>*/ caml_call2
              /*<<list.ml:497:20>>*/ (cmp, x2$0, x3);
          /*<<list.ml:498:12>>*/ if(0 === c$3)
          var _h_ = [0, x1$0, [0, x2$0, 0]];
         else if(0 < c$3)
          var _h_ = [0, x1$0, [0, x2$0, [0, x3, 0]]];
         else
          var
           c$4 =
              /*<<list.ml:501:22>>*/  /*<<list.ml:501:22>>*/ caml_call2
               /*<<list.ml:501:22>>*/ (cmp, x1$0, x3),
           _i_ =
              /*<<list.ml:502:14>>*/ 0 === c$4
              ? [0, x1$0, [0, x2$0, 0]]
              : 0
                < c$4
                ? [0, x1$0, [0, x3, [0, x2$0, 0]]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]],
           _h_ = _i_;
         var s$0 = _h_;
        }
        else{
         var
          c$5 =
             /*<<list.ml:506:20>>*/  /*<<list.ml:506:20>>*/ caml_call2
              /*<<list.ml:506:20>>*/ (cmp, x1$0, x3);
          /*<<list.ml:507:12>>*/ if(0 === c$5)
          var _j_ = [0, x2$0, [0, x1$0, 0]];
         else if(0 < c$5)
          var _j_ = [0, x2$0, [0, x1$0, [0, x3, 0]]];
         else
          var
           c$6 =
              /*<<list.ml:510:22>>*/  /*<<list.ml:510:22>>*/ caml_call2
               /*<<list.ml:510:22>>*/ (cmp, x2$0, x3),
           _k_ =
              /*<<list.ml:511:14>>*/ 0 === c$6
              ? [0, x2$0, [0, x1$0, 0]]
              : 0
                < c$6
                ? [0, x2$0, [0, x3, [0, x1$0, 0]]]
                : [0, x3, [0, x2$0, [0, x1$0, 0]]],
           _j_ = _k_;
         var s$0 = _j_;
        }
         /*<<list.ml:515:8>>*/ return [0, s$0, tl$1] /*<<list.ml:515:8>>*/ ;
       }
      }
     }
     var
      n1 = n >> 1,
      n2 = n - n1 | 0,
      match$0 =
         /*<<list.ml:519:21>>*/  /*<<list.ml:519:21>>*/ sort
          /*<<list.ml:519:21>>*/ (n1, l),
      l2$0 = match$0[2],
      s1 = match$0[1],
      match$1 =
         /*<<list.ml:520:21>>*/  /*<<list.ml:520:21>>*/ sort
          /*<<list.ml:520:21>>*/ (n2, l2$0),
      tl$0 = match$1[2],
      s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
      /*<<list.ml:421:4>>*/ for(;;){
      if(l1){
       if(l2){
        var
         t2 = l2[2],
         h2 = l2[1],
         t1 = l1[2],
         h1 = l1[1],
         c =
            /*<<list.ml:425:16>>*/  /*<<list.ml:425:16>>*/ caml_call2
             /*<<list.ml:425:16>>*/ (cmp, h1, h2);
         /*<<list.ml:426:8>>*/ if(0 === c){
         var accu$0 =  /*<<list.ml:426:38>>*/ [0, h1, accu];
         l1 = t1;
         l2 = t2;
         accu = accu$0;
         continue;
        }
        if(0 <= c){
         var accu$1 =  /*<<list.ml:429:29>>*/ [0, h2, accu];
         l2 = t2;
         accu = accu$1;
         continue;
        }
        var accu$2 =  /*<<list.ml:428:29>>*/ [0, h1, accu];
        l1 = t1;
        accu = accu$2;
        continue;
       }
       var
        _e_ =
           /*<<list.ml:423:16>>*/ rev_append /*<<list.ml:423:16>>*/ (l1, accu);
      }
      else
       var
        _e_ =
           /*<<list.ml:422:16>>*/ rev_append /*<<list.ml:422:16>>*/ (l2, accu);
       /*<<list.ml:521:8>>*/ return [0, _e_, tl$0] /*<<list.ml:521:8>>*/ ;
     }
     /*<<list.ml:521:32>>*/ }
    var
     len =
        /*<<list.ml:523:12>>*/  /*<<list.ml:523:12>>*/ length
         /*<<list.ml:523:12>>*/ (l);
     /*<<list.ml:524:2>>*/ return 2 <= len
            ?  /*<<list.ml:524:29>>*/ sort /*<<list.ml:524:29>>*/ (len, l)[1]
            : l /*<<list.ml:524:41>>*/ ;
    /*<<list.ml:524:41>>*/ }
   function compare_lengths(l1, l2){
    var l1$0 = l1, l2$0 = l2;
     /*<<list.ml:528:2>>*/ for(;;){
     if(! l1$0) return l2$0 ? -1 : 0 /*<<list.ml:532:45>>*/ ;
     if(! l2$0)  /*<<list.ml:531:13>>*/ return 1 /*<<list.ml:531:13>>*/ ;
     var l2$1 = l2$0[2], l1$1 = l1$0[2];
     l1$0 = l1$1;
     l2$0 = l2$1;
    }
    /*<<list.ml:532:45>>*/ }
   function compare_length_with(l, n){
    var l$0 = l, n$0 = n;
     /*<<list.ml:535:2>>*/ for(;;){
     if(! l$0)
      return 0 === n$0 ? 0 : 0 < n$0 ? -1 : 1 /*<<list.ml:541:33>>*/ ;
     var l$1 = l$0[2];
      /*<<list.ml:540:4>>*/ if(0 >= n$0)
       /*<<list.ml:540:19>>*/ return 1 /*<<list.ml:540:19>>*/ ;
     var n$1 =  /*<<list.ml:541:6>>*/ n$0 - 1 | 0;
     l$0 = l$1;
     n$0 = n$1;
    }
    /*<<list.ml:541:33>>*/ }
   function is_empty(param){
     /*<<list.ml:543:15>>*/ return param ? 0 : 1 /*<<list.ml:545:19>>*/ ;
    /*<<list.ml:545:19>>*/ }
   function equal(eq, l1, l2){
    var l1$0 = l1, l2$0 = l2;
     /*<<list.ml:555:2>>*/ for(;;){
     if(l1$0){
      if(l2$0){
       var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
        _d_ =
           /*<<list.ml:558:22>>*/  /*<<list.ml:558:22>>*/ caml_call2
            /*<<list.ml:558:22>>*/ (eq, a1, a2);
        /*<<list.ml:558:22>>*/ if(! _d_)
         /*<<list.ml:558:22>>*/ return _d_ /*<<list.ml:558:22>>*/ ;
       l1$0 = l1$1;
       l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0)  /*<<list.ml:556:14>>*/ return 1 /*<<list.ml:556:14>>*/ ;
      /*<<list.ml:557:27>>*/ return 0 /*<<list.ml:557:27>>*/ ;
    }
    /*<<list.ml:558:48>>*/ }
   function compare(cmp, l1, l2){
    var l1$0 = l1, l2$0 = l2;
     /*<<list.ml:561:2>>*/ for(;;){
     if(! l1$0) return l2$0 ? -1 : 0 /*<<list.ml:568:26>>*/ ;
     var l1$1 = l1$0[2], a1 = l1$0[1];
     if(! l2$0)  /*<<list.ml:564:16>>*/ return 1 /*<<list.ml:564:16>>*/ ;
     var
      l2$1 = l2$0[2],
      a2 = l2$0[1],
      c =
         /*<<list.ml:566:12>>*/  /*<<list.ml:566:12>>*/ caml_call2
          /*<<list.ml:566:12>>*/ (cmp, a1, a2);
      /*<<list.ml:567:4>>*/ if(0 !== c)
       /*<<list.ml:567:19>>*/ return c /*<<list.ml:567:19>>*/ ;
     l1$0 = l1$1;
     l2$0 = l2$1;
    }
    /*<<list.ml:568:26>>*/ }
   function to_seq(l){
    function aux(l, param){
      /*<<list.ml:573:21>>*/ if(! l)
       /*<<list.ml:574:12>>*/ return 0 /*<<list.ml:574:12>>*/ ;
     var tail = l[2], x = l[1];
      /*<<list.ml:575:19>>*/ return [0,
             x,
             function(_c_){ /*<<?>>*/ return aux(tail, _c_);}] /*<<list.ml:575:19>>*/ ;
     /*<<list.ml:575:41>>*/ }
     /*<<list.ml:577:2>>*/ return function(_b_){
      /*<<?>>*/ return aux(l, _b_);} /*<<list.ml:577:2>>*/ ;
    /*<<list.ml:577:7>>*/ }
   function of_seq(seq){
    var
     match =
        /*<<list.ml:580:8>>*/  /*<<list.ml:580:8>>*/ caml_call1
         /*<<list.ml:580:8>>*/ (seq, 0);
    if(! match)  /*<<list.ml:581:15>>*/ return 0 /*<<list.ml:581:15>>*/ ;
    var
     seq$0 = match[2],
     x1 = match[1],
     match$0 =
        /*<<list.ml:583:18>>*/  /*<<list.ml:583:18>>*/ caml_call1
         /*<<list.ml:583:18>>*/ (seq$0, 0);
    if(! match$0)
      /*<<list.ml:584:19>>*/ return [0, x1, 0] /*<<list.ml:584:19>>*/ ;
    var
     seq$1 = match$0[2],
     x2 = match$0[1],
     block =  /*<<list.ml:585:36>>*/ [0, x2, 24029],
     dst = block,
     offset = 1,
     seq$2 = seq$1;
     /*<<list.ml:580:2>>*/ for(;;){
     var
      match$1 =
         /*<<list.ml:580:8>>*/  /*<<list.ml:580:8>>*/ caml_call1
          /*<<list.ml:580:8>>*/ (seq$2, 0);
     if(match$1){
      var
       seq$3 = match$1[2],
       x1$0 = match$1[1],
       match$2 =
          /*<<list.ml:583:18>>*/  /*<<list.ml:583:18>>*/ caml_call1
           /*<<list.ml:583:18>>*/ (seq$3, 0);
      if(match$2){
       var
        seq$4 = match$2[2],
        x2$0 = match$2[1],
        dst$0 =  /*<<list.ml:585:36>>*/ [0, x2$0, 24029];
       dst[1 + offset] = [0, x1$0, dst$0];
       dst = dst$0;
       offset = 1;
       seq$2 = seq$4;
       continue;
      }
      dst[1 + offset] = [0, x1$0, 0];
     }
     else
      dst[1 + offset] = 0;
      /*<<list.ml:585:30>>*/ return [0, x1, block] /*<<list.ml:585:30>>*/ ;
    }
    /*<<list.ml:586:9>>*/ }
   var
    Stdlib_List =
      [0,
       length,
       compare_lengths,
       compare_length_with,
       is_empty,
       cons,
       hd,
       tl,
       nth,
       nth_opt,
       rev,
       init,
       append,
       rev_append,
       flatten,
       flatten,
       equal,
       compare,
       iter,
       iteri,
       map,
       mapi,
       rev_map,
       filter_map,
       concat_map,
       fold_left_map,
       fold_left,
       fold_right,
       iter2,
       map2,
       rev_map2,
       fold_left2,
       fold_right2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find,
       find_opt,
       find_index,
       find_map,
       find_mapi,
       find_all,
       find_all,
       filteri,
       partition,
       partition_map,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       stable_sort,
       stable_sort,
       stable_sort,
       sort_uniq,
       merge,
       to_seq,
       of_seq];
   runtime.caml_register_global(17, Stdlib_List, "Stdlib__List");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Int
(function(globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_hash =  /*<<?>>*/ runtime.caml_hash;
   function abs(x){
     /*<<int.ml:29:12>>*/ return 0 <= x ? x : - x | 0 /*<<int.ml:29:36>>*/ ;
    /*<<int.ml:29:36>>*/ }
   function lognot(x){
     /*<<int.ml:35:15>>*/ return x ^ -1;
    /*<<int.ml:35:28>>*/ }
   function equal(_b_, _a_){ /*<<?>>*/ return _b_ === _a_ ? 1 : 0;}
   var compare = runtime.caml_int_compare;
   function min(x, y){
     /*<<int.ml:41:18>>*/ return x <= y ? x : y /*<<int.ml:41:41>>*/ ;
    /*<<int.ml:41:41>>*/ }
   function max(x, y){
     /*<<int.ml:42:18>>*/ return y <= x ? x : y /*<<int.ml:42:41>>*/ ;
    /*<<int.ml:42:41>>*/ }
   function to_string(x){
     /*<<int.ml:52:18>>*/ return "" + x /*<<int.ml:52:18>>*/ ;
    /*<<int.ml:52:35>>*/ }
   function seeded_hash(seed, x){
     /*<<int.ml:56:25>>*/ return  /*<<int.ml:56:25>>*/ caml_hash
             /*<<int.ml:56:25>>*/ (10, 100, seed, x) /*<<int.ml:56:56>>*/ ;
    /*<<int.ml:56:56>>*/ }
   function hash(x){
     /*<<int.ml:57:13>>*/ return  /*<<int.ml:57:13>>*/ caml_hash
             /*<<int.ml:57:13>>*/ (10, 100, 0, x) /*<<int.ml:57:41>>*/ ;
    /*<<int.ml:57:41>>*/ }
   var
    Stdlib_Int =
      [0,
       0,
       1,
       -1,
       abs,
       2147483647,
       -2147483648,
       lognot,
       equal,
       compare,
       min,
       max,
       to_string,
       seeded_hash,
       hash];
   runtime.caml_register_global(1, Stdlib_Int, "Stdlib__Int");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Bytes
//# unitInfo: Requires: Stdlib, Stdlib__Char, Stdlib__Int, Stdlib__Seq, Stdlib__Sys, Stdlib__Uchar
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst_bytes_ml =  /*<<?>>*/ "bytes.ml",
    cst_index_out_of_bounds$3 =  /*<<?>>*/ "index out of bounds",
    caml_blit_bytes =  /*<<?>>*/ runtime.caml_blit_bytes,
    caml_bswap16 =  /*<<?>>*/ runtime.caml_bswap16,
    caml_bytes_get =  /*<<?>>*/ runtime.caml_bytes_get,
    caml_bytes_get16 =  /*<<?>>*/ runtime.caml_bytes_get16,
    caml_bytes_get32 =  /*<<?>>*/ runtime.caml_bytes_get32,
    caml_bytes_get64 =  /*<<?>>*/ runtime.caml_bytes_get64,
    caml_bytes_of_string =  /*<<?>>*/ runtime.caml_bytes_of_string,
    caml_bytes_set =  /*<<?>>*/ runtime.caml_bytes_set,
    caml_bytes_set16 =  /*<<?>>*/ runtime.caml_bytes_set16,
    caml_bytes_set32 =  /*<<?>>*/ runtime.caml_bytes_set32,
    caml_bytes_set64 =  /*<<?>>*/ runtime.caml_bytes_set64,
    caml_bytes_unsafe_get =  /*<<?>>*/ runtime.caml_bytes_unsafe_get,
    caml_bytes_unsafe_set =  /*<<?>>*/ runtime.caml_bytes_unsafe_set,
    caml_create_bytes =  /*<<?>>*/ runtime.caml_create_bytes,
    caml_fill_bytes =  /*<<?>>*/ runtime.caml_fill_bytes,
    caml_int32_bswap =  /*<<?>>*/ runtime.caml_int32_bswap,
    caml_int64_bswap =  /*<<?>>*/ runtime.caml_int64_bswap,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length =  /*<<?>>*/ runtime.caml_ml_bytes_length,
    caml_string_of_bytes =  /*<<?>>*/ runtime.caml_string_of_bytes,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Char = global_data.Stdlib__Char;
   function make(n, c){
    var
     s =
        /*<<bytes.ml:42:10>>*/  /*<<bytes.ml:42:10>>*/ caml_create_bytes
         /*<<bytes.ml:42:10>>*/ (n);
     /*<<bytes.ml:43:2>>*/  /*<<bytes.ml:43:2>>*/ caml_fill_bytes
      /*<<bytes.ml:43:2>>*/ (s, 0, n, c);
     /*<<bytes.ml:43:2>>*/ return s /*<<bytes.ml:43:2>>*/ ;
    /*<<bytes.ml:44:3>>*/ }
   function init(n, f){
    var
     s =
        /*<<bytes.ml:47:10>>*/  /*<<bytes.ml:47:10>>*/ caml_create_bytes
         /*<<bytes.ml:47:10>>*/ (n),
     _ap_ =  /*<<bytes.ml:48:2>>*/ n - 1 | 0,
     _ao_ =  /*<<bytes.ml:47:10>>*/ 0;
    if(_ap_ >= 0){
     var i = _ao_;
     for(;;){
      caml_bytes_unsafe_set
       (s,
        i,
         /*<<bytes.ml:49:19>>*/ caml_call1 /*<<bytes.ml:49:19>>*/ (f, i));
      var _aq_ =  /*<<bytes.ml:48:2>>*/ i + 1 | 0;
      if(_ap_ === i) break;
      i = _aq_;
     }
    }
     /*<<bytes.ml:51:2>>*/ return s /*<<bytes.ml:51:2>>*/ ;
    /*<<bytes.ml:51:3>>*/ }
   var
    empty =
       /*<<bytes.ml:53:12>>*/  /*<<bytes.ml:53:12>>*/ caml_create_bytes
        /*<<bytes.ml:53:12>>*/ (0),
    cst_String_sub_Bytes_sub = "String.sub / Bytes.sub",
    cst_Bytes_extend = "Bytes.extend",
    cst_String_fill_Bytes_fill = "String.fill / Bytes.fill",
    cst_Bytes_blit = "Bytes.blit",
    cst_String_blit_Bytes_blit_str = "String.blit / Bytes.blit_string",
    cst_Bytes_concat = "Bytes.concat",
    cst_String_index_from_Bytes_in = "String.index_from / Bytes.index_from",
    cst_String_index_from_opt_Byte =
      "String.index_from_opt / Bytes.index_from_opt",
    cst_String_rindex_from_Bytes_r = "String.rindex_from / Bytes.rindex_from",
    cst_String_rindex_from_opt_Byt =
      "String.rindex_from_opt / Bytes.rindex_from_opt",
    cst_String_contains_from_Bytes =
      "String.contains_from / Bytes.contains_from",
    cst_String_rcontains_from_Byte =
      "String.rcontains_from / Bytes.rcontains_from";
   function copy(s){
    var
     len = caml_ml_bytes_length(s),
     r =
        /*<<bytes.ml:57:10>>*/  /*<<bytes.ml:57:10>>*/ caml_create_bytes
         /*<<bytes.ml:57:10>>*/ (len);
     /*<<bytes.ml:58:2>>*/  /*<<bytes.ml:58:2>>*/ caml_blit_bytes
      /*<<bytes.ml:58:2>>*/ (s, 0, r, 0, len);
     /*<<bytes.ml:58:2>>*/ return r /*<<bytes.ml:58:2>>*/ ;
    /*<<bytes.ml:59:3>>*/ }
   function to_string(b){
     /*<<bytes.ml:61:18>>*/ return  /*<<bytes.ml:61:35>>*/ caml_string_of_bytes
             /*<<bytes.ml:61:35>>*/ ( /*<<bytes.ml:61:35>>*/ copy
               /*<<bytes.ml:61:35>>*/ (b)) /*<<bytes.ml:61:43>>*/ ;
    /*<<bytes.ml:61:43>>*/ }
   function of_string(s){
     /*<<bytes.ml:62:18>>*/ return  /*<<bytes.ml:61:14>>*/ copy
             /*<<bytes.ml:61:14>>*/ (caml_bytes_of_string(s)) /*<<bytes.ml:62:43>>*/ ;
    /*<<bytes.ml:62:43>>*/ }
   function sub(s, ofs, len){
     /*<<bytes.ml:65:2>>*/ if
     (0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs){
     var
      r =
         /*<<bytes.ml:68:12>>*/  /*<<bytes.ml:68:12>>*/ caml_create_bytes
          /*<<bytes.ml:68:12>>*/ (len);
      /*<<bytes.ml:69:4>>*/  /*<<bytes.ml:69:4>>*/ caml_blit_bytes
       /*<<bytes.ml:69:4>>*/ (s, ofs, r, 0, len);
      /*<<bytes.ml:69:4>>*/ return r /*<<bytes.ml:69:4>>*/ ;
    }
     /*<<bytes.ml:66:7>>*/ return  /*<<bytes.ml:66:7>>*/ caml_call1
             /*<<bytes.ml:66:7>>*/ (Stdlib[1], cst_String_sub_Bytes_sub) /*<<bytes.ml:71:5>>*/ ;
    /*<<bytes.ml:71:5>>*/ }
   function sub_string(b, ofs, len){
     /*<<bytes.ml:73:27>>*/ return  /*<<bytes.ml:73:44>>*/ caml_string_of_bytes
             /*<<bytes.ml:73:44>>*/ ( /*<<bytes.ml:73:44>>*/ sub
               /*<<bytes.ml:73:44>>*/ (b, ofs, len)) /*<<bytes.ml:73:59>>*/ ;
    /*<<bytes.ml:73:59>>*/ }
   function symbol(a, b){
    var c = a + b | 0, _an_ = b < 0 ? 1 : 0, match = c < 0 ? 1 : 0;
    a:
    {
     if(a < 0){if(_an_ && ! match) break a;} else if(! _an_ && match) break a;
      /*<<bytes.ml:81:9>>*/ return c /*<<bytes.ml:81:9>>*/ ;
    }
     /*<<bytes.ml:80:27>>*/ return  /*<<bytes.ml:80:27>>*/ caml_call1
             /*<<bytes.ml:80:27>>*/ (Stdlib[1], cst_Bytes_extend) /*<<bytes.ml:81:10>>*/ ;
    /*<<bytes.ml:81:10>>*/ }
   function extend(s, left, right){
    var
     len =
        /*<<bytes.ml:84:12>>*/  /*<<bytes.ml:84:12>>*/ symbol
         /*<<bytes.ml:84:12>>*/ ( /*<<bytes.ml:84:12>>*/ symbol
           /*<<bytes.ml:84:12>>*/ (caml_ml_bytes_length(s), left),
         right),
     r =
        /*<<bytes.ml:85:10>>*/  /*<<bytes.ml:85:10>>*/ caml_create_bytes
         /*<<bytes.ml:85:10>>*/ (len);
    if(0 <= left)
     var dstoff = left, srcoff = 0;
    else
     var dstoff = 0, srcoff = - left | 0;
    var
     cpylen =
        /*<<bytes.ml:87:15>>*/  /*<<bytes.ml:87:15>>*/ caml_call2
         /*<<bytes.ml:87:15>>*/ (Stdlib_Int[10],
         caml_ml_bytes_length(s) - srcoff | 0,
         len - dstoff | 0);
    if(0 < cpylen)
      /*<<bytes.ml:88:21>>*/  /*<<bytes.ml:88:21>>*/ caml_blit_bytes
       /*<<bytes.ml:88:21>>*/ (s, srcoff, r, dstoff, cpylen);
     /*<<bytes.ml:88:21>>*/ return r /*<<bytes.ml:88:21>>*/ ;
    /*<<bytes.ml:89:3>>*/ }
   function fill(s, ofs, len, c){
     /*<<bytes.ml:92:2>>*/ if
     (0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
      /*<<bytes.ml:94:7>>*/ return  /*<<bytes.ml:94:7>>*/ caml_fill_bytes
              /*<<bytes.ml:94:7>>*/ (s, ofs, len, c) /*<<bytes.ml:94:30>>*/ ;
     /*<<bytes.ml:93:7>>*/ return  /*<<bytes.ml:93:7>>*/ caml_call1
             /*<<bytes.ml:93:7>>*/ (Stdlib[1], cst_String_fill_Bytes_fill) /*<<bytes.ml:94:30>>*/ ;
    /*<<bytes.ml:94:30>>*/ }
   function blit(s1, ofs1, s2, ofs2, len){
     /*<<bytes.ml:97:2>>*/ if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_bytes_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2)
      /*<<bytes.ml:100:7>>*/ return  /*<<bytes.ml:100:7>>*/ caml_blit_bytes
              /*<<bytes.ml:100:7>>*/ (s1, ofs1, s2, ofs2, len) /*<<bytes.ml:100:38>>*/ ;
     /*<<bytes.ml:99:7>>*/ return  /*<<bytes.ml:99:7>>*/ caml_call1
             /*<<bytes.ml:99:7>>*/ (Stdlib[1], cst_Bytes_blit) /*<<bytes.ml:100:38>>*/ ;
    /*<<bytes.ml:100:38>>*/ }
   function blit_string(s1, ofs1, s2, ofs2, len){
     /*<<bytes.ml:103:2>>*/ if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (runtime.caml_ml_string_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2)
      /*<<bytes.ml:106:7>>*/ return  /*<<bytes.ml:106:7>>*/ runtime.caml_blit_string
              /*<<bytes.ml:106:7>>*/ (s1, ofs1, s2, ofs2, len) /*<<bytes.ml:106:45>>*/ ;
     /*<<bytes.ml:105:7>>*/ return  /*<<bytes.ml:105:7>>*/ caml_call1
             /*<<bytes.ml:105:7>>*/ (Stdlib[1],
             cst_String_blit_Bytes_blit_str) /*<<bytes.ml:106:45>>*/ ;
    /*<<bytes.ml:106:45>>*/ }
   function iter(f, a){
    var
     _al_ = caml_ml_bytes_length(a) - 1 | 0,
     _ak_ =  /*<<bytes.ml:110:2>>*/ 0;
    if(_al_ >= 0){
     var i = _ak_;
     for(;;){
       /*<<bytes.ml:110:31>>*/  /*<<bytes.ml:110:31>>*/ caml_call1
        /*<<bytes.ml:110:31>>*/ (f, caml_bytes_unsafe_get(a, i));
      var _am_ =  /*<<bytes.ml:110:31>>*/ i + 1 | 0;
      if(_al_ === i) break;
      i = _am_;
     }
    }
    return 0;
    /*<<bytes.ml:110:53>>*/ }
   function iteri(f, a){
    var
     _ai_ = caml_ml_bytes_length(a) - 1 | 0,
     _ah_ =  /*<<bytes.ml:114:2>>*/ 0;
    if(_ai_ >= 0){
     var i = _ah_;
     for(;;){
       /*<<bytes.ml:114:31>>*/  /*<<bytes.ml:114:31>>*/ caml_call2
        /*<<bytes.ml:114:31>>*/ (f, i, caml_bytes_unsafe_get(a, i));
      var _aj_ =  /*<<bytes.ml:114:31>>*/ i + 1 | 0;
      if(_ai_ === i) break;
      i = _aj_;
     }
    }
    return 0;
    /*<<bytes.ml:114:56>>*/ }
   function concat(sep, l){
     /*<<bytes.ml:132:11>>*/ if(! l)
      /*<<bytes.ml:53:12>>*/ return empty /*<<bytes.ml:53:12>>*/ ;
    var seplen = caml_ml_bytes_length(sep);
    a:
    {
     b:
     {
      var acc = 0, param = l, pos$1 = 0;
       /*<<bytes.ml:118:20>>*/ for(;;){
       if(! param) break;
       var hd = param[1];
       if(! param[2]) break b;
       var
        tl = param[2],
        x = (caml_ml_bytes_length(hd) + seplen | 0) + acc | 0,
        acc$0 =
          acc <= x
           ? x
           :  /*<<bytes.ml:116:48>>*/ caml_call1
              /*<<bytes.ml:116:48>>*/ (Stdlib[1], cst_Bytes_concat);
       acc = acc$0;
       param = tl;
      }
      var _ag_ = acc;
      break a;
     }
     var _ag_ = caml_ml_bytes_length(hd) + acc | 0;
    }
    var
     dst =
        /*<<bytes.ml:136:12>>*/  /*<<bytes.ml:136:12>>*/ caml_create_bytes
         /*<<bytes.ml:136:12>>*/ (_ag_),
     pos = pos$1,
     param$0 = l;
     /*<<bytes.ml:123:21>>*/ for(;;){
     if(! param$0)
       /*<<bytes.ml:124:10>>*/ return dst /*<<bytes.ml:124:10>>*/ ;
     var hd$0 = param$0[1];
     if(! param$0[2]){
       /*<<bytes.ml:126:4>>*/  /*<<bytes.ml:126:4>>*/ caml_blit_bytes
        /*<<bytes.ml:126:4>>*/ (hd$0, 0, dst, pos, caml_ml_bytes_length(hd$0));
       /*<<bytes.ml:126:4>>*/ return dst /*<<bytes.ml:126:4>>*/ ;
     }
     var tl$0 = param$0[2];
      /*<<bytes.ml:128:4>>*/  /*<<bytes.ml:128:4>>*/ caml_blit_bytes
       /*<<bytes.ml:128:4>>*/ (hd$0,
       0,
       dst,
       pos,
        /*<<bytes.ml:128:4>>*/ caml_ml_bytes_length
         /*<<bytes.ml:128:4>>*/ (hd$0));
      /*<<bytes.ml:129:4>>*/  /*<<bytes.ml:129:4>>*/ caml_blit_bytes
       /*<<bytes.ml:129:4>>*/ (sep,
       0,
       dst,
       pos + caml_ml_bytes_length(hd$0) | 0,
       seplen);
     var pos$0 = (pos + caml_ml_bytes_length(hd$0) | 0) + seplen | 0;
     pos = pos$0;
     param$0 = tl$0;
    }
    /*<<bytes.ml:137:26>>*/ }
   function cat(s1, s2){
    var
     l1 = caml_ml_bytes_length(s1),
     l2 =
        /*<<bytes.ml:141:2>>*/  /*<<bytes.ml:141:2>>*/ caml_ml_bytes_length
         /*<<bytes.ml:141:2>>*/ (s2),
     r =
        /*<<bytes.ml:142:10>>*/  /*<<bytes.ml:142:10>>*/ caml_create_bytes
         /*<<bytes.ml:142:10>>*/ (l1 + l2 | 0);
     /*<<bytes.ml:143:2>>*/  /*<<bytes.ml:143:2>>*/ caml_blit_bytes
      /*<<bytes.ml:143:2>>*/ (s1, 0, r, 0, l1);
     /*<<bytes.ml:144:2>>*/  /*<<bytes.ml:144:2>>*/ caml_blit_bytes
      /*<<bytes.ml:144:2>>*/ (s2, 0, r, l1, l2);
     /*<<bytes.ml:144:2>>*/ return r /*<<bytes.ml:144:2>>*/ ;
    /*<<bytes.ml:145:3>>*/ }
   function is_space(param){
    var _af_ =  /*<<bytes.ml:151:15>>*/ param - 9 | 0;
    a:
    {
     if(4 < _af_ >>> 0){if(23 !== _af_) break a;} else if(2 === _af_) break a;
      /*<<bytes.ml:152:41>>*/ return 1 /*<<bytes.ml:152:41>>*/ ;
    }
     /*<<bytes.ml:153:9>>*/ return 0 /*<<bytes.ml:153:9>>*/ ;
    /*<<bytes.ml:153:14>>*/ }
   function trim(s){
    var len = caml_ml_bytes_length(s), i =  /*<<bytes.ml:157:10>>*/ [0, 0];
    for(;;){
     if(i[1] >= len) break;
      /*<<bytes.ml:158:20>>*/ if
      (!
        /*<<bytes.ml:158:20>>*/ is_space
         /*<<bytes.ml:158:20>>*/ (caml_bytes_unsafe_get(s, i[1])))
      break;
     i[1]++;
    }
    var j =  /*<<bytes.ml:161:10>>*/ [0, len - 1 | 0];
    for(;;){
     if
      (i[1] <= j[1]
       &&
         /*<<bytes.ml:162:20>>*/ is_space
          /*<<bytes.ml:162:20>>*/ (caml_bytes_unsafe_get(s, j[1]))){j[1]--; continue;}
     return i[1] <= j[1]
             ?  /*<<bytes.ml:64:8>>*/ sub
                /*<<bytes.ml:64:8>>*/ (s, i[1], (j[1] - i[1] | 0) + 1 | 0)
             : empty /*<<bytes.ml:168:9>>*/ ;
    }
    /*<<bytes.ml:168:9>>*/ }
   function unsafe_escape(s){
    var
     n =  /*<<bytes.ml:184:10>>*/ [0, 0],
     ___ = caml_ml_bytes_length(s) - 1 | 0,
     _Z_ =  /*<<bytes.ml:184:10>>*/ 0;
    if(___ >= 0){
     var i$0 = _Z_;
     for(;;){
      var match = caml_bytes_unsafe_get(s, i$0);
      a:
      {
       b:
       {
        c:
        {
         if(32 <= match){
          var _ac_ = match - 34 | 0;
          if(58 < _ac_ >>> 0){
           if(93 <= _ac_) break c;
          }
          else if(56 < _ac_ - 1 >>> 0) break b;
          var _ad_ = 1;
          break a;
         }
         if(11 <= match){
          if(13 === match) break b;
         }
         else if(8 <= match) break b;
        }
        var _ad_ = 4;
        break a;
       }
       var _ad_ = 2;
      }
      n[1] = n[1] + _ad_ | 0;
      var _ae_ =  /*<<bytes.ml:185:2>>*/ i$0 + 1 | 0;
      if(___ === i$0) break;
      i$0 = _ae_;
     }
    }
    if(n[1] === caml_ml_bytes_length(s))
      /*<<bytes.ml:192:24>>*/ return s /*<<bytes.ml:192:24>>*/ ;
    var
     s$0 =
        /*<<bytes.ml:194:13>>*/  /*<<bytes.ml:194:13>>*/ caml_create_bytes
         /*<<bytes.ml:194:13>>*/ (n[1]);
    n[1] = 0;
    var
     _aa_ = caml_ml_bytes_length(s) - 1 | 0,
     _$_ =  /*<<bytes.ml:196:4>>*/ 0;
    if(_aa_ >= 0){
     var i = _$_;
     for(;;){
      var c = caml_bytes_unsafe_get(s, i);
      a:
      {
       b:
       {
        c:
        {
         if(35 <= c){
          if(92 !== c){if(127 <= c) break c; break b;}
         }
         else{
          if(32 > c){
           if(14 <= c) break c;
           switch(c){
             case 8:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 98);
              break a;
             case 9:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 116);
              break a;
             case 10:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 110);
              break a;
             case 13:
              caml_bytes_unsafe_set(s$0, n[1], 92);
              n[1]++;
              caml_bytes_unsafe_set(s$0, n[1], 114);
              break a;
             default: break c;
           }
          }
          if(34 > c) break b;
         }
         caml_bytes_unsafe_set(s$0, n[1], 92);
         n[1]++;
         caml_bytes_unsafe_set(s$0, n[1], c);
         break a;
        }
        caml_bytes_unsafe_set(s$0, n[1], 92);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + (c / 100 | 0) | 0);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + ((c / 10 | 0) % 10 | 0) | 0);
        n[1]++;
        caml_bytes_unsafe_set(s$0, n[1], 48 + (c % 10 | 0) | 0);
        break a;
       }
       caml_bytes_unsafe_set(s$0, n[1], c);
      }
      n[1]++;
      var _ab_ =  /*<<bytes.ml:196:4>>*/ i + 1 | 0;
      if(_aa_ === i) break;
      i = _ab_;
     }
    }
     /*<<bytes.ml:221:4>>*/ return s$0 /*<<bytes.ml:221:4>>*/ ;
    /*<<bytes.ml:222:5>>*/ }
   function escaped(b){
    var
     b$0 =
        /*<<bytes.ml:225:10>>*/  /*<<bytes.ml:225:10>>*/ copy
         /*<<bytes.ml:225:10>>*/ (b);
     /*<<bytes.ml:228:2>>*/ return  /*<<bytes.ml:228:2>>*/ unsafe_escape
             /*<<bytes.ml:228:2>>*/ (b$0) /*<<bytes.ml:228:17>>*/ ;
    /*<<bytes.ml:228:17>>*/ }
   function map(f, s){
    var l = caml_ml_bytes_length(s);
     /*<<bytes.ml:232:2>>*/ if(0 === l)
      /*<<bytes.ml:232:16>>*/ return s /*<<bytes.ml:232:16>>*/ ;
    var
     r =
        /*<<bytes.ml:233:12>>*/  /*<<bytes.ml:233:12>>*/ caml_create_bytes
         /*<<bytes.ml:233:12>>*/ (l),
     _X_ =  /*<<bytes.ml:234:4>>*/ l - 1 | 0,
     _W_ =  /*<<bytes.ml:233:12>>*/ 0;
    if(_X_ >= 0){
     var i = _W_;
     for(;;){
      caml_bytes_unsafe_set
       (r,
        i,
         /*<<bytes.ml:234:41>>*/ caml_call1
          /*<<bytes.ml:234:41>>*/ (f, caml_bytes_unsafe_get(s, i)));
      var _Y_ =  /*<<bytes.ml:234:4>>*/ i + 1 | 0;
      if(_X_ === i) break;
      i = _Y_;
     }
    }
     /*<<bytes.ml:235:4>>*/ return r /*<<bytes.ml:235:4>>*/ ;
    /*<<bytes.ml:236:5>>*/ }
   function mapi(f, s){
    var l = caml_ml_bytes_length(s);
     /*<<bytes.ml:240:2>>*/ if(0 === l)
      /*<<bytes.ml:240:16>>*/ return s /*<<bytes.ml:240:16>>*/ ;
    var
     r =
        /*<<bytes.ml:241:12>>*/  /*<<bytes.ml:241:12>>*/ caml_create_bytes
         /*<<bytes.ml:241:12>>*/ (l),
     _U_ =  /*<<bytes.ml:242:4>>*/ l - 1 | 0,
     _T_ =  /*<<bytes.ml:241:12>>*/ 0;
    if(_U_ >= 0){
     var i = _T_;
     for(;;){
      caml_bytes_unsafe_set
       (r,
        i,
         /*<<bytes.ml:242:41>>*/ caml_call2
          /*<<bytes.ml:242:41>>*/ (f, i, caml_bytes_unsafe_get(s, i)));
      var _V_ =  /*<<bytes.ml:242:4>>*/ i + 1 | 0;
      if(_U_ === i) break;
      i = _V_;
     }
    }
     /*<<bytes.ml:243:4>>*/ return r /*<<bytes.ml:243:4>>*/ ;
    /*<<bytes.ml:244:5>>*/ }
   function fold_left(f, x, a){
    var
     r =  /*<<bytes.ml:247:10>>*/ [0, x],
     _R_ = caml_ml_bytes_length(a) - 1 | 0,
     _Q_ =  /*<<bytes.ml:247:10>>*/ 0;
    if(_R_ >= 0){
     var i = _Q_;
     for(;;){
      r[1] =
        /*<<bytes.ml:249:9>>*/ caml_call2
         /*<<bytes.ml:249:9>>*/ (f, r[1], caml_bytes_unsafe_get(a, i));
      var _S_ =  /*<<bytes.ml:248:2>>*/ i + 1 | 0;
      if(_R_ === i) break;
      i = _S_;
     }
    }
    return r[1];
    /*<<bytes.ml:251:4>>*/ }
   function fold_right(f, a, x){
    var
     r =  /*<<bytes.ml:254:10>>*/ [0, x],
     _O_ =
        /*<<bytes.ml:255:2>>*/  /*<<bytes.ml:255:2>>*/ caml_ml_bytes_length
         /*<<bytes.ml:255:2>>*/ (a)
       - 1
       | 0;
    if(_O_ >= 0){
     var i = _O_;
     for(;;){
      r[1] =
        /*<<bytes.ml:256:9>>*/ caml_call2
         /*<<bytes.ml:256:9>>*/ (f, caml_bytes_unsafe_get(a, i), r[1]);
      var _P_ =  /*<<bytes.ml:255:2>>*/ i - 1 | 0;
      if(0 === i) break;
      i = _P_;
     }
    }
    return r[1];
    /*<<bytes.ml:258:4>>*/ }
   function exists(p, s){
    var n = caml_ml_bytes_length(s), i = 0;
     /*<<bytes.ml:263:4>>*/ for(;;){
     if(i === n)  /*<<bytes.ml:263:18>>*/ return 0 /*<<bytes.ml:263:18>>*/ ;
      /*<<bytes.ml:264:12>>*/ if
      ( /*<<bytes.ml:264:12>>*/ caml_call1
         /*<<bytes.ml:264:12>>*/ (p, caml_bytes_unsafe_get(s, i)))
       /*<<bytes.ml:264:36>>*/ return 1 /*<<bytes.ml:264:36>>*/ ;
     var i$0 =  /*<<bytes.ml:265:9>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<bytes.ml:266:8>>*/ }
   function for_all(p, s){
    var n = caml_ml_bytes_length(s), i = 0;
     /*<<bytes.ml:271:4>>*/ for(;;){
     if(i === n)  /*<<bytes.ml:271:18>>*/ return 1 /*<<bytes.ml:271:18>>*/ ;
      /*<<bytes.ml:272:12>>*/ if
      (!
        /*<<bytes.ml:272:12>>*/ caml_call1
         /*<<bytes.ml:272:12>>*/ (p, caml_bytes_unsafe_get(s, i)))
       /*<<bytes.ml:273:9>>*/ return 0 /*<<bytes.ml:273:9>>*/ ;
     var i$0 =  /*<<bytes.ml:272:36>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<bytes.ml:274:8>>*/ }
   function uppercase_ascii(s){
     /*<<bytes.ml:276:24>>*/ return  /*<<bytes.ml:276:24>>*/ map
             /*<<bytes.ml:276:24>>*/ (Stdlib_Char[4], s) /*<<bytes.ml:276:50>>*/ ;
    /*<<bytes.ml:276:50>>*/ }
   function lowercase_ascii(s){
     /*<<bytes.ml:277:24>>*/ return  /*<<bytes.ml:277:24>>*/ map
             /*<<bytes.ml:277:24>>*/ (Stdlib_Char[3], s) /*<<bytes.ml:277:50>>*/ ;
    /*<<bytes.ml:277:50>>*/ }
   function apply1(f, s){
     /*<<bytes.ml:280:2>>*/ if(0 === caml_ml_bytes_length(s))
      /*<<bytes.ml:280:23>>*/ return s /*<<bytes.ml:280:23>>*/ ;
    var
     r =
        /*<<bytes.ml:281:12>>*/  /*<<bytes.ml:281:12>>*/ copy
         /*<<bytes.ml:281:12>>*/ (s);
    caml_bytes_unsafe_set
     (r,
      0,
       /*<<bytes.ml:282:19>>*/ caml_call1
        /*<<bytes.ml:282:19>>*/ (f, caml_bytes_unsafe_get(s, 0)));
     /*<<bytes.ml:283:4>>*/ return r /*<<bytes.ml:283:4>>*/ ;
    /*<<bytes.ml:284:5>>*/ }
   function capitalize_ascii(s){
     /*<<bytes.ml:286:25>>*/ return  /*<<bytes.ml:286:25>>*/ apply1
             /*<<bytes.ml:286:25>>*/ (Stdlib_Char[4], s) /*<<bytes.ml:286:54>>*/ ;
    /*<<bytes.ml:286:54>>*/ }
   function uncapitalize_ascii(s){
     /*<<bytes.ml:287:27>>*/ return  /*<<bytes.ml:287:27>>*/ apply1
             /*<<bytes.ml:287:27>>*/ (Stdlib_Char[3], s) /*<<bytes.ml:287:56>>*/ ;
    /*<<bytes.ml:287:56>>*/ }
   function starts_with(prefix, s){
    var
     len_s = caml_ml_bytes_length(s),
     len_pre = caml_ml_bytes_length(prefix),
     _N_ = len_pre <= len_s ? 1 : 0;
    if(! _N_) return _N_;
    var i = 0;
     /*<<bytes.ml:294:4>>*/ for(;;){
     if(i === len_pre)
       /*<<bytes.ml:294:24>>*/ return 1 /*<<bytes.ml:294:24>>*/ ;
     if(caml_bytes_unsafe_get(s, i) !== caml_bytes_unsafe_get(prefix, i))
       /*<<bytes.ml:295:55>>*/ return 0 /*<<bytes.ml:295:55>>*/ ;
     var i$0 =  /*<<bytes.ml:296:9>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<bytes.ml:297:30>>*/ }
   function ends_with(suffix, s){
    var
     len_s = caml_ml_bytes_length(s),
     len_suf = caml_ml_bytes_length(suffix),
     diff = len_s - len_suf | 0,
     _M_ = 0 <= diff ? 1 : 0;
    if(! _M_) return _M_;
    var i = 0;
     /*<<bytes.ml:305:4>>*/ for(;;){
     if(i === len_suf)
       /*<<bytes.ml:305:24>>*/ return 1 /*<<bytes.ml:305:24>>*/ ;
     if
      (caml_bytes_unsafe_get(s, diff + i | 0)
       !== caml_bytes_unsafe_get(suffix, i))
       /*<<bytes.ml:306:64>>*/ return 0 /*<<bytes.ml:306:64>>*/ ;
     var i$0 =  /*<<bytes.ml:307:9>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<bytes.ml:308:23>>*/ }
   function index_rec(s, lim, i, c){
    var i$0 = i;
     /*<<bytes.ml:312:2>>*/ for(;;){
     if(lim <= i$0)
       /*<<bytes.ml:312:19>>*/ throw  /*<<bytes.ml:312:19>>*/ caml_maybe_attach_backtrace
              /*<<bytes.ml:312:19>>*/ (Stdlib[8], 1);
     if(caml_bytes_unsafe_get(s, i$0) === c)
       /*<<bytes.ml:313:29>>*/ return i$0 /*<<bytes.ml:313:29>>*/ ;
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
    /*<<bytes.ml:313:61>>*/ }
   function index(s, c){
     /*<<bytes.ml:316:16>>*/ return  /*<<bytes.ml:316:16>>*/ index_rec
             /*<<bytes.ml:316:16>>*/ (s, caml_ml_bytes_length(s), 0, c) /*<<bytes.ml:316:42>>*/ ;
    /*<<bytes.ml:316:42>>*/ }
   function index_rec_opt(s, lim, i, c){
    var i$0 = i;
     /*<<bytes.ml:320:2>>*/ for(;;){
     if(lim <= i$0)
       /*<<bytes.ml:320:19>>*/ return 0 /*<<bytes.ml:320:19>>*/ ;
     if(caml_bytes_unsafe_get(s, i$0) === c)
       /*<<bytes.ml:321:29>>*/ return [0, i$0] /*<<bytes.ml:321:29>>*/ ;
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
    /*<<bytes.ml:321:70>>*/ }
   function index_opt(s, c){
     /*<<bytes.ml:324:20>>*/ return  /*<<bytes.ml:324:20>>*/ index_rec_opt
             /*<<bytes.ml:324:20>>*/ (s, caml_ml_bytes_length(s), 0, c) /*<<bytes.ml:324:50>>*/ ;
    /*<<bytes.ml:324:50>>*/ }
   function index_from(s, i, c){
    var l = caml_ml_bytes_length(s);
     /*<<bytes.ml:329:2>>*/ if(0 <= i && l >= i)
      /*<<bytes.ml:330:2>>*/ return  /*<<bytes.ml:330:2>>*/ index_rec
              /*<<bytes.ml:330:2>>*/ (s, l, i, c) /*<<bytes.ml:330:19>>*/ ;
     /*<<bytes.ml:329:25>>*/ return  /*<<bytes.ml:329:25>>*/ caml_call1
             /*<<bytes.ml:329:25>>*/ (Stdlib[1],
             cst_String_index_from_Bytes_in) /*<<bytes.ml:330:19>>*/ ;
    /*<<bytes.ml:330:19>>*/ }
   function index_from_opt(s, i, c){
    var l = caml_ml_bytes_length(s);
     /*<<bytes.ml:335:2>>*/ if(0 <= i && l >= i)
      /*<<bytes.ml:338:4>>*/ return  /*<<bytes.ml:338:4>>*/ index_rec_opt
              /*<<bytes.ml:338:4>>*/ (s, l, i, c) /*<<bytes.ml:338:25>>*/ ;
     /*<<bytes.ml:336:4>>*/ return  /*<<bytes.ml:336:4>>*/ caml_call1
             /*<<bytes.ml:336:4>>*/ (Stdlib[1],
             cst_String_index_from_opt_Byte) /*<<bytes.ml:338:25>>*/ ;
    /*<<bytes.ml:338:25>>*/ }
   function rindex_rec(s, i, c){
    var i$0 = i;
     /*<<bytes.ml:342:2>>*/ for(;;){
     if(0 > i$0)
       /*<<bytes.ml:342:16>>*/ throw  /*<<bytes.ml:342:16>>*/ caml_maybe_attach_backtrace
              /*<<bytes.ml:342:16>>*/ (Stdlib[8], 1);
     if(caml_bytes_unsafe_get(s, i$0) === c)
       /*<<bytes.ml:343:29>>*/ return i$0 /*<<bytes.ml:343:29>>*/ ;
     var i$1 = i$0 - 1 | 0;
     i$0 = i$1;
    }
    /*<<bytes.ml:343:58>>*/ }
   function rindex(s, c){
     /*<<bytes.ml:346:17>>*/ return  /*<<bytes.ml:346:17>>*/ rindex_rec
             /*<<bytes.ml:346:17>>*/ (s, caml_ml_bytes_length(s) - 1 | 0, c) /*<<bytes.ml:346:46>>*/ ;
    /*<<bytes.ml:346:46>>*/ }
   function rindex_from(s, i, c){
     /*<<bytes.ml:350:2>>*/ if(-1 <= i && caml_ml_bytes_length(s) > i)
      /*<<bytes.ml:353:4>>*/ return  /*<<bytes.ml:353:4>>*/ rindex_rec
              /*<<bytes.ml:353:4>>*/ (s, i, c) /*<<bytes.ml:353:20>>*/ ;
     /*<<bytes.ml:351:4>>*/ return  /*<<bytes.ml:351:4>>*/ caml_call1
             /*<<bytes.ml:351:4>>*/ (Stdlib[1],
             cst_String_rindex_from_Bytes_r) /*<<bytes.ml:353:20>>*/ ;
    /*<<bytes.ml:353:20>>*/ }
   function rindex_rec_opt(s, i, c){
    var i$0 = i;
     /*<<bytes.ml:357:2>>*/ for(;;){
     if(0 > i$0)  /*<<bytes.ml:357:16>>*/ return 0 /*<<bytes.ml:357:16>>*/ ;
     if(caml_bytes_unsafe_get(s, i$0) === c)
       /*<<bytes.ml:358:29>>*/ return [0, i$0] /*<<bytes.ml:358:29>>*/ ;
     var i$1 = i$0 - 1 | 0;
     i$0 = i$1;
    }
    /*<<bytes.ml:358:67>>*/ }
   function rindex_opt(s, c){
     /*<<bytes.ml:361:21>>*/ return  /*<<bytes.ml:361:21>>*/ rindex_rec_opt
             /*<<bytes.ml:361:21>>*/ (s, caml_ml_bytes_length(s) - 1 | 0, c) /*<<bytes.ml:361:54>>*/ ;
    /*<<bytes.ml:361:54>>*/ }
   function rindex_from_opt(s, i, c){
     /*<<bytes.ml:365:2>>*/ if(-1 <= i && caml_ml_bytes_length(s) > i)
      /*<<bytes.ml:368:4>>*/ return  /*<<bytes.ml:368:4>>*/ rindex_rec_opt
              /*<<bytes.ml:368:4>>*/ (s, i, c) /*<<bytes.ml:368:24>>*/ ;
     /*<<bytes.ml:366:4>>*/ return  /*<<bytes.ml:366:4>>*/ caml_call1
             /*<<bytes.ml:366:4>>*/ (Stdlib[1],
             cst_String_rindex_from_opt_Byt) /*<<bytes.ml:368:24>>*/ ;
    /*<<bytes.ml:368:24>>*/ }
   function contains_from(s, i, c){
    var l = caml_ml_bytes_length(s);
     /*<<bytes.ml:374:2>>*/ if(0 <= i && l >= i)
      /*<<bytes.ml:377:4>>*/ try{
       /*<<bytes.ml:377:15>>*/  /*<<bytes.ml:377:15>>*/ index_rec
        /*<<bytes.ml:377:15>>*/ (s, l, i, c);
      var _K_ =  /*<<bytes.ml:377:36>>*/ 1;
       /*<<bytes.ml:377:36>>*/ return _K_ /*<<bytes.ml:377:36>>*/ ;
     }
     catch(_L_){
      var _J_ = caml_wrap_exception(_L_);
      if(_J_ === Stdlib[8])
        /*<<bytes.ml:377:59>>*/ return 0 /*<<bytes.ml:377:59>>*/ ;
      throw caml_maybe_attach_backtrace(_J_, 0);
     }
     /*<<bytes.ml:375:4>>*/ return  /*<<bytes.ml:375:4>>*/ caml_call1
             /*<<bytes.ml:375:4>>*/ (Stdlib[1],
             cst_String_contains_from_Bytes) /*<<bytes.ml:377:64>>*/ ;
    /*<<bytes.ml:377:64>>*/ }
   function contains(s, c){
     /*<<bytes.ml:381:19>>*/ return  /*<<bytes.ml:381:19>>*/ contains_from
             /*<<bytes.ml:381:19>>*/ (s, 0, c) /*<<bytes.ml:381:38>>*/ ;
    /*<<bytes.ml:381:38>>*/ }
   function rcontains_from(s, i, c){
     /*<<bytes.ml:385:2>>*/ if(0 <= i && caml_ml_bytes_length(s) > i)
      /*<<bytes.ml:388:4>>*/ try{
       /*<<bytes.ml:388:15>>*/  /*<<bytes.ml:388:15>>*/ rindex_rec
        /*<<bytes.ml:388:15>>*/ (s, i, c);
      var _H_ =  /*<<bytes.ml:388:35>>*/ 1;
       /*<<bytes.ml:388:35>>*/ return _H_ /*<<bytes.ml:388:35>>*/ ;
     }
     catch(_I_){
      var _G_ = caml_wrap_exception(_I_);
      if(_G_ === Stdlib[8])
        /*<<bytes.ml:388:58>>*/ return 0 /*<<bytes.ml:388:58>>*/ ;
      throw caml_maybe_attach_backtrace(_G_, 0);
     }
     /*<<bytes.ml:386:4>>*/ return  /*<<bytes.ml:386:4>>*/ caml_call1
             /*<<bytes.ml:386:4>>*/ (Stdlib[1],
             cst_String_rcontains_from_Byte) /*<<bytes.ml:388:63>>*/ ;
    /*<<bytes.ml:388:63>>*/ }
   var
    compare = runtime.caml_bytes_compare,
    cst_Bytes_of_seq_cannot_grow_b = "Bytes.of_seq: cannot grow bytes";
   function split_on_char(sep, s){
    var
     r =  /*<<bytes.ml:398:10>>*/ [0, 0],
     j =
        /*<<bytes.ml:399:10>>*/ [0,
         /*<<bytes.ml:399:2>>*/ caml_ml_bytes_length
          /*<<bytes.ml:399:2>>*/ (s)],
     _C_ =
        /*<<bytes.ml:400:2>>*/  /*<<bytes.ml:400:2>>*/ caml_ml_bytes_length
         /*<<bytes.ml:400:2>>*/ (s)
       - 1
       | 0;
    if(_C_ >= 0){
     var i = _C_;
     for(;;){
      if(caml_bytes_unsafe_get(s, i) === sep){
       var _E_ = r[1];
       r[1] =
        [0,
          /*<<bytes.ml:402:11>>*/ sub
           /*<<bytes.ml:402:11>>*/ (s, i + 1 | 0, (j[1] - i | 0) - 1 | 0),
         _E_];
       j[1] = i;
      }
      var _F_ =  /*<<bytes.ml:400:2>>*/ i - 1 | 0;
      if(0 === i) break;
      i = _F_;
     }
    }
    var _D_ = r[1];
     /*<<bytes.ml:406:2>>*/ return [0,
             /*<<bytes.ml:406:2>>*/ sub /*<<bytes.ml:406:2>>*/ (s, 0, j[1]),
            _D_] /*<<bytes.ml:406:2>>*/ ;
    /*<<bytes.ml:406:18>>*/ }
   function to_seq(s){
    function aux(i, param){
      /*<<bytes.ml:412:4>>*/ if(i === caml_ml_bytes_length(s))
       /*<<bytes.ml:412:25>>*/ return 0 /*<<bytes.ml:412:25>>*/ ;
     var
      x =
         /*<<bytes.ml:414:14>>*/  /*<<bytes.ml:414:14>>*/ caml_bytes_get
          /*<<bytes.ml:414:14>>*/ (s, i),
      _A_ =  /*<<bytes.ml:414:14>>*/ i + 1 | 0;
      /*<<bytes.ml:415:6>>*/ return [0,
             x,
             function(_B_){ /*<<?>>*/ return aux(_A_, _B_);}] /*<<bytes.ml:415:6>>*/ ;
     /*<<bytes.ml:415:29>>*/ }
    var _y_ =  /*<<bytes.ml:417:2>>*/ 0;
     /*<<bytes.ml:417:2>>*/ return function(_z_){
      /*<<?>>*/ return aux(_y_, _z_);} /*<<bytes.ml:417:2>>*/ ;
    /*<<bytes.ml:417:7>>*/ }
   function to_seqi(s){
    function aux(i, param){
      /*<<bytes.ml:421:4>>*/ if(i === caml_ml_bytes_length(s))
       /*<<bytes.ml:421:25>>*/ return 0 /*<<bytes.ml:421:25>>*/ ;
     var
      x =
         /*<<bytes.ml:423:14>>*/  /*<<bytes.ml:423:14>>*/ caml_bytes_get
          /*<<bytes.ml:423:14>>*/ (s, i),
      _w_ =  /*<<bytes.ml:423:14>>*/ i + 1 | 0;
      /*<<bytes.ml:424:6>>*/ return [0,
             [0, i, x],
             function(_x_){ /*<<?>>*/ return aux(_w_, _x_);}] /*<<bytes.ml:424:6>>*/ ;
     /*<<bytes.ml:424:33>>*/ }
    var _u_ =  /*<<bytes.ml:426:2>>*/ 0;
     /*<<bytes.ml:426:2>>*/ return function(_v_){
      /*<<?>>*/ return aux(_u_, _v_);} /*<<bytes.ml:426:2>>*/ ;
    /*<<bytes.ml:426:7>>*/ }
   function of_seq(i){
    var
     n =  /*<<bytes.ml:429:10>>*/ [0, 0],
     buf =
        /*<<bytes.ml:430:12>>*/ [0,
         /*<<bytes.ml:430:16>>*/ make /*<<bytes.ml:430:16>>*/ (256, 0)];
     /*<<bytes.ml:439:2>>*/  /*<<bytes.ml:439:2>>*/ caml_call2
      /*<<bytes.ml:439:2>>*/ (Stdlib_Seq[4],
      function(c){
        /*<<bytes.ml:441:7>>*/ if(n[1] === caml_ml_bytes_length(buf[1])){
        var
         new_len =
            /*<<bytes.ml:433:18>>*/  /*<<bytes.ml:433:18>>*/ caml_call2
             /*<<bytes.ml:433:18>>*/ (Stdlib_Int[10],
             2 * caml_ml_bytes_length(buf[1]) | 0,
             Stdlib_Sys[12]);
        if(caml_ml_bytes_length(buf[1]) === new_len)
          /*<<bytes.ml:434:34>>*/  /*<<bytes.ml:434:34>>*/ caml_call1
           /*<<bytes.ml:434:34>>*/ (Stdlib[2], cst_Bytes_of_seq_cannot_grow_b);
        var
         new_buf =
            /*<<bytes.ml:435:18>>*/  /*<<bytes.ml:435:18>>*/ make
             /*<<bytes.ml:435:18>>*/ (new_len, 0);
         /*<<bytes.ml:436:4>>*/  /*<<bytes.ml:436:4>>*/ blit
          /*<<bytes.ml:436:4>>*/ (buf[1], 0, new_buf, 0, n[1]);
        buf[1] = new_buf;
       }
        /*<<bytes.ml:442:7>>*/  /*<<bytes.ml:442:7>>*/ caml_bytes_set
         /*<<bytes.ml:442:7>>*/ (buf[1], n[1], c);
       n[1]++;
       return 0;
       /*<<bytes.ml:443:13>>*/ },
      i);
     /*<<bytes.ml:64:8>>*/ return  /*<<bytes.ml:64:8>>*/ sub
             /*<<bytes.ml:64:8>>*/ (buf[1], 0, n[1]) /*<<bytes.ml:445:15>>*/ ;
    /*<<bytes.ml:445:15>>*/ }
   function unsafe_get_uint16_le(b, i){
     /*<<bytes.ml:470:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:471:14>>*/ caml_bswap16
               /*<<bytes.ml:471:14>>*/ ( /*<<bytes.ml:471:14>>*/ caml_bytes_get16
                 /*<<bytes.ml:471:14>>*/ (b, i))
            :  /*<<bytes.ml:472:7>>*/ caml_bytes_get16
               /*<<bytes.ml:472:7>>*/ (b, i) /*<<bytes.ml:472:31>>*/ ;
    /*<<bytes.ml:472:31>>*/ }
   function unsafe_get_uint16_be(b, i){
     /*<<bytes.ml:475:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:476:7>>*/ caml_bytes_get16
               /*<<bytes.ml:476:7>>*/ (b, i)
            :  /*<<bytes.ml:477:14>>*/ caml_bswap16
               /*<<bytes.ml:477:14>>*/ ( /*<<bytes.ml:477:14>>*/ caml_bytes_get16
                 /*<<bytes.ml:477:14>>*/ (b, i)) /*<<bytes.ml:477:40>>*/ ;
    /*<<bytes.ml:477:40>>*/ }
   function get_int8(b, i){
    var
     _s_ =  /*<<bytes.ml:480:2>>*/ Stdlib_Sys[10] - 8 | 0,
     _t_ = Stdlib_Sys[10] - 8 | 0;
    return  /*<<bytes.ml:480:3>>*/ caml_bytes_get
             /*<<bytes.ml:480:3>>*/ (b, i)
           << _t_
           >> _s_;
    /*<<bytes.ml:480:65>>*/ }
   function get_uint16_le(b, i){
     /*<<bytes.ml:483:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:483:32>>*/ caml_bswap16
               /*<<bytes.ml:483:32>>*/ ( /*<<bytes.ml:483:32>>*/ caml_bytes_get16
                 /*<<bytes.ml:483:32>>*/ (b, i))
            :  /*<<bytes.ml:484:7>>*/ caml_bytes_get16
               /*<<bytes.ml:484:7>>*/ (b, i) /*<<bytes.ml:484:24>>*/ ;
    /*<<bytes.ml:484:24>>*/ }
   function get_uint16_be(b, i){
     /*<<bytes.ml:487:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:488:7>>*/ caml_bytes_get16
               /*<<bytes.ml:488:7>>*/ (b, i)
            :  /*<<bytes.ml:487:36>>*/ caml_bswap16
               /*<<bytes.ml:487:36>>*/ ( /*<<bytes.ml:487:36>>*/ caml_bytes_get16
                 /*<<bytes.ml:487:36>>*/ (b, i)) /*<<bytes.ml:488:24>>*/ ;
    /*<<bytes.ml:488:24>>*/ }
   function get_int16_ne(b, i){
    var
     _q_ =  /*<<bytes.ml:491:2>>*/ Stdlib_Sys[10] - 16 | 0,
     _r_ = Stdlib_Sys[10] - 16 | 0;
    return  /*<<bytes.ml:491:3>>*/ caml_bytes_get16
             /*<<bytes.ml:491:3>>*/ (b, i)
           << _r_
           >> _q_;
    /*<<bytes.ml:491:71>>*/ }
   function get_int16_le(b, i){
    var
     _o_ =  /*<<bytes.ml:494:2>>*/ Stdlib_Sys[10] - 16 | 0,
     _p_ = Stdlib_Sys[10] - 16 | 0;
    return  /*<<bytes.ml:494:3>>*/ get_uint16_le /*<<bytes.ml:494:3>>*/ (b, i)
           << _p_
           >> _o_;
    /*<<bytes.ml:494:71>>*/ }
   function get_int16_be(b, i){
    var
     _m_ =  /*<<bytes.ml:497:2>>*/ Stdlib_Sys[10] - 16 | 0,
     _n_ = Stdlib_Sys[10] - 16 | 0;
    return  /*<<bytes.ml:497:3>>*/ get_uint16_be /*<<bytes.ml:497:3>>*/ (b, i)
           << _n_
           >> _m_;
    /*<<bytes.ml:497:71>>*/ }
   function get_int32_le(b, i){
     /*<<bytes.ml:500:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:500:25>>*/ caml_int32_bswap
               /*<<bytes.ml:500:25>>*/ ( /*<<bytes.ml:500:32>>*/ caml_bytes_get32
                 /*<<bytes.ml:500:32>>*/ (b, i))
            :  /*<<bytes.ml:501:7>>*/ caml_bytes_get32
               /*<<bytes.ml:501:7>>*/ (b, i) /*<<bytes.ml:501:23>>*/ ;
    /*<<bytes.ml:501:23>>*/ }
   function get_int32_be(b, i){
     /*<<bytes.ml:504:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:505:7>>*/ caml_bytes_get32
               /*<<bytes.ml:505:7>>*/ (b, i)
            :  /*<<bytes.ml:504:29>>*/ caml_int32_bswap
               /*<<bytes.ml:504:29>>*/ ( /*<<bytes.ml:504:36>>*/ caml_bytes_get32
                 /*<<bytes.ml:504:36>>*/ (b, i)) /*<<bytes.ml:505:23>>*/ ;
    /*<<bytes.ml:505:23>>*/ }
   function get_int64_le(b, i){
     /*<<bytes.ml:508:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:508:25>>*/ caml_int64_bswap
               /*<<bytes.ml:508:25>>*/ ( /*<<bytes.ml:508:32>>*/ caml_bytes_get64
                 /*<<bytes.ml:508:32>>*/ (b, i))
            :  /*<<bytes.ml:509:7>>*/ caml_bytes_get64
               /*<<bytes.ml:509:7>>*/ (b, i) /*<<bytes.ml:509:23>>*/ ;
    /*<<bytes.ml:509:23>>*/ }
   function get_int64_be(b, i){
     /*<<bytes.ml:512:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:513:7>>*/ caml_bytes_get64
               /*<<bytes.ml:513:7>>*/ (b, i)
            :  /*<<bytes.ml:512:29>>*/ caml_int64_bswap
               /*<<bytes.ml:512:29>>*/ ( /*<<bytes.ml:512:36>>*/ caml_bytes_get64
                 /*<<bytes.ml:512:36>>*/ (b, i)) /*<<bytes.ml:513:23>>*/ ;
    /*<<bytes.ml:513:23>>*/ }
   function unsafe_set_uint16_le(b, i, x){
     /*<<bytes.ml:516:2>>*/ if(Stdlib_Sys[11]){
      /*<<bytes.ml:517:7>>*/  /*<<bytes.ml:517:7>>*/ caml_bytes_set16
       /*<<bytes.ml:517:7>>*/ (b, i, caml_bswap16(x));
      /*<<bytes.ml:517:7>>*/ return /*<<bytes.ml:517:7>>*/ ;
    }
     /*<<bytes.ml:518:7>>*/  /*<<bytes.ml:518:7>>*/ caml_bytes_set16
      /*<<bytes.ml:518:7>>*/ (b, i, x);
    /*<<bytes.ml:518:33>>*/ }
   function unsafe_set_uint16_be(b, i, x){
     /*<<bytes.ml:521:2>>*/ if(Stdlib_Sys[11]){
      /*<<bytes.ml:522:7>>*/  /*<<bytes.ml:522:7>>*/ caml_bytes_set16
       /*<<bytes.ml:522:7>>*/ (b, i, x);
      /*<<bytes.ml:522:7>>*/ return /*<<bytes.ml:522:7>>*/ ;
    }
     /*<<bytes.ml:523:2>>*/  /*<<bytes.ml:523:2>>*/ caml_bytes_set16
      /*<<bytes.ml:523:2>>*/ (b, i, caml_bswap16(x));
    /*<<bytes.ml:523:37>>*/ }
   function set_int16_le(b, i, x){
     /*<<bytes.ml:526:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:526:25>>*/ caml_bytes_set16
               /*<<bytes.ml:526:25>>*/ (b, i, caml_bswap16(x))
            :  /*<<bytes.ml:527:7>>*/ caml_bytes_set16
               /*<<bytes.ml:527:7>>*/ (b, i, x) /*<<bytes.ml:527:25>>*/ ;
    /*<<bytes.ml:527:25>>*/ }
   function set_int16_be(b, i, x){
     /*<<bytes.ml:530:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:531:7>>*/ caml_bytes_set16
               /*<<bytes.ml:531:7>>*/ (b, i, x)
            :  /*<<bytes.ml:530:29>>*/ caml_bytes_set16
               /*<<bytes.ml:530:29>>*/ (b, i, caml_bswap16(x)) /*<<bytes.ml:531:25>>*/ ;
    /*<<bytes.ml:531:25>>*/ }
   function set_int32_le(b, i, x){
     /*<<bytes.ml:534:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:534:25>>*/ caml_bytes_set32
               /*<<bytes.ml:534:25>>*/ (b,
               i,
                /*<<bytes.ml:534:42>>*/ caml_int32_bswap
                 /*<<bytes.ml:534:42>>*/ (x))
            :  /*<<bytes.ml:535:7>>*/ caml_bytes_set32
               /*<<bytes.ml:535:7>>*/ (b, i, x) /*<<bytes.ml:535:25>>*/ ;
    /*<<bytes.ml:535:25>>*/ }
   function set_int32_be(b, i, x){
     /*<<bytes.ml:538:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:539:7>>*/ caml_bytes_set32
               /*<<bytes.ml:539:7>>*/ (b, i, x)
            :  /*<<bytes.ml:538:29>>*/ caml_bytes_set32
               /*<<bytes.ml:538:29>>*/ (b,
               i,
                /*<<bytes.ml:538:46>>*/ caml_int32_bswap
                 /*<<bytes.ml:538:46>>*/ (x)) /*<<bytes.ml:539:25>>*/ ;
    /*<<bytes.ml:539:25>>*/ }
   function set_int64_le(b, i, x){
     /*<<bytes.ml:542:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:542:25>>*/ caml_bytes_set64
               /*<<bytes.ml:542:25>>*/ (b,
               i,
                /*<<bytes.ml:542:42>>*/ caml_int64_bswap
                 /*<<bytes.ml:542:42>>*/ (x))
            :  /*<<bytes.ml:543:7>>*/ caml_bytes_set64
               /*<<bytes.ml:543:7>>*/ (b, i, x) /*<<bytes.ml:543:25>>*/ ;
    /*<<bytes.ml:543:25>>*/ }
   function set_int64_be(b, i, x){
     /*<<bytes.ml:546:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:547:7>>*/ caml_bytes_set64
               /*<<bytes.ml:547:7>>*/ (b, i, x)
            :  /*<<bytes.ml:546:29>>*/ caml_bytes_set64
               /*<<bytes.ml:546:29>>*/ (b,
               i,
                /*<<bytes.ml:546:46>>*/ caml_int64_bswap
                 /*<<bytes.ml:546:46>>*/ (x)) /*<<bytes.ml:547:25>>*/ ;
    /*<<bytes.ml:547:25>>*/ }
   var
    set_uint8 = caml_bytes_set,
    set_uint16_ne = caml_bytes_set16,
    dec_invalid = Stdlib_Uchar[22],
    _a_ = [0, cst_bytes_ml, 679, 9],
    _b_ = [0, cst_bytes_ml, 654, 20],
    cst_index_out_of_bounds = cst_index_out_of_bounds$3,
    cst_index_out_of_bounds$0 = cst_index_out_of_bounds$3,
    _c_ = [0, cst_bytes_ml, 777, 9],
    _d_ = [0, cst_bytes_ml, 766, 20],
    cst_index_out_of_bounds$1 = cst_index_out_of_bounds$3,
    cst_index_out_of_bounds$2 = cst_index_out_of_bounds$3,
    _e_ = [0, cst_bytes_ml, 831, 9],
    _f_ = [0, cst_bytes_ml, 820, 20];
   function dec_ret(n, u){
    var
     _l_ =
        /*<<bytes.ml:557:46>>*/  /*<<bytes.ml:557:46>>*/ caml_call1
         /*<<bytes.ml:557:46>>*/ (Stdlib_Uchar[9], u);
     /*<<bytes.ml:557:46>>*/ return  /*<<bytes.ml:557:46>>*/ caml_call2
             /*<<bytes.ml:557:46>>*/ (Stdlib_Uchar[21], n, _l_) /*<<bytes.ml:557:69>>*/ ;
    /*<<bytes.ml:557:69>>*/ }
   function not_in_x80_to_xBF(b){
     /*<<bytes.ml:575:35>>*/ return 2 !== (b >>> 6 | 0) ? 1 : 0;
    /*<<bytes.ml:575:50>>*/ }
   function not_in_xA0_to_xBF(b){
     /*<<bytes.ml:576:35>>*/ return 5 !== (b >>> 5 | 0) ? 1 : 0;
    /*<<bytes.ml:576:51>>*/ }
   function not_in_x80_to_x9F(b){
     /*<<bytes.ml:577:35>>*/ return 4 !== (b >>> 5 | 0) ? 1 : 0;
    /*<<bytes.ml:577:51>>*/ }
   function not_in_x90_to_xBF(b){
    var _j_ = b < 144 ? 1 : 0, _k_ = _j_ || (191 < b ? 1 : 0);
    return _k_;
    /*<<bytes.ml:578:55>>*/ }
   function not_in_x80_to_x8F(b){
     /*<<bytes.ml:579:35>>*/ return 8 !== (b >>> 4 | 0) ? 1 : 0;
    /*<<bytes.ml:579:49>>*/ }
   function utf_8_uchar_3(b0, b1, b2){
     /*<<bytes.ml:586:2>>*/ return (b0 & 15) << 12 | (b1 & 63) << 6 | b2 & 63;
    /*<<bytes.ml:588:18>>*/ }
   function utf_8_uchar_4(b0, b1, b2, b3){
     /*<<bytes.ml:591:2>>*/ return (b0 & 7) << 18 | (b1 & 63) << 12
           | (b2 & 63) << 6
           | b3 & 63;
    /*<<bytes.ml:594:18>>*/ }
   function get_utf_8_uchar(b, i){
    var
     b0 =
        /*<<bytes.ml:597:11>>*/  /*<<bytes.ml:597:11>>*/ caml_bytes_get
         /*<<bytes.ml:597:11>>*/ (b, i),
     max =
        /*<<bytes.ml:599:2>>*/  /*<<bytes.ml:599:2>>*/ caml_ml_bytes_length
         /*<<bytes.ml:599:2>>*/ (b)
       - 1
       | 0;
    a:
    {
      /*<<bytes.ml:600:2>>*/ if(224 <= b0){
      if(237 <= b0){
       if(245 <= b0) break a;
       switch(b0 - 237 | 0){
         case 0:
          var i$0 =  /*<<bytes.ml:619:6>>*/ i + 1 | 0;
          if(max < i$0)
            /*<<bytes.ml:619:39>>*/ return  /*<<bytes.ml:619:39>>*/ caml_call1
                    /*<<bytes.ml:619:39>>*/ (dec_invalid, 1) /*<<bytes.ml:648:22>>*/ ;
          var b1$4 = caml_bytes_unsafe_get(b, i$0);
           /*<<bytes.ml:620:29>>*/ if
           ( /*<<bytes.ml:620:29>>*/ not_in_x80_to_x9F
              /*<<bytes.ml:620:29>>*/ (b1$4))
            /*<<bytes.ml:620:55>>*/ return  /*<<bytes.ml:620:55>>*/ caml_call1
                    /*<<bytes.ml:620:55>>*/ (dec_invalid, 1) /*<<bytes.ml:648:22>>*/ ;
          var i$1 =  /*<<bytes.ml:621:6>>*/ i$0 + 1 | 0;
          if(max < i$1)
            /*<<bytes.ml:621:39>>*/ return  /*<<bytes.ml:621:39>>*/ caml_call1
                    /*<<bytes.ml:621:39>>*/ (dec_invalid, 2) /*<<bytes.ml:648:22>>*/ ;
          var b2$3 = caml_bytes_unsafe_get(b, i$1);
           /*<<bytes.ml:622:29>>*/ return  /*<<bytes.ml:622:29>>*/ not_in_x80_to_xBF
                    /*<<bytes.ml:622:29>>*/ (b2$3)
                  ?  /*<<bytes.ml:622:55>>*/ caml_call1
                     /*<<bytes.ml:622:55>>*/ (dec_invalid, 2)
                  :  /*<<bytes.ml:623:16>>*/ dec_ret
                     /*<<bytes.ml:623:16>>*/ (3,
                      /*<<bytes.ml:623:16>>*/ utf_8_uchar_3
                       /*<<bytes.ml:623:16>>*/ (b0, b1$4, b2$3)) /*<<bytes.ml:648:22>>*/ ;
         case 3:
          var i$4 =  /*<<bytes.ml:625:6>>*/ i + 1 | 0;
          if(max < i$4)
            /*<<bytes.ml:625:39>>*/ return  /*<<bytes.ml:625:39>>*/ caml_call1
                    /*<<bytes.ml:625:39>>*/ (dec_invalid, 1) /*<<bytes.ml:648:22>>*/ ;
          var b1$2 = caml_bytes_unsafe_get(b, i$4);
           /*<<bytes.ml:626:29>>*/ if
           ( /*<<bytes.ml:626:29>>*/ not_in_x90_to_xBF
              /*<<bytes.ml:626:29>>*/ (b1$2))
            /*<<bytes.ml:626:55>>*/ return  /*<<bytes.ml:626:55>>*/ caml_call1
                    /*<<bytes.ml:626:55>>*/ (dec_invalid, 1) /*<<bytes.ml:648:22>>*/ ;
          var i$5 =  /*<<bytes.ml:627:6>>*/ i$4 + 1 | 0;
          if(max < i$5)
            /*<<bytes.ml:627:39>>*/ return  /*<<bytes.ml:627:39>>*/ caml_call1
                    /*<<bytes.ml:627:39>>*/ (dec_invalid, 2) /*<<bytes.ml:648:22>>*/ ;
          var b2$1 = caml_bytes_unsafe_get(b, i$5);
           /*<<bytes.ml:628:29>>*/ if
           ( /*<<bytes.ml:628:29>>*/ not_in_x80_to_xBF
              /*<<bytes.ml:628:29>>*/ (b2$1))
            /*<<bytes.ml:628:55>>*/ return  /*<<bytes.ml:628:55>>*/ caml_call1
                    /*<<bytes.ml:628:55>>*/ (dec_invalid, 2) /*<<bytes.ml:648:22>>*/ ;
          var i$6 =  /*<<bytes.ml:629:6>>*/ i$5 + 1 | 0;
          if(max < i$6)
            /*<<bytes.ml:629:39>>*/ return  /*<<bytes.ml:629:39>>*/ caml_call1
                    /*<<bytes.ml:629:39>>*/ (dec_invalid, 3) /*<<bytes.ml:648:22>>*/ ;
          var b3$1 = caml_bytes_unsafe_get(b, i$6);
           /*<<bytes.ml:630:29>>*/ return  /*<<bytes.ml:630:29>>*/ not_in_x80_to_xBF
                    /*<<bytes.ml:630:29>>*/ (b3$1)
                  ?  /*<<bytes.ml:630:55>>*/ caml_call1
                     /*<<bytes.ml:630:55>>*/ (dec_invalid, 3)
                  :  /*<<bytes.ml:631:16>>*/ dec_ret
                     /*<<bytes.ml:631:16>>*/ (4,
                      /*<<bytes.ml:631:16>>*/ utf_8_uchar_4
                       /*<<bytes.ml:631:16>>*/ (b0, b1$2, b2$1, b3$1)) /*<<bytes.ml:648:22>>*/ ;
         case 7:
          var i$10 =  /*<<bytes.ml:641:6>>*/ i + 1 | 0;
          if(max < i$10)
            /*<<bytes.ml:641:39>>*/ return  /*<<bytes.ml:641:39>>*/ caml_call1
                    /*<<bytes.ml:641:39>>*/ (dec_invalid, 1) /*<<bytes.ml:648:22>>*/ ;
          var b1$0 = caml_bytes_unsafe_get(b, i$10);
           /*<<bytes.ml:642:29>>*/ if
           ( /*<<bytes.ml:642:29>>*/ not_in_x80_to_x8F
              /*<<bytes.ml:642:29>>*/ (b1$0))
            /*<<bytes.ml:642:55>>*/ return  /*<<bytes.ml:642:55>>*/ caml_call1
                    /*<<bytes.ml:642:55>>*/ (dec_invalid, 1) /*<<bytes.ml:648:22>>*/ ;
          var i$11 =  /*<<bytes.ml:643:6>>*/ i$10 + 1 | 0;
          if(max < i$11)
            /*<<bytes.ml:643:39>>*/ return  /*<<bytes.ml:643:39>>*/ caml_call1
                    /*<<bytes.ml:643:39>>*/ (dec_invalid, 2) /*<<bytes.ml:648:22>>*/ ;
          var b2 = caml_bytes_unsafe_get(b, i$11);
           /*<<bytes.ml:644:29>>*/ if
           ( /*<<bytes.ml:644:29>>*/ not_in_x80_to_xBF
              /*<<bytes.ml:644:29>>*/ (b2))
            /*<<bytes.ml:644:55>>*/ return  /*<<bytes.ml:644:55>>*/ caml_call1
                    /*<<bytes.ml:644:55>>*/ (dec_invalid, 2) /*<<bytes.ml:648:22>>*/ ;
          var i$12 =  /*<<bytes.ml:645:6>>*/ i$11 + 1 | 0;
          if(max < i$12)
            /*<<bytes.ml:645:39>>*/ return  /*<<bytes.ml:645:39>>*/ caml_call1
                    /*<<bytes.ml:645:39>>*/ (dec_invalid, 3) /*<<bytes.ml:648:22>>*/ ;
          var b3 = caml_bytes_unsafe_get(b, i$12);
           /*<<bytes.ml:646:29>>*/ return  /*<<bytes.ml:646:29>>*/ not_in_x80_to_xBF
                    /*<<bytes.ml:646:29>>*/ (b3)
                  ?  /*<<bytes.ml:646:55>>*/ caml_call1
                     /*<<bytes.ml:646:55>>*/ (dec_invalid, 3)
                  :  /*<<bytes.ml:647:16>>*/ dec_ret
                     /*<<bytes.ml:647:16>>*/ (4,
                      /*<<bytes.ml:647:16>>*/ utf_8_uchar_4
                       /*<<bytes.ml:647:16>>*/ (b0, b1$0, b2, b3)) /*<<bytes.ml:648:22>>*/ ;
         case 1:
         case 2: break;
         default:
          var i$7 =  /*<<bytes.ml:633:6>>*/ i + 1 | 0;
          if(max < i$7)
            /*<<bytes.ml:633:39>>*/ return  /*<<bytes.ml:633:39>>*/ caml_call1
                    /*<<bytes.ml:633:39>>*/ (dec_invalid, 1) /*<<bytes.ml:648:22>>*/ ;
          var b1$1 = caml_bytes_unsafe_get(b, i$7);
           /*<<bytes.ml:634:29>>*/ if
           ( /*<<bytes.ml:634:29>>*/ not_in_x80_to_xBF
              /*<<bytes.ml:634:29>>*/ (b1$1))
            /*<<bytes.ml:634:55>>*/ return  /*<<bytes.ml:634:55>>*/ caml_call1
                    /*<<bytes.ml:634:55>>*/ (dec_invalid, 1) /*<<bytes.ml:648:22>>*/ ;
          var i$8 =  /*<<bytes.ml:635:6>>*/ i$7 + 1 | 0;
          if(max < i$8)
            /*<<bytes.ml:635:39>>*/ return  /*<<bytes.ml:635:39>>*/ caml_call1
                    /*<<bytes.ml:635:39>>*/ (dec_invalid, 2) /*<<bytes.ml:648:22>>*/ ;
          var b2$0 = caml_bytes_unsafe_get(b, i$8);
           /*<<bytes.ml:636:29>>*/ if
           ( /*<<bytes.ml:636:29>>*/ not_in_x80_to_xBF
              /*<<bytes.ml:636:29>>*/ (b2$0))
            /*<<bytes.ml:636:55>>*/ return  /*<<bytes.ml:636:55>>*/ caml_call1
                    /*<<bytes.ml:636:55>>*/ (dec_invalid, 2) /*<<bytes.ml:648:22>>*/ ;
          var i$9 =  /*<<bytes.ml:637:6>>*/ i$8 + 1 | 0;
          if(max < i$9)
            /*<<bytes.ml:637:39>>*/ return  /*<<bytes.ml:637:39>>*/ caml_call1
                    /*<<bytes.ml:637:39>>*/ (dec_invalid, 3) /*<<bytes.ml:648:22>>*/ ;
          var b3$0 = caml_bytes_unsafe_get(b, i$9);
           /*<<bytes.ml:638:29>>*/ return  /*<<bytes.ml:638:29>>*/ not_in_x80_to_xBF
                    /*<<bytes.ml:638:29>>*/ (b3$0)
                  ?  /*<<bytes.ml:638:55>>*/ caml_call1
                     /*<<bytes.ml:638:55>>*/ (dec_invalid, 3)
                  :  /*<<bytes.ml:639:16>>*/ dec_ret
                     /*<<bytes.ml:639:16>>*/ (4,
                      /*<<bytes.ml:639:16>>*/ utf_8_uchar_4
                       /*<<bytes.ml:639:16>>*/ (b0, b1$1, b2$0, b3$0)) /*<<bytes.ml:648:22>>*/ ;
       }
      }
      else if(225 > b0){
       var i$13 =  /*<<bytes.ml:607:6>>*/ i + 1 | 0;
       if(max < i$13)
         /*<<bytes.ml:607:39>>*/ return  /*<<bytes.ml:607:39>>*/ caml_call1
                 /*<<bytes.ml:607:39>>*/ (dec_invalid, 1) /*<<bytes.ml:648:22>>*/ ;
       var b1$5 = caml_bytes_unsafe_get(b, i$13);
        /*<<bytes.ml:608:29>>*/ if
        ( /*<<bytes.ml:608:29>>*/ not_in_xA0_to_xBF
           /*<<bytes.ml:608:29>>*/ (b1$5))
         /*<<bytes.ml:608:55>>*/ return  /*<<bytes.ml:608:55>>*/ caml_call1
                 /*<<bytes.ml:608:55>>*/ (dec_invalid, 1) /*<<bytes.ml:648:22>>*/ ;
       var i$14 =  /*<<bytes.ml:609:6>>*/ i$13 + 1 | 0;
       if(max < i$14)
         /*<<bytes.ml:609:39>>*/ return  /*<<bytes.ml:609:39>>*/ caml_call1
                 /*<<bytes.ml:609:39>>*/ (dec_invalid, 2) /*<<bytes.ml:648:22>>*/ ;
       var b2$4 = caml_bytes_unsafe_get(b, i$14);
        /*<<bytes.ml:610:29>>*/ return  /*<<bytes.ml:610:29>>*/ not_in_x80_to_xBF
                 /*<<bytes.ml:610:29>>*/ (b2$4)
               ?  /*<<bytes.ml:610:55>>*/ caml_call1
                  /*<<bytes.ml:610:55>>*/ (dec_invalid, 2)
               :  /*<<bytes.ml:611:16>>*/ dec_ret
                  /*<<bytes.ml:611:16>>*/ (3,
                   /*<<bytes.ml:611:16>>*/ utf_8_uchar_3
                    /*<<bytes.ml:611:16>>*/ (b0, b1$5, b2$4)) /*<<bytes.ml:648:22>>*/ ;
      }
      var i$2 =  /*<<bytes.ml:613:6>>*/ i + 1 | 0;
      if(max < i$2)
        /*<<bytes.ml:613:39>>*/ return  /*<<bytes.ml:613:39>>*/ caml_call1
                /*<<bytes.ml:613:39>>*/ (dec_invalid, 1) /*<<bytes.ml:648:22>>*/ ;
      var b1$3 = caml_bytes_unsafe_get(b, i$2);
       /*<<bytes.ml:614:29>>*/ if
       ( /*<<bytes.ml:614:29>>*/ not_in_x80_to_xBF
          /*<<bytes.ml:614:29>>*/ (b1$3))
        /*<<bytes.ml:614:55>>*/ return  /*<<bytes.ml:614:55>>*/ caml_call1
                /*<<bytes.ml:614:55>>*/ (dec_invalid, 1) /*<<bytes.ml:648:22>>*/ ;
      var i$3 =  /*<<bytes.ml:615:6>>*/ i$2 + 1 | 0;
      if(max < i$3)
        /*<<bytes.ml:615:39>>*/ return  /*<<bytes.ml:615:39>>*/ caml_call1
                /*<<bytes.ml:615:39>>*/ (dec_invalid, 2) /*<<bytes.ml:648:22>>*/ ;
      var b2$2 = caml_bytes_unsafe_get(b, i$3);
       /*<<bytes.ml:616:29>>*/ return  /*<<bytes.ml:616:29>>*/ not_in_x80_to_xBF
                /*<<bytes.ml:616:29>>*/ (b2$2)
              ?  /*<<bytes.ml:616:55>>*/ caml_call1
                 /*<<bytes.ml:616:55>>*/ (dec_invalid, 2)
              :  /*<<bytes.ml:617:16>>*/ dec_ret
                 /*<<bytes.ml:617:16>>*/ (3,
                  /*<<bytes.ml:617:16>>*/ utf_8_uchar_3
                   /*<<bytes.ml:617:16>>*/ (b0, b1$3, b2$2)) /*<<bytes.ml:648:22>>*/ ;
     }
     if(128 > b0)
       /*<<bytes.ml:601:24>>*/ return  /*<<bytes.ml:601:24>>*/ dec_ret
               /*<<bytes.ml:601:24>>*/ (1, b0) /*<<bytes.ml:648:22>>*/ ;
     if(194 <= b0){
      var i$15 =  /*<<bytes.ml:603:6>>*/ i + 1 | 0;
      if(max < i$15)
        /*<<bytes.ml:603:39>>*/ return  /*<<bytes.ml:603:39>>*/ caml_call1
                /*<<bytes.ml:603:39>>*/ (dec_invalid, 1) /*<<bytes.ml:648:22>>*/ ;
      var b1 = caml_bytes_unsafe_get(b, i$15);
       /*<<bytes.ml:604:29>>*/ return  /*<<bytes.ml:604:29>>*/ not_in_x80_to_xBF
                /*<<bytes.ml:604:29>>*/ (b1)
              ?  /*<<bytes.ml:604:55>>*/ caml_call1
                 /*<<bytes.ml:604:55>>*/ (dec_invalid, 1)
              :  /*<<bytes.ml:605:16>>*/ dec_ret
                 /*<<bytes.ml:605:16>>*/ (2, (b0 & 31) << 6 | b1 & 63) /*<<bytes.ml:648:22>>*/ ;
     }
    }
     /*<<bytes.ml:648:9>>*/ return  /*<<bytes.ml:648:9>>*/ caml_call1
             /*<<bytes.ml:648:9>>*/ (dec_invalid, 1) /*<<bytes.ml:648:22>>*/ ;
    /*<<bytes.ml:648:22>>*/ }
   function set_utf_8_uchar(b, i, u){
    function set(_i_, _h_, _g_){
      /*<<?>>*/ caml_bytes_unsafe_set(_i_, _h_, _g_);
    }
    var
     max =
        /*<<bytes.ml:652:2>>*/  /*<<bytes.ml:652:2>>*/ caml_ml_bytes_length
         /*<<bytes.ml:652:2>>*/ (b)
       - 1
       | 0,
     u$0 =
        /*<<bytes.ml:653:8>>*/  /*<<bytes.ml:653:8>>*/ caml_call1
         /*<<bytes.ml:653:8>>*/ (Stdlib_Uchar[10], u);
     /*<<bytes.ml:654:11>>*/ if(0 > u$0)
      /*<<bytes.ml:654:20>>*/ throw  /*<<bytes.ml:654:20>>*/ caml_maybe_attach_backtrace
             /*<<bytes.ml:654:20>>*/ ([0, Assert_failure, _b_], 1);
     /*<<bytes.ml:655:11>>*/ if(127 >= u$0){
     caml_bytes_set(b, i, u$0);
      /*<<bytes.ml:656:6>>*/ return 1 /*<<bytes.ml:656:6>>*/ ;
    }
     /*<<bytes.ml:658:11>>*/ if(2047 >= u$0){
     var last$1 =  /*<<bytes.ml:659:6>>*/ i + 1 | 0;
     return max < last$1
             ? 0
             : (caml_bytes_set
                (b, i, 192 | u$0 >>> 6 | 0),
                /*<<bytes.ml:662:7>>*/ set
                 /*<<bytes.ml:662:7>>*/ (b, last$1, 128 | u$0 & 63),
               2) /*<<bytes.ml:679:21>>*/ ;
    }
     /*<<bytes.ml:664:11>>*/ if(65535 >= u$0){
     var last$0 =  /*<<bytes.ml:665:6>>*/ i + 2 | 0;
     return max < last$0
             ? 0
             : (caml_bytes_set
                (b, i, 224 | u$0 >>> 12 | 0),
                /*<<bytes.ml:668:7>>*/ set
                 /*<<bytes.ml:668:7>>*/ (b,
                 i + 1 | 0,
                 128 | (u$0 >>> 6 | 0) & 63),
                /*<<bytes.ml:669:7>>*/ set
                 /*<<bytes.ml:669:7>>*/ (b, last$0, 128 | u$0 & 63),
               3) /*<<bytes.ml:679:21>>*/ ;
    }
     /*<<bytes.ml:671:11>>*/ if(1114111 < u$0)
      /*<<bytes.ml:679:9>>*/ throw  /*<<bytes.ml:679:9>>*/ caml_maybe_attach_backtrace
             /*<<bytes.ml:679:9>>*/ ([0, Assert_failure, _a_], 1);
    var last =  /*<<bytes.ml:672:6>>*/ i + 3 | 0;
    return max < last
            ? 0
            : (caml_bytes_set
               (b, i, 240 | u$0 >>> 18 | 0),
               /*<<bytes.ml:675:7>>*/ set
                /*<<bytes.ml:675:7>>*/ (b,
                i + 1 | 0,
                128 | (u$0 >>> 12 | 0) & 63),
               /*<<bytes.ml:676:7>>*/ set
                /*<<bytes.ml:676:7>>*/ (b,
                i + 2 | 0,
                128 | (u$0 >>> 6 | 0) & 63),
               /*<<bytes.ml:677:7>>*/ set
                /*<<bytes.ml:677:7>>*/ (b, last, 128 | u$0 & 63),
              4) /*<<bytes.ml:679:21>>*/ ;
    /*<<bytes.ml:679:21>>*/ }
   function is_valid_utf_8(b){
    var max = caml_ml_bytes_length(b) - 1 | 0, i = 0;
     /*<<bytes.ml:683:4>>*/ for(;;){
     if(max < i)  /*<<bytes.ml:683:20>>*/ return 1 /*<<bytes.ml:683:20>>*/ ;
     var match = caml_bytes_unsafe_get(b, i);
     a:
     {
      if(224 <= match){
       if(237 <= match){
        if(245 <= match) break a;
        switch(match - 237 | 0){
          case 0:
           var last =  /*<<bytes.ml:708:8>>*/ i + 2 | 0;
           if
            (max >= last
             &&
              !
               /*<<bytes.ml:710:11>>*/ not_in_x80_to_x9F
                /*<<bytes.ml:710:11>>*/ (caml_bytes_unsafe_get(b, i + 1 | 0))
              &&
               !
                /*<<bytes.ml:711:11>>*/ not_in_x80_to_xBF
                 /*<<bytes.ml:711:11>>*/ (caml_bytes_unsafe_get(b, last))){
            var i$0 =  /*<<bytes.ml:713:13>>*/ last + 1 | 0;
            i = i$0;
            continue;
           }
            /*<<bytes.ml:712:13>>*/ return 0 /*<<bytes.ml:712:13>>*/ ;
          case 3:
           var last$1 =  /*<<bytes.ml:715:8>>*/ i + 3 | 0;
           if
            (max >= last$1
             &&
              !
               /*<<bytes.ml:717:11>>*/ not_in_x90_to_xBF
                /*<<bytes.ml:717:11>>*/ (caml_bytes_unsafe_get(b, i + 1 | 0))
              &&
               !
                /*<<bytes.ml:718:11>>*/ not_in_x80_to_xBF
                 /*<<bytes.ml:718:11>>*/ (caml_bytes_unsafe_get(b, i + 2 | 0))
               &&
                !
                 /*<<bytes.ml:719:11>>*/ not_in_x80_to_xBF
                  /*<<bytes.ml:719:11>>*/ (caml_bytes_unsafe_get(b, last$1))){
            var i$2 =  /*<<bytes.ml:721:13>>*/ last$1 + 1 | 0;
            i = i$2;
            continue;
           }
            /*<<bytes.ml:720:13>>*/ return 0 /*<<bytes.ml:720:13>>*/ ;
          case 7:
           var last$3 =  /*<<bytes.ml:731:8>>*/ i + 3 | 0;
           if
            (max >= last$3
             &&
              !
               /*<<bytes.ml:733:11>>*/ not_in_x80_to_x8F
                /*<<bytes.ml:733:11>>*/ (caml_bytes_unsafe_get(b, i + 1 | 0))
              &&
               !
                /*<<bytes.ml:734:11>>*/ not_in_x80_to_xBF
                 /*<<bytes.ml:734:11>>*/ (caml_bytes_unsafe_get(b, i + 2 | 0))
               &&
                !
                 /*<<bytes.ml:735:11>>*/ not_in_x80_to_xBF
                  /*<<bytes.ml:735:11>>*/ (caml_bytes_unsafe_get(b, last$3))){
            var i$4 =  /*<<bytes.ml:737:13>>*/ last$3 + 1 | 0;
            i = i$4;
            continue;
           }
            /*<<bytes.ml:736:13>>*/ return 0 /*<<bytes.ml:736:13>>*/ ;
          case 1:
          case 2: break;
          default:
           var last$2 =  /*<<bytes.ml:723:8>>*/ i + 3 | 0;
           if
            (max >= last$2
             &&
              !
               /*<<bytes.ml:725:11>>*/ not_in_x80_to_xBF
                /*<<bytes.ml:725:11>>*/ (caml_bytes_unsafe_get(b, i + 1 | 0))
              &&
               !
                /*<<bytes.ml:726:11>>*/ not_in_x80_to_xBF
                 /*<<bytes.ml:726:11>>*/ (caml_bytes_unsafe_get(b, i + 2 | 0))
               &&
                !
                 /*<<bytes.ml:727:11>>*/ not_in_x80_to_xBF
                  /*<<bytes.ml:727:11>>*/ (caml_bytes_unsafe_get(b, last$2))){
            var i$3 =  /*<<bytes.ml:729:13>>*/ last$2 + 1 | 0;
            i = i$3;
            continue;
           }
            /*<<bytes.ml:728:13>>*/ return 0 /*<<bytes.ml:728:13>>*/ ;
        }
       }
       else if(225 > match){
        var last$4 =  /*<<bytes.ml:694:8>>*/ i + 2 | 0;
        if
         (max >= last$4
          &&
           !
            /*<<bytes.ml:696:11>>*/ not_in_xA0_to_xBF
             /*<<bytes.ml:696:11>>*/ (caml_bytes_unsafe_get(b, i + 1 | 0))
           &&
            !
             /*<<bytes.ml:697:11>>*/ not_in_x80_to_xBF
              /*<<bytes.ml:697:11>>*/ (caml_bytes_unsafe_get(b, last$4))){
         var i$5 =  /*<<bytes.ml:699:13>>*/ last$4 + 1 | 0;
         i = i$5;
         continue;
        }
         /*<<bytes.ml:698:13>>*/ return 0 /*<<bytes.ml:698:13>>*/ ;
       }
       var last$0 =  /*<<bytes.ml:701:8>>*/ i + 2 | 0;
       if
        (max >= last$0
         &&
          !
           /*<<bytes.ml:703:11>>*/ not_in_x80_to_xBF
            /*<<bytes.ml:703:11>>*/ (caml_bytes_unsafe_get(b, i + 1 | 0))
          &&
           !
            /*<<bytes.ml:704:11>>*/ not_in_x80_to_xBF
             /*<<bytes.ml:704:11>>*/ (caml_bytes_unsafe_get(b, last$0))){
        var i$1 =  /*<<bytes.ml:706:13>>*/ last$0 + 1 | 0;
        i = i$1;
        continue;
       }
        /*<<bytes.ml:705:13>>*/ return 0 /*<<bytes.ml:705:13>>*/ ;
      }
      if(128 > match){
       var i$7 =  /*<<bytes.ml:686:26>>*/ i + 1 | 0;
       i = i$7;
       continue;
      }
      if(194 <= match){
       var last$5 =  /*<<bytes.ml:688:8>>*/ i + 1 | 0;
       if
        (max >= last$5
         &&
          !
           /*<<bytes.ml:690:11>>*/ not_in_x80_to_xBF
            /*<<bytes.ml:690:11>>*/ (caml_bytes_unsafe_get(b, last$5))){
        var i$6 =  /*<<bytes.ml:692:13>>*/ last$5 + 1 | 0;
        i = i$6;
        continue;
       }
        /*<<bytes.ml:691:13>>*/ return 0 /*<<bytes.ml:691:13>>*/ ;
      }
     }
      /*<<bytes.ml:738:11>>*/ return 0 /*<<bytes.ml:738:11>>*/ ;
    }
    /*<<bytes.ml:740:25>>*/ }
   function get_utf_16be_uchar(b, i){
    var
     max =
        /*<<bytes.ml:746:2>>*/  /*<<bytes.ml:746:2>>*/ caml_ml_bytes_length
         /*<<bytes.ml:746:2>>*/ (b)
       - 1
       | 0;
     /*<<bytes.ml:747:2>>*/ if(0 <= i && max >= i){
     if(i === max)
       /*<<bytes.ml:748:18>>*/ return  /*<<bytes.ml:748:18>>*/ caml_call1
               /*<<bytes.ml:748:18>>*/ (dec_invalid, 1) /*<<bytes.ml:759:21>>*/ ;
     var
      hi =
         /*<<bytes.ml:749:8>>*/  /*<<bytes.ml:749:8>>*/ unsafe_get_uint16_be
          /*<<bytes.ml:749:8>>*/ (b, i);
      /*<<bytes.ml:750:11>>*/ if(55296 <= hi && 57343 >= hi){
       /*<<bytes.ml:751:11>>*/ if(56319 < hi)
        /*<<bytes.ml:751:25>>*/ return  /*<<bytes.ml:751:25>>*/ caml_call1
                /*<<bytes.ml:751:25>>*/ (dec_invalid, 2) /*<<bytes.ml:759:21>>*/ ;
      var last =  /*<<bytes.ml:753:6>>*/ i + 3 | 0;
      if(max < last)
       return caml_call1(dec_invalid, (max - i | 0) + 1 | 0) /*<<bytes.ml:759:21>>*/ ;
      var
       lo =
          /*<<bytes.ml:755:12>>*/  /*<<bytes.ml:755:12>>*/ unsafe_get_uint16_be
           /*<<bytes.ml:755:12>>*/ (b, i + 2 | 0);
       /*<<bytes.ml:756:15>>*/ if(56320 <= lo && 57343 >= lo){
       var u = ((hi & 1023) << 10 | lo & 1023) + 65536 | 0;
        /*<<bytes.ml:759:10>>*/ return  /*<<bytes.ml:759:10>>*/ dec_ret
                /*<<bytes.ml:759:10>>*/ (4, u) /*<<bytes.ml:759:21>>*/ ;
      }
       /*<<bytes.ml:756:43>>*/ return  /*<<bytes.ml:756:43>>*/ caml_call1
               /*<<bytes.ml:756:43>>*/ (dec_invalid, 2) /*<<bytes.ml:759:21>>*/ ;
     }
      /*<<bytes.ml:750:39>>*/ return  /*<<bytes.ml:750:39>>*/ dec_ret
              /*<<bytes.ml:750:39>>*/ (2, hi) /*<<bytes.ml:759:21>>*/ ;
    }
     /*<<bytes.ml:747:27>>*/ return  /*<<bytes.ml:747:27>>*/ caml_call1
             /*<<bytes.ml:747:27>>*/ (Stdlib[1], cst_index_out_of_bounds) /*<<bytes.ml:759:21>>*/ ;
    /*<<bytes.ml:759:21>>*/ }
   function set_utf_16be_uchar(b, i, u){
    var
     max =
        /*<<bytes.ml:763:2>>*/  /*<<bytes.ml:763:2>>*/ caml_ml_bytes_length
         /*<<bytes.ml:763:2>>*/ (b)
       - 1
       | 0;
     /*<<bytes.ml:764:2>>*/ if(0 <= i && max >= i){
     var
      u$0 =
         /*<<bytes.ml:765:8>>*/  /*<<bytes.ml:765:8>>*/ caml_call1
          /*<<bytes.ml:765:8>>*/ (Stdlib_Uchar[10], u);
      /*<<bytes.ml:766:11>>*/ if(0 > u$0)
       /*<<bytes.ml:766:20>>*/ throw  /*<<bytes.ml:766:20>>*/ caml_maybe_attach_backtrace
              /*<<bytes.ml:766:20>>*/ ([0, Assert_failure, _d_], 1);
      /*<<bytes.ml:767:11>>*/ if(65535 >= u$0){
      var last$0 =  /*<<bytes.ml:768:6>>*/ i + 1 | 0;
      return max < last$0
              ? 0
              : ( /*<<bytes.ml:769:33>>*/ unsafe_set_uint16_be
                  /*<<bytes.ml:769:33>>*/ (b, i, u$0),
                2) /*<<bytes.ml:777:21>>*/ ;
     }
      /*<<bytes.ml:770:11>>*/ if(1114111 < u$0)
       /*<<bytes.ml:777:9>>*/ throw  /*<<bytes.ml:777:9>>*/ caml_maybe_attach_backtrace
              /*<<bytes.ml:777:9>>*/ ([0, Assert_failure, _c_], 1);
     var last =  /*<<bytes.ml:771:6>>*/ i + 3 | 0;
     if(max < last)
       /*<<bytes.ml:772:25>>*/ return 0 /*<<bytes.ml:772:25>>*/ ;
     var
      u$1 =  /*<<bytes.ml:773:6>>*/ u$0 - 65536 | 0,
      hi = 55296 | u$1 >>> 10 | 0,
      lo = 56320 | u$1 & 1023;
      /*<<bytes.ml:776:6>>*/  /*<<bytes.ml:776:6>>*/ unsafe_set_uint16_be
       /*<<bytes.ml:776:6>>*/ (b, i, hi);
      /*<<bytes.ml:776:18>>*/  /*<<bytes.ml:776:18>>*/ unsafe_set_uint16_be
       /*<<bytes.ml:776:18>>*/ (b, i + 2 | 0, lo);
      /*<<bytes.ml:776:18>>*/ return 4 /*<<bytes.ml:776:18>>*/ ;
    }
     /*<<bytes.ml:764:27>>*/ return  /*<<bytes.ml:764:27>>*/ caml_call1
             /*<<bytes.ml:764:27>>*/ (Stdlib[1], cst_index_out_of_bounds$0) /*<<bytes.ml:777:21>>*/ ;
    /*<<bytes.ml:777:21>>*/ }
   function is_valid_utf_16be(b){
    var max = caml_ml_bytes_length(b) - 1 | 0, i = 0;
     /*<<bytes.ml:781:4>>*/ for(;;){
     if(max < i)  /*<<bytes.ml:782:20>>*/ return 1 /*<<bytes.ml:782:20>>*/ ;
     if(i === max)  /*<<bytes.ml:783:20>>*/ return 0 /*<<bytes.ml:783:20>>*/ ;
     var
      u =
         /*<<bytes.ml:784:10>>*/  /*<<bytes.ml:784:10>>*/ unsafe_get_uint16_be
          /*<<bytes.ml:784:10>>*/ (b, i);
      /*<<bytes.ml:785:13>>*/ if(55296 <= u && 57343 >= u){
       /*<<bytes.ml:786:13>>*/ if(56319 < u)
        /*<<bytes.ml:786:27>>*/ return 0 /*<<bytes.ml:786:27>>*/ ;
      var last =  /*<<bytes.ml:788:8>>*/ i + 3 | 0;
      if(max < last)
        /*<<bytes.ml:789:27>>*/ return 0 /*<<bytes.ml:789:27>>*/ ;
      var
       u$0 =
          /*<<bytes.ml:790:14>>*/  /*<<bytes.ml:790:14>>*/ unsafe_get_uint16_be
           /*<<bytes.ml:790:14>>*/ (b, i + 2 | 0);
       /*<<bytes.ml:791:17>>*/ if(56320 <= u$0 && 57343 >= u$0){
       var i$1 =  /*<<bytes.ml:792:17>>*/ i + 4 | 0;
       i = i$1;
       continue;
      }
       /*<<bytes.ml:791:45>>*/ return 0 /*<<bytes.ml:791:45>>*/ ;
     }
     var i$0 =  /*<<bytes.ml:785:41>>*/ i + 2 | 0;
     i = i$0;
    }
    /*<<bytes.ml:794:25>>*/ }
   function get_utf_16le_uchar(b, i){
    var
     max =
        /*<<bytes.ml:800:2>>*/  /*<<bytes.ml:800:2>>*/ caml_ml_bytes_length
         /*<<bytes.ml:800:2>>*/ (b)
       - 1
       | 0;
     /*<<bytes.ml:801:2>>*/ if(0 <= i && max >= i){
     if(i === max)
       /*<<bytes.ml:802:18>>*/ return  /*<<bytes.ml:802:18>>*/ caml_call1
               /*<<bytes.ml:802:18>>*/ (dec_invalid, 1) /*<<bytes.ml:813:21>>*/ ;
     var
      hi =
         /*<<bytes.ml:803:8>>*/  /*<<bytes.ml:803:8>>*/ unsafe_get_uint16_le
          /*<<bytes.ml:803:8>>*/ (b, i);
      /*<<bytes.ml:804:11>>*/ if(55296 <= hi && 57343 >= hi){
       /*<<bytes.ml:805:11>>*/ if(56319 < hi)
        /*<<bytes.ml:805:25>>*/ return  /*<<bytes.ml:805:25>>*/ caml_call1
                /*<<bytes.ml:805:25>>*/ (dec_invalid, 2) /*<<bytes.ml:813:21>>*/ ;
      var last =  /*<<bytes.ml:807:6>>*/ i + 3 | 0;
      if(max < last)
       return caml_call1(dec_invalid, (max - i | 0) + 1 | 0) /*<<bytes.ml:813:21>>*/ ;
      var
       lo =
          /*<<bytes.ml:809:12>>*/  /*<<bytes.ml:809:12>>*/ unsafe_get_uint16_le
           /*<<bytes.ml:809:12>>*/ (b, i + 2 | 0);
       /*<<bytes.ml:810:15>>*/ if(56320 <= lo && 57343 >= lo){
       var u = ((hi & 1023) << 10 | lo & 1023) + 65536 | 0;
        /*<<bytes.ml:813:10>>*/ return  /*<<bytes.ml:813:10>>*/ dec_ret
                /*<<bytes.ml:813:10>>*/ (4, u) /*<<bytes.ml:813:21>>*/ ;
      }
       /*<<bytes.ml:810:43>>*/ return  /*<<bytes.ml:810:43>>*/ caml_call1
               /*<<bytes.ml:810:43>>*/ (dec_invalid, 2) /*<<bytes.ml:813:21>>*/ ;
     }
      /*<<bytes.ml:804:39>>*/ return  /*<<bytes.ml:804:39>>*/ dec_ret
              /*<<bytes.ml:804:39>>*/ (2, hi) /*<<bytes.ml:813:21>>*/ ;
    }
     /*<<bytes.ml:801:27>>*/ return  /*<<bytes.ml:801:27>>*/ caml_call1
             /*<<bytes.ml:801:27>>*/ (Stdlib[1], cst_index_out_of_bounds$1) /*<<bytes.ml:813:21>>*/ ;
    /*<<bytes.ml:813:21>>*/ }
   function set_utf_16le_uchar(b, i, u){
    var
     max =
        /*<<bytes.ml:817:2>>*/  /*<<bytes.ml:817:2>>*/ caml_ml_bytes_length
         /*<<bytes.ml:817:2>>*/ (b)
       - 1
       | 0;
     /*<<bytes.ml:818:2>>*/ if(0 <= i && max >= i){
     var
      u$0 =
         /*<<bytes.ml:819:8>>*/  /*<<bytes.ml:819:8>>*/ caml_call1
          /*<<bytes.ml:819:8>>*/ (Stdlib_Uchar[10], u);
      /*<<bytes.ml:820:11>>*/ if(0 > u$0)
       /*<<bytes.ml:820:20>>*/ throw  /*<<bytes.ml:820:20>>*/ caml_maybe_attach_backtrace
              /*<<bytes.ml:820:20>>*/ ([0, Assert_failure, _f_], 1);
      /*<<bytes.ml:821:11>>*/ if(65535 >= u$0){
      var last$0 =  /*<<bytes.ml:822:6>>*/ i + 1 | 0;
      return max < last$0
              ? 0
              : ( /*<<bytes.ml:823:33>>*/ unsafe_set_uint16_le
                  /*<<bytes.ml:823:33>>*/ (b, i, u$0),
                2) /*<<bytes.ml:831:21>>*/ ;
     }
      /*<<bytes.ml:824:11>>*/ if(1114111 < u$0)
       /*<<bytes.ml:831:9>>*/ throw  /*<<bytes.ml:831:9>>*/ caml_maybe_attach_backtrace
              /*<<bytes.ml:831:9>>*/ ([0, Assert_failure, _e_], 1);
     var last =  /*<<bytes.ml:825:6>>*/ i + 3 | 0;
     if(max < last)
       /*<<bytes.ml:826:25>>*/ return 0 /*<<bytes.ml:826:25>>*/ ;
     var
      u$1 =  /*<<bytes.ml:827:6>>*/ u$0 - 65536 | 0,
      hi = 55296 | u$1 >>> 10 | 0,
      lo = 56320 | u$1 & 1023;
      /*<<bytes.ml:830:6>>*/  /*<<bytes.ml:830:6>>*/ unsafe_set_uint16_le
       /*<<bytes.ml:830:6>>*/ (b, i, hi);
      /*<<bytes.ml:830:18>>*/  /*<<bytes.ml:830:18>>*/ unsafe_set_uint16_le
       /*<<bytes.ml:830:18>>*/ (b, i + 2 | 0, lo);
      /*<<bytes.ml:830:18>>*/ return 4 /*<<bytes.ml:830:18>>*/ ;
    }
     /*<<bytes.ml:818:27>>*/ return  /*<<bytes.ml:818:27>>*/ caml_call1
             /*<<bytes.ml:818:27>>*/ (Stdlib[1], cst_index_out_of_bounds$2) /*<<bytes.ml:831:21>>*/ ;
    /*<<bytes.ml:831:21>>*/ }
   function is_valid_utf_16le(b){
    var max = caml_ml_bytes_length(b) - 1 | 0, i = 0;
     /*<<bytes.ml:835:4>>*/ for(;;){
     if(max < i)  /*<<bytes.ml:836:20>>*/ return 1 /*<<bytes.ml:836:20>>*/ ;
     if(i === max)  /*<<bytes.ml:837:20>>*/ return 0 /*<<bytes.ml:837:20>>*/ ;
     var
      u =
         /*<<bytes.ml:838:10>>*/  /*<<bytes.ml:838:10>>*/ unsafe_get_uint16_le
          /*<<bytes.ml:838:10>>*/ (b, i);
      /*<<bytes.ml:839:13>>*/ if(55296 <= u && 57343 >= u){
       /*<<bytes.ml:840:13>>*/ if(56319 < u)
        /*<<bytes.ml:840:27>>*/ return 0 /*<<bytes.ml:840:27>>*/ ;
      var last =  /*<<bytes.ml:842:8>>*/ i + 3 | 0;
      if(max < last)
        /*<<bytes.ml:843:27>>*/ return 0 /*<<bytes.ml:843:27>>*/ ;
      var
       u$0 =
          /*<<bytes.ml:844:14>>*/  /*<<bytes.ml:844:14>>*/ unsafe_get_uint16_le
           /*<<bytes.ml:844:14>>*/ (b, i + 2 | 0);
       /*<<bytes.ml:845:17>>*/ if(56320 <= u$0 && 57343 >= u$0){
       var i$1 =  /*<<bytes.ml:846:17>>*/ i + 4 | 0;
       i = i$1;
       continue;
      }
       /*<<bytes.ml:845:45>>*/ return 0 /*<<bytes.ml:845:45>>*/ ;
     }
     var i$0 =  /*<<bytes.ml:839:41>>*/ i + 2 | 0;
     i = i$0;
    }
    /*<<bytes.ml:848:25>>*/ }
   var
    Stdlib_Bytes =
      [0,
       make,
       init,
       empty,
       copy,
       of_string,
       to_string,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit_string,
       concat,
       cat,
       iter,
       iteri,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       compare,
       runtime.caml_bytes_equal,
       starts_with,
       ends_with,
       caml_string_of_bytes,
       caml_bytes_of_string,
       split_on_char,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       set_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       set_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       set_utf_16le_uchar,
       is_valid_utf_16le,
       caml_bytes_get,
       get_int8,
       caml_bytes_get16,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       caml_bytes_get32,
       get_int32_be,
       get_int32_le,
       caml_bytes_get64,
       get_int64_be,
       get_int64_le,
       set_uint8,
       caml_bytes_set,
       set_uint16_ne,
       set_int16_be,
       set_int16_le,
       caml_bytes_set16,
       set_int16_be,
       set_int16_le,
       caml_bytes_set32,
       set_int32_be,
       set_int32_le,
       caml_bytes_set64,
       set_int64_be,
       set_int64_le,
       unsafe_escape];
   runtime.caml_register_global(30, Stdlib_Bytes, "Stdlib__Bytes");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__String
//# unitInfo: Requires: Stdlib, Stdlib__Bytes
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst$0 =  /*<<?>>*/ "",
    caml_blit_string =  /*<<?>>*/ runtime.caml_blit_string,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length =  /*<<?>>*/ runtime.caml_ml_string_length,
    caml_string_equal =  /*<<?>>*/ runtime.caml_string_equal,
    caml_string_hash =  /*<<?>>*/ runtime.caml_string_hash,
    caml_string_unsafe_get =  /*<<?>>*/ runtime.caml_string_unsafe_get,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    empty = cst$0,
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    bts = Stdlib_Bytes[44],
    bos = Stdlib_Bytes[45];
   function make(n, c){
     /*<<string.ml:36:2>>*/ return  /*<<string.ml:36:2>>*/ caml_call1
             /*<<string.ml:36:2>>*/ (bts,
              /*<<string.ml:36:2>>*/ caml_call2
               /*<<string.ml:36:2>>*/ (Stdlib_Bytes[1], n, c)) /*<<string.ml:36:19>>*/ ;
    /*<<string.ml:36:19>>*/ }
   function init(n, f){
     /*<<string.ml:38:2>>*/ return  /*<<string.ml:38:2>>*/ caml_call1
             /*<<string.ml:38:2>>*/ (bts,
              /*<<string.ml:38:2>>*/ caml_call2
               /*<<string.ml:38:2>>*/ (Stdlib_Bytes[2], n, f)) /*<<string.ml:38:19>>*/ ;
    /*<<string.ml:38:19>>*/ }
   var of_bytes = Stdlib_Bytes[6], to_bytes = Stdlib_Bytes[5];
   function sub(s, ofs, len){
    var
     _X_ =
        /*<<string.ml:43:8>>*/  /*<<string.ml:43:8>>*/ caml_call1
         /*<<string.ml:43:8>>*/ (bos, s);
     /*<<string.ml:43:2>>*/ return  /*<<string.ml:43:2>>*/ caml_call1
             /*<<string.ml:43:2>>*/ (bts,
              /*<<string.ml:43:2>>*/ caml_call3
               /*<<string.ml:43:2>>*/ (Stdlib_Bytes[7], _X_, ofs, len)) /*<<string.ml:43:30>>*/ ;
    /*<<string.ml:43:30>>*/ }
   var
    blit =  /*<<string.ml:42:8>>*/ Stdlib_Bytes[12],
    cst_String_concat = "String.concat";
   function concat(sep, l){
     /*<<string.ml:63:11>>*/ if(! l)
      /*<<string.ml:64:10>>*/ return cst /*<<string.ml:64:10>>*/ ;
    var seplen = caml_ml_string_length(sep);
    a:
    {
     b:
     {
      var acc = 0, param = l, pos$1 = 0;
       /*<<string.ml:49:20>>*/ for(;;){
       if(! param) break;
       var hd = param[1];
       if(! param[2]) break b;
       var
        tl = param[2],
        x = (caml_ml_string_length(hd) + seplen | 0) + acc | 0,
        acc$0 =
          acc <= x
           ? x
           :  /*<<string.ml:47:48>>*/ caml_call1
              /*<<string.ml:47:48>>*/ (Stdlib[1], cst_String_concat);
       acc = acc$0;
       param = tl;
      }
      var _W_ = acc;
      break a;
     }
     var _W_ = caml_ml_string_length(hd) + acc | 0;
    }
    var
     dst =
        /*<<string.ml:67:12>>*/  /*<<string.ml:67:12>>*/ runtime.caml_create_bytes
         /*<<string.ml:67:12>>*/ (_W_),
     pos = pos$1,
     param$0 = l;
     /*<<string.ml:54:21>>*/ for(;;){
     if(param$0){
      var hd$0 = param$0[1];
      if(param$0[2]){
       var tl$0 = param$0[2];
        /*<<string.ml:59:4>>*/  /*<<string.ml:59:4>>*/ caml_blit_string
         /*<<string.ml:59:4>>*/ (hd$0,
         0,
         dst,
         pos,
          /*<<string.ml:59:4>>*/ caml_ml_string_length
           /*<<string.ml:59:4>>*/ (hd$0));
        /*<<string.ml:60:4>>*/  /*<<string.ml:60:4>>*/ caml_blit_string
         /*<<string.ml:60:4>>*/ (sep,
         0,
         dst,
         pos + caml_ml_string_length(hd$0) | 0,
         seplen);
       var pos$0 = (pos + caml_ml_string_length(hd$0) | 0) + seplen | 0;
       pos = pos$0;
       param$0 = tl$0;
       continue;
      }
       /*<<string.ml:57:4>>*/  /*<<string.ml:57:4>>*/ caml_blit_string
        /*<<string.ml:57:4>>*/ (hd$0,
        0,
        dst,
        pos,
        caml_ml_string_length(hd$0));
     }
      /*<<string.ml:66:10>>*/ return  /*<<string.ml:66:10>>*/ caml_call1
              /*<<string.ml:66:10>>*/ (bts, dst) /*<<string.ml:68:26>>*/ ;
    }
    /*<<string.ml:68:26>>*/ }
   var
    cat =  /*<<string.ml:63:11>>*/ Stdlib[28],
    cst_String_index_from_Bytes_in = "String.index_from / Bytes.index_from",
    cst_String_index_from_opt_Byte =
      "String.index_from_opt / Bytes.index_from_opt",
    cst_String_rindex_from_Bytes_r = "String.rindex_from / Bytes.rindex_from",
    cst_String_rindex_from_opt_Byt =
      "String.rindex_from_opt / Bytes.rindex_from_opt",
    cst_String_contains_from_Bytes =
      "String.contains_from / Bytes.contains_from",
    cst_String_rcontains_from_Byte =
      "String.rcontains_from / Bytes.rcontains_from";
   function iter(f, s){
    var
     _U_ = caml_ml_string_length(s) - 1 | 0,
     _T_ =  /*<<string.ml:74:2>>*/ 0;
    if(_U_ >= 0){
     var i = _T_;
     for(;;){
       /*<<string.ml:74:31>>*/  /*<<string.ml:74:31>>*/ caml_call1
        /*<<string.ml:74:31>>*/ (f, caml_string_unsafe_get(s, i));
      var _V_ =  /*<<string.ml:74:31>>*/ i + 1 | 0;
      if(_U_ === i) break;
      i = _V_;
     }
    }
    return 0;
    /*<<string.ml:74:54>>*/ }
   function iteri(f, s){
    var
     _R_ = caml_ml_string_length(s) - 1 | 0,
     _Q_ =  /*<<string.ml:78:2>>*/ 0;
    if(_R_ >= 0){
     var i = _Q_;
     for(;;){
       /*<<string.ml:78:31>>*/  /*<<string.ml:78:31>>*/ caml_call2
        /*<<string.ml:78:31>>*/ (f, i, caml_string_unsafe_get(s, i));
      var _S_ =  /*<<string.ml:78:31>>*/ i + 1 | 0;
      if(_R_ === i) break;
      i = _S_;
     }
    }
    return 0;
    /*<<string.ml:78:56>>*/ }
   function map(f, s){
    var
     _P_ =
        /*<<string.ml:81:10>>*/  /*<<string.ml:81:10>>*/ caml_call1
         /*<<string.ml:81:10>>*/ (bos, s);
     /*<<string.ml:81:2>>*/ return  /*<<string.ml:81:2>>*/ caml_call1
             /*<<string.ml:81:2>>*/ (bts,
              /*<<string.ml:81:2>>*/ caml_call2
               /*<<string.ml:81:2>>*/ (Stdlib_Bytes[17], f, _P_)) /*<<string.ml:81:24>>*/ ;
    /*<<string.ml:81:24>>*/ }
   function mapi(f, s){
    var
     _O_ =
        /*<<string.ml:83:11>>*/  /*<<string.ml:83:11>>*/ caml_call1
         /*<<string.ml:83:11>>*/ (bos, s);
     /*<<string.ml:83:2>>*/ return  /*<<string.ml:83:2>>*/ caml_call1
             /*<<string.ml:83:2>>*/ (bts,
              /*<<string.ml:83:2>>*/ caml_call2
               /*<<string.ml:83:2>>*/ (Stdlib_Bytes[18], f, _O_)) /*<<string.ml:83:25>>*/ ;
    /*<<string.ml:83:25>>*/ }
   function fold_right(f, x, a){
    var
     _N_ =
        /*<<string.ml:85:17>>*/  /*<<string.ml:85:17>>*/ caml_call1
         /*<<string.ml:85:17>>*/ (bos, x);
     /*<<string.ml:85:2>>*/ return  /*<<string.ml:85:2>>*/ caml_call3
             /*<<string.ml:85:2>>*/ (Stdlib_Bytes[20], f, _N_, a) /*<<string.ml:85:26>>*/ ;
    /*<<string.ml:85:26>>*/ }
   function fold_left(f, a, x){
    var
     _M_ =
        /*<<string.ml:87:18>>*/  /*<<string.ml:87:18>>*/ caml_call1
         /*<<string.ml:87:18>>*/ (bos, x);
     /*<<string.ml:87:18>>*/ return  /*<<string.ml:87:18>>*/ caml_call3
             /*<<string.ml:87:18>>*/ (Stdlib_Bytes[19], f, a, _M_) /*<<string.ml:87:25>>*/ ;
    /*<<string.ml:87:25>>*/ }
   function exists(f, s){
    var
     _L_ =
        /*<<string.ml:89:13>>*/  /*<<string.ml:89:13>>*/ caml_call1
         /*<<string.ml:89:13>>*/ (bos, s);
     /*<<string.ml:89:13>>*/ return  /*<<string.ml:89:13>>*/ caml_call2
             /*<<string.ml:89:13>>*/ (Stdlib_Bytes[22], f, _L_) /*<<string.ml:89:20>>*/ ;
    /*<<string.ml:89:20>>*/ }
   function for_all(f, s){
    var
     _K_ =
        /*<<string.ml:91:14>>*/  /*<<string.ml:91:14>>*/ caml_call1
         /*<<string.ml:91:14>>*/ (bos, s);
     /*<<string.ml:91:14>>*/ return  /*<<string.ml:91:14>>*/ caml_call2
             /*<<string.ml:91:14>>*/ (Stdlib_Bytes[21], f, _K_) /*<<string.ml:91:21>>*/ ;
    /*<<string.ml:91:21>>*/ }
   function is_space(param){
    var _J_ =  /*<<string.ml:97:15>>*/ param - 9 | 0;
    a:
    {
     if(4 < _J_ >>> 0){if(23 !== _J_) break a;} else if(2 === _J_) break a;
      /*<<string.ml:98:41>>*/ return 1 /*<<string.ml:98:41>>*/ ;
    }
     /*<<string.ml:99:9>>*/ return 0 /*<<string.ml:99:9>>*/ ;
    /*<<string.ml:99:14>>*/ }
   function trim(s){
     /*<<string.ml:102:2>>*/ if(s === cst$0)
      /*<<string.ml:102:17>>*/ return s /*<<string.ml:102:17>>*/ ;
     /*<<string.ml:103:10>>*/ if
     (!
       /*<<string.ml:103:10>>*/ is_space
        /*<<string.ml:103:10>>*/ (caml_string_unsafe_get(s, 0))
      &&
       !
        /*<<string.ml:103:39>>*/ is_space
         /*<<string.ml:103:39>>*/ (caml_string_unsafe_get
          (s, caml_ml_string_length(s) - 1 | 0)))
      /*<<string.ml:105:7>>*/ return s /*<<string.ml:105:7>>*/ ;
    var
     _I_ =
        /*<<string.ml:104:21>>*/  /*<<string.ml:104:21>>*/ caml_call1
         /*<<string.ml:104:21>>*/ (bos, s);
     /*<<string.ml:104:13>>*/ return  /*<<string.ml:104:13>>*/ caml_call1
             /*<<string.ml:104:13>>*/ (bts,
              /*<<string.ml:104:13>>*/ caml_call1
               /*<<string.ml:104:13>>*/ (Stdlib_Bytes[23], _I_)) /*<<string.ml:105:8>>*/ ;
    /*<<string.ml:105:8>>*/ }
   function escaped(s){
    var
     b =
        /*<<string.ml:108:10>>*/  /*<<string.ml:108:10>>*/ caml_call1
         /*<<string.ml:108:10>>*/ (bos, s);
     /*<<string.ml:111:6>>*/ return  /*<<string.ml:111:6>>*/ caml_call1
             /*<<string.ml:111:6>>*/ (bts,
              /*<<string.ml:111:6>>*/ caml_call1
               /*<<string.ml:111:6>>*/ (Stdlib_Bytes[87], b)) /*<<string.ml:111:25>>*/ ;
    /*<<string.ml:111:25>>*/ }
   function index_rec(s, lim, i, c){
    var i$0 = i;
     /*<<string.ml:115:2>>*/ for(;;){
     if(lim <= i$0)
       /*<<string.ml:115:19>>*/ throw  /*<<string.ml:115:19>>*/ caml_maybe_attach_backtrace
              /*<<string.ml:115:19>>*/ (Stdlib[8], 1);
     if(caml_string_unsafe_get(s, i$0) === c)
       /*<<string.ml:116:29>>*/ return i$0 /*<<string.ml:116:29>>*/ ;
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
    /*<<string.ml:116:61>>*/ }
   function index(s, c){
     /*<<string.ml:119:16>>*/ return  /*<<string.ml:119:16>>*/ index_rec
             /*<<string.ml:119:16>>*/ (s, caml_ml_string_length(s), 0, c) /*<<string.ml:119:42>>*/ ;
    /*<<string.ml:119:42>>*/ }
   function index_rec_opt(s, lim, i, c){
    var i$0 = i;
     /*<<string.ml:123:2>>*/ for(;;){
     if(lim <= i$0)
       /*<<string.ml:123:19>>*/ return 0 /*<<string.ml:123:19>>*/ ;
     if(caml_string_unsafe_get(s, i$0) === c)
       /*<<string.ml:124:29>>*/ return [0, i$0] /*<<string.ml:124:29>>*/ ;
     var i$1 = i$0 + 1 | 0;
     i$0 = i$1;
    }
    /*<<string.ml:124:70>>*/ }
   function index_opt(s, c){
     /*<<string.ml:127:20>>*/ return  /*<<string.ml:127:20>>*/ index_rec_opt
             /*<<string.ml:127:20>>*/ (s, caml_ml_string_length(s), 0, c) /*<<string.ml:127:50>>*/ ;
    /*<<string.ml:127:50>>*/ }
   function index_from(s, i, c){
    var l = caml_ml_string_length(s);
     /*<<string.ml:132:2>>*/ if(0 <= i && l >= i)
      /*<<string.ml:133:4>>*/ return  /*<<string.ml:133:4>>*/ index_rec
              /*<<string.ml:133:4>>*/ (s, l, i, c) /*<<string.ml:133:21>>*/ ;
     /*<<string.ml:132:25>>*/ return  /*<<string.ml:132:25>>*/ caml_call1
             /*<<string.ml:132:25>>*/ (Stdlib[1],
             cst_String_index_from_Bytes_in) /*<<string.ml:133:21>>*/ ;
    /*<<string.ml:133:21>>*/ }
   function index_from_opt(s, i, c){
    var l = caml_ml_string_length(s);
     /*<<string.ml:138:2>>*/ if(0 <= i && l >= i)
      /*<<string.ml:141:4>>*/ return  /*<<string.ml:141:4>>*/ index_rec_opt
              /*<<string.ml:141:4>>*/ (s, l, i, c) /*<<string.ml:141:25>>*/ ;
     /*<<string.ml:139:4>>*/ return  /*<<string.ml:139:4>>*/ caml_call1
             /*<<string.ml:139:4>>*/ (Stdlib[1],
             cst_String_index_from_opt_Byte) /*<<string.ml:141:25>>*/ ;
    /*<<string.ml:141:25>>*/ }
   function rindex_rec(s, i, c){
    var i$0 = i;
     /*<<string.ml:145:2>>*/ for(;;){
     if(0 > i$0)
       /*<<string.ml:145:16>>*/ throw  /*<<string.ml:145:16>>*/ caml_maybe_attach_backtrace
              /*<<string.ml:145:16>>*/ (Stdlib[8], 1);
     if(caml_string_unsafe_get(s, i$0) === c)
       /*<<string.ml:146:29>>*/ return i$0 /*<<string.ml:146:29>>*/ ;
     var i$1 = i$0 - 1 | 0;
     i$0 = i$1;
    }
    /*<<string.ml:146:58>>*/ }
   function rindex(s, c){
     /*<<string.ml:149:17>>*/ return  /*<<string.ml:149:17>>*/ rindex_rec
             /*<<string.ml:149:17>>*/ (s, caml_ml_string_length(s) - 1 | 0, c) /*<<string.ml:149:46>>*/ ;
    /*<<string.ml:149:46>>*/ }
   function rindex_from(s, i, c){
     /*<<string.ml:153:2>>*/ if(-1 <= i && caml_ml_string_length(s) > i)
      /*<<string.ml:156:4>>*/ return  /*<<string.ml:156:4>>*/ rindex_rec
              /*<<string.ml:156:4>>*/ (s, i, c) /*<<string.ml:156:20>>*/ ;
     /*<<string.ml:154:4>>*/ return  /*<<string.ml:154:4>>*/ caml_call1
             /*<<string.ml:154:4>>*/ (Stdlib[1],
             cst_String_rindex_from_Bytes_r) /*<<string.ml:156:20>>*/ ;
    /*<<string.ml:156:20>>*/ }
   function rindex_rec_opt(s, i, c){
    var i$0 = i;
     /*<<string.ml:160:2>>*/ for(;;){
     if(0 > i$0)  /*<<string.ml:160:16>>*/ return 0 /*<<string.ml:160:16>>*/ ;
     if(caml_string_unsafe_get(s, i$0) === c)
       /*<<string.ml:161:29>>*/ return [0, i$0] /*<<string.ml:161:29>>*/ ;
     var i$1 = i$0 - 1 | 0;
     i$0 = i$1;
    }
    /*<<string.ml:161:67>>*/ }
   function rindex_opt(s, c){
     /*<<string.ml:164:21>>*/ return  /*<<string.ml:164:21>>*/ rindex_rec_opt
             /*<<string.ml:164:21>>*/ (s, caml_ml_string_length(s) - 1 | 0, c) /*<<string.ml:164:54>>*/ ;
    /*<<string.ml:164:54>>*/ }
   function rindex_from_opt(s, i, c){
     /*<<string.ml:168:2>>*/ if(-1 <= i && caml_ml_string_length(s) > i)
      /*<<string.ml:171:4>>*/ return  /*<<string.ml:171:4>>*/ rindex_rec_opt
              /*<<string.ml:171:4>>*/ (s, i, c) /*<<string.ml:171:24>>*/ ;
     /*<<string.ml:169:4>>*/ return  /*<<string.ml:169:4>>*/ caml_call1
             /*<<string.ml:169:4>>*/ (Stdlib[1],
             cst_String_rindex_from_opt_Byt) /*<<string.ml:171:24>>*/ ;
    /*<<string.ml:171:24>>*/ }
   function contains_from(s, i, c){
    var l = caml_ml_string_length(s);
     /*<<string.ml:176:2>>*/ if(0 <= i && l >= i)
      /*<<string.ml:179:4>>*/ try{
       /*<<string.ml:179:15>>*/  /*<<string.ml:179:15>>*/ index_rec
        /*<<string.ml:179:15>>*/ (s, l, i, c);
      var _G_ =  /*<<string.ml:179:36>>*/ 1;
       /*<<string.ml:179:36>>*/ return _G_ /*<<string.ml:179:36>>*/ ;
     }
     catch(_H_){
      var _F_ = caml_wrap_exception(_H_);
      if(_F_ === Stdlib[8])
        /*<<string.ml:179:59>>*/ return 0 /*<<string.ml:179:59>>*/ ;
      throw caml_maybe_attach_backtrace(_F_, 0);
     }
     /*<<string.ml:177:4>>*/ return  /*<<string.ml:177:4>>*/ caml_call1
             /*<<string.ml:177:4>>*/ (Stdlib[1],
             cst_String_contains_from_Bytes) /*<<string.ml:179:64>>*/ ;
    /*<<string.ml:179:64>>*/ }
   function contains(s, c){
     /*<<string.ml:182:19>>*/ return  /*<<string.ml:182:19>>*/ contains_from
             /*<<string.ml:182:19>>*/ (s, 0, c) /*<<string.ml:182:38>>*/ ;
    /*<<string.ml:182:38>>*/ }
   function rcontains_from(s, i, c){
     /*<<string.ml:186:2>>*/ if(0 <= i && caml_ml_string_length(s) > i)
      /*<<string.ml:189:4>>*/ try{
       /*<<string.ml:189:15>>*/  /*<<string.ml:189:15>>*/ rindex_rec
        /*<<string.ml:189:15>>*/ (s, i, c);
      var _D_ =  /*<<string.ml:189:35>>*/ 1;
       /*<<string.ml:189:35>>*/ return _D_ /*<<string.ml:189:35>>*/ ;
     }
     catch(_E_){
      var _C_ = caml_wrap_exception(_E_);
      if(_C_ === Stdlib[8])
        /*<<string.ml:189:58>>*/ return 0 /*<<string.ml:189:58>>*/ ;
      throw caml_maybe_attach_backtrace(_C_, 0);
     }
     /*<<string.ml:187:4>>*/ return  /*<<string.ml:187:4>>*/ caml_call1
             /*<<string.ml:187:4>>*/ (Stdlib[1],
             cst_String_rcontains_from_Byte) /*<<string.ml:189:63>>*/ ;
    /*<<string.ml:189:63>>*/ }
   function uppercase_ascii(s){
    var
     _B_ =
        /*<<string.ml:192:20>>*/  /*<<string.ml:192:20>>*/ caml_call1
         /*<<string.ml:192:20>>*/ (bos, s);
     /*<<string.ml:192:2>>*/ return  /*<<string.ml:192:2>>*/ caml_call1
             /*<<string.ml:192:2>>*/ (bts,
              /*<<string.ml:192:2>>*/ caml_call1
               /*<<string.ml:192:2>>*/ (Stdlib_Bytes[36], _B_)) /*<<string.ml:192:34>>*/ ;
    /*<<string.ml:192:34>>*/ }
   function lowercase_ascii(s){
    var
     _A_ =
        /*<<string.ml:194:20>>*/  /*<<string.ml:194:20>>*/ caml_call1
         /*<<string.ml:194:20>>*/ (bos, s);
     /*<<string.ml:194:2>>*/ return  /*<<string.ml:194:2>>*/ caml_call1
             /*<<string.ml:194:2>>*/ (bts,
              /*<<string.ml:194:2>>*/ caml_call1
               /*<<string.ml:194:2>>*/ (Stdlib_Bytes[37], _A_)) /*<<string.ml:194:34>>*/ ;
    /*<<string.ml:194:34>>*/ }
   function capitalize_ascii(s){
    var
     _z_ =
        /*<<string.ml:196:21>>*/  /*<<string.ml:196:21>>*/ caml_call1
         /*<<string.ml:196:21>>*/ (bos, s);
     /*<<string.ml:196:2>>*/ return  /*<<string.ml:196:2>>*/ caml_call1
             /*<<string.ml:196:2>>*/ (bts,
              /*<<string.ml:196:2>>*/ caml_call1
               /*<<string.ml:196:2>>*/ (Stdlib_Bytes[38], _z_)) /*<<string.ml:196:35>>*/ ;
    /*<<string.ml:196:35>>*/ }
   function uncapitalize_ascii(s){
    var
     _y_ =
        /*<<string.ml:198:23>>*/  /*<<string.ml:198:23>>*/ caml_call1
         /*<<string.ml:198:23>>*/ (bos, s);
     /*<<string.ml:198:2>>*/ return  /*<<string.ml:198:2>>*/ caml_call1
             /*<<string.ml:198:2>>*/ (bts,
              /*<<string.ml:198:2>>*/ caml_call1
               /*<<string.ml:198:2>>*/ (Stdlib_Bytes[39], _y_)) /*<<string.ml:198:37>>*/ ;
    /*<<string.ml:198:37>>*/ }
   function starts_with(prefix, s){
    var
     len_s = caml_ml_string_length(s),
     len_pre = caml_ml_string_length(prefix),
     _x_ = len_pre <= len_s ? 1 : 0;
    if(! _x_) return _x_;
    var i = 0;
     /*<<string.ml:205:4>>*/ for(;;){
     if(i === len_pre)
       /*<<string.ml:205:24>>*/ return 1 /*<<string.ml:205:24>>*/ ;
     if(caml_string_unsafe_get(s, i) !== caml_string_unsafe_get(prefix, i))
       /*<<string.ml:206:55>>*/ return 0 /*<<string.ml:206:55>>*/ ;
     var i$0 =  /*<<string.ml:207:9>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<string.ml:208:30>>*/ }
   function ends_with(suffix, s){
    var
     len_s = caml_ml_string_length(s),
     len_suf = caml_ml_string_length(suffix),
     diff = len_s - len_suf | 0,
     _w_ = 0 <= diff ? 1 : 0;
    if(! _w_) return _w_;
    var i = 0;
     /*<<string.ml:216:4>>*/ for(;;){
     if(i === len_suf)
       /*<<string.ml:216:24>>*/ return 1 /*<<string.ml:216:24>>*/ ;
     if
      (caml_string_unsafe_get(s, diff + i | 0)
       !== caml_string_unsafe_get(suffix, i))
       /*<<string.ml:217:64>>*/ return 0 /*<<string.ml:217:64>>*/ ;
     var i$0 =  /*<<string.ml:218:9>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<string.ml:219:23>>*/ }
   function hash(x){
     /*<<string.ml:222:13>>*/ return  /*<<string.ml:222:13>>*/ caml_string_hash
             /*<<string.ml:222:13>>*/ (0, x) /*<<string.ml:222:28>>*/ ;
    /*<<string.ml:222:28>>*/ }
   function split_on_char(sep, s){
    var
     r =  /*<<string.ml:226:10>>*/ [0, 0],
     j =
        /*<<string.ml:227:10>>*/ [0,
         /*<<string.ml:227:2>>*/ caml_ml_string_length
          /*<<string.ml:227:2>>*/ (s)],
     _s_ =
        /*<<string.ml:228:2>>*/  /*<<string.ml:228:2>>*/ caml_ml_string_length
         /*<<string.ml:228:2>>*/ (s)
       - 1
       | 0;
    if(_s_ >= 0){
     var i = _s_;
     for(;;){
      if(caml_string_unsafe_get(s, i) === sep){
       var _u_ = r[1];
       r[1] =
        [0,
          /*<<string.ml:230:11>>*/ sub
           /*<<string.ml:230:11>>*/ (s, i + 1 | 0, (j[1] - i | 0) - 1 | 0),
         _u_];
       j[1] = i;
      }
      var _v_ =  /*<<string.ml:228:2>>*/ i - 1 | 0;
      if(0 === i) break;
      i = _v_;
     }
    }
    var _t_ = r[1];
     /*<<string.ml:234:2>>*/ return [0,
             /*<<string.ml:234:2>>*/ sub /*<<string.ml:234:2>>*/ (s, 0, j[1]),
            _t_] /*<<string.ml:234:2>>*/ ;
    /*<<string.ml:234:18>>*/ }
   var compare = runtime.caml_string_compare;
   function to_seq(s){
    var
     _r_ =
        /*<<string.ml:243:15>>*/  /*<<string.ml:243:15>>*/ caml_call1
         /*<<string.ml:243:15>>*/ (bos, s);
     /*<<string.ml:243:15>>*/ return  /*<<string.ml:243:15>>*/ caml_call1
             /*<<string.ml:243:15>>*/ (Stdlib_Bytes[47], _r_) /*<<string.ml:243:32>>*/ ;
    /*<<string.ml:243:32>>*/ }
   function to_seqi(s){
    var
     _q_ =
        /*<<string.ml:245:16>>*/  /*<<string.ml:245:16>>*/ caml_call1
         /*<<string.ml:245:16>>*/ (bos, s);
     /*<<string.ml:245:16>>*/ return  /*<<string.ml:245:16>>*/ caml_call1
             /*<<string.ml:245:16>>*/ (Stdlib_Bytes[48], _q_) /*<<string.ml:245:34>>*/ ;
    /*<<string.ml:245:34>>*/ }
   function of_seq(g){
     /*<<string.ml:247:15>>*/ return  /*<<string.ml:247:15>>*/ caml_call1
             /*<<string.ml:247:15>>*/ (bts,
              /*<<string.ml:247:15>>*/ caml_call1
               /*<<string.ml:247:15>>*/ (Stdlib_Bytes[49], g)) /*<<string.ml:247:32>>*/ ;
    /*<<string.ml:247:32>>*/ }
   function get_utf_8_uchar(s, i){
    var
     _p_ =
        /*<<string.ml:251:44>>*/  /*<<string.ml:251:44>>*/ caml_call1
         /*<<string.ml:251:44>>*/ (bos, s);
     /*<<string.ml:251:26>>*/ return  /*<<string.ml:251:26>>*/ caml_call2
             /*<<string.ml:251:26>>*/ (Stdlib_Bytes[50], _p_, i) /*<<string.ml:251:53>>*/ ;
    /*<<string.ml:251:53>>*/ }
   function is_valid_utf_8(s){
    var
     _o_ =
        /*<<string.ml:252:40>>*/  /*<<string.ml:252:40>>*/ caml_call1
         /*<<string.ml:252:40>>*/ (bos, s);
     /*<<string.ml:252:40>>*/ return  /*<<string.ml:252:40>>*/ caml_call1
             /*<<string.ml:252:40>>*/ (Stdlib_Bytes[52], _o_) /*<<string.ml:252:47>>*/ ;
    /*<<string.ml:252:47>>*/ }
   function get_utf_16be_uchar(s, i){
    var
     _n_ =
        /*<<string.ml:254:50>>*/  /*<<string.ml:254:50>>*/ caml_call1
         /*<<string.ml:254:50>>*/ (bos, s);
     /*<<string.ml:254:29>>*/ return  /*<<string.ml:254:29>>*/ caml_call2
             /*<<string.ml:254:29>>*/ (Stdlib_Bytes[53], _n_, i) /*<<string.ml:254:59>>*/ ;
    /*<<string.ml:254:59>>*/ }
   function is_valid_utf_16be(s){
    var
     _m_ =
        /*<<string.ml:255:46>>*/  /*<<string.ml:255:46>>*/ caml_call1
         /*<<string.ml:255:46>>*/ (bos, s);
     /*<<string.ml:255:46>>*/ return  /*<<string.ml:255:46>>*/ caml_call1
             /*<<string.ml:255:46>>*/ (Stdlib_Bytes[55], _m_) /*<<string.ml:255:53>>*/ ;
    /*<<string.ml:255:53>>*/ }
   function get_utf_16le_uchar(s, i){
    var
     _l_ =
        /*<<string.ml:257:50>>*/  /*<<string.ml:257:50>>*/ caml_call1
         /*<<string.ml:257:50>>*/ (bos, s);
     /*<<string.ml:257:29>>*/ return  /*<<string.ml:257:29>>*/ caml_call2
             /*<<string.ml:257:29>>*/ (Stdlib_Bytes[56], _l_, i) /*<<string.ml:257:59>>*/ ;
    /*<<string.ml:257:59>>*/ }
   function is_valid_utf_16le(s){
    var
     _k_ =
        /*<<string.ml:258:46>>*/  /*<<string.ml:258:46>>*/ caml_call1
         /*<<string.ml:258:46>>*/ (bos, s);
     /*<<string.ml:258:46>>*/ return  /*<<string.ml:258:46>>*/ caml_call1
             /*<<string.ml:258:46>>*/ (Stdlib_Bytes[58], _k_) /*<<string.ml:258:53>>*/ ;
    /*<<string.ml:258:53>>*/ }
   function get_int8(s, i){
    var
     _j_ =
        /*<<string.ml:267:30>>*/  /*<<string.ml:267:30>>*/ caml_call1
         /*<<string.ml:267:30>>*/ (bos, s);
     /*<<string.ml:267:19>>*/ return  /*<<string.ml:267:19>>*/ caml_call2
             /*<<string.ml:267:19>>*/ (Stdlib_Bytes[60], _j_, i) /*<<string.ml:267:39>>*/ ;
    /*<<string.ml:267:39>>*/ }
   function get_uint16_le(s, i){
    var
     _i_ =
        /*<<string.ml:268:40>>*/  /*<<string.ml:268:40>>*/ caml_call1
         /*<<string.ml:268:40>>*/ (bos, s);
     /*<<string.ml:268:24>>*/ return  /*<<string.ml:268:24>>*/ caml_call2
             /*<<string.ml:268:24>>*/ (Stdlib_Bytes[63], _i_, i) /*<<string.ml:268:49>>*/ ;
    /*<<string.ml:268:49>>*/ }
   function get_uint16_be(s, i){
    var
     _h_ =
        /*<<string.ml:269:40>>*/  /*<<string.ml:269:40>>*/ caml_call1
         /*<<string.ml:269:40>>*/ (bos, s);
     /*<<string.ml:269:24>>*/ return  /*<<string.ml:269:24>>*/ caml_call2
             /*<<string.ml:269:24>>*/ (Stdlib_Bytes[62], _h_, i) /*<<string.ml:269:49>>*/ ;
    /*<<string.ml:269:49>>*/ }
   function get_int16_ne(s, i){
    var
     _g_ =
        /*<<string.ml:270:38>>*/  /*<<string.ml:270:38>>*/ caml_call1
         /*<<string.ml:270:38>>*/ (bos, s);
     /*<<string.ml:270:23>>*/ return  /*<<string.ml:270:23>>*/ caml_call2
             /*<<string.ml:270:23>>*/ (Stdlib_Bytes[64], _g_, i) /*<<string.ml:270:47>>*/ ;
    /*<<string.ml:270:47>>*/ }
   function get_int16_le(s, i){
    var
     _f_ =
        /*<<string.ml:271:38>>*/  /*<<string.ml:271:38>>*/ caml_call1
         /*<<string.ml:271:38>>*/ (bos, s);
     /*<<string.ml:271:23>>*/ return  /*<<string.ml:271:23>>*/ caml_call2
             /*<<string.ml:271:23>>*/ (Stdlib_Bytes[66], _f_, i) /*<<string.ml:271:47>>*/ ;
    /*<<string.ml:271:47>>*/ }
   function get_int16_be(s, i){
    var
     _e_ =
        /*<<string.ml:272:38>>*/  /*<<string.ml:272:38>>*/ caml_call1
         /*<<string.ml:272:38>>*/ (bos, s);
     /*<<string.ml:272:23>>*/ return  /*<<string.ml:272:23>>*/ caml_call2
             /*<<string.ml:272:23>>*/ (Stdlib_Bytes[65], _e_, i) /*<<string.ml:272:47>>*/ ;
    /*<<string.ml:272:47>>*/ }
   function get_int32_le(s, i){
    var
     _d_ =
        /*<<string.ml:273:38>>*/  /*<<string.ml:273:38>>*/ caml_call1
         /*<<string.ml:273:38>>*/ (bos, s);
     /*<<string.ml:273:23>>*/ return  /*<<string.ml:273:23>>*/ caml_call2
             /*<<string.ml:273:23>>*/ (Stdlib_Bytes[69], _d_, i) /*<<string.ml:273:47>>*/ ;
    /*<<string.ml:273:47>>*/ }
   function get_int32_be(s, i){
    var
     _c_ =
        /*<<string.ml:274:38>>*/  /*<<string.ml:274:38>>*/ caml_call1
         /*<<string.ml:274:38>>*/ (bos, s);
     /*<<string.ml:274:23>>*/ return  /*<<string.ml:274:23>>*/ caml_call2
             /*<<string.ml:274:23>>*/ (Stdlib_Bytes[68], _c_, i) /*<<string.ml:274:47>>*/ ;
    /*<<string.ml:274:47>>*/ }
   function get_int64_le(s, i){
    var
     _b_ =
        /*<<string.ml:275:38>>*/  /*<<string.ml:275:38>>*/ caml_call1
         /*<<string.ml:275:38>>*/ (bos, s);
     /*<<string.ml:275:23>>*/ return  /*<<string.ml:275:23>>*/ caml_call2
             /*<<string.ml:275:23>>*/ (Stdlib_Bytes[72], _b_, i) /*<<string.ml:275:47>>*/ ;
    /*<<string.ml:275:47>>*/ }
   function get_int64_be(s, i){
    var
     _a_ =
        /*<<string.ml:276:38>>*/  /*<<string.ml:276:38>>*/ caml_call1
         /*<<string.ml:276:38>>*/ (bos, s);
     /*<<string.ml:276:23>>*/ return  /*<<string.ml:276:23>>*/ caml_call2
             /*<<string.ml:276:23>>*/ (Stdlib_Bytes[71], _a_, i) /*<<string.ml:276:47>>*/ ;
    /*<<string.ml:276:47>>*/ }
   var
    Stdlib_String =
      [0,
       make,
       init,
       empty,
       of_bytes,
       to_bytes,
       blit,
       concat,
       cat,
       caml_string_equal,
       compare,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       is_valid_utf_16le,
       runtime.caml_string_get,
       get_int8,
       runtime.caml_string_get16,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       runtime.caml_string_get32,
       hash,
       caml_string_hash,
       get_int32_be,
       get_int32_le,
       runtime.caml_string_get64,
       get_int64_be,
       get_int64_le];
   runtime.caml_register_global(12, Stdlib_String, "Stdlib__String");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Unit
(function(globalThis){
   "use strict";
   var runtime =  /*<<?>>*/ globalThis.jsoo_runtime, cst = "()";
   function equal(_b_, param){
     /*<<unit.ml:18:18>>*/ return 1 /*<<unit.ml:18:18>>*/ ;
    /*<<unit.ml:18:22>>*/ }
   function compare(_a_, param){
     /*<<unit.ml:19:20>>*/ return 0 /*<<unit.ml:19:20>>*/ ;
    /*<<unit.ml:19:21>>*/ }
   function to_string(param){
     /*<<unit.ml:20:19>>*/ return cst /*<<unit.ml:20:19>>*/ ;
    /*<<unit.ml:20:23>>*/ }
   var Stdlib_Unit = [0, equal, compare, to_string];
   runtime.caml_register_global(1, Stdlib_Unit, "Stdlib__Unit");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Marshal
//# unitInfo: Requires: Stdlib, Stdlib__Bytes
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst_Marshal_from_bytes$1 =  /*<<?>>*/ "Marshal.from_bytes",
    caml_marshal_data_size =  /*<<?>>*/ runtime.caml_marshal_data_size,
    caml_ml_bytes_length =  /*<<?>>*/ runtime.caml_ml_bytes_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib = global_data.Stdlib,
    cst_Marshal_to_buffer_substrin =
      "Marshal.to_buffer: substring out of bounds";
   function to_buffer(buff, ofs, len, v, flags){
     /*<<marshal.ml:34:2>>*/ if
     (0 <= ofs && 0 <= len && (caml_ml_bytes_length(buff) - len | 0) >= ofs)
      /*<<marshal.ml:36:7>>*/ return  /*<<marshal.ml:36:7>>*/ runtime.caml_output_value_to_buffer
              /*<<marshal.ml:36:7>>*/ (buff, ofs, len, v, flags) /*<<marshal.ml:36:44>>*/ ;
     /*<<marshal.ml:35:7>>*/ return  /*<<marshal.ml:35:7>>*/ caml_call1
             /*<<marshal.ml:35:7>>*/ (Stdlib[1],
             cst_Marshal_to_buffer_substrin) /*<<marshal.ml:36:44>>*/ ;
    /*<<marshal.ml:36:44>>*/ }
   var
    cst_Marshal_data_size = "Marshal.data_size",
    cst_Marshal_from_bytes = cst_Marshal_from_bytes$1,
    cst_Marshal_from_bytes$0 = cst_Marshal_from_bytes$1;
   function data_size(buff, ofs){
     /*<<marshal.ml:50:2>>*/ if
     (0 <= ofs && (caml_ml_bytes_length(buff) - 16 | 0) >= ofs)
      /*<<marshal.ml:52:7>>*/ return  /*<<marshal.ml:52:7>>*/ caml_marshal_data_size
              /*<<marshal.ml:52:7>>*/ (buff, ofs) /*<<marshal.ml:52:32>>*/ ;
     /*<<marshal.ml:51:7>>*/ return  /*<<marshal.ml:51:7>>*/ caml_call1
             /*<<marshal.ml:51:7>>*/ (Stdlib[1], cst_Marshal_data_size) /*<<marshal.ml:52:32>>*/ ;
    /*<<marshal.ml:52:32>>*/ }
   function total_size(buff, ofs){
     /*<<marshal.ml:53:26>>*/ return 16
           +
             /*<<marshal.ml:53:40>>*/ data_size
              /*<<marshal.ml:53:40>>*/ (buff, ofs)
           | 0;
    /*<<marshal.ml:53:58>>*/ }
   function from_bytes(buff, ofs){
     /*<<marshal.ml:56:2>>*/ if
     (0 <= ofs && (caml_ml_bytes_length(buff) - 16 | 0) >= ofs){
     var
      len =
         /*<<marshal.ml:59:14>>*/  /*<<marshal.ml:59:14>>*/ caml_marshal_data_size
          /*<<marshal.ml:59:14>>*/ (buff, ofs);
     return (caml_ml_bytes_length(buff) - (16 + len | 0) | 0) < ofs
             ?  /*<<marshal.ml:61:9>>*/ caml_call1
                /*<<marshal.ml:61:9>>*/ (Stdlib[1], cst_Marshal_from_bytes$0)
             :  /*<<marshal.ml:62:9>>*/ runtime.caml_input_value_from_bytes
                /*<<marshal.ml:62:9>>*/ (buff, ofs) /*<<marshal.ml:63:5>>*/ ;
    }
     /*<<marshal.ml:57:7>>*/ return  /*<<marshal.ml:57:7>>*/ caml_call1
             /*<<marshal.ml:57:7>>*/ (Stdlib[1], cst_Marshal_from_bytes) /*<<marshal.ml:63:5>>*/ ;
    /*<<marshal.ml:63:5>>*/ }
   function from_string(buff, ofs){
     /*<<marshal.ml:68:2>>*/ return  /*<<marshal.ml:68:2>>*/ from_bytes
             /*<<marshal.ml:68:2>>*/ ( /*<<marshal.ml:68:13>>*/ caml_call1
               /*<<marshal.ml:68:13>>*/ (Stdlib_Bytes[45], buff),
             ofs) /*<<marshal.ml:68:46>>*/ ;
    /*<<marshal.ml:68:46>>*/ }
   var
    Stdlib_Marshal =
      [0,
       runtime.caml_output_value,
       to_buffer,
       runtime.caml_input_value,
       from_bytes,
       from_string,
       16,
       data_size,
       total_size];
   runtime.caml_register_global(6, Stdlib_Marshal, "Stdlib__Marshal");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Array
//# unitInfo: Requires: Stdlib, Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_array_sub =  /*<<?>>*/ runtime.caml_array_sub,
    caml_check_bound =  /*<<?>>*/ runtime.caml_check_bound,
    caml_make_vect =  /*<<?>>*/ runtime.caml_make_vect,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Seq = global_data.Stdlib__Seq,
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    Floatarray =  /*<<array.ml:37:20>>*/ [0],
    cst_Array_init = "Array.init",
    cst_Array_make_matrix = "Array.make_matrix",
    cst_Array_init_matrix = "Array.init_matrix",
    cst_Array_sub = "Array.sub",
    cst_Array_fill = "Array.fill",
    cst_Array_blit = "Array.blit",
    cst_Array_iter2_arrays_must_ha =
      "Array.iter2: arrays must have the same length",
    cst_Array_map2_arrays_must_hav =
      "Array.map2: arrays must have the same length",
    cst_Array_for_all2 = "Array.for_all2",
    cst_Array_exists2 = "Array.exists2",
    cst_Array_combine = "Array.combine";
   function init(l, f){
     /*<<array.ml:48:2>>*/ if(0 === l)
      /*<<array.ml:48:16>>*/ return [0] /*<<array.ml:48:16>>*/ ;
    if(0 > l)
      /*<<array.ml:49:16>>*/ return  /*<<array.ml:49:16>>*/ caml_call1
              /*<<array.ml:49:16>>*/ (Stdlib[1], cst_Array_init) /*<<array.ml:58:6>>*/ ;
    var
     res =
        /*<<array.ml:54:13>>*/  /*<<array.ml:54:13>>*/ caml_make_vect
         /*<<array.ml:54:13>>*/ (l,
          /*<<array.ml:54:22>>*/ caml_call1 /*<<array.ml:54:22>>*/ (f, 0)),
     _aE_ =  /*<<array.ml:55:3>>*/ l - 1 | 0,
     _aD_ =  /*<<array.ml:54:13>>*/ 1;
    if(_aE_ >= 1){
     var i = _aD_;
     for(;;){
       /*<<array.ml:56:5>>*/ res[1 + i] =
        /*<<array.ml:56:22>>*/ caml_call1 /*<<array.ml:56:22>>*/ (f, i);
      var _aF_ =  /*<<array.ml:56:5>>*/ i + 1 | 0;
      if(_aE_ === i) break;
      i = _aF_;
     }
    }
     /*<<array.ml:58:3>>*/ return res /*<<array.ml:58:3>>*/ ;
    /*<<array.ml:58:6>>*/ }
   function make_matrix(sx, sy, init){
     /*<<array.ml:62:2>>*/ if(sy < 0)
      /*<<array.ml:62:17>>*/  /*<<array.ml:62:17>>*/ caml_call1
       /*<<array.ml:62:17>>*/ (Stdlib[1], cst_Array_make_matrix);
    var
     res =
        /*<<array.ml:63:12>>*/  /*<<array.ml:63:12>>*/ caml_make_vect
         /*<<array.ml:63:12>>*/ (sx, [0]);
    if(0 < sy){
     var _aB_ = sx - 1 | 0, _aA_ =  /*<<array.ml:64:17>>*/ 0;
     if(_aB_ >= 0){
      var x = _aA_;
      for(;;){
       res[1 + x] =
         /*<<array.ml:66:23>>*/ caml_make_vect
          /*<<array.ml:66:23>>*/ (sy, init);
       var _aC_ =  /*<<array.ml:64:17>>*/ x + 1 | 0;
       if(_aB_ === x) break;
       x = _aC_;
      }
     }
    }
     /*<<array.ml:69:2>>*/ return res /*<<array.ml:69:2>>*/ ;
    /*<<array.ml:69:5>>*/ }
   function init_matrix(sx, sy, f){
     /*<<array.ml:73:2>>*/ if(sy < 0)
      /*<<array.ml:73:17>>*/  /*<<array.ml:73:17>>*/ caml_call1
       /*<<array.ml:73:17>>*/ (Stdlib[1], cst_Array_init_matrix);
    var
     res =
        /*<<array.ml:74:12>>*/  /*<<array.ml:74:12>>*/ caml_make_vect
         /*<<array.ml:74:12>>*/ (sx, [0]);
    if(0 < sy){
     var _av_ = sx - 1 | 0, _au_ =  /*<<array.ml:76:17>>*/ 0;
     if(_av_ >= 0){
      var x = _au_;
      for(;;){
       var
        row =
           /*<<array.ml:78:16>>*/  /*<<array.ml:78:16>>*/ caml_make_vect
            /*<<array.ml:78:16>>*/ (sy,
             /*<<array.ml:78:26>>*/ caml_call2
              /*<<array.ml:78:26>>*/ (f, x, 0)),
        _ax_ =  /*<<array.ml:79:6>>*/ sy - 1 | 0,
        _aw_ =  /*<<array.ml:78:16>>*/ 1;
       if(_ax_ >= 1){
        var y = _aw_;
        for(;;){
          /*<<array.ml:80:8>>*/ row[1 + y] =
           /*<<array.ml:80:25>>*/ caml_call2 /*<<array.ml:80:25>>*/ (f, x, y);
         var _az_ =  /*<<array.ml:80:8>>*/ y + 1 | 0;
         if(_ax_ === y) break;
         y = _az_;
        }
       }
       res[1 + x] = row;
       var _ay_ =  /*<<array.ml:76:17>>*/ x + 1 | 0;
       if(_av_ === x) break;
       x = _ay_;
      }
     }
    }
     /*<<array.ml:85:2>>*/ return res /*<<array.ml:85:2>>*/ ;
    /*<<array.ml:85:5>>*/ }
   function copy(a){
    var l = a.length - 1;
     /*<<array.ml:88:22>>*/ return 0 === l
            ? [0]
            :  /*<<array.ml:88:46>>*/ caml_array_sub
               /*<<array.ml:88:46>>*/ (a, 0, l) /*<<array.ml:88:62>>*/ ;
    /*<<array.ml:88:62>>*/ }
   function append(a1, a2){
    var l1 = a1.length - 1;
     /*<<array.ml:92:2>>*/ return 0 === l1
            ?  /*<<array.ml:92:17>>*/ copy /*<<array.ml:92:17>>*/ (a2)
            : 0
              === a2.length - 1
              ?  /*<<array.ml:93:29>>*/ caml_array_sub
                 /*<<array.ml:93:29>>*/ (a1, 0, l1)
              :  /*<<array.ml:94:7>>*/ runtime.caml_array_append
                 /*<<array.ml:94:7>>*/ (a1, a2) /*<<array.ml:94:24>>*/ ;
    /*<<array.ml:94:24>>*/ }
   function sub(a, ofs, len){
     /*<<array.ml:97:2>>*/ if
     (0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs)
      /*<<array.ml:99:7>>*/ return  /*<<array.ml:99:7>>*/ caml_array_sub
              /*<<array.ml:99:7>>*/ (a, ofs, len) /*<<array.ml:99:27>>*/ ;
     /*<<array.ml:98:7>>*/ return  /*<<array.ml:98:7>>*/ caml_call1
             /*<<array.ml:98:7>>*/ (Stdlib[1], cst_Array_sub) /*<<array.ml:99:27>>*/ ;
    /*<<array.ml:99:27>>*/ }
   function fill(a, ofs, len, v){
     /*<<array.ml:102:2>>*/ if
     (0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs)
      /*<<array.ml:104:7>>*/ return  /*<<array.ml:104:7>>*/ runtime.caml_array_fill
              /*<<array.ml:104:7>>*/ (a, ofs, len, v) /*<<array.ml:104:30>>*/ ;
     /*<<array.ml:103:7>>*/ return  /*<<array.ml:103:7>>*/ caml_call1
             /*<<array.ml:103:7>>*/ (Stdlib[1], cst_Array_fill) /*<<array.ml:104:30>>*/ ;
    /*<<array.ml:104:30>>*/ }
   function blit(a1, ofs1, a2, ofs2, len){
     /*<<array.ml:107:2>>*/ if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (a1.length - 1 - len | 0) >= ofs1
        && 0 <= ofs2 && (a2.length - 1 - len | 0) >= ofs2)
      /*<<array.ml:110:7>>*/ return  /*<<array.ml:110:7>>*/ runtime.caml_array_blit
              /*<<array.ml:110:7>>*/ (a1, ofs1, a2, ofs2, len) /*<<array.ml:110:38>>*/ ;
     /*<<array.ml:109:7>>*/ return  /*<<array.ml:109:7>>*/ caml_call1
             /*<<array.ml:109:7>>*/ (Stdlib[1], cst_Array_blit) /*<<array.ml:110:38>>*/ ;
    /*<<array.ml:110:38>>*/ }
   function iter(f, a){
    var _as_ = a.length - 2 | 0, _ar_ =  /*<<array.ml:113:2>>*/ 0;
    if(_as_ >= 0){
     var i = _ar_;
     for(;;){
       /*<<array.ml:113:31>>*/  /*<<array.ml:113:31>>*/ caml_call1
        /*<<array.ml:113:31>>*/ (f, a[1 + i]);
      var _at_ =  /*<<array.ml:113:31>>*/ i + 1 | 0;
      if(_as_ === i) break;
      i = _at_;
     }
    }
    return 0;
    /*<<array.ml:113:53>>*/ }
   function iter2(f, a, b){
     /*<<array.ml:116:2>>*/ if(a.length - 1 !== b.length - 1)
      /*<<array.ml:117:4>>*/ return  /*<<array.ml:117:4>>*/ caml_call1
              /*<<array.ml:117:4>>*/ (Stdlib[1],
              cst_Array_iter2_arrays_must_ha) /*<<array.ml:119:73>>*/ ;
    var _ap_ = a.length - 2 | 0, _ao_ =  /*<<array.ml:119:4>>*/ 0;
    if(_ap_ >= 0){
     var i = _ao_;
     for(;;){
       /*<<array.ml:119:33>>*/  /*<<array.ml:119:33>>*/ caml_call2
        /*<<array.ml:119:33>>*/ (f, a[1 + i], b[1 + i]);
      var _aq_ =  /*<<array.ml:119:33>>*/ i + 1 | 0;
      if(_ap_ === i) break;
      i = _aq_;
     }
    }
    return 0;
    /*<<array.ml:119:73>>*/ }
   function map(f, a){
    var l = a.length - 1;
     /*<<array.ml:123:2>>*/ if(0 === l)
      /*<<array.ml:123:16>>*/ return [0] /*<<array.ml:123:16>>*/ ;
    var
     r =
        /*<<array.ml:124:12>>*/  /*<<array.ml:124:12>>*/ caml_make_vect
         /*<<array.ml:124:12>>*/ (l,
          /*<<array.ml:124:21>>*/ caml_call1 /*<<array.ml:124:21>>*/ (f, a[1])),
     _am_ =  /*<<array.ml:125:4>>*/ l - 1 | 0,
     _al_ =  /*<<array.ml:124:12>>*/ 1;
    if(_am_ >= 1){
     var i = _al_;
     for(;;){
       /*<<array.ml:126:6>>*/ r[1 + i] =
        /*<<array.ml:126:21>>*/ caml_call1
         /*<<array.ml:126:21>>*/ (f, a[1 + i]);
      var _an_ =  /*<<array.ml:126:6>>*/ i + 1 | 0;
      if(_am_ === i) break;
      i = _an_;
     }
    }
     /*<<array.ml:128:4>>*/ return r /*<<array.ml:128:4>>*/ ;
    /*<<array.ml:129:5>>*/ }
   function map_inplace(f, a){
    var _aj_ = a.length - 2 | 0, _ai_ =  /*<<array.ml:132:2>>*/ 0;
    if(_aj_ >= 0){
     var i = _ai_;
     for(;;){
       /*<<array.ml:133:4>>*/ a[1 + i] =
        /*<<array.ml:133:19>>*/ caml_call1
         /*<<array.ml:133:19>>*/ (f, a[1 + i]);
      var _ak_ =  /*<<array.ml:133:4>>*/ i + 1 | 0;
      if(_aj_ === i) break;
      i = _ak_;
     }
    }
    return 0;
    /*<<array.ml:134:6>>*/ }
   function mapi_inplace(f, a){
    var _ag_ = a.length - 2 | 0, _af_ =  /*<<array.ml:137:2>>*/ 0;
    if(_ag_ >= 0){
     var i = _af_;
     for(;;){
       /*<<array.ml:138:4>>*/ a[1 + i] =
        /*<<array.ml:138:19>>*/ caml_call2
         /*<<array.ml:138:19>>*/ (f, i, a[1 + i]);
      var _ah_ =  /*<<array.ml:138:4>>*/ i + 1 | 0;
      if(_ag_ === i) break;
      i = _ah_;
     }
    }
    return 0;
    /*<<array.ml:139:6>>*/ }
   function map2(f, a, b){
    var la = a.length - 1, lb =  /*<<array.ml:143:2>>*/ b.length - 1;
    if(la !== lb)
      /*<<array.ml:145:4>>*/ return  /*<<array.ml:145:4>>*/ caml_call1
              /*<<array.ml:145:4>>*/ (Stdlib[1],
              cst_Array_map2_arrays_must_hav) /*<<array.ml:154:5>>*/ ;
    if(0 === la)  /*<<array.ml:147:19>>*/ return [0] /*<<array.ml:147:19>>*/ ;
    var
     r =
        /*<<array.ml:148:14>>*/  /*<<array.ml:148:14>>*/ caml_make_vect
         /*<<array.ml:148:14>>*/ (la,
          /*<<array.ml:148:24>>*/ caml_call2
           /*<<array.ml:148:24>>*/ (f, a[1], b[1])),
     _ad_ =  /*<<array.ml:149:6>>*/ la - 1 | 0,
     _ac_ =  /*<<array.ml:148:14>>*/ 1;
    if(_ad_ >= 1){
     var i = _ac_;
     for(;;){
       /*<<array.ml:150:8>>*/ r[1 + i] =
        /*<<array.ml:150:23>>*/ caml_call2
         /*<<array.ml:150:23>>*/ (f, a[1 + i], b[1 + i]);
      var _ae_ =  /*<<array.ml:150:8>>*/ i + 1 | 0;
      if(_ad_ === i) break;
      i = _ae_;
     }
    }
     /*<<array.ml:152:6>>*/ return r /*<<array.ml:152:6>>*/ ;
    /*<<array.ml:154:5>>*/ }
   function iteri(f, a){
    var _aa_ = a.length - 2 | 0, _$_ =  /*<<array.ml:157:2>>*/ 0;
    if(_aa_ >= 0){
     var i = _$_;
     for(;;){
       /*<<array.ml:157:31>>*/  /*<<array.ml:157:31>>*/ caml_call2
        /*<<array.ml:157:31>>*/ (f, i, a[1 + i]);
      var _ab_ =  /*<<array.ml:157:31>>*/ i + 1 | 0;
      if(_aa_ === i) break;
      i = _ab_;
     }
    }
    return 0;
    /*<<array.ml:157:56>>*/ }
   function mapi(f, a){
    var l = a.length - 1;
     /*<<array.ml:161:2>>*/ if(0 === l)
      /*<<array.ml:161:16>>*/ return [0] /*<<array.ml:161:16>>*/ ;
    var
     r =
        /*<<array.ml:162:12>>*/  /*<<array.ml:162:12>>*/ caml_make_vect
         /*<<array.ml:162:12>>*/ (l,
          /*<<array.ml:162:21>>*/ caml_call2
           /*<<array.ml:162:21>>*/ (f, 0, a[1])),
     _Z_ =  /*<<array.ml:163:4>>*/ l - 1 | 0,
     _Y_ =  /*<<array.ml:162:12>>*/ 1;
    if(_Z_ >= 1){
     var i = _Y_;
     for(;;){
       /*<<array.ml:164:6>>*/ r[1 + i] =
        /*<<array.ml:164:21>>*/ caml_call2
         /*<<array.ml:164:21>>*/ (f, i, a[1 + i]);
      var ___ =  /*<<array.ml:164:6>>*/ i + 1 | 0;
      if(_Z_ === i) break;
      i = ___;
     }
    }
     /*<<array.ml:166:4>>*/ return r /*<<array.ml:166:4>>*/ ;
    /*<<array.ml:167:5>>*/ }
   function to_list(a){
    var i$1 = a.length - 2 | 0, i = i$1, res = 0;
     /*<<array.ml:171:4>>*/ for(;;){
     if(0 > i)  /*<<array.ml:171:18>>*/ return res /*<<array.ml:171:18>>*/ ;
     var
      res$0 =  /*<<array.ml:171:42>>*/ [0, a[1 + i], res],
      i$0 =  /*<<array.ml:171:42>>*/ i - 1 | 0;
     i = i$0;
     res = res$0;
    }
    /*<<array.ml:172:26>>*/ }
   function list_length(accu, param){
    var accu$0 = accu, param$0 = param;
     /*<<array.ml:175:20>>*/ for(;;){
     if(! param$0)
       /*<<array.ml:176:10>>*/ return accu$0 /*<<array.ml:176:10>>*/ ;
     var t = param$0[2], accu$1 =  /*<<array.ml:177:12>>*/ accu$0 + 1 | 0;
     accu$0 = accu$1;
     param$0 = t;
    }
    /*<<array.ml:177:37>>*/ }
   function of_list(l){
     /*<<array.ml:179:14>>*/ if(! l)
      /*<<array.ml:180:10>>*/ return [0] /*<<array.ml:180:10>>*/ ;
    var
     tl = l[2],
     hd = l[1],
     a =
        /*<<array.ml:182:14>>*/  /*<<array.ml:182:14>>*/ caml_make_vect
         /*<<array.ml:182:14>>*/ ( /*<<array.ml:182:21>>*/ list_length
           /*<<array.ml:182:21>>*/ (0, l),
         hd),
     i = 1,
     param = tl;
     /*<<array.ml:183:19>>*/ for(;;){
     if(! param)  /*<<array.ml:183:6>>*/ return a /*<<array.ml:183:6>>*/ ;
     var tl$0 = param[2], hd$0 = param[1];
      /*<<array.ml:185:20>>*/ a[1 + i] = hd$0;
     var i$0 =  /*<<array.ml:183:6>>*/ i + 1 | 0;
     i = i$0;
     param = tl$0;
    }
    /*<<array.ml:186:15>>*/ }
   function fold_left(f, x, a){
    var
     r =  /*<<array.ml:189:10>>*/ [0, x],
     _W_ = a.length - 2 | 0,
     _V_ =  /*<<array.ml:189:10>>*/ 0;
    if(_W_ >= 0){
     var i = _V_;
     for(;;){
      r[1] =
        /*<<array.ml:191:9>>*/ caml_call2
         /*<<array.ml:191:9>>*/ (f, r[1], a[1 + i]);
      var _X_ =  /*<<array.ml:190:2>>*/ i + 1 | 0;
      if(_W_ === i) break;
      i = _X_;
     }
    }
    return r[1];
    /*<<array.ml:193:4>>*/ }
   function fold_left_map(f, acc, input_array){
    var len = input_array.length - 1;
     /*<<array.ml:197:2>>*/ if(0 === len)
      /*<<array.ml:197:18>>*/ return [0, acc, [0]] /*<<array.ml:197:18>>*/ ;
    var
     match =
        /*<<array.ml:198:19>>*/  /*<<array.ml:198:19>>*/ caml_call2
         /*<<array.ml:198:19>>*/ (f, acc, input_array[1]),
     elt = match[2],
     acc$0 = match[1],
     output_array =
        /*<<array.ml:199:23>>*/  /*<<array.ml:199:23>>*/ caml_make_vect
         /*<<array.ml:199:23>>*/ (len, elt),
     acc$1 =  /*<<array.ml:200:14>>*/ [0, acc$0],
     _T_ =  /*<<array.ml:201:4>>*/ len - 1 | 0,
     _S_ =  /*<<array.ml:200:14>>*/ 1;
    if(_T_ >= 1){
     var i = _S_;
     for(;;){
      var
       match$0 =
          /*<<array.ml:202:22>>*/  /*<<array.ml:202:22>>*/ caml_call2
           /*<<array.ml:202:22>>*/ (f, acc$1[1], input_array[1 + i]),
       elt$0 = match$0[2],
       acc$2 = match$0[1];
      acc$1[1] = acc$2;
       /*<<array.ml:204:6>>*/ output_array[1 + i] = elt$0;
      var _U_ =  /*<<array.ml:201:4>>*/ i + 1 | 0;
      if(_T_ === i) break;
      i = _U_;
     }
    }
     /*<<array.ml:206:4>>*/ return [0, acc$1[1], output_array] /*<<array.ml:206:4>>*/ ;
    /*<<array.ml:207:5>>*/ }
   function fold_right(f, a, x){
    var
     r =  /*<<array.ml:210:10>>*/ [0, x],
     _Q_ =  /*<<array.ml:211:2>>*/ a.length - 2 | 0;
    if(_Q_ >= 0){
     var i = _Q_;
     for(;;){
      r[1] =
        /*<<array.ml:212:9>>*/ caml_call2
         /*<<array.ml:212:9>>*/ (f, a[1 + i], r[1]);
      var _R_ =  /*<<array.ml:211:2>>*/ i - 1 | 0;
      if(0 === i) break;
      i = _R_;
     }
    }
    return r[1];
    /*<<array.ml:214:4>>*/ }
   function exists(p, a){
    var n = a.length - 1, i = 0;
     /*<<array.ml:219:4>>*/ for(;;){
     if(i === n)  /*<<array.ml:219:18>>*/ return 0 /*<<array.ml:219:18>>*/ ;
      /*<<array.ml:220:12>>*/ if
      ( /*<<array.ml:220:12>>*/ caml_call1
         /*<<array.ml:220:12>>*/ (p, a[1 + i]))
       /*<<array.ml:220:36>>*/ return 1 /*<<array.ml:220:36>>*/ ;
     var i$0 =  /*<<array.ml:221:9>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<array.ml:222:8>>*/ }
   function for_all(p, a){
    var n = a.length - 1, i = 0;
     /*<<array.ml:227:4>>*/ for(;;){
     if(i === n)  /*<<array.ml:227:18>>*/ return 1 /*<<array.ml:227:18>>*/ ;
      /*<<array.ml:228:12>>*/ if
      (!
        /*<<array.ml:228:12>>*/ caml_call1
         /*<<array.ml:228:12>>*/ (p, a[1 + i]))
       /*<<array.ml:229:9>>*/ return 0 /*<<array.ml:229:9>>*/ ;
     var i$0 =  /*<<array.ml:228:36>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<array.ml:230:8>>*/ }
   function for_all2(p, l1, l2){
    var n1 = l1.length - 1, n2 = l2.length - 1;
    if(n1 !== n2)
      /*<<array.ml:235:19>>*/ return  /*<<array.ml:235:19>>*/ caml_call1
              /*<<array.ml:235:19>>*/ (Stdlib[1], cst_Array_for_all2) /*<<array.ml:240:8>>*/ ;
    var i = 0;
     /*<<array.ml:237:4>>*/ for(;;){
     if(i === n1)  /*<<array.ml:237:19>>*/ return 1 /*<<array.ml:237:19>>*/ ;
      /*<<array.ml:238:12>>*/ if
      (!
        /*<<array.ml:238:12>>*/ caml_call2
         /*<<array.ml:238:12>>*/ (p, l1[1 + i], l2[1 + i]))
       /*<<array.ml:239:9>>*/ return 0 /*<<array.ml:239:9>>*/ ;
     var i$0 =  /*<<array.ml:238:55>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<array.ml:240:8>>*/ }
   function exists2(p, l1, l2){
    var n1 = l1.length - 1, n2 = l2.length - 1;
    if(n1 !== n2)
      /*<<array.ml:245:19>>*/ return  /*<<array.ml:245:19>>*/ caml_call1
              /*<<array.ml:245:19>>*/ (Stdlib[1], cst_Array_exists2) /*<<array.ml:250:8>>*/ ;
    var i = 0;
     /*<<array.ml:247:4>>*/ for(;;){
     if(i === n1)  /*<<array.ml:247:19>>*/ return 0 /*<<array.ml:247:19>>*/ ;
      /*<<array.ml:248:12>>*/ if
      ( /*<<array.ml:248:12>>*/ caml_call2
         /*<<array.ml:248:12>>*/ (p, l1[1 + i], l2[1 + i]))
       /*<<array.ml:248:55>>*/ return 1 /*<<array.ml:248:55>>*/ ;
     var i$0 =  /*<<array.ml:249:9>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<array.ml:250:8>>*/ }
   function mem(x, a){
    var n = a.length - 1, i = 0;
     /*<<array.ml:255:4>>*/ for(;;){
     if(i === n)  /*<<array.ml:255:18>>*/ return 0 /*<<array.ml:255:18>>*/ ;
      /*<<array.ml:256:12>>*/ if
      (0
       ===
         /*<<array.ml:256:12>>*/ runtime.caml_compare
          /*<<array.ml:256:12>>*/ (a[1 + i], x))
       /*<<array.ml:256:48>>*/ return 1 /*<<array.ml:256:48>>*/ ;
     var i$0 =  /*<<array.ml:257:9>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<array.ml:258:8>>*/ }
   function memq(x, a){
    var n = a.length - 1, i = 0;
     /*<<array.ml:263:4>>*/ for(;;){
     if(i === n)  /*<<array.ml:263:18>>*/ return 0 /*<<array.ml:263:18>>*/ ;
     if(x === a[1 + i])
       /*<<array.ml:264:39>>*/ return 1 /*<<array.ml:264:39>>*/ ;
     var i$0 =  /*<<array.ml:265:9>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<array.ml:266:8>>*/ }
   function find_opt(p, a){
    var n = a.length - 1, i = 0;
     /*<<array.ml:271:4>>*/ for(;;){
     if(i === n)  /*<<array.ml:271:18>>*/ return 0 /*<<array.ml:271:18>>*/ ;
     var x =  /*<<array.ml:273:14>>*/ a[1 + i];
      /*<<array.ml:274:9>>*/ if
      ( /*<<array.ml:274:9>>*/ caml_call1 /*<<array.ml:274:9>>*/ (p, x))
       /*<<array.ml:274:18>>*/ return [0, x] /*<<array.ml:274:18>>*/ ;
     var i$0 =  /*<<array.ml:275:11>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<array.ml:277:8>>*/ }
   function find_index(p, a){
    var n = a.length - 1, i = 0;
     /*<<array.ml:282:4>>*/ for(;;){
     if(i === n)  /*<<array.ml:282:18>>*/ return 0 /*<<array.ml:282:18>>*/ ;
      /*<<array.ml:283:12>>*/ if
      ( /*<<array.ml:283:12>>*/ caml_call1
         /*<<array.ml:283:12>>*/ (p, a[1 + i]))
       /*<<array.ml:283:36>>*/ return [0, i] /*<<array.ml:283:36>>*/ ;
     var i$0 =  /*<<array.ml:284:9>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<array.ml:285:8>>*/ }
   function find_map(f, a){
    var n = a.length - 1, i = 0;
     /*<<array.ml:290:4>>*/ for(;;){
     if(i === n)  /*<<array.ml:290:18>>*/ return 0 /*<<array.ml:290:18>>*/ ;
     var
      r =
         /*<<array.ml:292:12>>*/  /*<<array.ml:292:12>>*/ caml_call1
          /*<<array.ml:292:12>>*/ (f, a[1 + i]);
     if(r)  /*<<array.ml:294:23>>*/ return r /*<<array.ml:294:23>>*/ ;
     var i$0 =  /*<<array.ml:293:16>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<array.ml:296:8>>*/ }
   function find_mapi(f, a){
    var n = a.length - 1, i = 0;
     /*<<array.ml:301:4>>*/ for(;;){
     if(i === n)  /*<<array.ml:301:18>>*/ return 0 /*<<array.ml:301:18>>*/ ;
     var
      r =
         /*<<array.ml:303:12>>*/  /*<<array.ml:303:12>>*/ caml_call2
          /*<<array.ml:303:12>>*/ (f, i, a[1 + i]);
     if(r)  /*<<array.ml:305:23>>*/ return r /*<<array.ml:305:23>>*/ ;
     var i$0 =  /*<<array.ml:304:16>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<array.ml:307:8>>*/ }
   function split(x){
     /*<<array.ml:310:2>>*/ if
     ( /*<<array.ml:310:5>>*/ runtime.caml_equal
        /*<<array.ml:310:5>>*/ (x, [0]))
      /*<<array.ml:310:19>>*/ return [0, [0], [0]] /*<<array.ml:310:19>>*/ ;
    var
     match = x[1],
     b0 = match[2],
     a0 = match[1],
     n =  /*<<array.ml:313:4>>*/ x.length - 1,
     a =
        /*<<array.ml:314:12>>*/  /*<<array.ml:314:12>>*/ caml_make_vect
         /*<<array.ml:314:12>>*/ (n, a0),
     b =
        /*<<array.ml:315:12>>*/  /*<<array.ml:315:12>>*/ caml_make_vect
         /*<<array.ml:315:12>>*/ (n, b0),
     _O_ =  /*<<array.ml:316:4>>*/ n - 1 | 0,
     _N_ =  /*<<array.ml:315:12>>*/ 1;
    if(_O_ >= 1){
     var i = _N_;
     for(;;){
      var match$0 = x[1 + i], bi = match$0[2], ai = match$0[1];
       /*<<array.ml:318:6>>*/ a[1 + i] = ai;
       /*<<array.ml:319:6>>*/ b[1 + i] = bi;
      var _P_ =  /*<<array.ml:316:4>>*/ i + 1 | 0;
      if(_O_ === i) break;
      i = _P_;
     }
    }
     /*<<array.ml:321:4>>*/ return [0, a, b] /*<<array.ml:321:4>>*/ ;
    /*<<array.ml:322:5>>*/ }
   function combine(a, b){
    var na = a.length - 1, nb =  /*<<array.ml:326:2>>*/ b.length - 1;
    if(na !== nb)
      /*<<array.ml:327:19>>*/  /*<<array.ml:327:19>>*/ caml_call1
       /*<<array.ml:327:19>>*/ (Stdlib[1], cst_Array_combine);
    if(0 === na)  /*<<array.ml:328:17>>*/ return [0] /*<<array.ml:328:17>>*/ ;
    var
     x =
        /*<<array.ml:330:12>>*/  /*<<array.ml:330:12>>*/ caml_make_vect
         /*<<array.ml:330:12>>*/ (na, [0, a[1], b[1]]),
     _L_ =  /*<<array.ml:331:4>>*/ na - 1 | 0,
     _K_ =  /*<<array.ml:330:12>>*/ 1;
    if(_L_ >= 1){
     var i = _K_;
     for(;;){
      x[1 + i] = [0, a[1 + i], b[1 + i]];
      var _M_ =  /*<<array.ml:331:4>>*/ i + 1 | 0;
      if(_L_ === i) break;
      i = _M_;
     }
    }
     /*<<array.ml:334:4>>*/ return x /*<<array.ml:334:4>>*/ ;
    /*<<array.ml:335:5>>*/ }
   var
    Bottom =
       /*<<array.ml:337:0>>*/ [248,
       "Stdlib.Array.Bottom",
       runtime.caml_fresh_oo_id(0)],
    _a_ = [0, "array.ml", 369, 4];
   function sort(cmp, a){
    function maxson(l, i){
     var
      i31 = ((i + i | 0) + i | 0) + 1 | 0,
      x =  /*<<array.ml:341:12>>*/ [0, i31];
     if((i31 + 2 | 0) < l){
      var
       _D_ =  /*<<array.ml:342:22>>*/ i31 + 1 | 0,
       _E_ =  /*<<array.ml:343:25>>*/ caml_check_bound(a, _D_)[1 + _D_];
      if
       ( /*<<array.ml:343:9>>*/ caml_call2
          /*<<array.ml:343:9>>*/ (cmp, caml_check_bound(a, i31)[1 + i31], _E_)
        < 0)
       x[1] = i31 + 1 | 0;
      var
       _F_ =  /*<<array.ml:344:6>>*/ i31 + 2 | 0,
       _G_ =  /*<<array.ml:344:24>>*/ caml_check_bound(a, _F_)[1 + _F_],
       _H_ = x[1];
      if
       ( /*<<array.ml:344:9>>*/ caml_call2
          /*<<array.ml:344:9>>*/ (cmp, caml_check_bound(a, _H_)[1 + _H_], _G_)
        < 0)
       x[1] = i31 + 2 | 0;
      return x[1];
     }
     if((i31 + 1 | 0) < l){
      var
       _I_ = i31 + 1 | 0,
       _J_ =  /*<<array.ml:347:38>>*/ caml_check_bound(a, _I_)[1 + _I_];
       /*<<array.ml:347:22>>*/ if
       (0
        >
          /*<<array.ml:347:22>>*/ caml_call2
           /*<<array.ml:347:22>>*/ (cmp,
           caml_check_bound(a, i31)[1 + i31],
           _J_))
        /*<<array.ml:348:11>>*/ return i31 + 1 | 0 /*<<array.ml:348:11>>*/ ;
     }
     if(i31 < l)  /*<<array.ml:349:27>>*/ return i31 /*<<array.ml:349:27>>*/ ;
      /*<<array.ml:349:36>>*/ throw  /*<<array.ml:349:36>>*/ caml_maybe_attach_backtrace
             /*<<array.ml:349:36>>*/ ([0, Bottom, i], 1);
     /*<<array.ml:349:52>>*/ }
    var l = a.length - 1, _x_ = ((l + 1 | 0) / 3 | 0) - 1 | 0;
    if(_x_ >= 0){
     var i$6 = _x_;
     for(;;){
      var e$1 =  /*<<array.ml:378:50>>*/ caml_check_bound(a, i$6)[1 + i$6];
       /*<<array.ml:360:22>>*/ try{
       var i = i$6;
        /*<<array.ml:352:4>>*/ for(;;){
        var
         j =
            /*<<array.ml:352:12>>*/  /*<<array.ml:352:12>>*/ maxson
             /*<<array.ml:352:12>>*/ (l, i);
         /*<<array.ml:353:7>>*/ if
         (0
          >=
            /*<<array.ml:353:7>>*/ caml_call2
             /*<<array.ml:353:7>>*/ (cmp, caml_check_bound(a, j)[1 + j], e$1))
         break;
        var _u_ =  /*<<array.ml:354:14>>*/ caml_check_bound(a, j)[1 + j];
         /*<<array.ml:354:6>>*/ caml_check_bound(a, i)[1 + i] = _u_;
        i = j;
       }
        /*<<array.ml:356:13>>*/ caml_check_bound(a, i)[1 + i] = e$1;
      }
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(exn[1] !== Bottom) throw caml_maybe_attach_backtrace(exn, 0);
       var i$0 = exn[2];
        /*<<array.ml:360:61>>*/ caml_check_bound(a, i$0)[1 + i$0] = e$1;
      }
      var _C_ =  /*<<array.ml:378:38>>*/ i$6 - 1 | 0;
      if(0 === i$6) break;
      i$6 = _C_;
     }
    }
    var _y_ =  /*<<array.ml:379:2>>*/ l - 1 | 0;
    if(_y_ >= 2){
     var i$4 = _y_;
     for(;;){
      var e$0 =  /*<<array.ml:380:12>>*/ caml_check_bound(a, i$4)[1 + i$4];
       /*<<array.ml:381:4>>*/ a[1 + i$4] = caml_check_bound(a, 0)[1];
      var i$5 = 0;
       /*<<array.ml:366:19>>*/ try{
       var i$1 = i$5;
        /*<<array.ml:362:4>>*/ for(;;){
        var
         j$0 =
            /*<<array.ml:362:12>>*/  /*<<array.ml:362:12>>*/ maxson
             /*<<array.ml:362:12>>*/ (i$4, i$1),
         _v_ =  /*<<array.ml:363:12>>*/ caml_check_bound(a, j$0)[1 + j$0];
         /*<<array.ml:363:4>>*/ caml_check_bound(a, i$1)[1 + i$1] = _v_;
        i$1 = j$0;
       }
      }
      catch(exn){
       var exn$0 = caml_wrap_exception(exn);
       if(exn$0[1] !== Bottom) throw caml_maybe_attach_backtrace(exn$0, 0);
       var i$2 = exn$0[2];
       a:
       {
        b:
        {
         var i$3 = i$2;
          /*<<array.ml:368:4>>*/ for(;;){
          var father = (i$3 - 1 | 0) / 3 | 0;
          if(i$3 === father)
            /*<<array.ml:369:4>>*/ throw  /*<<array.ml:369:4>>*/ caml_maybe_attach_backtrace
                   /*<<array.ml:369:4>>*/ ([0, Assert_failure, _a_], 1);
           /*<<array.ml:370:7>>*/ if
           (0
            <=
              /*<<array.ml:370:7>>*/ caml_call2
               /*<<array.ml:370:7>>*/ (cmp,
               caml_check_bound(a, father)[1 + father],
               e$0))
           break;
          var
           _w_ =
              /*<<array.ml:371:14>>*/ caml_check_bound(a, father)[1 + father];
           /*<<array.ml:371:6>>*/ caml_check_bound(a, i$3)[1 + i$3] = _w_;
          if(0 >= father) break b;
          i$3 = father;
         }
          /*<<array.ml:373:13>>*/ caml_check_bound(a, i$3)[1 + i$3] = e$0;
         break a;
        }
         /*<<array.ml:372:49>>*/ caml_check_bound(a, 0)[1] = e$0;
       }
       var _B_ =  /*<<array.ml:379:2>>*/ i$4 - 1 | 0;
       if(2 === i$4) break;
       i$4 = _B_;
      }
     }
    }
    var _z_ = 1 < l ? 1 : 0;
    if(_z_){
     var e =  /*<<array.ml:384:25>>*/ caml_check_bound(a, 1)[2];
      /*<<array.ml:384:38>>*/ a[2] = caml_check_bound(a, 0)[1];
      /*<<array.ml:384:57>>*/ a[1] = e;
     var _A_ = 0;
    }
    else
     var _A_ = _z_;
     /*<<array.ml:384:57>>*/ return _A_ /*<<array.ml:384:57>>*/ ;
    /*<<array.ml:384:67>>*/ }
   function stable_sort(cmp, a){
    function merge(src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs){
     var
      src1r = src1ofs + src1len | 0,
      src2r = src2ofs + src2len | 0,
      s2$1 =
         /*<<array.ml:407:44>>*/ caml_check_bound(src2, src2ofs)[1 + src2ofs],
      s1$1 =
         /*<<array.ml:407:20>>*/ caml_check_bound(a, src1ofs)[1 + src1ofs],
      i1 = src1ofs,
      s1 = s1$1,
      i2 = src2ofs,
      s2 = s2$1,
      d = dstofs;
      /*<<array.ml:392:6>>*/ for(;;)
       /*<<array.ml:392:9>>*/ if
       (0
        <
          /*<<array.ml:392:9>>*/ caml_call2
           /*<<array.ml:392:9>>*/ (cmp, s1, s2)){
        /*<<array.ml:400:8>>*/ caml_check_bound(dst, d)[1 + d] = s2;
       var i2$0 =  /*<<array.ml:400:8>>*/ i2 + 1 | 0;
       if(i2$0 >= src2r)
         /*<<array.ml:106:9>>*/ return  /*<<array.ml:106:9>>*/ blit
                 /*<<array.ml:106:9>>*/ (a,
                 i1,
                 dst,
                 d + 1 | 0,
                 src1r - i1 | 0) /*<<array.ml:407:70>>*/ ;
       var
        d$0 =  /*<<array.ml:403:10>>*/ d + 1 | 0,
        s2$0 =  /*<<array.ml:403:24>>*/ caml_check_bound(src2, i2$0)[1 + i2$0];
       i2 = i2$0;
       s2 = s2$0;
       d = d$0;
      }
      else{
        /*<<array.ml:393:8>>*/ caml_check_bound(dst, d)[1 + d] = s1;
       var i1$0 =  /*<<array.ml:393:8>>*/ i1 + 1 | 0;
       if(i1$0 >= src1r)
         /*<<array.ml:106:9>>*/ return  /*<<array.ml:106:9>>*/ blit
                 /*<<array.ml:106:9>>*/ (src2,
                 i2,
                 dst,
                 d + 1 | 0,
                 src2r - i2 | 0) /*<<array.ml:407:70>>*/ ;
       var
        d$1 =  /*<<array.ml:396:10>>*/ d + 1 | 0,
        s1$0 =  /*<<array.ml:396:18>>*/ caml_check_bound(a, i1$0)[1 + i1$0];
       i1 = i1$0;
       s1 = s1$0;
       d = d$1;
      }
     /*<<array.ml:407:70>>*/ }
    function isortto(srcofs, dst, dstofs, len){
     var _m_ = len - 1 | 0, _l_ =  /*<<array.ml:410:4>>*/ 0;
     if(_m_ >= 0){
      var i = _l_;
      for(;;){
       var
        _n_ = srcofs + i | 0,
        e =  /*<<array.ml:411:14>>*/ caml_check_bound(a, _n_)[1 + _n_],
        j =  /*<<array.ml:412:14>>*/ [0, (dstofs + i | 0) - 1 | 0];
       for(;;){
        if(dstofs > j[1]) break;
        var _o_ = j[1];
         /*<<array.ml:413:29>>*/ if
         (0
          >=
            /*<<array.ml:413:29>>*/ caml_call2
             /*<<array.ml:413:29>>*/ (cmp,
             caml_check_bound(dst, _o_)[1 + _o_],
             e))
         break;
        var
         _p_ = j[1],
         _q_ =  /*<<array.ml:414:25>>*/ caml_check_bound(dst, _p_)[1 + _p_],
         _r_ = j[1] + 1 | 0;
         /*<<array.ml:414:8>>*/ caml_check_bound(dst, _r_)[1 + _r_] = _q_;
        j[1]--;
       }
       var _s_ = j[1] + 1 | 0;
        /*<<array.ml:417:6>>*/ caml_check_bound(dst, _s_)[1 + _s_] = e;
       var _t_ =  /*<<array.ml:410:4>>*/ i + 1 | 0;
       if(_m_ === i) break;
       i = _t_;
      }
     }
     return 0;
     /*<<array.ml:418:8>>*/ }
    function sortto(srcofs, dst, dstofs, len){
      /*<<array.ml:421:4>>*/ if(len <= 5)
       /*<<array.ml:421:26>>*/ return  /*<<array.ml:421:26>>*/ isortto
               /*<<array.ml:421:26>>*/ (srcofs, dst, dstofs, len) /*<<array.ml:427:7>>*/ ;
     var l1 = len / 2 | 0, l2 = len - l1 | 0;
      /*<<array.ml:424:6>>*/  /*<<array.ml:424:6>>*/ sortto
       /*<<array.ml:424:6>>*/ (srcofs + l1 | 0, dst, dstofs + l1 | 0, l2);
      /*<<array.ml:425:6>>*/  /*<<array.ml:425:6>>*/ sortto
       /*<<array.ml:425:6>>*/ (srcofs, a, srcofs + l2 | 0, l1);
      /*<<array.ml:425:6>>*/ return  /*<<array.ml:425:6>>*/ merge
              /*<<array.ml:425:6>>*/ (srcofs + l2 | 0,
              l1,
              dst,
              dstofs + l1 | 0,
              l2,
              dst,
              dstofs) /*<<array.ml:427:7>>*/ ;
     /*<<array.ml:427:7>>*/ }
    var l = a.length - 1;
    if(l <= 5)
      /*<<array.ml:430:22>>*/ return  /*<<array.ml:430:22>>*/ isortto
              /*<<array.ml:430:22>>*/ (0, a, 0, l) /*<<array.ml:437:5>>*/ ;
    var
     l1 = l / 2 | 0,
     l2 = l - l1 | 0,
     t =
        /*<<array.ml:433:12>>*/  /*<<array.ml:433:12>>*/ caml_make_vect
         /*<<array.ml:433:12>>*/ (l2, caml_check_bound(a, 0)[1]);
     /*<<array.ml:434:4>>*/  /*<<array.ml:434:4>>*/ sortto
      /*<<array.ml:434:4>>*/ (l1, t, 0, l2);
     /*<<array.ml:435:4>>*/  /*<<array.ml:435:4>>*/ sortto
      /*<<array.ml:435:4>>*/ (0, a, l2, l1);
     /*<<array.ml:435:4>>*/ return  /*<<array.ml:435:4>>*/ merge
             /*<<array.ml:435:4>>*/ (l2, l1, t, 0, l2, a, 0) /*<<array.ml:437:5>>*/ ;
    /*<<array.ml:437:5>>*/ }
   function shuffle(rand, a){
    var _j_ = a.length - 2 | 0;
    if(_j_ >= 1){
     var i = _j_;
     for(;;){
      var
       j =
          /*<<array.ml:444:12>>*/  /*<<array.ml:444:12>>*/ caml_call1
           /*<<array.ml:444:12>>*/ (rand, i + 1 | 0),
       v =  /*<<array.ml:445:12>>*/ a[1 + i];
       /*<<array.ml:446:4>>*/ a[1 + i] = caml_check_bound(a, j)[1 + j];
       /*<<array.ml:447:4>>*/ a[1 + j] = v;
      var _k_ = i - 1 | 0;
      if(1 === i) break;
      i = _k_;
     }
    }
    return 0;
    /*<<array.ml:448:6>>*/ }
   function to_seq(a){
    function aux(i, param){
      /*<<array.ml:454:4>>*/ if(i >= a.length - 1)
       /*<<array.ml:458:9>>*/ return 0 /*<<array.ml:458:9>>*/ ;
     var
      x =  /*<<array.ml:456:14>>*/ a[1 + i],
      _h_ =  /*<<array.ml:456:14>>*/ i + 1 | 0;
      /*<<array.ml:457:6>>*/ return [0,
             x,
             function(_i_){ /*<<?>>*/ return aux(_h_, _i_);}] /*<<array.ml:457:6>>*/ ;
     /*<<array.ml:458:16>>*/ }
    var _f_ =  /*<<array.ml:460:2>>*/ 0;
     /*<<array.ml:460:2>>*/ return function(_g_){
      /*<<?>>*/ return aux(_f_, _g_);} /*<<array.ml:460:2>>*/ ;
    /*<<array.ml:460:7>>*/ }
   function to_seqi(a){
    function aux(i, param){
      /*<<array.ml:464:4>>*/ if(i >= a.length - 1)
       /*<<array.ml:468:9>>*/ return 0 /*<<array.ml:468:9>>*/ ;
     var
      x =  /*<<array.ml:466:14>>*/ a[1 + i],
      _d_ =  /*<<array.ml:466:14>>*/ i + 1 | 0;
      /*<<array.ml:467:6>>*/ return [0,
             [0, i, x],
             function(_e_){ /*<<?>>*/ return aux(_d_, _e_);}] /*<<array.ml:467:6>>*/ ;
     /*<<array.ml:468:16>>*/ }
    var _b_ =  /*<<array.ml:470:2>>*/ 0;
     /*<<array.ml:470:2>>*/ return function(_c_){
      /*<<?>>*/ return aux(_b_, _c_);} /*<<array.ml:470:2>>*/ ;
    /*<<array.ml:470:7>>*/ }
   function of_seq(i$2){
    var
     l =
        /*<<array.ml:484:10>>*/  /*<<array.ml:484:10>>*/ caml_call3
         /*<<array.ml:484:10>>*/ (Stdlib_Seq[5],
         function(acc, x){
           /*<<array.ml:484:38>>*/ return [0, x, acc] /*<<array.ml:484:38>>*/ ;
          /*<<array.ml:484:44>>*/ },
         0,
         i$2);
    if(! l)  /*<<array.ml:473:10>>*/ return [0] /*<<array.ml:473:10>>*/ ;
    var
     tl = l[2],
     hd = l[1],
     len =
        /*<<array.ml:475:16>>*/  /*<<array.ml:475:16>>*/ list_length
         /*<<array.ml:475:16>>*/ (0, l),
     a =
        /*<<array.ml:476:14>>*/  /*<<array.ml:476:14>>*/ caml_make_vect
         /*<<array.ml:476:14>>*/ (len, hd),
     i$1 =  /*<<array.ml:475:16>>*/ len - 2 | 0,
     i = i$1,
     param = tl;
     /*<<array.ml:477:19>>*/ for(;;){
     if(! param)  /*<<array.ml:477:6>>*/ return a /*<<array.ml:477:6>>*/ ;
     var tl$0 = param[2], hd$0 = param[1];
      /*<<array.ml:479:20>>*/ a[1 + i] = hd$0;
     var i$0 =  /*<<array.ml:477:6>>*/ i - 1 | 0;
     i = i$0;
     param = tl$0;
    }
    /*<<array.ml:485:15>>*/ }
   var
    Stdlib_Array =
      [0,
       init,
       make_matrix,
       init_matrix,
       append,
       runtime.caml_array_concat,
       sub,
       copy,
       fill,
       blit,
       to_list,
       of_list,
       iter,
       iteri,
       map,
       map_inplace,
       mapi,
       mapi_inplace,
       fold_left,
       fold_left_map,
       fold_right,
       iter2,
       map2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find_opt,
       find_index,
       find_map,
       find_mapi,
       split,
       combine,
       sort,
       stable_sort,
       stable_sort,
       shuffle,
       to_seq,
       to_seqi,
       of_seq,
       Floatarray];
   runtime.caml_register_global(16, Stdlib_Array, "Stdlib__Array");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Float
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__List, Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst_Float_array_blit$1 =  /*<<?>>*/ "Float.array.blit",
    cst_float_ml =  /*<<?>>*/ "float.ml",
    caml_check_bound =  /*<<?>>*/ runtime.caml_check_bound,
    caml_float_compare =  /*<<?>>*/ runtime.caml_float_compare,
    caml_floatarray_blit =  /*<<?>>*/ runtime.caml_floatarray_blit,
    caml_floatarray_create =  /*<<?>>*/ runtime.caml_floatarray_create,
    caml_hash =  /*<<?>>*/ runtime.caml_hash,
    caml_make_vect =  /*<<?>>*/ runtime.caml_make_vect,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_nextafter_float =  /*<<?>>*/ runtime.caml_nextafter_float,
    caml_signbit_float =  /*<<?>>*/ runtime.caml_signbit_float,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    infinity = Stdlib[22],
    neg_infinity = Stdlib[23],
    nan = Stdlib[24],
    signaling_nan =
       /*<<float.ml:38:20>>*/  /*<<float.ml:38:20>>*/ runtime.caml_int64_float_of_bits
        /*<<float.ml:38:20>>*/ (runtime.caml_int64_create_lo_mi_hi
         (1, 0, 32752));
   function is_finite(x){
     /*<<float.ml:39:27>>*/ return x - x === 0. ? 1 : 0 /*<<float.ml:39:27>>*/ ;
    /*<<float.ml:39:38>>*/ }
   function is_infinite(x){
     /*<<float.ml:40:29>>*/ return 1. / x === 0. ? 1 : 0 /*<<float.ml:40:29>>*/ ;
    /*<<float.ml:40:41>>*/ }
   function is_nan(x){
     /*<<float.ml:41:24>>*/ return x !== x ? 1 : 0;
    /*<<float.ml:41:30>>*/ }
   var
    max_float = Stdlib[25],
    min_float = Stdlib[26],
    epsilon = Stdlib[27],
    of_string_opt = Stdlib[36],
    to_string = Stdlib[35],
    cst_Float_Array_init = "Float.Array.init",
    cst_Float_Array_make_matrix = "Float.Array.make_matrix",
    cst_Float_Array_init_matrix = "Float.Array.init_matrix",
    cst_Float_Array_concat = "Float.Array.concat",
    _a_ = [0, cst_float_ml, 254, 14],
    cst_Float_Array_sub = "Float.Array.sub",
    cst_Float_Array_fill = "Float.Array.fill",
    cst_Float_array_blit = cst_Float_array_blit$1,
    cst_Float_array_blit$0 = cst_Float_array_blit$1,
    cst_Float_Array_iter2_arrays_m =
      "Float.Array.iter2: arrays must have the same length",
    cst_Float_Array_map2_arrays_mu =
      "Float.Array.map2: arrays must have the same length";
   function is_integer(x){
    var
     _aX_ =
       x
        ===
          /*<<float.ml:116:23>>*/ runtime.caml_trunc_float
           /*<<float.ml:116:23>>*/ (x)
        ? 1
        : 0;
    return _aX_
            ?  /*<<float.ml:39:14>>*/ is_finite /*<<float.ml:39:14>>*/ (x)
            : _aX_ /*<<float.ml:116:45>>*/ ;
    /*<<float.ml:116:45>>*/ }
   function succ(x){
     /*<<float.ml:121:13>>*/ return  /*<<float.ml:121:13>>*/ caml_nextafter_float
             /*<<float.ml:121:13>>*/ (x, infinity) /*<<float.ml:121:34>>*/ ;
    /*<<float.ml:121:34>>*/ }
   function pred(x){
     /*<<float.ml:122:13>>*/ return  /*<<float.ml:122:13>>*/ caml_nextafter_float
             /*<<float.ml:122:13>>*/ (x, neg_infinity) /*<<float.ml:122:38>>*/ ;
    /*<<float.ml:122:38>>*/ }
   function equal(x, y){
     /*<<float.ml:136:16>>*/ return 0 === caml_float_compare(x, y) ? 1 : 0;
    /*<<float.ml:136:31>>*/ }
   function min(x, y){
    a:
    if(! (x < y)){
      /*<<float.ml:139:18>>*/ if
      (!
        /*<<float.ml:139:18>>*/ caml_signbit_float /*<<float.ml:139:18>>*/ (y)
       &&
         /*<<float.ml:139:34>>*/ caml_signbit_float
          /*<<float.ml:139:34>>*/ (x))
      break a;
      /*<<float.ml:141:10>>*/ return x !== x ? x : y /*<<float.ml:141:32>>*/ ;
    }
     /*<<float.ml:140:7>>*/ return y !== y ? y : x /*<<float.ml:141:32>>*/ ;
    /*<<float.ml:141:32>>*/ }
   function max(x, y){
    a:
    if(! (x < y)){
      /*<<float.ml:144:18>>*/ if
      (!
        /*<<float.ml:144:18>>*/ caml_signbit_float /*<<float.ml:144:18>>*/ (y)
       &&
         /*<<float.ml:144:34>>*/ caml_signbit_float
          /*<<float.ml:144:34>>*/ (x))
      break a;
      /*<<float.ml:146:10>>*/ return y !== y ? y : x /*<<float.ml:146:32>>*/ ;
    }
     /*<<float.ml:145:7>>*/ return x !== x ? x : y /*<<float.ml:146:32>>*/ ;
    /*<<float.ml:146:32>>*/ }
   function min_max(x, y){
     /*<<float.ml:149:2>>*/ if(x === x && y === y){
     a:
     if(! (x < y)){
       /*<<float.ml:150:23>>*/ if
       (!
         /*<<float.ml:150:23>>*/ caml_signbit_float
          /*<<float.ml:150:23>>*/ (y)
        &&
          /*<<float.ml:150:39>>*/ caml_signbit_float
           /*<<float.ml:150:39>>*/ (x))
       break a;
       /*<<float.ml:150:68>>*/ return [0, y, x] /*<<float.ml:150:68>>*/ ;
     }
      /*<<float.ml:150:56>>*/ return [0, x, y] /*<<float.ml:150:56>>*/ ;
    }
     /*<<float.ml:149:31>>*/ return [0, nan, nan] /*<<float.ml:149:31>>*/ ;
    /*<<float.ml:150:74>>*/ }
   function min_num(x, y){
    a:
    if(! (x < y)){
      /*<<float.ml:153:18>>*/ if
      (!
        /*<<float.ml:153:18>>*/ caml_signbit_float /*<<float.ml:153:18>>*/ (y)
       &&
         /*<<float.ml:153:34>>*/ caml_signbit_float
          /*<<float.ml:153:34>>*/ (x))
      break a;
      /*<<float.ml:155:10>>*/ return y !== y ? x : y /*<<float.ml:155:32>>*/ ;
    }
     /*<<float.ml:154:7>>*/ return x !== x ? y : x /*<<float.ml:155:32>>*/ ;
    /*<<float.ml:155:32>>*/ }
   function max_num(x, y){
    a:
    if(! (x < y)){
      /*<<float.ml:158:18>>*/ if
      (!
        /*<<float.ml:158:18>>*/ caml_signbit_float /*<<float.ml:158:18>>*/ (y)
       &&
         /*<<float.ml:158:34>>*/ caml_signbit_float
          /*<<float.ml:158:34>>*/ (x))
      break a;
      /*<<float.ml:160:10>>*/ return x !== x ? y : x /*<<float.ml:160:32>>*/ ;
    }
     /*<<float.ml:159:7>>*/ return y !== y ? x : y /*<<float.ml:160:32>>*/ ;
    /*<<float.ml:160:32>>*/ }
   function min_max_num(x, y){
     /*<<float.ml:163:2>>*/ if(x !== x)
      /*<<float.ml:163:19>>*/ return [0, y, y] /*<<float.ml:163:19>>*/ ;
     /*<<float.ml:164:10>>*/ if(y !== y)
      /*<<float.ml:164:24>>*/ return [0, x, x] /*<<float.ml:164:24>>*/ ;
    a:
    if(! (x < y)){
      /*<<float.ml:165:23>>*/ if
      (!
        /*<<float.ml:165:23>>*/ caml_signbit_float /*<<float.ml:165:23>>*/ (y)
       &&
         /*<<float.ml:165:39>>*/ caml_signbit_float
          /*<<float.ml:165:39>>*/ (x))
      break a;
      /*<<float.ml:165:67>>*/ return [0, y, x] /*<<float.ml:165:67>>*/ ;
    }
     /*<<float.ml:165:56>>*/ return [0, x, y] /*<<float.ml:165:56>>*/ ;
    /*<<float.ml:165:72>>*/ }
   function seeded_hash(seed, x){
     /*<<float.ml:169:25>>*/ return  /*<<float.ml:169:25>>*/ caml_hash
             /*<<float.ml:169:25>>*/ (10, 100, seed, x) /*<<float.ml:169:56>>*/ ;
    /*<<float.ml:169:56>>*/ }
   function hash(x){
     /*<<float.ml:170:13>>*/ return  /*<<float.ml:170:13>>*/ caml_hash
             /*<<float.ml:170:13>>*/ (10, 100, 0, x) /*<<float.ml:170:41>>*/ ;
    /*<<float.ml:170:41>>*/ }
   function unsafe_fill(a, ofs, len, v){
    var _aV_ = (ofs + len | 0) - 1 | 0;
    if(_aV_ >= ofs){
     var i = ofs;
     for(;;){
       /*<<float.ml:184:36>>*/ a[1 + i] = v;
      var _aW_ =  /*<<float.ml:184:36>>*/ i + 1 | 0;
      if(_aV_ === i) break;
      i = _aW_;
     }
    }
    return 0;
    /*<<float.ml:184:57>>*/ }
   function check(a, ofs, len, msg){
    var _aR_ = ofs < 0 ? 1 : 0;
    if(_aR_)
     var _aS_ = _aR_;
    else{
     var _aT_ = len < 0 ? 1 : 0;
     if(_aT_)
      var _aS_ = _aT_;
     else
      var
       _aU_ = (ofs + len | 0) < 0 ? 1 : 0,
       _aS_ = _aU_ || (a.length - 1 < (ofs + len | 0) ? 1 : 0);
    }
    return _aS_
            ?  /*<<float.ml:191:6>>*/ caml_call1
               /*<<float.ml:191:6>>*/ (Stdlib[1], msg)
            : _aS_ /*<<float.ml:191:21>>*/ ;
    /*<<float.ml:191:21>>*/ }
   function make(n, v){
    var
     result =
        /*<<float.ml:194:17>>*/  /*<<float.ml:194:17>>*/ caml_floatarray_create
         /*<<float.ml:194:17>>*/ (n);
     /*<<float.ml:195:4>>*/  /*<<float.ml:195:4>>*/ unsafe_fill
      /*<<float.ml:195:4>>*/ (result, 0, n, v);
     /*<<float.ml:195:4>>*/ return result /*<<float.ml:195:4>>*/ ;
    /*<<float.ml:196:10>>*/ }
   function init(l, f){
     /*<<float.ml:199:4>>*/ if(0 > l)
      /*<<float.ml:199:18>>*/ return  /*<<float.ml:199:18>>*/ caml_call1
              /*<<float.ml:199:18>>*/ (Stdlib[1], cst_Float_Array_init) /*<<float.ml:205:9>>*/ ;
    var
     res =
        /*<<float.ml:201:16>>*/  /*<<float.ml:201:16>>*/ caml_floatarray_create
         /*<<float.ml:201:16>>*/ (l),
     _aP_ =  /*<<float.ml:202:6>>*/ l - 1 | 0,
     _aO_ =  /*<<float.ml:201:16>>*/ 0;
    if(_aP_ >= 0){
     var i = _aO_;
     for(;;){
       /*<<float.ml:203:8>>*/ res[1 + i] =
        /*<<float.ml:203:25>>*/ caml_call1 /*<<float.ml:203:25>>*/ (f, i);
      var _aQ_ =  /*<<float.ml:203:8>>*/ i + 1 | 0;
      if(_aP_ === i) break;
      i = _aQ_;
     }
    }
     /*<<float.ml:205:6>>*/ return res /*<<float.ml:205:6>>*/ ;
    /*<<float.ml:205:9>>*/ }
   function make_matrix(sx, sy, v){
     /*<<float.ml:209:4>>*/ if(sy < 0)
      /*<<float.ml:209:19>>*/  /*<<float.ml:209:19>>*/ caml_call1
       /*<<float.ml:209:19>>*/ (Stdlib[1], cst_Float_Array_make_matrix);
    var
     res =
        /*<<float.ml:210:14>>*/  /*<<float.ml:210:14>>*/ caml_make_vect
         /*<<float.ml:210:14>>*/ (sx,
          /*<<float.ml:210:28>>*/ caml_floatarray_create
           /*<<float.ml:210:28>>*/ (0));
    if(0 < sy){
     var _aM_ = sx - 1 | 0, _aL_ =  /*<<float.ml:211:19>>*/ 0;
     if(_aM_ >= 0){
      var x = _aL_;
      for(;;){
        /*<<float.ml:213:8>>*/ res[1 + x] =
         /*<<float.ml:213:31>>*/ make /*<<float.ml:213:31>>*/ (sy, v);
       var _aN_ =  /*<<float.ml:213:8>>*/ x + 1 | 0;
       if(_aM_ === x) break;
       x = _aN_;
      }
     }
    }
     /*<<float.ml:216:4>>*/ return res /*<<float.ml:216:4>>*/ ;
    /*<<float.ml:216:7>>*/ }
   function init_matrix(sx, sy, f){
     /*<<float.ml:220:4>>*/ if(sy < 0)
      /*<<float.ml:220:19>>*/  /*<<float.ml:220:19>>*/ caml_call1
       /*<<float.ml:220:19>>*/ (Stdlib[1], cst_Float_Array_init_matrix);
    var
     res =
        /*<<float.ml:221:14>>*/  /*<<float.ml:221:14>>*/ caml_make_vect
         /*<<float.ml:221:14>>*/ (sx,
          /*<<float.ml:221:28>>*/ caml_floatarray_create
           /*<<float.ml:221:28>>*/ (0));
    if(0 < sy){
     var _aG_ = sx - 1 | 0, _aF_ =  /*<<float.ml:222:19>>*/ 0;
     if(_aG_ >= 0){
      var x = _aF_;
      for(;;){
       var
        row =
           /*<<float.ml:224:18>>*/  /*<<float.ml:224:18>>*/ caml_floatarray_create
            /*<<float.ml:224:18>>*/ (sy),
        _aI_ =  /*<<float.ml:225:8>>*/ sy - 1 | 0,
        _aH_ =  /*<<float.ml:224:18>>*/ 0;
       if(_aI_ >= 0){
        var y = _aH_;
        for(;;){
          /*<<float.ml:226:10>>*/ row[1 + y] =
           /*<<float.ml:226:27>>*/ caml_call2
            /*<<float.ml:226:27>>*/ (f, x, y);
         var _aK_ =  /*<<float.ml:226:10>>*/ y + 1 | 0;
         if(_aI_ === y) break;
         y = _aK_;
        }
       }
        /*<<float.ml:228:8>>*/ res[1 + x] = row;
       var _aJ_ =  /*<<float.ml:222:19>>*/ x + 1 | 0;
       if(_aG_ === x) break;
       x = _aJ_;
      }
     }
    }
     /*<<float.ml:231:4>>*/ return res /*<<float.ml:231:4>>*/ ;
    /*<<float.ml:231:7>>*/ }
   function append(a1, a2){
    var
     l1 = a1.length - 1,
     l2 =  /*<<float.ml:235:4>>*/ a2.length - 1,
     result =
        /*<<float.ml:236:17>>*/  /*<<float.ml:236:17>>*/ caml_floatarray_create
         /*<<float.ml:236:17>>*/ (l1 + l2 | 0);
     /*<<float.ml:237:4>>*/  /*<<float.ml:237:4>>*/ caml_floatarray_blit
      /*<<float.ml:237:4>>*/ (a1, 0, result, 0, l1);
     /*<<float.ml:238:4>>*/  /*<<float.ml:238:4>>*/ caml_floatarray_blit
      /*<<float.ml:238:4>>*/ (a2, 0, result, l1, l2);
     /*<<float.ml:238:4>>*/ return result /*<<float.ml:238:4>>*/ ;
    /*<<float.ml:239:10>>*/ }
   function concat(l){
    var acc = 0, param = l;
     /*<<float.ml:245:22>>*/ for(;;){
     if(! param) break;
     var
      tl = param[2],
      hd = param[1],
      x = hd.length - 1 + acc | 0,
      acc$0 =
        acc <= x
         ? x
         :  /*<<float.ml:243:26>>*/ caml_call1
            /*<<float.ml:243:26>>*/ (Stdlib[1], cst_Float_Array_concat);
     acc = acc$0;
     param = tl;
    }
    var
     result =
        /*<<float.ml:251:17>>*/  /*<<float.ml:251:17>>*/ caml_floatarray_create
         /*<<float.ml:251:17>>*/ (acc),
     l$0 = l,
     i = 0;
     /*<<float.ml:253:6>>*/ for(;;){
     if(! l$0){
      if(i === acc)
        /*<<float.ml:260:4>>*/ return result /*<<float.ml:260:4>>*/ ;
       /*<<float.ml:254:14>>*/ throw  /*<<float.ml:254:14>>*/ caml_maybe_attach_backtrace
              /*<<float.ml:254:14>>*/ ([0, Assert_failure, _a_], 1);
     }
     var
      tl$0 = l$0[2],
      hd$0 = l$0[1],
      hlen =  /*<<float.ml:256:8>>*/ hd$0.length - 1;
      /*<<float.ml:257:8>>*/  /*<<float.ml:257:8>>*/ caml_floatarray_blit
       /*<<float.ml:257:8>>*/ (hd$0, 0, result, i, hlen);
     var i$0 = i + hlen | 0;
     l$0 = tl$0;
     i = i$0;
    }
    /*<<float.ml:261:10>>*/ }
   function sub(a, ofs, len){
     /*<<float.ml:264:4>>*/  /*<<float.ml:264:4>>*/ check
      /*<<float.ml:264:4>>*/ (a, ofs, len, cst_Float_Array_sub);
    var
     result =
        /*<<float.ml:265:17>>*/  /*<<float.ml:265:17>>*/ caml_floatarray_create
         /*<<float.ml:265:17>>*/ (len);
     /*<<float.ml:266:4>>*/  /*<<float.ml:266:4>>*/ caml_floatarray_blit
      /*<<float.ml:266:4>>*/ (a, ofs, result, 0, len);
     /*<<float.ml:266:4>>*/ return result /*<<float.ml:266:4>>*/ ;
    /*<<float.ml:267:10>>*/ }
   function copy(a){
    var
     l = a.length - 1,
     result =
        /*<<float.ml:271:17>>*/  /*<<float.ml:271:17>>*/ caml_floatarray_create
         /*<<float.ml:271:17>>*/ (l);
     /*<<float.ml:272:4>>*/  /*<<float.ml:272:4>>*/ caml_floatarray_blit
      /*<<float.ml:272:4>>*/ (a, 0, result, 0, l);
     /*<<float.ml:272:4>>*/ return result /*<<float.ml:272:4>>*/ ;
    /*<<float.ml:273:10>>*/ }
   function fill(a, ofs, len, v){
     /*<<float.ml:276:4>>*/  /*<<float.ml:276:4>>*/ check
      /*<<float.ml:276:4>>*/ (a, ofs, len, cst_Float_Array_fill);
     /*<<float.ml:276:4>>*/ return  /*<<float.ml:276:4>>*/ unsafe_fill
             /*<<float.ml:276:4>>*/ (a, ofs, len, v) /*<<float.ml:277:27>>*/ ;
    /*<<float.ml:277:27>>*/ }
   function blit(src, sofs, dst, dofs, len){
     /*<<float.ml:280:4>>*/  /*<<float.ml:280:4>>*/ check
      /*<<float.ml:280:4>>*/ (src, sofs, len, cst_Float_array_blit);
     /*<<float.ml:281:4>>*/  /*<<float.ml:281:4>>*/ check
      /*<<float.ml:281:4>>*/ (dst, dofs, len, cst_Float_array_blit$0);
     /*<<float.ml:282:4>>*/ return  /*<<float.ml:282:4>>*/ caml_floatarray_blit
             /*<<float.ml:282:4>>*/ (src, sofs, dst, dofs, len) /*<<float.ml:282:37>>*/ ;
    /*<<float.ml:282:37>>*/ }
   function to_list(a){
     /*<<float.ml:285:4>>*/ return  /*<<float.ml:285:25>>*/ caml_call2
             /*<<float.ml:285:25>>*/ (Stdlib_List[11],
             a.length - 1,
             function(_aE_){ /*<<?>>*/ return a[1 + _aE_];}) /*<<float.ml:285:39>>*/ ;
    /*<<float.ml:285:39>>*/ }
   function of_list(l){
    var
     result =
        /*<<float.ml:288:17>>*/  /*<<float.ml:288:17>>*/ caml_floatarray_create
         /*<<float.ml:288:17>>*/ ( /*<<float.ml:288:24>>*/ caml_call1
           /*<<float.ml:288:24>>*/ (Stdlib_List[1], l)),
     i = 0,
     l$0 = l;
     /*<<float.ml:290:6>>*/ for(;;){
     if(! l$0)  /*<<float.ml:289:4>>*/ return result /*<<float.ml:289:4>>*/ ;
     var t = l$0[2], h = l$0[1];
      /*<<float.ml:292:18>>*/ result[1 + i] = h;
     var i$0 =  /*<<float.ml:289:4>>*/ i + 1 | 0;
     i = i$0;
     l$0 = t;
    }
    /*<<float.ml:294:12>>*/ }
   function iter(f, a){
    var _aC_ = a.length - 2 | 0, _aB_ =  /*<<float.ml:298:4>>*/ 0;
    if(_aC_ >= 0){
     var i = _aB_;
     for(;;){
       /*<<float.ml:298:33>>*/  /*<<float.ml:298:33>>*/ caml_call1
        /*<<float.ml:298:33>>*/ (f, a[1 + i]);
      var _aD_ =  /*<<float.ml:298:33>>*/ i + 1 | 0;
      if(_aC_ === i) break;
      i = _aD_;
     }
    }
    return 0;
    /*<<float.ml:298:56>>*/ }
   function iter2(f, a, b){
     /*<<float.ml:302:4>>*/ if(a.length - 1 !== b.length - 1)
      /*<<float.ml:303:6>>*/ return  /*<<float.ml:303:6>>*/ caml_call1
              /*<<float.ml:303:6>>*/ (Stdlib[1],
              cst_Float_Array_iter2_arrays_m) /*<<float.ml:305:75>>*/ ;
    var _az_ = a.length - 2 | 0, _ay_ =  /*<<float.ml:305:6>>*/ 0;
    if(_az_ >= 0){
     var i = _ay_;
     for(;;){
       /*<<float.ml:305:35>>*/  /*<<float.ml:305:35>>*/ caml_call2
        /*<<float.ml:305:35>>*/ (f, a[1 + i], b[1 + i]);
      var _aA_ =  /*<<float.ml:305:35>>*/ i + 1 | 0;
      if(_az_ === i) break;
      i = _aA_;
     }
    }
    return 0;
    /*<<float.ml:305:75>>*/ }
   function map(f, a){
    var
     l = a.length - 1,
     r =
        /*<<float.ml:309:12>>*/  /*<<float.ml:309:12>>*/ caml_floatarray_create
         /*<<float.ml:309:12>>*/ (l),
     _aw_ =  /*<<float.ml:310:4>>*/ l - 1 | 0,
     _av_ =  /*<<float.ml:309:12>>*/ 0;
    if(_aw_ >= 0){
     var i = _av_;
     for(;;){
       /*<<float.ml:311:6>>*/ r[1 + i] =
        /*<<float.ml:311:21>>*/ caml_call1
         /*<<float.ml:311:21>>*/ (f, a[1 + i]);
      var _ax_ =  /*<<float.ml:311:6>>*/ i + 1 | 0;
      if(_aw_ === i) break;
      i = _ax_;
     }
    }
     /*<<float.ml:313:4>>*/ return r /*<<float.ml:313:4>>*/ ;
    /*<<float.ml:313:5>>*/ }
   function map_inplace(f, a){
    var _at_ = a.length - 2 | 0, _as_ =  /*<<float.ml:317:4>>*/ 0;
    if(_at_ >= 0){
     var i = _as_;
     for(;;){
       /*<<float.ml:318:6>>*/ a[1 + i] =
        /*<<float.ml:318:21>>*/ caml_call1
         /*<<float.ml:318:21>>*/ (f, a[1 + i]);
      var _au_ =  /*<<float.ml:318:6>>*/ i + 1 | 0;
      if(_at_ === i) break;
      i = _au_;
     }
    }
    return 0;
    /*<<float.ml:319:8>>*/ }
   function map2(f, a, b){
    var la = a.length - 1, lb =  /*<<float.ml:323:4>>*/ b.length - 1;
    if(la !== lb)
      /*<<float.ml:325:6>>*/ return  /*<<float.ml:325:6>>*/ caml_call1
              /*<<float.ml:325:6>>*/ (Stdlib[1],
              cst_Float_Array_map2_arrays_mu) /*<<float.ml:332:7>>*/ ;
    var
     r =
        /*<<float.ml:327:14>>*/  /*<<float.ml:327:14>>*/ caml_floatarray_create
         /*<<float.ml:327:14>>*/ (la),
     _aq_ =  /*<<float.ml:328:6>>*/ la - 1 | 0,
     _ap_ =  /*<<float.ml:327:14>>*/ 0;
    if(_aq_ >= 0){
     var i = _ap_;
     for(;;){
       /*<<float.ml:329:8>>*/ r[1 + i] =
        /*<<float.ml:329:23>>*/ caml_call2
         /*<<float.ml:329:23>>*/ (f, a[1 + i], b[1 + i]);
      var _ar_ =  /*<<float.ml:329:8>>*/ i + 1 | 0;
      if(_aq_ === i) break;
      i = _ar_;
     }
    }
     /*<<float.ml:331:6>>*/ return r /*<<float.ml:331:6>>*/ ;
    /*<<float.ml:332:7>>*/ }
   function iteri(f, a){
    var _an_ = a.length - 2 | 0, _am_ =  /*<<float.ml:336:4>>*/ 0;
    if(_an_ >= 0){
     var i = _am_;
     for(;;){
       /*<<float.ml:336:33>>*/  /*<<float.ml:336:33>>*/ caml_call2
        /*<<float.ml:336:33>>*/ (f, i, a[1 + i]);
      var _ao_ =  /*<<float.ml:336:33>>*/ i + 1 | 0;
      if(_an_ === i) break;
      i = _ao_;
     }
    }
    return 0;
    /*<<float.ml:336:58>>*/ }
   function mapi(f, a){
    var
     l = a.length - 1,
     r =
        /*<<float.ml:340:12>>*/  /*<<float.ml:340:12>>*/ caml_floatarray_create
         /*<<float.ml:340:12>>*/ (l),
     _ak_ =  /*<<float.ml:341:4>>*/ l - 1 | 0,
     _aj_ =  /*<<float.ml:340:12>>*/ 0;
    if(_ak_ >= 0){
     var i = _aj_;
     for(;;){
       /*<<float.ml:342:6>>*/ r[1 + i] =
        /*<<float.ml:342:21>>*/ caml_call2
         /*<<float.ml:342:21>>*/ (f, i, a[1 + i]);
      var _al_ =  /*<<float.ml:342:6>>*/ i + 1 | 0;
      if(_ak_ === i) break;
      i = _al_;
     }
    }
     /*<<float.ml:344:4>>*/ return r /*<<float.ml:344:4>>*/ ;
    /*<<float.ml:344:5>>*/ }
   function mapi_inplace(f, a){
    var _ah_ = a.length - 2 | 0, _ag_ =  /*<<float.ml:348:4>>*/ 0;
    if(_ah_ >= 0){
     var i = _ag_;
     for(;;){
       /*<<float.ml:349:6>>*/ a[1 + i] =
        /*<<float.ml:349:21>>*/ caml_call2
         /*<<float.ml:349:21>>*/ (f, i, a[1 + i]);
      var _ai_ =  /*<<float.ml:349:6>>*/ i + 1 | 0;
      if(_ah_ === i) break;
      i = _ai_;
     }
    }
    return 0;
    /*<<float.ml:350:8>>*/ }
   function fold_left(f, x, a){
    var
     r =  /*<<float.ml:354:12>>*/ [0, x],
     _ae_ = a.length - 2 | 0,
     _ad_ =  /*<<float.ml:354:12>>*/ 0;
    if(_ae_ >= 0){
     var i = _ad_;
     for(;;){
      r[1] =
        /*<<float.ml:356:11>>*/ caml_call2
         /*<<float.ml:356:11>>*/ (f, r[1], a[1 + i]);
      var _af_ =  /*<<float.ml:355:4>>*/ i + 1 | 0;
      if(_ae_ === i) break;
      i = _af_;
     }
    }
    return r[1];
    /*<<float.ml:358:6>>*/ }
   function fold_right(f, a, x){
    var
     r =  /*<<float.ml:362:12>>*/ [0, x],
     _ab_ =  /*<<float.ml:363:4>>*/ a.length - 2 | 0;
    if(_ab_ >= 0){
     var i = _ab_;
     for(;;){
      r[1] =
        /*<<float.ml:364:11>>*/ caml_call2
         /*<<float.ml:364:11>>*/ (f, a[1 + i], r[1]);
      var _ac_ =  /*<<float.ml:363:4>>*/ i - 1 | 0;
      if(0 === i) break;
      i = _ac_;
     }
    }
    return r[1];
    /*<<float.ml:366:6>>*/ }
   function exists(p, a){
    var n = a.length - 1, i = 0;
     /*<<float.ml:372:6>>*/ for(;;){
     if(i === n)  /*<<float.ml:372:20>>*/ return 0 /*<<float.ml:372:20>>*/ ;
      /*<<float.ml:373:14>>*/ if
      ( /*<<float.ml:373:14>>*/ caml_call1
         /*<<float.ml:373:14>>*/ (p, a[1 + i]))
       /*<<float.ml:373:38>>*/ return 1 /*<<float.ml:373:38>>*/ ;
     var i$0 =  /*<<float.ml:374:11>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<float.ml:375:10>>*/ }
   function for_all(p, a){
    var n = a.length - 1, i = 0;
     /*<<float.ml:381:6>>*/ for(;;){
     if(i === n)  /*<<float.ml:381:20>>*/ return 1 /*<<float.ml:381:20>>*/ ;
      /*<<float.ml:382:14>>*/ if
      (!
        /*<<float.ml:382:14>>*/ caml_call1
         /*<<float.ml:382:14>>*/ (p, a[1 + i]))
       /*<<float.ml:383:11>>*/ return 0 /*<<float.ml:383:11>>*/ ;
     var i$0 =  /*<<float.ml:382:38>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<float.ml:384:10>>*/ }
   function mem(x, a){
    var n = a.length - 1, i = 0;
     /*<<float.ml:390:6>>*/ for(;;){
     if(i === n)  /*<<float.ml:390:20>>*/ return 0 /*<<float.ml:390:20>>*/ ;
     if
      (0
       ===
         /*<<float.ml:391:22>>*/ caml_float_compare
          /*<<float.ml:391:22>>*/ (a[1 + i], x))
       /*<<float.ml:391:50>>*/ return 1 /*<<float.ml:391:50>>*/ ;
     var i$0 =  /*<<float.ml:392:11>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<float.ml:394:10>>*/ }
   function mem_ieee(x, a){
    var n = a.length - 1, i = 0;
     /*<<float.ml:400:6>>*/ for(;;){
     if(i === n)  /*<<float.ml:400:20>>*/ return 0 /*<<float.ml:400:20>>*/ ;
     if(x === a[1 + i])
       /*<<float.ml:401:40>>*/ return 1 /*<<float.ml:401:40>>*/ ;
     var i$0 =  /*<<float.ml:402:11>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<float.ml:404:10>>*/ }
   function find_opt(p, a){
    var n = a.length - 1, i = 0;
     /*<<float.ml:410:6>>*/ for(;;){
     if(i === n)  /*<<float.ml:410:20>>*/ return 0 /*<<float.ml:410:20>>*/ ;
     var x =  /*<<float.ml:412:16>>*/ a[1 + i];
      /*<<float.ml:413:11>>*/ if
      ( /*<<float.ml:413:11>>*/ caml_call1 /*<<float.ml:413:11>>*/ (p, x))
       /*<<float.ml:413:20>>*/ return [0, x] /*<<float.ml:413:20>>*/ ;
     var i$0 =  /*<<float.ml:414:13>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<float.ml:416:10>>*/ }
   function find_index(p, a){
    var n = a.length - 1, i = 0;
     /*<<float.ml:422:6>>*/ for(;;){
     if(i === n)  /*<<float.ml:422:20>>*/ return 0 /*<<float.ml:422:20>>*/ ;
      /*<<float.ml:423:14>>*/ if
      ( /*<<float.ml:423:14>>*/ caml_call1
         /*<<float.ml:423:14>>*/ (p, a[1 + i]))
       /*<<float.ml:423:38>>*/ return [0, i] /*<<float.ml:423:38>>*/ ;
     var i$0 =  /*<<float.ml:424:11>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<float.ml:425:10>>*/ }
   function find_map(f, a){
    var n = a.length - 1, i = 0;
     /*<<float.ml:431:6>>*/ for(;;){
     if(i === n)  /*<<float.ml:431:20>>*/ return 0 /*<<float.ml:431:20>>*/ ;
     var
      r =
         /*<<float.ml:433:14>>*/  /*<<float.ml:433:14>>*/ caml_call1
          /*<<float.ml:433:14>>*/ (f, a[1 + i]);
     if(r)  /*<<float.ml:435:25>>*/ return r /*<<float.ml:435:25>>*/ ;
     var i$0 =  /*<<float.ml:434:18>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<float.ml:437:10>>*/ }
   function find_mapi(f, a){
    var n = a.length - 1, i = 0;
     /*<<float.ml:443:6>>*/ for(;;){
     if(i === n)  /*<<float.ml:443:20>>*/ return 0 /*<<float.ml:443:20>>*/ ;
     var
      r =
         /*<<float.ml:445:14>>*/  /*<<float.ml:445:14>>*/ caml_call2
          /*<<float.ml:445:14>>*/ (f, i, a[1 + i]);
     if(r)  /*<<float.ml:447:25>>*/ return r /*<<float.ml:447:25>>*/ ;
     var i$0 =  /*<<float.ml:446:18>>*/ i + 1 | 0;
     i = i$0;
    }
    /*<<float.ml:449:10>>*/ }
   var
    Bottom =
       /*<<float.ml:452:2>>*/ [248,
       "Stdlib.Float.Array.Bottom",
       runtime.caml_fresh_oo_id(0)],
    _b_ = [0, cst_float_ml, 484, 6];
   function sort(cmp, a){
    function maxson(l, i){
     var
      i31 = ((i + i | 0) + i | 0) + 1 | 0,
      x =  /*<<float.ml:456:14>>*/ [0, i31];
     if((i31 + 2 | 0) < l){
      var
       _W_ =  /*<<float.ml:457:24>>*/ i31 + 1 | 0,
       _X_ =  /*<<float.ml:458:27>>*/ caml_check_bound(a, _W_)[1 + _W_];
      if
       ( /*<<float.ml:458:11>>*/ caml_call2
          /*<<float.ml:458:11>>*/ (cmp,
          caml_check_bound(a, i31)[1 + i31],
          _X_)
        < 0)
       x[1] = i31 + 1 | 0;
      var
       _Y_ =  /*<<float.ml:459:8>>*/ i31 + 2 | 0,
       _Z_ =  /*<<float.ml:459:26>>*/ caml_check_bound(a, _Y_)[1 + _Y_],
       ___ = x[1];
      if
       ( /*<<float.ml:459:11>>*/ caml_call2
          /*<<float.ml:459:11>>*/ (cmp,
          caml_check_bound(a, ___)[1 + ___],
          _Z_)
        < 0)
       x[1] = i31 + 2 | 0;
      return x[1];
     }
     if((i31 + 1 | 0) < l){
      var
       _$_ = i31 + 1 | 0,
       _aa_ =  /*<<float.ml:462:40>>*/ caml_check_bound(a, _$_)[1 + _$_];
       /*<<float.ml:462:24>>*/ if
       (0
        >
          /*<<float.ml:462:24>>*/ caml_call2
           /*<<float.ml:462:24>>*/ (cmp,
           caml_check_bound(a, i31)[1 + i31],
           _aa_))
        /*<<float.ml:463:13>>*/ return i31 + 1 | 0 /*<<float.ml:463:13>>*/ ;
     }
     if(i31 < l)  /*<<float.ml:464:29>>*/ return i31 /*<<float.ml:464:29>>*/ ;
      /*<<float.ml:464:38>>*/ throw  /*<<float.ml:464:38>>*/ caml_maybe_attach_backtrace
             /*<<float.ml:464:38>>*/ ([0, Bottom, i], 1);
     /*<<float.ml:464:54>>*/ }
    var l = a.length - 1, _Q_ = ((l + 1 | 0) / 3 | 0) - 1 | 0;
    if(_Q_ >= 0){
     var i$6 = _Q_;
     for(;;){
      var e$1 =  /*<<float.ml:493:52>>*/ caml_check_bound(a, i$6)[1 + i$6];
       /*<<float.ml:475:24>>*/ try{
       var i = i$6;
        /*<<float.ml:467:6>>*/ for(;;){
        var
         j =
            /*<<float.ml:467:14>>*/  /*<<float.ml:467:14>>*/ maxson
             /*<<float.ml:467:14>>*/ (l, i);
         /*<<float.ml:468:9>>*/ if
         (0
          >=
            /*<<float.ml:468:9>>*/ caml_call2
             /*<<float.ml:468:9>>*/ (cmp, caml_check_bound(a, j)[1 + j], e$1))
         break;
        var _N_ =  /*<<float.ml:469:16>>*/ caml_check_bound(a, j)[1 + j];
         /*<<float.ml:469:8>>*/ caml_check_bound(a, i)[1 + i] = _N_;
        i = j;
       }
        /*<<float.ml:471:15>>*/ caml_check_bound(a, i)[1 + i] = e$1;
      }
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(exn[1] !== Bottom) throw caml_maybe_attach_backtrace(exn, 0);
       var i$0 = exn[2];
        /*<<float.ml:475:63>>*/ caml_check_bound(a, i$0)[1 + i$0] = e$1;
      }
      var _V_ =  /*<<float.ml:493:40>>*/ i$6 - 1 | 0;
      if(0 === i$6) break;
      i$6 = _V_;
     }
    }
    var _R_ =  /*<<float.ml:494:4>>*/ l - 1 | 0;
    if(_R_ >= 2){
     var i$4 = _R_;
     for(;;){
      var e$0 =  /*<<float.ml:495:14>>*/ caml_check_bound(a, i$4)[1 + i$4];
       /*<<float.ml:496:6>>*/ a[1 + i$4] = caml_check_bound(a, 0)[1];
      var i$5 = 0;
       /*<<float.ml:481:21>>*/ try{
       var i$1 = i$5;
        /*<<float.ml:477:6>>*/ for(;;){
        var
         j$0 =
            /*<<float.ml:477:14>>*/  /*<<float.ml:477:14>>*/ maxson
             /*<<float.ml:477:14>>*/ (i$4, i$1),
         _O_ =  /*<<float.ml:478:14>>*/ caml_check_bound(a, j$0)[1 + j$0];
         /*<<float.ml:478:6>>*/ caml_check_bound(a, i$1)[1 + i$1] = _O_;
        i$1 = j$0;
       }
      }
      catch(exn){
       var exn$0 = caml_wrap_exception(exn);
       if(exn$0[1] !== Bottom) throw caml_maybe_attach_backtrace(exn$0, 0);
       var i$2 = exn$0[2];
       a:
       {
        b:
        {
         var i$3 = i$2;
          /*<<float.ml:483:6>>*/ for(;;){
          var father = (i$3 - 1 | 0) / 3 | 0;
          if(i$3 === father)
            /*<<float.ml:484:6>>*/ throw  /*<<float.ml:484:6>>*/ caml_maybe_attach_backtrace
                   /*<<float.ml:484:6>>*/ ([0, Assert_failure, _b_], 1);
           /*<<float.ml:485:9>>*/ if
           (0
            <=
              /*<<float.ml:485:9>>*/ caml_call2
               /*<<float.ml:485:9>>*/ (cmp,
               caml_check_bound(a, father)[1 + father],
               e$0))
           break;
          var
           _P_ =
              /*<<float.ml:486:16>>*/ caml_check_bound(a, father)[1 + father];
           /*<<float.ml:486:8>>*/ caml_check_bound(a, i$3)[1 + i$3] = _P_;
          if(0 >= father) break b;
          i$3 = father;
         }
          /*<<float.ml:488:15>>*/ caml_check_bound(a, i$3)[1 + i$3] = e$0;
         break a;
        }
         /*<<float.ml:487:51>>*/ caml_check_bound(a, 0)[1] = e$0;
       }
       var _U_ =  /*<<float.ml:494:4>>*/ i$4 - 1 | 0;
       if(2 === i$4) break;
       i$4 = _U_;
      }
     }
    }
    var _S_ = 1 < l ? 1 : 0;
    if(_S_){
     var e =  /*<<float.ml:499:27>>*/ caml_check_bound(a, 1)[2];
      /*<<float.ml:499:40>>*/ a[2] = caml_check_bound(a, 0)[1];
      /*<<float.ml:499:59>>*/ a[1] = e;
     var _T_ = 0;
    }
    else
     var _T_ = _S_;
     /*<<float.ml:499:59>>*/ return _T_ /*<<float.ml:499:59>>*/ ;
    /*<<float.ml:499:69>>*/ }
   function stable_sort(cmp, a){
    function merge(src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs){
     var
      src1r = src1ofs + src1len | 0,
      src2r = src2ofs + src2len | 0,
      s2$1 =
         /*<<float.ml:522:46>>*/ caml_check_bound(src2, src2ofs)[1 + src2ofs],
      s1$1 =
         /*<<float.ml:522:22>>*/ caml_check_bound(a, src1ofs)[1 + src1ofs],
      i1 = src1ofs,
      s1 = s1$1,
      i2 = src2ofs,
      s2 = s2$1,
      d = dstofs;
      /*<<float.ml:507:8>>*/ for(;;)
       /*<<float.ml:507:11>>*/ if
       (0
        <
          /*<<float.ml:507:11>>*/ caml_call2
           /*<<float.ml:507:11>>*/ (cmp, s1, s2)){
        /*<<float.ml:515:10>>*/ caml_check_bound(dst, d)[1 + d] = s2;
       var i2$0 =  /*<<float.ml:515:10>>*/ i2 + 1 | 0;
       if(i2$0 >= src2r)
         /*<<float.ml:279:11>>*/ return  /*<<float.ml:279:11>>*/ blit
                 /*<<float.ml:279:11>>*/ (a,
                 i1,
                 dst,
                 d + 1 | 0,
                 src1r - i1 | 0) /*<<float.ml:522:72>>*/ ;
       var
        d$0 =  /*<<float.ml:518:12>>*/ d + 1 | 0,
        s2$0 =  /*<<float.ml:518:26>>*/ caml_check_bound(src2, i2$0)[1 + i2$0];
       i2 = i2$0;
       s2 = s2$0;
       d = d$0;
      }
      else{
        /*<<float.ml:508:10>>*/ caml_check_bound(dst, d)[1 + d] = s1;
       var i1$0 =  /*<<float.ml:508:10>>*/ i1 + 1 | 0;
       if(i1$0 >= src1r)
         /*<<float.ml:279:11>>*/ return  /*<<float.ml:279:11>>*/ blit
                 /*<<float.ml:279:11>>*/ (src2,
                 i2,
                 dst,
                 d + 1 | 0,
                 src2r - i2 | 0) /*<<float.ml:522:72>>*/ ;
       var
        d$1 =  /*<<float.ml:511:12>>*/ d + 1 | 0,
        s1$0 =  /*<<float.ml:511:20>>*/ caml_check_bound(a, i1$0)[1 + i1$0];
       i1 = i1$0;
       s1 = s1$0;
       d = d$1;
      }
     /*<<float.ml:522:72>>*/ }
    function isortto(srcofs, dst, dstofs, len){
     var _F_ = len - 1 | 0, _E_ =  /*<<float.ml:525:6>>*/ 0;
     if(_F_ >= 0){
      var i = _E_;
      for(;;){
       var
        _G_ = srcofs + i | 0,
        e =  /*<<float.ml:526:16>>*/ caml_check_bound(a, _G_)[1 + _G_],
        j =  /*<<float.ml:527:16>>*/ [0, (dstofs + i | 0) - 1 | 0];
       for(;;){
        if(dstofs > j[1]) break;
        var _H_ = j[1];
         /*<<float.ml:528:31>>*/ if
         (0
          >=
            /*<<float.ml:528:31>>*/ caml_call2
             /*<<float.ml:528:31>>*/ (cmp,
             caml_check_bound(dst, _H_)[1 + _H_],
             e))
         break;
        var
         _I_ = j[1],
         _J_ =  /*<<float.ml:529:27>>*/ caml_check_bound(dst, _I_)[1 + _I_],
         _K_ = j[1] + 1 | 0;
         /*<<float.ml:529:10>>*/ caml_check_bound(dst, _K_)[1 + _K_] = _J_;
        j[1]--;
       }
       var _L_ = j[1] + 1 | 0;
        /*<<float.ml:532:8>>*/ caml_check_bound(dst, _L_)[1 + _L_] = e;
       var _M_ =  /*<<float.ml:525:6>>*/ i + 1 | 0;
       if(_F_ === i) break;
       i = _M_;
      }
     }
     return 0;
     /*<<float.ml:533:10>>*/ }
    function sortto(srcofs, dst, dstofs, len){
      /*<<float.ml:536:6>>*/ if(len <= 5)
       /*<<float.ml:536:28>>*/ return  /*<<float.ml:536:28>>*/ isortto
               /*<<float.ml:536:28>>*/ (srcofs, dst, dstofs, len) /*<<float.ml:542:9>>*/ ;
     var l1 = len / 2 | 0, l2 = len - l1 | 0;
      /*<<float.ml:539:8>>*/  /*<<float.ml:539:8>>*/ sortto
       /*<<float.ml:539:8>>*/ (srcofs + l1 | 0, dst, dstofs + l1 | 0, l2);
      /*<<float.ml:540:8>>*/  /*<<float.ml:540:8>>*/ sortto
       /*<<float.ml:540:8>>*/ (srcofs, a, srcofs + l2 | 0, l1);
      /*<<float.ml:540:8>>*/ return  /*<<float.ml:540:8>>*/ merge
              /*<<float.ml:540:8>>*/ (srcofs + l2 | 0,
              l1,
              dst,
              dstofs + l1 | 0,
              l2,
              dst,
              dstofs) /*<<float.ml:542:9>>*/ ;
     /*<<float.ml:542:9>>*/ }
    var l = a.length - 1;
    if(l <= 5)
      /*<<float.ml:545:24>>*/ return  /*<<float.ml:545:24>>*/ isortto
              /*<<float.ml:545:24>>*/ (0, a, 0, l) /*<<float.ml:552:7>>*/ ;
    var
     l1 = l / 2 | 0,
     l2 = l - l1 | 0,
     t =
        /*<<float.ml:548:14>>*/  /*<<float.ml:548:14>>*/ caml_floatarray_create
         /*<<float.ml:548:14>>*/ (l2);
     /*<<float.ml:549:6>>*/  /*<<float.ml:549:6>>*/ sortto
      /*<<float.ml:549:6>>*/ (l1, t, 0, l2);
     /*<<float.ml:550:6>>*/  /*<<float.ml:550:6>>*/ sortto
      /*<<float.ml:550:6>>*/ (0, a, l2, l1);
     /*<<float.ml:550:6>>*/ return  /*<<float.ml:550:6>>*/ merge
             /*<<float.ml:550:6>>*/ (l2, l1, t, 0, l2, a, 0) /*<<float.ml:552:7>>*/ ;
    /*<<float.ml:552:7>>*/ }
   function shuffle(rand, a){
    var _C_ = a.length - 2 | 0;
    if(_C_ >= 1){
     var i = _C_;
     for(;;){
      var
       j =
          /*<<float.ml:559:14>>*/  /*<<float.ml:559:14>>*/ caml_call1
           /*<<float.ml:559:14>>*/ (rand, i + 1 | 0),
       v =  /*<<float.ml:560:14>>*/ a[1 + i];
       /*<<float.ml:561:6>>*/ a[1 + i] = caml_check_bound(a, j)[1 + j];
       /*<<float.ml:562:6>>*/ a[1 + j] = v;
      var _D_ = i - 1 | 0;
      if(1 === i) break;
      i = _D_;
     }
    }
    return 0;
    /*<<float.ml:563:8>>*/ }
   function to_seq(a){
    function aux(i, param){
      /*<<float.ml:568:6>>*/ if(i >= a.length - 1)
       /*<<float.ml:572:11>>*/ return 0 /*<<float.ml:572:11>>*/ ;
     var
      x =  /*<<float.ml:570:16>>*/ a[1 + i],
      _A_ =  /*<<float.ml:570:16>>*/ i + 1 | 0;
      /*<<float.ml:571:8>>*/ return [0,
             x,
             function(_B_){ /*<<?>>*/ return aux(_A_, _B_);}] /*<<float.ml:571:8>>*/ ;
     /*<<float.ml:572:18>>*/ }
    var _y_ =  /*<<float.ml:574:4>>*/ 0;
     /*<<float.ml:574:4>>*/ return function(_z_){
      /*<<?>>*/ return aux(_y_, _z_);} /*<<float.ml:574:4>>*/ ;
    /*<<float.ml:574:9>>*/ }
   function to_seqi(a){
    function aux(i, param){
      /*<<float.ml:579:6>>*/ if(i >= a.length - 1)
       /*<<float.ml:583:11>>*/ return 0 /*<<float.ml:583:11>>*/ ;
     var
      x =  /*<<float.ml:581:16>>*/ a[1 + i],
      _w_ =  /*<<float.ml:581:16>>*/ i + 1 | 0;
      /*<<float.ml:582:8>>*/ return [0,
             [0, i, x],
             function(_x_){ /*<<?>>*/ return aux(_w_, _x_);}] /*<<float.ml:582:8>>*/ ;
     /*<<float.ml:583:18>>*/ }
    var _u_ =  /*<<float.ml:585:4>>*/ 0;
     /*<<float.ml:585:4>>*/ return function(_v_){
      /*<<?>>*/ return aux(_u_, _v_);} /*<<float.ml:585:4>>*/ ;
    /*<<float.ml:585:9>>*/ }
   function of_seq(i$2){
    var
     l =
        /*<<float.ml:599:12>>*/  /*<<float.ml:599:12>>*/ caml_call3
         /*<<float.ml:599:12>>*/ (Stdlib_Seq[5],
         function(acc, x){
           /*<<float.ml:599:40>>*/ return [0, x, acc] /*<<float.ml:599:40>>*/ ;
          /*<<float.ml:599:46>>*/ },
         0,
         i$2),
     len =
        /*<<float.ml:589:14>>*/  /*<<float.ml:589:14>>*/ caml_call1
         /*<<float.ml:589:14>>*/ (Stdlib_List[1], l),
     a =
        /*<<float.ml:590:12>>*/  /*<<float.ml:590:12>>*/ caml_floatarray_create
         /*<<float.ml:590:12>>*/ (len),
     i$1 =  /*<<float.ml:589:14>>*/ len - 1 | 0,
     i = i$1,
     param = l;
     /*<<float.ml:591:17>>*/ for(;;){
     if(! param)  /*<<float.ml:591:4>>*/ return a /*<<float.ml:591:4>>*/ ;
     var tl = param[2], hd = param[1];
      /*<<float.ml:593:18>>*/ a[1 + i] = hd;
     var i$0 =  /*<<float.ml:591:4>>*/ i - 1 | 0;
     i = i$0;
     param = tl;
    }
    /*<<float.ml:600:17>>*/ }
   function map_to_array(f, a){
    var l = a.length - 1;
     /*<<float.ml:605:4>>*/ if(0 === l)
      /*<<float.ml:605:18>>*/ return [0] /*<<float.ml:605:18>>*/ ;
    var
     r =
        /*<<float.ml:606:14>>*/  /*<<float.ml:606:14>>*/ caml_make_vect
         /*<<float.ml:606:14>>*/ (l,
          /*<<float.ml:606:27>>*/ caml_call1 /*<<float.ml:606:27>>*/ (f, a[1])),
     _s_ =  /*<<float.ml:607:6>>*/ l - 1 | 0,
     _r_ =  /*<<float.ml:606:14>>*/ 1;
    if(_s_ >= 1){
     var i = _r_;
     for(;;){
       /*<<float.ml:608:8>>*/ r[1 + i] =
        /*<<float.ml:608:29>>*/ caml_call1
         /*<<float.ml:608:29>>*/ (f, a[1 + i]);
      var _t_ =  /*<<float.ml:608:8>>*/ i + 1 | 0;
      if(_s_ === i) break;
      i = _t_;
     }
    }
     /*<<float.ml:610:6>>*/ return r /*<<float.ml:610:6>>*/ ;
    /*<<float.ml:611:7>>*/ }
   function map_from_array(f, a){
    var
     l = a.length - 1,
     r =
        /*<<float.ml:615:12>>*/  /*<<float.ml:615:12>>*/ caml_floatarray_create
         /*<<float.ml:615:12>>*/ (l),
     _p_ =  /*<<float.ml:616:4>>*/ l - 1 | 0,
     _o_ =  /*<<float.ml:615:12>>*/ 0;
    if(_p_ >= 0){
     var i = _o_;
     for(;;){
       /*<<float.ml:617:6>>*/ r[1 + i] =
        /*<<float.ml:617:21>>*/ caml_call1
         /*<<float.ml:617:21>>*/ (f, a[1 + i]);
      var _q_ =  /*<<float.ml:617:6>>*/ i + 1 | 0;
      if(_p_ === i) break;
      i = _q_;
     }
    }
     /*<<float.ml:619:4>>*/ return r /*<<float.ml:619:4>>*/ ;
    /*<<float.ml:619:5>>*/ }
   var
    Stdlib_Float =
      [0,
       0.,
       1.,
       -1.,
       succ,
       pred,
       infinity,
       neg_infinity,
       nan,
       signaling_nan,
       nan,
       3.141592653589793,
       max_float,
       min_float,
       epsilon,
       is_finite,
       is_infinite,
       is_nan,
       is_integer,
       of_string_opt,
       to_string,
       caml_float_compare,
       equal,
       min,
       max,
       min_max,
       min_num,
       max_num,
       min_max_num,
       seeded_hash,
       hash,
       [0,
        function(_n_){ /*<<?>>*/ return _n_.length - 1;},
        function(_m_, _l_){
          /*<<?>>*/ return caml_check_bound(_m_, _l_)[1 + _l_];
        },
        function(_k_, _j_, _i_){
          /*<<?>>*/ caml_check_bound(_k_, _j_)[1 + _j_] = _i_;
         return 0;
        },
        make,
        caml_floatarray_create,
        init,
        make_matrix,
        init_matrix,
        append,
        concat,
        sub,
        copy,
        fill,
        blit,
        to_list,
        of_list,
        iter,
        iteri,
        map,
        map_inplace,
        mapi,
        mapi_inplace,
        fold_left,
        fold_right,
        iter2,
        map2,
        for_all,
        exists,
        mem,
        mem_ieee,
        find_opt,
        find_index,
        find_map,
        find_mapi,
        sort,
        stable_sort,
        stable_sort,
        shuffle,
        to_seq,
        to_seqi,
        of_seq,
        map_to_array,
        map_from_array],
       [0,
        function(_h_){ /*<<?>>*/ return _h_.length - 1;},
        function(_g_, _f_){
          /*<<?>>*/ return caml_check_bound(_g_, _f_)[1 + _f_];
        },
        function(_e_, _d_, _c_){
          /*<<?>>*/ caml_check_bound(_e_, _d_)[1 + _d_] = _c_;
         return 0;
        },
        make,
        caml_floatarray_create,
        init,
        make_matrix,
        init_matrix,
        append,
        concat,
        sub,
        copy,
        fill,
        blit,
        to_list,
        of_list,
        iter,
        iteri,
        map,
        map_inplace,
        mapi,
        mapi_inplace,
        fold_left,
        fold_right,
        iter2,
        map2,
        for_all,
        exists,
        mem,
        mem_ieee,
        find_opt,
        find_index,
        find_map,
        find_mapi,
        sort,
        stable_sort,
        stable_sort,
        shuffle,
        to_seq,
        to_seqi,
        of_seq,
        map_to_array,
        map_from_array]];
   runtime.caml_register_global(25, Stdlib_Float, "Stdlib__Float");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Int32
//# unitInfo: Requires: Stdlib, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_greaterequal =  /*<<?>>*/ runtime.caml_greaterequal,
    caml_hash =  /*<<?>>*/ runtime.caml_hash,
    caml_int_compare =  /*<<?>>*/ runtime.caml_int_compare,
    caml_lessequal =  /*<<?>>*/ runtime.caml_lessequal,
    caml_lessthan =  /*<<?>>*/ runtime.caml_lessthan,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_mul =  /*<<?>>*/ runtime.caml_mul,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Assert_failure = global_data.Assert_failure,
    zero = 0,
    one = 1;
   function succ(n){
     /*<<int32.ml:48:13>>*/ return n + 1 | 0 /*<<int32.ml:48:13>>*/ ;
    /*<<int32.ml:48:21>>*/ }
   function pred(n){
     /*<<int32.ml:49:13>>*/ return n - 1 | 0 /*<<int32.ml:49:13>>*/ ;
    /*<<int32.ml:49:21>>*/ }
   function abs(n){
     /*<<int32.ml:50:12>>*/ return  /*<<int32.ml:50:15>>*/ caml_greaterequal
              /*<<int32.ml:50:15>>*/ (n, 0)
            ? n
            : - n | 0 /*<<int32.ml:50:40>>*/ ;
    /*<<int32.ml:50:40>>*/ }
   function lognot(n){
     /*<<int32.ml:53:15>>*/ return n ^ -1 /*<<int32.ml:53:15>>*/ ;
    /*<<int32.ml:53:29>>*/ }
   var
    _a_ =  /*<<int32.ml:53:11>>*/ Stdlib_Sys[9],
    _b_ = [0, "int32.ml", 69, 6],
    minus_one = -1,
    min_int =  /*<<int32.ml:50:8>>*/ -2147483648,
    max_int = 2147483647;
   if(32 === _a_)
    var
     max_int$0 =  /*<<int32.ml:58:6>>*/ Stdlib[19],
     unsigned_to_int =
       function(n){
         /*<<int32.ml:60:8>>*/ if
         ( /*<<int32.ml:60:11>>*/ caml_greaterequal
            /*<<int32.ml:60:11>>*/ (n, 0)
          &&
            /*<<int32.ml:60:22>>*/ caml_lessequal
             /*<<int32.ml:60:22>>*/ (n, max_int$0))
          /*<<int32.ml:61:10>>*/ return [0, n] /*<<int32.ml:61:10>>*/ ;
         /*<<int32.ml:63:10>>*/ return 0 /*<<int32.ml:63:10>>*/ ;
        /*<<int32.ml:63:14>>*/ };
   else{
    if(64 !== _a_)
      /*<<int32.ml:69:6>>*/ throw  /*<<int32.ml:69:6>>*/ caml_maybe_attach_backtrace
             /*<<int32.ml:69:6>>*/ ([0, Assert_failure, _b_], 1);
    var
     unsigned_to_int =
       function(n){
         /*<<int32.ml:67:15>>*/ return [0, n & -1] /*<<int32.ml:67:15>>*/ ;
        /*<<int32.ml:67:40>>*/ };
   }
   function to_string(n){
     /*<<int32.ml:72:18>>*/ return  /*<<int32.ml:72:18>>*/ runtime.caml_format_int
             /*<<int32.ml:72:18>>*/ ("%d", n) /*<<int32.ml:72:31>>*/ ;
    /*<<int32.ml:72:31>>*/ }
   function of_string_opt(s){
     /*<<int32.ml:77:2>>*/ try{
     var
      _d_ =
         /*<<int32.ml:77:6>>*/ [0,
          /*<<int32.ml:77:11>>*/ runtime.caml_int_of_string
           /*<<int32.ml:77:11>>*/ (s)];
      /*<<int32.ml:77:6>>*/ return _d_ /*<<int32.ml:77:6>>*/ ;
    }
    catch(_e_){
     var _c_ = caml_wrap_exception(_e_);
     if(_c_[1] === Stdlib[7])
       /*<<int32.ml:78:20>>*/ return 0 /*<<int32.ml:78:20>>*/ ;
     throw caml_maybe_attach_backtrace(_c_, 0);
    }
    /*<<int32.ml:78:24>>*/ }
   var compare = caml_int_compare, equal = runtime.caml_equal;
   function unsigned_compare(n, m){
    var
     y =  /*<<int32.ml:86:26>>*/ m + 2147483648 | 0,
     x =  /*<<int32.ml:86:10>>*/ n + 2147483648 | 0;
     /*<<int32.ml:82:28>>*/ return  /*<<int32.ml:82:28>>*/ caml_int_compare
             /*<<int32.ml:82:28>>*/ (x, y) /*<<int32.ml:86:41>>*/ ;
    /*<<int32.ml:86:41>>*/ }
   function unsigned_lt(n, m){
     /*<<int32.ml:89:2>>*/ return  /*<<int32.ml:89:2>>*/ caml_lessthan
             /*<<int32.ml:89:2>>*/ (n + 2147483648 | 0, m + 2147483648 | 0) /*<<int32.ml:89:31>>*/ ;
    /*<<int32.ml:89:31>>*/ }
   function min(x, y){
     /*<<int32.ml:91:18>>*/ return  /*<<int32.ml:91:21>>*/ caml_lessequal
              /*<<int32.ml:91:21>>*/ (x, y)
            ? x
            : y /*<<int32.ml:91:41>>*/ ;
    /*<<int32.ml:91:41>>*/ }
   function max(x, y){
     /*<<int32.ml:92:18>>*/ return  /*<<int32.ml:92:21>>*/ caml_greaterequal
              /*<<int32.ml:92:21>>*/ (x, y)
            ? x
            : y /*<<int32.ml:92:41>>*/ ;
    /*<<int32.ml:92:41>>*/ }
   function unsigned_div(n, d){
     /*<<int32.ml:98:2>>*/ if
     ( /*<<int32.ml:98:5>>*/ caml_lessthan /*<<int32.ml:98:5>>*/ (d, 0))
      /*<<int32.ml:99:7>>*/ return  /*<<int32.ml:99:7>>*/ unsigned_lt
               /*<<int32.ml:99:7>>*/ (n, d)
             ? zero
             : one /*<<int32.ml:103:41>>*/ ;
    var
     q =
        /*<<int32.ml:101:12>>*/  /*<<int32.ml:101:23>>*/ runtime.caml_div
         /*<<int32.ml:101:23>>*/ (n >>> 1 | 0, d)
       << 1,
     r =
        /*<<int32.ml:102:12>>*/ n
       -  /*<<int32.ml:102:18>>*/ caml_mul /*<<int32.ml:102:18>>*/ (q, d)
       | 0;
     /*<<int32.ml:103:7>>*/ return  /*<<int32.ml:103:7>>*/ unsigned_lt
              /*<<int32.ml:103:7>>*/ (r, d)
            ? q
            : q + 1 | 0 /*<<int32.ml:103:41>>*/ ;
    /*<<int32.ml:103:41>>*/ }
   function unsigned_rem(n, d){
     /*<<int32.ml:106:2>>*/ return n
           -
             /*<<int32.ml:106:8>>*/ caml_mul
              /*<<int32.ml:106:8>>*/ ( /*<<int32.ml:106:13>>*/ unsigned_div
                /*<<int32.ml:106:13>>*/ (n, d),
              d)
           | 0 /*<<int32.ml:106:2>>*/ ;
    /*<<int32.ml:106:34>>*/ }
   function seeded_hash(seed, x){
     /*<<int32.ml:110:25>>*/ return  /*<<int32.ml:110:25>>*/ caml_hash
             /*<<int32.ml:110:25>>*/ (10, 100, seed, x) /*<<int32.ml:110:56>>*/ ;
    /*<<int32.ml:110:56>>*/ }
   function hash(x){
     /*<<int32.ml:111:13>>*/ return  /*<<int32.ml:111:13>>*/ caml_hash
             /*<<int32.ml:111:13>>*/ (10, 100, 0, x) /*<<int32.ml:111:41>>*/ ;
    /*<<int32.ml:111:41>>*/ }
   var
    Stdlib_Int32 =
      [0,
       zero,
       one,
       minus_one,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal,
       min,
       max,
       seeded_hash,
       hash];
   runtime.caml_register_global(15, Stdlib_Int32, "Stdlib__Int32");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Int64
//# unitInfo: Requires: Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_greaterequal =  /*<<?>>*/ runtime.caml_greaterequal,
    caml_hash =  /*<<?>>*/ runtime.caml_hash,
    caml_int64_add =  /*<<?>>*/ runtime.caml_int64_add,
    caml_int64_compare =  /*<<?>>*/ runtime.caml_int64_compare,
    caml_int64_mul =  /*<<?>>*/ runtime.caml_int64_mul,
    caml_int64_sub =  /*<<?>>*/ runtime.caml_int64_sub,
    caml_lessequal =  /*<<?>>*/ runtime.caml_lessequal,
    caml_lessthan =  /*<<?>>*/ runtime.caml_lessthan,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    _a_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    zero = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    one = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    minus_one = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 65535),
    min_int = runtime.caml_int64_create_lo_mi_hi(0, 0, 32768),
    max_int = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 32767),
    Stdlib = global_data.Stdlib,
    _b_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _c_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _d_ = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 65535);
   function succ(n){
     /*<<int64.ml:46:13>>*/ return  /*<<int64.ml:46:13>>*/ caml_int64_add
             /*<<int64.ml:46:13>>*/ (n, _a_) /*<<int64.ml:46:21>>*/ ;
    /*<<int64.ml:46:21>>*/ }
   function pred(n){
     /*<<int64.ml:47:13>>*/ return  /*<<int64.ml:47:13>>*/ caml_int64_sub
             /*<<int64.ml:47:13>>*/ (n, _b_) /*<<int64.ml:47:21>>*/ ;
    /*<<int64.ml:47:21>>*/ }
   function abs(n){
     /*<<int64.ml:48:12>>*/ return  /*<<int64.ml:48:15>>*/ caml_greaterequal
              /*<<int64.ml:48:15>>*/ (n, _c_)
            ? n
            :  /*<<int64.ml:48:35>>*/ runtime.caml_int64_neg
               /*<<int64.ml:48:35>>*/ (n) /*<<int64.ml:48:40>>*/ ;
    /*<<int64.ml:48:40>>*/ }
   function lognot(n){
     /*<<int64.ml:51:15>>*/ return  /*<<int64.ml:51:15>>*/ runtime.caml_int64_xor
             /*<<int64.ml:51:15>>*/ (n, _d_) /*<<int64.ml:51:29>>*/ ;
    /*<<int64.ml:51:29>>*/ }
   var
    max_int$0 =
       /*<<int64.ml:54:16>>*/  /*<<int64.ml:54:16>>*/ runtime.caml_int64_of_int32
        /*<<int64.ml:54:16>>*/ (Stdlib[19]),
    _e_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0);
   function unsigned_to_int(n){
     /*<<int64.ml:56:4>>*/ if
     ( /*<<int64.ml:56:7>>*/ caml_greaterequal /*<<int64.ml:56:7>>*/ (n, _e_)
      &&
        /*<<int64.ml:56:18>>*/ caml_lessequal
         /*<<int64.ml:56:18>>*/ (n, max_int$0))
      /*<<int64.ml:57:6>>*/ return [0, runtime.caml_int64_to_int32(n)] /*<<int64.ml:57:6>>*/ ;
     /*<<int64.ml:59:6>>*/ return 0 /*<<int64.ml:59:6>>*/ ;
    /*<<int64.ml:59:10>>*/ }
   function to_string(n){
     /*<<int64.ml:62:18>>*/ return  /*<<int64.ml:62:18>>*/ runtime.caml_int64_format
             /*<<int64.ml:62:18>>*/ ("%d", n) /*<<int64.ml:62:31>>*/ ;
    /*<<int64.ml:62:31>>*/ }
   function of_string_opt(s){
     /*<<int64.ml:67:2>>*/ try{
     var
      _g_ =
         /*<<int64.ml:67:6>>*/ [0,
          /*<<int64.ml:67:11>>*/ runtime.caml_int64_of_string
           /*<<int64.ml:67:11>>*/ (s)];
      /*<<int64.ml:67:6>>*/ return _g_ /*<<int64.ml:67:6>>*/ ;
    }
    catch(_h_){
     var _f_ = caml_wrap_exception(_h_);
     if(_f_[1] === Stdlib[7])
       /*<<int64.ml:68:20>>*/ return 0 /*<<int64.ml:68:20>>*/ ;
     throw caml_maybe_attach_backtrace(_f_, 0);
    }
    /*<<int64.ml:68:24>>*/ }
   function compare(x, y){
     /*<<int64.ml:79:28>>*/ return  /*<<int64.ml:79:28>>*/ caml_int64_compare
             /*<<int64.ml:79:28>>*/ (x, y) /*<<int64.ml:79:46>>*/ ;
    /*<<int64.ml:79:46>>*/ }
   var equal = runtime.caml_equal;
   function unsigned_compare(n, m){
    var
     y =
        /*<<int64.ml:83:26>>*/  /*<<int64.ml:83:26>>*/ caml_int64_sub
         /*<<int64.ml:83:26>>*/ (m, min_int),
     x =
        /*<<int64.ml:83:10>>*/  /*<<int64.ml:83:10>>*/ caml_int64_sub
         /*<<int64.ml:83:10>>*/ (n, min_int);
     /*<<int64.ml:79:28>>*/ return  /*<<int64.ml:79:28>>*/ caml_int64_compare
             /*<<int64.ml:79:28>>*/ (x, y) /*<<int64.ml:83:41>>*/ ;
    /*<<int64.ml:83:41>>*/ }
   function unsigned_lt(n, m){
     /*<<int64.ml:86:2>>*/ return  /*<<int64.ml:86:2>>*/ caml_lessthan
             /*<<int64.ml:86:2>>*/ ( /*<<int64.ml:86:2>>*/ caml_int64_sub
               /*<<int64.ml:86:2>>*/ (n, min_int),
              /*<<int64.ml:86:18>>*/ caml_int64_sub
               /*<<int64.ml:86:18>>*/ (m, min_int)) /*<<int64.ml:86:31>>*/ ;
    /*<<int64.ml:86:31>>*/ }
   function min(x, y){
     /*<<int64.ml:88:18>>*/ return  /*<<int64.ml:88:21>>*/ caml_lessequal
              /*<<int64.ml:88:21>>*/ (x, y)
            ? x
            : y /*<<int64.ml:88:41>>*/ ;
    /*<<int64.ml:88:41>>*/ }
   function max(x, y){
     /*<<int64.ml:89:18>>*/ return  /*<<int64.ml:89:21>>*/ caml_greaterequal
              /*<<int64.ml:89:21>>*/ (x, y)
            ? x
            : y /*<<int64.ml:89:41>>*/ ;
    /*<<int64.ml:89:41>>*/ }
   function unsigned_div(n, d){
     /*<<int64.ml:95:2>>*/ if
     ( /*<<int64.ml:95:5>>*/ caml_lessthan /*<<int64.ml:95:5>>*/ (d, zero))
      /*<<int64.ml:96:7>>*/ return  /*<<int64.ml:96:7>>*/ unsigned_lt
               /*<<int64.ml:96:7>>*/ (n, d)
             ? zero
             : one /*<<int64.ml:100:41>>*/ ;
    var
     q =
        /*<<int64.ml:98:12>>*/  /*<<int64.ml:98:12>>*/ runtime.caml_int64_shift_left
         /*<<int64.ml:98:12>>*/ ( /*<<int64.ml:98:23>>*/ runtime.caml_int64_div
           /*<<int64.ml:98:23>>*/ ( /*<<int64.ml:98:28>>*/ runtime.caml_int64_shift_right_unsigned
             /*<<int64.ml:98:28>>*/ (n, 1),
           d),
         1),
     r =
        /*<<int64.ml:99:12>>*/  /*<<int64.ml:99:12>>*/ caml_int64_sub
         /*<<int64.ml:99:12>>*/ (n,
          /*<<int64.ml:99:18>>*/ caml_int64_mul /*<<int64.ml:99:18>>*/ (q, d));
     /*<<int64.ml:100:7>>*/ return  /*<<int64.ml:100:7>>*/ unsigned_lt
              /*<<int64.ml:100:7>>*/ (r, d)
            ? q
            :  /*<<int64.ml:46:13>>*/ caml_int64_add
               /*<<int64.ml:46:13>>*/ (q, _a_) /*<<int64.ml:100:41>>*/ ;
    /*<<int64.ml:100:41>>*/ }
   function unsigned_rem(n, d){
     /*<<int64.ml:103:2>>*/ return  /*<<int64.ml:103:2>>*/ caml_int64_sub
             /*<<int64.ml:103:2>>*/ (n,
              /*<<int64.ml:103:8>>*/ caml_int64_mul
               /*<<int64.ml:103:8>>*/ ( /*<<int64.ml:103:13>>*/ unsigned_div
                 /*<<int64.ml:103:13>>*/ (n, d),
               d)) /*<<int64.ml:103:34>>*/ ;
    /*<<int64.ml:103:34>>*/ }
   function seeded_hash(seed, x){
     /*<<int64.ml:107:25>>*/ return  /*<<int64.ml:107:25>>*/ caml_hash
             /*<<int64.ml:107:25>>*/ (10, 100, seed, x) /*<<int64.ml:107:56>>*/ ;
    /*<<int64.ml:107:56>>*/ }
   function hash(x){
     /*<<int64.ml:108:13>>*/ return  /*<<int64.ml:108:13>>*/ caml_hash
             /*<<int64.ml:108:13>>*/ (10, 100, 0, x) /*<<int64.ml:108:41>>*/ ;
    /*<<int64.ml:108:41>>*/ }
   var
    Stdlib_Int64 =
      [0,
       zero,
       one,
       minus_one,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal,
       min,
       max,
       seeded_hash,
       hash];
   runtime.caml_register_global(12, Stdlib_Int64, "Stdlib__Int64");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Nativeint
//# unitInfo: Requires: Stdlib, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_greaterequal =  /*<<?>>*/ runtime.caml_greaterequal,
    caml_hash =  /*<<?>>*/ runtime.caml_hash,
    caml_int_compare =  /*<<?>>*/ runtime.caml_int_compare,
    caml_lessequal =  /*<<?>>*/ runtime.caml_lessequal,
    caml_lessthan =  /*<<?>>*/ runtime.caml_lessthan,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_mul =  /*<<?>>*/ runtime.caml_mul,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    zero = 0,
    one = 1;
   function succ(n){
     /*<<nativeint.ml:44:13>>*/ return n + 1 | 0 /*<<nativeint.ml:44:13>>*/ ;
    /*<<nativeint.ml:44:21>>*/ }
   function pred(n){
     /*<<nativeint.ml:45:13>>*/ return n - 1 | 0 /*<<nativeint.ml:45:13>>*/ ;
    /*<<nativeint.ml:45:21>>*/ }
   function abs(n){
     /*<<nativeint.ml:46:12>>*/ return  /*<<nativeint.ml:46:15>>*/ caml_greaterequal
              /*<<nativeint.ml:46:15>>*/ (n, 0)
            ? n
            : - n | 0 /*<<nativeint.ml:46:40>>*/ ;
    /*<<nativeint.ml:46:40>>*/ }
   var
    size =  /*<<nativeint.ml:46:8>>*/ Stdlib_Sys[9],
    min_int =  /*<<nativeint.ml:48:14>>*/ 1 << (size - 1 | 0),
    max_int =  /*<<nativeint.ml:49:14>>*/ min_int - 1 | 0;
   function lognot(n){
     /*<<nativeint.ml:50:15>>*/ return n ^ -1 /*<<nativeint.ml:50:15>>*/ ;
    /*<<nativeint.ml:50:29>>*/ }
   var max_int$0 =  /*<<nativeint.ml:50:11>>*/ Stdlib[19];
   function unsigned_to_int(n){
     /*<<nativeint.ml:55:4>>*/ if
     ( /*<<nativeint.ml:55:7>>*/ caml_greaterequal
        /*<<nativeint.ml:55:7>>*/ (n, 0)
      &&
        /*<<nativeint.ml:55:18>>*/ caml_lessequal
         /*<<nativeint.ml:55:18>>*/ (n, max_int$0))
      /*<<nativeint.ml:56:6>>*/ return [0, n] /*<<nativeint.ml:56:6>>*/ ;
     /*<<nativeint.ml:58:6>>*/ return 0 /*<<nativeint.ml:58:6>>*/ ;
    /*<<nativeint.ml:58:10>>*/ }
   function to_string(n){
     /*<<nativeint.ml:61:18>>*/ return  /*<<nativeint.ml:61:18>>*/ runtime.caml_format_int
             /*<<nativeint.ml:61:18>>*/ ("%d", n) /*<<nativeint.ml:61:31>>*/ ;
    /*<<nativeint.ml:61:31>>*/ }
   function of_string_opt(s){
     /*<<nativeint.ml:66:2>>*/ try{
     var
      _b_ =
         /*<<nativeint.ml:66:6>>*/ [0,
          /*<<nativeint.ml:66:11>>*/ runtime.caml_int_of_string
           /*<<nativeint.ml:66:11>>*/ (s)];
      /*<<nativeint.ml:66:6>>*/ return _b_ /*<<nativeint.ml:66:6>>*/ ;
    }
    catch(_c_){
     var _a_ = caml_wrap_exception(_c_);
     if(_a_[1] === Stdlib[7])
       /*<<nativeint.ml:67:20>>*/ return 0 /*<<nativeint.ml:67:20>>*/ ;
     throw caml_maybe_attach_backtrace(_a_, 0);
    }
    /*<<nativeint.ml:67:24>>*/ }
   var compare = caml_int_compare;
   function equal(x, y){
     /*<<nativeint.ml:72:26>>*/ return 0
            ===
              /*<<nativeint.ml:71:28>>*/ caml_int_compare
               /*<<nativeint.ml:71:28>>*/ (x, y)
            ? 1
            : 0;
    /*<<nativeint.ml:72:41>>*/ }
   function unsigned_compare(n, m){
    var
     y =  /*<<nativeint.ml:75:26>>*/ m - min_int | 0,
     x =  /*<<nativeint.ml:75:10>>*/ n - min_int | 0;
     /*<<nativeint.ml:71:28>>*/ return  /*<<nativeint.ml:71:28>>*/ caml_int_compare
             /*<<nativeint.ml:71:28>>*/ (x, y) /*<<nativeint.ml:75:41>>*/ ;
    /*<<nativeint.ml:75:41>>*/ }
   function unsigned_lt(n, m){
     /*<<nativeint.ml:78:2>>*/ return  /*<<nativeint.ml:78:2>>*/ caml_lessthan
             /*<<nativeint.ml:78:2>>*/ (n - min_int | 0, m - min_int | 0) /*<<nativeint.ml:78:31>>*/ ;
    /*<<nativeint.ml:78:31>>*/ }
   function min(x, y){
     /*<<nativeint.ml:80:18>>*/ return  /*<<nativeint.ml:80:21>>*/ caml_lessequal
              /*<<nativeint.ml:80:21>>*/ (x, y)
            ? x
            : y /*<<nativeint.ml:80:41>>*/ ;
    /*<<nativeint.ml:80:41>>*/ }
   function max(x, y){
     /*<<nativeint.ml:81:18>>*/ return  /*<<nativeint.ml:81:21>>*/ caml_greaterequal
              /*<<nativeint.ml:81:21>>*/ (x, y)
            ? x
            : y /*<<nativeint.ml:81:41>>*/ ;
    /*<<nativeint.ml:81:41>>*/ }
   function unsigned_div(n, d){
     /*<<nativeint.ml:87:2>>*/ if
     ( /*<<nativeint.ml:87:5>>*/ caml_lessthan
        /*<<nativeint.ml:87:5>>*/ (d, 0))
      /*<<nativeint.ml:88:7>>*/ return  /*<<nativeint.ml:88:7>>*/ unsigned_lt
               /*<<nativeint.ml:88:7>>*/ (n, d)
             ? zero
             : one /*<<nativeint.ml:92:41>>*/ ;
    var
     q =
        /*<<nativeint.ml:90:12>>*/  /*<<nativeint.ml:90:23>>*/ runtime.caml_div
         /*<<nativeint.ml:90:23>>*/ (n >>> 1 | 0, d)
       << 1,
     r =
        /*<<nativeint.ml:91:12>>*/ n
       -
         /*<<nativeint.ml:91:18>>*/ caml_mul /*<<nativeint.ml:91:18>>*/ (q, d)
       | 0;
     /*<<nativeint.ml:92:7>>*/ return  /*<<nativeint.ml:92:7>>*/ unsigned_lt
              /*<<nativeint.ml:92:7>>*/ (r, d)
            ? q
            : q + 1 | 0 /*<<nativeint.ml:92:41>>*/ ;
    /*<<nativeint.ml:92:41>>*/ }
   function unsigned_rem(n, d){
     /*<<nativeint.ml:95:2>>*/ return n
           -
             /*<<nativeint.ml:95:8>>*/ caml_mul
              /*<<nativeint.ml:95:8>>*/ ( /*<<nativeint.ml:95:13>>*/ unsigned_div
                /*<<nativeint.ml:95:13>>*/ (n, d),
              d)
           | 0 /*<<nativeint.ml:95:2>>*/ ;
    /*<<nativeint.ml:95:34>>*/ }
   function seeded_hash(seed, x){
     /*<<nativeint.ml:99:25>>*/ return  /*<<nativeint.ml:99:25>>*/ caml_hash
             /*<<nativeint.ml:99:25>>*/ (10, 100, seed, x) /*<<nativeint.ml:99:56>>*/ ;
    /*<<nativeint.ml:99:56>>*/ }
   function hash(x){
     /*<<nativeint.ml:100:13>>*/ return  /*<<nativeint.ml:100:13>>*/ caml_hash
             /*<<nativeint.ml:100:13>>*/ (10, 100, 0, x) /*<<nativeint.ml:100:41>>*/ ;
    /*<<nativeint.ml:100:41>>*/ }
   var
    Stdlib_Nativeint =
      [0,
       zero,
       one,
       -1,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       size,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal,
       min,
       max,
       seeded_hash,
       hash];
   runtime.caml_register_global(13, Stdlib_Nativeint, "Stdlib__Nativeint");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Lexing
//# unitInfo: Requires: Stdlib, Stdlib__Bytes, Stdlib__Int, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst =  /*<<?>>*/ "",
    caml_bytes_get =  /*<<?>>*/ runtime.caml_bytes_get,
    caml_check_bound =  /*<<?>>*/ runtime.caml_check_bound,
    caml_create_bytes =  /*<<?>>*/ runtime.caml_create_bytes,
    caml_ml_bytes_length =  /*<<?>>*/ runtime.caml_ml_bytes_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    dummy_pos = [0, cst, 0, 0, -1],
    zero_pos = [0, cst, 1, 0, 0],
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Int = global_data.Stdlib__Int,
    cst_Lexing_lex_refill_cannot_g = "Lexing.lex_refill: cannot grow buffer";
   function engine(tbl, state, buf){
    var
     result =
        /*<<lexing.ml:65:15>>*/  /*<<lexing.ml:65:15>>*/ runtime.caml_lex_engine
         /*<<lexing.ml:65:15>>*/ (tbl, state, buf),
     _n_ = 0 <= result ? 1 : 0,
     _o_ = _n_ ? buf[12] !== dummy_pos ? 1 : 0 : _n_;
    if(_o_){
     buf[11] = buf[12];
     var _p_ = buf[12];
     buf[12] = [0, _p_[1], _p_[2], _p_[3], buf[4] + buf[6] | 0];
    }
     /*<<lexing.ml:71:2>>*/ return result /*<<lexing.ml:71:2>>*/ ;
    /*<<lexing.ml:71:8>>*/ }
   function new_engine(tbl, state, buf){
    var
     result =
        /*<<lexing.ml:75:15>>*/  /*<<lexing.ml:75:15>>*/ runtime.caml_new_lex_engine
         /*<<lexing.ml:75:15>>*/ (tbl, state, buf),
     _k_ = 0 <= result ? 1 : 0,
     _l_ = _k_ ? buf[12] !== dummy_pos ? 1 : 0 : _k_;
    if(_l_){
     buf[11] = buf[12];
     var _m_ = buf[12];
     buf[12] = [0, _m_[1], _m_[2], _m_[3], buf[4] + buf[6] | 0];
    }
     /*<<lexing.ml:81:2>>*/ return result /*<<lexing.ml:81:2>>*/ ;
    /*<<lexing.ml:81:8>>*/ }
   function from_function(opt, read_fun){
    var
     with_positions = opt ? opt[1] : 1,
     _f_ =  /*<<lexing.ml:148:2>>*/ with_positions ? zero_pos : dummy_pos,
     _g_ = with_positions ? zero_pos : dummy_pos,
     aux_buffer =
        /*<<lexing.ml:148:31>>*/  /*<<lexing.ml:148:31>>*/ caml_create_bytes
         /*<<lexing.ml:148:31>>*/ (512);
     /*<<lexing.ml:148:2>>*/ return [0,
            function(lexbuf){
             var
              read =
                 /*<<lexing.ml:85:4>>*/  /*<<lexing.ml:85:4>>*/ caml_call2
                  /*<<lexing.ml:85:4>>*/ (read_fun,
                  aux_buffer,
                  caml_ml_bytes_length(aux_buffer)),
              n =  /*<<lexing.ml:86:2>>*/ 0 < read ? read : (lexbuf[9] = 1, 0);
             if(caml_ml_bytes_length(lexbuf[2]) < (lexbuf[3] + n | 0)){
              if
               (((lexbuf[3] - lexbuf[5] | 0) + n | 0)
                <= caml_ml_bytes_length(lexbuf[2]))
                /*<<lexing.ml:100:9>>*/  /*<<lexing.ml:100:9>>*/ caml_call5
                 /*<<lexing.ml:100:9>>*/ (Stdlib_Bytes[11],
                 lexbuf[2],
                 lexbuf[5],
                 lexbuf[2],
                 0,
                 lexbuf[3] - lexbuf[5] | 0);
              else{
               var
                newlen =
                   /*<<lexing.ml:111:8>>*/  /*<<lexing.ml:111:8>>*/ caml_call2
                    /*<<lexing.ml:111:8>>*/ (Stdlib_Int[10],
                    2 * caml_ml_bytes_length(lexbuf[2]) | 0,
                    Stdlib_Sys[12]);
               if(newlen < ((lexbuf[3] - lexbuf[5] | 0) + n | 0))
                 /*<<lexing.ml:113:11>>*/  /*<<lexing.ml:113:11>>*/ caml_call1
                  /*<<lexing.ml:113:11>>*/ (Stdlib[2],
                  cst_Lexing_lex_refill_cannot_g);
               var
                newbuf =
                   /*<<lexing.ml:114:19>>*/  /*<<lexing.ml:114:19>>*/ caml_create_bytes
                    /*<<lexing.ml:114:19>>*/ (newlen);
                /*<<lexing.ml:116:6>>*/  /*<<lexing.ml:116:6>>*/ caml_call5
                 /*<<lexing.ml:116:6>>*/ (Stdlib_Bytes[11],
                 lexbuf[2],
                 lexbuf[5],
                 newbuf,
                 0,
                 lexbuf[3] - lexbuf[5] | 0);
               lexbuf[2] = newbuf;
              }
              var s = lexbuf[5];
              lexbuf[4] = lexbuf[4] + s | 0;
              lexbuf[6] = lexbuf[6] - s | 0;
              lexbuf[5] = 0;
              lexbuf[7] = lexbuf[7] - s | 0;
              lexbuf[3] = lexbuf[3] - s | 0;
              var t = lexbuf[10], _i_ = t.length - 2 | 0, _h_ = 0;
              if(_i_ >= 0){
               var i = _h_;
               for(;;){
                var
                 v =  /*<<lexing.ml:131:14>>*/ caml_check_bound(t, i)[1 + i];
                if(0 <= v)
                  /*<<lexing.ml:133:8>>*/ caml_check_bound(t, i)[1 + i] = v - s | 0;
                var _j_ =  /*<<lexing.ml:130:4>>*/ i + 1 | 0;
                if(_i_ === i) break;
                i = _j_;
               }
              }
             }
              /*<<lexing.ml:137:2>>*/  /*<<lexing.ml:137:2>>*/ caml_call5
               /*<<lexing.ml:137:2>>*/ (Stdlib_Bytes[11],
               aux_buffer,
               0,
               lexbuf[2],
               lexbuf[3],
               n);
             lexbuf[3] = lexbuf[3] + n | 0;
             return 0;
            },
             /*<<lexing.ml:149:17>>*/ caml_create_bytes
              /*<<lexing.ml:149:17>>*/ (1024),
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            [0],
            _g_,
            _f_] /*<<lexing.ml:148:2>>*/ ;
    /*<<lexing.ml:160:3>>*/ }
   function from_channel(with_positions, ic){
     /*<<lexing.ml:163:2>>*/ return  /*<<lexing.ml:163:32>>*/ from_function
             /*<<lexing.ml:163:32>>*/ (with_positions,
             function(buf, n){
               /*<<lexing.ml:163:46>>*/ return  /*<<lexing.ml:163:46>>*/ caml_call4
                       /*<<lexing.ml:163:46>>*/ (Stdlib[84], ic, buf, 0, n) /*<<lexing.ml:163:62>>*/ ;
              /*<<lexing.ml:163:62>>*/ }) /*<<lexing.ml:163:63>>*/ ;
    /*<<lexing.ml:163:63>>*/ }
   function from_string(opt, s){
    var
     with_positions = opt ? opt[1] : 1,
     _d_ =  /*<<lexing.ml:166:2>>*/ with_positions ? zero_pos : dummy_pos,
     _e_ = with_positions ? zero_pos : dummy_pos;
     /*<<lexing.ml:166:2>>*/ return [0,
            function(lexbuf){
              /*<<lexing.ml:166:33>>*/ lexbuf[9] = 1;
             return 0;
             /*<<lexing.ml:166:63>>*/ },
             /*<<lexing.ml:167:17>>*/ caml_call1
              /*<<lexing.ml:167:17>>*/ (Stdlib_Bytes[5], s),
            runtime.caml_ml_string_length(s),
            0,
            0,
            0,
            0,
            0,
            1,
            [0],
            _e_,
            _d_] /*<<lexing.ml:166:2>>*/ ;
    /*<<lexing.ml:179:3>>*/ }
   function set_position(lexbuf, position){
     /*<<lexing.ml:182:2>>*/ lexbuf[12] =
     [0, lexbuf[12][1], position[2], position[3], position[4]];
    lexbuf[4] = position[4];
    return 0;
    /*<<lexing.ml:183:41>>*/ }
   function set_filename(lexbuf, fname){
    var _c_ = lexbuf[12];
    lexbuf[12] = [0, fname, _c_[2], _c_[3], _c_[4]];
    return 0;
    /*<<lexing.ml:186:65>>*/ }
   function with_positions(lexbuf){
     /*<<lexing.ml:188:28>>*/ return lexbuf[12] !== dummy_pos ? 1 : 0;
    /*<<lexing.ml:188:58>>*/ }
   function lexeme(lexbuf){
    var len = lexbuf[6] - lexbuf[5] | 0;
     /*<<lexing.ml:192:2>>*/ return  /*<<lexing.ml:192:2>>*/ caml_call3
             /*<<lexing.ml:192:2>>*/ (Stdlib_Bytes[8],
             lexbuf[2],
             lexbuf[5],
             len) /*<<lexing.ml:192:61>>*/ ;
    /*<<lexing.ml:192:61>>*/ }
   function sub_lexeme(lexbuf, i1, i2){
    var len = i2 - i1 | 0;
     /*<<lexing.ml:196:2>>*/ return  /*<<lexing.ml:196:2>>*/ caml_call3
             /*<<lexing.ml:196:2>>*/ (Stdlib_Bytes[8], lexbuf[2], i1, len) /*<<lexing.ml:196:43>>*/ ;
    /*<<lexing.ml:196:43>>*/ }
   function sub_lexeme_opt(lexbuf, i1, i2){
     /*<<lexing.ml:199:2>>*/ if(0 > i1)
      /*<<lexing.ml:202:11>>*/ return 0 /*<<lexing.ml:202:11>>*/ ;
    var len = i2 - i1 | 0;
     /*<<lexing.ml:201:4>>*/ return [0,
             /*<<lexing.ml:201:9>>*/ caml_call3
              /*<<lexing.ml:201:9>>*/ (Stdlib_Bytes[8], lexbuf[2], i1, len)] /*<<lexing.ml:201:4>>*/ ;
    /*<<lexing.ml:204:5>>*/ }
   function sub_lexeme_char(lexbuf, i){
     /*<<lexing.ml:206:31>>*/ return  /*<<lexing.ml:206:31>>*/ caml_bytes_get
             /*<<lexing.ml:206:31>>*/ (lexbuf[2], i) /*<<lexing.ml:206:60>>*/ ;
    /*<<lexing.ml:206:60>>*/ }
   function sub_lexeme_char_opt(lexbuf, i){
     /*<<lexing.ml:209:2>>*/ return 0 <= i
            ? [0,
               /*<<lexing.ml:210:9>>*/ caml_bytes_get
                /*<<lexing.ml:210:9>>*/ (lexbuf[2], i)]
            : 0 /*<<lexing.ml:212:8>>*/ ;
    /*<<lexing.ml:212:8>>*/ }
   function lexeme_char(lexbuf, i){
     /*<<lexing.ml:216:2>>*/ return  /*<<lexing.ml:216:2>>*/ caml_bytes_get
             /*<<lexing.ml:216:2>>*/ (lexbuf[2], lexbuf[5] + i | 0) /*<<lexing.ml:216:56>>*/ ;
    /*<<lexing.ml:216:56>>*/ }
   function lexeme_start(lexbuf){
     /*<<lexing.ml:218:26>>*/ return lexbuf[11][4];
    /*<<lexing.ml:218:53>>*/ }
   function lexeme_end(lexbuf){
     /*<<lexing.ml:219:24>>*/ return lexbuf[12][4];
    /*<<lexing.ml:219:50>>*/ }
   function lexeme_start_p(lexbuf){
     /*<<lexing.ml:221:28>>*/ return lexbuf[11];
    /*<<lexing.ml:221:46>>*/ }
   function lexeme_end_p(lexbuf){
     /*<<lexing.ml:222:26>>*/ return lexbuf[12];
    /*<<lexing.ml:222:43>>*/ }
   function new_line(lexbuf){
    var
     lcp = lexbuf[12],
     _a_ = lcp !== dummy_pos ? 1 : 0,
     _b_ =
       _a_
        ? (lexbuf[12] = [0, lcp[1], lcp[2] + 1 | 0, lcp[4], lcp[4]], 0)
        : _a_;
    return _b_;
    /*<<lexing.ml:231:7>>*/ }
   function flush_input(lb){
     /*<<lexing.ml:238:2>>*/ lb[6] = 0;
    lb[4] = 0;
    var lcp = lb[12];
    if(lcp !== dummy_pos)
     lb[12] = [0, lcp[1], zero_pos[2], zero_pos[3], zero_pos[4]];
    lb[3] = 0;
    return 0;
    /*<<lexing.ml:243:25>>*/ }
   var
    Stdlib_Lexing =
      [0,
       dummy_pos,
       from_channel,
       from_string,
       from_function,
       set_position,
       set_filename,
       with_positions,
       lexeme,
       lexeme_char,
       lexeme_start,
       lexeme_end,
       lexeme_start_p,
       lexeme_end_p,
       new_line,
       flush_input,
       sub_lexeme,
       sub_lexeme_opt,
       sub_lexeme_char,
       sub_lexeme_char_opt,
       engine,
       new_engine];
   runtime.caml_register_global(7, Stdlib_Lexing, "Stdlib__Lexing");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Parsing
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__Lexing, Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_check_bound =  /*<<?>>*/ runtime.caml_check_bound,
    caml_fresh_oo_id =  /*<<?>>*/ runtime.caml_fresh_oo_id,
    caml_make_vect =  /*<<?>>*/ runtime.caml_make_vect,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Obj = global_data.Stdlib__Obj,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    YYexit =
       /*<<parsing.ml:59:0>>*/ [248,
       "Stdlib.Parsing.YYexit",
       caml_fresh_oo_id(0)],
    Parse_error =
       /*<<parsing.ml:60:0>>*/ [248,
       "Stdlib.Parsing.Parse_error",
       caml_fresh_oo_id(0)],
    env =
       /*<<parsing.ml:90:2>>*/ [0,
        /*<<parsing.ml:90:14>>*/ caml_make_vect
         /*<<parsing.ml:90:14>>*/ (100, 0),
        /*<<parsing.ml:91:14>>*/ caml_make_vect
         /*<<parsing.ml:91:14>>*/ (100, 0),
        /*<<parsing.ml:92:23>>*/ caml_make_vect
         /*<<parsing.ml:92:23>>*/ (100, Stdlib_Lexing[1]),
        /*<<parsing.ml:93:21>>*/ caml_make_vect
         /*<<parsing.ml:93:21>>*/ (100, Stdlib_Lexing[1]),
       100,
       0,
       0,
       0,
       Stdlib_Lexing[1],
       Stdlib_Lexing[1],
       0,
       0,
       0,
       0,
       0,
       0],
    dummy = 0;
   function grow_stacks(param){
    var
     oldsize = env[5],
     newsize = oldsize * 2 | 0,
     new_s =
        /*<<parsing.ml:110:14>>*/  /*<<parsing.ml:110:14>>*/ caml_make_vect
         /*<<parsing.ml:110:14>>*/ (newsize, 0),
     new_v =
        /*<<parsing.ml:111:14>>*/  /*<<parsing.ml:111:14>>*/ caml_make_vect
         /*<<parsing.ml:111:14>>*/ (newsize, 0),
     new_start =
        /*<<parsing.ml:112:18>>*/  /*<<parsing.ml:112:18>>*/ caml_make_vect
         /*<<parsing.ml:112:18>>*/ (newsize, Stdlib_Lexing[1]),
     new_end =
        /*<<parsing.ml:113:16>>*/  /*<<parsing.ml:113:16>>*/ caml_make_vect
         /*<<parsing.ml:113:16>>*/ (newsize, Stdlib_Lexing[1]);
     /*<<parsing.ml:114:4>>*/  /*<<parsing.ml:114:4>>*/ caml_call5
      /*<<parsing.ml:114:4>>*/ (Stdlib_Array[9], env[1], 0, new_s, 0, oldsize);
    env[1] = new_s;
     /*<<parsing.ml:116:4>>*/  /*<<parsing.ml:116:4>>*/ caml_call5
      /*<<parsing.ml:116:4>>*/ (Stdlib_Array[9], env[2], 0, new_v, 0, oldsize);
    env[2] = new_v;
     /*<<parsing.ml:118:4>>*/  /*<<parsing.ml:118:4>>*/ caml_call5
      /*<<parsing.ml:118:4>>*/ (Stdlib_Array[9],
      env[3],
      0,
      new_start,
      0,
      oldsize);
    env[3] = new_start;
     /*<<parsing.ml:120:4>>*/  /*<<parsing.ml:120:4>>*/ caml_call5
      /*<<parsing.ml:120:4>>*/ (Stdlib_Array[9],
      env[4],
      0,
      new_end,
      0,
      oldsize);
    env[4] = new_end;
    env[5] = newsize;
    /*<<parsing.ml:122:28>>*/ }
   function clear_parser(param){
     /*<<parsing.ml:125:2>>*/  /*<<parsing.ml:125:2>>*/ caml_call4
      /*<<parsing.ml:125:2>>*/ (Stdlib_Array[8], env[2], 0, env[5], 0);
    env[8] = 0;
    return 0;
    /*<<parsing.ml:126:25>>*/ }
   var
    current_lookahead_fun =
       /*<<parsing.ml:128:28>>*/ [0,
       function(param){
         /*<<parsing.ml:128:52>>*/ return 0 /*<<parsing.ml:128:52>>*/ ;
        /*<<parsing.ml:128:57>>*/ }],
    cst_syntax_error = "syntax error";
   function yyparse(tables, start, lexer, lexbuf){
    var
     init_asp = env[11],
     init_sp = env[14],
     init_stackbase = env[6],
     init_state = env[15],
     init_curr_char = env[7],
     init_lval = env[8],
     init_errflag = env[16];
    env[6] = env[14] + 1 | 0;
    env[7] = start;
    env[10] = lexbuf[12];
     /*<<parsing.ml:164:2>>*/ try{
     var cmd = 0, arg = 0;
      /*<<parsing.ml:132:4>>*/ for(;;)
      switch
       ( /*<<parsing.ml:132:10>>*/ runtime.caml_parse_engine
          /*<<parsing.ml:132:10>>*/ (tables, env, cmd, arg)){
        case 0:
         var
          arg$0 =
             /*<<parsing.ml:134:24>>*/  /*<<parsing.ml:134:24>>*/ caml_call1
              /*<<parsing.ml:134:24>>*/ (lexer, lexbuf);
         env[9] = lexbuf[11];
         env[10] = lexbuf[12];
         cmd = 1;
         arg = arg$0;
         break;
        case 1:
          /*<<parsing.ml:139:8>>*/ throw  /*<<parsing.ml:139:8>>*/ caml_maybe_attach_backtrace
                 /*<<parsing.ml:139:8>>*/ (Parse_error, 1);
        case 2:
          /*<<parsing.ml:148:8>>*/  /*<<parsing.ml:148:8>>*/ grow_stacks
           /*<<parsing.ml:148:8>>*/ (0);
         cmd = 2;
         arg = 0;
         break;
        case 3:
          /*<<parsing.ml:150:8>>*/  /*<<parsing.ml:150:8>>*/ grow_stacks
           /*<<parsing.ml:150:8>>*/ (0);
         cmd = 3;
         arg = 0;
         break;
        case 4:
         try{
          var
           _i_ = env[13],
           _j_ =
              /*<<parsing.ml:143:39>>*/  /*<<parsing.ml:143:39>>*/ caml_call1
               /*<<parsing.ml:143:39>>*/ (caml_check_bound(tables[1], _i_)
                [1 + _i_],
               env),
           _k_ =  /*<<parsing.ml:143:39>>*/ 4,
           value = _j_,
           action = _k_;
         }
         catch(_m_){
          var _h_ = caml_wrap_exception(_m_);
          if(_h_ !== Parse_error) throw caml_maybe_attach_backtrace(_h_, 0);
          var value = 0, action = 5;
         }
         cmd = action;
         arg = value;
         break;
        default:
          /*<<parsing.ml:152:8>>*/  /*<<parsing.ml:152:8>>*/ caml_call1
           /*<<parsing.ml:152:8>>*/ (tables[14], cst_syntax_error);
         cmd = 5;
         arg = 0;
      }
    }
    catch(exn$0){
     var
      exn = caml_wrap_exception(exn$0),
      curr_char =  /*<<parsing.ml:167:4>>*/ env[7];
     env[11] = init_asp;
     env[14] = init_sp;
     env[6] = init_stackbase;
     env[15] = init_state;
     env[7] = init_curr_char;
     env[8] = init_lval;
     env[16] = init_errflag;
     if(exn[1] === YYexit){
      var v = exn[2];
       /*<<parsing.ml:177:8>>*/ return v /*<<parsing.ml:177:8>>*/ ;
     }
     current_lookahead_fun[1] =
      function(tok){
        /*<<parsing.ml:181:12>>*/ if
        (!
          /*<<parsing.ml:181:15>>*/ caml_call1
           /*<<parsing.ml:181:15>>*/ (Stdlib_Obj[1], tok))
         /*<<parsing.ml:183:17>>*/ return caml_check_bound(tables[2], tok)
                 [1 + tok]
                === curr_char
                ? 1
                : 0 /*<<parsing.ml:183:17>>*/ ;
       var
        _l_ =
           /*<<parsing.ml:182:38>>*/  /*<<parsing.ml:182:38>>*/ runtime.caml_obj_tag
            /*<<parsing.ml:182:38>>*/ (tok);
        /*<<parsing.ml:182:17>>*/ return caml_check_bound(tables[3], _l_)
                [1 + _l_]
               === curr_char
               ? 1
               : 0 /*<<parsing.ml:182:17>>*/ ;
       /*<<parsing.ml:183:64>>*/ };
      /*<<parsing.ml:184:8>>*/ throw  /*<<parsing.ml:184:8>>*/ caml_maybe_attach_backtrace
             /*<<parsing.ml:184:8>>*/ (exn, 0);
    }
    /*<<parsing.ml:184:17>>*/ }
   function peek_val(env, n){
    var _g_ = env[11] - n | 0;
     /*<<parsing.ml:187:12>>*/ return caml_check_bound(env[2], _g_)[1 + _g_] /*<<parsing.ml:187:12>>*/ ;
    /*<<parsing.ml:187:37>>*/ }
   function symbol_start_pos(param){
    var i$1 = env[12], i = i$1;
     /*<<parsing.ml:191:4>>*/ for(;;){
     if(0 >= i){
      var _f_ = env[11];
       /*<<parsing.ml:191:19>>*/ return caml_check_bound(env[4], _f_)[1 + _f_] /*<<parsing.ml:191:19>>*/ ;
     }
     var
      _d_ = (env[11] - i | 0) + 1 | 0,
      st =  /*<<parsing.ml:193:15>>*/ caml_check_bound(env[3], _d_)[1 + _d_],
      _e_ = (env[11] - i | 0) + 1 | 0,
      en =  /*<<parsing.ml:194:15>>*/ caml_check_bound(env[4], _e_)[1 + _e_];
      /*<<parsing.ml:195:9>>*/ if
      ( /*<<parsing.ml:195:9>>*/ runtime.caml_notequal
         /*<<parsing.ml:195:9>>*/ (st, en))
       /*<<parsing.ml:195:23>>*/ return st /*<<parsing.ml:195:23>>*/ ;
     var i$0 =  /*<<parsing.ml:195:31>>*/ i - 1 | 0;
     i = i$0;
    }
    /*<<parsing.ml:198:19>>*/ }
   function symbol_end_pos(param){
    var _c_ = env[11];
     /*<<parsing.ml:200:24>>*/ return caml_check_bound(env[4], _c_)[1 + _c_] /*<<parsing.ml:200:24>>*/ ;
    /*<<parsing.ml:200:52>>*/ }
   function rhs_start_pos(n){
    var _b_ = env[11] - (env[12] - n | 0) | 0;
     /*<<parsing.ml:201:22>>*/ return caml_check_bound(env[3], _b_)[1 + _b_] /*<<parsing.ml:201:22>>*/ ;
    /*<<parsing.ml:201:73>>*/ }
   function rhs_end_pos(n){
    var _a_ = env[11] - (env[12] - n | 0) | 0;
     /*<<parsing.ml:202:20>>*/ return caml_check_bound(env[4], _a_)[1 + _a_] /*<<parsing.ml:202:20>>*/ ;
    /*<<parsing.ml:202:69>>*/ }
   function symbol_start(param){
     /*<<parsing.ml:204:22>>*/ return  /*<<parsing.ml:204:22>>*/ symbol_start_pos
              /*<<parsing.ml:204:22>>*/ (0)
            [4] /*<<parsing.ml:204:22>>*/ ;
    /*<<parsing.ml:204:52>>*/ }
   function symbol_end(param){
     /*<<parsing.ml:205:20>>*/ return  /*<<parsing.ml:205:20>>*/ symbol_end_pos
              /*<<parsing.ml:205:20>>*/ (0)
            [4] /*<<parsing.ml:205:20>>*/ ;
    /*<<parsing.ml:205:48>>*/ }
   function rhs_start(n){
     /*<<parsing.ml:206:18>>*/ return  /*<<parsing.ml:206:18>>*/ rhs_start_pos
              /*<<parsing.ml:206:18>>*/ (n)
            [4] /*<<parsing.ml:206:18>>*/ ;
    /*<<parsing.ml:206:44>>*/ }
   function rhs_end(n){
     /*<<parsing.ml:207:16>>*/ return  /*<<parsing.ml:207:16>>*/ rhs_end_pos
              /*<<parsing.ml:207:16>>*/ (n)
            [4] /*<<parsing.ml:207:16>>*/ ;
    /*<<parsing.ml:207:40>>*/ }
   function is_current_lookahead(tok){
     /*<<parsing.ml:210:2>>*/ return  /*<<parsing.ml:210:2>>*/ caml_call1
             /*<<parsing.ml:210:2>>*/ (current_lookahead_fun[1], tok) /*<<parsing.ml:210:40>>*/ ;
    /*<<parsing.ml:210:40>>*/ }
   function parse_error(param){
     /*<<parsing.ml:212:31>>*/ return 0 /*<<parsing.ml:212:31>>*/ ;
    /*<<parsing.ml:212:33>>*/ }
   var
    Stdlib_Parsing =
      [0,
       symbol_start,
       symbol_end,
       rhs_start,
       rhs_end,
       symbol_start_pos,
       symbol_end_pos,
       rhs_start_pos,
       rhs_end_pos,
       clear_parser,
       Parse_error,
       runtime.caml_set_parser_trace,
       YYexit,
       yyparse,
       peek_val,
       is_current_lookahead,
       parse_error];
   runtime.caml_register_global(7, Stdlib_Parsing, "Stdlib__Parsing");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Set
//# unitInfo: Requires: Stdlib, Stdlib__List, Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst_Set_bal$3 =  /*<<?>>*/ "Set.bal",
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure,
    cst_Set_bal = cst_Set_bal$3,
    cst_Set_bal$0 = cst_Set_bal$3,
    cst_Set_bal$1 = cst_Set_bal$3,
    cst_Set_bal$2 = cst_Set_bal$3,
    cst_Set_remove_min_elt = "Set.remove_min_elt",
    _a_ = [0, 0, 0, 0],
    _b_ = [0, 0, 0],
    _c_ = [0, "set.ml", 571, 18],
    Stdlib_Set =
      [0,
       function(Ord){
        function height(param){
          /*<<set.ml:81:17>>*/ if(! param)
           /*<<set.ml:82:17>>*/ return 0 /*<<set.ml:82:17>>*/ ;
         var h = param[4];
          /*<<set.ml:83:20>>*/ return h /*<<set.ml:83:20>>*/ ;
         /*<<set.ml:83:21>>*/ }
        function create(l, v, r){
          /*<<set.ml:91:6>>*/ if(l) var h = l[4], hl = h; else var hl = 0;
          /*<<set.ml:92:6>>*/ if(r) var h$0 = r[4], hr = h$0; else var hr = 0;
         var _Y_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
          /*<<set.ml:93:10>>*/ return [0, l, v, r, _Y_] /*<<set.ml:93:10>>*/ ;
         /*<<set.ml:93:60>>*/ }
        function bal(l, v, r){
          /*<<set.ml:101:6>>*/ if(l) var h = l[4], hl = h; else var hl = 0;
          /*<<set.ml:102:6>>*/ if(r)
          var h$0 = r[4], hr = h$0;
         else
          var hr = 0;
         if((hr + 2 | 0) < hl){
          if(! l)
            /*<<set.ml:105:19>>*/ return  /*<<set.ml:105:19>>*/ caml_call1
                    /*<<set.ml:105:19>>*/ (Stdlib[1], cst_Set_bal$0) /*<<set.ml:128:62>>*/ ;
          var
           lr = l[3],
           lv = l[2],
           ll = l[1],
           _T_ =
              /*<<set.ml:107:28>>*/  /*<<set.ml:107:28>>*/ height
               /*<<set.ml:107:28>>*/ (lr);
          if(_T_ <=  /*<<set.ml:107:15>>*/ height /*<<set.ml:107:15>>*/ (ll))
            /*<<set.ml:108:27>>*/ return  /*<<set.ml:108:27>>*/ create
                    /*<<set.ml:108:27>>*/ (ll,
                    lv,
                     /*<<set.ml:108:27>>*/ create
                      /*<<set.ml:108:27>>*/ (lr, v, r)) /*<<set.ml:128:62>>*/ ;
          if(! lr)
            /*<<set.ml:111:25>>*/ return  /*<<set.ml:111:25>>*/ caml_call1
                    /*<<set.ml:111:25>>*/ (Stdlib[1], cst_Set_bal) /*<<set.ml:128:62>>*/ ;
          var
           lrr = lr[3],
           lrv = lr[2],
           lrl = lr[1],
           _U_ =
              /*<<set.ml:113:48>>*/  /*<<set.ml:113:48>>*/ create
               /*<<set.ml:113:48>>*/ (lrr, v, r);
           /*<<set.ml:113:48>>*/ return  /*<<set.ml:113:48>>*/ create
                   /*<<set.ml:113:48>>*/ ( /*<<set.ml:113:25>>*/ create
                     /*<<set.ml:113:25>>*/ (ll, lv, lrl),
                   lrv,
                   _U_) /*<<set.ml:128:62>>*/ ;
         }
         if((hl + 2 | 0) >= hr){
          var _X_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
           /*<<set.ml:128:12>>*/ return [0, l, v, r, _X_] /*<<set.ml:128:12>>*/ ;
         }
         if(! r)
           /*<<set.ml:117:19>>*/ return  /*<<set.ml:117:19>>*/ caml_call1
                   /*<<set.ml:117:19>>*/ (Stdlib[1], cst_Set_bal$2) /*<<set.ml:128:62>>*/ ;
         var
          rr = r[3],
          rv = r[2],
          rl = r[1],
          _V_ =
             /*<<set.ml:119:28>>*/  /*<<set.ml:119:28>>*/ height
              /*<<set.ml:119:28>>*/ (rl);
         if(_V_ <=  /*<<set.ml:119:15>>*/ height /*<<set.ml:119:15>>*/ (rr))
           /*<<set.ml:120:14>>*/ return  /*<<set.ml:120:14>>*/ create
                   /*<<set.ml:120:14>>*/ ( /*<<set.ml:120:21>>*/ create
                     /*<<set.ml:120:21>>*/ (l, v, rl),
                   rv,
                   rr) /*<<set.ml:128:62>>*/ ;
         if(! rl)
           /*<<set.ml:123:25>>*/ return  /*<<set.ml:123:25>>*/ caml_call1
                   /*<<set.ml:123:25>>*/ (Stdlib[1], cst_Set_bal$1) /*<<set.ml:128:62>>*/ ;
         var
          rlr = rl[3],
          rlv = rl[2],
          rll = rl[1],
          _W_ =
             /*<<set.ml:125:46>>*/  /*<<set.ml:125:46>>*/ create
              /*<<set.ml:125:46>>*/ (rlr, rv, rr);
          /*<<set.ml:125:46>>*/ return  /*<<set.ml:125:46>>*/ create
                  /*<<set.ml:125:46>>*/ ( /*<<set.ml:125:25>>*/ create
                    /*<<set.ml:125:25>>*/ (l, v, rll),
                  rlv,
                  _W_) /*<<set.ml:128:62>>*/ ;
         /*<<set.ml:128:62>>*/ }
        function add(x, t){
          /*<<set.ml:132:16>>*/ if(! t)
           /*<<set.ml:133:21>>*/ return [0, 0, x, 0, 1] /*<<set.ml:133:21>>*/ ;
         var
          r = t[3],
          v = t[2],
          l = t[1],
          c =
             /*<<set.ml:135:18>>*/  /*<<set.ml:135:18>>*/ caml_call2
              /*<<set.ml:135:18>>*/ (Ord[1], x, v);
          /*<<set.ml:136:10>>*/ if(0 === c)
           /*<<set.ml:136:24>>*/ return t /*<<set.ml:136:24>>*/ ;
         if(0 <= c){
          var
           rr =
              /*<<set.ml:141:21>>*/  /*<<set.ml:141:21>>*/ add
               /*<<set.ml:141:21>>*/ (x, r);
          return r === rr
                  ? t
                  :  /*<<set.ml:142:35>>*/ bal
                     /*<<set.ml:142:35>>*/ (l, v, rr) /*<<set.ml:142:45>>*/ ;
         }
         var
          ll =
             /*<<set.ml:138:21>>*/  /*<<set.ml:138:21>>*/ add
              /*<<set.ml:138:21>>*/ (x, l);
         return l === ll
                 ? t
                 :  /*<<set.ml:139:35>>*/ bal /*<<set.ml:139:35>>*/ (ll, v, r) /*<<set.ml:142:45>>*/ ;
         /*<<set.ml:142:45>>*/ }
        function singleton(x){
          /*<<set.ml:144:22>>*/ return [0, 0, x, 0, 1] /*<<set.ml:144:26>>*/ ;
         /*<<set.ml:144:54>>*/ }
        function add_min_element(x, param){
          /*<<set.ml:153:28>>*/ if(! param)
           /*<<set.ml:154:17>>*/ return  /*<<set.ml:154:17>>*/ singleton
                   /*<<set.ml:154:17>>*/ (x) /*<<set.ml:156:37>>*/ ;
         var r = param[3], v = param[2], l = param[1];
          /*<<set.ml:156:8>>*/ return  /*<<set.ml:156:8>>*/ bal
                  /*<<set.ml:156:8>>*/ ( /*<<set.ml:156:12>>*/ add_min_element
                    /*<<set.ml:156:12>>*/ (x, l),
                  v,
                  r) /*<<set.ml:156:37>>*/ ;
         /*<<set.ml:156:37>>*/ }
        function add_max_element(x, param){
          /*<<set.ml:158:28>>*/ if(! param)
           /*<<set.ml:159:17>>*/ return  /*<<set.ml:159:17>>*/ singleton
                   /*<<set.ml:159:17>>*/ (x) /*<<set.ml:161:37>>*/ ;
         var r = param[3], v = param[2], l = param[1];
          /*<<set.ml:161:16>>*/ return  /*<<set.ml:161:16>>*/ bal
                  /*<<set.ml:161:16>>*/ (l,
                  v,
                   /*<<set.ml:161:16>>*/ add_max_element
                    /*<<set.ml:161:16>>*/ (x, r)) /*<<set.ml:161:37>>*/ ;
         /*<<set.ml:161:37>>*/ }
        function join(l, v, r){
          /*<<set.ml:167:6>>*/ if(! l)
           /*<<set.ml:168:22>>*/ return  /*<<set.ml:168:22>>*/ add_min_element
                   /*<<set.ml:168:22>>*/ (v, r) /*<<set.ml:173:22>>*/ ;
         if(! r)
           /*<<set.ml:169:22>>*/ return  /*<<set.ml:169:22>>*/ add_max_element
                   /*<<set.ml:169:22>>*/ (v, l) /*<<set.ml:173:22>>*/ ;
         var
          rh = r[4],
          rr = r[3],
          rv = r[2],
          rl = r[1],
          lh = l[4],
          lr = l[3],
          lv = l[2],
          ll = l[1];
         return (rh + 2 | 0) < lh
                 ?  /*<<set.ml:171:40>>*/ bal
                    /*<<set.ml:171:40>>*/ (ll,
                    lv,
                     /*<<set.ml:171:40>>*/ join /*<<set.ml:171:40>>*/ (lr, v, r))
                 : (lh
                   + 2
                   | 0)
                   < rh
                   ?  /*<<set.ml:172:30>>*/ bal
                      /*<<set.ml:172:30>>*/ ( /*<<set.ml:172:34>>*/ join
                        /*<<set.ml:172:34>>*/ (l, v, rl),
                      rv,
                      rr)
                   :  /*<<set.ml:173:10>>*/ create
                      /*<<set.ml:173:10>>*/ (l, v, r) /*<<set.ml:173:22>>*/ ;
         /*<<set.ml:173:22>>*/ }
        function min_elt(param){
         var param$0 = param;
          /*<<set.ml:177:22>>*/ for(;;){
          if(! param$0)
            /*<<set.ml:178:17>>*/ throw  /*<<set.ml:178:17>>*/ caml_maybe_attach_backtrace
                   /*<<set.ml:178:17>>*/ (Stdlib[8], 1);
          var l = param$0[1];
          if(! l){
           var v = param$0[2];
            /*<<set.ml:179:28>>*/ return v /*<<set.ml:179:28>>*/ ;
          }
          param$0 = l;
         }
         /*<<set.ml:180:28>>*/ }
        function min_elt_opt(param){
         var param$0 = param;
          /*<<set.ml:182:26>>*/ for(;;){
          if(! param$0)
            /*<<set.ml:183:17>>*/ return 0 /*<<set.ml:183:17>>*/ ;
          var l = param$0[1];
          if(! l){
           var v = param$0[2];
            /*<<set.ml:184:28>>*/ return [0, v] /*<<set.ml:184:28>>*/ ;
          }
          param$0 = l;
         }
         /*<<set.ml:185:32>>*/ }
        function max_elt(param){
         var param$0 = param;
          /*<<set.ml:187:22>>*/ for(;;){
          if(! param$0)
            /*<<set.ml:188:17>>*/ throw  /*<<set.ml:188:17>>*/ caml_maybe_attach_backtrace
                   /*<<set.ml:188:17>>*/ (Stdlib[8], 1);
          if(! param$0[3]){
           var v = param$0[2];
            /*<<set.ml:189:28>>*/ return v /*<<set.ml:189:28>>*/ ;
          }
          var r = param$0[3];
          param$0 = r;
         }
         /*<<set.ml:190:28>>*/ }
        function max_elt_opt(param){
         var param$0 = param;
          /*<<set.ml:192:26>>*/ for(;;){
          if(! param$0)
            /*<<set.ml:193:17>>*/ return 0 /*<<set.ml:193:17>>*/ ;
          if(! param$0[3]){
           var v = param$0[2];
            /*<<set.ml:194:28>>*/ return [0, v] /*<<set.ml:194:28>>*/ ;
          }
          var r = param$0[3];
          param$0 = r;
         }
         /*<<set.ml:195:32>>*/ }
        function remove_min_elt(param){
          /*<<set.ml:199:29>>*/ if(! param)
           /*<<set.ml:200:17>>*/ return  /*<<set.ml:200:17>>*/ caml_call1
                   /*<<set.ml:200:17>>*/ (Stdlib[1], cst_Set_remove_min_elt) /*<<set.ml:202:51>>*/ ;
         var l = param[1];
         if(l){
          var r = param[3], v = param[2];
           /*<<set.ml:202:25>>*/ return  /*<<set.ml:202:25>>*/ bal
                   /*<<set.ml:202:25>>*/ ( /*<<set.ml:202:29>>*/ remove_min_elt
                     /*<<set.ml:202:29>>*/ (l),
                   v,
                   r) /*<<set.ml:202:51>>*/ ;
         }
         var r$0 = param[3];
          /*<<set.ml:201:28>>*/ return r$0 /*<<set.ml:201:28>>*/ ;
         /*<<set.ml:202:51>>*/ }
        function concat(t1, t2){
          /*<<set.ml:219:6>>*/ if(! t1)
           /*<<set.ml:220:22>>*/ return t2 /*<<set.ml:220:22>>*/ ;
         if(! t2)  /*<<set.ml:221:22>>*/ return t1 /*<<set.ml:221:22>>*/ ;
         var
          _S_ =
             /*<<set.ml:222:39>>*/  /*<<set.ml:222:39>>*/ remove_min_elt
              /*<<set.ml:222:39>>*/ (t2);
          /*<<set.ml:222:39>>*/ return  /*<<set.ml:222:39>>*/ join
                  /*<<set.ml:222:39>>*/ (t1,
                   /*<<set.ml:222:26>>*/ min_elt /*<<set.ml:222:26>>*/ (t2),
                  _S_) /*<<set.ml:222:58>>*/ ;
         /*<<set.ml:222:58>>*/ }
        function split(x, param){
          /*<<set.ml:230:18>>*/ if(! param)
           /*<<set.ml:232:10>>*/ return _a_ /*<<set.ml:232:10>>*/ ;
         var
          r = param[3],
          v = param[2],
          l = param[1],
          c =
             /*<<set.ml:234:18>>*/  /*<<set.ml:234:18>>*/ caml_call2
              /*<<set.ml:234:18>>*/ (Ord[1], x, v);
          /*<<set.ml:235:10>>*/ if(0 === c)
           /*<<set.ml:235:24>>*/ return [0, l, 1, r] /*<<set.ml:235:24>>*/ ;
         if(0 <= c){
          var
           match =
              /*<<set.ml:239:33>>*/  /*<<set.ml:239:33>>*/ split
               /*<<set.ml:239:33>>*/ (x, r),
           rr = match[3],
           pres = match[2],
           lr = match[1];
           /*<<set.ml:239:46>>*/ return [0,
                   /*<<set.ml:239:47>>*/ join /*<<set.ml:239:47>>*/ (l, v, lr),
                  pres,
                  rr] /*<<set.ml:239:46>>*/ ;
         }
         var
          match$0 =
             /*<<set.ml:237:33>>*/  /*<<set.ml:237:33>>*/ split
              /*<<set.ml:237:33>>*/ (x, l),
          rl = match$0[3],
          pres$0 = match$0[2],
          ll = match$0[1];
          /*<<set.ml:237:46>>*/ return [0,
                 ll,
                 pres$0,
                  /*<<set.ml:237:57>>*/ join /*<<set.ml:237:57>>*/ (rl, v, r)] /*<<set.ml:237:46>>*/ ;
         /*<<set.ml:239:69>>*/ }
        var empty = 0;
        function is_empty(param){
          /*<<set.ml:245:19>>*/ return param ? 0 : 1 /*<<set.ml:245:54>>*/ ;
         /*<<set.ml:245:54>>*/ }
        function mem(x, param){
         var param$0 = param;
          /*<<set.ml:247:16>>*/ for(;;){
          if(! param$0)
            /*<<set.ml:248:17>>*/ return 0 /*<<set.ml:248:17>>*/ ;
          var
           r = param$0[3],
           v = param$0[2],
           l = param$0[1],
           c =
              /*<<set.ml:250:18>>*/  /*<<set.ml:250:18>>*/ caml_call2
               /*<<set.ml:250:18>>*/ (Ord[1], x, v),
           _R_ = 0 === c ? 1 : 0;
          if(_R_) return _R_;
          var r$0 = 0 <= c ? r : l;
          param$0 = r$0;
         }
         /*<<set.ml:251:49>>*/ }
        function remove(x, t){
          /*<<set.ml:253:19>>*/ if(! t)
           /*<<set.ml:254:17>>*/ return 0 /*<<set.ml:254:17>>*/ ;
         var
          t2 = t[3],
          v = t[2],
          t1 = t[1],
          c =
             /*<<set.ml:256:18>>*/  /*<<set.ml:256:18>>*/ caml_call2
              /*<<set.ml:256:18>>*/ (Ord[1], x, v);
          /*<<set.ml:257:10>>*/ if(0 === c){
          if(! t1)  /*<<set.ml:210:22>>*/ return t2 /*<<set.ml:210:22>>*/ ;
          if(! t2)  /*<<set.ml:211:22>>*/ return t1 /*<<set.ml:211:22>>*/ ;
          var
           _Q_ =
              /*<<set.ml:212:38>>*/  /*<<set.ml:212:38>>*/ remove_min_elt
               /*<<set.ml:212:38>>*/ (t2);
           /*<<set.ml:212:38>>*/ return  /*<<set.ml:212:38>>*/ bal
                   /*<<set.ml:212:38>>*/ (t1,
                    /*<<set.ml:212:25>>*/ min_elt /*<<set.ml:212:25>>*/ (t2),
                   _Q_) /*<<set.ml:266:29>>*/ ;
         }
         if(0 <= c){
          var
           rr =
              /*<<set.ml:264:23>>*/  /*<<set.ml:264:23>>*/ remove
               /*<<set.ml:264:23>>*/ (x, t2);
          return t2 === rr
                  ? t
                  :  /*<<set.ml:266:19>>*/ bal
                     /*<<set.ml:266:19>>*/ (t1, v, rr) /*<<set.ml:266:29>>*/ ;
         }
         var
          ll =
             /*<<set.ml:260:23>>*/  /*<<set.ml:260:23>>*/ remove
              /*<<set.ml:260:23>>*/ (x, t1);
         return t1 === ll
                 ? t
                 :  /*<<set.ml:262:19>>*/ bal
                    /*<<set.ml:262:19>>*/ (ll, v, t2) /*<<set.ml:266:29>>*/ ;
         /*<<set.ml:266:29>>*/ }
        function union(s1, s2){
          /*<<set.ml:269:6>>*/ if(! s1)
           /*<<set.ml:270:23>>*/ return s2 /*<<set.ml:270:23>>*/ ;
         if(! s2)  /*<<set.ml:271:23>>*/ return s1 /*<<set.ml:271:23>>*/ ;
         var
          h2 = s2[4],
          r2 = s2[3],
          v2 = s2[2],
          l2 = s2[1],
          h1 = s1[4],
          r1 = s1[3],
          v1 = s1[2],
          l1 = s1[1];
         if(h2 <= h1){
          if(1 === h2)
            /*<<set.ml:274:27>>*/ return  /*<<set.ml:274:27>>*/ add
                    /*<<set.ml:274:27>>*/ (v2, s1) /*<<set.ml:282:15>>*/ ;
          var
           match =
              /*<<set.ml:275:32>>*/  /*<<set.ml:275:32>>*/ split
               /*<<set.ml:275:32>>*/ (v1, s2),
           r2$0 = match[3],
           l2$0 = match[1],
           _O_ =
              /*<<set.ml:276:36>>*/  /*<<set.ml:276:36>>*/ union
               /*<<set.ml:276:36>>*/ (r1, r2$0);
           /*<<set.ml:276:36>>*/ return  /*<<set.ml:276:36>>*/ join
                   /*<<set.ml:276:36>>*/ ( /*<<set.ml:276:19>>*/ union
                     /*<<set.ml:276:19>>*/ (l1, l2$0),
                   v1,
                   _O_) /*<<set.ml:282:15>>*/ ;
         }
         if(1 === h1)
           /*<<set.ml:279:27>>*/ return  /*<<set.ml:279:27>>*/ add
                   /*<<set.ml:279:27>>*/ (v1, s2) /*<<set.ml:282:15>>*/ ;
         var
          match$0 =
             /*<<set.ml:280:32>>*/  /*<<set.ml:280:32>>*/ split
              /*<<set.ml:280:32>>*/ (v2, s1),
          r1$0 = match$0[3],
          l1$0 = match$0[1],
          _P_ =
             /*<<set.ml:281:36>>*/  /*<<set.ml:281:36>>*/ union
              /*<<set.ml:281:36>>*/ (r1$0, r2);
          /*<<set.ml:281:36>>*/ return  /*<<set.ml:281:36>>*/ join
                  /*<<set.ml:281:36>>*/ ( /*<<set.ml:281:19>>*/ union
                    /*<<set.ml:281:19>>*/ (l1$0, l2),
                  v2,
                  _P_) /*<<set.ml:282:15>>*/ ;
         /*<<set.ml:282:15>>*/ }
        function inter(s1, s2){
          /*<<set.ml:285:6>>*/ if(! s1)
           /*<<set.ml:286:22>>*/ return 0 /*<<set.ml:286:22>>*/ ;
         if(! s2)  /*<<set.ml:287:22>>*/ return 0 /*<<set.ml:287:22>>*/ ;
         var
          r1 = s1[3],
          v1 = s1[2],
          l1 = s1[1],
          _L_ =
             /*<<set.ml:289:16>>*/  /*<<set.ml:289:16>>*/ split
              /*<<set.ml:289:16>>*/ (v1, s2),
          l2 = _L_[1];
         if(_L_[2]){
          var
           r2 = _L_[3],
           _M_ =
              /*<<set.ml:293:36>>*/  /*<<set.ml:293:36>>*/ inter
               /*<<set.ml:293:36>>*/ (r1, r2);
           /*<<set.ml:293:36>>*/ return  /*<<set.ml:293:36>>*/ join
                   /*<<set.ml:293:36>>*/ ( /*<<set.ml:293:19>>*/ inter
                     /*<<set.ml:293:19>>*/ (l1, l2),
                   v1,
                   _M_) /*<<set.ml:293:49>>*/ ;
         }
         var
          r2$0 = _L_[3],
          _N_ =
             /*<<set.ml:291:35>>*/  /*<<set.ml:291:35>>*/ inter
              /*<<set.ml:291:35>>*/ (r1, r2$0);
          /*<<set.ml:291:35>>*/ return  /*<<set.ml:291:35>>*/ concat
                  /*<<set.ml:291:35>>*/ ( /*<<set.ml:291:21>>*/ inter
                    /*<<set.ml:291:21>>*/ (l1, l2),
                  _N_) /*<<set.ml:293:49>>*/ ;
         /*<<set.ml:293:49>>*/ }
        function split_bis(x, param){
          /*<<set.ml:303:22>>*/ if(! param)
           /*<<set.ml:305:10>>*/ return [0,
                  0,
                  function(param){
                    /*<<set.ml:305:38>>*/ return 0 /*<<set.ml:305:38>>*/ ;
                   /*<<set.ml:305:43>>*/ }] /*<<set.ml:305:10>>*/ ;
         var
          r = param[3],
          v = param[2],
          l = param[1],
          c =
             /*<<set.ml:307:18>>*/  /*<<set.ml:307:18>>*/ caml_call2
              /*<<set.ml:307:18>>*/ (Ord[1], x, v);
          /*<<set.ml:308:10>>*/ if(0 === c)
           /*<<set.ml:308:24>>*/ return 0 /*<<set.ml:308:24>>*/ ;
         if(0 <= c){
          var
           match =
              /*<<set.ml:314:18>>*/  /*<<set.ml:314:18>>*/ split_bis
               /*<<set.ml:314:18>>*/ (x, r);
          if(! match)  /*<<set.ml:315:23>>*/ return 0 /*<<set.ml:315:23>>*/ ;
          var rr = match[2], lr = match[1];
           /*<<set.ml:316:35>>*/ return [0,
                   /*<<set.ml:316:45>>*/ join /*<<set.ml:316:45>>*/ (l, v, lr),
                  rr] /*<<set.ml:316:35>>*/ ;
         }
         var
          match$0 =
             /*<<set.ml:310:18>>*/  /*<<set.ml:310:18>>*/ split_bis
              /*<<set.ml:310:18>>*/ (x, l);
         if(! match$0)  /*<<set.ml:311:23>>*/ return 0 /*<<set.ml:311:23>>*/ ;
         var rl = match$0[2], ll = match$0[1];
          /*<<set.ml:312:35>>*/ return [0,
                 ll,
                 function(param){
                   /*<<set.ml:312:60>>*/ return  /*<<set.ml:312:35>>*/ join
                           /*<<set.ml:312:35>>*/ ( /*<<set.ml:312:65>>*/ rl
                             /*<<set.ml:312:65>>*/ (0),
                           v,
                           r) /*<<set.ml:312:76>>*/ ;
                  /*<<set.ml:312:76>>*/ }] /*<<set.ml:312:35>>*/ ;
         /*<<set.ml:316:61>>*/ }
        function disjoint(s1, s2){
         var s1$0 = s1, s2$0 = s2;
          /*<<set.ml:319:6>>*/ for(;;){
          if(s1$0 && s2$0){
           var r1 = s1$0[3], v1 = s1$0[2], l1 = s1$0[1];
           if(s1$0 === s2$0)
             /*<<set.ml:322:27>>*/ return 0 /*<<set.ml:322:27>>*/ ;
           var
            match =
               /*<<set.ml:323:21>>*/  /*<<set.ml:323:21>>*/ split_bis
                /*<<set.ml:323:21>>*/ (v1, s2$0);
           if(! match)  /*<<set.ml:325:23>>*/ return 0 /*<<set.ml:325:23>>*/ ;
           var
            r2 = match[2],
            l2 = match[1],
            _K_ =
               /*<<set.ml:324:34>>*/  /*<<set.ml:324:34>>*/ disjoint
                /*<<set.ml:324:34>>*/ (l1, l2);
            /*<<set.ml:324:34>>*/ if(! _K_)
             /*<<set.ml:324:34>>*/ return _K_ /*<<set.ml:324:34>>*/ ;
           var
            s2$1 =
               /*<<set.ml:324:64>>*/  /*<<set.ml:324:64>>*/ r2
                /*<<set.ml:324:64>>*/ (0);
           s1$0 = r1;
           s2$0 = s2$1;
           continue;
          }
           /*<<set.ml:320:35>>*/ return 1 /*<<set.ml:320:35>>*/ ;
         }
         /*<<set.ml:325:28>>*/ }
        function diff(s1, s2){
          /*<<set.ml:328:6>>*/ if(! s1)
           /*<<set.ml:329:22>>*/ return 0 /*<<set.ml:329:22>>*/ ;
         if(! s2)  /*<<set.ml:330:23>>*/ return s1 /*<<set.ml:330:23>>*/ ;
         var
          r1 = s1[3],
          v1 = s1[2],
          l1 = s1[1],
          _H_ =
             /*<<set.ml:332:16>>*/  /*<<set.ml:332:16>>*/ split
              /*<<set.ml:332:16>>*/ (v1, s2),
          l2 = _H_[1];
         if(_H_[2]){
          var
           r2 = _H_[3],
           _I_ =
              /*<<set.ml:336:34>>*/  /*<<set.ml:336:34>>*/ diff
               /*<<set.ml:336:34>>*/ (r1, r2);
           /*<<set.ml:336:34>>*/ return  /*<<set.ml:336:34>>*/ concat
                   /*<<set.ml:336:34>>*/ ( /*<<set.ml:336:21>>*/ diff
                     /*<<set.ml:336:21>>*/ (l1, l2),
                   _I_) /*<<set.ml:336:46>>*/ ;
         }
         var
          r2$0 = _H_[3],
          _J_ =
             /*<<set.ml:334:35>>*/  /*<<set.ml:334:35>>*/ diff
              /*<<set.ml:334:35>>*/ (r1, r2$0);
          /*<<set.ml:334:35>>*/ return  /*<<set.ml:334:35>>*/ join
                  /*<<set.ml:334:35>>*/ ( /*<<set.ml:334:19>>*/ diff
                    /*<<set.ml:334:19>>*/ (l1, l2),
                  v1,
                  _J_) /*<<set.ml:336:46>>*/ ;
         /*<<set.ml:336:46>>*/ }
        function cons_enum(s, e){
         var s$0 = s, e$0 = e;
          /*<<set.ml:341:6>>*/ for(;;){
          if(! s$0)  /*<<set.ml:342:17>>*/ return e$0 /*<<set.ml:342:17>>*/ ;
          var
           r = s$0[3],
           v = s$0[2],
           l = s$0[1],
           e$1 =  /*<<set.ml:343:37>>*/ [0, v, r, e$0];
          s$0 = l;
          e$0 = e$1;
         }
         /*<<set.ml:343:52>>*/ }
        function compare(s1, s2){
         var
          e2$2 =
             /*<<set.ml:357:37>>*/  /*<<set.ml:357:37>>*/ cons_enum
              /*<<set.ml:357:37>>*/ (s2, 0),
          e1$2 =
             /*<<set.ml:357:18>>*/  /*<<set.ml:357:18>>*/ cons_enum
              /*<<set.ml:357:18>>*/ (s1, 0),
          e1 = e1$2,
          e2 = e2$2;
          /*<<set.ml:346:8>>*/ for(;;){
          if(! e1) return e2 ? -1 : 0 /*<<set.ml:357:55>>*/ ;
          if(! e2)  /*<<set.ml:349:20>>*/ return 1 /*<<set.ml:349:20>>*/ ;
          var
           e2$0 = e2[3],
           r2 = e2[2],
           v2 = e2[1],
           e1$0 = e1[3],
           r1 = e1[2],
           v1 = e1[1],
           c =
              /*<<set.ml:351:18>>*/  /*<<set.ml:351:18>>*/ caml_call2
               /*<<set.ml:351:18>>*/ (Ord[1], v1, v2);
           /*<<set.ml:352:10>>*/ if(0 !== c)
            /*<<set.ml:353:15>>*/ return c /*<<set.ml:353:15>>*/ ;
          var
           e2$1 =
              /*<<set.ml:354:45>>*/  /*<<set.ml:354:45>>*/ cons_enum
               /*<<set.ml:354:45>>*/ (r2, e2$0),
           e1$1 =
              /*<<set.ml:354:27>>*/  /*<<set.ml:354:27>>*/ cons_enum
               /*<<set.ml:354:27>>*/ (r1, e1$0);
          e1 = e1$1;
          e2 = e2$1;
         }
         /*<<set.ml:357:55>>*/ }
        function equal(s1, s2){
          /*<<set.ml:360:6>>*/ return 0
                 ===
                   /*<<set.ml:360:6>>*/ compare /*<<set.ml:360:6>>*/ (s1, s2)
                 ? 1
                 : 0;
         /*<<set.ml:360:23>>*/ }
        function subset(s1, s2){
         var s1$0 = s1, s2$0 = s2;
          /*<<set.ml:363:6>>*/ for(;;){
          if(! s1$0)  /*<<set.ml:365:10>>*/ return 1 /*<<set.ml:365:10>>*/ ;
          if(! s2$0)  /*<<set.ml:367:10>>*/ return 0 /*<<set.ml:367:10>>*/ ;
          var
           r2 = s2$0[3],
           v2 = s2$0[2],
           l2 = s2$0[1],
           r1 = s1$0[3],
           v1 = s1$0[2],
           l1 = s1$0[1],
           c =
              /*<<set.ml:369:18>>*/  /*<<set.ml:369:18>>*/ caml_call2
               /*<<set.ml:369:18>>*/ (Ord[1], v1, v2);
           /*<<set.ml:370:10>>*/ if(0 === c){
           var
            _E_ =
               /*<<set.ml:371:12>>*/  /*<<set.ml:371:12>>*/ subset
                /*<<set.ml:371:12>>*/ (l1, l2);
            /*<<set.ml:371:12>>*/ if(! _E_)
             /*<<set.ml:371:12>>*/ return _E_ /*<<set.ml:371:12>>*/ ;
           s1$0 = r1;
           s2$0 = r2;
          }
          else if(0 <= c){
           var
            _F_ =
               /*<<set.ml:375:12>>*/  /*<<set.ml:375:12>>*/ subset
                /*<<set.ml:375:12>>*/ ([0, 0, v1, r1, 0], r2);
            /*<<set.ml:375:12>>*/ if(! _F_)
             /*<<set.ml:375:12>>*/ return _F_ /*<<set.ml:375:12>>*/ ;
           s1$0 = l1;
          }
          else{
           var
            _G_ =
               /*<<set.ml:373:12>>*/  /*<<set.ml:373:12>>*/ subset
                /*<<set.ml:373:12>>*/ ([0, l1, v1, 0, 0], l2);
            /*<<set.ml:373:12>>*/ if(! _G_)
             /*<<set.ml:373:12>>*/ return _G_ /*<<set.ml:373:12>>*/ ;
           s1$0 = r1;
          }
         }
         /*<<set.ml:375:71>>*/ }
        function iter(f, param){
         var param$0 = param;
          /*<<set.ml:377:17>>*/ for(;;){
          if(! param$0)
            /*<<set.ml:378:17>>*/ return 0 /*<<set.ml:378:17>>*/ ;
          var r = param$0[3], v = param$0[2], l = param$0[1];
           /*<<set.ml:379:25>>*/  /*<<set.ml:379:25>>*/ iter
            /*<<set.ml:379:25>>*/ (f, l);
           /*<<set.ml:379:35>>*/  /*<<set.ml:379:35>>*/ caml_call1
            /*<<set.ml:379:35>>*/ (f, v);
          param$0 = r;
         }
         /*<<set.ml:379:48>>*/ }
        function fold(f, s, accu){
         var s$0 = s, accu$0 = accu;
          /*<<set.ml:382:6>>*/ for(;;){
          if(! s$0)
            /*<<set.ml:383:17>>*/ return accu$0 /*<<set.ml:383:17>>*/ ;
          var
           r = s$0[3],
           v = s$0[2],
           l = s$0[1],
           accu$1 =
              /*<<set.ml:384:34>>*/  /*<<set.ml:384:34>>*/ caml_call2
               /*<<set.ml:384:34>>*/ (f,
               v,
                /*<<set.ml:384:39>>*/ fold
                 /*<<set.ml:384:39>>*/ (f, l, accu$0));
          s$0 = r;
          accu$0 = accu$1;
         }
         /*<<set.ml:384:55>>*/ }
        function for_all(p, param){
         var param$0 = param;
          /*<<set.ml:386:20>>*/ for(;;){
          if(! param$0)
            /*<<set.ml:387:17>>*/ return 1 /*<<set.ml:387:17>>*/ ;
          var
           r = param$0[3],
           v = param$0[2],
           l = param$0[1],
           _B_ =
              /*<<set.ml:388:25>>*/  /*<<set.ml:388:25>>*/ caml_call1
               /*<<set.ml:388:25>>*/ (p, v);
           /*<<set.ml:388:25>>*/ if(_B_){
           var
            _C_ =
               /*<<set.ml:388:32>>*/  /*<<set.ml:388:32>>*/ for_all
                /*<<set.ml:388:32>>*/ (p, l);
            /*<<set.ml:388:32>>*/ if(_C_){param$0 = r; continue;}
           var _D_ = _C_;
          }
          else
           var _D_ = _B_;
           /*<<set.ml:388:32>>*/ return _D_ /*<<set.ml:388:32>>*/ ;
         }
         /*<<set.ml:388:58>>*/ }
        function exists(p, param){
         var param$0 = param;
          /*<<set.ml:390:19>>*/ for(;;){
          if(! param$0)
            /*<<set.ml:391:17>>*/ return 0 /*<<set.ml:391:17>>*/ ;
          var
           r = param$0[3],
           v = param$0[2],
           l = param$0[1],
           _y_ =
              /*<<set.ml:392:25>>*/  /*<<set.ml:392:25>>*/ caml_call1
               /*<<set.ml:392:25>>*/ (p, v);
           /*<<set.ml:392:25>>*/ if(_y_)
           var _z_ = _y_;
          else{
           var
            _A_ =
               /*<<set.ml:392:32>>*/  /*<<set.ml:392:32>>*/ exists
                /*<<set.ml:392:32>>*/ (p, l);
            /*<<set.ml:392:32>>*/ if(! _A_){param$0 = r; continue;}
           var _z_ = _A_;
          }
           /*<<set.ml:392:25>>*/ return _z_ /*<<set.ml:392:25>>*/ ;
         }
         /*<<set.ml:392:56>>*/ }
        function filter(p, t){
          /*<<set.ml:394:19>>*/ if(! t)
           /*<<set.ml:395:17>>*/ return 0 /*<<set.ml:395:17>>*/ ;
         var
          r = t[3],
          v = t[2],
          l = t[1],
          l$0 =
             /*<<set.ml:398:19>>*/  /*<<set.ml:398:19>>*/ filter
              /*<<set.ml:398:19>>*/ (p, l),
          pv =
             /*<<set.ml:399:19>>*/  /*<<set.ml:399:19>>*/ caml_call1
              /*<<set.ml:399:19>>*/ (p, v),
          r$0 =
             /*<<set.ml:400:19>>*/  /*<<set.ml:400:19>>*/ filter
              /*<<set.ml:400:19>>*/ (p, r);
          /*<<set.ml:401:10>>*/ if(! pv)
           /*<<set.ml:403:15>>*/ return  /*<<set.ml:403:15>>*/ concat
                   /*<<set.ml:403:15>>*/ (l$0, r$0) /*<<set.ml:403:27>>*/ ;
         if(l === l$0 && r === r$0)
           /*<<set.ml:402:35>>*/ return t /*<<set.ml:402:35>>*/ ;
          /*<<set.ml:402:42>>*/ return  /*<<set.ml:402:42>>*/ join
                  /*<<set.ml:402:42>>*/ (l$0, v, r$0) /*<<set.ml:403:27>>*/ ;
         /*<<set.ml:403:27>>*/ }
        function partition(p, param){
          /*<<set.ml:405:22>>*/ if(! param)
           /*<<set.ml:406:17>>*/ return _b_ /*<<set.ml:406:17>>*/ ;
         var
          r = param[3],
          v = param[2],
          l = param[1],
          match =
             /*<<set.ml:409:25>>*/  /*<<set.ml:409:25>>*/ partition
              /*<<set.ml:409:25>>*/ (p, l),
          lf = match[2],
          lt = match[1],
          pv =
             /*<<set.ml:410:19>>*/  /*<<set.ml:410:19>>*/ caml_call1
              /*<<set.ml:410:19>>*/ (p, v),
          match$0 =
             /*<<set.ml:411:25>>*/  /*<<set.ml:411:25>>*/ partition
              /*<<set.ml:411:25>>*/ (p, r),
          rf = match$0[2],
          rt = match$0[1];
          /*<<set.ml:412:10>>*/ if(pv){
          var
           _w_ =
              /*<<set.ml:413:30>>*/  /*<<set.ml:413:30>>*/ concat
               /*<<set.ml:413:30>>*/ (lf, rf);
           /*<<set.ml:413:15>>*/ return [0,
                   /*<<set.ml:413:16>>*/ join
                    /*<<set.ml:413:16>>*/ (lt, v, rt),
                  _w_] /*<<set.ml:413:15>>*/ ;
         }
         var
          _x_ =
             /*<<set.ml:414:30>>*/  /*<<set.ml:414:30>>*/ join
              /*<<set.ml:414:30>>*/ (lf, v, rf);
          /*<<set.ml:414:15>>*/ return [0,
                  /*<<set.ml:414:16>>*/ concat /*<<set.ml:414:16>>*/ (lt, rt),
                 _x_] /*<<set.ml:414:15>>*/ ;
         /*<<set.ml:414:43>>*/ }
        function cardinal(param){
          /*<<set.ml:416:23>>*/ if(! param)
           /*<<set.ml:417:17>>*/ return 0 /*<<set.ml:417:17>>*/ ;
         var
          r = param[3],
          l = param[1],
          _v_ =
             /*<<set.ml:418:39>>*/  /*<<set.ml:418:39>>*/ cardinal
              /*<<set.ml:418:39>>*/ (r);
         return ( /*<<set.ml:418:22>>*/ cardinal /*<<set.ml:418:22>>*/ (l) + 1
                | 0)
                + _v_
                | 0;
         /*<<set.ml:418:49>>*/ }
        function elements_aux(accu, param){
         var accu$0 = accu, param$0 = param;
          /*<<set.ml:420:25>>*/ for(;;){
          if(! param$0)
            /*<<set.ml:421:17>>*/ return accu$0 /*<<set.ml:421:17>>*/ ;
          var
           r = param$0[3],
           v = param$0[2],
           l = param$0[1],
           accu$1 =
              /*<<set.ml:422:38>>*/ [0,
              v,
               /*<<set.ml:422:44>>*/ elements_aux
                /*<<set.ml:422:44>>*/ (accu$0, r)];
          accu$0 = accu$1;
          param$0 = l;
         }
         /*<<set.ml:422:66>>*/ }
        function elements(s){
          /*<<set.ml:425:6>>*/ return  /*<<set.ml:425:6>>*/ elements_aux
                  /*<<set.ml:425:6>>*/ (0, s) /*<<set.ml:425:23>>*/ ;
         /*<<set.ml:425:23>>*/ }
        function find(x, param){
         var param$0 = param;
          /*<<set.ml:431:17>>*/ for(;;){
          if(! param$0)
            /*<<set.ml:432:17>>*/ throw  /*<<set.ml:432:17>>*/ caml_maybe_attach_backtrace
                   /*<<set.ml:432:17>>*/ (Stdlib[8], 1);
          var
           r = param$0[3],
           v = param$0[2],
           l = param$0[1],
           c =
              /*<<set.ml:434:18>>*/  /*<<set.ml:434:18>>*/ caml_call2
               /*<<set.ml:434:18>>*/ (Ord[1], x, v);
           /*<<set.ml:435:10>>*/ if(0 === c)
            /*<<set.ml:435:24>>*/ return v /*<<set.ml:435:24>>*/ ;
          var r$0 = 0 <= c ? r : l;
          param$0 = r$0;
         }
         /*<<set.ml:436:46>>*/ }
        function find_first(f, param$0){
         var param$1 = param$0;
          /*<<set.ml:447:23>>*/ for(;;){
          if(! param$1)
            /*<<set.ml:449:10>>*/ throw  /*<<set.ml:449:10>>*/ caml_maybe_attach_backtrace
                   /*<<set.ml:449:10>>*/ (Stdlib[8], 1);
          var r$0 = param$1[3], v0$1 = param$1[2], l$0 = param$1[1];
           /*<<set.ml:451:13>>*/ if
           ( /*<<set.ml:451:13>>*/ caml_call1 /*<<set.ml:451:13>>*/ (f, v0$1)){
           var v0 = v0$1, param = l$0;
            /*<<set.ml:438:27>>*/ for(;;){
            if(! param)
              /*<<set.ml:440:10>>*/ return v0 /*<<set.ml:440:10>>*/ ;
            var r = param[3], v0$0 = param[2], l = param[1];
             /*<<set.ml:442:13>>*/ if
             ( /*<<set.ml:442:13>>*/ caml_call1
                /*<<set.ml:442:13>>*/ (f, v0$0)){
             v0 = v0$0;
             param = l;
            }
            else
             param = r;
           }
          }
          else
           param$1 = r$0;
         }
         /*<<set.ml:454:26>>*/ }
        function find_first_opt(f, param$0){
         var param$1 = param$0;
          /*<<set.ml:465:27>>*/ for(;;){
          if(! param$1)
            /*<<set.ml:467:10>>*/ return 0 /*<<set.ml:467:10>>*/ ;
          var r$0 = param$1[3], v0$1 = param$1[2], l$0 = param$1[1];
           /*<<set.ml:469:13>>*/ if
           ( /*<<set.ml:469:13>>*/ caml_call1 /*<<set.ml:469:13>>*/ (f, v0$1)){
           var v0 = v0$1, param = l$0;
            /*<<set.ml:456:31>>*/ for(;;){
            if(! param)
              /*<<set.ml:458:10>>*/ return [0, v0] /*<<set.ml:458:10>>*/ ;
            var r = param[3], v0$0 = param[2], l = param[1];
             /*<<set.ml:460:13>>*/ if
             ( /*<<set.ml:460:13>>*/ caml_call1
                /*<<set.ml:460:13>>*/ (f, v0$0)){
             v0 = v0$0;
             param = l;
            }
            else
             param = r;
           }
          }
          else
           param$1 = r$0;
         }
         /*<<set.ml:472:30>>*/ }
        function find_last(f, param$0){
         var param$1 = param$0;
          /*<<set.ml:483:22>>*/ for(;;){
          if(! param$1)
            /*<<set.ml:485:10>>*/ throw  /*<<set.ml:485:10>>*/ caml_maybe_attach_backtrace
                   /*<<set.ml:485:10>>*/ (Stdlib[8], 1);
          var r$0 = param$1[3], v0$1 = param$1[2], l$0 = param$1[1];
           /*<<set.ml:487:13>>*/ if
           ( /*<<set.ml:487:13>>*/ caml_call1 /*<<set.ml:487:13>>*/ (f, v0$1)){
           var v0 = v0$1, param = r$0;
            /*<<set.ml:474:26>>*/ for(;;){
            if(! param)
              /*<<set.ml:476:10>>*/ return v0 /*<<set.ml:476:10>>*/ ;
            var r = param[3], v0$0 = param[2], l = param[1];
             /*<<set.ml:478:13>>*/ if
             ( /*<<set.ml:478:13>>*/ caml_call1
                /*<<set.ml:478:13>>*/ (f, v0$0)){
             v0 = v0$0;
             param = r;
            }
            else
             param = l;
           }
          }
          else
           param$1 = l$0;
         }
         /*<<set.ml:490:25>>*/ }
        function find_last_opt(f, param$0){
         var param$1 = param$0;
          /*<<set.ml:501:26>>*/ for(;;){
          if(! param$1)
            /*<<set.ml:503:10>>*/ return 0 /*<<set.ml:503:10>>*/ ;
          var r$0 = param$1[3], v0$1 = param$1[2], l$0 = param$1[1];
           /*<<set.ml:505:13>>*/ if
           ( /*<<set.ml:505:13>>*/ caml_call1 /*<<set.ml:505:13>>*/ (f, v0$1)){
           var v0 = v0$1, param = r$0;
            /*<<set.ml:492:30>>*/ for(;;){
            if(! param)
              /*<<set.ml:494:10>>*/ return [0, v0] /*<<set.ml:494:10>>*/ ;
            var r = param[3], v0$0 = param[2], l = param[1];
             /*<<set.ml:496:13>>*/ if
             ( /*<<set.ml:496:13>>*/ caml_call1
                /*<<set.ml:496:13>>*/ (f, v0$0)){
             v0 = v0$0;
             param = r;
            }
            else
             param = l;
           }
          }
          else
           param$1 = l$0;
         }
         /*<<set.ml:508:29>>*/ }
        function find_opt(x, param){
         var param$0 = param;
          /*<<set.ml:510:21>>*/ for(;;){
          if(! param$0)
            /*<<set.ml:511:17>>*/ return 0 /*<<set.ml:511:17>>*/ ;
          var
           r = param$0[3],
           v = param$0[2],
           l = param$0[1],
           c =
              /*<<set.ml:513:18>>*/  /*<<set.ml:513:18>>*/ caml_call2
               /*<<set.ml:513:18>>*/ (Ord[1], x, v);
           /*<<set.ml:514:10>>*/ if(0 === c)
            /*<<set.ml:514:24>>*/ return [0, v] /*<<set.ml:514:24>>*/ ;
          var r$0 = 0 <= c ? r : l;
          param$0 = r$0;
         }
         /*<<set.ml:515:50>>*/ }
        function try_join(l, v, r){
         a:
         {
          if(0 !== l){
           var
            _u_ =
               /*<<set.ml:521:35>>*/  /*<<set.ml:521:35>>*/ max_elt
                /*<<set.ml:521:35>>*/ (l);
            /*<<set.ml:521:23>>*/ if
            (0
             <=
               /*<<set.ml:521:23>>*/ caml_call2
                /*<<set.ml:521:23>>*/ (Ord[1], _u_, v))
            break a;
          }
          if(0 !== r){
           var
            _t_ =
               /*<<set.ml:522:37>>*/  /*<<set.ml:522:37>>*/ min_elt
                /*<<set.ml:522:37>>*/ (r);
            /*<<set.ml:522:23>>*/ if
            (0
             <=
               /*<<set.ml:522:23>>*/ caml_call2
                /*<<set.ml:522:23>>*/ (Ord[1], v, _t_))
            break a;
          }
           /*<<set.ml:523:11>>*/ return  /*<<set.ml:523:11>>*/ join
                   /*<<set.ml:523:11>>*/ (l, v, r) /*<<set.ml:524:28>>*/ ;
         }
          /*<<set.ml:524:19>>*/ return  /*<<set.ml:524:19>>*/ union
                  /*<<set.ml:524:19>>*/ (l,
                   /*<<set.ml:524:19>>*/ add /*<<set.ml:524:19>>*/ (v, r)) /*<<set.ml:524:28>>*/ ;
         /*<<set.ml:524:28>>*/ }
        function map(f, t){
          /*<<set.ml:526:16>>*/ if(! t)
           /*<<set.ml:527:17>>*/ return 0 /*<<set.ml:527:17>>*/ ;
         var
          r = t[3],
          v = t[2],
          l = t[1],
          l$0 =
             /*<<set.ml:530:18>>*/  /*<<set.ml:530:18>>*/ map
              /*<<set.ml:530:18>>*/ (f, l),
          v$0 =
             /*<<set.ml:531:18>>*/  /*<<set.ml:531:18>>*/ caml_call1
              /*<<set.ml:531:18>>*/ (f, v),
          r$0 =
             /*<<set.ml:532:18>>*/  /*<<set.ml:532:18>>*/ map
              /*<<set.ml:532:18>>*/ (f, r);
         if(l === l$0 && v === v$0 && r === r$0)
           /*<<set.ml:533:47>>*/ return t /*<<set.ml:533:47>>*/ ;
          /*<<set.ml:534:14>>*/ return  /*<<set.ml:534:14>>*/ try_join
                  /*<<set.ml:534:14>>*/ (l$0, v$0, r$0) /*<<set.ml:534:31>>*/ ;
         /*<<set.ml:534:31>>*/ }
        function filter_map(f, t){
          /*<<set.ml:542:23>>*/ if(! t)
           /*<<set.ml:543:17>>*/ return 0 /*<<set.ml:543:17>>*/ ;
         var
          r = t[3],
          v = t[2],
          l = t[1],
          t1 =
             /*<<set.ml:546:18>>*/  /*<<set.ml:546:18>>*/ filter_map
              /*<<set.ml:546:18>>*/ (f, l),
          v$0 =
             /*<<set.ml:547:18>>*/  /*<<set.ml:547:18>>*/ caml_call1
              /*<<set.ml:547:18>>*/ (f, v),
          t2 =
             /*<<set.ml:548:18>>*/  /*<<set.ml:548:18>>*/ filter_map
              /*<<set.ml:548:18>>*/ (f, r);
          /*<<set.ml:549:9>>*/ if(v$0){
          var v$1 = v$0[1];
          if(l === t1 && v === v$1 && r === t2)
            /*<<set.ml:551:52>>*/ return t /*<<set.ml:551:52>>*/ ;
           /*<<set.ml:552:19>>*/ return  /*<<set.ml:552:19>>*/ try_join
                   /*<<set.ml:552:19>>*/ (t1, v$1, t2) /*<<set.ml:555:12>>*/ ;
         }
         if(! t1)  /*<<set.ml:538:22>>*/ return t2 /*<<set.ml:538:22>>*/ ;
         if(! t2)  /*<<set.ml:539:22>>*/ return t1 /*<<set.ml:539:22>>*/ ;
         var
          _s_ =
             /*<<set.ml:540:43>>*/  /*<<set.ml:540:43>>*/ remove_min_elt
              /*<<set.ml:540:43>>*/ (t2);
          /*<<set.ml:540:43>>*/ return  /*<<set.ml:540:43>>*/ try_join
                  /*<<set.ml:540:43>>*/ (t1,
                   /*<<set.ml:540:30>>*/ min_elt /*<<set.ml:540:30>>*/ (t2),
                  _s_) /*<<set.ml:555:12>>*/ ;
         /*<<set.ml:555:12>>*/ }
        function of_list(l){
          /*<<set.ml:581:6>>*/ if(! l) return empty;
         var _n_ = l[2], x0 = l[1];
         if(! _n_)
           /*<<set.ml:583:16>>*/ return  /*<<set.ml:583:16>>*/ singleton
                   /*<<set.ml:583:16>>*/ (x0) /*<<set.ml:588:58>>*/ ;
         var _o_ = _n_[2], x1 = _n_[1];
         if(! _o_)
           /*<<set.ml:584:27>>*/ return  /*<<set.ml:584:27>>*/ add
                   /*<<set.ml:584:27>>*/ (x1,
                    /*<<set.ml:584:27>>*/ singleton /*<<set.ml:584:27>>*/ (x0)) /*<<set.ml:588:58>>*/ ;
         var _p_ = _o_[2], x2 = _o_[1];
         if(! _p_)
           /*<<set.ml:585:31>>*/ return  /*<<set.ml:585:31>>*/ add
                   /*<<set.ml:585:31>>*/ (x2,
                    /*<<set.ml:585:31>>*/ add
                     /*<<set.ml:585:31>>*/ (x1,
                      /*<<set.ml:585:39>>*/ singleton /*<<set.ml:585:39>>*/ (x0))) /*<<set.ml:588:58>>*/ ;
         var _q_ = _p_[2], x3 = _p_[1];
         if(! _q_)
           /*<<set.ml:586:35>>*/ return  /*<<set.ml:586:35>>*/ add
                   /*<<set.ml:586:35>>*/ (x3,
                    /*<<set.ml:586:35>>*/ add
                     /*<<set.ml:586:35>>*/ (x2,
                      /*<<set.ml:586:43>>*/ add
                       /*<<set.ml:586:43>>*/ (x1,
                        /*<<set.ml:586:51>>*/ singleton /*<<set.ml:586:51>>*/ (x0)))) /*<<set.ml:588:58>>*/ ;
         if(_q_[2]){
          var
           l$0 =
              /*<<set.ml:588:28>>*/  /*<<set.ml:588:28>>*/ caml_call2
               /*<<set.ml:588:28>>*/ (Stdlib_List[62], Ord[1], l),
           sub =
             function(n, l){
               /*<<set.ml:559:8>>*/ if(3 >= n >>> 0)
               switch(n){
                 case 0:
                   /*<<set.ml:560:18>>*/ return [0, 0, l] /*<<set.ml:560:18>>*/ ;
                 case 1:
                  if(l){
                   var l$3 = l[2], x0 = l[1];
                    /*<<set.ml:561:24>>*/ return [0, [0, 0, x0, 0, 1], l$3] /*<<set.ml:561:24>>*/ ;
                  }
                  break;
                 case 2:
                  if(l){
                   var match$1 = l[2];
                   if(match$1){
                    var l$4 = match$1[2], x1 = match$1[1], x0$0 = l[1];
                     /*<<set.ml:563:12>>*/ return [0,
                            [0, [0, 0, x0$0, 0, 1], x1, 0, 2],
                            l$4] /*<<set.ml:563:12>>*/ ;
                   }
                  }
                  break;
                 default:
                  if(l){
                   var _r_ = l[2];
                   if(_r_){
                    var match$2 = _r_[2];
                    if(match$2){
                     var
                      l$5 = match$2[2],
                      x2 = match$2[1],
                      x1$0 = _r_[1],
                      x0$1 = l[1];
                      /*<<set.ml:565:12>>*/ return [0,
                             [0, [0, 0, x0$1, 0, 1], x1$0, [0, 0, x2, 0, 1], 2],
                             l$5] /*<<set.ml:565:12>>*/ ;
                    }
                   }
                  }
               }
              var
               nl = n / 2 | 0,
               match =
                  /*<<set.ml:569:24>>*/  /*<<set.ml:569:24>>*/ sub
                   /*<<set.ml:569:24>>*/ (nl, l),
               l$0 = match[2],
               left = match[1];
               /*<<set.ml:570:10>>*/ if(! l$0)
                /*<<set.ml:571:18>>*/ throw  /*<<set.ml:571:18>>*/ caml_maybe_attach_backtrace
                       /*<<set.ml:571:18>>*/ ([0, Assert_failure, _c_], 1);
              var
               l$1 = l$0[2],
               mid = l$0[1],
               match$0 =
                  /*<<set.ml:573:27>>*/  /*<<set.ml:573:27>>*/ sub
                   /*<<set.ml:573:27>>*/ ((n - nl | 0) - 1 | 0, l$1),
               l$2 = match$0[2],
               right = match$0[1];
               /*<<set.ml:574:12>>*/ return [0,
                       /*<<set.ml:574:12>>*/ create
                        /*<<set.ml:574:12>>*/ (left, mid, right),
                      l$2] /*<<set.ml:574:12>>*/ ;
              /*<<set.ml:574:36>>*/ };
           /*<<set.ml:576:10>>*/ return  /*<<set.ml:576:10>>*/ sub
                    /*<<set.ml:576:10>>*/ ( /*<<set.ml:576:15>>*/ caml_call1
                      /*<<set.ml:576:15>>*/ (Stdlib_List[1], l$0),
                    l$0)
                  [1] /*<<set.ml:576:10>>*/ ;
         }
         var x4 = _q_[1];
          /*<<set.ml:587:39>>*/ return  /*<<set.ml:587:39>>*/ add
                  /*<<set.ml:587:39>>*/ (x4,
                   /*<<set.ml:587:39>>*/ add
                    /*<<set.ml:587:39>>*/ (x3,
                     /*<<set.ml:587:47>>*/ add
                      /*<<set.ml:587:47>>*/ (x2,
                       /*<<set.ml:587:55>>*/ add
                        /*<<set.ml:587:55>>*/ (x1,
                         /*<<set.ml:587:63>>*/ singleton /*<<set.ml:587:63>>*/ (x0))))) /*<<set.ml:588:58>>*/ ;
         /*<<set.ml:588:58>>*/ }
        function add_seq(i, m){
          /*<<set.ml:591:6>>*/ return  /*<<set.ml:591:6>>*/ caml_call3
                  /*<<set.ml:591:6>>*/ (Stdlib_Seq[5],
                  function(s, x){
                    /*<<set.ml:591:32>>*/ return  /*<<set.ml:591:32>>*/ add
                            /*<<set.ml:591:32>>*/ (x, s) /*<<set.ml:591:39>>*/ ;
                   /*<<set.ml:591:39>>*/ },
                  m,
                  i) /*<<set.ml:591:44>>*/ ;
         /*<<set.ml:591:44>>*/ }
        function of_seq(i){
          /*<<set.ml:593:19>>*/ return  /*<<set.ml:590:16>>*/ add_seq
                  /*<<set.ml:590:16>>*/ (i, empty) /*<<set.ml:593:34>>*/ ;
         /*<<set.ml:593:34>>*/ }
        function seq_of_enum(c, param){
          /*<<set.ml:595:32>>*/ if(! c)
           /*<<set.ml:596:15>>*/ return 0 /*<<set.ml:596:15>>*/ ;
         var
          rest = c[3],
          t = c[2],
          x = c[1],
          _l_ =
             /*<<set.ml:597:55>>*/  /*<<set.ml:597:55>>*/ cons_enum
              /*<<set.ml:597:55>>*/ (t, rest);
          /*<<set.ml:597:29>>*/ return [0,
                 x,
                 function(_m_){ /*<<?>>*/ return seq_of_enum(_l_, _m_);}] /*<<set.ml:597:29>>*/ ;
         /*<<set.ml:597:74>>*/ }
        function to_seq(c){
         var
          _j_ =
             /*<<set.ml:599:32>>*/  /*<<set.ml:599:32>>*/ cons_enum
              /*<<set.ml:599:32>>*/ (c, 0);
          /*<<set.ml:599:32>>*/ return function(_k_){
           /*<<?>>*/ return seq_of_enum(_j_, _k_);} /*<<set.ml:599:32>>*/ ;
         /*<<set.ml:599:49>>*/ }
        function snoc_enum(s, e){
         var s$0 = s, e$0 = e;
          /*<<set.ml:602:6>>*/ for(;;){
          if(! s$0)  /*<<set.ml:603:17>>*/ return e$0 /*<<set.ml:603:17>>*/ ;
          var
           r = s$0[3],
           v = s$0[2],
           l = s$0[1],
           e$1 =  /*<<set.ml:604:37>>*/ [0, v, l, e$0];
          s$0 = r;
          e$0 = e$1;
         }
         /*<<set.ml:604:52>>*/ }
        function rev_seq_of_enum(c, param){
          /*<<set.ml:606:36>>*/ if(! c)
           /*<<set.ml:607:15>>*/ return 0 /*<<set.ml:607:15>>*/ ;
         var
          rest = c[3],
          t = c[2],
          x = c[1],
          _h_ =
             /*<<set.ml:608:59>>*/  /*<<set.ml:608:59>>*/ snoc_enum
              /*<<set.ml:608:59>>*/ (t, rest);
          /*<<set.ml:608:29>>*/ return [0,
                 x,
                 function(_i_){ /*<<?>>*/ return rev_seq_of_enum(_h_, _i_);}] /*<<set.ml:608:29>>*/ ;
         /*<<set.ml:608:78>>*/ }
        function to_rev_seq(c){
         var
          _f_ =
             /*<<set.ml:610:40>>*/  /*<<set.ml:610:40>>*/ snoc_enum
              /*<<set.ml:610:40>>*/ (c, 0);
          /*<<set.ml:610:40>>*/ return function(_g_){
           /*<<?>>*/ return rev_seq_of_enum(_f_, _g_);} /*<<set.ml:610:40>>*/ ;
         /*<<set.ml:610:57>>*/ }
        function to_seq_from(low, s){
         a:
         {
          b:
          {
           var s$0 = s, c = 0;
            /*<<set.ml:613:28>>*/ for(;;){
            if(! s$0) break;
            var
             r = s$0[3],
             v = s$0[2],
             l = s$0[1],
             n =
                /*<<set.ml:616:24>>*/  /*<<set.ml:616:24>>*/ caml_call2
                 /*<<set.ml:616:24>>*/ (Ord[1], v, low);
            if(0 === n) break b;
            if(0 <= n){
             var c$0 =  /*<<set.ml:619:31>>*/ [0, v, r, c];
             s$0 = l;
             c = c$0;
            }
            else
             s$0 = r;
           }
           var _d_ = c;
           break a;
          }
          var _d_ = [0, v, r, c];
         }
          /*<<set.ml:622:19>>*/ return function(_e_){
           /*<<?>>*/ return seq_of_enum(_d_, _e_);} /*<<set.ml:622:19>>*/ ;
         /*<<set.ml:622:34>>*/ }
        return [0,
                empty,
                add,
                singleton,
                remove,
                union,
                inter,
                disjoint,
                diff,
                cardinal,
                elements,
                min_elt,
                min_elt_opt,
                max_elt,
                max_elt_opt,
                min_elt,
                min_elt_opt,
                find,
                find_opt,
                find_first,
                find_first_opt,
                find_last,
                find_last_opt,
                iter,
                fold,
                map,
                filter,
                filter_map,
                partition,
                split,
                is_empty,
                mem,
                equal,
                compare,
                subset,
                for_all,
                exists,
                elements,
                of_list,
                to_seq_from,
                to_seq,
                to_rev_seq,
                add_seq,
                of_seq];
       }];
   runtime.caml_register_global(12, Stdlib_Set, "Stdlib__Set");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Map
//# unitInfo: Requires: Stdlib, Stdlib__List, Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst_Map_bal$3 =  /*<<?>>*/ "Map.bal",
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_List = global_data.Stdlib__List,
    cst_Map_bal = cst_Map_bal$3,
    cst_Map_bal$0 = cst_Map_bal$3,
    cst_Map_bal$1 = cst_Map_bal$3,
    cst_Map_bal$2 = cst_Map_bal$3,
    cst_Map_remove_min_elt = "Map.remove_min_elt",
    _a_ = [0, 0, 0, 0],
    _b_ = [0, "map.ml", 408, 10],
    _c_ = [0, 0, 0],
    Stdlib_Map =
      [0,
       function(Ord){
        function height(param){
          /*<<map.ml:81:17>>*/ if(! param)
           /*<<map.ml:82:17>>*/ return 0 /*<<map.ml:82:17>>*/ ;
         var h = param[5];
          /*<<map.ml:83:20>>*/ return h /*<<map.ml:83:20>>*/ ;
         /*<<map.ml:83:21>>*/ }
        function create(l, x, d, r){
         var
          hl =
             /*<<map.ml:86:15>>*/  /*<<map.ml:86:15>>*/ height
              /*<<map.ml:86:15>>*/ (l),
          hr =
             /*<<map.ml:86:33>>*/  /*<<map.ml:86:33>>*/ height
              /*<<map.ml:86:33>>*/ (r),
          _K_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
          /*<<map.ml:87:10>>*/ return [0, l, x, d, r, _K_] /*<<map.ml:87:10>>*/ ;
         /*<<map.ml:87:65>>*/ }
        function singleton(x, d){
          /*<<map.ml:89:24>>*/ return [0, 0, x, d, 0, 1] /*<<map.ml:89:28>>*/ ;
         /*<<map.ml:89:59>>*/ }
        function bal(l, x, d, r){
          /*<<map.ml:92:6>>*/ if(l) var h = l[5], hl = h; else var hl = 0;
          /*<<map.ml:93:6>>*/ if(r) var h$0 = r[5], hr = h$0; else var hr = 0;
         if((hr + 2 | 0) < hl){
          if(! l)
            /*<<map.ml:96:19>>*/ return  /*<<map.ml:96:19>>*/ caml_call1
                    /*<<map.ml:96:19>>*/ (Stdlib[1], cst_Map_bal$0) /*<<map.ml:119:67>>*/ ;
          var
           lr = l[4],
           ld = l[3],
           lv = l[2],
           ll = l[1],
           _F_ =
              /*<<map.ml:98:28>>*/  /*<<map.ml:98:28>>*/ height
               /*<<map.ml:98:28>>*/ (lr);
          if(_F_ <=  /*<<map.ml:98:15>>*/ height /*<<map.ml:98:15>>*/ (ll))
            /*<<map.ml:99:30>>*/ return  /*<<map.ml:99:30>>*/ create
                    /*<<map.ml:99:30>>*/ (ll,
                    lv,
                    ld,
                     /*<<map.ml:99:30>>*/ create
                      /*<<map.ml:99:30>>*/ (lr, x, d, r)) /*<<map.ml:119:67>>*/ ;
          if(! lr)
            /*<<map.ml:102:25>>*/ return  /*<<map.ml:102:25>>*/ caml_call1
                    /*<<map.ml:102:25>>*/ (Stdlib[1], cst_Map_bal) /*<<map.ml:119:67>>*/ ;
          var
           lrr = lr[4],
           lrd = lr[3],
           lrv = lr[2],
           lrl = lr[1],
           _G_ =
              /*<<map.ml:104:55>>*/  /*<<map.ml:104:55>>*/ create
               /*<<map.ml:104:55>>*/ (lrr, x, d, r);
           /*<<map.ml:104:55>>*/ return  /*<<map.ml:104:55>>*/ create
                   /*<<map.ml:104:55>>*/ ( /*<<map.ml:104:25>>*/ create
                     /*<<map.ml:104:25>>*/ (ll, lv, ld, lrl),
                   lrv,
                   lrd,
                   _G_) /*<<map.ml:119:67>>*/ ;
         }
         if((hl + 2 | 0) >= hr){
          var _J_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
           /*<<map.ml:119:12>>*/ return [0, l, x, d, r, _J_] /*<<map.ml:119:12>>*/ ;
         }
         if(! r)
           /*<<map.ml:108:19>>*/ return  /*<<map.ml:108:19>>*/ caml_call1
                   /*<<map.ml:108:19>>*/ (Stdlib[1], cst_Map_bal$2) /*<<map.ml:119:67>>*/ ;
         var
          rr = r[4],
          rd = r[3],
          rv = r[2],
          rl = r[1],
          _H_ =
             /*<<map.ml:110:28>>*/  /*<<map.ml:110:28>>*/ height
              /*<<map.ml:110:28>>*/ (rl);
         if(_H_ <=  /*<<map.ml:110:15>>*/ height /*<<map.ml:110:15>>*/ (rr))
           /*<<map.ml:111:14>>*/ return  /*<<map.ml:111:14>>*/ create
                   /*<<map.ml:111:14>>*/ ( /*<<map.ml:111:21>>*/ create
                     /*<<map.ml:111:21>>*/ (l, x, d, rl),
                   rv,
                   rd,
                   rr) /*<<map.ml:119:67>>*/ ;
         if(! rl)
           /*<<map.ml:114:25>>*/ return  /*<<map.ml:114:25>>*/ caml_call1
                   /*<<map.ml:114:25>>*/ (Stdlib[1], cst_Map_bal$1) /*<<map.ml:119:67>>*/ ;
         var
          rlr = rl[4],
          rld = rl[3],
          rlv = rl[2],
          rll = rl[1],
          _I_ =
             /*<<map.ml:116:52>>*/  /*<<map.ml:116:52>>*/ create
              /*<<map.ml:116:52>>*/ (rlr, rv, rd, rr);
          /*<<map.ml:116:52>>*/ return  /*<<map.ml:116:52>>*/ create
                  /*<<map.ml:116:52>>*/ ( /*<<map.ml:116:25>>*/ create
                    /*<<map.ml:116:25>>*/ (l, x, d, rll),
                  rlv,
                  rld,
                  _I_) /*<<map.ml:119:67>>*/ ;
         /*<<map.ml:119:67>>*/ }
        var empty =  /*<<map.ml:91:12>>*/ 0;
        function is_empty(param){
          /*<<map.ml:123:19>>*/ return param ? 0 : 1 /*<<map.ml:123:54>>*/ ;
         /*<<map.ml:123:54>>*/ }
        function add(x, data, m){
          /*<<map.ml:125:16>>*/ if(! m)
           /*<<map.ml:127:14>>*/ return [0, 0, x, data, 0, 1] /*<<map.ml:127:14>>*/ ;
         var
          h = m[5],
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          c =
             /*<<map.ml:129:18>>*/  /*<<map.ml:129:18>>*/ caml_call2
              /*<<map.ml:129:18>>*/ (Ord[1], x, v);
          /*<<map.ml:130:10>>*/ if(0 === c)
          return d === data ? m : [0, l, x, data, r, h] /*<<map.ml:137:47>>*/ ;
         if(0 <= c){
          var
           rr =
              /*<<map.ml:136:21>>*/  /*<<map.ml:136:21>>*/ add
               /*<<map.ml:136:21>>*/ (x, data, r);
          return r === rr
                  ? m
                  :  /*<<map.ml:137:35>>*/ bal
                     /*<<map.ml:137:35>>*/ (l, v, d, rr) /*<<map.ml:137:47>>*/ ;
         }
         var
          ll =
             /*<<map.ml:133:21>>*/  /*<<map.ml:133:21>>*/ add
              /*<<map.ml:133:21>>*/ (x, data, l);
         return l === ll
                 ? m
                 :  /*<<map.ml:134:35>>*/ bal
                    /*<<map.ml:134:35>>*/ (ll, v, d, r) /*<<map.ml:137:47>>*/ ;
         /*<<map.ml:137:47>>*/ }
        function find(x, param){
         var param$0 = param;
          /*<<map.ml:139:17>>*/ for(;;){
          if(! param$0)
            /*<<map.ml:141:10>>*/ throw  /*<<map.ml:141:10>>*/ caml_maybe_attach_backtrace
                   /*<<map.ml:141:10>>*/ (Stdlib[8], 1);
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           c =
              /*<<map.ml:143:18>>*/  /*<<map.ml:143:18>>*/ caml_call2
               /*<<map.ml:143:18>>*/ (Ord[1], x, v);
           /*<<map.ml:144:10>>*/ if(0 === c)
            /*<<map.ml:144:24>>*/ return d /*<<map.ml:144:24>>*/ ;
          var r$0 = 0 <= c ? r : l;
          param$0 = r$0;
         }
         /*<<map.ml:145:46>>*/ }
        function find_first(f, param$0){
         var param$1 = param$0;
          /*<<map.ml:156:23>>*/ for(;;){
          if(! param$1)
            /*<<map.ml:158:10>>*/ throw  /*<<map.ml:158:10>>*/ caml_maybe_attach_backtrace
                   /*<<map.ml:158:10>>*/ (Stdlib[8], 1);
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
           /*<<map.ml:160:13>>*/ if
           ( /*<<map.ml:160:13>>*/ caml_call1 /*<<map.ml:160:13>>*/ (f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = l$0;
            /*<<map.ml:147:27>>*/ for(;;){
            if(! param)
              /*<<map.ml:149:10>>*/ return [0, v0, d0] /*<<map.ml:149:10>>*/ ;
            var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
             /*<<map.ml:151:13>>*/ if
             ( /*<<map.ml:151:13>>*/ caml_call1
                /*<<map.ml:151:13>>*/ (f, v0$0)){
             v0 = v0$0;
             d0 = d0$0;
             param = l;
            }
            else
             param = r;
           }
          }
          else
           param$1 = r$0;
         }
         /*<<map.ml:163:26>>*/ }
        function find_first_opt(f, param$0){
         var param$1 = param$0;
          /*<<map.ml:174:27>>*/ for(;;){
          if(! param$1)
            /*<<map.ml:176:10>>*/ return 0 /*<<map.ml:176:10>>*/ ;
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
           /*<<map.ml:178:13>>*/ if
           ( /*<<map.ml:178:13>>*/ caml_call1 /*<<map.ml:178:13>>*/ (f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = l$0;
            /*<<map.ml:165:31>>*/ for(;;){
            if(! param)
              /*<<map.ml:167:10>>*/ return [0, [0, v0, d0]] /*<<map.ml:167:10>>*/ ;
            var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
             /*<<map.ml:169:13>>*/ if
             ( /*<<map.ml:169:13>>*/ caml_call1
                /*<<map.ml:169:13>>*/ (f, v0$0)){
             v0 = v0$0;
             d0 = d0$0;
             param = l;
            }
            else
             param = r;
           }
          }
          else
           param$1 = r$0;
         }
         /*<<map.ml:181:30>>*/ }
        function find_last(f, param$0){
         var param$1 = param$0;
          /*<<map.ml:192:22>>*/ for(;;){
          if(! param$1)
            /*<<map.ml:194:10>>*/ throw  /*<<map.ml:194:10>>*/ caml_maybe_attach_backtrace
                   /*<<map.ml:194:10>>*/ (Stdlib[8], 1);
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
           /*<<map.ml:196:13>>*/ if
           ( /*<<map.ml:196:13>>*/ caml_call1 /*<<map.ml:196:13>>*/ (f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = r$0;
            /*<<map.ml:183:26>>*/ for(;;){
            if(! param)
              /*<<map.ml:185:10>>*/ return [0, v0, d0] /*<<map.ml:185:10>>*/ ;
            var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
             /*<<map.ml:187:13>>*/ if
             ( /*<<map.ml:187:13>>*/ caml_call1
                /*<<map.ml:187:13>>*/ (f, v0$0)){
             v0 = v0$0;
             d0 = d0$0;
             param = r;
            }
            else
             param = l;
           }
          }
          else
           param$1 = l$0;
         }
         /*<<map.ml:199:25>>*/ }
        function find_last_opt(f, param$0){
         var param$1 = param$0;
          /*<<map.ml:210:26>>*/ for(;;){
          if(! param$1)
            /*<<map.ml:212:10>>*/ return 0 /*<<map.ml:212:10>>*/ ;
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
           /*<<map.ml:214:13>>*/ if
           ( /*<<map.ml:214:13>>*/ caml_call1 /*<<map.ml:214:13>>*/ (f, v0$1)){
           var v0 = v0$1, d0 = d0$1, param = r$0;
            /*<<map.ml:201:30>>*/ for(;;){
            if(! param)
              /*<<map.ml:203:10>>*/ return [0, [0, v0, d0]] /*<<map.ml:203:10>>*/ ;
            var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
             /*<<map.ml:205:13>>*/ if
             ( /*<<map.ml:205:13>>*/ caml_call1
                /*<<map.ml:205:13>>*/ (f, v0$0)){
             v0 = v0$0;
             d0 = d0$0;
             param = r;
            }
            else
             param = l;
           }
          }
          else
           param$1 = l$0;
         }
         /*<<map.ml:217:29>>*/ }
        function find_opt(x, param){
         var param$0 = param;
          /*<<map.ml:219:21>>*/ for(;;){
          if(! param$0)
            /*<<map.ml:221:10>>*/ return 0 /*<<map.ml:221:10>>*/ ;
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           c =
              /*<<map.ml:223:18>>*/  /*<<map.ml:223:18>>*/ caml_call2
               /*<<map.ml:223:18>>*/ (Ord[1], x, v);
           /*<<map.ml:224:10>>*/ if(0 === c)
            /*<<map.ml:224:24>>*/ return [0, d] /*<<map.ml:224:24>>*/ ;
          var r$0 = 0 <= c ? r : l;
          param$0 = r$0;
         }
         /*<<map.ml:225:50>>*/ }
        function mem(x, param){
         var param$0 = param;
          /*<<map.ml:227:16>>*/ for(;;){
          if(! param$0)
            /*<<map.ml:229:10>>*/ return 0 /*<<map.ml:229:10>>*/ ;
          var
           r = param$0[4],
           v = param$0[2],
           l = param$0[1],
           c =
              /*<<map.ml:231:18>>*/  /*<<map.ml:231:18>>*/ caml_call2
               /*<<map.ml:231:18>>*/ (Ord[1], x, v),
           _E_ = 0 === c ? 1 : 0;
          if(_E_) return _E_;
          var r$0 = 0 <= c ? r : l;
          param$0 = r$0;
         }
         /*<<map.ml:232:49>>*/ }
        function min_binding(param){
         var param$0 = param;
          /*<<map.ml:234:26>>*/ for(;;){
          if(! param$0)
            /*<<map.ml:235:17>>*/ throw  /*<<map.ml:235:17>>*/ caml_maybe_attach_backtrace
                   /*<<map.ml:235:17>>*/ (Stdlib[8], 1);
          var l = param$0[1];
          if(! l){
           var d = param$0[3], v = param$0[2];
            /*<<map.ml:236:32>>*/ return [0, v, d] /*<<map.ml:236:32>>*/ ;
          }
          param$0 = l;
         }
         /*<<map.ml:237:33>>*/ }
        function min_binding_opt(param){
         var param$0 = param;
          /*<<map.ml:239:30>>*/ for(;;){
          if(! param$0)
            /*<<map.ml:240:17>>*/ return 0 /*<<map.ml:240:17>>*/ ;
          var l = param$0[1];
          if(! l){
           var d = param$0[3], v = param$0[2];
            /*<<map.ml:241:32>>*/ return [0, [0, v, d]] /*<<map.ml:241:32>>*/ ;
          }
          param$0 = l;
         }
         /*<<map.ml:242:36>>*/ }
        function max_binding(param){
         var param$0 = param;
          /*<<map.ml:244:26>>*/ for(;;){
          if(! param$0)
            /*<<map.ml:245:17>>*/ throw  /*<<map.ml:245:17>>*/ caml_maybe_attach_backtrace
                   /*<<map.ml:245:17>>*/ (Stdlib[8], 1);
          if(! param$0[4]){
           var d = param$0[3], v = param$0[2];
            /*<<map.ml:246:32>>*/ return [0, v, d] /*<<map.ml:246:32>>*/ ;
          }
          var r = param$0[4];
          param$0 = r;
         }
         /*<<map.ml:247:33>>*/ }
        function max_binding_opt(param){
         var param$0 = param;
          /*<<map.ml:249:30>>*/ for(;;){
          if(! param$0)
            /*<<map.ml:250:17>>*/ return 0 /*<<map.ml:250:17>>*/ ;
          if(! param$0[4]){
           var d = param$0[3], v = param$0[2];
            /*<<map.ml:251:32>>*/ return [0, [0, v, d]] /*<<map.ml:251:32>>*/ ;
          }
          var r = param$0[4];
          param$0 = r;
         }
         /*<<map.ml:252:37>>*/ }
        function remove_min_binding(param){
          /*<<map.ml:254:33>>*/ if(! param)
           /*<<map.ml:255:17>>*/ return  /*<<map.ml:255:17>>*/ caml_call1
                   /*<<map.ml:255:17>>*/ (Stdlib[1], cst_Map_remove_min_elt) /*<<map.ml:257:61>>*/ ;
         var l = param[1];
         if(l){
          var r = param[4], d = param[3], v = param[2];
           /*<<map.ml:257:29>>*/ return  /*<<map.ml:257:29>>*/ bal
                   /*<<map.ml:257:29>>*/ ( /*<<map.ml:257:33>>*/ remove_min_binding
                     /*<<map.ml:257:33>>*/ (l),
                   v,
                   d,
                   r) /*<<map.ml:257:61>>*/ ;
         }
         var r$0 = param[4];
          /*<<map.ml:256:29>>*/ return r$0 /*<<map.ml:256:29>>*/ ;
         /*<<map.ml:257:61>>*/ }
        function _d_(t1, t2){
          /*<<map.ml:260:6>>*/ if(! t1)
           /*<<map.ml:261:22>>*/ return t2 /*<<map.ml:261:22>>*/ ;
         if(! t2)  /*<<map.ml:262:22>>*/ return t1 /*<<map.ml:262:22>>*/ ;
         var
          match =
             /*<<map.ml:264:23>>*/  /*<<map.ml:264:23>>*/ min_binding
              /*<<map.ml:264:23>>*/ (t2),
          d = match[2],
          x = match[1];
          /*<<map.ml:265:21>>*/ return  /*<<map.ml:265:21>>*/ bal
                  /*<<map.ml:265:21>>*/ (t1,
                  x,
                  d,
                   /*<<map.ml:265:21>>*/ remove_min_binding
                    /*<<map.ml:265:21>>*/ (t2)) /*<<map.ml:265:44>>*/ ;
         /*<<map.ml:265:44>>*/ }
        function remove(x, m){
          /*<<map.ml:267:19>>*/ if(! m)
           /*<<map.ml:269:10>>*/ return 0 /*<<map.ml:269:10>>*/ ;
         var
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          c =
             /*<<map.ml:271:18>>*/  /*<<map.ml:271:18>>*/ caml_call2
              /*<<map.ml:271:18>>*/ (Ord[1], x, v);
          /*<<map.ml:272:10>>*/ if(0 === c)
           /*<<map.ml:272:24>>*/ return  /*<<map.ml:272:24>>*/ _d_
                   /*<<map.ml:272:24>>*/ (l, r) /*<<map.ml:276:70>>*/ ;
         if(0 <= c){
          var
           rr =
              /*<<map.ml:276:21>>*/  /*<<map.ml:276:21>>*/ remove
               /*<<map.ml:276:21>>*/ (x, r);
          return r === rr
                  ? m
                  :  /*<<map.ml:276:58>>*/ bal
                     /*<<map.ml:276:58>>*/ (l, v, d, rr) /*<<map.ml:276:70>>*/ ;
         }
         var
          ll =
             /*<<map.ml:274:21>>*/  /*<<map.ml:274:21>>*/ remove
              /*<<map.ml:274:21>>*/ (x, l);
         return l === ll
                 ? m
                 :  /*<<map.ml:274:58>>*/ bal
                    /*<<map.ml:274:58>>*/ (ll, v, d, r) /*<<map.ml:276:70>>*/ ;
         /*<<map.ml:276:70>>*/ }
        function update(x, f, m){
          /*<<map.ml:278:19>>*/ if(! m){
          var
           match$0 =
              /*<<map.ml:280:22>>*/  /*<<map.ml:280:22>>*/ caml_call1
               /*<<map.ml:280:22>>*/ (f, 0);
          if(! match$0)
            /*<<map.ml:281:20>>*/ return 0 /*<<map.ml:281:20>>*/ ;
          var data$0 = match$0[1];
           /*<<map.ml:282:29>>*/ return [0, 0, x, data$0, 0, 1] /*<<map.ml:282:29>>*/ ;
         }
         var
          h = m[5],
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          c =
             /*<<map.ml:285:18>>*/  /*<<map.ml:285:18>>*/ caml_call2
              /*<<map.ml:285:18>>*/ (Ord[1], x, v);
          /*<<map.ml:286:10>>*/ if(0 === c){
          var
           match =
              /*<<map.ml:287:18>>*/  /*<<map.ml:287:18>>*/ caml_call1
               /*<<map.ml:287:18>>*/ (f, [0, d]);
          if(! match)
            /*<<map.ml:288:22>>*/ return  /*<<map.ml:288:22>>*/ _d_
                    /*<<map.ml:288:22>>*/ (l, r) /*<<map.ml:296:47>>*/ ;
          var data = match[1];
          return d === data ? m : [0, l, x, data, r, h] /*<<map.ml:296:47>>*/ ;
         }
         if(0 <= c){
          var
           rr =
              /*<<map.ml:295:21>>*/  /*<<map.ml:295:21>>*/ update
               /*<<map.ml:295:21>>*/ (x, f, r);
          return r === rr
                  ? m
                  :  /*<<map.ml:296:35>>*/ bal
                     /*<<map.ml:296:35>>*/ (l, v, d, rr) /*<<map.ml:296:47>>*/ ;
         }
         var
          ll =
             /*<<map.ml:292:21>>*/  /*<<map.ml:292:21>>*/ update
              /*<<map.ml:292:21>>*/ (x, f, l);
         return l === ll
                 ? m
                 :  /*<<map.ml:293:35>>*/ bal
                    /*<<map.ml:293:35>>*/ (ll, v, d, r) /*<<map.ml:296:47>>*/ ;
         /*<<map.ml:296:47>>*/ }
        function add_to_list(x, data, m){
         function add(param){
           /*<<map.ml:299:16>>*/ if(! param)
            /*<<map.ml:299:33>>*/ return [0, [0, data, 0]] /*<<map.ml:299:33>>*/ ;
          var l = param[1];
           /*<<map.ml:299:57>>*/ return [0, [0, data, l]] /*<<map.ml:299:57>>*/ ;
          /*<<map.ml:299:73>>*/ }
          /*<<map.ml:300:6>>*/ return  /*<<map.ml:300:6>>*/ update
                  /*<<map.ml:300:6>>*/ (x, add, m) /*<<map.ml:300:20>>*/ ;
         /*<<map.ml:300:20>>*/ }
        function iter(f, param){
         var param$0 = param;
          /*<<map.ml:302:17>>*/ for(;;){
          if(! param$0)
            /*<<map.ml:303:17>>*/ return 0 /*<<map.ml:303:17>>*/ ;
          var r = param$0[4], d = param$0[3], v = param$0[2], l = param$0[1];
           /*<<map.ml:305:10>>*/  /*<<map.ml:305:10>>*/ iter
            /*<<map.ml:305:10>>*/ (f, l);
           /*<<map.ml:305:20>>*/  /*<<map.ml:305:20>>*/ caml_call2
            /*<<map.ml:305:20>>*/ (f, v, d);
          param$0 = r;
         }
         /*<<map.ml:305:35>>*/ }
        function map(f, param){
          /*<<map.ml:307:16>>*/ if(! param)
           /*<<map.ml:309:10>>*/ return 0 /*<<map.ml:309:10>>*/ ;
         var
          h = param[5],
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          l$0 =
             /*<<map.ml:311:19>>*/  /*<<map.ml:311:19>>*/ map
              /*<<map.ml:311:19>>*/ (f, l),
          d$0 =
             /*<<map.ml:312:19>>*/  /*<<map.ml:312:19>>*/ caml_call1
              /*<<map.ml:312:19>>*/ (f, d),
          r$0 =
             /*<<map.ml:313:19>>*/  /*<<map.ml:313:19>>*/ map
              /*<<map.ml:313:19>>*/ (f, r);
          /*<<map.ml:314:14>>*/ return [0, l$0, v, d$0, r$0, h] /*<<map.ml:314:14>>*/ ;
         /*<<map.ml:314:38>>*/ }
        function mapi(f, param){
          /*<<map.ml:316:17>>*/ if(! param)
           /*<<map.ml:318:10>>*/ return 0 /*<<map.ml:318:10>>*/ ;
         var
          h = param[5],
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          l$0 =
             /*<<map.ml:320:19>>*/  /*<<map.ml:320:19>>*/ mapi
              /*<<map.ml:320:19>>*/ (f, l),
          d$0 =
             /*<<map.ml:321:19>>*/  /*<<map.ml:321:19>>*/ caml_call2
              /*<<map.ml:321:19>>*/ (f, v, d),
          r$0 =
             /*<<map.ml:322:19>>*/  /*<<map.ml:322:19>>*/ mapi
              /*<<map.ml:322:19>>*/ (f, r);
          /*<<map.ml:323:14>>*/ return [0, l$0, v, d$0, r$0, h] /*<<map.ml:323:14>>*/ ;
         /*<<map.ml:323:38>>*/ }
        function fold(f, m, accu){
         var m$0 = m, accu$0 = accu;
          /*<<map.ml:326:6>>*/ for(;;){
          if(! m$0)
            /*<<map.ml:327:17>>*/ return accu$0 /*<<map.ml:327:17>>*/ ;
          var
           r = m$0[4],
           d = m$0[3],
           v = m$0[2],
           l = m$0[1],
           accu$1 =
              /*<<map.ml:329:19>>*/  /*<<map.ml:329:19>>*/ caml_call3
               /*<<map.ml:329:19>>*/ (f,
               v,
               d,
                /*<<map.ml:329:26>>*/ fold
                 /*<<map.ml:329:26>>*/ (f, l, accu$0));
          m$0 = r;
          accu$0 = accu$1;
         }
         /*<<map.ml:329:42>>*/ }
        function for_all(p, param){
         var param$0 = param;
          /*<<map.ml:331:20>>*/ for(;;){
          if(! param$0)
            /*<<map.ml:332:17>>*/ return 1 /*<<map.ml:332:17>>*/ ;
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           _B_ =
              /*<<map.ml:333:29>>*/  /*<<map.ml:333:29>>*/ caml_call2
               /*<<map.ml:333:29>>*/ (p, v, d);
           /*<<map.ml:333:29>>*/ if(_B_){
           var
            _C_ =
               /*<<map.ml:333:38>>*/  /*<<map.ml:333:38>>*/ for_all
                /*<<map.ml:333:38>>*/ (p, l);
            /*<<map.ml:333:38>>*/ if(_C_){param$0 = r; continue;}
           var _D_ = _C_;
          }
          else
           var _D_ = _B_;
           /*<<map.ml:333:38>>*/ return _D_ /*<<map.ml:333:38>>*/ ;
         }
         /*<<map.ml:333:64>>*/ }
        function exists(p, param){
         var param$0 = param;
          /*<<map.ml:335:19>>*/ for(;;){
          if(! param$0)
            /*<<map.ml:336:17>>*/ return 0 /*<<map.ml:336:17>>*/ ;
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           _y_ =
              /*<<map.ml:337:29>>*/  /*<<map.ml:337:29>>*/ caml_call2
               /*<<map.ml:337:29>>*/ (p, v, d);
           /*<<map.ml:337:29>>*/ if(_y_)
           var _z_ = _y_;
          else{
           var
            _A_ =
               /*<<map.ml:337:38>>*/  /*<<map.ml:337:38>>*/ exists
                /*<<map.ml:337:38>>*/ (p, l);
            /*<<map.ml:337:38>>*/ if(! _A_){param$0 = r; continue;}
           var _z_ = _A_;
          }
           /*<<map.ml:337:29>>*/ return _z_ /*<<map.ml:337:29>>*/ ;
         }
         /*<<map.ml:337:62>>*/ }
        function add_min_binding(k, x, param){
          /*<<map.ml:347:28>>*/ if(! param)
           /*<<map.ml:348:17>>*/ return  /*<<map.ml:348:17>>*/ singleton
                   /*<<map.ml:348:17>>*/ (k, x) /*<<map.ml:350:41>>*/ ;
         var r = param[4], d = param[3], v = param[2], l = param[1];
          /*<<map.ml:350:8>>*/ return  /*<<map.ml:350:8>>*/ bal
                  /*<<map.ml:350:8>>*/ ( /*<<map.ml:350:12>>*/ add_min_binding
                    /*<<map.ml:350:12>>*/ (k, x, l),
                  v,
                  d,
                  r) /*<<map.ml:350:41>>*/ ;
         /*<<map.ml:350:41>>*/ }
        function add_max_binding(k, x, param){
          /*<<map.ml:352:28>>*/ if(! param)
           /*<<map.ml:353:17>>*/ return  /*<<map.ml:353:17>>*/ singleton
                   /*<<map.ml:353:17>>*/ (k, x) /*<<map.ml:355:41>>*/ ;
         var r = param[4], d = param[3], v = param[2], l = param[1];
          /*<<map.ml:355:18>>*/ return  /*<<map.ml:355:18>>*/ bal
                  /*<<map.ml:355:18>>*/ (l,
                  v,
                  d,
                   /*<<map.ml:355:18>>*/ add_max_binding
                    /*<<map.ml:355:18>>*/ (k, x, r)) /*<<map.ml:355:41>>*/ ;
         /*<<map.ml:355:41>>*/ }
        function join(l, v, d, r){
          /*<<map.ml:361:6>>*/ if(! l)
           /*<<map.ml:362:22>>*/ return  /*<<map.ml:362:22>>*/ add_min_binding
                   /*<<map.ml:362:22>>*/ (v, d, r) /*<<map.ml:368:24>>*/ ;
         if(! r)
           /*<<map.ml:363:22>>*/ return  /*<<map.ml:363:22>>*/ add_max_binding
                   /*<<map.ml:363:22>>*/ (v, d, l) /*<<map.ml:368:24>>*/ ;
         var
          rh = r[5],
          rr = r[4],
          rd = r[3],
          rv = r[2],
          rl = r[1],
          lh = l[5],
          lr = l[4],
          ld = l[3],
          lv = l[2],
          ll = l[1];
         return (rh + 2 | 0) < lh
                 ?  /*<<map.ml:366:43>>*/ bal
                    /*<<map.ml:366:43>>*/ (ll,
                    lv,
                    ld,
                     /*<<map.ml:366:43>>*/ join
                      /*<<map.ml:366:43>>*/ (lr, v, d, r))
                 : (lh
                   + 2
                   | 0)
                   < rh
                   ?  /*<<map.ml:367:30>>*/ bal
                      /*<<map.ml:367:30>>*/ ( /*<<map.ml:367:34>>*/ join
                        /*<<map.ml:367:34>>*/ (l, v, d, rl),
                      rv,
                      rd,
                      rr)
                   :  /*<<map.ml:368:10>>*/ create
                      /*<<map.ml:368:10>>*/ (l, v, d, r) /*<<map.ml:368:24>>*/ ;
         /*<<map.ml:368:24>>*/ }
        function concat(t1, t2){
          /*<<map.ml:375:6>>*/ if(! t1)
           /*<<map.ml:376:22>>*/ return t2 /*<<map.ml:376:22>>*/ ;
         if(! t2)  /*<<map.ml:377:22>>*/ return t1 /*<<map.ml:377:22>>*/ ;
         var
          match =
             /*<<map.ml:379:23>>*/  /*<<map.ml:379:23>>*/ min_binding
              /*<<map.ml:379:23>>*/ (t2),
          d = match[2],
          x = match[1];
          /*<<map.ml:380:22>>*/ return  /*<<map.ml:380:22>>*/ join
                  /*<<map.ml:380:22>>*/ (t1,
                  x,
                  d,
                   /*<<map.ml:380:22>>*/ remove_min_binding
                    /*<<map.ml:380:22>>*/ (t2)) /*<<map.ml:380:45>>*/ ;
         /*<<map.ml:380:45>>*/ }
        function concat_or_join(t1, v, d, t2){
          /*<<map.ml:383:6>>*/ if(! d)
           /*<<map.ml:385:16>>*/ return  /*<<map.ml:385:16>>*/ concat
                   /*<<map.ml:385:16>>*/ (t1, t2) /*<<map.ml:385:28>>*/ ;
         var d$0 = d[1];
          /*<<map.ml:384:18>>*/ return  /*<<map.ml:384:18>>*/ join
                  /*<<map.ml:384:18>>*/ (t1, v, d$0, t2) /*<<map.ml:385:28>>*/ ;
         /*<<map.ml:385:28>>*/ }
        function split(x, param){
          /*<<map.ml:387:18>>*/ if(! param)
           /*<<map.ml:389:10>>*/ return _a_ /*<<map.ml:389:10>>*/ ;
         var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          c =
             /*<<map.ml:391:18>>*/  /*<<map.ml:391:18>>*/ caml_call2
              /*<<map.ml:391:18>>*/ (Ord[1], x, v);
          /*<<map.ml:392:10>>*/ if(0 === c)
           /*<<map.ml:392:24>>*/ return [0, l, [0, d], r] /*<<map.ml:392:24>>*/ ;
         if(0 <= c){
          var
           match =
              /*<<map.ml:396:33>>*/  /*<<map.ml:396:33>>*/ split
               /*<<map.ml:396:33>>*/ (x, r),
           rr = match[3],
           pres = match[2],
           lr = match[1];
           /*<<map.ml:396:46>>*/ return [0,
                   /*<<map.ml:396:47>>*/ join
                    /*<<map.ml:396:47>>*/ (l, v, d, lr),
                  pres,
                  rr] /*<<map.ml:396:46>>*/ ;
         }
         var
          match$0 =
             /*<<map.ml:394:33>>*/  /*<<map.ml:394:33>>*/ split
              /*<<map.ml:394:33>>*/ (x, l),
          rl = match$0[3],
          pres$0 = match$0[2],
          ll = match$0[1];
          /*<<map.ml:394:46>>*/ return [0,
                 ll,
                 pres$0,
                  /*<<map.ml:394:57>>*/ join
                   /*<<map.ml:394:57>>*/ (rl, v, d, r)] /*<<map.ml:394:46>>*/ ;
         /*<<map.ml:396:71>>*/ }
        function merge(f, s1, s2){
          /*<<map.ml:399:6>>*/ if(s1){
          var h1 = s1[5], r1 = s1[4], d1 = s1[3], v1 = s1[2], l1 = s1[1];
          if( /*<<map.ml:401:60>>*/ height /*<<map.ml:401:60>>*/ (s2) <= h1){
           var
            match =
               /*<<map.ml:402:29>>*/  /*<<map.ml:402:29>>*/ split
                /*<<map.ml:402:29>>*/ (v1, s2),
            r2 = match[3],
            d2 = match[2],
            l2 = match[1],
            _u_ =
               /*<<map.ml:403:64>>*/  /*<<map.ml:403:64>>*/ merge
                /*<<map.ml:403:64>>*/ (f, r1, r2),
            _v_ =
               /*<<map.ml:403:44>>*/  /*<<map.ml:403:44>>*/ caml_call3
                /*<<map.ml:403:44>>*/ (f, v1, [0, d1], d2);
            /*<<map.ml:403:64>>*/ return  /*<<map.ml:403:64>>*/ concat_or_join
                    /*<<map.ml:403:64>>*/ ( /*<<map.ml:403:25>>*/ merge
                      /*<<map.ml:403:25>>*/ (f, l1, l2),
                    v1,
                    _v_,
                    _u_) /*<<map.ml:408:22>>*/ ;
          }
         }
         else if(! s2)  /*<<map.ml:400:26>>*/ return 0 /*<<map.ml:400:26>>*/ ;
         if(! s2)
           /*<<map.ml:408:10>>*/ throw  /*<<map.ml:408:10>>*/ caml_maybe_attach_backtrace
                  /*<<map.ml:408:10>>*/ ([0, Assert_failure, _b_], 1);
         var
          r2$0 = s2[4],
          d2$0 = s2[3],
          v2 = s2[2],
          l2$0 = s2[1],
          match$0 =
             /*<<map.ml:405:29>>*/  /*<<map.ml:405:29>>*/ split
              /*<<map.ml:405:29>>*/ (v2, s1),
          r1$0 = match$0[3],
          d1$0 = match$0[2],
          l1$0 = match$0[1],
          _w_ =
             /*<<map.ml:406:64>>*/  /*<<map.ml:406:64>>*/ merge
              /*<<map.ml:406:64>>*/ (f, r1$0, r2$0),
          _x_ =
             /*<<map.ml:406:44>>*/  /*<<map.ml:406:44>>*/ caml_call3
              /*<<map.ml:406:44>>*/ (f, v2, d1$0, [0, d2$0]);
          /*<<map.ml:406:64>>*/ return  /*<<map.ml:406:64>>*/ concat_or_join
                  /*<<map.ml:406:64>>*/ ( /*<<map.ml:406:25>>*/ merge
                    /*<<map.ml:406:25>>*/ (f, l1$0, l2$0),
                  v2,
                  _x_,
                  _w_) /*<<map.ml:408:22>>*/ ;
         /*<<map.ml:408:22>>*/ }
        function union(f, s1, s2){
          /*<<map.ml:411:6>>*/ if(s1){
          if(s2){
           var
            h2 = s2[5],
            r2 = s2[4],
            d2 = s2[3],
            v2 = s2[2],
            l2 = s2[1],
            h1 = s1[5],
            r1 = s1[4],
            d1 = s1[3],
            v1 = s1[2],
            l1 = s1[1];
           if(h2 <= h1){
            var
             match =
                /*<<map.ml:416:31>>*/  /*<<map.ml:416:31>>*/ split
                 /*<<map.ml:416:31>>*/ (v1, s2),
             r2$0 = match[3],
             d2$0 = match[2],
             l2$0 = match[1],
             l =
                /*<<map.ml:417:20>>*/  /*<<map.ml:417:20>>*/ union
                 /*<<map.ml:417:20>>*/ (f, l1, l2$0),
             r =
                /*<<map.ml:417:42>>*/  /*<<map.ml:417:42>>*/ union
                 /*<<map.ml:417:42>>*/ (f, r1, r2$0);
             /*<<map.ml:418:12>>*/ if(! d2$0)
              /*<<map.ml:419:22>>*/ return  /*<<map.ml:419:22>>*/ join
                      /*<<map.ml:419:22>>*/ (l, v1, d1, r) /*<<map.ml:426:59>>*/ ;
            var d2$1 = d2$0[1];
             /*<<map.ml:420:25>>*/ return  /*<<map.ml:420:25>>*/ concat_or_join
                     /*<<map.ml:420:25>>*/ (l,
                     v1,
                      /*<<map.ml:420:45>>*/ caml_call3
                       /*<<map.ml:420:45>>*/ (f, v1, d1, d2$1),
                     r) /*<<map.ml:426:59>>*/ ;
           }
           var
            match$0 =
               /*<<map.ml:422:31>>*/  /*<<map.ml:422:31>>*/ split
                /*<<map.ml:422:31>>*/ (v2, s1),
            r1$0 = match$0[3],
            d1$0 = match$0[2],
            l1$0 = match$0[1],
            l$0 =
               /*<<map.ml:423:20>>*/  /*<<map.ml:423:20>>*/ union
                /*<<map.ml:423:20>>*/ (f, l1$0, l2),
            r$0 =
               /*<<map.ml:423:42>>*/  /*<<map.ml:423:42>>*/ union
                /*<<map.ml:423:42>>*/ (f, r1$0, r2);
            /*<<map.ml:424:12>>*/ if(! d1$0)
             /*<<map.ml:425:22>>*/ return  /*<<map.ml:425:22>>*/ join
                     /*<<map.ml:425:22>>*/ (l$0, v2, d2, r$0) /*<<map.ml:426:59>>*/ ;
           var d1$1 = d1$0[1];
            /*<<map.ml:426:25>>*/ return  /*<<map.ml:426:25>>*/ concat_or_join
                    /*<<map.ml:426:25>>*/ (l$0,
                    v2,
                     /*<<map.ml:426:45>>*/ caml_call3
                      /*<<map.ml:426:45>>*/ (f, v2, d1$1, d2),
                    r$0) /*<<map.ml:426:59>>*/ ;
          }
          var s = s1;
         }
         else
          var s = s2;
          /*<<map.ml:412:35>>*/ return s /*<<map.ml:412:35>>*/ ;
         /*<<map.ml:426:59>>*/ }
        function filter(p, m){
          /*<<map.ml:428:19>>*/ if(! m)
           /*<<map.ml:429:17>>*/ return 0 /*<<map.ml:429:17>>*/ ;
         var
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
          l$0 =
             /*<<map.ml:432:19>>*/  /*<<map.ml:432:19>>*/ filter
              /*<<map.ml:432:19>>*/ (p, l),
          pvd =
             /*<<map.ml:433:20>>*/  /*<<map.ml:433:20>>*/ caml_call2
              /*<<map.ml:433:20>>*/ (p, v, d),
          r$0 =
             /*<<map.ml:434:19>>*/  /*<<map.ml:434:19>>*/ filter
              /*<<map.ml:434:19>>*/ (p, r);
          /*<<map.ml:435:10>>*/ if(! pvd)
           /*<<map.ml:436:15>>*/ return  /*<<map.ml:436:15>>*/ concat
                   /*<<map.ml:436:15>>*/ (l$0, r$0) /*<<map.ml:436:27>>*/ ;
         if(l === l$0 && r === r$0)
           /*<<map.ml:435:45>>*/ return m /*<<map.ml:435:45>>*/ ;
          /*<<map.ml:435:52>>*/ return  /*<<map.ml:435:52>>*/ join
                  /*<<map.ml:435:52>>*/ (l$0, v, d, r$0) /*<<map.ml:436:27>>*/ ;
         /*<<map.ml:436:27>>*/ }
        function filter_map(f, param){
          /*<<map.ml:438:23>>*/ if(! param)
           /*<<map.ml:439:17>>*/ return 0 /*<<map.ml:439:17>>*/ ;
         var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          l$0 =
             /*<<map.ml:442:19>>*/  /*<<map.ml:442:19>>*/ filter_map
              /*<<map.ml:442:19>>*/ (f, l),
          fvd =
             /*<<map.ml:443:20>>*/  /*<<map.ml:443:20>>*/ caml_call2
              /*<<map.ml:443:20>>*/ (f, v, d),
          r$0 =
             /*<<map.ml:444:19>>*/  /*<<map.ml:444:19>>*/ filter_map
              /*<<map.ml:444:19>>*/ (f, r);
          /*<<map.ml:445:10>>*/ if(! fvd)
           /*<<map.ml:447:22>>*/ return  /*<<map.ml:447:22>>*/ concat
                   /*<<map.ml:447:22>>*/ (l$0, r$0) /*<<map.ml:448:13>>*/ ;
         var d$0 = fvd[1];
          /*<<map.ml:446:25>>*/ return  /*<<map.ml:446:25>>*/ join
                  /*<<map.ml:446:25>>*/ (l$0, v, d$0, r$0) /*<<map.ml:448:13>>*/ ;
         /*<<map.ml:448:13>>*/ }
        function partition(p, param){
          /*<<map.ml:450:22>>*/ if(! param)
           /*<<map.ml:451:17>>*/ return _c_ /*<<map.ml:451:17>>*/ ;
         var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
          match =
             /*<<map.ml:454:25>>*/  /*<<map.ml:454:25>>*/ partition
              /*<<map.ml:454:25>>*/ (p, l),
          lf = match[2],
          lt = match[1],
          pvd =
             /*<<map.ml:455:20>>*/  /*<<map.ml:455:20>>*/ caml_call2
              /*<<map.ml:455:20>>*/ (p, v, d),
          match$0 =
             /*<<map.ml:456:25>>*/  /*<<map.ml:456:25>>*/ partition
              /*<<map.ml:456:25>>*/ (p, r),
          rf = match$0[2],
          rt = match$0[1];
          /*<<map.ml:457:10>>*/ if(pvd){
          var
           _s_ =
              /*<<map.ml:458:32>>*/  /*<<map.ml:458:32>>*/ concat
               /*<<map.ml:458:32>>*/ (lf, rf);
           /*<<map.ml:458:15>>*/ return [0,
                   /*<<map.ml:458:16>>*/ join
                    /*<<map.ml:458:16>>*/ (lt, v, d, rt),
                  _s_] /*<<map.ml:458:15>>*/ ;
         }
         var
          _t_ =
             /*<<map.ml:459:30>>*/  /*<<map.ml:459:30>>*/ join
              /*<<map.ml:459:30>>*/ (lf, v, d, rf);
          /*<<map.ml:459:15>>*/ return [0,
                  /*<<map.ml:459:16>>*/ concat /*<<map.ml:459:16>>*/ (lt, rt),
                 _t_] /*<<map.ml:459:15>>*/ ;
         /*<<map.ml:459:45>>*/ }
        function cons_enum(m, e){
         var m$0 = m, e$0 = e;
          /*<<map.ml:464:6>>*/ for(;;){
          if(! m$0)  /*<<map.ml:465:17>>*/ return e$0 /*<<map.ml:465:17>>*/ ;
          var
           r = m$0[4],
           d = m$0[3],
           v = m$0[2],
           l = m$0[1],
           e$1 =  /*<<map.ml:466:41>>*/ [0, v, d, r, e$0];
          m$0 = l;
          e$0 = e$1;
         }
         /*<<map.ml:466:59>>*/ }
        function compare(cmp, m1, m2){
         var
          e2$2 =
             /*<<map.ml:480:40>>*/  /*<<map.ml:480:40>>*/ cons_enum
              /*<<map.ml:480:40>>*/ (m2, 0),
          e1$2 =
             /*<<map.ml:480:21>>*/  /*<<map.ml:480:21>>*/ cons_enum
              /*<<map.ml:480:21>>*/ (m1, 0),
          e1 = e1$2,
          e2 = e2$2;
          /*<<map.ml:470:10>>*/ for(;;){
          if(! e1) return e2 ? -1 : 0 /*<<map.ml:480:58>>*/ ;
          if(! e2)  /*<<map.ml:473:22>>*/ return 1 /*<<map.ml:473:22>>*/ ;
          var
           e2$0 = e2[4],
           r2 = e2[3],
           d2 = e2[2],
           v2 = e2[1],
           e1$0 = e1[4],
           r1 = e1[3],
           d1 = e1[2],
           v1 = e1[1],
           c =
              /*<<map.ml:475:20>>*/  /*<<map.ml:475:20>>*/ caml_call2
               /*<<map.ml:475:20>>*/ (Ord[1], v1, v2);
           /*<<map.ml:476:12>>*/ if(0 !== c)
            /*<<map.ml:476:27>>*/ return c /*<<map.ml:476:27>>*/ ;
          var
           c$0 =
              /*<<map.ml:477:20>>*/  /*<<map.ml:477:20>>*/ caml_call2
               /*<<map.ml:477:20>>*/ (cmp, d1, d2);
           /*<<map.ml:478:12>>*/ if(0 !== c$0)
            /*<<map.ml:478:27>>*/ return c$0 /*<<map.ml:478:27>>*/ ;
          var
           e2$1 =
              /*<<map.ml:479:42>>*/  /*<<map.ml:479:42>>*/ cons_enum
               /*<<map.ml:479:42>>*/ (r2, e2$0),
           e1$1 =
              /*<<map.ml:479:24>>*/  /*<<map.ml:479:24>>*/ cons_enum
               /*<<map.ml:479:24>>*/ (r1, e1$0);
          e1 = e1$1;
          e2 = e2$1;
         }
         /*<<map.ml:480:58>>*/ }
        function equal(cmp, m1, m2){
         var
          e2$2 =
             /*<<map.ml:491:38>>*/  /*<<map.ml:491:38>>*/ cons_enum
              /*<<map.ml:491:38>>*/ (m2, 0),
          e1$2 =
             /*<<map.ml:491:19>>*/  /*<<map.ml:491:19>>*/ cons_enum
              /*<<map.ml:491:19>>*/ (m1, 0),
          e1 = e1$2,
          e2 = e2$2;
          /*<<map.ml:484:10>>*/ for(;;){
          if(! e1) return e2 ? 0 : 1 /*<<map.ml:491:56>>*/ ;
          if(! e2)  /*<<map.ml:487:22>>*/ return 0 /*<<map.ml:487:22>>*/ ;
          var
           e2$0 = e2[4],
           r2 = e2[3],
           d2 = e2[2],
           v2 = e2[1],
           e1$0 = e1[4],
           r1 = e1[3],
           d1 = e1[2],
           v1 = e1[1],
           _p_ =
             0
              ===
                /*<<map.ml:489:12>>*/ caml_call2
                 /*<<map.ml:489:12>>*/ (Ord[1], v1, v2)
              ? 1
              : 0;
          if(_p_){
           var
            _q_ =
               /*<<map.ml:489:37>>*/  /*<<map.ml:489:37>>*/ caml_call2
                /*<<map.ml:489:37>>*/ (cmp, d1, d2);
            /*<<map.ml:489:37>>*/ if(_q_){
            var
             e2$1 =
                /*<<map.ml:490:40>>*/  /*<<map.ml:490:40>>*/ cons_enum
                 /*<<map.ml:490:40>>*/ (r2, e2$0),
             e1$1 =
                /*<<map.ml:490:22>>*/  /*<<map.ml:490:22>>*/ cons_enum
                 /*<<map.ml:490:22>>*/ (r1, e1$0);
            e1 = e1$1;
            e2 = e2$1;
            continue;
           }
           var _r_ = _q_;
          }
          else
           var _r_ = _p_;
           /*<<map.ml:489:37>>*/ return _r_ /*<<map.ml:489:37>>*/ ;
         }
         /*<<map.ml:491:56>>*/ }
        function cardinal(param){
          /*<<map.ml:493:23>>*/ if(! param)
           /*<<map.ml:494:17>>*/ return 0 /*<<map.ml:494:17>>*/ ;
         var
          r = param[4],
          l = param[1],
          _o_ =
             /*<<map.ml:495:40>>*/  /*<<map.ml:495:40>>*/ cardinal
              /*<<map.ml:495:40>>*/ (r);
         return ( /*<<map.ml:495:23>>*/ cardinal /*<<map.ml:495:23>>*/ (l) + 1
                | 0)
                + _o_
                | 0;
         /*<<map.ml:495:50>>*/ }
        function bindings_aux(accu, param){
         var accu$0 = accu, param$0 = param;
          /*<<map.ml:497:25>>*/ for(;;){
          if(! param$0)
            /*<<map.ml:498:17>>*/ return accu$0 /*<<map.ml:498:17>>*/ ;
          var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
           accu$1 =
              /*<<map.ml:499:42>>*/ [0,
              [0, v, d],
               /*<<map.ml:499:53>>*/ bindings_aux
                /*<<map.ml:499:53>>*/ (accu$0, r)];
          accu$0 = accu$1;
          param$0 = l;
         }
         /*<<map.ml:499:75>>*/ }
        function bindings(s){
          /*<<map.ml:502:6>>*/ return  /*<<map.ml:502:6>>*/ bindings_aux
                  /*<<map.ml:502:6>>*/ (0, s) /*<<map.ml:502:23>>*/ ;
         /*<<map.ml:502:23>>*/ }
        function of_list(bs){
          /*<<map.ml:509:21>>*/ return  /*<<map.ml:509:21>>*/ caml_call3
                  /*<<map.ml:509:21>>*/ (Stdlib_List[26],
                  function(m, param){
                   var v = param[2], k = param[1];
                    /*<<map.ml:509:53>>*/ return  /*<<map.ml:509:53>>*/ add
                            /*<<map.ml:509:53>>*/ (k, v, m) /*<<map.ml:509:63>>*/ ;
                   /*<<map.ml:509:63>>*/ },
                  empty,
                  bs) /*<<map.ml:509:72>>*/ ;
         /*<<map.ml:509:72>>*/ }
        function add_seq(i, m){
          /*<<map.ml:512:6>>*/ return  /*<<map.ml:512:6>>*/ caml_call3
                  /*<<map.ml:512:6>>*/ (Stdlib_Seq[5],
                  function(m, param){
                   var v = param[2], k = param[1];
                    /*<<map.ml:512:36>>*/ return  /*<<map.ml:512:36>>*/ add
                            /*<<map.ml:512:36>>*/ (k, v, m) /*<<map.ml:512:46>>*/ ;
                   /*<<map.ml:512:46>>*/ },
                  m,
                  i) /*<<map.ml:512:50>>*/ ;
         /*<<map.ml:512:50>>*/ }
        function of_seq(i){
          /*<<map.ml:514:19>>*/ return  /*<<map.ml:91:12>>*/ add_seq
                  /*<<map.ml:91:12>>*/ (i, empty) /*<<map.ml:514:34>>*/ ;
         /*<<map.ml:514:34>>*/ }
        function seq_of_enum(c, param){
          /*<<map.ml:516:32>>*/ if(! c)
           /*<<map.ml:517:15>>*/ return 0 /*<<map.ml:517:15>>*/ ;
         var
          rest = c[4],
          t = c[3],
          v = c[2],
          k = c[1],
          _m_ =
             /*<<map.ml:518:59>>*/  /*<<map.ml:518:59>>*/ cons_enum
              /*<<map.ml:518:59>>*/ (t, rest);
          /*<<map.ml:518:29>>*/ return [0,
                 [0, k, v],
                 function(_n_){ /*<<?>>*/ return seq_of_enum(_m_, _n_);}] /*<<map.ml:518:29>>*/ ;
         /*<<map.ml:518:78>>*/ }
        function to_seq(m){
         var
          _k_ =
             /*<<map.ml:521:19>>*/  /*<<map.ml:521:19>>*/ cons_enum
              /*<<map.ml:521:19>>*/ (m, 0);
          /*<<map.ml:521:19>>*/ return function(_l_){
           /*<<?>>*/ return seq_of_enum(_k_, _l_);} /*<<map.ml:521:19>>*/ ;
         /*<<map.ml:521:36>>*/ }
        function snoc_enum(s, e){
         var s$0 = s, e$0 = e;
          /*<<map.ml:524:6>>*/ for(;;){
          if(! s$0)  /*<<map.ml:525:17>>*/ return e$0 /*<<map.ml:525:17>>*/ ;
          var
           r = s$0[4],
           d = s$0[3],
           v = s$0[2],
           l = s$0[1],
           e$1 =  /*<<map.ml:526:40>>*/ [0, v, d, l, e$0];
          s$0 = r;
          e$0 = e$1;
         }
         /*<<map.ml:526:58>>*/ }
        function rev_seq_of_enum(c, param){
          /*<<map.ml:528:36>>*/ if(! c)
           /*<<map.ml:529:15>>*/ return 0 /*<<map.ml:529:15>>*/ ;
         var
          rest = c[4],
          t = c[3],
          v = c[2],
          k = c[1],
          _i_ =
             /*<<map.ml:531:44>>*/  /*<<map.ml:531:44>>*/ snoc_enum
              /*<<map.ml:531:44>>*/ (t, rest);
          /*<<map.ml:531:10>>*/ return [0,
                 [0, k, v],
                 function(_j_){ /*<<?>>*/ return rev_seq_of_enum(_i_, _j_);}] /*<<map.ml:531:10>>*/ ;
         /*<<map.ml:531:63>>*/ }
        function to_rev_seq(c){
         var
          _g_ =
             /*<<map.ml:534:23>>*/  /*<<map.ml:534:23>>*/ snoc_enum
              /*<<map.ml:534:23>>*/ (c, 0);
          /*<<map.ml:534:23>>*/ return function(_h_){
           /*<<?>>*/ return rev_seq_of_enum(_g_, _h_);} /*<<map.ml:534:23>>*/ ;
         /*<<map.ml:534:40>>*/ }
        function to_seq_from(low, m){
         a:
         {
          b:
          {
           var m$0 = m, c = 0;
            /*<<map.ml:537:28>>*/ for(;;){
            if(! m$0) break;
            var
             r = m$0[4],
             d = m$0[3],
             v = m$0[2],
             l = m$0[1],
             n =
                /*<<map.ml:540:24>>*/  /*<<map.ml:540:24>>*/ caml_call2
                 /*<<map.ml:540:24>>*/ (Ord[1], v, low);
            if(0 === n) break b;
            if(0 <= n){
             var c$0 =  /*<<map.ml:543:31>>*/ [0, v, d, r, c];
             m$0 = l;
             c = c$0;
            }
            else
             m$0 = r;
           }
           var _e_ = c;
           break a;
          }
          var _e_ = [0, v, d, r, c];
         }
          /*<<map.ml:546:19>>*/ return function(_f_){
           /*<<?>>*/ return seq_of_enum(_e_, _f_);} /*<<map.ml:546:19>>*/ ;
         /*<<map.ml:546:34>>*/ }
        return [0,
                empty,
                add,
                add_to_list,
                update,
                singleton,
                remove,
                merge,
                union,
                cardinal,
                bindings,
                min_binding,
                min_binding_opt,
                max_binding,
                max_binding_opt,
                min_binding,
                min_binding_opt,
                find,
                find_opt,
                find_first,
                find_first_opt,
                find_last,
                find_last_opt,
                iter,
                fold,
                map,
                mapi,
                filter,
                filter_map,
                partition,
                split,
                is_empty,
                mem,
                equal,
                compare,
                for_all,
                exists,
                bindings,
                of_list,
                to_seq,
                to_rev_seq,
                to_seq_from,
                add_seq,
                of_seq];
       }];
   runtime.caml_register_global(12, Stdlib_Map, "Stdlib__Map");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Stack
//# unitInfo: Requires: Stdlib__List, Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_List = global_data.Stdlib__List,
    Empty =
       /*<<stack.ml:18:0>>*/ [248,
       "Stdlib.Stack.Empty",
       runtime.caml_fresh_oo_id(0)];
   function create(param){
     /*<<stack.ml:20:16>>*/ return [0, 0, 0] /*<<stack.ml:20:16>>*/ ;
    /*<<stack.ml:20:36>>*/ }
   function clear(s){
     /*<<stack.ml:22:14>>*/ s[1] = 0;
    s[2] = 0;
    return 0;
    /*<<stack.ml:22:35>>*/ }
   function copy(s){
     /*<<stack.ml:24:13>>*/ return [0, s[1], s[2]] /*<<stack.ml:24:13>>*/ ;
    /*<<stack.ml:24:38>>*/ }
   function push(x, s){
     /*<<stack.ml:26:15>>*/ s[1] = [0, x, s[1]];
    s[2] = s[2] + 1 | 0;
    return 0;
    /*<<stack.ml:26:50>>*/ }
   function pop(s){
    var match = s[1];
    if(! match)
      /*<<stack.ml:31:14>>*/ throw  /*<<stack.ml:31:14>>*/ caml_maybe_attach_backtrace
             /*<<stack.ml:31:14>>*/ (Empty, 1);
    var tl = match[2], hd = match[1];
    s[1] = tl;
    s[2] = s[2] - 1 | 0;
     /*<<stack.ml:30:45>>*/ return hd /*<<stack.ml:30:45>>*/ ;
    /*<<stack.ml:31:25>>*/ }
   function pop_opt(s){
    var match = s[1];
    if(! match)  /*<<stack.ml:36:14>>*/ return 0 /*<<stack.ml:36:14>>*/ ;
    var tl = match[2], hd = match[1];
    s[1] = tl;
    s[2] = s[2] - 1 | 0;
     /*<<stack.ml:35:45>>*/ return [0, hd] /*<<stack.ml:35:45>>*/ ;
    /*<<stack.ml:36:18>>*/ }
   function drop(s){
    var match = s[1];
    if(! match)
      /*<<stack.ml:41:10>>*/ throw  /*<<stack.ml:41:10>>*/ caml_maybe_attach_backtrace
             /*<<stack.ml:41:10>>*/ (Empty, 1);
    var tl = match[2];
    s[1] = tl;
    s[2] = s[2] - 1 | 0;
    return 0;
    /*<<stack.ml:41:21>>*/ }
   function top(s){
    var match = s[1];
    if(! match)
      /*<<stack.ml:46:13>>*/ throw  /*<<stack.ml:46:13>>*/ caml_maybe_attach_backtrace
             /*<<stack.ml:46:13>>*/ (Empty, 1);
    var hd = match[1];
     /*<<stack.ml:45:13>>*/ return hd /*<<stack.ml:45:13>>*/ ;
    /*<<stack.ml:46:24>>*/ }
   function top_opt(s){
    var match = s[1];
    if(! match)  /*<<stack.ml:51:13>>*/ return 0 /*<<stack.ml:51:13>>*/ ;
    var hd = match[1];
     /*<<stack.ml:50:13>>*/ return [0, hd] /*<<stack.ml:50:13>>*/ ;
    /*<<stack.ml:51:17>>*/ }
   function is_empty(s){
     /*<<stack.ml:53:17>>*/ return 0 === s[1] ? 1 : 0;
    /*<<stack.ml:53:27>>*/ }
   function length(s){
     /*<<stack.ml:55:15>>*/ return s[2];
    /*<<stack.ml:55:20>>*/ }
   function iter(f, s){
     /*<<stack.ml:57:15>>*/ return caml_call2(Stdlib_List[18], f, s[1]) /*<<stack.ml:57:30>>*/ ;
    /*<<stack.ml:57:30>>*/ }
   function fold(f, acc, s){
     /*<<stack.ml:59:19>>*/ return caml_call3(Stdlib_List[26], f, acc, s[1]) /*<<stack.ml:59:43>>*/ ;
    /*<<stack.ml:59:43>>*/ }
   function to_seq(s){
     /*<<stack.ml:63:15>>*/ return caml_call1(Stdlib_List[64], s[1]) /*<<stack.ml:63:30>>*/ ;
    /*<<stack.ml:63:30>>*/ }
   function add_seq(q, i){
     /*<<stack.ml:65:18>>*/ return  /*<<stack.ml:65:18>>*/ caml_call2
             /*<<stack.ml:65:18>>*/ (Stdlib_Seq[4],
             function(x){
               /*<<stack.ml:65:37>>*/ return  /*<<stack.ml:63:11>>*/ push
                       /*<<stack.ml:63:11>>*/ (x, q) /*<<stack.ml:65:45>>*/ ;
              /*<<stack.ml:65:45>>*/ },
             i) /*<<stack.ml:65:48>>*/ ;
    /*<<stack.ml:65:48>>*/ }
   function of_seq(g){
    var
     s =
        /*<<stack.ml:68:10>>*/  /*<<stack.ml:68:10>>*/ create
         /*<<stack.ml:68:10>>*/ (0);
     /*<<stack.ml:69:2>>*/  /*<<stack.ml:69:2>>*/ add_seq
      /*<<stack.ml:69:2>>*/ (s, g);
     /*<<stack.ml:69:2>>*/ return s /*<<stack.ml:69:2>>*/ ;
    /*<<stack.ml:70:3>>*/ }
   var
    Stdlib_Stack =
      [0,
       Empty,
       create,
       push,
       pop,
       pop_opt,
       drop,
       top,
       top_opt,
       clear,
       copy,
       is_empty,
       length,
       iter,
       fold,
       to_seq,
       add_seq,
       of_seq];
   runtime.caml_register_global(3, Stdlib_Stack, "Stdlib__Stack");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Queue
//# unitInfo: Requires: Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Seq = global_data.Stdlib__Seq,
    Empty =
       /*<<queue.ml:17:0>>*/ [248,
       "Stdlib.Queue.Empty",
       runtime.caml_fresh_oo_id(0)];
   function create(param){
     /*<<queue.ml:29:16>>*/ return [0, 0, 0, 0] /*<<queue.ml:29:16>>*/ ;
    /*<<queue.ml:33:1>>*/ }
   function clear(q){
     /*<<queue.ml:36:2>>*/ q[1] = 0;
    q[2] = 0;
    q[3] = 0;
    return 0;
    /*<<queue.ml:38:15>>*/ }
   function add(x, q){
    var
     cell =  /*<<queue.ml:41:18>>*/ [0, x, 0],
     match =  /*<<queue.ml:45:2>>*/ q[3];
    return match
            ? (q[1] = q[1] + 1 | 0, match[2] = cell, q[3] = cell, 0)
            : (q[1] = 1, q[2] = cell, q[3] = cell, 0) /*<<queue.ml:53:18>>*/ ;
    /*<<queue.ml:53:18>>*/ }
   function peek(q){
    var match = q[2];
    if(! match)
      /*<<queue.ml:60:11>>*/ throw  /*<<queue.ml:60:11>>*/ caml_maybe_attach_backtrace
             /*<<queue.ml:60:11>>*/ (Empty, 1);
    var content = match[1];
     /*<<queue.ml:61:24>>*/ return content /*<<queue.ml:61:24>>*/ ;
    /*<<queue.ml:61:31>>*/ }
   function peek_opt(q){
    var match = q[2];
    if(! match)  /*<<queue.ml:65:11>>*/ return 0 /*<<queue.ml:65:11>>*/ ;
    var content = match[1];
     /*<<queue.ml:66:24>>*/ return [0, content] /*<<queue.ml:66:24>>*/ ;
    /*<<queue.ml:66:36>>*/ }
   function take(q){
    var _f_ = q[2];
    if(! _f_)
      /*<<queue.ml:73:11>>*/ throw  /*<<queue.ml:73:11>>*/ caml_maybe_attach_backtrace
             /*<<queue.ml:73:11>>*/ (Empty, 1);
    var content = _f_[1];
    if(_f_[2]){
     var next = _f_[2];
     q[1] = q[1] - 1 | 0;
     q[2] = next;
      /*<<queue.ml:80:4>>*/ return content /*<<queue.ml:80:4>>*/ ;
    }
     /*<<queue.ml:75:4>>*/  /*<<queue.ml:75:4>>*/ clear
      /*<<queue.ml:75:4>>*/ (q);
     /*<<queue.ml:75:4>>*/ return content /*<<queue.ml:75:4>>*/ ;
    /*<<queue.ml:80:11>>*/ }
   function take_opt(q){
    var _e_ = q[2];
    if(! _e_)  /*<<queue.ml:84:11>>*/ return 0 /*<<queue.ml:84:11>>*/ ;
    var content = _e_[1];
    if(_e_[2]){
     var next = _e_[2];
     q[1] = q[1] - 1 | 0;
     q[2] = next;
      /*<<queue.ml:91:4>>*/ return [0, content] /*<<queue.ml:91:4>>*/ ;
    }
     /*<<queue.ml:86:4>>*/  /*<<queue.ml:86:4>>*/ clear
      /*<<queue.ml:86:4>>*/ (q);
     /*<<queue.ml:87:4>>*/ return [0, content] /*<<queue.ml:87:4>>*/ ;
    /*<<queue.ml:91:16>>*/ }
   function copy(q){
    var
     cell$0 = q[2],
     q_res =  /*<<queue.ml:108:16>>*/ [0, q[1], 0, 0],
     prev = 0,
     cell = cell$0;
     /*<<queue.ml:98:4>>*/ for(;;){
     if(! cell){
      q_res[3] = prev;
       /*<<queue.ml:99:33>>*/ return q_res /*<<queue.ml:99:33>>*/ ;
     }
     var
      content = cell[1],
      next = cell[2],
      prev$0 =  /*<<queue.ml:101:21>>*/ [0, content, 0];
      /*<<queue.ml:102:6>>*/ if(prev)
      prev[2] = prev$0;
     else
      q_res[2] = prev$0;
     prev = prev$0;
     cell = next;
    }
    /*<<queue.ml:108:74>>*/ }
   function is_empty(q){
     /*<<queue.ml:111:2>>*/ return 0 === q[1] ? 1 : 0;
    /*<<queue.ml:111:14>>*/ }
   function length(q){
     /*<<queue.ml:114:2>>*/ return q[1];
    /*<<queue.ml:114:10>>*/ }
   function iter(f, q){
    var cell$0 = q[2], cell = cell$0;
     /*<<queue.ml:118:4>>*/ for(;;){
     if(! cell)  /*<<queue.ml:119:13>>*/ return 0 /*<<queue.ml:119:13>>*/ ;
     var content = cell[1], next = cell[2];
      /*<<queue.ml:121:6>>*/  /*<<queue.ml:121:6>>*/ caml_call1
       /*<<queue.ml:121:6>>*/ (f, content);
     cell = next;
    }
    /*<<queue.ml:124:27>>*/ }
   function fold(f, accu$1, q){
    var cell$0 = q[2], accu = accu$1, cell = cell$0;
     /*<<queue.ml:128:4>>*/ for(;;){
     if(! cell)  /*<<queue.ml:129:13>>*/ return accu /*<<queue.ml:129:13>>*/ ;
     var
      content = cell[1],
      next = cell[2],
      accu$0 =
         /*<<queue.ml:131:17>>*/  /*<<queue.ml:131:17>>*/ caml_call2
          /*<<queue.ml:131:17>>*/ (f, accu, content);
     accu = accu$0;
     cell = next;
    }
    /*<<queue.ml:134:37>>*/ }
   function transfer(q1, q2){
    var _d_ = 0 < q1[1] ? 1 : 0;
    if(! _d_) return _d_;
    var match = q2[3];
    return match
            ? (q2
               [1]
              = q2[1] + q1[1] | 0,
              match[2] = q1[2],
              q2[3] = q1[3],
               /*<<queue.ml:148:6>>*/ clear /*<<queue.ml:148:6>>*/ (q1))
            : (q2
               [1]
              = q1[1],
              q2[2] = q1[2],
              q2[3] = q1[3],
               /*<<queue.ml:143:6>>*/ clear /*<<queue.ml:143:6>>*/ (q1)) /*<<queue.ml:148:14>>*/ ;
    /*<<queue.ml:148:14>>*/ }
   function to_seq(q){
    function aux(c, param){
      /*<<queue.ml:153:21>>*/ if(! c)
       /*<<queue.ml:154:13>>*/ return 0 /*<<queue.ml:154:13>>*/ ;
     var x = c[1], next = c[2];
      /*<<queue.ml:155:35>>*/ return [0,
             x,
             function(_c_){ /*<<?>>*/ return aux(next, _c_);}] /*<<queue.ml:155:35>>*/ ;
     /*<<queue.ml:155:57>>*/ }
    var _a_ = q[2];
     /*<<queue.ml:153:2>>*/ return function(_b_){
      /*<<?>>*/ return aux(_a_, _b_);} /*<<queue.ml:153:2>>*/ ;
    /*<<queue.ml:157:13>>*/ }
   function add_seq(q, i){
     /*<<queue.ml:159:18>>*/ return  /*<<queue.ml:159:18>>*/ caml_call2
             /*<<queue.ml:159:18>>*/ (Stdlib_Seq[4],
             function(x){
               /*<<queue.ml:159:37>>*/ return  /*<<queue.ml:152:11>>*/ add
                       /*<<queue.ml:152:11>>*/ (x, q) /*<<queue.ml:159:45>>*/ ;
              /*<<queue.ml:159:45>>*/ },
             i) /*<<queue.ml:159:48>>*/ ;
    /*<<queue.ml:159:48>>*/ }
   function of_seq(g){
    var
     q =
        /*<<queue.ml:162:10>>*/  /*<<queue.ml:162:10>>*/ create
         /*<<queue.ml:162:10>>*/ (0);
     /*<<queue.ml:163:2>>*/  /*<<queue.ml:163:2>>*/ add_seq
      /*<<queue.ml:163:2>>*/ (q, g);
     /*<<queue.ml:163:2>>*/ return q /*<<queue.ml:163:2>>*/ ;
    /*<<queue.ml:164:3>>*/ }
   var
    Stdlib_Queue =
      [0,
       Empty,
       create,
       add,
       add,
       take,
       take_opt,
       take,
       peek,
       peek_opt,
       peek,
       clear,
       copy,
       is_empty,
       length,
       iter,
       fold,
       transfer,
       to_seq,
       add_seq,
       of_seq];
   runtime.caml_register_global(2, Stdlib_Queue, "Stdlib__Queue");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Buffer
//# unitInfo: Requires: Stdlib, Stdlib__Bytes, Stdlib__Seq, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_blit_string =  /*<<?>>*/ runtime.caml_blit_string,
    caml_bswap16 =  /*<<?>>*/ runtime.caml_bswap16,
    caml_bytes_get =  /*<<?>>*/ runtime.caml_bytes_get,
    caml_bytes_set =  /*<<?>>*/ runtime.caml_bytes_set,
    caml_bytes_set16 =  /*<<?>>*/ runtime.caml_bytes_set16,
    caml_bytes_set32 =  /*<<?>>*/ runtime.caml_bytes_set32,
    caml_bytes_set64 =  /*<<?>>*/ runtime.caml_bytes_set64,
    caml_bytes_unsafe_set =  /*<<?>>*/ runtime.caml_bytes_unsafe_set,
    caml_create_bytes =  /*<<?>>*/ runtime.caml_create_bytes,
    caml_int32_bswap =  /*<<?>>*/ runtime.caml_int32_bswap,
    caml_int64_bswap =  /*<<?>>*/ runtime.caml_int64_bswap,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length =  /*<<?>>*/ runtime.caml_ml_bytes_length,
    caml_ml_string_length =  /*<<?>>*/ runtime.caml_ml_string_length,
    caml_string_get =  /*<<?>>*/ runtime.caml_string_get,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Assert_failure = global_data.Assert_failure,
    cst_Buffer_sub = "Buffer.sub",
    cst_Buffer_blit = "Buffer.blit",
    cst_Buffer_nth = "Buffer.nth",
    cst_Buffer_add_cannot_grow_buf = "Buffer.add: cannot grow buffer",
    dummy = 0;
   function create(n){
    var
     n$0 = 1 <= n ? n : 1,
     n$1 = Stdlib_Sys[12] < n$0 ? Stdlib_Sys[12] : n$0,
     s =
        /*<<buffer.ml:43:9>>*/  /*<<buffer.ml:43:9>>*/ caml_create_bytes
         /*<<buffer.ml:43:9>>*/ (n$1);
     /*<<buffer.ml:44:1>>*/ return [0, [0, s, n$1], 0, s] /*<<buffer.ml:44:1>>*/ ;
    /*<<buffer.ml:44:71>>*/ }
   function contents(b){
     /*<<buffer.ml:46:17>>*/ return caml_call3
            (Stdlib_Bytes[8], b[1][1], 0, b[2]) /*<<buffer.ml:46:61>>*/ ;
    /*<<buffer.ml:46:61>>*/ }
   function to_bytes(b){
     /*<<buffer.ml:47:17>>*/ return caml_call3
            (Stdlib_Bytes[7], b[1][1], 0, b[2]) /*<<buffer.ml:47:54>>*/ ;
    /*<<buffer.ml:47:54>>*/ }
   function sub(b, ofs, len){
     /*<<buffer.ml:50:2>>*/ if
     (0 <= ofs && 0 <= len && (b[2] - len | 0) >= ofs)
      /*<<buffer.ml:52:7>>*/ return  /*<<buffer.ml:52:7>>*/ caml_call3
              /*<<buffer.ml:52:7>>*/ (Stdlib_Bytes[8], b[1][1], ofs, len) /*<<buffer.ml:52:46>>*/ ;
     /*<<buffer.ml:51:7>>*/ return  /*<<buffer.ml:51:7>>*/ caml_call1
             /*<<buffer.ml:51:7>>*/ (Stdlib[1], cst_Buffer_sub) /*<<buffer.ml:52:46>>*/ ;
    /*<<buffer.ml:52:46>>*/ }
   function blit(src, srcoff, dst, dstoff, len){
     /*<<buffer.ml:56:2>>*/ if
     (0 <= len
      &&
       0 <= srcoff
       &&
        (src[2] - len | 0) >= srcoff
        && 0 <= dstoff && (caml_ml_bytes_length(dst) - len | 0) >= dstoff)
      /*<<buffer.ml:60:4>>*/ return  /*<<buffer.ml:60:4>>*/ caml_call5
              /*<<buffer.ml:60:4>>*/ (Stdlib_Bytes[11],
              src[1][1],
              srcoff,
              dst,
              dstoff,
              len) /*<<buffer.ml:60:53>>*/ ;
     /*<<buffer.ml:58:7>>*/ return  /*<<buffer.ml:58:7>>*/ caml_call1
             /*<<buffer.ml:58:7>>*/ (Stdlib[1], cst_Buffer_blit) /*<<buffer.ml:60:53>>*/ ;
    /*<<buffer.ml:60:53>>*/ }
   function nth(b, ofs){
    var
     position = b[2],
     match =  /*<<buffer.ml:65:2>>*/ b[1],
     length = match[2],
     buffer = match[1];
     /*<<buffer.ml:66:2>>*/ if
     (0 <= ofs && position > ofs && length >= position)
     return runtime.caml_bytes_unsafe_get(buffer, ofs) /*<<buffer.ml:68:34>>*/ ;
     /*<<buffer.ml:67:3>>*/ return  /*<<buffer.ml:67:3>>*/ caml_call1
             /*<<buffer.ml:67:3>>*/ (Stdlib[1], cst_Buffer_nth) /*<<buffer.ml:68:34>>*/ ;
    /*<<buffer.ml:68:34>>*/ }
   function length(b){
     /*<<buffer.ml:71:15>>*/ return b[2];
    /*<<buffer.ml:71:25>>*/ }
   function clear(b){
     /*<<buffer.ml:73:14>>*/ b[2] = 0;
    return 0;
    /*<<buffer.ml:73:29>>*/ }
   function reset(b){
     /*<<buffer.ml:76:2>>*/ b[2] = 0;
    var inner =  /*<<buffer.ml:78:4>>*/ [0, b[3], caml_ml_bytes_length(b[3])];
    b[1] = inner;
    return 0;
    /*<<buffer.ml:80:18>>*/ }
   function resize(b, more){
    var
     old_pos = b[2],
     old_len = b[1][2],
     new_len =  /*<<buffer.ml:89:16>>*/ [0, old_len];
    for(;;){
     if(new_len[1] >= (old_pos + more | 0)) break;
     new_len[1] = 2 * new_len[1] | 0;
    }
    if(Stdlib_Sys[12] < new_len[1])
     if((old_pos + more | 0) <= Stdlib_Sys[12])
      new_len[1] = Stdlib_Sys[12];
     else
       /*<<buffer.ml:94:9>>*/  /*<<buffer.ml:94:9>>*/ caml_call1
        /*<<buffer.ml:94:9>>*/ (Stdlib[2], cst_Buffer_add_cannot_grow_buf);
    var
     new_buffer =
        /*<<buffer.ml:96:19>>*/  /*<<buffer.ml:96:19>>*/ caml_create_bytes
         /*<<buffer.ml:96:19>>*/ (new_len[1]);
     /*<<buffer.ml:99:2>>*/  /*<<buffer.ml:99:2>>*/ caml_call5
      /*<<buffer.ml:99:2>>*/ (Stdlib_Bytes[11],
      b[1][1],
      0,
      new_buffer,
      0,
      b[2]);
    b[1] = [0, new_buffer, new_len[1]];
    /*<<buffer.ml:100:55>>*/ }
   function add_char(b, c){
    var
     pos = b[2],
     match =  /*<<buffer.ml:114:2>>*/ b[1],
     length = match[2],
     buffer = match[1];
    if(length <= pos){
      /*<<buffer.ml:116:4>>*/  /*<<buffer.ml:116:4>>*/ resize
       /*<<buffer.ml:116:4>>*/ (b, 1);
      /*<<buffer.ml:117:4>>*/  /*<<buffer.ml:117:4>>*/ caml_bytes_set
       /*<<buffer.ml:117:4>>*/ (b[1][1], b[2], c);
    }
    else
     caml_bytes_unsafe_set(buffer, pos, c);
    b[2] = pos + 1 | 0;
    return 0;
    /*<<buffer.ml:120:23>>*/ }
   var
    uchar_utf_8_byte_length_max =  /*<<buffer.ml:112:13>>*/ 4,
    uchar_utf_16_byte_length_max = 4,
    cst_Buffer_add_substring_add_s = "Buffer.add_substring/add_subbytes",
    cst_Buffer_add_channel = "Buffer.add_channel",
    _a_ = [0, "buffer.ml", 220, 9],
    cst_Buffer_truncate = "Buffer.truncate";
   function add_utf_8_uchar(b, u){
     /*<<buffer.ml:126:2>>*/ for(;;){
     var pos = b[2];
     if(b[1][2] <= pos)
       /*<<buffer.ml:127:32>>*/  /*<<buffer.ml:127:32>>*/ resize
        /*<<buffer.ml:127:32>>*/ (b, uchar_utf_8_byte_length_max);
     var
      n =
         /*<<buffer.ml:128:10>>*/  /*<<buffer.ml:128:10>>*/ caml_call3
          /*<<buffer.ml:128:10>>*/ (Stdlib_Bytes[51], b[1][1], pos, u);
      /*<<buffer.ml:129:2>>*/ if(0 !== n){b[2] = pos + n | 0; return 0;}
      /*<<buffer.ml:130:8>>*/  /*<<buffer.ml:130:8>>*/ resize
       /*<<buffer.ml:130:8>>*/ (b, uchar_utf_8_byte_length_max);
    }
    /*<<buffer.ml:131:30>>*/ }
   function add_utf_16be_uchar(b, u){
     /*<<buffer.ml:134:2>>*/ for(;;){
     var pos = b[2];
     if(b[1][2] <= pos)
       /*<<buffer.ml:135:32>>*/  /*<<buffer.ml:135:32>>*/ resize
        /*<<buffer.ml:135:32>>*/ (b, uchar_utf_16_byte_length_max);
     var
      n =
         /*<<buffer.ml:136:10>>*/  /*<<buffer.ml:136:10>>*/ caml_call3
          /*<<buffer.ml:136:10>>*/ (Stdlib_Bytes[54], b[1][1], pos, u);
      /*<<buffer.ml:137:2>>*/ if(0 !== n){b[2] = pos + n | 0; return 0;}
      /*<<buffer.ml:138:8>>*/  /*<<buffer.ml:138:8>>*/ resize
       /*<<buffer.ml:138:8>>*/ (b, uchar_utf_16_byte_length_max);
    }
    /*<<buffer.ml:139:30>>*/ }
   function add_utf_16le_uchar(b, u){
     /*<<buffer.ml:142:2>>*/ for(;;){
     var pos = b[2];
     if(b[1][2] <= pos)
       /*<<buffer.ml:143:32>>*/  /*<<buffer.ml:143:32>>*/ resize
        /*<<buffer.ml:143:32>>*/ (b, uchar_utf_16_byte_length_max);
     var
      n =
         /*<<buffer.ml:144:10>>*/  /*<<buffer.ml:144:10>>*/ caml_call3
          /*<<buffer.ml:144:10>>*/ (Stdlib_Bytes[57], b[1][1], pos, u);
      /*<<buffer.ml:145:2>>*/ if(0 !== n){b[2] = pos + n | 0; return 0;}
      /*<<buffer.ml:146:8>>*/  /*<<buffer.ml:146:8>>*/ resize
       /*<<buffer.ml:146:8>>*/ (b, uchar_utf_16_byte_length_max);
    }
    /*<<buffer.ml:147:30>>*/ }
   function add_substring(b, s, offset, len){
    var _s_ = offset < 0 ? 1 : 0;
    if(_s_)
     var _t_ = _s_;
    else
     var
      _u_ = len < 0 ? 1 : 0,
      _t_ = _u_ || ((caml_ml_string_length(s) - len | 0) < offset ? 1 : 0);
    if(_t_)
      /*<<buffer.ml:151:7>>*/  /*<<buffer.ml:151:7>>*/ caml_call1
       /*<<buffer.ml:151:7>>*/ (Stdlib[1], cst_Buffer_add_substring_add_s);
    var
     position = b[2],
     match =  /*<<buffer.ml:153:2>>*/ b[1],
     length = match[2],
     buffer = match[1],
     new_position = position + len | 0;
    if(length < new_position){
      /*<<buffer.ml:156:4>>*/  /*<<buffer.ml:156:4>>*/ resize
       /*<<buffer.ml:156:4>>*/ (b, len);
      /*<<buffer.ml:157:4>>*/  /*<<buffer.ml:157:4>>*/ caml_call5
       /*<<buffer.ml:157:4>>*/ (Stdlib_Bytes[12],
       s,
       offset,
       b[1][1],
       b[2],
       len);
    }
    else
      /*<<buffer.ml:159:4>>*/  /*<<buffer.ml:159:4>>*/ caml_blit_string
       /*<<buffer.ml:159:4>>*/ (s, offset, buffer, position, len);
    b[2] = new_position;
    return 0;
    /*<<buffer.ml:160:28>>*/ }
   function add_subbytes(b, s, offset, len){
     /*<<buffer.ml:163:2>>*/ return  /*<<buffer.ml:163:2>>*/ add_substring
             /*<<buffer.ml:163:2>>*/ (b,
              /*<<buffer.ml:163:18>>*/ caml_call1
               /*<<buffer.ml:163:18>>*/ (Stdlib_Bytes[44], s),
             offset,
             len) /*<<buffer.ml:163:55>>*/ ;
    /*<<buffer.ml:163:55>>*/ }
   function add_string(b, s){
    var
     len = caml_ml_string_length(s),
     position =  /*<<buffer.ml:167:2>>*/ b[2],
     match =  /*<<buffer.ml:168:2>>*/ b[1],
     length = match[2],
     buffer = match[1],
     new_position = position + len | 0;
    if(length < new_position){
      /*<<buffer.ml:171:4>>*/  /*<<buffer.ml:171:4>>*/ resize
       /*<<buffer.ml:171:4>>*/ (b, len);
      /*<<buffer.ml:172:4>>*/  /*<<buffer.ml:172:4>>*/ caml_call5
       /*<<buffer.ml:172:4>>*/ (Stdlib_Bytes[12], s, 0, b[1][1], b[2], len);
    }
    else
      /*<<buffer.ml:174:4>>*/  /*<<buffer.ml:174:4>>*/ caml_blit_string
       /*<<buffer.ml:174:4>>*/ (s, 0, buffer, position, len);
    b[2] = new_position;
    return 0;
    /*<<buffer.ml:175:28>>*/ }
   function add_bytes(b, s){
     /*<<buffer.ml:177:20>>*/ return  /*<<buffer.ml:177:33>>*/ add_string
             /*<<buffer.ml:177:33>>*/ (b,
              /*<<buffer.ml:177:33>>*/ caml_call1
               /*<<buffer.ml:177:33>>*/ (Stdlib_Bytes[44], s)) /*<<buffer.ml:177:59>>*/ ;
    /*<<buffer.ml:177:59>>*/ }
   function add_buffer(b, bs){
     /*<<buffer.ml:180:2>>*/ return  /*<<buffer.ml:177:14>>*/ add_subbytes
             /*<<buffer.ml:177:14>>*/ (b, bs[1][1], 0, bs[2]) /*<<buffer.ml:180:46>>*/ ;
    /*<<buffer.ml:180:46>>*/ }
   function add_channel(b, ic, to_read$1){
    var
     _q_ = to_read$1 < 0 ? 1 : 0,
     _r_ = _q_ || (Stdlib_Sys[12] < to_read$1 ? 1 : 0);
    if(_r_)
      /*<<buffer.ml:207:4>>*/  /*<<buffer.ml:207:4>>*/ caml_call1
       /*<<buffer.ml:207:4>>*/ (Stdlib[1], cst_Buffer_add_channel);
    if(b[1][2] < (b[2] + to_read$1 | 0))
      /*<<buffer.ml:200:44>>*/  /*<<buffer.ml:200:44>>*/ resize
       /*<<buffer.ml:200:44>>*/ (b, to_read$1);
    var
     ofs$1 = b[2],
     buf = b[1][1],
     already_read = 0,
     ofs = ofs$1,
     to_read = to_read$1;
     /*<<buffer.ml:185:4>>*/ for(;;){
     if(0 !== to_read){
      var
       r =
          /*<<buffer.ml:187:14>>*/  /*<<buffer.ml:187:14>>*/ caml_call4
           /*<<buffer.ml:187:14>>*/ (Stdlib[84], ic, buf, ofs, to_read);
       /*<<buffer.ml:188:6>>*/ if(0 !== r){
       var
        already_read$0 = already_read + r | 0,
        ofs$0 = ofs + r | 0,
        to_read$0 = to_read - r | 0;
       already_read = already_read$0;
       ofs = ofs$0;
       to_read = to_read$0;
       continue;
      }
     }
     b[2] = b[2] + already_read | 0;
     if(already_read < to_read$1)
       /*<<buffer.ml:211:18>>*/ throw  /*<<buffer.ml:211:18>>*/ caml_maybe_attach_backtrace
              /*<<buffer.ml:211:18>>*/ (Stdlib[12], 1);
      /*<<buffer.ml:212:2>>*/ return 0 /*<<buffer.ml:212:2>>*/ ;
    }
    /*<<buffer.ml:212:4>>*/ }
   function output_buffer(oc, b){
     /*<<buffer.ml:215:2>>*/ return caml_call4
            (Stdlib[68], oc, b[1][1], 0, b[2]) /*<<buffer.ml:215:39>>*/ ;
    /*<<buffer.ml:215:39>>*/ }
   function add_substitute(b, f, s){
    var lim$1 = caml_ml_string_length(s), previous = 32, i$4 = 0;
     /*<<buffer.ml:263:4>>*/ for(;;){
     if(i$4 >= lim$1){
      var _o_ = 92 === previous ? 1 : 0;
      return _o_
              ?  /*<<buffer.ml:283:28>>*/ add_char
                 /*<<buffer.ml:283:28>>*/ (b, previous)
              : _o_ /*<<buffer.ml:284:13>>*/ ;
     }
     var
      previous$0 =
         /*<<buffer.ml:264:12>>*/  /*<<buffer.ml:264:12>>*/ caml_string_get
          /*<<buffer.ml:264:12>>*/ (s, i$4);
     if(36 === previous$0)
      if(92 === previous){
        /*<<buffer.ml:266:9>>*/  /*<<buffer.ml:266:9>>*/ add_char
         /*<<buffer.ml:266:9>>*/ (b, previous$0);
       var i$5 =  /*<<buffer.ml:266:9>>*/ i$4 + 1 | 0;
       previous = 32;
       i$4 = i$5;
      }
      else{
       var start =  /*<<buffer.ml:269:9>>*/ i$4 + 1 | 0;
        /*<<buffer.ml:270:9>>*/ try{
        if(lim$1 <= start)
          /*<<buffer.ml:245:23>>*/ throw  /*<<buffer.ml:245:23>>*/ caml_maybe_attach_backtrace
                 /*<<buffer.ml:245:23>>*/ (Stdlib[8], 1);
        var
         opening =
            /*<<buffer.ml:246:8>>*/  /*<<buffer.ml:246:8>>*/ caml_string_get
             /*<<buffer.ml:246:8>>*/ (s, start);
        a:
        {
         if(40 !== opening && 123 !== opening){
          var lim$0 = caml_ml_string_length(s);
          b:
          {
           c:
           {
            d:
            {
             var i$2 = start;
              /*<<buffer.ml:237:4>>*/ for(;;){
              if(lim$0 <= i$2) break c;
              var
               match =
                  /*<<buffer.ml:238:10>>*/  /*<<buffer.ml:238:10>>*/ caml_string_get
                   /*<<buffer.ml:238:10>>*/ (s, i$2);
              if(91 <= match){
               if(97 <= match){
                if(123 <= match) break d;
               }
               else if(95 !== match) break d;
              }
              else
               if(58 <= match){
                if(65 > match) break;
               }
               else if(48 > match) break d;
              var i$3 = i$2 + 1 | 0;
              i$2 = i$3;
             }
            }
            var stop$0 = i$2;
            break b;
           }
           var stop$0 = lim$0;
          }
          if(stop$0 === start)
            /*<<buffer.ml:255:26>>*/ throw  /*<<buffer.ml:255:26>>*/ caml_maybe_attach_backtrace
                   /*<<buffer.ml:255:26>>*/ (Stdlib[8], 1);
          var
           val =
             [0,
               /*<<buffer.ml:256:5>>*/ caml_call3
                /*<<buffer.ml:256:5>>*/ (Stdlib_String[16],
                s,
                start,
                stop$0 - start | 0),
              stop$0];
          break a;
         }
         var new_start =  /*<<buffer.ml:249:5>>*/ start + 1 | 0, k$2 = 0;
         if(40 === opening)
          var closing = 41;
         else{
          if(123 !== opening)
            /*<<buffer.ml:220:9>>*/ throw  /*<<buffer.ml:220:9>>*/ caml_maybe_attach_backtrace
                   /*<<buffer.ml:220:9>>*/ ([0, Assert_failure, _a_], 1);
          var closing = 125;
         }
         var lim = caml_ml_string_length(s), k = k$2, stop = new_start;
          /*<<buffer.ml:228:4>>*/ for(;;){
          if(lim <= stop)
            /*<<buffer.ml:228:21>>*/ throw  /*<<buffer.ml:228:21>>*/ caml_maybe_attach_backtrace
                   /*<<buffer.ml:228:21>>*/ (Stdlib[8], 1);
          if
           ( /*<<buffer.ml:229:7>>*/ caml_string_get
              /*<<buffer.ml:229:7>>*/ (s, stop)
            === opening){
           var i = stop + 1 | 0, k$0 = k + 1 | 0;
           k = k$0;
           stop = i;
          }
          else if
           ( /*<<buffer.ml:230:7>>*/ caml_string_get
              /*<<buffer.ml:230:7>>*/ (s, stop)
            === closing){
           if(0 === k) break;
           var i$0 = stop + 1 | 0, k$1 = k - 1 | 0;
           k = k$1;
           stop = i$0;
          }
          else{var i$1 = stop + 1 | 0; stop = i$1;}
         }
         var
          val =
            [0,
              /*<<buffer.ml:251:5>>*/ caml_call3
               /*<<buffer.ml:251:5>>*/ (Stdlib_String[16],
               s,
               new_start,
               (stop - start | 0) - 1 | 0),
             stop + 1 | 0];
        }
       }
       catch(_p_){
        var _n_ = caml_wrap_exception(_p_);
        if(_n_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_n_, 0);
         /*<<buffer.ml:275:11>>*/  /*<<buffer.ml:275:11>>*/ add_char
          /*<<buffer.ml:275:11>>*/ (b, 36);
        previous = 32;
        i$4 = start;
        continue;
       }
       var next_i = val[2], ident = val[1];
        /*<<buffer.ml:272:11>>*/  /*<<buffer.ml:272:11>>*/ add_string
         /*<<buffer.ml:272:11>>*/ (b,
          /*<<buffer.ml:272:24>>*/ caml_call1
           /*<<buffer.ml:272:24>>*/ (f, ident));
       previous = 32;
       i$4 = next_i;
      }
     else{
      if(92 === previous)
        /*<<buffer.ml:279:33>>*/  /*<<buffer.ml:279:33>>*/ add_char
         /*<<buffer.ml:279:33>>*/ (b, previous);
      if(92 !== previous$0)
        /*<<buffer.ml:280:33>>*/  /*<<buffer.ml:280:33>>*/ add_char
         /*<<buffer.ml:280:33>>*/ (b, previous$0);
      var i$6 =  /*<<buffer.ml:280:33>>*/ i$4 + 1 | 0;
      previous = previous$0;
      i$4 = i$6;
     }
    }
    /*<<buffer.ml:284:13>>*/ }
   function truncate(b, len){
     /*<<buffer.ml:287:4>>*/ if(0 <= len && b[2] >= len){b[2] = len; return 0;}
     /*<<buffer.ml:288:6>>*/ return  /*<<buffer.ml:288:6>>*/ caml_call1
             /*<<buffer.ml:288:6>>*/ (Stdlib[1], cst_Buffer_truncate) /*<<buffer.ml:290:23>>*/ ;
    /*<<buffer.ml:290:23>>*/ }
   function to_seq(b){
    function aux(i, param){
      /*<<buffer.ml:297:4>>*/ if(b[2] <= i)
       /*<<buffer.ml:297:28>>*/ return 0 /*<<buffer.ml:297:28>>*/ ;
     var
      x =
         /*<<buffer.ml:299:14>>*/  /*<<buffer.ml:299:14>>*/ caml_bytes_get
          /*<<buffer.ml:299:14>>*/ (b[1][1], i),
      _l_ =  /*<<buffer.ml:299:14>>*/ i + 1 | 0;
      /*<<buffer.ml:300:6>>*/ return [0,
             x,
             function(_m_){ /*<<?>>*/ return aux(_l_, _m_);}] /*<<buffer.ml:300:6>>*/ ;
     /*<<buffer.ml:300:29>>*/ }
    var _j_ =  /*<<buffer.ml:302:2>>*/ 0;
     /*<<buffer.ml:302:2>>*/ return function(_k_){
      /*<<?>>*/ return aux(_j_, _k_);} /*<<buffer.ml:302:2>>*/ ;
    /*<<buffer.ml:302:7>>*/ }
   function to_seqi(b){
    function aux(i, param){
      /*<<buffer.ml:307:4>>*/ if(b[2] <= i)
       /*<<buffer.ml:307:28>>*/ return 0 /*<<buffer.ml:307:28>>*/ ;
     var
      x =
         /*<<buffer.ml:309:14>>*/  /*<<buffer.ml:309:14>>*/ caml_bytes_get
          /*<<buffer.ml:309:14>>*/ (b[1][1], i),
      _h_ =  /*<<buffer.ml:309:14>>*/ i + 1 | 0;
      /*<<buffer.ml:310:6>>*/ return [0,
             [0, i, x],
             function(_i_){ /*<<?>>*/ return aux(_h_, _i_);}] /*<<buffer.ml:310:6>>*/ ;
     /*<<buffer.ml:310:33>>*/ }
    var _f_ =  /*<<buffer.ml:312:2>>*/ 0;
     /*<<buffer.ml:312:2>>*/ return function(_g_){
      /*<<?>>*/ return aux(_f_, _g_);} /*<<buffer.ml:312:2>>*/ ;
    /*<<buffer.ml:312:7>>*/ }
   function add_seq(b, seq){
     /*<<buffer.ml:314:20>>*/ return  /*<<buffer.ml:314:20>>*/ caml_call2
             /*<<buffer.ml:314:20>>*/ (Stdlib_Seq[4],
             function(_e_){ /*<<?>>*/ return add_char(b, _e_);},
             seq) /*<<buffer.ml:314:45>>*/ ;
    /*<<buffer.ml:314:45>>*/ }
   function of_seq(i){
    var
     b =
        /*<<buffer.ml:317:10>>*/  /*<<buffer.ml:317:10>>*/ create
         /*<<buffer.ml:317:10>>*/ (32);
     /*<<buffer.ml:318:2>>*/  /*<<buffer.ml:318:2>>*/ add_seq
      /*<<buffer.ml:318:2>>*/ (b, i);
     /*<<buffer.ml:318:2>>*/ return b /*<<buffer.ml:318:2>>*/ ;
    /*<<buffer.ml:319:3>>*/ }
   function add_int8(b, x){
    var
     position = b[2],
     match =  /*<<buffer.ml:339:2>>*/ b[1],
     length = match[2],
     buffer = match[1],
     new_position =  /*<<buffer.ml:340:2>>*/ position + 1 | 0;
    if(length < new_position){
      /*<<buffer.ml:342:4>>*/  /*<<buffer.ml:342:4>>*/ resize
       /*<<buffer.ml:342:4>>*/ (b, 1);
      /*<<buffer.ml:343:4>>*/  /*<<buffer.ml:343:4>>*/ caml_bytes_set
       /*<<buffer.ml:343:4>>*/ (b[1][1], b[2], x);
    }
    else
     caml_bytes_unsafe_set(buffer, position, x);
    b[2] = new_position;
    return 0;
    /*<<buffer.ml:346:28>>*/ }
   function add_int16_ne(b, x){
    var
     position = b[2],
     match =  /*<<buffer.ml:350:2>>*/ b[1],
     length = match[2],
     buffer = match[1],
     new_position =  /*<<buffer.ml:351:2>>*/ position + 2 | 0;
    if(length < new_position){
      /*<<buffer.ml:353:4>>*/  /*<<buffer.ml:353:4>>*/ resize
       /*<<buffer.ml:353:4>>*/ (b, 2);
      /*<<buffer.ml:354:4>>*/  /*<<buffer.ml:354:4>>*/ caml_bytes_set16
       /*<<buffer.ml:354:4>>*/ (b[1][1], b[2], x);
    }
    else
      /*<<buffer.ml:356:4>>*/  /*<<buffer.ml:356:4>>*/ caml_bytes_set16
       /*<<buffer.ml:356:4>>*/ (buffer, position, x);
    b[2] = new_position;
    return 0;
    /*<<buffer.ml:357:28>>*/ }
   function add_int32_ne(b, x){
    var
     position = b[2],
     match =  /*<<buffer.ml:361:2>>*/ b[1],
     length = match[2],
     buffer = match[1],
     new_position =  /*<<buffer.ml:362:2>>*/ position + 4 | 0;
    if(length < new_position){
      /*<<buffer.ml:364:4>>*/  /*<<buffer.ml:364:4>>*/ resize
       /*<<buffer.ml:364:4>>*/ (b, 4);
      /*<<buffer.ml:365:4>>*/  /*<<buffer.ml:365:4>>*/ caml_bytes_set32
       /*<<buffer.ml:365:4>>*/ (b[1][1], b[2], x);
    }
    else
      /*<<buffer.ml:367:4>>*/  /*<<buffer.ml:367:4>>*/ caml_bytes_set32
       /*<<buffer.ml:367:4>>*/ (buffer, position, x);
    b[2] = new_position;
    return 0;
    /*<<buffer.ml:368:28>>*/ }
   function add_int64_ne(b, x){
    var
     position = b[2],
     match =  /*<<buffer.ml:372:2>>*/ b[1],
     length = match[2],
     buffer = match[1],
     new_position =  /*<<buffer.ml:373:2>>*/ position + 8 | 0;
    if(length < new_position){
      /*<<buffer.ml:375:4>>*/  /*<<buffer.ml:375:4>>*/ resize
       /*<<buffer.ml:375:4>>*/ (b, 8);
      /*<<buffer.ml:376:4>>*/  /*<<buffer.ml:376:4>>*/ caml_bytes_set64
       /*<<buffer.ml:376:4>>*/ (b[1][1], b[2], x);
    }
    else
      /*<<buffer.ml:378:4>>*/  /*<<buffer.ml:378:4>>*/ caml_bytes_set64
       /*<<buffer.ml:378:4>>*/ (buffer, position, x);
    b[2] = new_position;
    return 0;
    /*<<buffer.ml:379:28>>*/ }
   function add_int16_le(b, x){
    var _d_ = Stdlib_Sys[11] ? caml_bswap16(x) : x;
     /*<<buffer.ml:370:17>>*/ return  /*<<buffer.ml:370:17>>*/ add_int16_ne
             /*<<buffer.ml:370:17>>*/ (b, _d_) /*<<buffer.ml:382:57>>*/ ;
    /*<<buffer.ml:382:57>>*/ }
   function add_int16_be(b, x){
    var x$0 = Stdlib_Sys[11] ? x : caml_bswap16(x);
     /*<<buffer.ml:385:41>>*/ return  /*<<buffer.ml:385:41>>*/ add_int16_ne
             /*<<buffer.ml:385:41>>*/ (b, x$0) /*<<buffer.ml:385:57>>*/ ;
    /*<<buffer.ml:385:57>>*/ }
   function add_int32_le(b, x){
    var
     _c_ =
       Stdlib_Sys[11]
        ?  /*<<buffer.ml:388:41>>*/ caml_int32_bswap
           /*<<buffer.ml:388:41>>*/ (x)
        : x;
     /*<<buffer.ml:388:41>>*/ return  /*<<buffer.ml:388:41>>*/ add_int32_ne
             /*<<buffer.ml:388:41>>*/ (b, _c_) /*<<buffer.ml:388:57>>*/ ;
    /*<<buffer.ml:388:57>>*/ }
   function add_int32_be(b, x){
    var
     x$0 =
       Stdlib_Sys[11]
        ? x
        :  /*<<buffer.ml:391:48>>*/ caml_int32_bswap
           /*<<buffer.ml:391:48>>*/ (x);
     /*<<buffer.ml:391:48>>*/ return  /*<<buffer.ml:391:48>>*/ add_int32_ne
             /*<<buffer.ml:391:48>>*/ (b, x$0) /*<<buffer.ml:391:57>>*/ ;
    /*<<buffer.ml:391:57>>*/ }
   function add_int64_le(b, x){
    var
     _b_ =
       Stdlib_Sys[11]
        ?  /*<<buffer.ml:394:41>>*/ caml_int64_bswap
           /*<<buffer.ml:394:41>>*/ (x)
        : x;
     /*<<buffer.ml:394:41>>*/ return  /*<<buffer.ml:394:41>>*/ add_int64_ne
             /*<<buffer.ml:394:41>>*/ (b, _b_) /*<<buffer.ml:394:57>>*/ ;
    /*<<buffer.ml:394:57>>*/ }
   function add_int64_be(b, x){
    var
     x$0 =
       Stdlib_Sys[11]
        ? x
        :  /*<<buffer.ml:397:48>>*/ caml_int64_bswap
           /*<<buffer.ml:397:48>>*/ (x);
     /*<<buffer.ml:397:48>>*/ return  /*<<buffer.ml:397:48>>*/ add_int64_ne
             /*<<buffer.ml:397:48>>*/ (b, x$0) /*<<buffer.ml:397:57>>*/ ;
    /*<<buffer.ml:397:57>>*/ }
   var
    Stdlib_Buffer =
      [0,
       create,
       contents,
       to_bytes,
       sub,
       blit,
       nth,
       length,
       clear,
       reset,
       output_buffer,
       truncate,
       add_char,
       add_utf_8_uchar,
       add_utf_16le_uchar,
       add_utf_16be_uchar,
       add_string,
       add_bytes,
       add_substring,
       add_subbytes,
       add_substitute,
       add_buffer,
       add_channel,
       to_seq,
       to_seqi,
       add_seq,
       of_seq,
       add_int8,
       add_int8,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int32_ne,
       add_int32_be,
       add_int32_le,
       add_int64_ne,
       add_int64_be,
       add_int64_le];
   runtime.caml_register_global(14, Stdlib_Buffer, "Stdlib__Buffer");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Mutex
(function(globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_ml_mutex_lock =  /*<<?>>*/ runtime.caml_ml_mutex_lock,
    caml_ml_mutex_unlock =  /*<<?>>*/ runtime.caml_ml_mutex_unlock,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function protect(m, f){
     /*<<mutex.ml:27:2>>*/  /*<<mutex.ml:27:2>>*/ caml_ml_mutex_lock
      /*<<mutex.ml:27:2>>*/ (m);
     /*<<mutex.ml:27:2>>*/ try{
     var
      x =
         /*<<mutex.ml:28:8>>*/  /*<<mutex.ml:28:8>>*/ caml_call1
          /*<<mutex.ml:28:8>>*/ (f, 0);
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
      /*<<mutex.ml:33:4>>*/  /*<<mutex.ml:33:4>>*/ caml_ml_mutex_unlock
       /*<<mutex.ml:33:4>>*/ (m);
      /*<<mutex.ml:34:4>>*/ throw  /*<<mutex.ml:34:4>>*/ caml_maybe_attach_backtrace
             /*<<mutex.ml:34:4>>*/ (e, 0);
    }
     /*<<mutex.ml:30:4>>*/  /*<<mutex.ml:30:4>>*/ caml_ml_mutex_unlock
      /*<<mutex.ml:30:4>>*/ (m);
     /*<<mutex.ml:30:4>>*/ return x /*<<mutex.ml:30:4>>*/ ;
    /*<<mutex.ml:34:13>>*/ }
   var
    Stdlib_Mutex =
      [0,
       runtime.caml_ml_mutex_new,
       caml_ml_mutex_lock,
       runtime.caml_ml_mutex_try_lock,
       caml_ml_mutex_unlock,
       protect];
   runtime.caml_register_global(0, Stdlib_Mutex, "Stdlib__Mutex");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Condition
(function(globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    Stdlib_Condition =
      [0,
       runtime.caml_ml_condition_new,
       runtime.caml_ml_condition_wait,
       runtime.caml_ml_condition_signal,
       runtime.caml_ml_condition_broadcast];
   runtime.caml_register_global(0, Stdlib_Condition, "Stdlib__Condition");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Semaphore
//# unitInfo: Requires: Stdlib, Stdlib__Condition, Stdlib__Mutex
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Mutex = global_data.Stdlib__Mutex,
    Stdlib_Condition = global_data.Stdlib__Condition,
    Stdlib = global_data.Stdlib,
    cst_Semaphore_Counting_init_wr =
      "Semaphore.Counting.init: wrong initial value",
    cst_Semaphore_Counting_release = "Semaphore.Counting.release: overflow";
   function make(v){
     /*<<semaphore.ml:29:2>>*/ if(v < 0)
      /*<<semaphore.ml:29:16>>*/  /*<<semaphore.ml:29:16>>*/ caml_call1
       /*<<semaphore.ml:29:16>>*/ (Stdlib[1], cst_Semaphore_Counting_init_wr);
    var
     _c_ =
        /*<<semaphore.ml:30:39>>*/  /*<<semaphore.ml:30:39>>*/ caml_call1
         /*<<semaphore.ml:30:39>>*/ (Stdlib_Condition[1], 0);
     /*<<semaphore.ml:30:2>>*/ return [0,
             /*<<semaphore.ml:30:10>>*/ caml_call1
              /*<<semaphore.ml:30:10>>*/ (Stdlib_Mutex[1], 0),
            v,
            _c_] /*<<semaphore.ml:30:2>>*/ ;
    /*<<semaphore.ml:30:59>>*/ }
   function release(s){
     /*<<semaphore.ml:33:2>>*/  /*<<semaphore.ml:33:2>>*/ caml_call1
      /*<<semaphore.ml:33:2>>*/ (Stdlib_Mutex[2], s[1]);
    if(s[2] < Stdlib[19]){
     s[2] = s[2] + 1 | 0;
      /*<<semaphore.ml:36:4>>*/  /*<<semaphore.ml:36:4>>*/ caml_call1
       /*<<semaphore.ml:36:4>>*/ (Stdlib_Condition[3], s[3]);
     return caml_call1(Stdlib_Mutex[4], s[1]) /*<<semaphore.ml:41:5>>*/ ;
    }
     /*<<semaphore.ml:39:4>>*/  /*<<semaphore.ml:39:4>>*/ caml_call1
      /*<<semaphore.ml:39:4>>*/ (Stdlib_Mutex[4], s[1]);
     /*<<semaphore.ml:40:4>>*/ throw  /*<<semaphore.ml:40:4>>*/ caml_maybe_attach_backtrace
            /*<<semaphore.ml:40:4>>*/ ([0,
             Stdlib[11],
             cst_Semaphore_Counting_release],
            1);
    /*<<semaphore.ml:41:5>>*/ }
   function acquire(s){
     /*<<semaphore.ml:44:2>>*/  /*<<semaphore.ml:44:2>>*/ caml_call1
      /*<<semaphore.ml:44:2>>*/ (Stdlib_Mutex[2], s[1]);
     /*<<semaphore.ml:45:19>>*/ for(;;){
     if(0 !== s[2]){
      s[2] = s[2] - 1 | 0;
      return caml_call1(Stdlib_Mutex[4], s[1]) /*<<semaphore.ml:47:20>>*/ ;
     }
      /*<<semaphore.ml:45:19>>*/  /*<<semaphore.ml:45:19>>*/ caml_call2
       /*<<semaphore.ml:45:19>>*/ (Stdlib_Condition[2], s[3], s[1]);
    }
    /*<<semaphore.ml:47:20>>*/ }
   function try_acquire(s){
     /*<<semaphore.ml:50:2>>*/  /*<<semaphore.ml:50:2>>*/ caml_call1
      /*<<semaphore.ml:50:2>>*/ (Stdlib_Mutex[2], s[1]);
    var ret = 0 === s[2] ? 0 : (s[2] = s[2] - 1 | 0, 1);
     /*<<semaphore.ml:52:2>>*/  /*<<semaphore.ml:52:2>>*/ caml_call1
      /*<<semaphore.ml:52:2>>*/ (Stdlib_Mutex[4], s[1]);
     /*<<semaphore.ml:52:2>>*/ return ret /*<<semaphore.ml:52:2>>*/ ;
    /*<<semaphore.ml:53:5>>*/ }
   function get_value(s){
     /*<<semaphore.ml:55:18>>*/ return s[2];
    /*<<semaphore.ml:55:21>>*/ }
   var
    Counting =
       /*<<semaphore.ml:24:18>>*/ [0,
       make,
       release,
       acquire,
       try_acquire,
       get_value];
   function make$0(b){
    var
     _a_ =
        /*<<semaphore.ml:66:14>>*/  /*<<semaphore.ml:66:14>>*/ caml_call1
         /*<<semaphore.ml:66:14>>*/ (Stdlib_Condition[1], 0),
     _b_ = b ? 1 : 0;
     /*<<semaphore.ml:64:2>>*/ return [0,
             /*<<semaphore.ml:64:10>>*/ caml_call1
              /*<<semaphore.ml:64:10>>*/ (Stdlib_Mutex[1], 0),
            _b_,
            _a_] /*<<semaphore.ml:64:2>>*/ ;
    /*<<semaphore.ml:66:34>>*/ }
   function release$0(s){
     /*<<semaphore.ml:69:2>>*/  /*<<semaphore.ml:69:2>>*/ caml_call1
      /*<<semaphore.ml:69:2>>*/ (Stdlib_Mutex[2], s[1]);
    s[2] = 1;
     /*<<semaphore.ml:71:2>>*/  /*<<semaphore.ml:71:2>>*/ caml_call1
      /*<<semaphore.ml:71:2>>*/ (Stdlib_Condition[3], s[3]);
    return caml_call1(Stdlib_Mutex[4], s[1]) /*<<semaphore.ml:72:20>>*/ ;
    /*<<semaphore.ml:72:20>>*/ }
   function acquire$0(s){
     /*<<semaphore.ml:75:2>>*/  /*<<semaphore.ml:75:2>>*/ caml_call1
      /*<<semaphore.ml:75:2>>*/ (Stdlib_Mutex[2], s[1]);
     /*<<semaphore.ml:76:19>>*/ for(;;){
     if(0 !== s[2]){
      s[2] = 0;
      return caml_call1(Stdlib_Mutex[4], s[1]) /*<<semaphore.ml:78:20>>*/ ;
     }
      /*<<semaphore.ml:76:19>>*/  /*<<semaphore.ml:76:19>>*/ caml_call2
       /*<<semaphore.ml:76:19>>*/ (Stdlib_Condition[2], s[3], s[1]);
    }
    /*<<semaphore.ml:78:20>>*/ }
   function try_acquire$0(s){
     /*<<semaphore.ml:81:2>>*/  /*<<semaphore.ml:81:2>>*/ caml_call1
      /*<<semaphore.ml:81:2>>*/ (Stdlib_Mutex[2], s[1]);
    var ret = 0 === s[2] ? 0 : (s[2] = 0, 1);
     /*<<semaphore.ml:83:2>>*/  /*<<semaphore.ml:83:2>>*/ caml_call1
      /*<<semaphore.ml:83:2>>*/ (Stdlib_Mutex[4], s[1]);
     /*<<semaphore.ml:83:2>>*/ return ret /*<<semaphore.ml:83:2>>*/ ;
    /*<<semaphore.ml:84:5>>*/ }
   var
    Binary =
       /*<<semaphore.ml:59:16>>*/ [0,
       make$0,
       release$0,
       acquire$0,
       try_acquire$0],
    Stdlib_Semaphore = [0, Counting, Binary];
   runtime.caml_register_global(5, Stdlib_Semaphore, "Stdlib__Semaphore");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Domain
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__Atomic, Stdlib__Condition, Stdlib__List, Stdlib__Mutex
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_check_bound =  /*<<?>>*/ runtime.caml_check_bound,
    caml_domain_dls_get =  /*<<?>>*/ runtime.caml_domain_dls_get,
    caml_make_vect =  /*<<?>>*/ runtime.caml_make_vect,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_ml_domain_id =  /*<<?>>*/ runtime.caml_ml_domain_id,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Condition = global_data.Stdlib__Condition,
    Stdlib_Mutex = global_data.Stdlib__Mutex,
    Stdlib_Atomic = global_data.Stdlib__Atomic,
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure;
   function cpu_relax(param){
     /*<<domain.ml:47:19>>*/ return  /*<<domain.ml:47:19>>*/ runtime.caml_ml_domain_cpu_relax
             /*<<domain.ml:47:19>>*/ (0) /*<<domain.ml:47:35>>*/ ;
    /*<<domain.ml:47:35>>*/ }
   var none =  /*<<domain.ml:72:24>>*/ [0, 0];
   function create_dls(param){
    var
     st =
        /*<<domain.ml:89:13>>*/  /*<<domain.ml:89:13>>*/ caml_make_vect
         /*<<domain.ml:89:13>>*/ (8, none);
     /*<<domain.ml:90:4>>*/  /*<<domain.ml:90:4>>*/ runtime.caml_domain_dls_set
      /*<<domain.ml:90:4>>*/ (st);
    /*<<domain.ml:90:20>>*/ }
    /*<<domain.ml:92:10>>*/  /*<<domain.ml:92:10>>*/ create_dls
     /*<<domain.ml:92:10>>*/ (0);
   var
    key_counter =
       /*<<domain.ml:96:20>>*/  /*<<domain.ml:96:20>>*/ caml_call1
        /*<<domain.ml:96:20>>*/ (Stdlib_Atomic[1], 0),
    parent_keys =
       /*<<domain.ml:101:20>>*/  /*<<domain.ml:101:20>>*/ caml_call1
        /*<<domain.ml:101:20>>*/ (Stdlib_Atomic[1], 0),
    _a_ = [0, "domain.ml", 184, 13];
   function new_key(split_from_parent, init_orphan){
    var
     idx =
        /*<<domain.ml:109:14>>*/  /*<<domain.ml:109:14>>*/ caml_call2
         /*<<domain.ml:109:14>>*/ (Stdlib_Atomic[7], key_counter, 1),
     k =  /*<<domain.ml:110:12>>*/ [0, idx, init_orphan];
     /*<<domain.ml:111:4>>*/ if(split_from_parent){
     var
      split = split_from_parent[1],
      ki =  /*<<domain.ml:113:35>>*/ [0, k, split];
      /*<<domain.ml:104:4>>*/ for(;;){
      var
       l =
          /*<<domain.ml:104:12>>*/  /*<<domain.ml:104:12>>*/ caml_call1
           /*<<domain.ml:104:12>>*/ (Stdlib_Atomic[3], parent_keys);
      if
       (!
        (1
        -
          /*<<domain.ml:105:11>>*/ caml_call3
           /*<<domain.ml:105:11>>*/ (Stdlib_Atomic[6],
           parent_keys,
           l,
           [0, ki, l])))
       break;
     }
    }
     /*<<domain.ml:115:4>>*/ return k /*<<domain.ml:115:4>>*/ ;
    /*<<domain.ml:115:5>>*/ }
   function maybe_grow(idx){
     /*<<domain.ml:120:4>>*/ for(;;){
     var
      st = caml_domain_dls_get(0),
      sz =  /*<<domain.ml:121:4>>*/ st.length - 1;
     if(idx < sz)
       /*<<domain.ml:122:21>>*/ return st /*<<domain.ml:122:21>>*/ ;
     var new_sz = sz;
      /*<<domain.ml:125:8>>*/ for(;;){
      if(idx < new_sz) break;
      var s = 2 * new_sz | 0;
      new_sz = s;
     }
     var
      new_st =
         /*<<domain.ml:128:19>>*/  /*<<domain.ml:128:19>>*/ caml_make_vect
          /*<<domain.ml:128:19>>*/ (new_sz, none);
      /*<<domain.ml:129:6>>*/  /*<<domain.ml:129:6>>*/ caml_call5
       /*<<domain.ml:129:6>>*/ (Stdlib_Array[9], st, 0, new_st, 0, sz);
      /*<<domain.ml:136:9>>*/ if
      ( /*<<domain.ml:136:9>>*/ runtime.caml_domain_dls_compare_and_set
         /*<<domain.ml:136:9>>*/ (st, new_st))
       /*<<domain.ml:137:11>>*/ return new_st /*<<domain.ml:137:11>>*/ ;
    }
    /*<<domain.ml:139:7>>*/ }
   function set(param, x){
    var
     idx = param[1],
     st =
        /*<<domain.ml:142:13>>*/  /*<<domain.ml:142:13>>*/ maybe_grow
         /*<<domain.ml:142:13>>*/ (idx);
     /*<<domain.ml:146:4>>*/ caml_check_bound(st, idx)[1 + idx] = x;
     /*<<domain.ml:146:4>>*/ return 0 /*<<domain.ml:146:4>>*/ ;
    /*<<domain.ml:146:52>>*/ }
   function get(param){
    var
     init = param[2],
     idx = param[1],
     st =
        /*<<domain.ml:159:13>>*/  /*<<domain.ml:159:13>>*/ maybe_grow
         /*<<domain.ml:159:13>>*/ (idx),
     oldval =  /*<<domain.ml:160:14>>*/ caml_check_bound(st, idx)[1 + idx];
     /*<<domain.ml:161:7>>*/ if(oldval !== none)
      /*<<domain.ml:75:25>>*/ return oldval /*<<domain.ml:75:25>>*/ ;
    var
     new_obj =
        /*<<domain.ml:164:18>>*/  /*<<domain.ml:164:18>>*/ caml_call1
         /*<<domain.ml:164:18>>*/ (init, 0),
     st$0 =
        /*<<domain.ml:175:6>>*/  /*<<domain.ml:175:6>>*/ caml_domain_dls_get
         /*<<domain.ml:175:6>>*/ (0),
     curval =  /*<<domain.ml:152:17>>*/ caml_check_bound(st$0, idx)[1 + idx],
     _e_ = curval === oldval ? (st$0[1 + idx] = new_obj, 1) : 0;
     /*<<domain.ml:176:9>>*/ if(_e_)
      /*<<domain.ml:177:11>>*/ return new_obj /*<<domain.ml:177:11>>*/ ;
    var
     updated_obj =
        /*<<domain.ml:181:26>>*/ caml_check_bound(st$0, idx)[1 + idx];
     /*<<domain.ml:182:11>>*/ if(updated_obj !== none)
      /*<<domain.ml:75:25>>*/ return updated_obj /*<<domain.ml:75:25>>*/ ;
     /*<<domain.ml:184:13>>*/ throw  /*<<domain.ml:184:13>>*/ caml_maybe_attach_backtrace
            /*<<domain.ml:184:13>>*/ ([0, Assert_failure, _a_], 1);
    /*<<domain.ml:186:7>>*/ }
   function get_id(param){
    var domain = param[1];
     /*<<domain.ml:201:27>>*/ return domain /*<<domain.ml:201:27>>*/ ;
    /*<<domain.ml:201:33>>*/ }
   function self(param){
     /*<<domain.ml:203:14>>*/ return  /*<<domain.ml:203:14>>*/ caml_ml_domain_id
             /*<<domain.ml:203:14>>*/ (0) /*<<domain.ml:203:25>>*/ ;
    /*<<domain.ml:203:25>>*/ }
   function is_main_domain(param){
     /*<<domain.ml:205:24>>*/ return 0
            ===
              /*<<domain.ml:203:14>>*/ caml_ml_domain_id
               /*<<domain.ml:203:14>>*/ (0)
            ? 1
            : 0;
    /*<<domain.ml:205:44>>*/ }
   var
    first_domain_spawned =
       /*<<domain.ml:210:27>>*/  /*<<domain.ml:210:27>>*/ caml_call1
        /*<<domain.ml:210:27>>*/ (Stdlib_Atomic[1], 0),
    first_spawn_function =
       /*<<domain.ml:212:27>>*/ [0,
       function(param){ /*<<domain.ml:212:44>>*/ }],
    cst_first_domain_already_spawn = "first domain already spawned";
   function before_first_spawn(f){
     /*<<domain.ml:215:2>>*/ if
     ( /*<<domain.ml:215:5>>*/ caml_call1
        /*<<domain.ml:215:5>>*/ (Stdlib_Atomic[3], first_domain_spawned))
      /*<<domain.ml:216:4>>*/ throw  /*<<domain.ml:216:4>>*/ caml_maybe_attach_backtrace
             /*<<domain.ml:216:4>>*/ ([0,
              Stdlib[6],
              cst_first_domain_already_spawn],
             1);
    var old_f = first_spawn_function[1];
    function new_f(param){
      /*<<domain.ml:219:19>>*/  /*<<domain.ml:219:19>>*/ caml_call1
       /*<<domain.ml:219:19>>*/ (old_f, 0);
      /*<<domain.ml:219:19>>*/ return  /*<<domain.ml:219:19>>*/ caml_call1
              /*<<domain.ml:219:19>>*/ (f, 0) /*<<domain.ml:219:33>>*/ ;
     /*<<domain.ml:219:33>>*/ }
    first_spawn_function[1] = new_f;
    return 0;
    /*<<domain.ml:221:5>>*/ }
   var
    at_exit_key =
       /*<<domain.ml:231:18>>*/  /*<<domain.ml:231:18>>*/ new_key
        /*<<domain.ml:231:18>>*/ (0,
        function(param){
          /*<<domain.ml:231:41>>*/ return function(param){
           /*<<domain.ml:231:52>>*/ return 0 /*<<domain.ml:231:52>>*/ ; /*<<domain.ml:231:54>>*/ } /*<<domain.ml:231:41>>*/ ;
         /*<<domain.ml:231:55>>*/ });
   function at_exit(f){
    var
     old_exit =
        /*<<domain.ml:234:32>>*/  /*<<domain.ml:234:32>>*/ get
         /*<<domain.ml:234:32>>*/ (at_exit_key);
    function new_exit(param){
      /*<<domain.ml:236:4>>*/  /*<<domain.ml:236:4>>*/ caml_call1
       /*<<domain.ml:236:4>>*/ (f, 0);
      /*<<domain.ml:236:4>>*/ return  /*<<domain.ml:236:4>>*/ caml_call1
              /*<<domain.ml:236:4>>*/ (old_exit, 0) /*<<domain.ml:236:21>>*/ ;
     /*<<domain.ml:236:21>>*/ }
     /*<<domain.ml:238:2>>*/ return  /*<<domain.ml:238:2>>*/ set
             /*<<domain.ml:238:2>>*/ (at_exit_key, new_exit) /*<<domain.ml:238:30>>*/ ;
    /*<<domain.ml:238:30>>*/ }
   function do_at_exit(param){
    var
     f =
        /*<<domain.ml:241:25>>*/  /*<<domain.ml:241:25>>*/ get
         /*<<domain.ml:241:25>>*/ (at_exit_key);
     /*<<domain.ml:242:2>>*/ return  /*<<domain.ml:242:2>>*/ caml_call1
             /*<<domain.ml:242:2>>*/ (f, 0) /*<<domain.ml:242:6>>*/ ;
    /*<<domain.ml:242:6>>*/ }
   Stdlib[104][1] = do_at_exit;
   function spawn(f){
     /*<<domain.ml:249:2>>*/ if
     (1
      -
        /*<<domain.ml:224:9>>*/ caml_call1
         /*<<domain.ml:224:9>>*/ (Stdlib_Atomic[3], first_domain_spawned)){
      /*<<domain.ml:225:4>>*/  /*<<domain.ml:225:4>>*/ caml_call2
       /*<<domain.ml:225:4>>*/ (Stdlib_Atomic[4], first_domain_spawned, 1);
      /*<<domain.ml:226:4>>*/  /*<<domain.ml:226:4>>*/ caml_call1
       /*<<domain.ml:226:4>>*/ (first_spawn_function[1], 0);
     first_spawn_function[1] =
      function(param){
        /*<<domain.ml:228:39>>*/ return 0 /*<<domain.ml:228:39>>*/ ;
       /*<<domain.ml:228:41>>*/ };
    }
    var
     _b_ =
        /*<<domain.ml:193:6>>*/  /*<<domain.ml:193:6>>*/ caml_call1
         /*<<domain.ml:193:6>>*/ (Stdlib_Atomic[3], parent_keys),
     pk =
        /*<<domain.ml:193:6>>*/  /*<<domain.ml:193:6>>*/ caml_call2
         /*<<domain.ml:193:6>>*/ (Stdlib_List[20],
         function(param){
          var split = param[2], k = param[1];
           /*<<domain.ml:192:30>>*/ return [0,
                  k,
                   /*<<domain.ml:192:37>>*/ caml_call1
                    /*<<domain.ml:192:37>>*/ (split,
                     /*<<domain.ml:192:44>>*/ get /*<<domain.ml:192:44>>*/ (k))] /*<<domain.ml:192:30>>*/ ;
          /*<<domain.ml:192:54>>*/ },
         _b_),
     _c_ =
        /*<<domain.ml:256:17>>*/  /*<<domain.ml:256:17>>*/ caml_call1
         /*<<domain.ml:256:17>>*/ (Stdlib_Condition[1], 0),
     term_sync =
        /*<<domain.ml:254:8>>*/ [0,
        0,
         /*<<domain.ml:255:16>>*/ caml_call1
          /*<<domain.ml:255:16>>*/ (Stdlib_Mutex[1], 0),
        _c_];
    function body(param){
      /*<<domain.ml:260:4>>*/ try{
       /*<<domain.ml:261:6>>*/  /*<<domain.ml:261:6>>*/ create_dls
        /*<<domain.ml:261:6>>*/ (0);
       /*<<domain.ml:196:4>>*/  /*<<domain.ml:196:4>>*/ caml_call2
        /*<<domain.ml:196:4>>*/ (Stdlib_List[18],
        function(param){
         var v = param[2], k = param[1];
          /*<<domain.ml:196:34>>*/ return  /*<<domain.ml:196:34>>*/ set
                  /*<<domain.ml:196:34>>*/ (k, v) /*<<domain.ml:196:42>>*/ ;
         /*<<domain.ml:196:42>>*/ },
        pk);
      var
       res =
          /*<<domain.ml:263:16>>*/  /*<<domain.ml:263:16>>*/ caml_call1
           /*<<domain.ml:263:16>>*/ (f, 0);
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
       /*<<domain.ml:278:8>>*/ try{
        /*<<domain.ml:278:13>>*/  /*<<domain.ml:278:13>>*/ do_at_exit
         /*<<domain.ml:278:13>>*/ (0);
      }
      catch(_d_){}
       /*<<domain.ml:279:8>>*/ throw  /*<<domain.ml:279:8>>*/ caml_maybe_attach_backtrace
              /*<<domain.ml:279:8>>*/ (exn, 0);
     }
      /*<<domain.ml:272:8>>*/  /*<<domain.ml:272:8>>*/ do_at_exit
       /*<<domain.ml:272:8>>*/ (0);
      /*<<domain.ml:272:8>>*/ return res /*<<domain.ml:272:8>>*/ ;
     /*<<domain.ml:279:17>>*/ }
    var
     domain =
        /*<<domain.ml:281:15>>*/  /*<<domain.ml:281:15>>*/ runtime.caml_domain_spawn
         /*<<domain.ml:281:15>>*/ (body, term_sync);
     /*<<domain.ml:282:2>>*/ return [0, domain, term_sync] /*<<domain.ml:282:2>>*/ ;
    /*<<domain.ml:282:24>>*/ }
   function join(param){
    var term_sync = param[2];
    function loop(param){
      /*<<domain.ml:287:4>>*/ for(;;){
      var match = term_sync[1];
      if(match){
       var res = match[1];
        /*<<domain.ml:292:8>>*/ return res /*<<domain.ml:292:8>>*/ ;
      }
       /*<<domain.ml:289:8>>*/  /*<<domain.ml:289:8>>*/ caml_call2
        /*<<domain.ml:289:8>>*/ (Stdlib_Condition[2],
        term_sync[3],
        term_sync[2]);
     }
     /*<<domain.ml:292:11>>*/ }
    var
     match =
        /*<<domain.ml:294:8>>*/  /*<<domain.ml:294:8>>*/ caml_call2
         /*<<domain.ml:294:8>>*/ (Stdlib_Mutex[5], term_sync[2], loop);
    if(0 === match[0]){
     var x = match[1];
      /*<<domain.ml:295:12>>*/ return x /*<<domain.ml:295:12>>*/ ;
    }
    var ex = match[1];
     /*<<domain.ml:296:16>>*/ throw  /*<<domain.ml:296:16>>*/ caml_maybe_attach_backtrace
            /*<<domain.ml:296:16>>*/ (ex, 1);
    /*<<domain.ml:296:24>>*/ }
   var
    recommended_domain_count = runtime.caml_recommended_domain_count,
    Stdlib_Domain =
      [0,
       spawn,
       join,
       get_id,
       self,
       before_first_spawn,
       at_exit,
       cpu_relax,
       is_main_domain,
       recommended_domain_count,
       [0, new_key, get, set]];
   runtime.caml_register_global(9, Stdlib_Domain, "Stdlib__Domain");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: CamlinternalFormat
//# unitInfo: Requires: CamlinternalFormatBasics, Stdlib, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Char, Stdlib__Int, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst$43 =  /*<<?>>*/ "",
    cst_and =  /*<<?>>*/ " and ",
    cst_Li$3 =  /*<<?>>*/ "%Li",
    cst_i$3 =  /*<<?>>*/ "%i",
    cst_li$3 =  /*<<?>>*/ "%li",
    cst_ni$3 =  /*<<?>>*/ "%ni",
    cst_u$0 =  /*<<?>>*/ "%u",
    cst$42 =  /*<<?>>*/ "' '",
    cst$41 =  /*<<?>>*/ "'#'",
    cst$39 =  /*<<?>>*/ "'*'",
    cst$40 =  /*<<?>>*/ "'+'",
    cst$44 =  /*<<?>>*/ ", ",
    cst_0$3 =  /*<<?>>*/ "0",
    cst_at_character_number =  /*<<?>>*/ ": at character number ",
    cst$38 =  /*<<?>>*/ "@[",
    cst$37 =  /*<<?>>*/ "@{",
    cst_bad_input_format_type_mism =
       /*<<?>>*/ "bad input: format type mismatch between ",
    cst_bad_input_format_type_mism$0 =
       /*<<?>>*/ "bad input: format type mismatch between %S and %S",
    cst_camlinternalFormat_ml =  /*<<?>>*/ "camlinternalFormat.ml",
    cst_invalid_format =  /*<<?>>*/ "invalid format ",
    cst_precision$3 =  /*<<?>>*/ "precision",
    caml_blit_string =  /*<<?>>*/ runtime.caml_blit_string,
    caml_bytes_set =  /*<<?>>*/ runtime.caml_bytes_set,
    caml_create_bytes =  /*<<?>>*/ runtime.caml_create_bytes,
    caml_format_float =  /*<<?>>*/ runtime.caml_format_float,
    caml_format_int =  /*<<?>>*/ runtime.caml_format_int,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length =  /*<<?>>*/ runtime.caml_ml_string_length,
    caml_notequal =  /*<<?>>*/ runtime.caml_notequal,
    caml_string_get =  /*<<?>>*/ runtime.caml_string_get,
    caml_string_unsafe_get =  /*<<?>>*/ runtime.caml_string_unsafe_get,
    caml_trampoline =  /*<<?>>*/ runtime.caml_trampoline,
    caml_trampoline_return =  /*<<?>>*/ runtime.caml_trampoline_return,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$9 = "%{",
    cst$10 = "%}",
    cst$11 = "%(",
    cst$12 = "%)",
    cst$13 = "%?",
    cst$18 = cst$37,
    cst$19 = cst$38,
    cst$20 = cst$37,
    cst$21 = cst$38,
    cst$22 = cst$37,
    cst$23 = cst$38,
    cst$26 = cst$39,
    cst$24 = "'-'",
    cst$25 = cst$39,
    cst$27 = cst$40,
    cst$28 = cst$41,
    cst$29 = cst$42,
    cst$30 = cst$40,
    cst$31 = "'_'",
    sub_format = [0, 0, cst$43],
    formatting_lit = [0, "@;", 1, 0],
    cst$35 = cst$41,
    cst$32 = cst$40,
    cst$33 = cst$40,
    cst$34 = cst$42,
    cst$36 = cst$40,
    cst_unexpected_end_of_format = "unexpected end of format",
    cst$17 = ".",
    cst$14 = "%!",
    cst$15 = cst$37,
    cst$16 = cst$38,
    cst$8 = "%%",
    cst$0 = "@]",
    cst$1 = "@}",
    cst$2 = "@?",
    cst$3 = "@\n",
    cst$4 = "@.",
    cst$5 = "@@",
    cst$6 = "@%",
    cst$7 = "@",
    cst = ".*",
    Assert_failure = global_data.Assert_failure,
    CamlinternalFormatBasics = global_data.CamlinternalFormatBasics,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Int = global_data.Stdlib__Int,
    _a_ = [0, 0, 0],
    cst_c = "%c",
    cst_s = "%s",
    cst_i = cst_i$3,
    cst_li = cst_li$3,
    cst_ni = cst_ni$3,
    cst_Li = cst_Li$3,
    cst_f = "%f",
    cst_B = "%B",
    cst_a = "%a",
    cst_t = "%t",
    cst_r = "%r",
    cst_r$0 = "%_r",
    cst_0c = "0c",
    _b_ = [0, cst_camlinternalFormat_ml, 850, 23],
    _c_ = [0, cst_camlinternalFormat_ml, 837, 26],
    _d_ = [0, cst_camlinternalFormat_ml, 847, 28],
    _e_ = [0, cst_camlinternalFormat_ml, 815, 21],
    _f_ = [0, cst_camlinternalFormat_ml, 819, 21],
    _g_ = [0, cst_camlinternalFormat_ml, 823, 19],
    _h_ = [0, cst_camlinternalFormat_ml, 827, 22],
    _i_ = [0, cst_camlinternalFormat_ml, 832, 30],
    _j_ = [0, cst_camlinternalFormat_ml, 851, 23],
    _k_ = [0, cst_camlinternalFormat_ml, 836, 26],
    _l_ = [0, cst_camlinternalFormat_ml, 846, 28],
    _m_ = [0, cst_camlinternalFormat_ml, 814, 21],
    _n_ = [0, cst_camlinternalFormat_ml, 818, 21],
    _o_ = [0, cst_camlinternalFormat_ml, 822, 19],
    _p_ = [0, cst_camlinternalFormat_ml, 826, 22],
    _q_ = [0, cst_camlinternalFormat_ml, 831, 30];
   function create_char_set(param){
     /*<<camlinternalFormat.ml:24:25>>*/ return  /*<<camlinternalFormat.ml:24:25>>*/ caml_call2
             /*<<camlinternalFormat.ml:24:25>>*/ (Stdlib_Bytes[1], 32, 0) /*<<camlinternalFormat.ml:24:45>>*/ ;
    /*<<camlinternalFormat.ml:24:45>>*/ }
   function add_in_char_set(char_set, c){
    var
     str_ind = c >>> 3 | 0,
     mask = 1 << (c & 7),
     _cU_ =
        /*<<camlinternalFormat.ml:31:30>>*/  /*<<camlinternalFormat.ml:31:30>>*/ runtime.caml_bytes_get
         /*<<camlinternalFormat.ml:31:30>>*/ (char_set, str_ind)
       | mask;
     /*<<camlinternalFormat.ml:30:2>>*/ return  /*<<camlinternalFormat.ml:30:2>>*/ caml_bytes_set
             /*<<camlinternalFormat.ml:30:2>>*/ (char_set,
             str_ind,
              /*<<camlinternalFormat.ml:31:4>>*/ caml_call1
               /*<<camlinternalFormat.ml:31:4>>*/ (Stdlib[29], _cU_)) /*<<camlinternalFormat.ml:31:69>>*/ ;
    /*<<camlinternalFormat.ml:31:69>>*/ }
   function freeze_char_set(char_set){
     /*<<camlinternalFormat.ml:34:2>>*/ return  /*<<camlinternalFormat.ml:34:2>>*/ caml_call1
             /*<<camlinternalFormat.ml:34:2>>*/ (Stdlib_Bytes[6], char_set) /*<<camlinternalFormat.ml:34:26>>*/ ;
    /*<<camlinternalFormat.ml:34:26>>*/ }
   function rev_char_set(char_set){
    var
     char_set$0 =
        /*<<camlinternalFormat.ml:38:18>>*/  /*<<camlinternalFormat.ml:38:18>>*/ create_char_set
         /*<<camlinternalFormat.ml:38:18>>*/ (0),
     i = 0;
    for(;;){
     var
      _cS_ =
         /*<<camlinternalFormat.ml:41:32>>*/  /*<<camlinternalFormat.ml:41:32>>*/ caml_string_get
          /*<<camlinternalFormat.ml:41:32>>*/ (char_set, i)
        ^ 255;
      /*<<camlinternalFormat.ml:40:4>>*/  /*<<camlinternalFormat.ml:40:4>>*/ caml_bytes_set
       /*<<camlinternalFormat.ml:40:4>>*/ (char_set$0,
       i,
        /*<<camlinternalFormat.ml:41:6>>*/ caml_call1
         /*<<camlinternalFormat.ml:41:6>>*/ (Stdlib[29], _cS_));
     var _cT_ =  /*<<camlinternalFormat.ml:40:4>>*/ i + 1 | 0;
     if(31 === i)
       /*<<camlinternalFormat.ml:43:2>>*/ return  /*<<camlinternalFormat.ml:43:2>>*/ caml_call1
               /*<<camlinternalFormat.ml:43:2>>*/ (Stdlib_Bytes[44],
               char_set$0) /*<<camlinternalFormat.ml:43:34>>*/ ;
     i = _cT_;
    }
    /*<<camlinternalFormat.ml:43:34>>*/ }
   function is_in_char_set(char_set, c){
    var str_ind = c >>> 3 | 0, mask = 1 << (c & 7);
    return 0
            !==
             ( /*<<camlinternalFormat.ml:49:15>>*/ caml_string_get
               /*<<camlinternalFormat.ml:49:15>>*/ (char_set, str_ind)
             & mask)
            ? 1
            : 0;
    /*<<camlinternalFormat.ml:49:60>>*/ }
   function pad_of_pad_opt(pad_opt){
     /*<<camlinternalFormat.ml:62:29>>*/ if(! pad_opt)
      /*<<camlinternalFormat.ml:63:12>>*/ return 0 /*<<camlinternalFormat.ml:63:12>>*/ ;
    var width = pad_opt[1];
     /*<<camlinternalFormat.ml:64:18>>*/ return [0, 1, width] /*<<camlinternalFormat.ml:64:18>>*/ ;
    /*<<camlinternalFormat.ml:64:44>>*/ }
   function param_format_of_ignored_format(ign, fmt){
     /*<<camlinternalFormat.ml:76:15>>*/ if(typeof ign === "number")
     switch(ign){
       case 0:
         /*<<camlinternalFormat.ml:78:4>>*/ return [0, [0, fmt]] /*<<camlinternalFormat.ml:78:4>>*/ ;
       case 1:
         /*<<camlinternalFormat.ml:80:4>>*/ return [0, [1, fmt]] /*<<camlinternalFormat.ml:80:4>>*/ ;
       case 2:
         /*<<camlinternalFormat.ml:108:4>>*/ return [0, [19, fmt]] /*<<camlinternalFormat.ml:108:4>>*/ ;
       default:
         /*<<camlinternalFormat.ml:114:4>>*/ return [0, [22, fmt]] /*<<camlinternalFormat.ml:114:4>>*/ ;
     }
    switch(ign[0]){
      case 0:
       var pad_opt = ign[1];
        /*<<camlinternalFormat.ml:82:4>>*/ return [0,
               [2,
                 /*<<camlinternalFormat.ml:82:30>>*/ pad_of_pad_opt
                  /*<<camlinternalFormat.ml:82:30>>*/ (pad_opt),
                fmt]] /*<<camlinternalFormat.ml:82:4>>*/ ;
      case 1:
       var pad_opt$0 = ign[1];
        /*<<camlinternalFormat.ml:84:4>>*/ return [0,
               [3,
                 /*<<camlinternalFormat.ml:84:35>>*/ pad_of_pad_opt
                  /*<<camlinternalFormat.ml:84:35>>*/ (pad_opt$0),
                fmt]] /*<<camlinternalFormat.ml:84:4>>*/ ;
      case 2:
       var pad_opt$1 = ign[2], iconv = ign[1];
        /*<<camlinternalFormat.ml:86:4>>*/ return [0,
               [4,
                iconv,
                 /*<<camlinternalFormat.ml:86:34>>*/ pad_of_pad_opt
                  /*<<camlinternalFormat.ml:86:34>>*/ (pad_opt$1),
                0,
                fmt]] /*<<camlinternalFormat.ml:86:4>>*/ ;
      case 3:
       var pad_opt$2 = ign[2], iconv$0 = ign[1];
        /*<<camlinternalFormat.ml:88:4>>*/ return [0,
               [5,
                iconv$0,
                 /*<<camlinternalFormat.ml:89:21>>*/ pad_of_pad_opt
                  /*<<camlinternalFormat.ml:89:21>>*/ (pad_opt$2),
                0,
                fmt]] /*<<camlinternalFormat.ml:88:4>>*/ ;
      case 4:
       var pad_opt$3 = ign[2], iconv$1 = ign[1];
        /*<<camlinternalFormat.ml:91:4>>*/ return [0,
               [6,
                iconv$1,
                 /*<<camlinternalFormat.ml:92:25>>*/ pad_of_pad_opt
                  /*<<camlinternalFormat.ml:92:25>>*/ (pad_opt$3),
                0,
                fmt]] /*<<camlinternalFormat.ml:91:4>>*/ ;
      case 5:
       var pad_opt$4 = ign[2], iconv$2 = ign[1];
        /*<<camlinternalFormat.ml:94:4>>*/ return [0,
               [7,
                iconv$2,
                 /*<<camlinternalFormat.ml:95:21>>*/ pad_of_pad_opt
                  /*<<camlinternalFormat.ml:95:21>>*/ (pad_opt$4),
                0,
                fmt]] /*<<camlinternalFormat.ml:94:4>>*/ ;
      case 6:
       var prec_opt = ign[2], pad_opt$5 = ign[1];
       if(prec_opt)
        var ndec = prec_opt[1], _cR_ = [0, ndec];
       else
        var _cR_ = 0;
        /*<<camlinternalFormat.ml:97:4>>*/ return [0,
               [8,
                _a_,
                 /*<<camlinternalFormat.ml:99:14>>*/ pad_of_pad_opt
                  /*<<camlinternalFormat.ml:99:14>>*/ (pad_opt$5),
                _cR_,
                fmt]] /*<<camlinternalFormat.ml:97:4>>*/ ;
      case 7:
       var pad_opt$6 = ign[1];
        /*<<camlinternalFormat.ml:101:4>>*/ return [0,
               [9,
                 /*<<camlinternalFormat.ml:101:28>>*/ pad_of_pad_opt
                  /*<<camlinternalFormat.ml:101:28>>*/ (pad_opt$6),
                fmt]] /*<<camlinternalFormat.ml:101:4>>*/ ;
      case 8:
       var fmtty = ign[2], pad_opt$7 = ign[1];
        /*<<camlinternalFormat.ml:103:4>>*/ return [0,
               [13, pad_opt$7, fmtty, fmt]] /*<<camlinternalFormat.ml:103:4>>*/ ;
      case 9:
       var fmtty$0 = ign[2], pad_opt$8 = ign[1];
        /*<<camlinternalFormat.ml:105:4>>*/ return [0,
               [14, pad_opt$8, fmtty$0, fmt]] /*<<camlinternalFormat.ml:105:4>>*/ ;
      case 10:
       var char_set = ign[2], width_opt = ign[1];
        /*<<camlinternalFormat.ml:110:4>>*/ return [0,
               [20, width_opt, char_set, fmt]] /*<<camlinternalFormat.ml:110:4>>*/ ;
      default:
       var counter = ign[1];
        /*<<camlinternalFormat.ml:112:4>>*/ return [0, [21, counter, fmt]] /*<<camlinternalFormat.ml:112:4>>*/ ;
    }
    /*<<camlinternalFormat.ml:114:41>>*/ }
   function default_float_precision(fconv){
     /*<<camlinternalFormat.ml:221:2>>*/ return 5 === fconv[2] ? 12 : -6 /*<<camlinternalFormat.ml:227:17>>*/ ;
    /*<<camlinternalFormat.ml:227:17>>*/ }
   function buffer_create(init_size){
     /*<<camlinternalFormat.ml:256:30>>*/ return [0,
            0,
             /*<<camlinternalFormat.ml:256:49>>*/ caml_create_bytes
              /*<<camlinternalFormat.ml:256:49>>*/ (init_size)] /*<<camlinternalFormat.ml:256:30>>*/ ;
    /*<<camlinternalFormat.ml:256:73>>*/ }
   function buffer_check_size(buf, overhead){
    var
     len = runtime.caml_ml_bytes_length(buf[2]),
     min_len = buf[1] + overhead | 0;
    if(len < min_len){
     var
      new_len =
         /*<<camlinternalFormat.ml:263:18>>*/  /*<<camlinternalFormat.ml:263:18>>*/ caml_call2
          /*<<camlinternalFormat.ml:263:18>>*/ (Stdlib_Int[11],
          len * 2 | 0,
          min_len),
      new_str =
         /*<<camlinternalFormat.ml:264:18>>*/  /*<<camlinternalFormat.ml:264:18>>*/ caml_create_bytes
          /*<<camlinternalFormat.ml:264:18>>*/ (new_len);
      /*<<camlinternalFormat.ml:265:4>>*/  /*<<camlinternalFormat.ml:265:4>>*/ caml_call5
       /*<<camlinternalFormat.ml:265:4>>*/ (Stdlib_Bytes[11],
       buf[2],
       0,
       new_str,
       0,
       len);
     buf[2] = new_str;
    }
    /*<<camlinternalFormat.ml:267:3>>*/ }
   function buffer_add_char(buf, c){
     /*<<camlinternalFormat.ml:271:2>>*/  /*<<camlinternalFormat.ml:271:2>>*/ buffer_check_size
      /*<<camlinternalFormat.ml:271:2>>*/ (buf, 1);
     /*<<camlinternalFormat.ml:272:2>>*/  /*<<camlinternalFormat.ml:272:2>>*/ caml_bytes_set
      /*<<camlinternalFormat.ml:272:2>>*/ (buf[2], buf[1], c);
    buf[1] = buf[1] + 1 | 0;
    /*<<camlinternalFormat.ml:273:24>>*/ }
   function buffer_add_string(buf, s){
    var str_len = caml_ml_string_length(s);
     /*<<camlinternalFormat.ml:278:2>>*/  /*<<camlinternalFormat.ml:278:2>>*/ buffer_check_size
      /*<<camlinternalFormat.ml:278:2>>*/ (buf, str_len);
     /*<<camlinternalFormat.ml:279:2>>*/  /*<<camlinternalFormat.ml:279:2>>*/ caml_call5
      /*<<camlinternalFormat.ml:279:2>>*/ (Stdlib_String[6],
      s,
      0,
      buf[2],
      buf[1],
      str_len);
    buf[1] = buf[1] + str_len | 0;
    /*<<camlinternalFormat.ml:280:30>>*/ }
   function buffer_contents(buf){
     /*<<camlinternalFormat.ml:284:2>>*/ return caml_call3
            (Stdlib_Bytes[8], buf[2], 0, buf[1]) /*<<camlinternalFormat.ml:284:38>>*/ ;
    /*<<camlinternalFormat.ml:284:38>>*/ }
   function char_of_iconv(iconv){
     /*<<camlinternalFormat.ml:289:26>>*/ switch(iconv){
      case 6:
      case 7:
        /*<<camlinternalFormat.ml:291:38>>*/ return 120 /*<<camlinternalFormat.ml:291:38>>*/ ;
      case 8:
      case 9:
        /*<<camlinternalFormat.ml:291:62>>*/ return 88 /*<<camlinternalFormat.ml:291:62>>*/ ;
      case 10:
      case 11:
        /*<<camlinternalFormat.ml:292:14>>*/ return 111 /*<<camlinternalFormat.ml:292:14>>*/ ;
      case 12:
      case 15:
        /*<<camlinternalFormat.ml:292:38>>*/ return 117 /*<<camlinternalFormat.ml:292:38>>*/ ;
      case 0:
      case 1:
      case 2:
      case 13:
        /*<<camlinternalFormat.ml:290:40>>*/ return 100 /*<<camlinternalFormat.ml:290:40>>*/ ;
      default:
        /*<<camlinternalFormat.ml:291:14>>*/ return 105 /*<<camlinternalFormat.ml:291:14>>*/ ;
    }
    /*<<camlinternalFormat.ml:292:41>>*/ }
   function char_of_fconv(opt, fconv){
    var cF = opt ? opt[1] : 70;
    switch(fconv[2]){
      case 0:
        /*<<camlinternalFormat.ml:297:15>>*/ return 102 /*<<camlinternalFormat.ml:297:15>>*/ ;
      case 1:
        /*<<camlinternalFormat.ml:297:32>>*/ return 101 /*<<camlinternalFormat.ml:297:32>>*/ ;
      case 2:
        /*<<camlinternalFormat.ml:298:15>>*/ return 69 /*<<camlinternalFormat.ml:298:15>>*/ ;
      case 3:
        /*<<camlinternalFormat.ml:298:32>>*/ return 103 /*<<camlinternalFormat.ml:298:32>>*/ ;
      case 4:
        /*<<camlinternalFormat.ml:299:15>>*/ return 71 /*<<camlinternalFormat.ml:299:15>>*/ ;
      case 5:
        /*<<camlinternalFormat.ml:299:32>>*/ return cF /*<<camlinternalFormat.ml:299:32>>*/ ;
      case 6:
        /*<<camlinternalFormat.ml:300:15>>*/ return 104 /*<<camlinternalFormat.ml:300:15>>*/ ;
      case 7:
        /*<<camlinternalFormat.ml:300:32>>*/ return 72 /*<<camlinternalFormat.ml:300:32>>*/ ;
      default:
        /*<<camlinternalFormat.ml:301:16>>*/ return 70 /*<<camlinternalFormat.ml:301:16>>*/ ;
    }
    /*<<camlinternalFormat.ml:301:19>>*/ }
   function bprint_padty(buf, padty){
     /*<<camlinternalFormat.ml:374:29>>*/ switch(padty){
      case 0:
        /*<<camlinternalFormat.ml:375:13>>*/ return  /*<<camlinternalFormat.ml:375:13>>*/ buffer_add_char
                /*<<camlinternalFormat.ml:375:13>>*/ (buf, 45) /*<<camlinternalFormat.ml:377:36>>*/ ;
      case 1:
        /*<<camlinternalFormat.ml:376:13>>*/ return /*<<camlinternalFormat.ml:376:13>>*/ ;
      default:
        /*<<camlinternalFormat.ml:377:13>>*/ return  /*<<camlinternalFormat.ml:377:13>>*/ buffer_add_char
                /*<<camlinternalFormat.ml:377:13>>*/ (buf, 48) /*<<camlinternalFormat.ml:377:36>>*/ ;
    }
    /*<<camlinternalFormat.ml:377:36>>*/ }
   function bprint_ignored_flag(buf, ign_flag){
     /*<<camlinternalFormat.ml:381:2>>*/ return ign_flag
            ?  /*<<camlinternalFormat.ml:381:19>>*/ buffer_add_char
               /*<<camlinternalFormat.ml:381:19>>*/ (buf, 95)
            : ign_flag /*<<camlinternalFormat.ml:381:42>>*/ ;
    /*<<camlinternalFormat.ml:381:42>>*/ }
   function bprint_pad_opt(buf, pad_opt){
     /*<<camlinternalFormat.ml:385:33>>*/ if(! pad_opt)
      /*<<camlinternalFormat.ml:386:12>>*/ return /*<<camlinternalFormat.ml:386:12>>*/ ;
    var width = pad_opt[1];
     /*<<camlinternalFormat.ml:387:40>>*/ return  /*<<camlinternalFormat.ml:387:40>>*/ buffer_add_string
             /*<<camlinternalFormat.ml:387:40>>*/ (buf,
              /*<<camlinternalFormat.ml:387:40>>*/ caml_call1
               /*<<camlinternalFormat.ml:387:40>>*/ (Stdlib_Int[12], width)) /*<<camlinternalFormat.ml:387:61>>*/ ;
    /*<<camlinternalFormat.ml:387:61>>*/ }
   function bprint_padding(buf, pad){
     /*<<camlinternalFormat.ml:393:15>>*/ if(typeof pad === "number")
      /*<<camlinternalFormat.ml:394:18>>*/ return /*<<camlinternalFormat.ml:394:18>>*/ ;
    if(0 === pad[0]){
     var n = pad[2], padty = pad[1];
      /*<<camlinternalFormat.ml:396:4>>*/  /*<<camlinternalFormat.ml:396:4>>*/ bprint_padty
       /*<<camlinternalFormat.ml:396:4>>*/ (buf, padty);
      /*<<camlinternalFormat.ml:397:26>>*/ return  /*<<camlinternalFormat.ml:397:26>>*/ buffer_add_string
              /*<<camlinternalFormat.ml:397:26>>*/ (buf,
               /*<<camlinternalFormat.ml:397:26>>*/ caml_call1
                /*<<camlinternalFormat.ml:397:26>>*/ (Stdlib_Int[12], n)) /*<<camlinternalFormat.ml:400:27>>*/ ;
    }
    var padty$0 = pad[1];
     /*<<camlinternalFormat.ml:399:4>>*/  /*<<camlinternalFormat.ml:399:4>>*/ bprint_padty
      /*<<camlinternalFormat.ml:399:4>>*/ (buf, padty$0);
     /*<<camlinternalFormat.ml:399:4>>*/ return  /*<<camlinternalFormat.ml:399:4>>*/ buffer_add_char
             /*<<camlinternalFormat.ml:399:4>>*/ (buf, 42) /*<<camlinternalFormat.ml:400:27>>*/ ;
    /*<<camlinternalFormat.ml:400:27>>*/ }
   function bprint_precision(buf, prec){
     /*<<camlinternalFormat.ml:404:18>>*/ if(typeof prec !== "number"){
     var n = prec[1];
      /*<<camlinternalFormat.ml:407:4>>*/  /*<<camlinternalFormat.ml:407:4>>*/ buffer_add_char
       /*<<camlinternalFormat.ml:407:4>>*/ (buf, 46);
      /*<<camlinternalFormat.ml:408:26>>*/ return  /*<<camlinternalFormat.ml:408:26>>*/ buffer_add_string
              /*<<camlinternalFormat.ml:408:26>>*/ (buf,
               /*<<camlinternalFormat.ml:408:26>>*/ caml_call1
                /*<<camlinternalFormat.ml:408:26>>*/ (Stdlib_Int[12], n)) /*<<camlinternalFormat.ml:410:30>>*/ ;
    }
    if(prec)
      /*<<camlinternalFormat.ml:410:4>>*/ return  /*<<camlinternalFormat.ml:410:4>>*/ buffer_add_string
              /*<<camlinternalFormat.ml:410:4>>*/ (buf, cst) /*<<camlinternalFormat.ml:410:30>>*/ ;
    /*<<camlinternalFormat.ml:410:30>>*/ }
   function bprint_iconv_flag(buf, iconv){
     /*<<camlinternalFormat.ml:415:34>>*/ switch(iconv){
      case 1:
      case 4:
        /*<<camlinternalFormat.ml:416:23>>*/ return  /*<<camlinternalFormat.ml:416:23>>*/ buffer_add_char
                /*<<camlinternalFormat.ml:416:23>>*/ (buf, 43) /*<<camlinternalFormat.ml:420:55>>*/ ;
      case 2:
      case 5:
        /*<<camlinternalFormat.ml:417:23>>*/ return  /*<<camlinternalFormat.ml:417:23>>*/ buffer_add_char
                /*<<camlinternalFormat.ml:417:23>>*/ (buf, 32) /*<<camlinternalFormat.ml:420:55>>*/ ;
      case 7:
      case 9:
      case 11:
      case 13:
      case 14:
      case 15:
        /*<<camlinternalFormat.ml:419:6>>*/ return  /*<<camlinternalFormat.ml:419:6>>*/ buffer_add_char
                /*<<camlinternalFormat.ml:419:6>>*/ (buf, 35) /*<<camlinternalFormat.ml:420:55>>*/ ;
      default:
        /*<<camlinternalFormat.ml:420:53>>*/ return /*<<camlinternalFormat.ml:420:53>>*/ ;
    }
    /*<<camlinternalFormat.ml:420:55>>*/ }
   function bprint_altint_fmt(buf, ign_flag, iconv, pad, prec, c){
     /*<<camlinternalFormat.ml:433:2>>*/  /*<<camlinternalFormat.ml:433:2>>*/ buffer_add_char
      /*<<camlinternalFormat.ml:433:2>>*/ (buf, 37);
     /*<<camlinternalFormat.ml:434:2>>*/  /*<<camlinternalFormat.ml:434:2>>*/ bprint_ignored_flag
      /*<<camlinternalFormat.ml:434:2>>*/ (buf, ign_flag);
     /*<<camlinternalFormat.ml:435:2>>*/  /*<<camlinternalFormat.ml:435:2>>*/ bprint_iconv_flag
      /*<<camlinternalFormat.ml:435:2>>*/ (buf, iconv);
     /*<<camlinternalFormat.ml:436:2>>*/  /*<<camlinternalFormat.ml:436:2>>*/ bprint_padding
      /*<<camlinternalFormat.ml:436:2>>*/ (buf, pad);
     /*<<camlinternalFormat.ml:437:2>>*/  /*<<camlinternalFormat.ml:437:2>>*/ bprint_precision
      /*<<camlinternalFormat.ml:437:2>>*/ (buf, prec);
     /*<<camlinternalFormat.ml:438:2>>*/  /*<<camlinternalFormat.ml:438:2>>*/ buffer_add_char
      /*<<camlinternalFormat.ml:438:2>>*/ (buf, c);
     /*<<camlinternalFormat.ml:439:22>>*/ return  /*<<camlinternalFormat.ml:439:22>>*/ buffer_add_char
             /*<<camlinternalFormat.ml:439:22>>*/ (buf,
              /*<<camlinternalFormat.ml:439:22>>*/ char_of_iconv
               /*<<camlinternalFormat.ml:439:22>>*/ (iconv)) /*<<camlinternalFormat.ml:439:43>>*/ ;
    /*<<camlinternalFormat.ml:439:43>>*/ }
   function bprint_fconv_flag(buf, fconv){
     /*<<camlinternalFormat.ml:445:2>>*/ switch(fconv[1]){
      case 0: break;
      case 1:
        /*<<camlinternalFormat.ml:446:20>>*/  /*<<camlinternalFormat.ml:446:20>>*/ buffer_add_char
         /*<<camlinternalFormat.ml:446:20>>*/ (buf, 43);
       break;
      default:
        /*<<camlinternalFormat.ml:447:20>>*/  /*<<camlinternalFormat.ml:447:20>>*/ buffer_add_char
         /*<<camlinternalFormat.ml:447:20>>*/ (buf, 32);
    }
    if(8 <= fconv[2])
      /*<<camlinternalFormat.ml:450:16>>*/ return  /*<<camlinternalFormat.ml:450:16>>*/ buffer_add_char
              /*<<camlinternalFormat.ml:450:16>>*/ (buf, 35) /*<<camlinternalFormat.ml:452:37>>*/ ;
    /*<<camlinternalFormat.ml:452:37>>*/ }
   function string_of_formatting_lit(formatting_lit){
     /*<<camlinternalFormat.ml:465:46>>*/ if
     (typeof formatting_lit === "number")
     switch(formatting_lit){
       case 0:
         /*<<camlinternalFormat.ml:466:28>>*/ return cst$0 /*<<camlinternalFormat.ml:466:28>>*/ ;
       case 1:
         /*<<camlinternalFormat.ml:467:28>>*/ return cst$1 /*<<camlinternalFormat.ml:467:28>>*/ ;
       case 2:
         /*<<camlinternalFormat.ml:469:28>>*/ return cst$2 /*<<camlinternalFormat.ml:469:28>>*/ ;
       case 3:
         /*<<camlinternalFormat.ml:470:28>>*/ return cst$3 /*<<camlinternalFormat.ml:470:28>>*/ ;
       case 4:
         /*<<camlinternalFormat.ml:471:28>>*/ return cst$4 /*<<camlinternalFormat.ml:471:28>>*/ ;
       case 5:
         /*<<camlinternalFormat.ml:473:28>>*/ return cst$5 /*<<camlinternalFormat.ml:473:28>>*/ ;
       default:
         /*<<camlinternalFormat.ml:474:28>>*/ return cst$6 /*<<camlinternalFormat.ml:474:28>>*/ ;
     }
    switch(formatting_lit[0]){
      case 0:
       var str = formatting_lit[1];
        /*<<camlinternalFormat.ml:468:28>>*/ return str /*<<camlinternalFormat.ml:468:28>>*/ ;
      case 1:
       var str$0 = formatting_lit[1];
        /*<<camlinternalFormat.ml:472:28>>*/ return str$0 /*<<camlinternalFormat.ml:472:28>>*/ ;
      default:
       var
        c = formatting_lit[1],
        _cQ_ =
           /*<<camlinternalFormat.ml:475:26>>*/  /*<<camlinternalFormat.ml:475:26>>*/ caml_call2
            /*<<camlinternalFormat.ml:475:26>>*/ (Stdlib_String[1], 1, c);
        /*<<camlinternalFormat.ml:475:26>>*/ return  /*<<camlinternalFormat.ml:475:26>>*/ caml_call2
                /*<<camlinternalFormat.ml:475:26>>*/ (Stdlib[28], cst$7, _cQ_) /*<<camlinternalFormat.ml:475:43>>*/ ;
    }
    /*<<camlinternalFormat.ml:475:43>>*/ }
   function bprint_char_literal(buf, chr){
     /*<<camlinternalFormat.ml:480:34>>*/ return 37 === chr
            ?  /*<<camlinternalFormat.ml:481:11>>*/ buffer_add_string
               /*<<camlinternalFormat.ml:481:11>>*/ (buf, cst$8)
            :  /*<<camlinternalFormat.ml:482:9>>*/ buffer_add_char
               /*<<camlinternalFormat.ml:482:9>>*/ (buf, chr) /*<<camlinternalFormat.ml:482:32>>*/ ;
    /*<<camlinternalFormat.ml:482:32>>*/ }
   function bprint_string_literal(buf, str){
    var
     _cO_ = caml_ml_string_length(str) - 1 | 0,
     _cN_ =  /*<<camlinternalFormat.ml:486:2>>*/ 0;
    if(_cO_ >= 0){
     var i = _cN_;
     for(;;){
       /*<<camlinternalFormat.ml:487:4>>*/  /*<<camlinternalFormat.ml:487:4>>*/ bprint_char_literal
        /*<<camlinternalFormat.ml:487:4>>*/ (buf,
         /*<<camlinternalFormat.ml:487:28>>*/ caml_string_get
          /*<<camlinternalFormat.ml:487:28>>*/ (str, i));
      var _cP_ =  /*<<camlinternalFormat.ml:487:4>>*/ i + 1 | 0;
      if(_cO_ === i) break;
      i = _cP_;
     }
    }
    /*<<camlinternalFormat.ml:488:6>>*/ }
   function bprint_fmtty(buf, fmtty){
    var fmtty$0 = fmtty;
     /*<<camlinternalFormat.ml:496:17>>*/ for(;;){
     if(typeof fmtty$0 === "number")
       /*<<camlinternalFormat.ml:521:20>>*/ return /*<<camlinternalFormat.ml:521:20>>*/ ;
     switch(fmtty$0[0]){
       case 0:
        var fmtty$1 = fmtty$0[1];
         /*<<camlinternalFormat.ml:497:25>>*/  /*<<camlinternalFormat.ml:497:25>>*/ buffer_add_string
          /*<<camlinternalFormat.ml:497:25>>*/ (buf, cst_c);
        fmtty$0 = fmtty$1;
        break;
       case 1:
        var fmtty$2 = fmtty$0[1];
         /*<<camlinternalFormat.ml:498:25>>*/  /*<<camlinternalFormat.ml:498:25>>*/ buffer_add_string
          /*<<camlinternalFormat.ml:498:25>>*/ (buf, cst_s);
        fmtty$0 = fmtty$2;
        break;
       case 2:
        var fmtty$3 = fmtty$0[1];
         /*<<camlinternalFormat.ml:499:25>>*/  /*<<camlinternalFormat.ml:499:25>>*/ buffer_add_string
          /*<<camlinternalFormat.ml:499:25>>*/ (buf, cst_i);
        fmtty$0 = fmtty$3;
        break;
       case 3:
        var fmtty$4 = fmtty$0[1];
         /*<<camlinternalFormat.ml:500:25>>*/  /*<<camlinternalFormat.ml:500:25>>*/ buffer_add_string
          /*<<camlinternalFormat.ml:500:25>>*/ (buf, cst_li);
        fmtty$0 = fmtty$4;
        break;
       case 4:
        var fmtty$5 = fmtty$0[1];
         /*<<camlinternalFormat.ml:501:25>>*/  /*<<camlinternalFormat.ml:501:25>>*/ buffer_add_string
          /*<<camlinternalFormat.ml:501:25>>*/ (buf, cst_ni);
        fmtty$0 = fmtty$5;
        break;
       case 5:
        var fmtty$6 = fmtty$0[1];
         /*<<camlinternalFormat.ml:502:25>>*/  /*<<camlinternalFormat.ml:502:25>>*/ buffer_add_string
          /*<<camlinternalFormat.ml:502:25>>*/ (buf, cst_Li);
        fmtty$0 = fmtty$6;
        break;
       case 6:
        var fmtty$7 = fmtty$0[1];
         /*<<camlinternalFormat.ml:503:25>>*/  /*<<camlinternalFormat.ml:503:25>>*/ buffer_add_string
          /*<<camlinternalFormat.ml:503:25>>*/ (buf, cst_f);
        fmtty$0 = fmtty$7;
        break;
       case 7:
        var fmtty$8 = fmtty$0[1];
         /*<<camlinternalFormat.ml:504:25>>*/  /*<<camlinternalFormat.ml:504:25>>*/ buffer_add_string
          /*<<camlinternalFormat.ml:504:25>>*/ (buf, cst_B);
        fmtty$0 = fmtty$8;
        break;
       case 8:
        var fmtty$9 = fmtty$0[2], sub_fmtty = fmtty$0[1];
         /*<<camlinternalFormat.ml:515:4>>*/  /*<<camlinternalFormat.ml:515:4>>*/ buffer_add_string
          /*<<camlinternalFormat.ml:515:4>>*/ (buf, cst$9);
         /*<<camlinternalFormat.ml:515:32>>*/  /*<<camlinternalFormat.ml:515:32>>*/ bprint_fmtty
          /*<<camlinternalFormat.ml:515:32>>*/ (buf, sub_fmtty);
         /*<<camlinternalFormat.ml:516:4>>*/  /*<<camlinternalFormat.ml:516:4>>*/ buffer_add_string
          /*<<camlinternalFormat.ml:516:4>>*/ (buf, cst$10);
        fmtty$0 = fmtty$9;
        break;
       case 9:
        var fmtty$10 = fmtty$0[3], sub_fmtty$0 = fmtty$0[1];
         /*<<camlinternalFormat.ml:518:4>>*/  /*<<camlinternalFormat.ml:518:4>>*/ buffer_add_string
          /*<<camlinternalFormat.ml:518:4>>*/ (buf, cst$11);
         /*<<camlinternalFormat.ml:518:32>>*/  /*<<camlinternalFormat.ml:518:32>>*/ bprint_fmtty
          /*<<camlinternalFormat.ml:518:32>>*/ (buf, sub_fmtty$0);
         /*<<camlinternalFormat.ml:519:4>>*/  /*<<camlinternalFormat.ml:519:4>>*/ buffer_add_string
          /*<<camlinternalFormat.ml:519:4>>*/ (buf, cst$12);
        fmtty$0 = fmtty$10;
        break;
       case 10:
        var fmtty$11 = fmtty$0[1];
         /*<<camlinternalFormat.ml:505:25>>*/  /*<<camlinternalFormat.ml:505:25>>*/ buffer_add_string
          /*<<camlinternalFormat.ml:505:25>>*/ (buf, cst_a);
        fmtty$0 = fmtty$11;
        break;
       case 11:
        var fmtty$12 = fmtty$0[1];
         /*<<camlinternalFormat.ml:506:25>>*/  /*<<camlinternalFormat.ml:506:25>>*/ buffer_add_string
          /*<<camlinternalFormat.ml:506:25>>*/ (buf, cst_t);
        fmtty$0 = fmtty$12;
        break;
       case 12:
        var fmtty$13 = fmtty$0[1];
         /*<<camlinternalFormat.ml:507:25>>*/  /*<<camlinternalFormat.ml:507:25>>*/ buffer_add_string
          /*<<camlinternalFormat.ml:507:25>>*/ (buf, cst$13);
        fmtty$0 = fmtty$13;
        break;
       case 13:
        var fmtty$14 = fmtty$0[1];
         /*<<camlinternalFormat.ml:508:25>>*/  /*<<camlinternalFormat.ml:508:25>>*/ buffer_add_string
          /*<<camlinternalFormat.ml:508:25>>*/ (buf, cst_r);
        fmtty$0 = fmtty$14;
        break;
       default:
        var fmtty$15 = fmtty$0[1];
         /*<<camlinternalFormat.ml:511:4>>*/  /*<<camlinternalFormat.ml:511:4>>*/ buffer_add_string
          /*<<camlinternalFormat.ml:511:4>>*/ (buf, cst_r$0);
        fmtty$0 = fmtty$15;
     }
    }
    /*<<camlinternalFormat.ml:521:22>>*/ }
   function int_of_custom_arity(param){
     /*<<camlinternalFormat.ml:525:8>>*/ if(! param)
      /*<<camlinternalFormat.ml:528:19>>*/ return 0 /*<<camlinternalFormat.ml:528:19>>*/ ;
    var x = param[1];
    return 1
           +
             /*<<camlinternalFormat.ml:529:25>>*/ int_of_custom_arity
              /*<<camlinternalFormat.ml:529:25>>*/ (x)
           | 0;
    /*<<camlinternalFormat.ml:529:46>>*/ }
   function string_of_fmt(fmt){
    var
     buf =
        /*<<camlinternalFormat.ml:644:12>>*/  /*<<camlinternalFormat.ml:644:12>>*/ buffer_create
         /*<<camlinternalFormat.ml:644:12>>*/ (16);
    function fmtiter(fmt, ign_flag){
     var fmt$0 = fmt, ign_flag$0 = ign_flag;
      /*<<camlinternalFormat.ml:535:22>>*/ for(;;){
      if(typeof fmt$0 === "number")
        /*<<camlinternalFormat.ml:636:23>>*/ return /*<<camlinternalFormat.ml:636:23>>*/ ;
      switch(fmt$0[0]){
        case 0:
         var rest = fmt$0[1];
          /*<<camlinternalFormat.ml:562:6>>*/  /*<<camlinternalFormat.ml:562:6>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:562:6>>*/ (buf, 37);
          /*<<camlinternalFormat.ml:562:31>>*/  /*<<camlinternalFormat.ml:562:31>>*/ bprint_ignored_flag
           /*<<camlinternalFormat.ml:562:31>>*/ (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:563:6>>*/  /*<<camlinternalFormat.ml:563:6>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:563:6>>*/ (buf, 99);
         fmt$0 = rest;
         ign_flag$0 = 0;
         break;
        case 1:
         var rest$0 = fmt$0[1];
          /*<<camlinternalFormat.ml:565:6>>*/  /*<<camlinternalFormat.ml:565:6>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:565:6>>*/ (buf, 37);
          /*<<camlinternalFormat.ml:565:31>>*/  /*<<camlinternalFormat.ml:565:31>>*/ bprint_ignored_flag
           /*<<camlinternalFormat.ml:565:31>>*/ (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:566:6>>*/  /*<<camlinternalFormat.ml:566:6>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:566:6>>*/ (buf, 67);
         fmt$0 = rest$0;
         ign_flag$0 = 0;
         break;
        case 2:
         var rest$1 = fmt$0[2], pad = fmt$0[1];
          /*<<camlinternalFormat.ml:537:6>>*/  /*<<camlinternalFormat.ml:537:6>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:537:6>>*/ (buf, 37);
          /*<<camlinternalFormat.ml:537:31>>*/  /*<<camlinternalFormat.ml:537:31>>*/ bprint_ignored_flag
           /*<<camlinternalFormat.ml:537:31>>*/ (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:538:6>>*/  /*<<camlinternalFormat.ml:538:6>>*/ bprint_padding
           /*<<camlinternalFormat.ml:538:6>>*/ (buf, pad);
          /*<<camlinternalFormat.ml:538:30>>*/  /*<<camlinternalFormat.ml:538:30>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:538:30>>*/ (buf, 115);
         fmt$0 = rest$1;
         ign_flag$0 = 0;
         break;
        case 3:
         var rest$2 = fmt$0[2], pad$0 = fmt$0[1];
          /*<<camlinternalFormat.ml:541:6>>*/  /*<<camlinternalFormat.ml:541:6>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:541:6>>*/ (buf, 37);
          /*<<camlinternalFormat.ml:541:31>>*/  /*<<camlinternalFormat.ml:541:31>>*/ bprint_ignored_flag
           /*<<camlinternalFormat.ml:541:31>>*/ (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:542:6>>*/  /*<<camlinternalFormat.ml:542:6>>*/ bprint_padding
           /*<<camlinternalFormat.ml:542:6>>*/ (buf, pad$0);
          /*<<camlinternalFormat.ml:542:30>>*/  /*<<camlinternalFormat.ml:542:30>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:542:30>>*/ (buf, 83);
         fmt$0 = rest$2;
         ign_flag$0 = 0;
         break;
        case 4:
         var
          rest$3 = fmt$0[4],
          prec = fmt$0[3],
          pad$1 = fmt$0[2],
          iconv = fmt$0[1];
          /*<<camlinternalFormat.ml:424:2>>*/  /*<<camlinternalFormat.ml:424:2>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:424:2>>*/ (buf, 37);
          /*<<camlinternalFormat.ml:425:2>>*/  /*<<camlinternalFormat.ml:425:2>>*/ bprint_ignored_flag
           /*<<camlinternalFormat.ml:425:2>>*/ (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:426:2>>*/  /*<<camlinternalFormat.ml:426:2>>*/ bprint_iconv_flag
           /*<<camlinternalFormat.ml:426:2>>*/ (buf, iconv);
          /*<<camlinternalFormat.ml:427:2>>*/  /*<<camlinternalFormat.ml:427:2>>*/ bprint_padding
           /*<<camlinternalFormat.ml:427:2>>*/ (buf, pad$1);
          /*<<camlinternalFormat.ml:428:2>>*/  /*<<camlinternalFormat.ml:428:2>>*/ bprint_precision
           /*<<camlinternalFormat.ml:428:2>>*/ (buf, prec);
          /*<<camlinternalFormat.ml:429:22>>*/  /*<<camlinternalFormat.ml:429:22>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:429:22>>*/ (buf,
            /*<<camlinternalFormat.ml:429:22>>*/ char_of_iconv
             /*<<camlinternalFormat.ml:429:22>>*/ (iconv));
         fmt$0 = rest$3;
         ign_flag$0 = 0;
         break;
        case 5:
         var
          rest$4 = fmt$0[4],
          prec$0 = fmt$0[3],
          pad$2 = fmt$0[2],
          iconv$0 = fmt$0[1];
          /*<<camlinternalFormat.ml:549:6>>*/  /*<<camlinternalFormat.ml:549:6>>*/ bprint_altint_fmt
           /*<<camlinternalFormat.ml:549:6>>*/ (buf,
           ign_flag$0,
           iconv$0,
           pad$2,
           prec$0,
           108);
         fmt$0 = rest$4;
         ign_flag$0 = 0;
         break;
        case 6:
         var
          rest$5 = fmt$0[4],
          prec$1 = fmt$0[3],
          pad$3 = fmt$0[2],
          iconv$1 = fmt$0[1];
          /*<<camlinternalFormat.ml:552:6>>*/  /*<<camlinternalFormat.ml:552:6>>*/ bprint_altint_fmt
           /*<<camlinternalFormat.ml:552:6>>*/ (buf,
           ign_flag$0,
           iconv$1,
           pad$3,
           prec$1,
           110);
         fmt$0 = rest$5;
         ign_flag$0 = 0;
         break;
        case 7:
         var
          rest$6 = fmt$0[4],
          prec$2 = fmt$0[3],
          pad$4 = fmt$0[2],
          iconv$2 = fmt$0[1];
          /*<<camlinternalFormat.ml:555:6>>*/  /*<<camlinternalFormat.ml:555:6>>*/ bprint_altint_fmt
           /*<<camlinternalFormat.ml:555:6>>*/ (buf,
           ign_flag$0,
           iconv$2,
           pad$4,
           prec$2,
           76);
         fmt$0 = rest$6;
         ign_flag$0 = 0;
         break;
        case 8:
         var
          rest$7 = fmt$0[4],
          prec$3 = fmt$0[3],
          pad$5 = fmt$0[2],
          fconv = fmt$0[1];
          /*<<camlinternalFormat.ml:456:2>>*/  /*<<camlinternalFormat.ml:456:2>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:456:2>>*/ (buf, 37);
          /*<<camlinternalFormat.ml:457:2>>*/  /*<<camlinternalFormat.ml:457:2>>*/ bprint_ignored_flag
           /*<<camlinternalFormat.ml:457:2>>*/ (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:458:2>>*/  /*<<camlinternalFormat.ml:458:2>>*/ bprint_fconv_flag
           /*<<camlinternalFormat.ml:458:2>>*/ (buf, fconv);
          /*<<camlinternalFormat.ml:459:2>>*/  /*<<camlinternalFormat.ml:459:2>>*/ bprint_padding
           /*<<camlinternalFormat.ml:459:2>>*/ (buf, pad$5);
          /*<<camlinternalFormat.ml:460:2>>*/  /*<<camlinternalFormat.ml:460:2>>*/ bprint_precision
           /*<<camlinternalFormat.ml:460:2>>*/ (buf, prec$3);
          /*<<camlinternalFormat.ml:461:22>>*/  /*<<camlinternalFormat.ml:461:22>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:461:22>>*/ (buf,
            /*<<camlinternalFormat.ml:461:22>>*/ char_of_fconv
             /*<<camlinternalFormat.ml:461:22>>*/ (0, fconv));
         fmt$0 = rest$7;
         ign_flag$0 = 0;
         break;
        case 9:
         var rest$8 = fmt$0[2], pad$6 = fmt$0[1];
          /*<<camlinternalFormat.ml:568:6>>*/  /*<<camlinternalFormat.ml:568:6>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:568:6>>*/ (buf, 37);
          /*<<camlinternalFormat.ml:568:31>>*/  /*<<camlinternalFormat.ml:568:31>>*/ bprint_ignored_flag
           /*<<camlinternalFormat.ml:568:31>>*/ (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:569:6>>*/  /*<<camlinternalFormat.ml:569:6>>*/ bprint_padding
           /*<<camlinternalFormat.ml:569:6>>*/ (buf, pad$6);
          /*<<camlinternalFormat.ml:569:30>>*/  /*<<camlinternalFormat.ml:569:30>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:569:30>>*/ (buf, 66);
         fmt$0 = rest$8;
         ign_flag$0 = 0;
         break;
        case 10:
         var rest$9 = fmt$0[1];
          /*<<camlinternalFormat.ml:587:6>>*/  /*<<camlinternalFormat.ml:587:6>>*/ buffer_add_string
           /*<<camlinternalFormat.ml:587:6>>*/ (buf, cst$14);
         fmt$0 = rest$9;
         break;
        case 11:
         var rest$10 = fmt$0[2], str = fmt$0[1];
          /*<<camlinternalFormat.ml:591:6>>*/  /*<<camlinternalFormat.ml:591:6>>*/ bprint_string_literal
           /*<<camlinternalFormat.ml:591:6>>*/ (buf, str);
         fmt$0 = rest$10;
         break;
        case 12:
         var rest$11 = fmt$0[2], chr = fmt$0[1];
          /*<<camlinternalFormat.ml:594:6>>*/  /*<<camlinternalFormat.ml:594:6>>*/ bprint_char_literal
           /*<<camlinternalFormat.ml:594:6>>*/ (buf, chr);
         fmt$0 = rest$11;
         break;
        case 13:
         var rest$12 = fmt$0[3], fmtty = fmt$0[2], pad_opt = fmt$0[1];
          /*<<camlinternalFormat.ml:598:6>>*/  /*<<camlinternalFormat.ml:598:6>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:598:6>>*/ (buf, 37);
          /*<<camlinternalFormat.ml:598:31>>*/  /*<<camlinternalFormat.ml:598:31>>*/ bprint_ignored_flag
           /*<<camlinternalFormat.ml:598:31>>*/ (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:599:6>>*/  /*<<camlinternalFormat.ml:599:6>>*/ bprint_pad_opt
           /*<<camlinternalFormat.ml:599:6>>*/ (buf, pad_opt);
          /*<<camlinternalFormat.ml:599:34>>*/  /*<<camlinternalFormat.ml:599:34>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:599:34>>*/ (buf, 123);
          /*<<camlinternalFormat.ml:600:6>>*/  /*<<camlinternalFormat.ml:600:6>>*/ bprint_fmtty
           /*<<camlinternalFormat.ml:600:6>>*/ (buf, fmtty);
          /*<<camlinternalFormat.ml:600:30>>*/  /*<<camlinternalFormat.ml:600:30>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:600:30>>*/ (buf, 37);
          /*<<camlinternalFormat.ml:600:55>>*/  /*<<camlinternalFormat.ml:600:55>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:600:55>>*/ (buf, 125);
         fmt$0 = rest$12;
         ign_flag$0 = 0;
         break;
        case 14:
         var rest$13 = fmt$0[3], fmtty$0 = fmt$0[2], pad_opt$0 = fmt$0[1];
          /*<<camlinternalFormat.ml:603:6>>*/  /*<<camlinternalFormat.ml:603:6>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:603:6>>*/ (buf, 37);
          /*<<camlinternalFormat.ml:603:31>>*/  /*<<camlinternalFormat.ml:603:31>>*/ bprint_ignored_flag
           /*<<camlinternalFormat.ml:603:31>>*/ (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:604:6>>*/  /*<<camlinternalFormat.ml:604:6>>*/ bprint_pad_opt
           /*<<camlinternalFormat.ml:604:6>>*/ (buf, pad_opt$0);
          /*<<camlinternalFormat.ml:604:34>>*/  /*<<camlinternalFormat.ml:604:34>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:604:34>>*/ (buf, 40);
          /*<<camlinternalFormat.ml:605:6>>*/  /*<<camlinternalFormat.ml:605:6>>*/ bprint_fmtty
           /*<<camlinternalFormat.ml:605:6>>*/ (buf, fmtty$0);
          /*<<camlinternalFormat.ml:605:30>>*/  /*<<camlinternalFormat.ml:605:30>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:605:30>>*/ (buf, 37);
          /*<<camlinternalFormat.ml:605:55>>*/  /*<<camlinternalFormat.ml:605:55>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:605:55>>*/ (buf, 41);
         fmt$0 = rest$13;
         ign_flag$0 = 0;
         break;
        case 15:
         var rest$14 = fmt$0[1];
          /*<<camlinternalFormat.ml:572:6>>*/  /*<<camlinternalFormat.ml:572:6>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:572:6>>*/ (buf, 37);
          /*<<camlinternalFormat.ml:572:31>>*/  /*<<camlinternalFormat.ml:572:31>>*/ bprint_ignored_flag
           /*<<camlinternalFormat.ml:572:31>>*/ (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:573:6>>*/  /*<<camlinternalFormat.ml:573:6>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:573:6>>*/ (buf, 97);
         fmt$0 = rest$14;
         ign_flag$0 = 0;
         break;
        case 16:
         var rest$15 = fmt$0[1];
          /*<<camlinternalFormat.ml:575:6>>*/  /*<<camlinternalFormat.ml:575:6>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:575:6>>*/ (buf, 37);
          /*<<camlinternalFormat.ml:575:31>>*/  /*<<camlinternalFormat.ml:575:31>>*/ bprint_ignored_flag
           /*<<camlinternalFormat.ml:575:31>>*/ (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:576:6>>*/  /*<<camlinternalFormat.ml:576:6>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:576:6>>*/ (buf, 116);
         fmt$0 = rest$15;
         ign_flag$0 = 0;
         break;
        case 17:
         var rest$16 = fmt$0[2], fmting_lit = fmt$0[1];
          /*<<camlinternalFormat.ml:625:6>>*/  /*<<camlinternalFormat.ml:625:6>>*/ bprint_string_literal
           /*<<camlinternalFormat.ml:625:6>>*/ (buf,
            /*<<camlinternalFormat.ml:625:32>>*/ string_of_formatting_lit
             /*<<camlinternalFormat.ml:625:32>>*/ (fmting_lit));
         fmt$0 = rest$16;
         break;
        case 18:
         var rest$17 = fmt$0[2], fmting_gen = fmt$0[1];
          /*<<camlinternalFormat.ml:628:6>>*/ if(0 === fmting_gen[0]){
          var str$0 = fmting_gen[1][2];
           /*<<camlinternalFormat.ml:630:8>>*/  /*<<camlinternalFormat.ml:630:8>>*/ buffer_add_string
            /*<<camlinternalFormat.ml:630:8>>*/ (buf, cst$15);
           /*<<camlinternalFormat.ml:630:36>>*/  /*<<camlinternalFormat.ml:630:36>>*/ buffer_add_string
            /*<<camlinternalFormat.ml:630:36>>*/ (buf, str$0);
         }
         else{
          var str$1 = fmting_gen[1][2];
           /*<<camlinternalFormat.ml:632:8>>*/  /*<<camlinternalFormat.ml:632:8>>*/ buffer_add_string
            /*<<camlinternalFormat.ml:632:8>>*/ (buf, cst$16);
           /*<<camlinternalFormat.ml:632:36>>*/  /*<<camlinternalFormat.ml:632:36>>*/ buffer_add_string
            /*<<camlinternalFormat.ml:632:36>>*/ (buf, str$1);
         }
         fmt$0 = rest$17;
         break;
        case 19:
         var rest$18 = fmt$0[1];
          /*<<camlinternalFormat.ml:584:6>>*/  /*<<camlinternalFormat.ml:584:6>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:584:6>>*/ (buf, 37);
          /*<<camlinternalFormat.ml:584:31>>*/  /*<<camlinternalFormat.ml:584:31>>*/ bprint_ignored_flag
           /*<<camlinternalFormat.ml:584:31>>*/ (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:585:6>>*/  /*<<camlinternalFormat.ml:585:6>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:585:6>>*/ (buf, 114);
         fmt$0 = rest$18;
         ign_flag$0 = 0;
         break;
        case 20:
         var rest$19 = fmt$0[3], char_set = fmt$0[2], width_opt = fmt$0[1];
          /*<<camlinternalFormat.ml:609:6>>*/  /*<<camlinternalFormat.ml:609:6>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:609:6>>*/ (buf, 37);
          /*<<camlinternalFormat.ml:609:31>>*/  /*<<camlinternalFormat.ml:609:31>>*/ bprint_ignored_flag
           /*<<camlinternalFormat.ml:609:31>>*/ (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:610:6>>*/  /*<<camlinternalFormat.ml:610:6>>*/ bprint_pad_opt
           /*<<camlinternalFormat.ml:610:6>>*/ (buf, width_opt);
         var
          print_char =
            function(buf, i){
             var
              c =
                 /*<<camlinternalFormat.ml:358:31>>*/  /*<<camlinternalFormat.ml:358:31>>*/ caml_call1
                  /*<<camlinternalFormat.ml:358:31>>*/ (Stdlib[29], i);
             return 37 === c
                     ? ( /*<<camlinternalFormat.ml:359:13>>*/ buffer_add_char
                         /*<<camlinternalFormat.ml:359:13>>*/ (buf, 37),
                        /*<<camlinternalFormat.ml:359:13>>*/ buffer_add_char
                         /*<<camlinternalFormat.ml:359:13>>*/ (buf, 37))
                     : 64
                       === c
                       ? ( /*<<camlinternalFormat.ml:360:13>>*/ buffer_add_char
                           /*<<camlinternalFormat.ml:360:13>>*/ (buf, 37),
                          /*<<camlinternalFormat.ml:360:13>>*/ buffer_add_char
                           /*<<camlinternalFormat.ml:360:13>>*/ (buf, 64))
                       :  /*<<camlinternalFormat.ml:361:13>>*/ buffer_add_char
                          /*<<camlinternalFormat.ml:361:13>>*/ (buf, c) /*<<camlinternalFormat.ml:361:35>>*/ ;
             /*<<camlinternalFormat.ml:361:35>>*/ };
          /*<<camlinternalFormat.ml:363:2>>*/  /*<<camlinternalFormat.ml:363:2>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:363:2>>*/ (buf, 91);
         var
          set =
             /*<<camlinternalFormat.ml:365:7>>*/  /*<<camlinternalFormat.ml:365:7>>*/ is_in_char_set
               /*<<camlinternalFormat.ml:365:7>>*/ (char_set, 0)
             ? ( /*<<camlinternalFormat.ml:366:11>>*/ buffer_add_char
                 /*<<camlinternalFormat.ml:366:11>>*/ (buf, 94),
                /*<<camlinternalFormat.ml:366:36>>*/ rev_char_set
                 /*<<camlinternalFormat.ml:366:36>>*/ (char_set))
             : char_set;
         let set$0 = set;
         var
          is_alone =
            function(c){
             var
              after =
                 /*<<camlinternalFormat.ml:316:50>>*/  /*<<camlinternalFormat.ml:316:50>>*/ caml_call1
                  /*<<camlinternalFormat.ml:316:50>>*/ (Stdlib_Char[1],
                  c + 1 | 0),
              before =
                 /*<<camlinternalFormat.ml:316:32>>*/  /*<<camlinternalFormat.ml:316:32>>*/ caml_call1
                  /*<<camlinternalFormat.ml:316:32>>*/ (Stdlib_Char[1],
                  c - 1 | 0),
              _cJ_ =
                 /*<<camlinternalFormat.ml:317:6>>*/  /*<<camlinternalFormat.ml:317:6>>*/ is_in_char_set
                  /*<<camlinternalFormat.ml:317:6>>*/ (set$0, c);
              /*<<camlinternalFormat.ml:317:6>>*/ if(_cJ_)
              var
               _cK_ =
                  /*<<camlinternalFormat.ml:318:14>>*/  /*<<camlinternalFormat.ml:318:14>>*/ is_in_char_set
                   /*<<camlinternalFormat.ml:318:14>>*/ (set$0, before),
               _cL_ =
                  /*<<camlinternalFormat.ml:318:14>>*/ _cK_
                  ?  /*<<camlinternalFormat.ml:318:43>>*/ is_in_char_set
                     /*<<camlinternalFormat.ml:318:43>>*/ (set$0, after)
                  : _cK_,
               _cM_ = 1 - _cL_;
             else
              var _cM_ = _cJ_;
              /*<<camlinternalFormat.ml:318:43>>*/ return _cM_ /*<<camlinternalFormat.ml:318:43>>*/ ;
             /*<<camlinternalFormat.ml:318:68>>*/ };
          /*<<camlinternalFormat.ml:319:7>>*/ if
          ( /*<<camlinternalFormat.ml:319:7>>*/ is_alone
             /*<<camlinternalFormat.ml:319:7>>*/ (93))
           /*<<camlinternalFormat.ml:319:25>>*/  /*<<camlinternalFormat.ml:319:25>>*/ buffer_add_char
            /*<<camlinternalFormat.ml:319:25>>*/ (buf, 93);
         a:
         b:
         {
          c:
          {
           d:
           {
            var i = 1;
             /*<<camlinternalFormat.ml:323:4>>*/ for(;;){
             if(i >= 256) break;
              /*<<camlinternalFormat.ml:324:9>>*/ if
              ( /*<<camlinternalFormat.ml:324:9>>*/ is_in_char_set
                 /*<<camlinternalFormat.ml:324:9>>*/ (set,
                  /*<<camlinternalFormat.ml:324:28>>*/ caml_call1
                   /*<<camlinternalFormat.ml:324:28>>*/ (Stdlib[29], i))){
              var
               switcher =
                  /*<<camlinternalFormat.ml:327:10>>*/  /*<<camlinternalFormat.ml:327:10>>*/ caml_call1
                   /*<<camlinternalFormat.ml:327:10>>*/ (Stdlib[29], i)
                 - 45
                 | 0;
              if(48 < switcher >>> 0){
               if(210 <= switcher) break d;
              }
              else if(46 < switcher - 1 >>> 0){
               var i$2 =  /*<<camlinternalFormat.ml:329:19>>*/ i + 1 | 0;
               i = i$2;
               continue;
              }
              var i$1 =  /*<<camlinternalFormat.ml:330:11>>*/ i + 1 | 0;
               /*<<camlinternalFormat.ml:332:7>>*/ if
               ( /*<<camlinternalFormat.ml:332:7>>*/ is_in_char_set
                  /*<<camlinternalFormat.ml:332:7>>*/ (set,
                   /*<<camlinternalFormat.ml:332:26>>*/ caml_call1
                    /*<<camlinternalFormat.ml:332:26>>*/ (Stdlib[29], i$1))){
               var
                switcher$0 =
                   /*<<camlinternalFormat.ml:333:12>>*/  /*<<camlinternalFormat.ml:333:12>>*/ caml_call1
                    /*<<camlinternalFormat.ml:333:12>>*/ (Stdlib[29], i$1)
                  - 45
                  | 0;
               if(48 < switcher$0 >>> 0){
                if(210 <= switcher$0) break c;
               }
               else if
                (46 < switcher$0 - 1 >>> 0
                 &&
                  !
                   /*<<camlinternalFormat.ml:337:27>>*/ is_in_char_set
                    /*<<camlinternalFormat.ml:337:27>>*/ (set,
                     /*<<camlinternalFormat.ml:337:47>>*/ caml_call1
                      /*<<camlinternalFormat.ml:337:47>>*/ (Stdlib[29],
                      i$1 + 1 | 0))){
                 /*<<camlinternalFormat.ml:338:8>>*/  /*<<camlinternalFormat.ml:338:8>>*/ print_char
                  /*<<camlinternalFormat.ml:338:8>>*/ (buf, i$1 - 1 | 0);
                var i$5 =  /*<<camlinternalFormat.ml:338:8>>*/ i$1 + 1 | 0;
                i = i$5;
                continue;
               }
                /*<<camlinternalFormat.ml:340:19>>*/ if
                ( /*<<camlinternalFormat.ml:340:19>>*/ is_in_char_set
                   /*<<camlinternalFormat.ml:340:19>>*/ (set,
                    /*<<camlinternalFormat.ml:340:39>>*/ caml_call1
                     /*<<camlinternalFormat.ml:340:39>>*/ (Stdlib[29],
                     i$1 + 1 | 0))){
                var
                 j =  /*<<camlinternalFormat.ml:345:8>>*/ i$1 + 2 | 0,
                 i$3 = i$1 - 1 | 0,
                 j$0 = j;
                 /*<<camlinternalFormat.ml:351:4>>*/ for(;;){
                 if(256 === j$0) break;
                  /*<<camlinternalFormat.ml:351:22>>*/ if
                  (!
                    /*<<camlinternalFormat.ml:351:22>>*/ is_in_char_set
                     /*<<camlinternalFormat.ml:351:22>>*/ (set,
                      /*<<camlinternalFormat.ml:351:42>>*/ caml_call1
                       /*<<camlinternalFormat.ml:351:42>>*/ (Stdlib[29], j$0)))
                  break;
                 var j$1 =  /*<<camlinternalFormat.ml:357:6>>*/ j$0 + 1 | 0;
                 j$0 = j$1;
                }
                 /*<<camlinternalFormat.ml:352:6>>*/  /*<<camlinternalFormat.ml:352:6>>*/ print_char
                  /*<<camlinternalFormat.ml:352:6>>*/ (buf, i$3);
                 /*<<camlinternalFormat.ml:353:6>>*/  /*<<camlinternalFormat.ml:353:6>>*/ print_char
                  /*<<camlinternalFormat.ml:353:6>>*/ (buf, 45);
                 /*<<camlinternalFormat.ml:354:6>>*/  /*<<camlinternalFormat.ml:354:6>>*/ print_char
                  /*<<camlinternalFormat.ml:354:6>>*/ (buf, j$0 - 1 | 0);
                if(j$0 >= 256) break b;
                var i$7 =  /*<<camlinternalFormat.ml:355:22>>*/ j$0 + 1 | 0;
                i = i$7;
               }
               else{
                 /*<<camlinternalFormat.ml:341:8>>*/  /*<<camlinternalFormat.ml:341:8>>*/ print_char
                  /*<<camlinternalFormat.ml:341:8>>*/ (buf, i$1 - 1 | 0);
                 /*<<camlinternalFormat.ml:342:8>>*/  /*<<camlinternalFormat.ml:342:8>>*/ print_char
                  /*<<camlinternalFormat.ml:342:8>>*/ (buf, i$1);
                var i$4 =  /*<<camlinternalFormat.ml:342:8>>*/ i$1 + 2 | 0;
                i = i$4;
               }
              }
              else{
                /*<<camlinternalFormat.ml:347:6>>*/  /*<<camlinternalFormat.ml:347:6>>*/ print_char
                 /*<<camlinternalFormat.ml:347:6>>*/ (buf, i$1 - 1 | 0);
               var i$6 =  /*<<camlinternalFormat.ml:347:6>>*/ i$1 + 1 | 0;
               i = i$6;
              }
             }
             else{
              var i$0 =  /*<<camlinternalFormat.ml:325:11>>*/ i + 1 | 0;
              i = i$0;
             }
            }
            break a;
           }
            /*<<camlinternalFormat.ml:328:16>>*/  /*<<camlinternalFormat.ml:328:16>>*/ print_char
             /*<<camlinternalFormat.ml:328:16>>*/ (buf, 255);
           break a;
          }
           /*<<camlinternalFormat.ml:335:8>>*/  /*<<camlinternalFormat.ml:335:8>>*/ print_char
            /*<<camlinternalFormat.ml:335:8>>*/ (buf, 254);
           /*<<camlinternalFormat.ml:335:8>>*/  /*<<camlinternalFormat.ml:335:8>>*/ print_char
            /*<<camlinternalFormat.ml:335:8>>*/ (buf, 255);
          break a;
         }
          /*<<camlinternalFormat.ml:321:7>>*/ if
          ( /*<<camlinternalFormat.ml:321:7>>*/ is_alone
             /*<<camlinternalFormat.ml:321:7>>*/ (45))
           /*<<camlinternalFormat.ml:321:25>>*/  /*<<camlinternalFormat.ml:321:25>>*/ buffer_add_char
            /*<<camlinternalFormat.ml:321:25>>*/ (buf, 45);
          /*<<camlinternalFormat.ml:364:2>>*/  /*<<camlinternalFormat.ml:364:2>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:364:2>>*/ (buf, 93);
         fmt$0 = rest$19;
         ign_flag$0 = 0;
         break;
        case 21:
         var rest$20 = fmt$0[2], counter = fmt$0[1];
          /*<<camlinternalFormat.ml:613:6>>*/  /*<<camlinternalFormat.ml:613:6>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:613:6>>*/ (buf, 37);
          /*<<camlinternalFormat.ml:613:31>>*/  /*<<camlinternalFormat.ml:613:31>>*/ bprint_ignored_flag
           /*<<camlinternalFormat.ml:613:31>>*/ (buf, ign_flag$0);
         switch(counter){
           case 0:
            var _cF_ = 108; break;
           case 1:
            var _cF_ = 110; break;
           default: var _cF_ = 78;
         }
          /*<<camlinternalFormat.ml:614:6>>*/  /*<<camlinternalFormat.ml:614:6>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:614:6>>*/ (buf, _cF_);
         fmt$0 = rest$20;
         ign_flag$0 = 0;
         break;
        case 22:
         var rest$21 = fmt$0[1];
          /*<<camlinternalFormat.ml:617:6>>*/  /*<<camlinternalFormat.ml:617:6>>*/ buffer_add_char
           /*<<camlinternalFormat.ml:617:6>>*/ (buf, 37);
          /*<<camlinternalFormat.ml:617:31>>*/  /*<<camlinternalFormat.ml:617:31>>*/ bprint_ignored_flag
           /*<<camlinternalFormat.ml:617:31>>*/ (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:618:6>>*/  /*<<camlinternalFormat.ml:618:6>>*/ bprint_string_literal
           /*<<camlinternalFormat.ml:618:6>>*/ (buf, cst_0c);
         fmt$0 = rest$21;
         ign_flag$0 = 0;
         break;
        case 23:
         var
          rest$22 = fmt$0[2],
          ign = fmt$0[1],
          fmt$1 =
             /*<<camlinternalFormat.ml:621:34>>*/ param_format_of_ignored_format
               /*<<camlinternalFormat.ml:621:34>>*/ (ign, rest$22)
             [1];
         fmt$0 = fmt$1;
         ign_flag$0 = 1;
         break;
        default:
         var
          rest$23 = fmt$0[3],
          arity = fmt$0[1],
          _cH_ =
             /*<<camlinternalFormat.ml:578:20>>*/  /*<<camlinternalFormat.ml:578:20>>*/ int_of_custom_arity
              /*<<camlinternalFormat.ml:578:20>>*/ (arity),
          _cG_ = 1;
         if(_cH_ >= 1){
          var i$8 = _cG_;
          for(;;){
            /*<<camlinternalFormat.ml:579:8>>*/  /*<<camlinternalFormat.ml:579:8>>*/ buffer_add_char
             /*<<camlinternalFormat.ml:579:8>>*/ (buf, 37);
            /*<<camlinternalFormat.ml:579:33>>*/  /*<<camlinternalFormat.ml:579:33>>*/ bprint_ignored_flag
             /*<<camlinternalFormat.ml:579:33>>*/ (buf, ign_flag$0);
            /*<<camlinternalFormat.ml:580:8>>*/  /*<<camlinternalFormat.ml:580:8>>*/ buffer_add_char
             /*<<camlinternalFormat.ml:580:8>>*/ (buf, 63);
           var _cI_ =  /*<<camlinternalFormat.ml:580:8>>*/ i$8 + 1 | 0;
           if(_cH_ === i$8) break;
           i$8 = _cI_;
          }
         }
         fmt$0 = rest$23;
         ign_flag$0 = 0;
      }
     }
     /*<<camlinternalFormat.ml:636:25>>*/ }
     /*<<camlinternalFormat.ml:638:5>>*/  /*<<camlinternalFormat.ml:638:5>>*/ fmtiter
      /*<<camlinternalFormat.ml:638:5>>*/ (fmt, 0);
     /*<<camlinternalFormat.ml:645:2>>*/ return  /*<<camlinternalFormat.ml:645:2>>*/ buffer_contents
             /*<<camlinternalFormat.ml:645:2>>*/ (buf) /*<<camlinternalFormat.ml:646:21>>*/ ;
    /*<<camlinternalFormat.ml:646:21>>*/ }
   function symm(param){
     /*<<camlinternalFormat.ml:657:8>>*/ if(typeof param === "number")
      /*<<camlinternalFormat.ml:680:20>>*/ return 0 /*<<camlinternalFormat.ml:680:20>>*/ ;
    switch(param[0]){
      case 0:
       var rest = param[1];
        /*<<camlinternalFormat.ml:663:20>>*/ return [0,
                /*<<camlinternalFormat.ml:663:28>>*/ symm
                 /*<<camlinternalFormat.ml:663:28>>*/ (rest)] /*<<camlinternalFormat.ml:663:20>>*/ ;
      case 1:
       var rest$0 = param[1];
        /*<<camlinternalFormat.ml:670:22>>*/ return [1,
                /*<<camlinternalFormat.ml:670:32>>*/ symm
                 /*<<camlinternalFormat.ml:670:32>>*/ (rest$0)] /*<<camlinternalFormat.ml:670:22>>*/ ;
      case 2:
       var rest$1 = param[1];
        /*<<camlinternalFormat.ml:664:19>>*/ return [2,
                /*<<camlinternalFormat.ml:664:26>>*/ symm
                 /*<<camlinternalFormat.ml:664:26>>*/ (rest$1)] /*<<camlinternalFormat.ml:664:19>>*/ ;
      case 3:
       var rest$2 = param[1];
        /*<<camlinternalFormat.ml:665:21>>*/ return [3,
                /*<<camlinternalFormat.ml:665:30>>*/ symm
                 /*<<camlinternalFormat.ml:665:30>>*/ (rest$2)] /*<<camlinternalFormat.ml:665:21>>*/ ;
      case 4:
       var rest$3 = param[1];
        /*<<camlinternalFormat.ml:667:25>>*/ return [4,
                /*<<camlinternalFormat.ml:667:38>>*/ symm
                 /*<<camlinternalFormat.ml:667:38>>*/ (rest$3)] /*<<camlinternalFormat.ml:667:25>>*/ ;
      case 5:
       var rest$4 = param[1];
        /*<<camlinternalFormat.ml:666:21>>*/ return [5,
                /*<<camlinternalFormat.ml:666:30>>*/ symm
                 /*<<camlinternalFormat.ml:666:30>>*/ (rest$4)] /*<<camlinternalFormat.ml:666:21>>*/ ;
      case 6:
       var rest$5 = param[1];
        /*<<camlinternalFormat.ml:668:21>>*/ return [6,
                /*<<camlinternalFormat.ml:668:30>>*/ symm
                 /*<<camlinternalFormat.ml:668:30>>*/ (rest$5)] /*<<camlinternalFormat.ml:668:21>>*/ ;
      case 7:
       var rest$6 = param[1];
        /*<<camlinternalFormat.ml:669:20>>*/ return [7,
                /*<<camlinternalFormat.ml:669:28>>*/ symm
                 /*<<camlinternalFormat.ml:669:28>>*/ (rest$6)] /*<<camlinternalFormat.ml:669:20>>*/ ;
      case 8:
       var rest$7 = param[2], ty = param[1];
        /*<<camlinternalFormat.ml:677:4>>*/ return [8,
               ty,
                /*<<camlinternalFormat.ml:677:23>>*/ symm
                 /*<<camlinternalFormat.ml:677:23>>*/ (rest$7)] /*<<camlinternalFormat.ml:677:4>>*/ ;
      case 9:
       var rest$8 = param[3], ty2 = param[2], ty1 = param[1];
        /*<<camlinternalFormat.ml:679:4>>*/ return [9,
               ty2,
               ty1,
                /*<<camlinternalFormat.ml:679:31>>*/ symm
                 /*<<camlinternalFormat.ml:679:31>>*/ (rest$8)] /*<<camlinternalFormat.ml:679:4>>*/ ;
      case 10:
       var rest$9 = param[1];
        /*<<camlinternalFormat.ml:672:21>>*/ return [10,
                /*<<camlinternalFormat.ml:672:30>>*/ symm
                 /*<<camlinternalFormat.ml:672:30>>*/ (rest$9)] /*<<camlinternalFormat.ml:672:21>>*/ ;
      case 11:
       var rest$10 = param[1];
        /*<<camlinternalFormat.ml:671:21>>*/ return [11,
                /*<<camlinternalFormat.ml:671:30>>*/ symm
                 /*<<camlinternalFormat.ml:671:30>>*/ (rest$10)] /*<<camlinternalFormat.ml:671:21>>*/ ;
      case 12:
       var rest$11 = param[1];
        /*<<camlinternalFormat.ml:673:19>>*/ return [12,
                /*<<camlinternalFormat.ml:673:26>>*/ symm
                 /*<<camlinternalFormat.ml:673:26>>*/ (rest$11)] /*<<camlinternalFormat.ml:673:19>>*/ ;
      case 13:
       var rest$12 = param[1];
        /*<<camlinternalFormat.ml:674:22>>*/ return [13,
                /*<<camlinternalFormat.ml:674:32>>*/ symm
                 /*<<camlinternalFormat.ml:674:32>>*/ (rest$12)] /*<<camlinternalFormat.ml:674:22>>*/ ;
      default:
       var rest$13 = param[1];
        /*<<camlinternalFormat.ml:675:30>>*/ return [14,
                /*<<camlinternalFormat.ml:675:48>>*/ symm
                 /*<<camlinternalFormat.ml:675:48>>*/ (rest$13)] /*<<camlinternalFormat.ml:675:30>>*/ ;
    }
    /*<<camlinternalFormat.ml:680:32>>*/ }
   function fmtty_rel_det(param){
     /*<<camlinternalFormat.ml:682:8>>*/ if(typeof param === "number")
      /*<<camlinternalFormat.ml:691:4>>*/ return [0,
             ,
             function(param){ /*<<camlinternalFormat.ml:692:21>>*/ },
             ,
             function(param){ /*<<camlinternalFormat.ml:694:21>>*/ }] /*<<camlinternalFormat.ml:691:4>>*/ ;
    switch(param[0]){
      case 0:
       var
        rest = param[1],
        match =
           /*<<camlinternalFormat.ml:696:25>>*/  /*<<camlinternalFormat.ml:696:25>>*/ fmtty_rel_det
            /*<<camlinternalFormat.ml:696:25>>*/ (rest),
        de = match[4],
        af = match[2];
        /*<<camlinternalFormat.ml:697:4>>*/ return [0,
               ,
               function(param){
                 /*<<camlinternalFormat.ml:698:17>>*/  /*<<camlinternalFormat.ml:698:28>>*/ af
                  /*<<camlinternalFormat.ml:698:28>>*/ (0);
                /*<<camlinternalFormat.ml:698:43>>*/ },
               ,
               de] /*<<camlinternalFormat.ml:697:4>>*/ ;
      case 1:
       var
        rest$0 = param[1],
        match$0 =
           /*<<camlinternalFormat.ml:701:25>>*/  /*<<camlinternalFormat.ml:701:25>>*/ fmtty_rel_det
            /*<<camlinternalFormat.ml:701:25>>*/ (rest$0),
        de$0 = match$0[4],
        af$0 = match$0[2];
        /*<<camlinternalFormat.ml:702:4>>*/ return [0,
               ,
               function(param){
                 /*<<camlinternalFormat.ml:703:17>>*/  /*<<camlinternalFormat.ml:703:28>>*/ af$0
                  /*<<camlinternalFormat.ml:703:28>>*/ (0);
                /*<<camlinternalFormat.ml:703:43>>*/ },
               ,
               de$0] /*<<camlinternalFormat.ml:702:4>>*/ ;
      case 2:
       var
        rest$1 = param[1],
        match$1 =
           /*<<camlinternalFormat.ml:706:25>>*/  /*<<camlinternalFormat.ml:706:25>>*/ fmtty_rel_det
            /*<<camlinternalFormat.ml:706:25>>*/ (rest$1),
        de$1 = match$1[4],
        af$1 = match$1[2];
        /*<<camlinternalFormat.ml:707:4>>*/ return [0,
               ,
               function(param){
                 /*<<camlinternalFormat.ml:708:17>>*/  /*<<camlinternalFormat.ml:708:28>>*/ af$1
                  /*<<camlinternalFormat.ml:708:28>>*/ (0);
                /*<<camlinternalFormat.ml:708:43>>*/ },
               ,
               de$1] /*<<camlinternalFormat.ml:707:4>>*/ ;
      case 3:
       var
        rest$2 = param[1],
        match$2 =
           /*<<camlinternalFormat.ml:711:25>>*/  /*<<camlinternalFormat.ml:711:25>>*/ fmtty_rel_det
            /*<<camlinternalFormat.ml:711:25>>*/ (rest$2),
        de$2 = match$2[4],
        af$2 = match$2[2];
        /*<<camlinternalFormat.ml:712:4>>*/ return [0,
               ,
               function(param){
                 /*<<camlinternalFormat.ml:713:17>>*/  /*<<camlinternalFormat.ml:713:28>>*/ af$2
                  /*<<camlinternalFormat.ml:713:28>>*/ (0);
                /*<<camlinternalFormat.ml:713:43>>*/ },
               ,
               de$2] /*<<camlinternalFormat.ml:712:4>>*/ ;
      case 4:
       var
        rest$3 = param[1],
        match$3 =
           /*<<camlinternalFormat.ml:721:25>>*/  /*<<camlinternalFormat.ml:721:25>>*/ fmtty_rel_det
            /*<<camlinternalFormat.ml:721:25>>*/ (rest$3),
        de$3 = match$3[4],
        af$3 = match$3[2];
        /*<<camlinternalFormat.ml:722:4>>*/ return [0,
               ,
               function(param){
                 /*<<camlinternalFormat.ml:723:17>>*/  /*<<camlinternalFormat.ml:723:28>>*/ af$3
                  /*<<camlinternalFormat.ml:723:28>>*/ (0);
                /*<<camlinternalFormat.ml:723:43>>*/ },
               ,
               de$3] /*<<camlinternalFormat.ml:722:4>>*/ ;
      case 5:
       var
        rest$4 = param[1],
        match$4 =
           /*<<camlinternalFormat.ml:716:25>>*/  /*<<camlinternalFormat.ml:716:25>>*/ fmtty_rel_det
            /*<<camlinternalFormat.ml:716:25>>*/ (rest$4),
        de$4 = match$4[4],
        af$4 = match$4[2];
        /*<<camlinternalFormat.ml:717:4>>*/ return [0,
               ,
               function(param){
                 /*<<camlinternalFormat.ml:718:17>>*/  /*<<camlinternalFormat.ml:718:28>>*/ af$4
                  /*<<camlinternalFormat.ml:718:28>>*/ (0);
                /*<<camlinternalFormat.ml:718:43>>*/ },
               ,
               de$4] /*<<camlinternalFormat.ml:717:4>>*/ ;
      case 6:
       var
        rest$5 = param[1],
        match$5 =
           /*<<camlinternalFormat.ml:726:25>>*/  /*<<camlinternalFormat.ml:726:25>>*/ fmtty_rel_det
            /*<<camlinternalFormat.ml:726:25>>*/ (rest$5),
        de$5 = match$5[4],
        af$5 = match$5[2];
        /*<<camlinternalFormat.ml:727:4>>*/ return [0,
               ,
               function(param){
                 /*<<camlinternalFormat.ml:728:17>>*/  /*<<camlinternalFormat.ml:728:28>>*/ af$5
                  /*<<camlinternalFormat.ml:728:28>>*/ (0);
                /*<<camlinternalFormat.ml:728:43>>*/ },
               ,
               de$5] /*<<camlinternalFormat.ml:727:4>>*/ ;
      case 7:
       var
        rest$6 = param[1],
        match$6 =
           /*<<camlinternalFormat.ml:731:25>>*/  /*<<camlinternalFormat.ml:731:25>>*/ fmtty_rel_det
            /*<<camlinternalFormat.ml:731:25>>*/ (rest$6),
        de$6 = match$6[4],
        af$6 = match$6[2];
        /*<<camlinternalFormat.ml:732:4>>*/ return [0,
               ,
               function(param){
                 /*<<camlinternalFormat.ml:733:17>>*/  /*<<camlinternalFormat.ml:733:28>>*/ af$6
                  /*<<camlinternalFormat.ml:733:28>>*/ (0);
                /*<<camlinternalFormat.ml:733:43>>*/ },
               ,
               de$6] /*<<camlinternalFormat.ml:732:4>>*/ ;
      case 8:
       var
        rest$7 = param[2],
        match$7 =
           /*<<camlinternalFormat.ml:764:25>>*/  /*<<camlinternalFormat.ml:764:25>>*/ fmtty_rel_det
            /*<<camlinternalFormat.ml:764:25>>*/ (rest$7),
        de$7 = match$7[4],
        af$7 = match$7[2];
        /*<<camlinternalFormat.ml:765:4>>*/ return [0,
               ,
               function(param){
                 /*<<camlinternalFormat.ml:766:17>>*/  /*<<camlinternalFormat.ml:766:28>>*/ af$7
                  /*<<camlinternalFormat.ml:766:28>>*/ (0);
                /*<<camlinternalFormat.ml:766:43>>*/ },
               ,
               de$7] /*<<camlinternalFormat.ml:765:4>>*/ ;
      case 9:
       var
        rest$8 = param[3],
        ty2 = param[2],
        ty1 = param[1],
        match$8 =
           /*<<camlinternalFormat.ml:769:25>>*/  /*<<camlinternalFormat.ml:769:25>>*/ fmtty_rel_det
            /*<<camlinternalFormat.ml:769:25>>*/ (rest$8),
        de$8 = match$8[4],
        af$8 = match$8[2],
        ty =
           /*<<camlinternalFormat.ml:770:13>>*/  /*<<camlinternalFormat.ml:770:13>>*/ trans
            /*<<camlinternalFormat.ml:770:13>>*/ ( /*<<camlinternalFormat.ml:770:19>>*/ symm
              /*<<camlinternalFormat.ml:770:19>>*/ (ty1),
            ty2),
        match$9 =
           /*<<camlinternalFormat.ml:771:25>>*/  /*<<camlinternalFormat.ml:771:25>>*/ fmtty_rel_det
            /*<<camlinternalFormat.ml:771:25>>*/ (ty),
        jd = match$9[4],
        ga = match$9[2];
        /*<<camlinternalFormat.ml:772:4>>*/ return [0,
               ,
               function(param){
                 /*<<camlinternalFormat.ml:773:17>>*/  /*<<camlinternalFormat.ml:773:28>>*/ ga
                  /*<<camlinternalFormat.ml:773:28>>*/ (0);
                 /*<<camlinternalFormat.ml:773:50>>*/  /*<<camlinternalFormat.ml:773:50>>*/ af$8
                  /*<<camlinternalFormat.ml:773:50>>*/ (0);
                /*<<camlinternalFormat.ml:773:65>>*/ },
               ,
               function(param){
                 /*<<camlinternalFormat.ml:775:17>>*/  /*<<camlinternalFormat.ml:775:28>>*/ jd
                  /*<<camlinternalFormat.ml:775:28>>*/ (0);
                 /*<<camlinternalFormat.ml:775:50>>*/  /*<<camlinternalFormat.ml:775:50>>*/ de$8
                  /*<<camlinternalFormat.ml:775:50>>*/ (0);
                /*<<camlinternalFormat.ml:775:65>>*/ }] /*<<camlinternalFormat.ml:772:4>>*/ ;
      case 10:
       var
        rest$9 = param[1],
        match$10 =
           /*<<camlinternalFormat.ml:742:25>>*/  /*<<camlinternalFormat.ml:742:25>>*/ fmtty_rel_det
            /*<<camlinternalFormat.ml:742:25>>*/ (rest$9),
        de$9 = match$10[4],
        af$9 = match$10[2];
        /*<<camlinternalFormat.ml:743:4>>*/ return [0,
               ,
               function(param){
                 /*<<camlinternalFormat.ml:744:17>>*/  /*<<camlinternalFormat.ml:744:28>>*/ af$9
                  /*<<camlinternalFormat.ml:744:28>>*/ (0);
                /*<<camlinternalFormat.ml:744:43>>*/ },
               ,
               de$9] /*<<camlinternalFormat.ml:743:4>>*/ ;
      case 11:
       var
        rest$10 = param[1],
        match$11 =
           /*<<camlinternalFormat.ml:737:25>>*/  /*<<camlinternalFormat.ml:737:25>>*/ fmtty_rel_det
            /*<<camlinternalFormat.ml:737:25>>*/ (rest$10),
        de$10 = match$11[4],
        af$10 = match$11[2];
        /*<<camlinternalFormat.ml:738:4>>*/ return [0,
               ,
               function(param){
                 /*<<camlinternalFormat.ml:739:17>>*/  /*<<camlinternalFormat.ml:739:28>>*/ af$10
                  /*<<camlinternalFormat.ml:739:28>>*/ (0);
                /*<<camlinternalFormat.ml:739:43>>*/ },
               ,
               de$10] /*<<camlinternalFormat.ml:738:4>>*/ ;
      case 12:
       var
        rest$11 = param[1],
        match$12 =
           /*<<camlinternalFormat.ml:747:25>>*/  /*<<camlinternalFormat.ml:747:25>>*/ fmtty_rel_det
            /*<<camlinternalFormat.ml:747:25>>*/ (rest$11),
        de$11 = match$12[4],
        af$11 = match$12[2];
        /*<<camlinternalFormat.ml:748:4>>*/ return [0,
               ,
               function(param){
                 /*<<camlinternalFormat.ml:749:17>>*/  /*<<camlinternalFormat.ml:749:28>>*/ af$11
                  /*<<camlinternalFormat.ml:749:28>>*/ (0);
                /*<<camlinternalFormat.ml:749:43>>*/ },
               ,
               de$11] /*<<camlinternalFormat.ml:748:4>>*/ ;
      case 13:
       var
        rest$12 = param[1],
        match$13 =
           /*<<camlinternalFormat.ml:752:25>>*/  /*<<camlinternalFormat.ml:752:25>>*/ fmtty_rel_det
            /*<<camlinternalFormat.ml:752:25>>*/ (rest$12),
        de$12 = match$13[4],
        af$12 = match$13[2];
        /*<<camlinternalFormat.ml:753:4>>*/ return [0,
               ,
               function(param){
                 /*<<camlinternalFormat.ml:754:17>>*/  /*<<camlinternalFormat.ml:754:28>>*/ af$12
                  /*<<camlinternalFormat.ml:754:28>>*/ (0);
                /*<<camlinternalFormat.ml:754:43>>*/ },
               ,
               function(param){
                 /*<<camlinternalFormat.ml:756:17>>*/  /*<<camlinternalFormat.ml:756:28>>*/ de$12
                  /*<<camlinternalFormat.ml:756:28>>*/ (0);
                /*<<camlinternalFormat.ml:756:43>>*/ }] /*<<camlinternalFormat.ml:753:4>>*/ ;
      default:
       var
        rest$13 = param[1],
        match$14 =
           /*<<camlinternalFormat.ml:758:25>>*/  /*<<camlinternalFormat.ml:758:25>>*/ fmtty_rel_det
            /*<<camlinternalFormat.ml:758:25>>*/ (rest$13),
        de$13 = match$14[4],
        af$13 = match$14[2];
        /*<<camlinternalFormat.ml:759:4>>*/ return [0,
               ,
               function(param){
                 /*<<camlinternalFormat.ml:760:17>>*/  /*<<camlinternalFormat.ml:760:28>>*/ af$13
                  /*<<camlinternalFormat.ml:760:28>>*/ (0);
                /*<<camlinternalFormat.ml:760:43>>*/ },
               ,
               function(param){
                 /*<<camlinternalFormat.ml:762:17>>*/  /*<<camlinternalFormat.ml:762:28>>*/ de$13
                  /*<<camlinternalFormat.ml:762:28>>*/ (0);
                /*<<camlinternalFormat.ml:762:43>>*/ }] /*<<camlinternalFormat.ml:759:4>>*/ ;
    }
    /*<<camlinternalFormat.ml:775:66>>*/ }
   function trans(ty1, ty2){
    a:
    {
     b:
     {
      c:
      {
       d:
       {
        e:
        {
         f:
         {
          g:
          {
           if(typeof ty1 !== "number"){
            switch(ty1[0]){
              case 0:
               var rest1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 0:
                   var rest2 = ty2[1];
                    /*<<camlinternalFormat.ml:804:36>>*/ return [0,
                            /*<<camlinternalFormat.ml:804:44>>*/ trans
                             /*<<camlinternalFormat.ml:804:44>>*/ (rest1, rest2)] /*<<camlinternalFormat.ml:804:36>>*/ ;
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 1:
               var rest1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 1:
                   var rest2$0 = ty2[1];
                    /*<<camlinternalFormat.ml:805:40>>*/ return [1,
                            /*<<camlinternalFormat.ml:805:50>>*/ trans
                             /*<<camlinternalFormat.ml:805:50>>*/ (rest1$0, rest2$0)] /*<<camlinternalFormat.ml:805:40>>*/ ;
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 2:
               var rest1$1 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 2:
                   var rest2$1 = ty2[1];
                    /*<<camlinternalFormat.ml:807:34>>*/ return [2,
                            /*<<camlinternalFormat.ml:807:41>>*/ trans
                             /*<<camlinternalFormat.ml:807:41>>*/ (rest1$1, rest2$1)] /*<<camlinternalFormat.ml:807:34>>*/ ;
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 3:
               var rest1$2 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 3:
                   var rest2$2 = ty2[1];
                    /*<<camlinternalFormat.ml:808:38>>*/ return [3,
                            /*<<camlinternalFormat.ml:808:47>>*/ trans
                             /*<<camlinternalFormat.ml:808:47>>*/ (rest1$2, rest2$2)] /*<<camlinternalFormat.ml:808:38>>*/ ;
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 4:
               var rest1$3 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 4:
                   var rest2$3 = ty2[1];
                    /*<<camlinternalFormat.ml:810:46>>*/ return [4,
                            /*<<camlinternalFormat.ml:810:59>>*/ trans
                             /*<<camlinternalFormat.ml:810:59>>*/ (rest1$3, rest2$3)] /*<<camlinternalFormat.ml:810:46>>*/ ;
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 5:
               var rest1$4 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 5:
                   var rest2$4 = ty2[1];
                    /*<<camlinternalFormat.ml:809:38>>*/ return [5,
                            /*<<camlinternalFormat.ml:809:47>>*/ trans
                             /*<<camlinternalFormat.ml:809:47>>*/ (rest1$4, rest2$4)] /*<<camlinternalFormat.ml:809:38>>*/ ;
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 6:
               var rest1$5 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 6:
                   var rest2$5 = ty2[1];
                    /*<<camlinternalFormat.ml:811:38>>*/ return [6,
                            /*<<camlinternalFormat.ml:811:47>>*/ trans
                             /*<<camlinternalFormat.ml:811:47>>*/ (rest1$5, rest2$5)] /*<<camlinternalFormat.ml:811:38>>*/ ;
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 7:
               var rest1$6 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 7:
                   var rest2$6 = ty2[1];
                    /*<<camlinternalFormat.ml:806:36>>*/ return [7,
                            /*<<camlinternalFormat.ml:806:44>>*/ trans
                             /*<<camlinternalFormat.ml:806:44>>*/ (rest1$6, rest2$6)] /*<<camlinternalFormat.ml:806:36>>*/ ;
                  case 8:
                   break f;
                  case 9:
                   break g;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
               break;
              case 8:
               var rest1$7 = ty1[2], ty1$0 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                   var
                    rest2$7 = ty2[2],
                    ty2$0 = ty2[1],
                    _cE_ =
                       /*<<camlinternalFormat.ml:835:34>>*/  /*<<camlinternalFormat.ml:835:34>>*/ trans
                        /*<<camlinternalFormat.ml:835:34>>*/ (rest1$7, rest2$7);
                    /*<<camlinternalFormat.ml:835:4>>*/ return [8,
                            /*<<camlinternalFormat.ml:835:19>>*/ trans
                             /*<<camlinternalFormat.ml:835:19>>*/ (ty1$0, ty2$0),
                           _cE_] /*<<camlinternalFormat.ml:835:4>>*/ ;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
                /*<<camlinternalFormat.ml:836:26>>*/ throw  /*<<camlinternalFormat.ml:836:26>>*/ caml_maybe_attach_backtrace
                       /*<<camlinternalFormat.ml:836:26>>*/ ([0,
                        Assert_failure,
                        _k_],
                       1);
              case 9:
               var rest1$8 = ty1[3], ty12 = ty1[2], ty11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 8:
                   break f;
                  case 9:
                   var
                    rest2$8 = ty2[3],
                    ty22 = ty2[2],
                    ty21 = ty2[1],
                    ty =
                       /*<<camlinternalFormat.ml:841:13>>*/  /*<<camlinternalFormat.ml:841:13>>*/ trans
                        /*<<camlinternalFormat.ml:841:13>>*/ ( /*<<camlinternalFormat.ml:841:19>>*/ symm
                          /*<<camlinternalFormat.ml:841:19>>*/ (ty12),
                        ty21),
                    match =
                       /*<<camlinternalFormat.ml:842:23>>*/  /*<<camlinternalFormat.ml:842:23>>*/ fmtty_rel_det
                        /*<<camlinternalFormat.ml:842:23>>*/ (ty),
                    f4 = match[4],
                    f2 = match[2];
                    /*<<camlinternalFormat.ml:843:15>>*/  /*<<camlinternalFormat.ml:843:15>>*/ f2
                     /*<<camlinternalFormat.ml:843:15>>*/ (0);
                    /*<<camlinternalFormat.ml:844:15>>*/  /*<<camlinternalFormat.ml:844:15>>*/ f4
                     /*<<camlinternalFormat.ml:844:15>>*/ (0);
                    /*<<camlinternalFormat.ml:845:4>>*/ return [9,
                           ty11,
                           ty22,
                            /*<<camlinternalFormat.ml:845:33>>*/ trans
                             /*<<camlinternalFormat.ml:845:33>>*/ (rest1$8, rest2$8)] /*<<camlinternalFormat.ml:845:4>>*/ ;
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   break e;
                }
                /*<<camlinternalFormat.ml:846:28>>*/ throw  /*<<camlinternalFormat.ml:846:28>>*/ caml_maybe_attach_backtrace
                       /*<<camlinternalFormat.ml:846:28>>*/ ([0,
                        Assert_failure,
                        _l_],
                       1);
              case 10:
               var rest1$9 = ty1[1];
               if(typeof ty2 !== "number" && 10 === ty2[0]){
                var rest2$9 = ty2[1];
                 /*<<camlinternalFormat.ml:813:38>>*/ return [10,
                         /*<<camlinternalFormat.ml:813:47>>*/ trans
                          /*<<camlinternalFormat.ml:813:47>>*/ (rest1$9, rest2$9)] /*<<camlinternalFormat.ml:813:38>>*/ ;
               }
                /*<<camlinternalFormat.ml:814:21>>*/ throw  /*<<camlinternalFormat.ml:814:21>>*/ caml_maybe_attach_backtrace
                       /*<<camlinternalFormat.ml:814:21>>*/ ([0,
                        Assert_failure,
                        _m_],
                       1);
              case 11:
               var rest1$10 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   var rest2$10 = ty2[1];
                    /*<<camlinternalFormat.ml:817:38>>*/ return [11,
                            /*<<camlinternalFormat.ml:817:47>>*/ trans
                             /*<<camlinternalFormat.ml:817:47>>*/ (rest1$10, rest2$10)] /*<<camlinternalFormat.ml:817:38>>*/ ;
                }
                /*<<camlinternalFormat.ml:818:21>>*/ throw  /*<<camlinternalFormat.ml:818:21>>*/ caml_maybe_attach_backtrace
                       /*<<camlinternalFormat.ml:818:21>>*/ ([0,
                        Assert_failure,
                        _n_],
                       1);
              case 12:
               var rest1$11 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   var rest2$11 = ty2[1];
                    /*<<camlinternalFormat.ml:821:34>>*/ return [12,
                            /*<<camlinternalFormat.ml:821:41>>*/ trans
                             /*<<camlinternalFormat.ml:821:41>>*/ (rest1$11, rest2$11)] /*<<camlinternalFormat.ml:821:34>>*/ ;
                }
                /*<<camlinternalFormat.ml:822:19>>*/ throw  /*<<camlinternalFormat.ml:822:19>>*/ caml_maybe_attach_backtrace
                       /*<<camlinternalFormat.ml:822:19>>*/ ([0,
                        Assert_failure,
                        _o_],
                       1);
              case 13:
               var rest1$12 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   var rest2$12 = ty2[1];
                    /*<<camlinternalFormat.ml:825:40>>*/ return [13,
                            /*<<camlinternalFormat.ml:825:50>>*/ trans
                             /*<<camlinternalFormat.ml:825:50>>*/ (rest1$12, rest2$12)] /*<<camlinternalFormat.ml:825:40>>*/ ;
                }
                /*<<camlinternalFormat.ml:826:22>>*/ throw  /*<<camlinternalFormat.ml:826:22>>*/ caml_maybe_attach_backtrace
                       /*<<camlinternalFormat.ml:826:22>>*/ ([0,
                        Assert_failure,
                        _p_],
                       1);
              default:
               var rest1$13 = ty1[1];
               if(typeof ty2 !== "number")
                switch(ty2[0]){
                  case 10:
                   break a;
                  case 11:
                   break b;
                  case 12:
                   break c;
                  case 13:
                   break d;
                  case 14:
                   var rest2$13 = ty2[1];
                    /*<<camlinternalFormat.ml:830:4>>*/ return [14,
                            /*<<camlinternalFormat.ml:830:22>>*/ trans
                             /*<<camlinternalFormat.ml:830:22>>*/ (rest1$13, rest2$13)] /*<<camlinternalFormat.ml:830:4>>*/ ;
                }
                /*<<camlinternalFormat.ml:831:30>>*/ throw  /*<<camlinternalFormat.ml:831:30>>*/ caml_maybe_attach_backtrace
                       /*<<camlinternalFormat.ml:831:30>>*/ ([0,
                        Assert_failure,
                        _q_],
                       1);
            }
             /*<<camlinternalFormat.ml:851:23>>*/ throw  /*<<camlinternalFormat.ml:851:23>>*/ caml_maybe_attach_backtrace
                    /*<<camlinternalFormat.ml:851:23>>*/ ([0,
                     Assert_failure,
                     _j_],
                    1);
           }
           if(typeof ty2 === "number")
             /*<<camlinternalFormat.ml:849:34>>*/ return 0 /*<<camlinternalFormat.ml:849:34>>*/ ;
           switch(ty2[0]){
             case 10:
              break a;
             case 11:
              break b;
             case 12:
              break c;
             case 13:
              break d;
             case 14:
              break e;
             case 8:
              break f;
             case 9: break;
             default:
               /*<<camlinternalFormat.ml:850:23>>*/ throw  /*<<camlinternalFormat.ml:850:23>>*/ caml_maybe_attach_backtrace
                      /*<<camlinternalFormat.ml:850:23>>*/ ([0,
                       Assert_failure,
                       _b_],
                      1);
           }
          }
           /*<<camlinternalFormat.ml:847:28>>*/ throw  /*<<camlinternalFormat.ml:847:28>>*/ caml_maybe_attach_backtrace
                  /*<<camlinternalFormat.ml:847:28>>*/ ([0,
                   Assert_failure,
                   _d_],
                  1);
         }
          /*<<camlinternalFormat.ml:837:26>>*/ throw  /*<<camlinternalFormat.ml:837:26>>*/ caml_maybe_attach_backtrace
                 /*<<camlinternalFormat.ml:837:26>>*/ ([0,
                  Assert_failure,
                  _c_],
                 1);
        }
         /*<<camlinternalFormat.ml:832:30>>*/ throw  /*<<camlinternalFormat.ml:832:30>>*/ caml_maybe_attach_backtrace
                /*<<camlinternalFormat.ml:832:30>>*/ ([0, Assert_failure, _i_],
                1);
       }
        /*<<camlinternalFormat.ml:827:22>>*/ throw  /*<<camlinternalFormat.ml:827:22>>*/ caml_maybe_attach_backtrace
               /*<<camlinternalFormat.ml:827:22>>*/ ([0, Assert_failure, _h_],
               1);
      }
       /*<<camlinternalFormat.ml:823:19>>*/ throw  /*<<camlinternalFormat.ml:823:19>>*/ caml_maybe_attach_backtrace
              /*<<camlinternalFormat.ml:823:19>>*/ ([0, Assert_failure, _g_],
              1);
     }
      /*<<camlinternalFormat.ml:819:21>>*/ throw  /*<<camlinternalFormat.ml:819:21>>*/ caml_maybe_attach_backtrace
             /*<<camlinternalFormat.ml:819:21>>*/ ([0, Assert_failure, _f_],
             1);
    }
     /*<<camlinternalFormat.ml:815:21>>*/ throw  /*<<camlinternalFormat.ml:815:21>>*/ caml_maybe_attach_backtrace
            /*<<camlinternalFormat.ml:815:21>>*/ ([0, Assert_failure, _e_], 1);
    /*<<camlinternalFormat.ml:851:35>>*/ }
   function fmtty_of_fmt(fmtty){
    var fmtty$0 = fmtty;
     /*<<camlinternalFormat.ml:863:13>>*/ for(;;){
     if(typeof fmtty$0 === "number")
       /*<<camlinternalFormat.ml:916:34>>*/ return 0 /*<<camlinternalFormat.ml:916:34>>*/ ;
     switch(fmtty$0[0]){
       case 0:
        var rest = fmtty$0[1];
         /*<<camlinternalFormat.ml:890:34>>*/ return [0,
                 /*<<camlinternalFormat.ml:890:42>>*/ fmtty_of_fmt
                  /*<<camlinternalFormat.ml:890:42>>*/ (rest)] /*<<camlinternalFormat.ml:890:34>>*/ ;
       case 1:
        var rest$0 = fmtty$0[1];
         /*<<camlinternalFormat.ml:891:34>>*/ return [0,
                 /*<<camlinternalFormat.ml:891:42>>*/ fmtty_of_fmt
                  /*<<camlinternalFormat.ml:891:42>>*/ (rest$0)] /*<<camlinternalFormat.ml:891:34>>*/ ;
       case 2:
        var rest$1 = fmtty$0[2], pad = fmtty$0[1];
         /*<<camlinternalFormat.ml:865:31>>*/ return  /*<<camlinternalFormat.ml:865:31>>*/ fmtty_of_padding_fmtty
                 /*<<camlinternalFormat.ml:865:31>>*/ (pad,
                 [1,
                   /*<<camlinternalFormat.ml:865:42>>*/ fmtty_of_fmt
                    /*<<camlinternalFormat.ml:865:42>>*/ (rest$1)]) /*<<camlinternalFormat.ml:916:46>>*/ ;
       case 3:
        var rest$2 = fmtty$0[2], pad$0 = fmtty$0[1];
         /*<<camlinternalFormat.ml:867:31>>*/ return  /*<<camlinternalFormat.ml:867:31>>*/ fmtty_of_padding_fmtty
                 /*<<camlinternalFormat.ml:867:31>>*/ (pad$0,
                 [1,
                   /*<<camlinternalFormat.ml:867:42>>*/ fmtty_of_fmt
                    /*<<camlinternalFormat.ml:867:42>>*/ (rest$2)]) /*<<camlinternalFormat.ml:916:46>>*/ ;
       case 4:
        var
         rest$3 = fmtty$0[4],
         prec = fmtty$0[3],
         pad$1 = fmtty$0[2],
         ty_rest =
            /*<<camlinternalFormat.ml:870:18>>*/  /*<<camlinternalFormat.ml:870:18>>*/ fmtty_of_fmt
             /*<<camlinternalFormat.ml:870:18>>*/ (rest$3),
         prec_ty =
            /*<<camlinternalFormat.ml:871:18>>*/  /*<<camlinternalFormat.ml:871:18>>*/ fmtty_of_precision_fmtty
             /*<<camlinternalFormat.ml:871:18>>*/ (prec, [2, ty_rest]);
         /*<<camlinternalFormat.ml:872:4>>*/ return  /*<<camlinternalFormat.ml:872:4>>*/ fmtty_of_padding_fmtty
                 /*<<camlinternalFormat.ml:872:4>>*/ (pad$1, prec_ty) /*<<camlinternalFormat.ml:916:46>>*/ ;
       case 5:
        var
         rest$4 = fmtty$0[4],
         prec$0 = fmtty$0[3],
         pad$2 = fmtty$0[2],
         ty_rest$0 =
            /*<<camlinternalFormat.ml:874:18>>*/  /*<<camlinternalFormat.ml:874:18>>*/ fmtty_of_fmt
             /*<<camlinternalFormat.ml:874:18>>*/ (rest$4),
         prec_ty$0 =
            /*<<camlinternalFormat.ml:875:18>>*/  /*<<camlinternalFormat.ml:875:18>>*/ fmtty_of_precision_fmtty
             /*<<camlinternalFormat.ml:875:18>>*/ (prec$0, [3, ty_rest$0]);
         /*<<camlinternalFormat.ml:876:4>>*/ return  /*<<camlinternalFormat.ml:876:4>>*/ fmtty_of_padding_fmtty
                 /*<<camlinternalFormat.ml:876:4>>*/ (pad$2, prec_ty$0) /*<<camlinternalFormat.ml:916:46>>*/ ;
       case 6:
        var
         rest$5 = fmtty$0[4],
         prec$1 = fmtty$0[3],
         pad$3 = fmtty$0[2],
         ty_rest$1 =
            /*<<camlinternalFormat.ml:878:18>>*/  /*<<camlinternalFormat.ml:878:18>>*/ fmtty_of_fmt
             /*<<camlinternalFormat.ml:878:18>>*/ (rest$5),
         prec_ty$1 =
            /*<<camlinternalFormat.ml:879:18>>*/  /*<<camlinternalFormat.ml:879:18>>*/ fmtty_of_precision_fmtty
             /*<<camlinternalFormat.ml:879:18>>*/ (prec$1, [4, ty_rest$1]);
         /*<<camlinternalFormat.ml:880:4>>*/ return  /*<<camlinternalFormat.ml:880:4>>*/ fmtty_of_padding_fmtty
                 /*<<camlinternalFormat.ml:880:4>>*/ (pad$3, prec_ty$1) /*<<camlinternalFormat.ml:916:46>>*/ ;
       case 7:
        var
         rest$6 = fmtty$0[4],
         prec$2 = fmtty$0[3],
         pad$4 = fmtty$0[2],
         ty_rest$2 =
            /*<<camlinternalFormat.ml:882:18>>*/  /*<<camlinternalFormat.ml:882:18>>*/ fmtty_of_fmt
             /*<<camlinternalFormat.ml:882:18>>*/ (rest$6),
         prec_ty$2 =
            /*<<camlinternalFormat.ml:883:18>>*/  /*<<camlinternalFormat.ml:883:18>>*/ fmtty_of_precision_fmtty
             /*<<camlinternalFormat.ml:883:18>>*/ (prec$2, [5, ty_rest$2]);
         /*<<camlinternalFormat.ml:884:4>>*/ return  /*<<camlinternalFormat.ml:884:4>>*/ fmtty_of_padding_fmtty
                 /*<<camlinternalFormat.ml:884:4>>*/ (pad$4, prec_ty$2) /*<<camlinternalFormat.ml:916:46>>*/ ;
       case 8:
        var
         rest$7 = fmtty$0[4],
         prec$3 = fmtty$0[3],
         pad$5 = fmtty$0[2],
         ty_rest$3 =
            /*<<camlinternalFormat.ml:886:18>>*/  /*<<camlinternalFormat.ml:886:18>>*/ fmtty_of_fmt
             /*<<camlinternalFormat.ml:886:18>>*/ (rest$7),
         prec_ty$3 =
            /*<<camlinternalFormat.ml:887:18>>*/  /*<<camlinternalFormat.ml:887:18>>*/ fmtty_of_precision_fmtty
             /*<<camlinternalFormat.ml:887:18>>*/ (prec$3, [6, ty_rest$3]);
         /*<<camlinternalFormat.ml:888:4>>*/ return  /*<<camlinternalFormat.ml:888:4>>*/ fmtty_of_padding_fmtty
                 /*<<camlinternalFormat.ml:888:4>>*/ (pad$5, prec_ty$3) /*<<camlinternalFormat.ml:916:46>>*/ ;
       case 9:
        var rest$8 = fmtty$0[2], pad$6 = fmtty$0[1];
         /*<<camlinternalFormat.ml:893:33>>*/ return  /*<<camlinternalFormat.ml:893:33>>*/ fmtty_of_padding_fmtty
                 /*<<camlinternalFormat.ml:893:33>>*/ (pad$6,
                 [7,
                   /*<<camlinternalFormat.ml:893:42>>*/ fmtty_of_fmt
                    /*<<camlinternalFormat.ml:893:42>>*/ (rest$8)]) /*<<camlinternalFormat.ml:916:46>>*/ ;
       case 10:
        var fmtty$1 = fmtty$0[1]; fmtty$0 = fmtty$1; break;
       case 11:
        var fmtty$2 = fmtty$0[2]; fmtty$0 = fmtty$2; break;
       case 12:
        var fmtty$3 = fmtty$0[2]; fmtty$0 = fmtty$3; break;
       case 13:
        var rest$9 = fmtty$0[3], ty = fmtty$0[2];
         /*<<camlinternalFormat.ml:900:4>>*/ return [8,
                ty,
                 /*<<camlinternalFormat.ml:900:23>>*/ fmtty_of_fmt
                  /*<<camlinternalFormat.ml:900:23>>*/ (rest$9)] /*<<camlinternalFormat.ml:900:4>>*/ ;
       case 14:
        var rest$10 = fmtty$0[3], ty$0 = fmtty$0[2];
         /*<<camlinternalFormat.ml:902:4>>*/ return [9,
                ty$0,
                ty$0,
                 /*<<camlinternalFormat.ml:902:29>>*/ fmtty_of_fmt
                  /*<<camlinternalFormat.ml:902:29>>*/ (rest$10)] /*<<camlinternalFormat.ml:902:4>>*/ ;
       case 15:
        var rest$11 = fmtty$0[1];
         /*<<camlinternalFormat.ml:894:34>>*/ return [10,
                 /*<<camlinternalFormat.ml:894:43>>*/ fmtty_of_fmt
                  /*<<camlinternalFormat.ml:894:43>>*/ (rest$11)] /*<<camlinternalFormat.ml:894:34>>*/ ;
       case 16:
        var rest$12 = fmtty$0[1];
         /*<<camlinternalFormat.ml:895:34>>*/ return [11,
                 /*<<camlinternalFormat.ml:895:43>>*/ fmtty_of_fmt
                  /*<<camlinternalFormat.ml:895:43>>*/ (rest$12)] /*<<camlinternalFormat.ml:895:34>>*/ ;
       case 17:
        var fmtty$4 = fmtty$0[2]; fmtty$0 = fmtty$4; break;
       case 18:
        var
         rest$13 = fmtty$0[2],
         formatting_gen = fmtty$0[1],
         _cB_ =
            /*<<camlinternalFormat.ml:914:54>>*/  /*<<camlinternalFormat.ml:914:54>>*/ fmtty_of_fmt
             /*<<camlinternalFormat.ml:914:54>>*/ (rest$13);
        if(0 === formatting_gen[0])
         var
          fmt = formatting_gen[1][1],
          _cC_ =
             /*<<camlinternalFormat.ml:857:34>>*/ fmtty_of_fmt
              /*<<camlinternalFormat.ml:857:34>>*/ (fmt);
        else
         var
          fmt$0 = formatting_gen[1][1],
          _cC_ =
             /*<<camlinternalFormat.ml:858:34>>*/ fmtty_of_fmt
              /*<<camlinternalFormat.ml:858:34>>*/ (fmt$0);
         /*<<camlinternalFormat.ml:914:54>>*/ return  /*<<camlinternalFormat.ml:914:54>>*/ caml_call2
                 /*<<camlinternalFormat.ml:914:54>>*/ (CamlinternalFormatBasics
                  [1],
                 _cC_,
                 _cB_) /*<<camlinternalFormat.ml:916:46>>*/ ;
       case 19:
        var rest$14 = fmtty$0[1];
         /*<<camlinternalFormat.ml:897:34>>*/ return [13,
                 /*<<camlinternalFormat.ml:897:44>>*/ fmtty_of_fmt
                  /*<<camlinternalFormat.ml:897:44>>*/ (rest$14)] /*<<camlinternalFormat.ml:897:34>>*/ ;
       case 20:
        var rest$15 = fmtty$0[3];
         /*<<camlinternalFormat.ml:908:34>>*/ return [1,
                 /*<<camlinternalFormat.ml:908:44>>*/ fmtty_of_fmt
                  /*<<camlinternalFormat.ml:908:44>>*/ (rest$15)] /*<<camlinternalFormat.ml:908:34>>*/ ;
       case 21:
        var rest$16 = fmtty$0[2];
         /*<<camlinternalFormat.ml:909:34>>*/ return [2,
                 /*<<camlinternalFormat.ml:909:41>>*/ fmtty_of_fmt
                  /*<<camlinternalFormat.ml:909:41>>*/ (rest$16)] /*<<camlinternalFormat.ml:909:34>>*/ ;
       case 22:
        var rest$17 = fmtty$0[1];
         /*<<camlinternalFormat.ml:910:34>>*/ return [0,
                 /*<<camlinternalFormat.ml:910:42>>*/ fmtty_of_fmt
                  /*<<camlinternalFormat.ml:910:42>>*/ (rest$17)] /*<<camlinternalFormat.ml:910:34>>*/ ;
       case 23:
        var fmtty$5 = fmtty$0[2], ign = fmtty$0[1];
        if(typeof ign === "number")
         switch(ign){
           case 0:
            fmtty$0 = fmtty$5; break;
           case 1:
            fmtty$0 = fmtty$5; break;
           case 2:
             /*<<camlinternalFormat.ml:944:39>>*/ return [14,
                     /*<<camlinternalFormat.ml:944:57>>*/ fmtty_of_fmt
                      /*<<camlinternalFormat.ml:944:57>>*/ (fmtty$5)] /*<<camlinternalFormat.ml:944:39>>*/ ;
           default: fmtty$0 = fmtty$5;
         }
        else
         switch(ign[0]){
           case 0:
            fmtty$0 = fmtty$5; break;
           case 1:
            fmtty$0 = fmtty$5; break;
           case 2:
            fmtty$0 = fmtty$5; break;
           case 3:
            fmtty$0 = fmtty$5; break;
           case 4:
            fmtty$0 = fmtty$5; break;
           case 5:
            fmtty$0 = fmtty$5; break;
           case 6:
            fmtty$0 = fmtty$5; break;
           case 7:
            fmtty$0 = fmtty$5; break;
           case 8:
            fmtty$0 = fmtty$5; break;
           case 9:
            var
             fmtty$6 = ign[2],
             _cD_ =
                /*<<camlinternalFormat.ml:943:58>>*/  /*<<camlinternalFormat.ml:943:58>>*/ fmtty_of_fmt
                 /*<<camlinternalFormat.ml:943:58>>*/ (fmtty$5);
             /*<<camlinternalFormat.ml:943:58>>*/ return  /*<<camlinternalFormat.ml:943:58>>*/ caml_call2
                     /*<<camlinternalFormat.ml:943:58>>*/ (CamlinternalFormatBasics
                      [1],
                     fmtty$6,
                     _cD_) /*<<camlinternalFormat.ml:916:46>>*/ ;
           case 10:
            fmtty$0 = fmtty$5; break;
           default: fmtty$0 = fmtty$5;
         }
        break;
       default:
        var rest$18 = fmtty$0[3], arity = fmtty$0[1];
         /*<<camlinternalFormat.ml:896:56>>*/ return  /*<<camlinternalFormat.ml:896:56>>*/ fmtty_of_custom
                 /*<<camlinternalFormat.ml:896:56>>*/ (arity,
                  /*<<camlinternalFormat.ml:896:56>>*/ fmtty_of_fmt
                   /*<<camlinternalFormat.ml:896:56>>*/ (rest$18)) /*<<camlinternalFormat.ml:916:46>>*/ ;
     }
    }
    /*<<camlinternalFormat.ml:916:46>>*/ }
   function fmtty_of_custom(arity, fmtty){
     /*<<camlinternalFormat.ml:921:19>>*/ if(! arity)
      /*<<camlinternalFormat.ml:922:19>>*/ return fmtty /*<<camlinternalFormat.ml:922:19>>*/ ;
    var arity$0 = arity[1];
     /*<<camlinternalFormat.ml:923:25>>*/ return [12,
             /*<<camlinternalFormat.ml:923:32>>*/ fmtty_of_custom
              /*<<camlinternalFormat.ml:923:32>>*/ (arity$0, fmtty)] /*<<camlinternalFormat.ml:923:25>>*/ ;
    /*<<camlinternalFormat.ml:923:61>>*/ }
   function fmtty_of_padding_fmtty(pad, fmtty){
     /*<<camlinternalFormat.ml:952:19>>*/ return typeof pad === "number"
            ? fmtty
            : 0 === pad[0] ? fmtty : [2, fmtty] /*<<camlinternalFormat.ml:955:35>>*/ ;
    /*<<camlinternalFormat.ml:955:35>>*/ }
   function fmtty_of_precision_fmtty(prec, fmtty){
     /*<<camlinternalFormat.ml:960:20>>*/ return typeof prec === "number"
            ? prec ? [2, fmtty] : fmtty
            : fmtty /*<<camlinternalFormat.ml:963:37>>*/ ;
    /*<<camlinternalFormat.ml:963:37>>*/ }
   var
    Type_mismatch =
       /*<<camlinternalFormat.ml:969:0>>*/ [248,
       "CamlinternalFormat.Type_mismatch",
       runtime.caml_fresh_oo_id(0)],
    cst_d = "%d",
    cst_d$0 = "%+d",
    cst_d$1 = "% d",
    cst_i$0 = cst_i$3,
    cst_i$1 = "%+i",
    cst_i$2 = "% i",
    cst_x = "%x",
    cst_x$0 = "%#x",
    cst_X = "%X",
    cst_X$0 = "%#X",
    cst_o = "%o",
    cst_o$0 = "%#o",
    cst_u = cst_u$0,
    cst_Ld = "%Ld",
    cst_Ld$0 = "%+Ld",
    cst_Ld$1 = "% Ld",
    cst_Li$0 = cst_Li$3,
    cst_Li$1 = "%+Li",
    cst_Li$2 = "% Li",
    cst_Lx = "%Lx",
    cst_Lx$0 = "%#Lx",
    cst_LX = "%LX",
    cst_LX$0 = "%#LX",
    cst_Lo = "%Lo",
    cst_Lo$0 = "%#Lo",
    cst_Lu = "%Lu",
    cst_ld = "%ld",
    cst_ld$0 = "%+ld",
    cst_ld$1 = "% ld",
    cst_li$0 = cst_li$3,
    cst_li$1 = "%+li",
    cst_li$2 = "% li",
    cst_lx = "%lx",
    cst_lx$0 = "%#lx",
    cst_lX = "%lX",
    cst_lX$0 = "%#lX",
    cst_lo = "%lo",
    cst_lo$0 = "%#lo",
    cst_lu = "%lu",
    cst_nd = "%nd",
    cst_nd$0 = "%+nd",
    cst_nd$1 = "% nd",
    cst_ni$0 = cst_ni$3,
    cst_ni$1 = "%+ni",
    cst_ni$2 = "% ni",
    cst_nx = "%nx",
    cst_nx$0 = "%#nx",
    cst_nX = "%nX",
    cst_nX$0 = "%#nX",
    cst_no = "%no",
    cst_no$0 = "%#no",
    cst_nu = "%nu",
    _r_ = [0, 103],
    cst_neg_infinity = "neg_infinity",
    cst_infinity = "infinity",
    cst_nan = "nan",
    _s_ = [0, cst_camlinternalFormat_ml, 1558, 4],
    cst_Printf_bad_conversion = "Printf: bad conversion %[",
    _t_ = [0, cst_camlinternalFormat_ml, 1626, 39],
    _u_ = [0, cst_camlinternalFormat_ml, 1649, 31],
    _v_ = [0, cst_camlinternalFormat_ml, 1650, 31],
    cst_Printf_bad_conversion$0 = "Printf: bad conversion %_",
    _w_ = [0, cst_camlinternalFormat_ml, 1830, 8],
    _x_ = [0, 0, 4],
    _y_ =
      [0,
       [11, "invalid box description ", [3, 0, 0]],
       "invalid box description %S"],
    _z_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11, cst_at_character_number, [4, 0, 0, 0, [11, cst$44, [2, 0, 0]]]]]],
       "invalid format %S: at character number %d, %s"],
    cst_non_zero_widths_are_unsupp =
      "non-zero widths are unsupported for %c conversions",
    _A_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, ", '", [0, [11, "' without ", [2, 0, 0]]]]]]]],
       "invalid format %S: at character number %d, '%c' without %s"],
    _B_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, cst$44, [2, 0, [11, " expected, read ", [1, 0]]]]]]]],
       "invalid format %S: at character number %d, %s expected, read %C"],
    _C_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, ", duplicate flag ", [1, 0]]]]]],
       "invalid format %S: at character number %d, duplicate flag %C"],
    cst_padding = "padding",
    _D_ = [0, 1, 0],
    cst_0 = cst_0$3,
    _E_ = [0, 0],
    cst_precision = cst_precision$3,
    _F_ = [1, 0],
    _G_ = [1, 1],
    cst_precision$0 = cst_precision$3,
    _H_ = [1, 1],
    cst_precision$1 = cst_precision$3,
    cst_0$0 = cst_0$3,
    _I_ = [1, 1],
    cst_0$1 = cst_0$3,
    cst_0$2 = "'0'",
    _J_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11, ', invalid conversion "', [12, 37, [0, [12, 34, 0]]]]]]]],
       'invalid format %S: at character number %d, invalid conversion "%%%c"'],
    _K_ = [0, 0],
    cst_padding$0 = "`padding'",
    _L_ = [0, 0],
    cst_precision$2 = "`precision'",
    _M_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11,
            ", flag ",
            [1,
             [11,
              " is only allowed after the '",
              [12, 37, [11, "', before padding and precision", 0]]]]]]]]],
       "invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision"],
    _N_ = [0, [12, 64, 0]],
    _O_ = [0, "@ ", 1, 0],
    _P_ = [0, "@,", 0, 0],
    _Q_ = [2, 60],
    _R_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ": '",
          [12,
           37,
           [11,
            "' alone is not accepted in character sets, use ",
            [12,
             37,
             [12,
              37,
              [11, " instead at position ", [4, 0, 0, 0, [12, 46, 0]]]]]]]]]],
       "invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d."],
    _S_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ": integer ",
          [4, 0, 0, 0, [11, " is greater than the limit ", [4, 0, 0, 0, 0]]]]]],
       "invalid format %S: integer %d is greater than the limit %d"],
    _T_ = [0, cst_camlinternalFormat_ml, 2837, 11],
    cst_digit = "digit",
    _U_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ': unclosed sub-format, expected "',
          [12, 37, [0, [11, '" at character number ', [4, 0, 0, 0, 0]]]]]]],
       'invalid format %S: unclosed sub-format, expected "%%%c" at character number %d'],
    cst_character = "character ')'",
    cst_character$0 = "character '}'",
    _V_ = [0, cst_camlinternalFormat_ml, 2899, 34],
    _W_ = [0, cst_camlinternalFormat_ml, 2935, 28],
    _X_ = [0, cst_camlinternalFormat_ml, 2957, 11],
    _Y_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11,
            cst$44,
            [2,
             0,
             [11,
              " is incompatible with '",
              [0, [11, "' in sub-format ", [3, 0, 0]]]]]]]]]],
       "invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S"],
    _Z_ =
      [0,
       [11, cst_bad_input_format_type_mism, [3, 0, [11, cst_and, [3, 0, 0]]]],
       cst_bad_input_format_type_mism$0],
    ___ =
      [0,
       [11, cst_bad_input_format_type_mism, [3, 0, [11, cst_and, [3, 0, 0]]]],
       cst_bad_input_format_type_mism$0];
   function type_padding(pad, fmtty){
     /*<<camlinternalFormat.ml:977:17>>*/ if(typeof pad === "number")
      /*<<camlinternalFormat.ml:978:21>>*/ return [0, 0, fmtty] /*<<camlinternalFormat.ml:978:21>>*/ ;
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
      /*<<camlinternalFormat.ml:979:33>>*/ return [0, [0, padty, w], fmtty] /*<<camlinternalFormat.ml:979:33>>*/ ;
    }
    if(typeof fmtty !== "number" && 2 === fmtty[0]){
     var rest = fmtty[1], padty$0 = pad[1];
      /*<<camlinternalFormat.ml:980:38>>*/ return [0, [1, padty$0], rest] /*<<camlinternalFormat.ml:980:38>>*/ ;
    }
     /*<<camlinternalFormat.ml:981:9>>*/ throw  /*<<camlinternalFormat.ml:981:9>>*/ caml_maybe_attach_backtrace
            /*<<camlinternalFormat.ml:981:9>>*/ (Type_mismatch, 1);
    /*<<camlinternalFormat.ml:981:28>>*/ }
   function type_padprec(pad, prec, fmtty){
    var
     match =
        /*<<camlinternalFormat.ml:989:34>>*/  /*<<camlinternalFormat.ml:989:34>>*/ type_padding
         /*<<camlinternalFormat.ml:989:34>>*/ (pad, fmtty);
    if(typeof prec !== "number"){
     var rest$1 = match[2], pad$2 = match[1], p = prec[1];
      /*<<camlinternalFormat.ml:993:4>>*/ return [0, pad$2, [0, p], rest$1] /*<<camlinternalFormat.ml:993:4>>*/ ;
    }
    if(! prec){
     var rest$0 = match[2], pad$1 = match[1];
      /*<<camlinternalFormat.ml:991:4>>*/ return [0, pad$1, 0, rest$0] /*<<camlinternalFormat.ml:991:4>>*/ ;
    }
    var match$0 = match[2];
    if(typeof match$0 !== "number" && 2 === match$0[0]){
     var rest = match$0[1], pad$0 = match[1];
      /*<<camlinternalFormat.ml:995:4>>*/ return [0, pad$0, 1, rest] /*<<camlinternalFormat.ml:995:4>>*/ ;
    }
     /*<<camlinternalFormat.ml:996:35>>*/ throw  /*<<camlinternalFormat.ml:996:35>>*/ caml_maybe_attach_backtrace
            /*<<camlinternalFormat.ml:996:35>>*/ (Type_mismatch, 1);
    /*<<camlinternalFormat.ml:996:54>>*/ }
   function type_format(fmt, fmtty){
    var
     _cA_ =
        /*<<camlinternalFormat.ml:1008:25>>*/  /*<<camlinternalFormat.ml:1008:25>>*/ type_format_gen
         /*<<camlinternalFormat.ml:1008:25>>*/ (fmt, fmtty);
    if(typeof _cA_[2] !== "number")
      /*<<camlinternalFormat.ml:1010:9>>*/ throw  /*<<camlinternalFormat.ml:1010:9>>*/ caml_maybe_attach_backtrace
             /*<<camlinternalFormat.ml:1010:9>>*/ (Type_mismatch, 1);
    var fmt$0 = _cA_[1];
     /*<<camlinternalFormat.ml:1009:42>>*/ return fmt$0 /*<<camlinternalFormat.ml:1009:42>>*/ ;
    /*<<camlinternalFormat.ml:1010:28>>*/ }
   function type_format_gen(fmt, fmtty0){
     /*<<camlinternalFormat.ml:1018:19>>*/ if(typeof fmt === "number")
      /*<<camlinternalFormat.ml:1133:33>>*/ return [0, 0, fmtty0] /*<<camlinternalFormat.ml:1133:33>>*/ ;
    switch(fmt[0]){
      case 0:
       if(typeof fmtty0 !== "number" && 0 === fmtty0[0]){
        var
         fmtty_rest = fmtty0[1],
         fmt_rest = fmt[1],
         match =
            /*<<camlinternalFormat.ml:1020:39>>*/  /*<<camlinternalFormat.ml:1020:39>>*/ type_format_gen
             /*<<camlinternalFormat.ml:1020:39>>*/ (fmt_rest, fmtty_rest),
         fmtty = match[2],
         fmt$0 = match[1];
         /*<<camlinternalFormat.ml:1021:4>>*/ return [0, [0, fmt$0], fmtty] /*<<camlinternalFormat.ml:1021:4>>*/ ;
       }
       break;
      case 1:
       if(typeof fmtty0 !== "number" && 0 === fmtty0[0]){
        var
         fmtty_rest$0 = fmtty0[1],
         fmt_rest$0 = fmt[1],
         match$0 =
            /*<<camlinternalFormat.ml:1023:39>>*/  /*<<camlinternalFormat.ml:1023:39>>*/ type_format_gen
             /*<<camlinternalFormat.ml:1023:39>>*/ (fmt_rest$0, fmtty_rest$0),
         fmtty$0 = match$0[2],
         fmt$1 = match$0[1];
         /*<<camlinternalFormat.ml:1024:4>>*/ return [0, [1, fmt$1], fmtty$0] /*<<camlinternalFormat.ml:1024:4>>*/ ;
       }
       break;
      case 2:
       var
        fmt_rest$1 = fmt[2],
        pad = fmt[1],
        match$1 =
           /*<<camlinternalFormat.ml:1026:10>>*/  /*<<camlinternalFormat.ml:1026:10>>*/ type_padding
            /*<<camlinternalFormat.ml:1026:10>>*/ (pad, fmtty0),
        pad$0 = match$1[1],
        match$2 = match$1[2];
       if(typeof match$2 !== "number" && 1 === match$2[0]){
        var
         fmtty_rest$1 = match$2[1],
         match$3 =
            /*<<camlinternalFormat.ml:1028:41>>*/  /*<<camlinternalFormat.ml:1028:41>>*/ type_format_gen
             /*<<camlinternalFormat.ml:1028:41>>*/ (fmt_rest$1, fmtty_rest$1),
         fmtty$1 = match$3[2],
         fmt$2 = match$3[1];
         /*<<camlinternalFormat.ml:1029:6>>*/ return [0,
                [2, pad$0, fmt$2],
                fmtty$1] /*<<camlinternalFormat.ml:1029:6>>*/ ;
       }
        /*<<camlinternalFormat.ml:1030:34>>*/ throw  /*<<camlinternalFormat.ml:1030:34>>*/ caml_maybe_attach_backtrace
               /*<<camlinternalFormat.ml:1030:34>>*/ (Type_mismatch, 1);
      case 3:
       var
        fmt_rest$2 = fmt[2],
        pad$1 = fmt[1],
        match$4 =
           /*<<camlinternalFormat.ml:1033:10>>*/  /*<<camlinternalFormat.ml:1033:10>>*/ type_padding
            /*<<camlinternalFormat.ml:1033:10>>*/ (pad$1, fmtty0),
        pad$2 = match$4[1],
        match$5 = match$4[2];
       if(typeof match$5 !== "number" && 1 === match$5[0]){
        var
         fmtty_rest$2 = match$5[1],
         match$6 =
            /*<<camlinternalFormat.ml:1035:41>>*/  /*<<camlinternalFormat.ml:1035:41>>*/ type_format_gen
             /*<<camlinternalFormat.ml:1035:41>>*/ (fmt_rest$2, fmtty_rest$2),
         fmtty$2 = match$6[2],
         fmt$3 = match$6[1];
         /*<<camlinternalFormat.ml:1036:6>>*/ return [0,
                [3, pad$2, fmt$3],
                fmtty$2] /*<<camlinternalFormat.ml:1036:6>>*/ ;
       }
        /*<<camlinternalFormat.ml:1037:34>>*/ throw  /*<<camlinternalFormat.ml:1037:34>>*/ caml_maybe_attach_backtrace
               /*<<camlinternalFormat.ml:1037:34>>*/ (Type_mismatch, 1);
      case 4:
       var
        fmt_rest$3 = fmt[4],
        prec = fmt[3],
        pad$3 = fmt[2],
        iconv = fmt[1],
        match$7 =
           /*<<camlinternalFormat.ml:1040:10>>*/  /*<<camlinternalFormat.ml:1040:10>>*/ type_padprec
            /*<<camlinternalFormat.ml:1040:10>>*/ (pad$3, prec, fmtty0),
        pad$4 = match$7[1],
        match$8 = match$7[3];
       if(typeof match$8 !== "number" && 2 === match$8[0]){
        var
         fmtty_rest$3 = match$8[1],
         prec$0 = match$7[2],
         match$9 =
            /*<<camlinternalFormat.ml:1042:41>>*/  /*<<camlinternalFormat.ml:1042:41>>*/ type_format_gen
             /*<<camlinternalFormat.ml:1042:41>>*/ (fmt_rest$3, fmtty_rest$3),
         fmtty$3 = match$9[2],
         fmt$4 = match$9[1];
         /*<<camlinternalFormat.ml:1043:6>>*/ return [0,
                [4, iconv, pad$4, prec$0, fmt$4],
                fmtty$3] /*<<camlinternalFormat.ml:1043:6>>*/ ;
       }
        /*<<camlinternalFormat.ml:1044:37>>*/ throw  /*<<camlinternalFormat.ml:1044:37>>*/ caml_maybe_attach_backtrace
               /*<<camlinternalFormat.ml:1044:37>>*/ (Type_mismatch, 1);
      case 5:
       var
        fmt_rest$4 = fmt[4],
        prec$1 = fmt[3],
        pad$5 = fmt[2],
        iconv$0 = fmt[1],
        match$10 =
           /*<<camlinternalFormat.ml:1047:10>>*/  /*<<camlinternalFormat.ml:1047:10>>*/ type_padprec
            /*<<camlinternalFormat.ml:1047:10>>*/ (pad$5, prec$1, fmtty0),
        pad$6 = match$10[1],
        match$11 = match$10[3];
       if(typeof match$11 !== "number" && 3 === match$11[0]){
        var
         fmtty_rest$4 = match$11[1],
         prec$2 = match$10[2],
         match$12 =
            /*<<camlinternalFormat.ml:1049:41>>*/  /*<<camlinternalFormat.ml:1049:41>>*/ type_format_gen
             /*<<camlinternalFormat.ml:1049:41>>*/ (fmt_rest$4, fmtty_rest$4),
         fmtty$4 = match$12[2],
         fmt$5 = match$12[1];
         /*<<camlinternalFormat.ml:1050:6>>*/ return [0,
                [5, iconv$0, pad$6, prec$2, fmt$5],
                fmtty$4] /*<<camlinternalFormat.ml:1050:6>>*/ ;
       }
        /*<<camlinternalFormat.ml:1051:37>>*/ throw  /*<<camlinternalFormat.ml:1051:37>>*/ caml_maybe_attach_backtrace
               /*<<camlinternalFormat.ml:1051:37>>*/ (Type_mismatch, 1);
      case 6:
       var
        fmt_rest$5 = fmt[4],
        prec$3 = fmt[3],
        pad$7 = fmt[2],
        iconv$1 = fmt[1],
        match$13 =
           /*<<camlinternalFormat.ml:1054:10>>*/  /*<<camlinternalFormat.ml:1054:10>>*/ type_padprec
            /*<<camlinternalFormat.ml:1054:10>>*/ (pad$7, prec$3, fmtty0),
        pad$8 = match$13[1],
        match$14 = match$13[3];
       if(typeof match$14 !== "number" && 4 === match$14[0]){
        var
         fmtty_rest$5 = match$14[1],
         prec$4 = match$13[2],
         match$15 =
            /*<<camlinternalFormat.ml:1056:41>>*/  /*<<camlinternalFormat.ml:1056:41>>*/ type_format_gen
             /*<<camlinternalFormat.ml:1056:41>>*/ (fmt_rest$5, fmtty_rest$5),
         fmtty$5 = match$15[2],
         fmt$6 = match$15[1];
         /*<<camlinternalFormat.ml:1057:6>>*/ return [0,
                [6, iconv$1, pad$8, prec$4, fmt$6],
                fmtty$5] /*<<camlinternalFormat.ml:1057:6>>*/ ;
       }
        /*<<camlinternalFormat.ml:1058:37>>*/ throw  /*<<camlinternalFormat.ml:1058:37>>*/ caml_maybe_attach_backtrace
               /*<<camlinternalFormat.ml:1058:37>>*/ (Type_mismatch, 1);
      case 7:
       var
        fmt_rest$6 = fmt[4],
        prec$5 = fmt[3],
        pad$9 = fmt[2],
        iconv$2 = fmt[1],
        match$16 =
           /*<<camlinternalFormat.ml:1061:10>>*/  /*<<camlinternalFormat.ml:1061:10>>*/ type_padprec
            /*<<camlinternalFormat.ml:1061:10>>*/ (pad$9, prec$5, fmtty0),
        pad$10 = match$16[1],
        match$17 = match$16[3];
       if(typeof match$17 !== "number" && 5 === match$17[0]){
        var
         fmtty_rest$6 = match$17[1],
         prec$6 = match$16[2],
         match$18 =
            /*<<camlinternalFormat.ml:1063:41>>*/  /*<<camlinternalFormat.ml:1063:41>>*/ type_format_gen
             /*<<camlinternalFormat.ml:1063:41>>*/ (fmt_rest$6, fmtty_rest$6),
         fmtty$6 = match$18[2],
         fmt$7 = match$18[1];
         /*<<camlinternalFormat.ml:1064:6>>*/ return [0,
                [7, iconv$2, pad$10, prec$6, fmt$7],
                fmtty$6] /*<<camlinternalFormat.ml:1064:6>>*/ ;
       }
        /*<<camlinternalFormat.ml:1065:37>>*/ throw  /*<<camlinternalFormat.ml:1065:37>>*/ caml_maybe_attach_backtrace
               /*<<camlinternalFormat.ml:1065:37>>*/ (Type_mismatch, 1);
      case 8:
       var
        fmt_rest$7 = fmt[4],
        prec$7 = fmt[3],
        pad$11 = fmt[2],
        fconv = fmt[1],
        match$19 =
           /*<<camlinternalFormat.ml:1068:10>>*/  /*<<camlinternalFormat.ml:1068:10>>*/ type_padprec
            /*<<camlinternalFormat.ml:1068:10>>*/ (pad$11, prec$7, fmtty0),
        pad$12 = match$19[1],
        match$20 = match$19[3];
       if(typeof match$20 !== "number" && 6 === match$20[0]){
        var
         fmtty_rest$7 = match$20[1],
         prec$8 = match$19[2],
         match$21 =
            /*<<camlinternalFormat.ml:1070:41>>*/  /*<<camlinternalFormat.ml:1070:41>>*/ type_format_gen
             /*<<camlinternalFormat.ml:1070:41>>*/ (fmt_rest$7, fmtty_rest$7),
         fmtty$7 = match$21[2],
         fmt$8 = match$21[1];
         /*<<camlinternalFormat.ml:1071:6>>*/ return [0,
                [8, fconv, pad$12, prec$8, fmt$8],
                fmtty$7] /*<<camlinternalFormat.ml:1071:6>>*/ ;
       }
        /*<<camlinternalFormat.ml:1072:37>>*/ throw  /*<<camlinternalFormat.ml:1072:37>>*/ caml_maybe_attach_backtrace
               /*<<camlinternalFormat.ml:1072:37>>*/ (Type_mismatch, 1);
      case 9:
       var
        fmt_rest$8 = fmt[2],
        pad$13 = fmt[1],
        match$22 =
           /*<<camlinternalFormat.ml:1075:10>>*/  /*<<camlinternalFormat.ml:1075:10>>*/ type_padding
            /*<<camlinternalFormat.ml:1075:10>>*/ (pad$13, fmtty0),
        pad$14 = match$22[1],
        match$23 = match$22[2];
       if(typeof match$23 !== "number" && 7 === match$23[0]){
        var
         fmtty_rest$8 = match$23[1],
         match$24 =
            /*<<camlinternalFormat.ml:1077:41>>*/  /*<<camlinternalFormat.ml:1077:41>>*/ type_format_gen
             /*<<camlinternalFormat.ml:1077:41>>*/ (fmt_rest$8, fmtty_rest$8),
         fmtty$8 = match$24[2],
         fmt$9 = match$24[1];
         /*<<camlinternalFormat.ml:1078:6>>*/ return [0,
                [9, pad$14, fmt$9],
                fmtty$8] /*<<camlinternalFormat.ml:1078:6>>*/ ;
       }
        /*<<camlinternalFormat.ml:1079:34>>*/ throw  /*<<camlinternalFormat.ml:1079:34>>*/ caml_maybe_attach_backtrace
               /*<<camlinternalFormat.ml:1079:34>>*/ (Type_mismatch, 1);
      case 10:
       var
        fmt_rest$9 = fmt[1],
        match$25 =
           /*<<camlinternalFormat.ml:1082:39>>*/  /*<<camlinternalFormat.ml:1082:39>>*/ type_format_gen
            /*<<camlinternalFormat.ml:1082:39>>*/ (fmt_rest$9, fmtty0),
        fmtty$9 = match$25[2],
        fmt$10 = match$25[1];
        /*<<camlinternalFormat.ml:1083:4>>*/ return [0, [10, fmt$10], fmtty$9] /*<<camlinternalFormat.ml:1083:4>>*/ ;
      case 11:
       var
        fmt_rest$10 = fmt[2],
        str = fmt[1],
        match$26 =
           /*<<camlinternalFormat.ml:1086:39>>*/  /*<<camlinternalFormat.ml:1086:39>>*/ type_format_gen
            /*<<camlinternalFormat.ml:1086:39>>*/ (fmt_rest$10, fmtty0),
        fmtty$10 = match$26[2],
        fmt$11 = match$26[1];
        /*<<camlinternalFormat.ml:1087:4>>*/ return [0,
               [11, str, fmt$11],
               fmtty$10] /*<<camlinternalFormat.ml:1087:4>>*/ ;
      case 12:
       var
        fmt_rest$11 = fmt[2],
        chr = fmt[1],
        match$27 =
           /*<<camlinternalFormat.ml:1089:39>>*/  /*<<camlinternalFormat.ml:1089:39>>*/ type_format_gen
            /*<<camlinternalFormat.ml:1089:39>>*/ (fmt_rest$11, fmtty0),
        fmtty$11 = match$27[2],
        fmt$12 = match$27[1];
        /*<<camlinternalFormat.ml:1090:4>>*/ return [0,
               [12, chr, fmt$12],
               fmtty$11] /*<<camlinternalFormat.ml:1090:4>>*/ ;
      case 13:
       if(typeof fmtty0 !== "number" && 8 === fmtty0[0]){
        var
         fmtty_rest$9 = fmtty0[2],
         sub_fmtty = fmtty0[1],
         fmt_rest$12 = fmt[3],
         sub_fmtty$0 = fmt[2],
         pad_opt = fmt[1];
         /*<<camlinternalFormat.ml:1094:7>>*/ if
         ( /*<<camlinternalFormat.ml:1094:7>>*/ caml_notequal
            /*<<camlinternalFormat.ml:1094:7>>*/ ([0, sub_fmtty$0],
            [0, sub_fmtty]))
          /*<<camlinternalFormat.ml:1094:56>>*/ throw  /*<<camlinternalFormat.ml:1094:56>>*/ caml_maybe_attach_backtrace
                 /*<<camlinternalFormat.ml:1094:56>>*/ (Type_mismatch, 1);
        var
         match$28 =
            /*<<camlinternalFormat.ml:1095:39>>*/  /*<<camlinternalFormat.ml:1095:39>>*/ type_format_gen
             /*<<camlinternalFormat.ml:1095:39>>*/ (fmt_rest$12, fmtty_rest$9),
         fmtty$12 = match$28[2],
         fmt$13 = match$28[1];
         /*<<camlinternalFormat.ml:1096:4>>*/ return [0,
                [13, pad_opt, sub_fmtty, fmt$13],
                fmtty$12] /*<<camlinternalFormat.ml:1096:4>>*/ ;
       }
       break;
      case 14:
       if(typeof fmtty0 !== "number" && 9 === fmtty0[0]){
        var
         fmtty_rest$10 = fmtty0[3],
         sub_fmtty1 = fmtty0[1],
         fmt_rest$13 = fmt[3],
         sub_fmtty$1 = fmt[2],
         pad_opt$0 = fmt[1],
         _cy_ =
            /*<<camlinternalFormat.ml:1099:42>>*/ [0,
             /*<<camlinternalFormat.ml:1099:52>>*/ caml_call1
              /*<<camlinternalFormat.ml:1099:52>>*/ (CamlinternalFormatBasics
               [2],
              sub_fmtty1)];
         /*<<camlinternalFormat.ml:1099:7>>*/ if
         ( /*<<camlinternalFormat.ml:1099:7>>*/ caml_notequal
            /*<<camlinternalFormat.ml:1099:7>>*/ ([0,
              /*<<camlinternalFormat.ml:1099:17>>*/ caml_call1
               /*<<camlinternalFormat.ml:1099:17>>*/ (CamlinternalFormatBasics
                [2],
               sub_fmtty$1)],
            _cy_))
          /*<<camlinternalFormat.ml:1100:6>>*/ throw  /*<<camlinternalFormat.ml:1100:6>>*/ caml_maybe_attach_backtrace
                 /*<<camlinternalFormat.ml:1100:6>>*/ (Type_mismatch, 1);
        var
         match$29 =
            /*<<camlinternalFormat.ml:1102:6>>*/  /*<<camlinternalFormat.ml:1102:6>>*/ type_format_gen
             /*<<camlinternalFormat.ml:1102:6>>*/ (fmt_rest$13,
              /*<<camlinternalFormat.ml:1102:31>>*/ caml_call1
               /*<<camlinternalFormat.ml:1102:31>>*/ (CamlinternalFormatBasics
                [2],
               fmtty_rest$10)),
         fmtty$13 = match$29[2],
         fmt$14 = match$29[1];
         /*<<camlinternalFormat.ml:1104:4>>*/ return [0,
                [14, pad_opt$0, sub_fmtty1, fmt$14],
                fmtty$13] /*<<camlinternalFormat.ml:1104:4>>*/ ;
       }
       break;
      case 15:
       if(typeof fmtty0 !== "number" && 10 === fmtty0[0]){
        var
         fmtty_rest$11 = fmtty0[1],
         fmt_rest$14 = fmt[1],
         match$30 =
            /*<<camlinternalFormat.ml:1107:39>>*/  /*<<camlinternalFormat.ml:1107:39>>*/ type_format_gen
             /*<<camlinternalFormat.ml:1107:39>>*/ (fmt_rest$14,
             fmtty_rest$11),
         fmtty$14 = match$30[2],
         fmt$15 = match$30[1];
         /*<<camlinternalFormat.ml:1108:4>>*/ return [0,
                [15, fmt$15],
                fmtty$14] /*<<camlinternalFormat.ml:1108:4>>*/ ;
       }
       break;
      case 16:
       if(typeof fmtty0 !== "number" && 11 === fmtty0[0]){
        var
         fmtty_rest$12 = fmtty0[1],
         fmt_rest$15 = fmt[1],
         match$31 =
            /*<<camlinternalFormat.ml:1110:39>>*/  /*<<camlinternalFormat.ml:1110:39>>*/ type_format_gen
             /*<<camlinternalFormat.ml:1110:39>>*/ (fmt_rest$15,
             fmtty_rest$12),
         fmtty$15 = match$31[2],
         fmt$16 = match$31[1];
         /*<<camlinternalFormat.ml:1111:4>>*/ return [0,
                [16, fmt$16],
                fmtty$15] /*<<camlinternalFormat.ml:1111:4>>*/ ;
       }
       break;
      case 17:
       var
        fmt_rest$16 = fmt[2],
        formatting_lit = fmt[1],
        match$32 =
           /*<<camlinternalFormat.ml:1115:39>>*/  /*<<camlinternalFormat.ml:1115:39>>*/ type_format_gen
            /*<<camlinternalFormat.ml:1115:39>>*/ (fmt_rest$16, fmtty0),
        fmtty$16 = match$32[2],
        fmt$17 = match$32[1];
        /*<<camlinternalFormat.ml:1116:4>>*/ return [0,
               [17, formatting_lit, fmt$17],
               fmtty$16] /*<<camlinternalFormat.ml:1116:4>>*/ ;
      case 18:
       var fmt_rest$17 = fmt[2], formatting_gen = fmt[1];
       if(0 === formatting_gen[0]){
        var
         match$36 = formatting_gen[1],
         str$0 = match$36[2],
         fmt1 = match$36[1],
         match$37 =
            /*<<camlinternalFormat.ml:1144:39>>*/  /*<<camlinternalFormat.ml:1144:39>>*/ type_format_gen
             /*<<camlinternalFormat.ml:1144:39>>*/ (fmt1, fmtty0),
         fmtty2 = match$37[2],
         fmt2 = match$37[1],
         match$38 =
            /*<<camlinternalFormat.ml:1145:39>>*/  /*<<camlinternalFormat.ml:1145:39>>*/ type_format_gen
             /*<<camlinternalFormat.ml:1145:39>>*/ (fmt_rest$17, fmtty2),
         fmtty3 = match$38[2],
         fmt3 = match$38[1];
         /*<<camlinternalFormat.ml:1146:4>>*/ return [0,
                [18, [0, [0, fmt2, str$0]], fmt3],
                fmtty3] /*<<camlinternalFormat.ml:1146:4>>*/ ;
       }
       var
        match$39 = formatting_gen[1],
        str$1 = match$39[2],
        fmt1$0 = match$39[1],
        match$40 =
           /*<<camlinternalFormat.ml:1148:39>>*/  /*<<camlinternalFormat.ml:1148:39>>*/ type_format_gen
            /*<<camlinternalFormat.ml:1148:39>>*/ (fmt1$0, fmtty0),
        fmtty2$0 = match$40[2],
        fmt2$0 = match$40[1],
        match$41 =
           /*<<camlinternalFormat.ml:1149:39>>*/  /*<<camlinternalFormat.ml:1149:39>>*/ type_format_gen
            /*<<camlinternalFormat.ml:1149:39>>*/ (fmt_rest$17, fmtty2$0),
        fmtty3$0 = match$41[2],
        fmt3$0 = match$41[1];
        /*<<camlinternalFormat.ml:1150:4>>*/ return [0,
               [18, [1, [0, fmt2$0, str$1]], fmt3$0],
               fmtty3$0] /*<<camlinternalFormat.ml:1150:4>>*/ ;
      case 19:
       if(typeof fmtty0 !== "number" && 13 === fmtty0[0]){
        var
         fmtty_rest$13 = fmtty0[1],
         fmt_rest$18 = fmt[1],
         match$33 =
            /*<<camlinternalFormat.ml:1122:39>>*/  /*<<camlinternalFormat.ml:1122:39>>*/ type_format_gen
             /*<<camlinternalFormat.ml:1122:39>>*/ (fmt_rest$18,
             fmtty_rest$13),
         fmtty$17 = match$33[2],
         fmt$18 = match$33[1];
         /*<<camlinternalFormat.ml:1123:4>>*/ return [0,
                [19, fmt$18],
                fmtty$17] /*<<camlinternalFormat.ml:1123:4>>*/ ;
       }
       break;
      case 20:
       if(typeof fmtty0 !== "number" && 1 === fmtty0[0]){
        var
         fmtty_rest$14 = fmtty0[1],
         fmt_rest$19 = fmt[3],
         char_set = fmt[2],
         width_opt = fmt[1],
         match$34 =
            /*<<camlinternalFormat.ml:1125:39>>*/  /*<<camlinternalFormat.ml:1125:39>>*/ type_format_gen
             /*<<camlinternalFormat.ml:1125:39>>*/ (fmt_rest$19,
             fmtty_rest$14),
         fmtty$18 = match$34[2],
         fmt$19 = match$34[1];
         /*<<camlinternalFormat.ml:1126:4>>*/ return [0,
                [20, width_opt, char_set, fmt$19],
                fmtty$18] /*<<camlinternalFormat.ml:1126:4>>*/ ;
       }
       break;
      case 21:
       if(typeof fmtty0 !== "number" && 2 === fmtty0[0]){
        var
         fmtty_rest$15 = fmtty0[1],
         fmt_rest$20 = fmt[2],
         counter = fmt[1],
         match$35 =
            /*<<camlinternalFormat.ml:1128:39>>*/  /*<<camlinternalFormat.ml:1128:39>>*/ type_format_gen
             /*<<camlinternalFormat.ml:1128:39>>*/ (fmt_rest$20,
             fmtty_rest$15),
         fmtty$19 = match$35[2],
         fmt$20 = match$35[1];
         /*<<camlinternalFormat.ml:1129:4>>*/ return [0,
                [21, counter, fmt$20],
                fmtty$19] /*<<camlinternalFormat.ml:1129:4>>*/ ;
       }
       break;
      case 23:
       var rest = fmt[2], ign = fmt[1];
       if(typeof ign !== "number")
        switch(ign[0]){
          case 0:
            /*<<camlinternalFormat.ml:1161:42>>*/ return  /*<<camlinternalFormat.ml:1161:42>>*/ type_ignored_param_one
                    /*<<camlinternalFormat.ml:1161:42>>*/ (ign, rest, fmtty0) /*<<camlinternalFormat.ml:1135:28>>*/ ;
          case 1:
            /*<<camlinternalFormat.ml:1162:42>>*/ return  /*<<camlinternalFormat.ml:1162:42>>*/ type_ignored_param_one
                    /*<<camlinternalFormat.ml:1162:42>>*/ (ign, rest, fmtty0) /*<<camlinternalFormat.ml:1135:28>>*/ ;
          case 2:
            /*<<camlinternalFormat.ml:1163:42>>*/ return  /*<<camlinternalFormat.ml:1163:42>>*/ type_ignored_param_one
                    /*<<camlinternalFormat.ml:1163:42>>*/ (ign, rest, fmtty0) /*<<camlinternalFormat.ml:1135:28>>*/ ;
          case 3:
            /*<<camlinternalFormat.ml:1164:42>>*/ return  /*<<camlinternalFormat.ml:1164:42>>*/ type_ignored_param_one
                    /*<<camlinternalFormat.ml:1164:42>>*/ (ign, rest, fmtty0) /*<<camlinternalFormat.ml:1135:28>>*/ ;
          case 4:
            /*<<camlinternalFormat.ml:1165:42>>*/ return  /*<<camlinternalFormat.ml:1165:42>>*/ type_ignored_param_one
                    /*<<camlinternalFormat.ml:1165:42>>*/ (ign, rest, fmtty0) /*<<camlinternalFormat.ml:1135:28>>*/ ;
          case 5:
            /*<<camlinternalFormat.ml:1166:42>>*/ return  /*<<camlinternalFormat.ml:1166:42>>*/ type_ignored_param_one
                    /*<<camlinternalFormat.ml:1166:42>>*/ (ign, rest, fmtty0) /*<<camlinternalFormat.ml:1135:28>>*/ ;
          case 6:
            /*<<camlinternalFormat.ml:1167:42>>*/ return  /*<<camlinternalFormat.ml:1167:42>>*/ type_ignored_param_one
                    /*<<camlinternalFormat.ml:1167:42>>*/ (ign, rest, fmtty0) /*<<camlinternalFormat.ml:1135:28>>*/ ;
          case 7:
            /*<<camlinternalFormat.ml:1168:42>>*/ return  /*<<camlinternalFormat.ml:1168:42>>*/ type_ignored_param_one
                    /*<<camlinternalFormat.ml:1168:42>>*/ (ign, rest, fmtty0) /*<<camlinternalFormat.ml:1135:28>>*/ ;
          case 8:
           var sub_fmtty$2 = ign[2], pad_opt$1 = ign[1];
            /*<<camlinternalFormat.ml:1173:4>>*/ return  /*<<camlinternalFormat.ml:1173:4>>*/ type_ignored_param_one
                    /*<<camlinternalFormat.ml:1173:4>>*/ ([8,
                     pad_opt$1,
                     sub_fmtty$2],
                    rest,
                    fmtty0) /*<<camlinternalFormat.ml:1135:28>>*/ ;
          case 9:
           var
            sub_fmtty$3 = ign[2],
            pad_opt$2 = ign[1],
            _cz_ =
               /*<<camlinternalFormat.ml:1176:6>>*/  /*<<camlinternalFormat.ml:1176:6>>*/ type_ignored_format_substituti
                /*<<camlinternalFormat.ml:1176:6>>*/ (sub_fmtty$3,
                rest,
                fmtty0),
            match$43 = _cz_[2],
            fmtty$21 = match$43[2],
            fmt$22 = match$43[1],
            sub_fmtty$4 = _cz_[1];
            /*<<camlinternalFormat.ml:1177:4>>*/ return [0,
                   [23, [9, pad_opt$2, sub_fmtty$4], fmt$22],
                   fmtty$21] /*<<camlinternalFormat.ml:1177:4>>*/ ;
          case 10:
            /*<<camlinternalFormat.ml:1169:42>>*/ return  /*<<camlinternalFormat.ml:1169:42>>*/ type_ignored_param_one
                    /*<<camlinternalFormat.ml:1169:42>>*/ (ign, rest, fmtty0) /*<<camlinternalFormat.ml:1135:28>>*/ ;
          default:
            /*<<camlinternalFormat.ml:1170:42>>*/ return  /*<<camlinternalFormat.ml:1170:42>>*/ type_ignored_param_one
                    /*<<camlinternalFormat.ml:1170:42>>*/ (ign, rest, fmtty0) /*<<camlinternalFormat.ml:1135:28>>*/ ;
        }
       switch(ign){
         case 0:
           /*<<camlinternalFormat.ml:1159:42>>*/ return  /*<<camlinternalFormat.ml:1159:42>>*/ type_ignored_param_one
                   /*<<camlinternalFormat.ml:1159:42>>*/ (ign, rest, fmtty0) /*<<camlinternalFormat.ml:1135:28>>*/ ;
         case 1:
           /*<<camlinternalFormat.ml:1160:42>>*/ return  /*<<camlinternalFormat.ml:1160:42>>*/ type_ignored_param_one
                   /*<<camlinternalFormat.ml:1160:42>>*/ (ign, rest, fmtty0) /*<<camlinternalFormat.ml:1135:28>>*/ ;
         case 2:
          if(typeof fmtty0 !== "number" && 14 === fmtty0[0]){
           var
            fmtty_rest$16 = fmtty0[1],
            match$42 =
               /*<<camlinternalFormat.ml:1183:41>>*/  /*<<camlinternalFormat.ml:1183:41>>*/ type_format_gen
                /*<<camlinternalFormat.ml:1183:41>>*/ (rest, fmtty_rest$16),
            fmtty$20 = match$42[2],
            fmt$21 = match$42[1];
            /*<<camlinternalFormat.ml:1184:6>>*/ return [0,
                   [23, 2, fmt$21],
                   fmtty$20] /*<<camlinternalFormat.ml:1184:6>>*/ ;
          }
           /*<<camlinternalFormat.ml:1185:11>>*/ throw  /*<<camlinternalFormat.ml:1185:11>>*/ caml_maybe_attach_backtrace
                  /*<<camlinternalFormat.ml:1185:11>>*/ (Type_mismatch, 1);
         default:
           /*<<camlinternalFormat.ml:1171:42>>*/ return  /*<<camlinternalFormat.ml:1171:42>>*/ type_ignored_param_one
                   /*<<camlinternalFormat.ml:1171:42>>*/ (ign, rest, fmtty0) /*<<camlinternalFormat.ml:1135:28>>*/ ;
       }
    }
     /*<<camlinternalFormat.ml:1135:9>>*/ throw  /*<<camlinternalFormat.ml:1135:9>>*/ caml_maybe_attach_backtrace
            /*<<camlinternalFormat.ml:1135:9>>*/ (Type_mismatch, 1);
    /*<<camlinternalFormat.ml:1135:28>>*/ }
   function type_ignored_param_one(ign, fmt, fmtty){
    var
     match =
        /*<<camlinternalFormat.ml:1194:37>>*/  /*<<camlinternalFormat.ml:1194:37>>*/ type_format_gen
         /*<<camlinternalFormat.ml:1194:37>>*/ (fmt, fmtty),
     fmtty$0 = match[2],
     fmt$0 = match[1];
     /*<<camlinternalFormat.ml:1195:2>>*/ return [0,
            [23, ign, fmt$0],
            fmtty$0] /*<<camlinternalFormat.ml:1195:2>>*/ ;
    /*<<camlinternalFormat.ml:1195:51>>*/ }
   function type_ignored_format_substituti(sub_fmtty, fmt, fmtty){
     /*<<camlinternalFormat.ml:1202:27>>*/ if(typeof sub_fmtty === "number")
      /*<<camlinternalFormat.ml:1276:4>>*/ return [0,
             0,
              /*<<camlinternalFormat.ml:1276:33>>*/ type_format_gen
               /*<<camlinternalFormat.ml:1276:33>>*/ (fmt, fmtty)] /*<<camlinternalFormat.ml:1276:4>>*/ ;
    switch(sub_fmtty[0]){
      case 0:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
        var
         fmtty_rest = fmtty[1],
         sub_fmtty_rest = sub_fmtty[1],
         match =
            /*<<camlinternalFormat.ml:1205:6>>*/  /*<<camlinternalFormat.ml:1205:6>>*/ type_ignored_format_substituti
             /*<<camlinternalFormat.ml:1205:6>>*/ (sub_fmtty_rest,
             fmt,
             fmtty_rest),
         fmt$0 = match[2],
         sub_fmtty_rest$0 = match[1];
         /*<<camlinternalFormat.ml:1206:4>>*/ return [0,
                [0, sub_fmtty_rest$0],
                fmt$0] /*<<camlinternalFormat.ml:1206:4>>*/ ;
       }
       break;
      case 1:
       if(typeof fmtty !== "number" && 1 === fmtty[0]){
        var
         fmtty_rest$0 = fmtty[1],
         sub_fmtty_rest$1 = sub_fmtty[1],
         match$0 =
            /*<<camlinternalFormat.ml:1209:6>>*/  /*<<camlinternalFormat.ml:1209:6>>*/ type_ignored_format_substituti
             /*<<camlinternalFormat.ml:1209:6>>*/ (sub_fmtty_rest$1,
             fmt,
             fmtty_rest$0),
         fmt$1 = match$0[2],
         sub_fmtty_rest$2 = match$0[1];
         /*<<camlinternalFormat.ml:1210:4>>*/ return [0,
                [1, sub_fmtty_rest$2],
                fmt$1] /*<<camlinternalFormat.ml:1210:4>>*/ ;
       }
       break;
      case 2:
       if(typeof fmtty !== "number" && 2 === fmtty[0]){
        var
         fmtty_rest$1 = fmtty[1],
         sub_fmtty_rest$3 = sub_fmtty[1],
         match$1 =
            /*<<camlinternalFormat.ml:1213:6>>*/  /*<<camlinternalFormat.ml:1213:6>>*/ type_ignored_format_substituti
             /*<<camlinternalFormat.ml:1213:6>>*/ (sub_fmtty_rest$3,
             fmt,
             fmtty_rest$1),
         fmt$2 = match$1[2],
         sub_fmtty_rest$4 = match$1[1];
         /*<<camlinternalFormat.ml:1214:4>>*/ return [0,
                [2, sub_fmtty_rest$4],
                fmt$2] /*<<camlinternalFormat.ml:1214:4>>*/ ;
       }
       break;
      case 3:
       if(typeof fmtty !== "number" && 3 === fmtty[0]){
        var
         fmtty_rest$2 = fmtty[1],
         sub_fmtty_rest$5 = sub_fmtty[1],
         match$2 =
            /*<<camlinternalFormat.ml:1217:6>>*/  /*<<camlinternalFormat.ml:1217:6>>*/ type_ignored_format_substituti
             /*<<camlinternalFormat.ml:1217:6>>*/ (sub_fmtty_rest$5,
             fmt,
             fmtty_rest$2),
         fmt$3 = match$2[2],
         sub_fmtty_rest$6 = match$2[1];
         /*<<camlinternalFormat.ml:1218:4>>*/ return [0,
                [3, sub_fmtty_rest$6],
                fmt$3] /*<<camlinternalFormat.ml:1218:4>>*/ ;
       }
       break;
      case 4:
       if(typeof fmtty !== "number" && 4 === fmtty[0]){
        var
         fmtty_rest$3 = fmtty[1],
         sub_fmtty_rest$7 = sub_fmtty[1],
         match$3 =
            /*<<camlinternalFormat.ml:1221:6>>*/  /*<<camlinternalFormat.ml:1221:6>>*/ type_ignored_format_substituti
             /*<<camlinternalFormat.ml:1221:6>>*/ (sub_fmtty_rest$7,
             fmt,
             fmtty_rest$3),
         fmt$4 = match$3[2],
         sub_fmtty_rest$8 = match$3[1];
         /*<<camlinternalFormat.ml:1222:4>>*/ return [0,
                [4, sub_fmtty_rest$8],
                fmt$4] /*<<camlinternalFormat.ml:1222:4>>*/ ;
       }
       break;
      case 5:
       if(typeof fmtty !== "number" && 5 === fmtty[0]){
        var
         fmtty_rest$4 = fmtty[1],
         sub_fmtty_rest$9 = sub_fmtty[1],
         match$4 =
            /*<<camlinternalFormat.ml:1225:6>>*/  /*<<camlinternalFormat.ml:1225:6>>*/ type_ignored_format_substituti
             /*<<camlinternalFormat.ml:1225:6>>*/ (sub_fmtty_rest$9,
             fmt,
             fmtty_rest$4),
         fmt$5 = match$4[2],
         sub_fmtty_rest$10 = match$4[1];
         /*<<camlinternalFormat.ml:1226:4>>*/ return [0,
                [5, sub_fmtty_rest$10],
                fmt$5] /*<<camlinternalFormat.ml:1226:4>>*/ ;
       }
       break;
      case 6:
       if(typeof fmtty !== "number" && 6 === fmtty[0]){
        var
         fmtty_rest$5 = fmtty[1],
         sub_fmtty_rest$11 = sub_fmtty[1],
         match$5 =
            /*<<camlinternalFormat.ml:1229:6>>*/  /*<<camlinternalFormat.ml:1229:6>>*/ type_ignored_format_substituti
             /*<<camlinternalFormat.ml:1229:6>>*/ (sub_fmtty_rest$11,
             fmt,
             fmtty_rest$5),
         fmt$6 = match$5[2],
         sub_fmtty_rest$12 = match$5[1];
         /*<<camlinternalFormat.ml:1230:4>>*/ return [0,
                [6, sub_fmtty_rest$12],
                fmt$6] /*<<camlinternalFormat.ml:1230:4>>*/ ;
       }
       break;
      case 7:
       if(typeof fmtty !== "number" && 7 === fmtty[0]){
        var
         fmtty_rest$6 = fmtty[1],
         sub_fmtty_rest$13 = sub_fmtty[1],
         match$6 =
            /*<<camlinternalFormat.ml:1233:6>>*/  /*<<camlinternalFormat.ml:1233:6>>*/ type_ignored_format_substituti
             /*<<camlinternalFormat.ml:1233:6>>*/ (sub_fmtty_rest$13,
             fmt,
             fmtty_rest$6),
         fmt$7 = match$6[2],
         sub_fmtty_rest$14 = match$6[1];
         /*<<camlinternalFormat.ml:1234:4>>*/ return [0,
                [7, sub_fmtty_rest$14],
                fmt$7] /*<<camlinternalFormat.ml:1234:4>>*/ ;
       }
       break;
      case 8:
       if(typeof fmtty !== "number" && 8 === fmtty[0]){
        var
         fmtty_rest$7 = fmtty[2],
         sub2_fmtty = fmtty[1],
         sub_fmtty_rest$15 = sub_fmtty[2],
         sub2_fmtty$0 = sub_fmtty[1];
         /*<<camlinternalFormat.ml:1254:7>>*/ if
         ( /*<<camlinternalFormat.ml:1254:7>>*/ caml_notequal
            /*<<camlinternalFormat.ml:1254:7>>*/ ([0, sub2_fmtty$0],
            [0, sub2_fmtty]))
          /*<<camlinternalFormat.ml:1254:58>>*/ throw  /*<<camlinternalFormat.ml:1254:58>>*/ caml_maybe_attach_backtrace
                 /*<<camlinternalFormat.ml:1254:58>>*/ (Type_mismatch, 1);
        var
         match$7 =
            /*<<camlinternalFormat.ml:1256:6>>*/  /*<<camlinternalFormat.ml:1256:6>>*/ type_ignored_format_substituti
             /*<<camlinternalFormat.ml:1256:6>>*/ (sub_fmtty_rest$15,
             fmt,
             fmtty_rest$7),
         fmt$8 = match$7[2],
         sub_fmtty_rest$16 = match$7[1];
         /*<<camlinternalFormat.ml:1257:4>>*/ return [0,
                [8, sub2_fmtty, sub_fmtty_rest$16],
                fmt$8] /*<<camlinternalFormat.ml:1257:4>>*/ ;
       }
       break;
      case 9:
       if(typeof fmtty !== "number" && 9 === fmtty[0]){
        var
         fmtty_rest$8 = fmtty[3],
         sub2_fmtty$1 = fmtty[2],
         sub1_fmtty = fmtty[1],
         sub_fmtty_rest$17 = sub_fmtty[3],
         sub2_fmtty$2 = sub_fmtty[2],
         sub1_fmtty$0 = sub_fmtty[1],
         _cw_ =
            /*<<camlinternalFormat.ml:1261:43>>*/ [0,
             /*<<camlinternalFormat.ml:1261:53>>*/ caml_call1
              /*<<camlinternalFormat.ml:1261:53>>*/ (CamlinternalFormatBasics
               [2],
              sub1_fmtty)];
         /*<<camlinternalFormat.ml:1261:7>>*/ if
         ( /*<<camlinternalFormat.ml:1261:7>>*/ caml_notequal
            /*<<camlinternalFormat.ml:1261:7>>*/ ([0,
              /*<<camlinternalFormat.ml:1261:17>>*/ caml_call1
               /*<<camlinternalFormat.ml:1261:17>>*/ (CamlinternalFormatBasics
                [2],
               sub1_fmtty$0)],
            _cw_))
          /*<<camlinternalFormat.ml:1262:9>>*/ throw  /*<<camlinternalFormat.ml:1262:9>>*/ caml_maybe_attach_backtrace
                 /*<<camlinternalFormat.ml:1262:9>>*/ (Type_mismatch, 1);
        var
         _cx_ =
            /*<<camlinternalFormat.ml:1263:43>>*/ [0,
             /*<<camlinternalFormat.ml:1263:53>>*/ caml_call1
              /*<<camlinternalFormat.ml:1263:53>>*/ (CamlinternalFormatBasics
               [2],
              sub2_fmtty$1)];
         /*<<camlinternalFormat.ml:1263:7>>*/ if
         ( /*<<camlinternalFormat.ml:1263:7>>*/ caml_notequal
            /*<<camlinternalFormat.ml:1263:7>>*/ ([0,
              /*<<camlinternalFormat.ml:1263:17>>*/ caml_call1
               /*<<camlinternalFormat.ml:1263:17>>*/ (CamlinternalFormatBasics
                [2],
               sub2_fmtty$2)],
            _cx_))
          /*<<camlinternalFormat.ml:1264:9>>*/ throw  /*<<camlinternalFormat.ml:1264:9>>*/ caml_maybe_attach_backtrace
                 /*<<camlinternalFormat.ml:1264:9>>*/ (Type_mismatch, 1);
        var
         sub_fmtty$0 =
            /*<<camlinternalFormat.ml:1265:21>>*/  /*<<camlinternalFormat.ml:1265:21>>*/ trans
             /*<<camlinternalFormat.ml:1265:21>>*/ ( /*<<camlinternalFormat.ml:1265:27>>*/ symm
               /*<<camlinternalFormat.ml:1265:27>>*/ (sub1_fmtty),
             sub2_fmtty$1),
         match$8 =
            /*<<camlinternalFormat.ml:1266:23>>*/  /*<<camlinternalFormat.ml:1266:23>>*/ fmtty_rel_det
             /*<<camlinternalFormat.ml:1266:23>>*/ (sub_fmtty$0),
         f4 = match$8[4],
         f2 = match$8[2];
         /*<<camlinternalFormat.ml:1267:15>>*/  /*<<camlinternalFormat.ml:1267:15>>*/ f2
          /*<<camlinternalFormat.ml:1267:15>>*/ (0);
         /*<<camlinternalFormat.ml:1268:15>>*/  /*<<camlinternalFormat.ml:1268:15>>*/ f4
          /*<<camlinternalFormat.ml:1268:15>>*/ (0);
        var
         match$9 =
            /*<<camlinternalFormat.ml:1270:6>>*/  /*<<camlinternalFormat.ml:1270:6>>*/ type_ignored_format_substituti
             /*<<camlinternalFormat.ml:1270:6>>*/ ( /*<<camlinternalFormat.ml:1270:39>>*/ caml_call1
               /*<<camlinternalFormat.ml:1270:39>>*/ (CamlinternalFormatBasics
                [2],
               sub_fmtty_rest$17),
             fmt,
             fmtty_rest$8),
         fmt$9 = match$9[2],
         sub_fmtty_rest$18 = match$9[1];
         /*<<camlinternalFormat.ml:1272:4>>*/ return [0,
                [9,
                 sub1_fmtty,
                 sub2_fmtty$1,
                  /*<<camlinternalFormat.ml:1273:36>>*/ symm
                   /*<<camlinternalFormat.ml:1273:36>>*/ (sub_fmtty_rest$18)],
                fmt$9] /*<<camlinternalFormat.ml:1272:4>>*/ ;
       }
       break;
      case 10:
       if(typeof fmtty !== "number" && 10 === fmtty[0]){
        var
         fmtty_rest$9 = fmtty[1],
         sub_fmtty_rest$19 = sub_fmtty[1],
         match$10 =
            /*<<camlinternalFormat.ml:1237:6>>*/  /*<<camlinternalFormat.ml:1237:6>>*/ type_ignored_format_substituti
             /*<<camlinternalFormat.ml:1237:6>>*/ (sub_fmtty_rest$19,
             fmt,
             fmtty_rest$9),
         fmt$10 = match$10[2],
         sub_fmtty_rest$20 = match$10[1];
         /*<<camlinternalFormat.ml:1238:4>>*/ return [0,
                [10, sub_fmtty_rest$20],
                fmt$10] /*<<camlinternalFormat.ml:1238:4>>*/ ;
       }
       break;
      case 11:
       if(typeof fmtty !== "number" && 11 === fmtty[0]){
        var
         fmtty_rest$10 = fmtty[1],
         sub_fmtty_rest$21 = sub_fmtty[1],
         match$11 =
            /*<<camlinternalFormat.ml:1241:6>>*/  /*<<camlinternalFormat.ml:1241:6>>*/ type_ignored_format_substituti
             /*<<camlinternalFormat.ml:1241:6>>*/ (sub_fmtty_rest$21,
             fmt,
             fmtty_rest$10),
         fmt$11 = match$11[2],
         sub_fmtty_rest$22 = match$11[1];
         /*<<camlinternalFormat.ml:1242:4>>*/ return [0,
                [11, sub_fmtty_rest$22],
                fmt$11] /*<<camlinternalFormat.ml:1242:4>>*/ ;
       }
       break;
      case 13:
       if(typeof fmtty !== "number" && 13 === fmtty[0]){
        var
         fmtty_rest$11 = fmtty[1],
         sub_fmtty_rest$23 = sub_fmtty[1],
         match$12 =
            /*<<camlinternalFormat.ml:1245:6>>*/  /*<<camlinternalFormat.ml:1245:6>>*/ type_ignored_format_substituti
             /*<<camlinternalFormat.ml:1245:6>>*/ (sub_fmtty_rest$23,
             fmt,
             fmtty_rest$11),
         fmt$12 = match$12[2],
         sub_fmtty_rest$24 = match$12[1];
         /*<<camlinternalFormat.ml:1246:4>>*/ return [0,
                [13, sub_fmtty_rest$24],
                fmt$12] /*<<camlinternalFormat.ml:1246:4>>*/ ;
       }
       break;
      case 14:
       if(typeof fmtty !== "number" && 14 === fmtty[0]){
        var
         fmtty_rest$12 = fmtty[1],
         sub_fmtty_rest$25 = sub_fmtty[1],
         match$13 =
            /*<<camlinternalFormat.ml:1249:6>>*/  /*<<camlinternalFormat.ml:1249:6>>*/ type_ignored_format_substituti
             /*<<camlinternalFormat.ml:1249:6>>*/ (sub_fmtty_rest$25,
             fmt,
             fmtty_rest$12),
         fmt$13 = match$13[2],
         sub_fmtty_rest$26 = match$13[1];
         /*<<camlinternalFormat.ml:1250:4>>*/ return [0,
                [14, sub_fmtty_rest$26],
                fmt$13] /*<<camlinternalFormat.ml:1250:4>>*/ ;
       }
       break;
    }
     /*<<camlinternalFormat.ml:1277:9>>*/ throw  /*<<camlinternalFormat.ml:1277:9>>*/ caml_maybe_attach_backtrace
            /*<<camlinternalFormat.ml:1277:9>>*/ (Type_mismatch, 1);
    /*<<camlinternalFormat.ml:1277:28>>*/ }
   function recast(fmt, fmtty){
    var
     _cv_ =
        /*<<camlinternalFormat.ml:1312:29>>*/  /*<<camlinternalFormat.ml:1312:29>>*/ symm
         /*<<camlinternalFormat.ml:1312:29>>*/ (fmtty);
     /*<<camlinternalFormat.ml:1312:18>>*/ return  /*<<camlinternalFormat.ml:1312:18>>*/ type_format
             /*<<camlinternalFormat.ml:1312:18>>*/ (fmt,
              /*<<camlinternalFormat.ml:1312:18>>*/ caml_call1
               /*<<camlinternalFormat.ml:1312:18>>*/ (CamlinternalFormatBasics
                [2],
               _cv_)) /*<<camlinternalFormat.ml:1312:42>>*/ ;
    /*<<camlinternalFormat.ml:1312:42>>*/ }
   function fix_padding(padty, width, str){
    var
     len = caml_ml_string_length(str),
     padty$0 =  /*<<camlinternalFormat.ml:1320:2>>*/ 0 <= width ? padty : 0,
     width$0 =
        /*<<camlinternalFormat.ml:1321:4>>*/  /*<<camlinternalFormat.ml:1321:4>>*/ caml_call1
         /*<<camlinternalFormat.ml:1321:4>>*/ (Stdlib[18], width);
    if(width$0 <= len)
      /*<<camlinternalFormat.ml:1332:23>>*/ return str /*<<camlinternalFormat.ml:1332:23>>*/ ;
    var
     _cu_ = 2 === padty$0 ? 48 : 32,
     res =
        /*<<camlinternalFormat.ml:1333:14>>*/  /*<<camlinternalFormat.ml:1333:14>>*/ caml_call2
         /*<<camlinternalFormat.ml:1333:14>>*/ (Stdlib_Bytes[1],
         width$0,
         _cu_);
     /*<<camlinternalFormat.ml:1334:4>>*/ switch(padty$0){
      case 0:
        /*<<camlinternalFormat.ml:1335:15>>*/  /*<<camlinternalFormat.ml:1335:15>>*/ caml_call5
         /*<<camlinternalFormat.ml:1335:15>>*/ (Stdlib_String[6],
         str,
         0,
         res,
         0,
         len);
       break;
      case 1:
        /*<<camlinternalFormat.ml:1336:15>>*/  /*<<camlinternalFormat.ml:1336:15>>*/ caml_call5
         /*<<camlinternalFormat.ml:1336:15>>*/ (Stdlib_String[6],
         str,
         0,
         res,
         width$0 - len | 0,
         len);
       break;
      default:
       a:
       if(0 < len){
         /*<<camlinternalFormat.ml:1337:29>>*/ if
         (43
          !==
            /*<<camlinternalFormat.ml:1337:29>>*/ caml_string_get
             /*<<camlinternalFormat.ml:1337:29>>*/ (str, 0)
          &&
           45
           !==
             /*<<camlinternalFormat.ml:1337:46>>*/ caml_string_get
              /*<<camlinternalFormat.ml:1337:46>>*/ (str, 0)
           &&
            32
            !==
              /*<<camlinternalFormat.ml:1337:63>>*/ caml_string_get
               /*<<camlinternalFormat.ml:1337:63>>*/ (str, 0))
         break a;
         /*<<camlinternalFormat.ml:1338:6>>*/  /*<<camlinternalFormat.ml:1338:6>>*/ caml_bytes_set
          /*<<camlinternalFormat.ml:1338:6>>*/ (res,
          0,
           /*<<camlinternalFormat.ml:1338:22>>*/ caml_string_get
            /*<<camlinternalFormat.ml:1338:22>>*/ (str, 0));
         /*<<camlinternalFormat.ml:1339:6>>*/  /*<<camlinternalFormat.ml:1339:6>>*/ caml_call5
          /*<<camlinternalFormat.ml:1339:6>>*/ (Stdlib_String[6],
          str,
          1,
          res,
          (width$0 - len | 0) + 1 | 0,
          len - 1 | 0);
        break;
       }
       a:
       if
        (1 < len
         &&
          48
          ===
            /*<<camlinternalFormat.ml:1340:28>>*/ caml_string_get
             /*<<camlinternalFormat.ml:1340:28>>*/ (str, 0)){
         /*<<camlinternalFormat.ml:1340:46>>*/ if
         (120
          !==
            /*<<camlinternalFormat.ml:1340:46>>*/ caml_string_get
             /*<<camlinternalFormat.ml:1340:46>>*/ (str, 1)
          &&
           88
           !==
             /*<<camlinternalFormat.ml:1340:63>>*/ caml_string_get
              /*<<camlinternalFormat.ml:1340:63>>*/ (str, 1))
         break a;
         /*<<camlinternalFormat.ml:1341:6>>*/  /*<<camlinternalFormat.ml:1341:6>>*/ caml_bytes_set
          /*<<camlinternalFormat.ml:1341:6>>*/ (res,
          1,
           /*<<camlinternalFormat.ml:1341:22>>*/ caml_string_get
            /*<<camlinternalFormat.ml:1341:22>>*/ (str, 1));
         /*<<camlinternalFormat.ml:1342:6>>*/  /*<<camlinternalFormat.ml:1342:6>>*/ caml_call5
          /*<<camlinternalFormat.ml:1342:6>>*/ (Stdlib_String[6],
          str,
          2,
          res,
          (width$0 - len | 0) + 2 | 0,
          len - 2 | 0);
        break;
       }
        /*<<camlinternalFormat.ml:1344:6>>*/  /*<<camlinternalFormat.ml:1344:6>>*/ caml_call5
         /*<<camlinternalFormat.ml:1344:6>>*/ (Stdlib_String[6],
         str,
         0,
         res,
         width$0 - len | 0,
         len);
    }
     /*<<camlinternalFormat.ml:1346:4>>*/ return  /*<<camlinternalFormat.ml:1346:4>>*/ caml_call1
             /*<<camlinternalFormat.ml:1346:4>>*/ (Stdlib_Bytes[44], res) /*<<camlinternalFormat.ml:1346:30>>*/ ;
    /*<<camlinternalFormat.ml:1346:30>>*/ }
   function fix_int_precision(prec, str){
    var
     prec$0 =
        /*<<camlinternalFormat.ml:1350:13>>*/  /*<<camlinternalFormat.ml:1350:13>>*/ caml_call1
         /*<<camlinternalFormat.ml:1350:13>>*/ (Stdlib[18], prec),
     len =
        /*<<camlinternalFormat.ml:1351:2>>*/  /*<<camlinternalFormat.ml:1351:2>>*/ caml_ml_string_length
         /*<<camlinternalFormat.ml:1351:2>>*/ (str),
     c =
        /*<<camlinternalFormat.ml:1352:8>>*/  /*<<camlinternalFormat.ml:1352:8>>*/ caml_string_get
         /*<<camlinternalFormat.ml:1352:8>>*/ (str, 0);
    a:
    {
     b:
     {
      if(58 > c){
       if(32 !== c){
        if(43 > c) break a;
        switch(c - 43 | 0){
          case 5:
           c:
           if(len < (prec$0 + 2 | 0) && 1 < len){
             /*<<camlinternalFormat.ml:1358:43>>*/ if
             (120
              !==
                /*<<camlinternalFormat.ml:1358:43>>*/ caml_string_get
                 /*<<camlinternalFormat.ml:1358:43>>*/ (str, 1)
              &&
               88
               !==
                 /*<<camlinternalFormat.ml:1358:60>>*/ caml_string_get
                  /*<<camlinternalFormat.ml:1358:60>>*/ (str, 1))
             break c;
            var
             res$1 =
                /*<<camlinternalFormat.ml:1359:14>>*/  /*<<camlinternalFormat.ml:1359:14>>*/ caml_call2
                 /*<<camlinternalFormat.ml:1359:14>>*/ (Stdlib_Bytes[1],
                 prec$0 + 2 | 0,
                 48);
             /*<<camlinternalFormat.ml:1360:4>>*/  /*<<camlinternalFormat.ml:1360:4>>*/ caml_bytes_set
              /*<<camlinternalFormat.ml:1360:4>>*/ (res$1,
              1,
               /*<<camlinternalFormat.ml:1360:20>>*/ caml_string_get
                /*<<camlinternalFormat.ml:1360:20>>*/ (str, 1));
             /*<<camlinternalFormat.ml:1361:4>>*/  /*<<camlinternalFormat.ml:1361:4>>*/ caml_call5
              /*<<camlinternalFormat.ml:1361:4>>*/ (Stdlib_String[6],
              str,
              2,
              res$1,
              (prec$0 - len | 0) + 4 | 0,
              len - 2 | 0);
             /*<<camlinternalFormat.ml:1361:4>>*/ return  /*<<camlinternalFormat.ml:1361:4>>*/ caml_call1
                     /*<<camlinternalFormat.ml:1361:4>>*/ (Stdlib_Bytes[44],
                     res$1) /*<<camlinternalFormat.ml:1368:7>>*/ ;
           }
           break b;
          case 0:
          case 2: break;
          case 1:
          case 3:
          case 4:
           break a;
          default: break b;
        }
       }
       if(len >= (prec$0 + 1 | 0)) break a;
       var
        res$0 =
           /*<<camlinternalFormat.ml:1354:14>>*/  /*<<camlinternalFormat.ml:1354:14>>*/ caml_call2
            /*<<camlinternalFormat.ml:1354:14>>*/ (Stdlib_Bytes[1],
            prec$0 + 1 | 0,
            48);
        /*<<camlinternalFormat.ml:1355:4>>*/  /*<<camlinternalFormat.ml:1355:4>>*/ caml_bytes_set
         /*<<camlinternalFormat.ml:1355:4>>*/ (res$0, 0, c);
        /*<<camlinternalFormat.ml:1356:4>>*/  /*<<camlinternalFormat.ml:1356:4>>*/ caml_call5
         /*<<camlinternalFormat.ml:1356:4>>*/ (Stdlib_String[6],
         str,
         1,
         res$0,
         (prec$0 - len | 0) + 2 | 0,
         len - 1 | 0);
        /*<<camlinternalFormat.ml:1356:4>>*/ return  /*<<camlinternalFormat.ml:1356:4>>*/ caml_call1
                /*<<camlinternalFormat.ml:1356:4>>*/ (Stdlib_Bytes[44], res$0) /*<<camlinternalFormat.ml:1368:7>>*/ ;
      }
      if(71 <= c){if(5 < c - 97 >>> 0) break a;} else if(65 > c) break a;
     }
     if(len < prec$0){
      var
       res =
          /*<<camlinternalFormat.ml:1364:14>>*/  /*<<camlinternalFormat.ml:1364:14>>*/ caml_call2
           /*<<camlinternalFormat.ml:1364:14>>*/ (Stdlib_Bytes[1], prec$0, 48);
       /*<<camlinternalFormat.ml:1365:4>>*/  /*<<camlinternalFormat.ml:1365:4>>*/ caml_call5
        /*<<camlinternalFormat.ml:1365:4>>*/ (Stdlib_String[6],
        str,
        0,
        res,
        prec$0 - len | 0,
        len);
       /*<<camlinternalFormat.ml:1365:4>>*/ return  /*<<camlinternalFormat.ml:1365:4>>*/ caml_call1
               /*<<camlinternalFormat.ml:1365:4>>*/ (Stdlib_Bytes[44], res) /*<<camlinternalFormat.ml:1368:7>>*/ ;
     }
    }
     /*<<camlinternalFormat.ml:1368:4>>*/ return str /*<<camlinternalFormat.ml:1368:4>>*/ ;
    /*<<camlinternalFormat.ml:1368:7>>*/ }
   function string_to_caml_string(str){
    var
     str$0 =
        /*<<camlinternalFormat.ml:1372:12>>*/  /*<<camlinternalFormat.ml:1372:12>>*/ caml_call1
         /*<<camlinternalFormat.ml:1372:12>>*/ (Stdlib_String[25], str),
     l =
        /*<<camlinternalFormat.ml:1373:2>>*/  /*<<camlinternalFormat.ml:1373:2>>*/ caml_ml_string_length
         /*<<camlinternalFormat.ml:1373:2>>*/ (str$0),
     res =
        /*<<camlinternalFormat.ml:1374:12>>*/  /*<<camlinternalFormat.ml:1374:12>>*/ caml_call2
         /*<<camlinternalFormat.ml:1374:12>>*/ (Stdlib_Bytes[1],
         l + 2 | 0,
         34);
     /*<<camlinternalFormat.ml:1375:2>>*/  /*<<camlinternalFormat.ml:1375:2>>*/ caml_blit_string
      /*<<camlinternalFormat.ml:1375:2>>*/ (str$0, 0, res, 1, l);
     /*<<camlinternalFormat.ml:1375:2>>*/ return  /*<<camlinternalFormat.ml:1375:2>>*/ caml_call1
             /*<<camlinternalFormat.ml:1375:2>>*/ (Stdlib_Bytes[44], res) /*<<camlinternalFormat.ml:1376:28>>*/ ;
    /*<<camlinternalFormat.ml:1376:28>>*/ }
   function format_of_fconv(fconv, prec){
    var
     prec$0 =
        /*<<camlinternalFormat.ml:1414:15>>*/  /*<<camlinternalFormat.ml:1414:15>>*/ caml_call1
         /*<<camlinternalFormat.ml:1414:15>>*/ (Stdlib[18], prec),
     symb =
        /*<<camlinternalFormat.ml:1415:15>>*/  /*<<camlinternalFormat.ml:1415:15>>*/ char_of_fconv
         /*<<camlinternalFormat.ml:1415:15>>*/ (_r_, fconv),
     buf =
        /*<<camlinternalFormat.ml:1416:14>>*/  /*<<camlinternalFormat.ml:1416:14>>*/ buffer_create
         /*<<camlinternalFormat.ml:1416:14>>*/ (16);
     /*<<camlinternalFormat.ml:1417:4>>*/  /*<<camlinternalFormat.ml:1417:4>>*/ buffer_add_char
      /*<<camlinternalFormat.ml:1417:4>>*/ (buf, 37);
     /*<<camlinternalFormat.ml:1418:4>>*/  /*<<camlinternalFormat.ml:1418:4>>*/ bprint_fconv_flag
      /*<<camlinternalFormat.ml:1418:4>>*/ (buf, fconv);
     /*<<camlinternalFormat.ml:1419:4>>*/  /*<<camlinternalFormat.ml:1419:4>>*/ buffer_add_char
      /*<<camlinternalFormat.ml:1419:4>>*/ (buf, 46);
     /*<<camlinternalFormat.ml:1420:4>>*/  /*<<camlinternalFormat.ml:1420:4>>*/ buffer_add_string
      /*<<camlinternalFormat.ml:1420:4>>*/ (buf,
       /*<<camlinternalFormat.ml:1420:26>>*/ caml_call1
        /*<<camlinternalFormat.ml:1420:26>>*/ (Stdlib_Int[12], prec$0));
     /*<<camlinternalFormat.ml:1421:4>>*/  /*<<camlinternalFormat.ml:1421:4>>*/ buffer_add_char
      /*<<camlinternalFormat.ml:1421:4>>*/ (buf, symb);
     /*<<camlinternalFormat.ml:1421:4>>*/ return  /*<<camlinternalFormat.ml:1421:4>>*/ buffer_contents
             /*<<camlinternalFormat.ml:1421:4>>*/ (buf) /*<<camlinternalFormat.ml:1422:23>>*/ ;
    /*<<camlinternalFormat.ml:1422:23>>*/ }
   function transform_int_alt(iconv, s){
     /*<<camlinternalFormat.ml:1425:2>>*/ if(13 > iconv)
      /*<<camlinternalFormat.ml:1447:9>>*/ return s /*<<camlinternalFormat.ml:1447:9>>*/ ;
    var
     n =  /*<<camlinternalFormat.ml:1428:14>>*/ [0, 0],
     _cp_ = caml_ml_string_length(s) - 1 | 0,
     _co_ =  /*<<camlinternalFormat.ml:1428:14>>*/ 0;
    if(_cp_ >= 0){
     var i$0 = _co_;
     for(;;){
      if(9 >= caml_string_unsafe_get(s, i$0) - 48 >>> 0) n[1]++;
      var _ct_ =  /*<<camlinternalFormat.ml:1429:6>>*/ i$0 + 1 | 0;
      if(_cp_ === i$0) break;
      i$0 = _ct_;
     }
    }
    var
     digits = n[1],
     buf =
        /*<<camlinternalFormat.ml:1436:14>>*/  /*<<camlinternalFormat.ml:1436:14>>*/ caml_create_bytes
         /*<<camlinternalFormat.ml:1436:14>>*/ (caml_ml_string_length(s)
         + ((digits - 1 | 0) / 3 | 0)
         | 0),
     pos =  /*<<camlinternalFormat.ml:1437:14>>*/ [0, 0];
    function put(c){
      /*<<camlinternalFormat.ml:1438:16>>*/  /*<<camlinternalFormat.ml:1438:16>>*/ caml_bytes_set
       /*<<camlinternalFormat.ml:1438:16>>*/ (buf, pos[1], c);
     pos[1]++;
     /*<<camlinternalFormat.ml:1438:46>>*/ }
    var
     left =
        /*<<camlinternalFormat.ml:1439:15>>*/ [0,
        ((digits - 1 | 0) % 3 | 0) + 1 | 0],
     _cr_ = caml_ml_string_length(s) - 1 | 0,
     _cq_ =  /*<<camlinternalFormat.ml:1439:15>>*/ 0;
    if(_cr_ >= 0){
     var i = _cq_;
     for(;;){
      var c = caml_string_unsafe_get(s, i);
      if(9 < c - 48 >>> 0)
        /*<<camlinternalFormat.ml:1444:13>>*/  /*<<camlinternalFormat.ml:1444:13>>*/ put
         /*<<camlinternalFormat.ml:1444:13>>*/ (c);
      else{
       if(0 === left[1]){
         /*<<camlinternalFormat.ml:1443:29>>*/  /*<<camlinternalFormat.ml:1443:29>>*/ put
          /*<<camlinternalFormat.ml:1443:29>>*/ (95);
        left[1] = 3;
       }
       left[1]--;
        /*<<camlinternalFormat.ml:1443:61>>*/  /*<<camlinternalFormat.ml:1443:61>>*/ put
         /*<<camlinternalFormat.ml:1443:61>>*/ (c);
      }
      var _cs_ =  /*<<camlinternalFormat.ml:1440:4>>*/ i + 1 | 0;
      if(_cr_ === i) break;
      i = _cs_;
     }
    }
     /*<<camlinternalFormat.ml:1446:4>>*/ return  /*<<camlinternalFormat.ml:1446:4>>*/ caml_call1
             /*<<camlinternalFormat.ml:1446:4>>*/ (Stdlib_Bytes[44], buf) /*<<camlinternalFormat.ml:1447:10>>*/ ;
    /*<<camlinternalFormat.ml:1447:10>>*/ }
   function convert_int(iconv, n){
     /*<<camlinternalFormat.ml:1451:2>>*/ switch(iconv){
      case 1:
       var _cn_ = cst_d$0; break;
      case 2:
       var _cn_ = cst_d$1; break;
      case 4:
       var _cn_ = cst_i$1; break;
      case 5:
       var _cn_ = cst_i$2; break;
      case 6:
       var _cn_ = cst_x; break;
      case 7:
       var _cn_ = cst_x$0; break;
      case 8:
       var _cn_ = cst_X; break;
      case 9:
       var _cn_ = cst_X$0; break;
      case 10:
       var _cn_ = cst_o; break;
      case 11:
       var _cn_ = cst_o$0; break;
      case 0:
      case 13:
       var _cn_ = cst_d; break;
      case 3:
      case 14:
       var _cn_ = cst_i$0; break;
      default: var _cn_ = cst_u;
    }
     /*<<camlinternalFormat.ml:1451:26>>*/ return  /*<<camlinternalFormat.ml:1451:26>>*/ transform_int_alt
             /*<<camlinternalFormat.ml:1451:26>>*/ (iconv,
              /*<<camlinternalFormat.ml:1451:26>>*/ caml_format_int
               /*<<camlinternalFormat.ml:1451:26>>*/ (_cn_, n)) /*<<camlinternalFormat.ml:1451:64>>*/ ;
    /*<<camlinternalFormat.ml:1451:64>>*/ }
   function convert_int32(iconv, n){
     /*<<camlinternalFormat.ml:1453:2>>*/ switch(iconv){
      case 1:
       var _cm_ = cst_ld$0; break;
      case 2:
       var _cm_ = cst_ld$1; break;
      case 4:
       var _cm_ = cst_li$1; break;
      case 5:
       var _cm_ = cst_li$2; break;
      case 6:
       var _cm_ = cst_lx; break;
      case 7:
       var _cm_ = cst_lx$0; break;
      case 8:
       var _cm_ = cst_lX; break;
      case 9:
       var _cm_ = cst_lX$0; break;
      case 10:
       var _cm_ = cst_lo; break;
      case 11:
       var _cm_ = cst_lo$0; break;
      case 0:
      case 13:
       var _cm_ = cst_ld; break;
      case 3:
      case 14:
       var _cm_ = cst_li$0; break;
      default: var _cm_ = cst_lu;
    }
     /*<<camlinternalFormat.ml:1453:26>>*/ return  /*<<camlinternalFormat.ml:1453:26>>*/ transform_int_alt
             /*<<camlinternalFormat.ml:1453:26>>*/ (iconv,
              /*<<camlinternalFormat.ml:1453:26>>*/ caml_format_int
               /*<<camlinternalFormat.ml:1453:26>>*/ (_cm_, n)) /*<<camlinternalFormat.ml:1453:67>>*/ ;
    /*<<camlinternalFormat.ml:1453:67>>*/ }
   function convert_nativeint(iconv, n){
     /*<<camlinternalFormat.ml:1455:2>>*/ switch(iconv){
      case 1:
       var _cl_ = cst_nd$0; break;
      case 2:
       var _cl_ = cst_nd$1; break;
      case 4:
       var _cl_ = cst_ni$1; break;
      case 5:
       var _cl_ = cst_ni$2; break;
      case 6:
       var _cl_ = cst_nx; break;
      case 7:
       var _cl_ = cst_nx$0; break;
      case 8:
       var _cl_ = cst_nX; break;
      case 9:
       var _cl_ = cst_nX$0; break;
      case 10:
       var _cl_ = cst_no; break;
      case 11:
       var _cl_ = cst_no$0; break;
      case 0:
      case 13:
       var _cl_ = cst_nd; break;
      case 3:
      case 14:
       var _cl_ = cst_ni$0; break;
      default: var _cl_ = cst_nu;
    }
     /*<<camlinternalFormat.ml:1455:26>>*/ return  /*<<camlinternalFormat.ml:1455:26>>*/ transform_int_alt
             /*<<camlinternalFormat.ml:1455:26>>*/ (iconv,
              /*<<camlinternalFormat.ml:1455:26>>*/ caml_format_int
               /*<<camlinternalFormat.ml:1455:26>>*/ (_cl_, n)) /*<<camlinternalFormat.ml:1455:71>>*/ ;
    /*<<camlinternalFormat.ml:1455:71>>*/ }
   function convert_int64(iconv, n){
     /*<<camlinternalFormat.ml:1457:2>>*/ switch(iconv){
      case 1:
       var _ck_ = cst_Ld$0; break;
      case 2:
       var _ck_ = cst_Ld$1; break;
      case 4:
       var _ck_ = cst_Li$1; break;
      case 5:
       var _ck_ = cst_Li$2; break;
      case 6:
       var _ck_ = cst_Lx; break;
      case 7:
       var _ck_ = cst_Lx$0; break;
      case 8:
       var _ck_ = cst_LX; break;
      case 9:
       var _ck_ = cst_LX$0; break;
      case 10:
       var _ck_ = cst_Lo; break;
      case 11:
       var _ck_ = cst_Lo$0; break;
      case 0:
      case 13:
       var _ck_ = cst_Ld; break;
      case 3:
      case 14:
       var _ck_ = cst_Li$0; break;
      default: var _ck_ = cst_Lu;
    }
     /*<<camlinternalFormat.ml:1457:26>>*/ return  /*<<camlinternalFormat.ml:1457:26>>*/ transform_int_alt
             /*<<camlinternalFormat.ml:1457:26>>*/ (iconv,
              /*<<camlinternalFormat.ml:1457:26>>*/ runtime.caml_int64_format
               /*<<camlinternalFormat.ml:1457:26>>*/ (_ck_, n)) /*<<camlinternalFormat.ml:1457:67>>*/ ;
    /*<<camlinternalFormat.ml:1457:67>>*/ }
   function convert_float(fconv, prec, x){
    function hex(param){
      /*<<camlinternalFormat.ml:1463:4>>*/ switch(fconv[1]){
       case 0:
        var sign = 45; break;
       case 1:
        var sign = 43; break;
       default: var sign = 32;
     }
      /*<<camlinternalFormat.ml:1468:4>>*/ return  /*<<camlinternalFormat.ml:1468:4>>*/ runtime.caml_hexstring_of_float
              /*<<camlinternalFormat.ml:1468:4>>*/ (x, prec, sign) /*<<camlinternalFormat.ml:1468:34>>*/ ;
     /*<<camlinternalFormat.ml:1468:34>>*/ }
    function caml_special_val(str){
     var
      match =
         /*<<camlinternalFormat.ml:1477:35>>*/  /*<<camlinternalFormat.ml:1477:35>>*/ runtime.caml_classify_float
          /*<<camlinternalFormat.ml:1477:35>>*/ (x);
     return 3 === match
             ? x < 0. ? cst_neg_infinity : cst_infinity
             : 4 <= match ? cst_nan : str /*<<camlinternalFormat.ml:1480:21>>*/ ;
     /*<<camlinternalFormat.ml:1480:21>>*/ }
    switch(fconv[2]){
      case 5:
       var
        str =
           /*<<camlinternalFormat.ml:1486:14>>*/  /*<<camlinternalFormat.ml:1486:14>>*/ caml_format_float
            /*<<camlinternalFormat.ml:1486:14>>*/ ( /*<<camlinternalFormat.ml:1486:27>>*/ format_of_fconv
              /*<<camlinternalFormat.ml:1486:27>>*/ (fconv, prec),
            x),
        len = caml_ml_string_length(str),
        i = 0;
        /*<<camlinternalFormat.ml:1472:6>>*/ for(;;){
        if(i === len)
         var _ch_ = 0;
        else{
         var
          _cg_ =
             /*<<camlinternalFormat.ml:1473:14>>*/  /*<<camlinternalFormat.ml:1473:14>>*/ caml_string_get
              /*<<camlinternalFormat.ml:1473:14>>*/ (str, i)
            - 46
            | 0;
         a:
         {
          if(23 < _cg_ >>> 0){
           if(55 === _cg_) break a;
          }
          else if(21 < _cg_ - 1 >>> 0) break a;
          var i$0 =  /*<<camlinternalFormat.ml:1475:15>>*/ i + 1 | 0;
          i = i$0;
          continue;
         }
         var _ch_ = 1;
        }
        var
         _ci_ =
            /*<<camlinternalFormat.ml:1476:7>>*/ _ch_
            ? str
            :  /*<<camlinternalFormat.ml:1476:32>>*/ caml_call2
               /*<<camlinternalFormat.ml:1476:32>>*/ (Stdlib[28], str, cst$17);
         /*<<camlinternalFormat.ml:1487:21>>*/ return  /*<<camlinternalFormat.ml:1487:21>>*/ caml_special_val
                 /*<<camlinternalFormat.ml:1487:21>>*/ (_ci_) /*<<camlinternalFormat.ml:1489:47>>*/ ;
       }
      case 6:
        /*<<camlinternalFormat.ml:1482:15>>*/ return  /*<<camlinternalFormat.ml:1482:15>>*/ hex
                /*<<camlinternalFormat.ml:1482:15>>*/ (0) /*<<camlinternalFormat.ml:1489:47>>*/ ;
      case 7:
       var
        _cj_ =
           /*<<camlinternalFormat.ml:1483:38>>*/  /*<<camlinternalFormat.ml:1483:38>>*/ hex
            /*<<camlinternalFormat.ml:1483:38>>*/ (0);
        /*<<camlinternalFormat.ml:1483:38>>*/ return  /*<<camlinternalFormat.ml:1483:38>>*/ caml_call1
                /*<<camlinternalFormat.ml:1483:38>>*/ (Stdlib_String[26],
                _cj_) /*<<camlinternalFormat.ml:1489:47>>*/ ;
      case 8:
        /*<<camlinternalFormat.ml:1484:33>>*/ return  /*<<camlinternalFormat.ml:1484:33>>*/ caml_special_val
                /*<<camlinternalFormat.ml:1484:33>>*/ ( /*<<camlinternalFormat.ml:1484:33>>*/ hex
                  /*<<camlinternalFormat.ml:1484:33>>*/ (0)) /*<<camlinternalFormat.ml:1489:47>>*/ ;
      default:
        /*<<camlinternalFormat.ml:1489:4>>*/ return  /*<<camlinternalFormat.ml:1489:4>>*/ caml_format_float
                /*<<camlinternalFormat.ml:1489:4>>*/ ( /*<<camlinternalFormat.ml:1489:17>>*/ format_of_fconv
                  /*<<camlinternalFormat.ml:1489:17>>*/ (fconv, prec),
                x) /*<<camlinternalFormat.ml:1489:47>>*/ ;
    }
    /*<<camlinternalFormat.ml:1489:47>>*/ }
   function string_of_fmtty(fmtty){
    var
     buf =
        /*<<camlinternalFormat.ml:1501:12>>*/  /*<<camlinternalFormat.ml:1501:12>>*/ buffer_create
         /*<<camlinternalFormat.ml:1501:12>>*/ (16);
     /*<<camlinternalFormat.ml:1502:2>>*/  /*<<camlinternalFormat.ml:1502:2>>*/ bprint_fmtty
      /*<<camlinternalFormat.ml:1502:2>>*/ (buf, fmtty);
     /*<<camlinternalFormat.ml:1502:2>>*/ return  /*<<camlinternalFormat.ml:1502:2>>*/ buffer_contents
             /*<<camlinternalFormat.ml:1502:2>>*/ (buf) /*<<camlinternalFormat.ml:1503:21>>*/ ;
    /*<<camlinternalFormat.ml:1503:21>>*/ }
   function make_printf$0(counter, k, acc, fmt){
    var k$0 = k, acc$0 = acc, fmt$0 = fmt;
     /*<<camlinternalFormat.ml:1518:17>>*/ for(;;){
     if(typeof fmt$0 === "number")
       /*<<camlinternalFormat.ml:1605:4>>*/ return  /*<<camlinternalFormat.ml:1605:4>>*/ caml_call1
               /*<<camlinternalFormat.ml:1605:4>>*/ (k$0, acc$0) /*<<camlinternalFormat.ml:1605:9>>*/ ;
     switch(fmt$0[0]){
       case 0:
        var rest = fmt$0[1];
         /*<<camlinternalFormat.ml:1520:4>>*/ return function(c){
         var new_acc =  /*<<camlinternalFormat.ml:1521:20>>*/ [5, acc$0, c];
          /*<<camlinternalFormat.ml:1522:6>>*/ return  /*<<camlinternalFormat.ml:1522:6>>*/ make_printf
                  /*<<camlinternalFormat.ml:1522:6>>*/ (k$0, new_acc, rest) /*<<camlinternalFormat.ml:1522:32>>*/ ; /*<<camlinternalFormat.ml:1522:32>>*/ } /*<<camlinternalFormat.ml:1520:4>>*/ ;
       case 1:
        var rest$0 = fmt$0[1];
         /*<<camlinternalFormat.ml:1524:4>>*/ return function(c){
         var
          str =
             /*<<camlinternalFormat.ml:1493:12>>*/  /*<<camlinternalFormat.ml:1493:12>>*/ caml_call1
              /*<<camlinternalFormat.ml:1493:12>>*/ (Stdlib_Char[2], c),
          l =
             /*<<camlinternalFormat.ml:1494:2>>*/  /*<<camlinternalFormat.ml:1494:2>>*/ caml_ml_string_length
              /*<<camlinternalFormat.ml:1494:2>>*/ (str),
          res =
             /*<<camlinternalFormat.ml:1495:12>>*/  /*<<camlinternalFormat.ml:1495:12>>*/ caml_call2
              /*<<camlinternalFormat.ml:1495:12>>*/ (Stdlib_Bytes[1],
              l + 2 | 0,
              39);
          /*<<camlinternalFormat.ml:1496:2>>*/  /*<<camlinternalFormat.ml:1496:2>>*/ caml_blit_string
           /*<<camlinternalFormat.ml:1496:2>>*/ (str, 0, res, 1, l);
         var
          new_acc =
             /*<<camlinternalFormat.ml:1525:20>>*/ [4,
             acc$0,
              /*<<camlinternalFormat.ml:1496:2>>*/ caml_call1
               /*<<camlinternalFormat.ml:1496:2>>*/ (Stdlib_Bytes[44], res)];
          /*<<camlinternalFormat.ml:1526:6>>*/ return  /*<<camlinternalFormat.ml:1526:6>>*/ make_printf
                  /*<<camlinternalFormat.ml:1526:6>>*/ (k$0, new_acc, rest$0) /*<<camlinternalFormat.ml:1526:32>>*/ ; /*<<camlinternalFormat.ml:1526:32>>*/ } /*<<camlinternalFormat.ml:1524:4>>*/ ;
       case 2:
        var rest$1 = fmt$0[2], pad = fmt$0[1];
         /*<<camlinternalFormat.ml:1528:32>>*/ return  /*<<camlinternalFormat.ml:1528:32>>*/ make_padding
                 /*<<camlinternalFormat.ml:1528:32>>*/ (k$0,
                 acc$0,
                 rest$1,
                 pad,
                 function(str){
                   /*<<camlinternalFormat.ml:1528:44>>*/ return str /*<<camlinternalFormat.ml:1528:44>>*/ ;
                  /*<<camlinternalFormat.ml:1528:47>>*/ }) /*<<camlinternalFormat.ml:1605:9>>*/ ;
       case 3:
        var rest$2 = fmt$0[2], pad$0 = fmt$0[1];
         /*<<camlinternalFormat.ml:1530:4>>*/ return  /*<<camlinternalFormat.ml:1530:4>>*/ make_padding
                 /*<<camlinternalFormat.ml:1530:4>>*/ (k$0,
                 acc$0,
                 rest$2,
                 pad$0,
                 string_to_caml_string) /*<<camlinternalFormat.ml:1605:9>>*/ ;
       case 4:
        var
         rest$3 = fmt$0[4],
         prec = fmt$0[3],
         pad$1 = fmt$0[2],
         iconv = fmt$0[1];
         /*<<camlinternalFormat.ml:1532:4>>*/ return  /*<<camlinternalFormat.ml:1532:4>>*/ make_int_padding_precision
                 /*<<camlinternalFormat.ml:1532:4>>*/ (k$0,
                 acc$0,
                 rest$3,
                 pad$1,
                 prec,
                 convert_int,
                 iconv) /*<<camlinternalFormat.ml:1605:9>>*/ ;
       case 5:
        var
         rest$4 = fmt$0[4],
         prec$0 = fmt$0[3],
         pad$2 = fmt$0[2],
         iconv$0 = fmt$0[1];
         /*<<camlinternalFormat.ml:1534:4>>*/ return  /*<<camlinternalFormat.ml:1534:4>>*/ make_int_padding_precision
                 /*<<camlinternalFormat.ml:1534:4>>*/ (k$0,
                 acc$0,
                 rest$4,
                 pad$2,
                 prec$0,
                 convert_int32,
                 iconv$0) /*<<camlinternalFormat.ml:1605:9>>*/ ;
       case 6:
        var
         rest$5 = fmt$0[4],
         prec$1 = fmt$0[3],
         pad$3 = fmt$0[2],
         iconv$1 = fmt$0[1];
         /*<<camlinternalFormat.ml:1536:4>>*/ return  /*<<camlinternalFormat.ml:1536:4>>*/ make_int_padding_precision
                 /*<<camlinternalFormat.ml:1536:4>>*/ (k$0,
                 acc$0,
                 rest$5,
                 pad$3,
                 prec$1,
                 convert_nativeint,
                 iconv$1) /*<<camlinternalFormat.ml:1605:9>>*/ ;
       case 7:
        var
         rest$6 = fmt$0[4],
         prec$2 = fmt$0[3],
         pad$4 = fmt$0[2],
         iconv$2 = fmt$0[1];
         /*<<camlinternalFormat.ml:1538:4>>*/ return  /*<<camlinternalFormat.ml:1538:4>>*/ make_int_padding_precision
                 /*<<camlinternalFormat.ml:1538:4>>*/ (k$0,
                 acc$0,
                 rest$6,
                 pad$4,
                 prec$2,
                 convert_int64,
                 iconv$2) /*<<camlinternalFormat.ml:1605:9>>*/ ;
       case 8:
        var
         rest$7 = fmt$0[4],
         prec$3 = fmt$0[3],
         pad$5 = fmt$0[2],
         fconv = fmt$0[1];
        if(typeof pad$5 === "number"){
         if(typeof prec$3 === "number")
          return prec$3
                  ? function
                   (p, x){
                    var
                     str =
                        /*<<camlinternalFormat.ml:1746:16>>*/  /*<<camlinternalFormat.ml:1746:16>>*/ convert_float
                         /*<<camlinternalFormat.ml:1746:16>>*/ (fconv, p, x);
                     /*<<camlinternalFormat.ml:1747:6>>*/ return  /*<<camlinternalFormat.ml:1747:6>>*/ make_printf
                             /*<<camlinternalFormat.ml:1747:6>>*/ (k$0,
                             [4, acc$0, str],
                             rest$7) /*<<camlinternalFormat.ml:1747:52>>*/ ;
                    /*<<camlinternalFormat.ml:1747:52>>*/ }
                  : function
                   (x){
                    var
                     str =
                        /*<<camlinternalFormat.ml:1738:16>>*/  /*<<camlinternalFormat.ml:1738:16>>*/ convert_float
                         /*<<camlinternalFormat.ml:1738:16>>*/ (fconv,
                          /*<<camlinternalFormat.ml:1738:36>>*/ default_float_precision
                           /*<<camlinternalFormat.ml:1738:36>>*/ (fconv),
                         x);
                     /*<<camlinternalFormat.ml:1739:6>>*/ return  /*<<camlinternalFormat.ml:1739:6>>*/ make_printf
                             /*<<camlinternalFormat.ml:1739:6>>*/ (k$0,
                             [4, acc$0, str],
                             rest$7) /*<<camlinternalFormat.ml:1739:52>>*/ ;
                    /*<<camlinternalFormat.ml:1739:52>>*/ } /*<<camlinternalFormat.ml:1605:9>>*/ ;
         var p = prec$3[1];
          /*<<camlinternalFormat.ml:1741:4>>*/ return function(x){
          var
           str =
              /*<<camlinternalFormat.ml:1742:16>>*/  /*<<camlinternalFormat.ml:1742:16>>*/ convert_float
               /*<<camlinternalFormat.ml:1742:16>>*/ (fconv, p, x);
           /*<<camlinternalFormat.ml:1743:6>>*/ return  /*<<camlinternalFormat.ml:1743:6>>*/ make_printf
                   /*<<camlinternalFormat.ml:1743:6>>*/ (k$0,
                   [4, acc$0, str],
                   rest$7) /*<<camlinternalFormat.ml:1743:52>>*/ ; /*<<camlinternalFormat.ml:1743:52>>*/ } /*<<camlinternalFormat.ml:1741:4>>*/ ;
        }
        if(0 === pad$5[0]){
         var w = pad$5[2], padty = pad$5[1];
         if(typeof prec$3 === "number")
          return prec$3
                  ? function
                   (p, x){
                    var
                     str =
                        /*<<camlinternalFormat.ml:1759:16>>*/  /*<<camlinternalFormat.ml:1759:16>>*/ fix_padding
                         /*<<camlinternalFormat.ml:1759:16>>*/ (padty,
                         w,
                          /*<<camlinternalFormat.ml:1759:36>>*/ convert_float
                           /*<<camlinternalFormat.ml:1759:36>>*/ (fconv, p, x));
                     /*<<camlinternalFormat.ml:1760:6>>*/ return  /*<<camlinternalFormat.ml:1760:6>>*/ make_printf
                             /*<<camlinternalFormat.ml:1760:6>>*/ (k$0,
                             [4, acc$0, str],
                             rest$7) /*<<camlinternalFormat.ml:1760:52>>*/ ;
                    /*<<camlinternalFormat.ml:1760:52>>*/ }
                  : function
                   (x){
                    var
                     str =
                        /*<<camlinternalFormat.ml:1750:16>>*/  /*<<camlinternalFormat.ml:1750:16>>*/ convert_float
                         /*<<camlinternalFormat.ml:1750:16>>*/ (fconv,
                          /*<<camlinternalFormat.ml:1750:36>>*/ default_float_precision
                           /*<<camlinternalFormat.ml:1750:36>>*/ (fconv),
                         x),
                     str$0 =
                        /*<<camlinternalFormat.ml:1751:17>>*/  /*<<camlinternalFormat.ml:1751:17>>*/ fix_padding
                         /*<<camlinternalFormat.ml:1751:17>>*/ (padty, w, str);
                     /*<<camlinternalFormat.ml:1752:6>>*/ return  /*<<camlinternalFormat.ml:1752:6>>*/ make_printf
                             /*<<camlinternalFormat.ml:1752:6>>*/ (k$0,
                             [4, acc$0, str$0],
                             rest$7) /*<<camlinternalFormat.ml:1752:53>>*/ ;
                    /*<<camlinternalFormat.ml:1752:53>>*/ } /*<<camlinternalFormat.ml:1605:9>>*/ ;
         var p$0 = prec$3[1];
          /*<<camlinternalFormat.ml:1754:4>>*/ return function(x){
          var
           str =
              /*<<camlinternalFormat.ml:1755:16>>*/  /*<<camlinternalFormat.ml:1755:16>>*/ fix_padding
               /*<<camlinternalFormat.ml:1755:16>>*/ (padty,
               w,
                /*<<camlinternalFormat.ml:1755:36>>*/ convert_float
                 /*<<camlinternalFormat.ml:1755:36>>*/ (fconv, p$0, x));
           /*<<camlinternalFormat.ml:1756:6>>*/ return  /*<<camlinternalFormat.ml:1756:6>>*/ make_printf
                   /*<<camlinternalFormat.ml:1756:6>>*/ (k$0,
                   [4, acc$0, str],
                   rest$7) /*<<camlinternalFormat.ml:1756:52>>*/ ; /*<<camlinternalFormat.ml:1756:52>>*/ } /*<<camlinternalFormat.ml:1754:4>>*/ ;
        }
        var padty$0 = pad$5[1];
        if(typeof prec$3 === "number")
         return prec$3
                 ? function
                  (w, p, x){
                   var
                    str =
                       /*<<camlinternalFormat.ml:1772:16>>*/  /*<<camlinternalFormat.ml:1772:16>>*/ fix_padding
                        /*<<camlinternalFormat.ml:1772:16>>*/ (padty$0,
                        w,
                         /*<<camlinternalFormat.ml:1772:36>>*/ convert_float
                          /*<<camlinternalFormat.ml:1772:36>>*/ (fconv, p, x));
                    /*<<camlinternalFormat.ml:1773:6>>*/ return  /*<<camlinternalFormat.ml:1773:6>>*/ make_printf
                            /*<<camlinternalFormat.ml:1773:6>>*/ (k$0,
                            [4, acc$0, str],
                            rest$7) /*<<camlinternalFormat.ml:1773:52>>*/ ;
                   /*<<camlinternalFormat.ml:1773:52>>*/ }
                 : function
                  (w, x){
                   var
                    str =
                       /*<<camlinternalFormat.ml:1763:16>>*/  /*<<camlinternalFormat.ml:1763:16>>*/ convert_float
                        /*<<camlinternalFormat.ml:1763:16>>*/ (fconv,
                         /*<<camlinternalFormat.ml:1763:36>>*/ default_float_precision
                          /*<<camlinternalFormat.ml:1763:36>>*/ (fconv),
                        x),
                    str$0 =
                       /*<<camlinternalFormat.ml:1764:17>>*/  /*<<camlinternalFormat.ml:1764:17>>*/ fix_padding
                        /*<<camlinternalFormat.ml:1764:17>>*/ (padty$0, w, str);
                    /*<<camlinternalFormat.ml:1765:6>>*/ return  /*<<camlinternalFormat.ml:1765:6>>*/ make_printf
                            /*<<camlinternalFormat.ml:1765:6>>*/ (k$0,
                            [4, acc$0, str$0],
                            rest$7) /*<<camlinternalFormat.ml:1765:53>>*/ ;
                   /*<<camlinternalFormat.ml:1765:53>>*/ } /*<<camlinternalFormat.ml:1605:9>>*/ ;
        var p$1 = prec$3[1];
         /*<<camlinternalFormat.ml:1767:4>>*/ return function(w, x){
         var
          str =
             /*<<camlinternalFormat.ml:1768:16>>*/  /*<<camlinternalFormat.ml:1768:16>>*/ fix_padding
              /*<<camlinternalFormat.ml:1768:16>>*/ (padty$0,
              w,
               /*<<camlinternalFormat.ml:1768:36>>*/ convert_float
                /*<<camlinternalFormat.ml:1768:36>>*/ (fconv, p$1, x));
          /*<<camlinternalFormat.ml:1769:6>>*/ return  /*<<camlinternalFormat.ml:1769:6>>*/ make_printf
                  /*<<camlinternalFormat.ml:1769:6>>*/ (k$0,
                  [4, acc$0, str],
                  rest$7) /*<<camlinternalFormat.ml:1769:52>>*/ ; /*<<camlinternalFormat.ml:1769:52>>*/ } /*<<camlinternalFormat.ml:1767:4>>*/ ;
       case 9:
        var rest$8 = fmt$0[2], pad$6 = fmt$0[1];
         /*<<camlinternalFormat.ml:1542:4>>*/ return  /*<<camlinternalFormat.ml:1542:4>>*/ make_padding
                 /*<<camlinternalFormat.ml:1542:4>>*/ (k$0,
                 acc$0,
                 rest$8,
                 pad$6,
                 Stdlib[30]) /*<<camlinternalFormat.ml:1605:9>>*/ ;
       case 10:
        var
         rest$9 = fmt$0[1],
         acc$1 =  /*<<camlinternalFormat.ml:1560:18>>*/ [7, acc$0];
        acc$0 = acc$1;
        fmt$0 = rest$9;
        break;
       case 11:
        var
         rest$10 = fmt$0[2],
         str = fmt$0[1],
         acc$2 =  /*<<camlinternalFormat.ml:1563:18>>*/ [2, acc$0, str];
        acc$0 = acc$2;
        fmt$0 = rest$10;
        break;
       case 12:
        var
         rest$11 = fmt$0[2],
         chr = fmt$0[1],
         acc$3 =  /*<<camlinternalFormat.ml:1565:18>>*/ [3, acc$0, chr];
        acc$0 = acc$3;
        fmt$0 = rest$11;
        break;
       case 13:
        var
         rest$12 = fmt$0[3],
         sub_fmtty = fmt$0[2],
         ty =
            /*<<camlinternalFormat.ml:1568:13>>*/  /*<<camlinternalFormat.ml:1568:13>>*/ string_of_fmtty
             /*<<camlinternalFormat.ml:1568:13>>*/ (sub_fmtty);
         /*<<camlinternalFormat.ml:1569:4>>*/ return function(str){
          /*<<camlinternalFormat.ml:1570:6>>*/ return  /*<<camlinternalFormat.ml:1569:4>>*/ make_printf
                  /*<<camlinternalFormat.ml:1569:4>>*/ (k$0,
                  [4, acc$0, ty],
                  rest$12) /*<<camlinternalFormat.ml:1571:52>>*/ ; /*<<camlinternalFormat.ml:1571:52>>*/ } /*<<camlinternalFormat.ml:1569:4>>*/ ;
       case 14:
        var rest$13 = fmt$0[3], fmtty = fmt$0[2];
         /*<<camlinternalFormat.ml:1573:4>>*/ return function(param){
         var
          fmt = param[1],
          _cf_ =
             /*<<camlinternalFormat.ml:1574:18>>*/  /*<<camlinternalFormat.ml:1574:18>>*/ recast
              /*<<camlinternalFormat.ml:1574:18>>*/ (fmt, fmtty);
          /*<<camlinternalFormat.ml:1574:6>>*/ return  /*<<camlinternalFormat.ml:1574:6>>*/ make_printf
                  /*<<camlinternalFormat.ml:1574:6>>*/ (k$0,
                  acc$0,
                   /*<<camlinternalFormat.ml:1574:6>>*/ caml_call2
                    /*<<camlinternalFormat.ml:1574:6>>*/ (CamlinternalFormatBasics
                     [3],
                    _cf_,
                    rest$13)) /*<<camlinternalFormat.ml:1574:42>>*/ ; /*<<camlinternalFormat.ml:1574:42>>*/ } /*<<camlinternalFormat.ml:1573:4>>*/ ;
       case 15:
        var rest$14 = fmt$0[1];
         /*<<camlinternalFormat.ml:1544:4>>*/ return function(f, x){
          /*<<camlinternalFormat.ml:1544:15>>*/ return  /*<<camlinternalFormat.ml:1544:4>>*/ make_printf
                  /*<<camlinternalFormat.ml:1544:4>>*/ (k$0,
                  [6,
                   acc$0,
                   function(o){
                     /*<<camlinternalFormat.ml:1544:55>>*/ return caml_call2
                            (f, o, x) /*<<camlinternalFormat.ml:1544:60>>*/ ;
                    /*<<camlinternalFormat.ml:1544:60>>*/ }],
                  rest$14) /*<<camlinternalFormat.ml:1544:67>>*/ ; /*<<camlinternalFormat.ml:1544:67>>*/ } /*<<camlinternalFormat.ml:1544:4>>*/ ;
       case 16:
        var rest$15 = fmt$0[1];
         /*<<camlinternalFormat.ml:1546:4>>*/ return function(f){
          /*<<camlinternalFormat.ml:1546:13>>*/ return  /*<<camlinternalFormat.ml:1546:4>>*/ make_printf
                  /*<<camlinternalFormat.ml:1546:4>>*/ (k$0,
                  [6, acc$0, f],
                  rest$15) /*<<camlinternalFormat.ml:1546:52>>*/ ; /*<<camlinternalFormat.ml:1546:52>>*/ } /*<<camlinternalFormat.ml:1546:4>>*/ ;
       case 17:
        var
         rest$16 = fmt$0[2],
         fmting_lit = fmt$0[1],
         acc$4 =  /*<<camlinternalFormat.ml:1594:18>>*/ [0, acc$0, fmting_lit];
        acc$0 = acc$4;
        fmt$0 = rest$16;
        break;
       case 18:
        var _cd_ = fmt$0[1];
        if(0 === _cd_[0]){
         var rest$17 = fmt$0[2], fmt$1 = _cd_[1][1];
         let acc = acc$0, k = k$0, rest = rest$17;
         var
          k$1 =
            function(kacc){
              /*<<camlinternalFormat.ml:1597:6>>*/ return  /*<<camlinternalFormat.ml:1596:4>>*/ make_printf
                      /*<<camlinternalFormat.ml:1596:4>>*/ (k,
                      [1, acc, [0, kacc]],
                      rest) /*<<camlinternalFormat.ml:1597:70>>*/ ;
             /*<<camlinternalFormat.ml:1597:70>>*/ };
         k$0 = k$1;
         acc$0 = 0;
         fmt$0 = fmt$1;
        }
        else{
         var rest$18 = fmt$0[2], fmt$2 = _cd_[1][1];
         let acc = acc$0, k = k$0, rest = rest$18;
         var
          k$2 =
            function(kacc){
              /*<<camlinternalFormat.ml:1601:6>>*/ return  /*<<camlinternalFormat.ml:1600:4>>*/ make_printf
                      /*<<camlinternalFormat.ml:1600:4>>*/ (k,
                      [1, acc, [1, kacc]],
                      rest) /*<<camlinternalFormat.ml:1601:70>>*/ ;
             /*<<camlinternalFormat.ml:1601:70>>*/ };
         k$0 = k$2;
         acc$0 = 0;
         fmt$0 = fmt$2;
        }
        break;
       case 19:
         /*<<camlinternalFormat.ml:1558:4>>*/ throw  /*<<camlinternalFormat.ml:1558:4>>*/ caml_maybe_attach_backtrace
                /*<<camlinternalFormat.ml:1558:4>>*/ ([0, Assert_failure, _s_],
                1);
       case 20:
        var
         rest$19 = fmt$0[3],
         new_acc =
            /*<<camlinternalFormat.ml:1577:18>>*/ [8,
            acc$0,
            cst_Printf_bad_conversion];
         /*<<camlinternalFormat.ml:1578:4>>*/ return function(param){
          /*<<camlinternalFormat.ml:1578:13>>*/ return  /*<<camlinternalFormat.ml:1578:4>>*/ make_printf
                  /*<<camlinternalFormat.ml:1578:4>>*/ (k$0, new_acc, rest$19) /*<<camlinternalFormat.ml:1578:39>>*/ ; /*<<camlinternalFormat.ml:1578:39>>*/ } /*<<camlinternalFormat.ml:1578:4>>*/ ;
       case 21:
        var rest$20 = fmt$0[2];
         /*<<camlinternalFormat.ml:1583:4>>*/ return function(n){
         var
          new_acc =
             /*<<camlinternalFormat.ml:1584:20>>*/ [4,
             acc$0,
              /*<<camlinternalFormat.ml:1584:42>>*/ caml_format_int
               /*<<camlinternalFormat.ml:1584:42>>*/ (cst_u$0, n)];
          /*<<camlinternalFormat.ml:1585:6>>*/ return  /*<<camlinternalFormat.ml:1585:6>>*/ make_printf
                  /*<<camlinternalFormat.ml:1585:6>>*/ (k$0, new_acc, rest$20) /*<<camlinternalFormat.ml:1585:32>>*/ ; /*<<camlinternalFormat.ml:1585:32>>*/ } /*<<camlinternalFormat.ml:1583:4>>*/ ;
       case 22:
        var rest$21 = fmt$0[1];
         /*<<camlinternalFormat.ml:1587:4>>*/ return function(c){
         var new_acc =  /*<<camlinternalFormat.ml:1588:20>>*/ [5, acc$0, c];
          /*<<camlinternalFormat.ml:1589:6>>*/ return  /*<<camlinternalFormat.ml:1589:6>>*/ make_printf
                  /*<<camlinternalFormat.ml:1589:6>>*/ (k$0, new_acc, rest$21) /*<<camlinternalFormat.ml:1589:32>>*/ ; /*<<camlinternalFormat.ml:1589:32>>*/ } /*<<camlinternalFormat.ml:1587:4>>*/ ;
       case 23:
        var rest$22 = fmt$0[2], ign = fmt$0[1];
         /*<<camlinternalFormat.ml:1591:4>>*/ if(counter >= 50)
          /*<<camlinternalFormat.ml:1591:4>>*/ return  /*<<camlinternalFormat.ml:1591:4>>*/ caml_trampoline_return
                  /*<<camlinternalFormat.ml:1591:4>>*/ (make_ignored_param$0,
                  [0, k$0, acc$0, ign, rest$22]) /*<<camlinternalFormat.ml:1605:9>>*/ ;
        var counter$1 = counter + 1 | 0;
         /*<<camlinternalFormat.ml:1591:4>>*/ return  /*<<camlinternalFormat.ml:1591:4>>*/ make_ignored_param$0
                 /*<<camlinternalFormat.ml:1591:4>>*/ (counter$1,
                 k$0,
                 acc$0,
                 ign,
                 rest$22) /*<<camlinternalFormat.ml:1605:9>>*/ ;
       default:
        var
         rest$23 = fmt$0[3],
         f = fmt$0[2],
         arity = fmt$0[1],
         _ce_ =
            /*<<camlinternalFormat.ml:1548:33>>*/  /*<<camlinternalFormat.ml:1548:33>>*/ caml_call1
             /*<<camlinternalFormat.ml:1548:33>>*/ (f, 0);
         /*<<camlinternalFormat.ml:1548:33>>*/ if(counter >= 50)
          /*<<camlinternalFormat.ml:1548:33>>*/ return  /*<<camlinternalFormat.ml:1548:33>>*/ caml_trampoline_return
                  /*<<camlinternalFormat.ml:1548:33>>*/ (make_custom$0,
                  [0, k$0, acc$0, rest$23, arity, _ce_]) /*<<camlinternalFormat.ml:1605:9>>*/ ;
        var counter$0 = counter + 1 | 0;
         /*<<camlinternalFormat.ml:1548:33>>*/ return  /*<<camlinternalFormat.ml:1548:33>>*/ make_custom$0
                 /*<<camlinternalFormat.ml:1548:33>>*/ (counter$0,
                 k$0,
                 acc$0,
                 rest$23,
                 arity,
                 _ce_) /*<<camlinternalFormat.ml:1605:9>>*/ ;
     }
    }
    /*<<camlinternalFormat.ml:1605:9>>*/ }
   function make_printf(k, acc, fmt){
     /*<<?>>*/ return caml_trampoline(make_printf$0(0, k, acc, fmt));
   }
   function make_ignored_param$0(counter, k, acc, ign, fmt){
     /*<<camlinternalFormat.ml:1613:21>>*/ if(typeof ign === "number")
     switch(ign){
       case 0:
         /*<<camlinternalFormat.ml:1614:39>>*/ if(counter >= 50)
          /*<<camlinternalFormat.ml:1614:39>>*/ return  /*<<camlinternalFormat.ml:1614:39>>*/ caml_trampoline_return
                  /*<<camlinternalFormat.ml:1614:39>>*/ (make_invalid_arg,
                  [0, k, acc, fmt]) /*<<camlinternalFormat.ml:1629:65>>*/ ;
        var counter$0 = counter + 1 | 0;
         /*<<camlinternalFormat.ml:1614:39>>*/ return  /*<<camlinternalFormat.ml:1614:39>>*/ make_invalid_arg
                 /*<<camlinternalFormat.ml:1614:39>>*/ (counter$0,
                 k,
                 acc,
                 fmt) /*<<camlinternalFormat.ml:1629:65>>*/ ;
       case 1:
         /*<<camlinternalFormat.ml:1615:39>>*/ if(counter >= 50)
          /*<<camlinternalFormat.ml:1615:39>>*/ return  /*<<camlinternalFormat.ml:1615:39>>*/ caml_trampoline_return
                  /*<<camlinternalFormat.ml:1615:39>>*/ (make_invalid_arg,
                  [0, k, acc, fmt]) /*<<camlinternalFormat.ml:1629:65>>*/ ;
        var counter$1 = counter + 1 | 0;
         /*<<camlinternalFormat.ml:1615:39>>*/ return  /*<<camlinternalFormat.ml:1615:39>>*/ make_invalid_arg
                 /*<<camlinternalFormat.ml:1615:39>>*/ (counter$1,
                 k,
                 acc,
                 fmt) /*<<camlinternalFormat.ml:1629:65>>*/ ;
       case 2:
         /*<<camlinternalFormat.ml:1626:39>>*/ throw  /*<<camlinternalFormat.ml:1626:39>>*/ caml_maybe_attach_backtrace
                /*<<camlinternalFormat.ml:1626:39>>*/ ([0,
                 Assert_failure,
                 _t_],
                1);
       default:
         /*<<camlinternalFormat.ml:1629:39>>*/ if(counter >= 50)
          /*<<camlinternalFormat.ml:1629:39>>*/ return  /*<<camlinternalFormat.ml:1629:39>>*/ caml_trampoline_return
                  /*<<camlinternalFormat.ml:1629:39>>*/ (make_invalid_arg,
                  [0, k, acc, fmt]) /*<<camlinternalFormat.ml:1629:65>>*/ ;
        var counter$2 = counter + 1 | 0;
         /*<<camlinternalFormat.ml:1629:39>>*/ return  /*<<camlinternalFormat.ml:1629:39>>*/ make_invalid_arg
                 /*<<camlinternalFormat.ml:1629:39>>*/ (counter$2,
                 k,
                 acc,
                 fmt) /*<<camlinternalFormat.ml:1629:65>>*/ ;
     }
    switch(ign[0]){
      case 0:
        /*<<camlinternalFormat.ml:1616:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1616:39>>*/ return  /*<<camlinternalFormat.ml:1616:39>>*/ caml_trampoline_return
                 /*<<camlinternalFormat.ml:1616:39>>*/ (make_invalid_arg,
                 [0, k, acc, fmt]) /*<<camlinternalFormat.ml:1629:65>>*/ ;
       var counter$3 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1616:39>>*/ return  /*<<camlinternalFormat.ml:1616:39>>*/ make_invalid_arg
                /*<<camlinternalFormat.ml:1616:39>>*/ (counter$3, k, acc, fmt) /*<<camlinternalFormat.ml:1629:65>>*/ ;
      case 1:
        /*<<camlinternalFormat.ml:1617:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1617:39>>*/ return  /*<<camlinternalFormat.ml:1617:39>>*/ caml_trampoline_return
                 /*<<camlinternalFormat.ml:1617:39>>*/ (make_invalid_arg,
                 [0, k, acc, fmt]) /*<<camlinternalFormat.ml:1629:65>>*/ ;
       var counter$4 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1617:39>>*/ return  /*<<camlinternalFormat.ml:1617:39>>*/ make_invalid_arg
                /*<<camlinternalFormat.ml:1617:39>>*/ (counter$4, k, acc, fmt) /*<<camlinternalFormat.ml:1629:65>>*/ ;
      case 2:
        /*<<camlinternalFormat.ml:1618:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1618:39>>*/ return  /*<<camlinternalFormat.ml:1618:39>>*/ caml_trampoline_return
                 /*<<camlinternalFormat.ml:1618:39>>*/ (make_invalid_arg,
                 [0, k, acc, fmt]) /*<<camlinternalFormat.ml:1629:65>>*/ ;
       var counter$5 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1618:39>>*/ return  /*<<camlinternalFormat.ml:1618:39>>*/ make_invalid_arg
                /*<<camlinternalFormat.ml:1618:39>>*/ (counter$5, k, acc, fmt) /*<<camlinternalFormat.ml:1629:65>>*/ ;
      case 3:
        /*<<camlinternalFormat.ml:1619:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1619:39>>*/ return  /*<<camlinternalFormat.ml:1619:39>>*/ caml_trampoline_return
                 /*<<camlinternalFormat.ml:1619:39>>*/ (make_invalid_arg,
                 [0, k, acc, fmt]) /*<<camlinternalFormat.ml:1629:65>>*/ ;
       var counter$6 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1619:39>>*/ return  /*<<camlinternalFormat.ml:1619:39>>*/ make_invalid_arg
                /*<<camlinternalFormat.ml:1619:39>>*/ (counter$6, k, acc, fmt) /*<<camlinternalFormat.ml:1629:65>>*/ ;
      case 4:
        /*<<camlinternalFormat.ml:1620:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1620:39>>*/ return  /*<<camlinternalFormat.ml:1620:39>>*/ caml_trampoline_return
                 /*<<camlinternalFormat.ml:1620:39>>*/ (make_invalid_arg,
                 [0, k, acc, fmt]) /*<<camlinternalFormat.ml:1629:65>>*/ ;
       var counter$7 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1620:39>>*/ return  /*<<camlinternalFormat.ml:1620:39>>*/ make_invalid_arg
                /*<<camlinternalFormat.ml:1620:39>>*/ (counter$7, k, acc, fmt) /*<<camlinternalFormat.ml:1629:65>>*/ ;
      case 5:
        /*<<camlinternalFormat.ml:1621:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1621:39>>*/ return  /*<<camlinternalFormat.ml:1621:39>>*/ caml_trampoline_return
                 /*<<camlinternalFormat.ml:1621:39>>*/ (make_invalid_arg,
                 [0, k, acc, fmt]) /*<<camlinternalFormat.ml:1629:65>>*/ ;
       var counter$8 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1621:39>>*/ return  /*<<camlinternalFormat.ml:1621:39>>*/ make_invalid_arg
                /*<<camlinternalFormat.ml:1621:39>>*/ (counter$8, k, acc, fmt) /*<<camlinternalFormat.ml:1629:65>>*/ ;
      case 6:
        /*<<camlinternalFormat.ml:1622:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1622:39>>*/ return  /*<<camlinternalFormat.ml:1622:39>>*/ caml_trampoline_return
                 /*<<camlinternalFormat.ml:1622:39>>*/ (make_invalid_arg,
                 [0, k, acc, fmt]) /*<<camlinternalFormat.ml:1629:65>>*/ ;
       var counter$9 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1622:39>>*/ return  /*<<camlinternalFormat.ml:1622:39>>*/ make_invalid_arg
                /*<<camlinternalFormat.ml:1622:39>>*/ (counter$9, k, acc, fmt) /*<<camlinternalFormat.ml:1629:65>>*/ ;
      case 7:
        /*<<camlinternalFormat.ml:1623:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1623:39>>*/ return  /*<<camlinternalFormat.ml:1623:39>>*/ caml_trampoline_return
                 /*<<camlinternalFormat.ml:1623:39>>*/ (make_invalid_arg,
                 [0, k, acc, fmt]) /*<<camlinternalFormat.ml:1629:65>>*/ ;
       var counter$10 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1623:39>>*/ return  /*<<camlinternalFormat.ml:1623:39>>*/ make_invalid_arg
                /*<<camlinternalFormat.ml:1623:39>>*/ (counter$10,
                k,
                acc,
                fmt) /*<<camlinternalFormat.ml:1629:65>>*/ ;
      case 8:
        /*<<camlinternalFormat.ml:1624:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1624:39>>*/ return  /*<<camlinternalFormat.ml:1624:39>>*/ caml_trampoline_return
                 /*<<camlinternalFormat.ml:1624:39>>*/ (make_invalid_arg,
                 [0, k, acc, fmt]) /*<<camlinternalFormat.ml:1629:65>>*/ ;
       var counter$11 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1624:39>>*/ return  /*<<camlinternalFormat.ml:1624:39>>*/ make_invalid_arg
                /*<<camlinternalFormat.ml:1624:39>>*/ (counter$11,
                k,
                acc,
                fmt) /*<<camlinternalFormat.ml:1629:65>>*/ ;
      case 9:
       var fmtty = ign[2];
        /*<<camlinternalFormat.ml:1625:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1625:39>>*/ return  /*<<camlinternalFormat.ml:1625:39>>*/ caml_trampoline_return
                 /*<<camlinternalFormat.ml:1625:39>>*/ (make_from_fmtty$0,
                 [0, k, acc, fmtty, fmt]) /*<<camlinternalFormat.ml:1629:65>>*/ ;
       var counter$14 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1625:39>>*/ return  /*<<camlinternalFormat.ml:1625:39>>*/ make_from_fmtty$0
                /*<<camlinternalFormat.ml:1625:39>>*/ (counter$14,
                k,
                acc,
                fmtty,
                fmt) /*<<camlinternalFormat.ml:1629:65>>*/ ;
      case 10:
        /*<<camlinternalFormat.ml:1627:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1627:39>>*/ return  /*<<camlinternalFormat.ml:1627:39>>*/ caml_trampoline_return
                 /*<<camlinternalFormat.ml:1627:39>>*/ (make_invalid_arg,
                 [0, k, acc, fmt]) /*<<camlinternalFormat.ml:1629:65>>*/ ;
       var counter$12 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1627:39>>*/ return  /*<<camlinternalFormat.ml:1627:39>>*/ make_invalid_arg
                /*<<camlinternalFormat.ml:1627:39>>*/ (counter$12,
                k,
                acc,
                fmt) /*<<camlinternalFormat.ml:1629:65>>*/ ;
      default:
        /*<<camlinternalFormat.ml:1628:39>>*/ if(counter >= 50)
         /*<<camlinternalFormat.ml:1628:39>>*/ return  /*<<camlinternalFormat.ml:1628:39>>*/ caml_trampoline_return
                 /*<<camlinternalFormat.ml:1628:39>>*/ (make_invalid_arg,
                 [0, k, acc, fmt]) /*<<camlinternalFormat.ml:1629:65>>*/ ;
       var counter$13 = counter + 1 | 0;
        /*<<camlinternalFormat.ml:1628:39>>*/ return  /*<<camlinternalFormat.ml:1628:39>>*/ make_invalid_arg
                /*<<camlinternalFormat.ml:1628:39>>*/ (counter$13,
                k,
                acc,
                fmt) /*<<camlinternalFormat.ml:1629:65>>*/ ;
    }
    /*<<camlinternalFormat.ml:1629:65>>*/ }
   function make_ignored_param(k, acc, ign, fmt){
     /*<<?>>*/ return caml_trampoline
            (make_ignored_param$0(0, k, acc, ign, fmt));
   }
   function make_from_fmtty$0(counter, k, acc, fmtty, fmt){
     /*<<camlinternalFormat.ml:1637:23>>*/ if(typeof fmtty !== "number")
     switch(fmtty[0]){
       case 0:
        var rest = fmtty[1];
         /*<<camlinternalFormat.ml:1638:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1638:40>>*/ return  /*<<camlinternalFormat.ml:1638:31>>*/ make_from_fmtty
                  /*<<camlinternalFormat.ml:1638:31>>*/ (k, acc, rest, fmt) /*<<camlinternalFormat.ml:1638:70>>*/ ; /*<<camlinternalFormat.ml:1638:70>>*/ } /*<<camlinternalFormat.ml:1638:31>>*/ ;
       case 1:
        var rest$0 = fmtty[1];
         /*<<camlinternalFormat.ml:1639:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1639:40>>*/ return  /*<<camlinternalFormat.ml:1639:31>>*/ make_from_fmtty
                  /*<<camlinternalFormat.ml:1639:31>>*/ (k, acc, rest$0, fmt) /*<<camlinternalFormat.ml:1639:70>>*/ ; /*<<camlinternalFormat.ml:1639:70>>*/ } /*<<camlinternalFormat.ml:1639:31>>*/ ;
       case 2:
        var rest$1 = fmtty[1];
         /*<<camlinternalFormat.ml:1640:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1640:40>>*/ return  /*<<camlinternalFormat.ml:1640:31>>*/ make_from_fmtty
                  /*<<camlinternalFormat.ml:1640:31>>*/ (k, acc, rest$1, fmt) /*<<camlinternalFormat.ml:1640:70>>*/ ; /*<<camlinternalFormat.ml:1640:70>>*/ } /*<<camlinternalFormat.ml:1640:31>>*/ ;
       case 3:
        var rest$2 = fmtty[1];
         /*<<camlinternalFormat.ml:1641:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1641:40>>*/ return  /*<<camlinternalFormat.ml:1641:31>>*/ make_from_fmtty
                  /*<<camlinternalFormat.ml:1641:31>>*/ (k, acc, rest$2, fmt) /*<<camlinternalFormat.ml:1641:70>>*/ ; /*<<camlinternalFormat.ml:1641:70>>*/ } /*<<camlinternalFormat.ml:1641:31>>*/ ;
       case 4:
        var rest$3 = fmtty[1];
         /*<<camlinternalFormat.ml:1642:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1642:40>>*/ return  /*<<camlinternalFormat.ml:1642:31>>*/ make_from_fmtty
                  /*<<camlinternalFormat.ml:1642:31>>*/ (k, acc, rest$3, fmt) /*<<camlinternalFormat.ml:1642:70>>*/ ; /*<<camlinternalFormat.ml:1642:70>>*/ } /*<<camlinternalFormat.ml:1642:31>>*/ ;
       case 5:
        var rest$4 = fmtty[1];
         /*<<camlinternalFormat.ml:1643:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1643:40>>*/ return  /*<<camlinternalFormat.ml:1643:31>>*/ make_from_fmtty
                  /*<<camlinternalFormat.ml:1643:31>>*/ (k, acc, rest$4, fmt) /*<<camlinternalFormat.ml:1643:70>>*/ ; /*<<camlinternalFormat.ml:1643:70>>*/ } /*<<camlinternalFormat.ml:1643:31>>*/ ;
       case 6:
        var rest$5 = fmtty[1];
         /*<<camlinternalFormat.ml:1644:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1644:40>>*/ return  /*<<camlinternalFormat.ml:1644:31>>*/ make_from_fmtty
                  /*<<camlinternalFormat.ml:1644:31>>*/ (k, acc, rest$5, fmt) /*<<camlinternalFormat.ml:1644:70>>*/ ; /*<<camlinternalFormat.ml:1644:70>>*/ } /*<<camlinternalFormat.ml:1644:31>>*/ ;
       case 7:
        var rest$6 = fmtty[1];
         /*<<camlinternalFormat.ml:1645:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1645:40>>*/ return  /*<<camlinternalFormat.ml:1645:31>>*/ make_from_fmtty
                  /*<<camlinternalFormat.ml:1645:31>>*/ (k, acc, rest$6, fmt) /*<<camlinternalFormat.ml:1645:70>>*/ ; /*<<camlinternalFormat.ml:1645:70>>*/ } /*<<camlinternalFormat.ml:1645:31>>*/ ;
       case 8:
        var rest$7 = fmtty[2];
         /*<<camlinternalFormat.ml:1651:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1651:40>>*/ return  /*<<camlinternalFormat.ml:1651:31>>*/ make_from_fmtty
                  /*<<camlinternalFormat.ml:1651:31>>*/ (k, acc, rest$7, fmt) /*<<camlinternalFormat.ml:1651:70>>*/ ; /*<<camlinternalFormat.ml:1651:70>>*/ } /*<<camlinternalFormat.ml:1651:31>>*/ ;
       case 9:
        var
         rest$8 = fmtty[3],
         ty2 = fmtty[2],
         ty1 = fmtty[1],
         ty =
            /*<<camlinternalFormat.ml:1654:13>>*/  /*<<camlinternalFormat.ml:1654:13>>*/ trans
             /*<<camlinternalFormat.ml:1654:13>>*/ ( /*<<camlinternalFormat.ml:1654:19>>*/ symm
               /*<<camlinternalFormat.ml:1654:19>>*/ (ty1),
             ty2);
         /*<<camlinternalFormat.ml:1655:4>>*/ return function(param){
          /*<<camlinternalFormat.ml:1655:13>>*/ return make_from_fmtty
                 (k,
                  acc,
                   /*<<camlinternalFormat.ml:1655:35>>*/ caml_call2
                    /*<<camlinternalFormat.ml:1655:35>>*/ (CamlinternalFormatBasics
                     [1],
                    ty,
                    rest$8),
                  fmt) /*<<camlinternalFormat.ml:1655:61>>*/ ; /*<<camlinternalFormat.ml:1655:61>>*/ } /*<<camlinternalFormat.ml:1655:4>>*/ ;
       case 10:
        var rest$9 = fmtty[1];
         /*<<camlinternalFormat.ml:1646:31>>*/ return function(_cc_, param){
          /*<<camlinternalFormat.ml:1646:42>>*/ return  /*<<camlinternalFormat.ml:1646:31>>*/ make_from_fmtty
                  /*<<camlinternalFormat.ml:1646:31>>*/ (k, acc, rest$9, fmt) /*<<camlinternalFormat.ml:1646:72>>*/ ; /*<<camlinternalFormat.ml:1646:72>>*/ } /*<<camlinternalFormat.ml:1646:31>>*/ ;
       case 11:
        var rest$10 = fmtty[1];
         /*<<camlinternalFormat.ml:1647:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1647:40>>*/ return  /*<<camlinternalFormat.ml:1647:31>>*/ make_from_fmtty
                  /*<<camlinternalFormat.ml:1647:31>>*/ (k, acc, rest$10, fmt) /*<<camlinternalFormat.ml:1647:70>>*/ ; /*<<camlinternalFormat.ml:1647:70>>*/ } /*<<camlinternalFormat.ml:1647:31>>*/ ;
       case 12:
        var rest$11 = fmtty[1];
         /*<<camlinternalFormat.ml:1648:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1648:40>>*/ return  /*<<camlinternalFormat.ml:1648:31>>*/ make_from_fmtty
                  /*<<camlinternalFormat.ml:1648:31>>*/ (k, acc, rest$11, fmt) /*<<camlinternalFormat.ml:1648:70>>*/ ; /*<<camlinternalFormat.ml:1648:70>>*/ } /*<<camlinternalFormat.ml:1648:31>>*/ ;
       case 13:
         /*<<camlinternalFormat.ml:1649:31>>*/ throw  /*<<camlinternalFormat.ml:1649:31>>*/ caml_maybe_attach_backtrace
                /*<<camlinternalFormat.ml:1649:31>>*/ ([0,
                 Assert_failure,
                 _u_],
                1);
       default:
         /*<<camlinternalFormat.ml:1650:31>>*/ throw  /*<<camlinternalFormat.ml:1650:31>>*/ caml_maybe_attach_backtrace
                /*<<camlinternalFormat.ml:1650:31>>*/ ([0,
                 Assert_failure,
                 _v_],
                1);
     }
     /*<<camlinternalFormat.ml:1652:31>>*/ if(counter >= 50)
      /*<<camlinternalFormat.ml:1652:31>>*/ return  /*<<camlinternalFormat.ml:1652:31>>*/ caml_trampoline_return
              /*<<camlinternalFormat.ml:1652:31>>*/ (make_invalid_arg,
              [0, k, acc, fmt]) /*<<camlinternalFormat.ml:1655:61>>*/ ;
    var counter$0 = counter + 1 | 0;
     /*<<camlinternalFormat.ml:1652:31>>*/ return  /*<<camlinternalFormat.ml:1652:31>>*/ make_invalid_arg
             /*<<camlinternalFormat.ml:1652:31>>*/ (counter$0, k, acc, fmt) /*<<camlinternalFormat.ml:1655:61>>*/ ;
    /*<<camlinternalFormat.ml:1655:61>>*/ }
   function make_from_fmtty(k, acc, fmtty, fmt){
     /*<<?>>*/ return caml_trampoline
            (make_from_fmtty$0(0, k, acc, fmtty, fmt));
   }
   function make_invalid_arg(counter, k, acc, fmt){
    var
     _cb_ =
        /*<<camlinternalFormat.ml:1663:16>>*/ [8,
        acc,
        cst_Printf_bad_conversion$0];
     /*<<camlinternalFormat.ml:1663:2>>*/ if(counter >= 50)
      /*<<camlinternalFormat.ml:1663:2>>*/ return  /*<<camlinternalFormat.ml:1663:2>>*/ caml_trampoline_return
              /*<<camlinternalFormat.ml:1663:2>>*/ (make_printf$0,
              [0, k, _cb_, fmt]) /*<<camlinternalFormat.ml:1663:72>>*/ ;
    var counter$0 = counter + 1 | 0;
     /*<<camlinternalFormat.ml:1663:2>>*/ return  /*<<camlinternalFormat.ml:1663:2>>*/ make_printf$0
             /*<<camlinternalFormat.ml:1663:2>>*/ (counter$0, k, _cb_, fmt) /*<<camlinternalFormat.ml:1663:72>>*/ ;
    /*<<camlinternalFormat.ml:1663:72>>*/ }
   function make_padding(k, acc, fmt, pad, trans){
     /*<<camlinternalFormat.ml:1670:29>>*/ if(typeof pad === "number")
      /*<<camlinternalFormat.ml:1672:4>>*/ return function(x){
      var
       new_acc =
          /*<<camlinternalFormat.ml:1673:20>>*/ [4,
          acc,
           /*<<camlinternalFormat.ml:1673:42>>*/ caml_call1
            /*<<camlinternalFormat.ml:1673:42>>*/ (trans, x)];
       /*<<camlinternalFormat.ml:1674:6>>*/ return  /*<<camlinternalFormat.ml:1674:6>>*/ make_printf
               /*<<camlinternalFormat.ml:1674:6>>*/ (k, new_acc, fmt) /*<<camlinternalFormat.ml:1674:31>>*/ ; /*<<camlinternalFormat.ml:1674:31>>*/ } /*<<camlinternalFormat.ml:1672:4>>*/ ;
    if(0 === pad[0]){
     var width = pad[2], padty = pad[1];
      /*<<camlinternalFormat.ml:1676:4>>*/ return function(x){
      var
       new_acc =
          /*<<camlinternalFormat.ml:1677:20>>*/ [4,
          acc,
           /*<<camlinternalFormat.ml:1677:42>>*/ fix_padding
            /*<<camlinternalFormat.ml:1677:42>>*/ (padty,
            width,
             /*<<camlinternalFormat.ml:1677:66>>*/ caml_call1
              /*<<camlinternalFormat.ml:1677:66>>*/ (trans, x))];
       /*<<camlinternalFormat.ml:1678:6>>*/ return  /*<<camlinternalFormat.ml:1678:6>>*/ make_printf
               /*<<camlinternalFormat.ml:1678:6>>*/ (k, new_acc, fmt) /*<<camlinternalFormat.ml:1678:31>>*/ ; /*<<camlinternalFormat.ml:1678:31>>*/ } /*<<camlinternalFormat.ml:1676:4>>*/ ;
    }
    var padty$0 = pad[1];
     /*<<camlinternalFormat.ml:1680:4>>*/ return function(w, x){
     var
      new_acc =
         /*<<camlinternalFormat.ml:1681:20>>*/ [4,
         acc,
          /*<<camlinternalFormat.ml:1681:42>>*/ fix_padding
           /*<<camlinternalFormat.ml:1681:42>>*/ (padty$0,
           w,
            /*<<camlinternalFormat.ml:1681:62>>*/ caml_call1
             /*<<camlinternalFormat.ml:1681:62>>*/ (trans, x))];
      /*<<camlinternalFormat.ml:1682:6>>*/ return  /*<<camlinternalFormat.ml:1682:6>>*/ make_printf
              /*<<camlinternalFormat.ml:1682:6>>*/ (k, new_acc, fmt) /*<<camlinternalFormat.ml:1682:31>>*/ ; /*<<camlinternalFormat.ml:1682:31>>*/ } /*<<camlinternalFormat.ml:1680:4>>*/ ;
    /*<<camlinternalFormat.ml:1682:31>>*/ }
   function make_int_padding_precision(k, acc, fmt, pad, prec, trans, iconv){
     /*<<camlinternalFormat.ml:1691:40>>*/ if(typeof pad === "number"){
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var
                 str =
                    /*<<camlinternalFormat.ml:1702:16>>*/  /*<<camlinternalFormat.ml:1702:16>>*/ fix_int_precision
                     /*<<camlinternalFormat.ml:1702:16>>*/ (p,
                      /*<<camlinternalFormat.ml:1702:36>>*/ caml_call2
                       /*<<camlinternalFormat.ml:1702:36>>*/ (trans, iconv, x));
                 /*<<camlinternalFormat.ml:1703:6>>*/ return  /*<<camlinternalFormat.ml:1703:6>>*/ make_printf
                         /*<<camlinternalFormat.ml:1703:6>>*/ (k,
                         [4, acc, str],
                         fmt) /*<<camlinternalFormat.ml:1703:52>>*/ ;
                /*<<camlinternalFormat.ml:1703:52>>*/ }
              : function
               (x){
                var
                 str =
                    /*<<camlinternalFormat.ml:1694:16>>*/  /*<<camlinternalFormat.ml:1694:16>>*/ caml_call2
                     /*<<camlinternalFormat.ml:1694:16>>*/ (trans, iconv, x);
                 /*<<camlinternalFormat.ml:1695:6>>*/ return  /*<<camlinternalFormat.ml:1695:6>>*/ make_printf
                         /*<<camlinternalFormat.ml:1695:6>>*/ (k,
                         [4, acc, str],
                         fmt) /*<<camlinternalFormat.ml:1695:52>>*/ ;
                /*<<camlinternalFormat.ml:1695:52>>*/ } /*<<camlinternalFormat.ml:1727:52>>*/ ;
     var p = prec[1];
      /*<<camlinternalFormat.ml:1697:4>>*/ return function(x){
      var
       str =
          /*<<camlinternalFormat.ml:1698:16>>*/  /*<<camlinternalFormat.ml:1698:16>>*/ fix_int_precision
           /*<<camlinternalFormat.ml:1698:16>>*/ (p,
            /*<<camlinternalFormat.ml:1698:36>>*/ caml_call2
             /*<<camlinternalFormat.ml:1698:36>>*/ (trans, iconv, x));
       /*<<camlinternalFormat.ml:1699:6>>*/ return  /*<<camlinternalFormat.ml:1699:6>>*/ make_printf
               /*<<camlinternalFormat.ml:1699:6>>*/ (k, [4, acc, str], fmt) /*<<camlinternalFormat.ml:1699:52>>*/ ; /*<<camlinternalFormat.ml:1699:52>>*/ } /*<<camlinternalFormat.ml:1697:4>>*/ ;
    }
    if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                var
                 str =
                    /*<<camlinternalFormat.ml:1714:16>>*/  /*<<camlinternalFormat.ml:1714:16>>*/ fix_padding
                     /*<<camlinternalFormat.ml:1714:16>>*/ (padty,
                     w,
                      /*<<camlinternalFormat.ml:1714:36>>*/ fix_int_precision
                       /*<<camlinternalFormat.ml:1714:36>>*/ (p,
                        /*<<camlinternalFormat.ml:1714:57>>*/ caml_call2
                         /*<<camlinternalFormat.ml:1714:57>>*/ (trans, iconv, x)));
                 /*<<camlinternalFormat.ml:1715:6>>*/ return  /*<<camlinternalFormat.ml:1715:6>>*/ make_printf
                         /*<<camlinternalFormat.ml:1715:6>>*/ (k,
                         [4, acc, str],
                         fmt) /*<<camlinternalFormat.ml:1715:52>>*/ ;
                /*<<camlinternalFormat.ml:1715:52>>*/ }
              : function
               (x){
                var
                 str =
                    /*<<camlinternalFormat.ml:1706:16>>*/  /*<<camlinternalFormat.ml:1706:16>>*/ fix_padding
                     /*<<camlinternalFormat.ml:1706:16>>*/ (padty,
                     w,
                      /*<<camlinternalFormat.ml:1706:36>>*/ caml_call2
                       /*<<camlinternalFormat.ml:1706:36>>*/ (trans, iconv, x));
                 /*<<camlinternalFormat.ml:1707:6>>*/ return  /*<<camlinternalFormat.ml:1707:6>>*/ make_printf
                         /*<<camlinternalFormat.ml:1707:6>>*/ (k,
                         [4, acc, str],
                         fmt) /*<<camlinternalFormat.ml:1707:52>>*/ ;
                /*<<camlinternalFormat.ml:1707:52>>*/ } /*<<camlinternalFormat.ml:1727:52>>*/ ;
     var p$0 = prec[1];
      /*<<camlinternalFormat.ml:1709:4>>*/ return function(x){
      var
       str =
          /*<<camlinternalFormat.ml:1710:16>>*/  /*<<camlinternalFormat.ml:1710:16>>*/ fix_padding
           /*<<camlinternalFormat.ml:1710:16>>*/ (padty,
           w,
            /*<<camlinternalFormat.ml:1710:36>>*/ fix_int_precision
             /*<<camlinternalFormat.ml:1710:36>>*/ (p$0,
              /*<<camlinternalFormat.ml:1710:57>>*/ caml_call2
               /*<<camlinternalFormat.ml:1710:57>>*/ (trans, iconv, x)));
       /*<<camlinternalFormat.ml:1711:6>>*/ return  /*<<camlinternalFormat.ml:1711:6>>*/ make_printf
               /*<<camlinternalFormat.ml:1711:6>>*/ (k, [4, acc, str], fmt) /*<<camlinternalFormat.ml:1711:52>>*/ ; /*<<camlinternalFormat.ml:1711:52>>*/ } /*<<camlinternalFormat.ml:1709:4>>*/ ;
    }
    var padty$0 = pad[1];
    if(typeof prec === "number")
     return prec
             ? function
              (w, p, x){
               var
                str =
                   /*<<camlinternalFormat.ml:1726:16>>*/  /*<<camlinternalFormat.ml:1726:16>>*/ fix_padding
                    /*<<camlinternalFormat.ml:1726:16>>*/ (padty$0,
                    w,
                     /*<<camlinternalFormat.ml:1726:36>>*/ fix_int_precision
                      /*<<camlinternalFormat.ml:1726:36>>*/ (p,
                       /*<<camlinternalFormat.ml:1726:57>>*/ caml_call2
                        /*<<camlinternalFormat.ml:1726:57>>*/ (trans, iconv, x)));
                /*<<camlinternalFormat.ml:1727:6>>*/ return  /*<<camlinternalFormat.ml:1727:6>>*/ make_printf
                        /*<<camlinternalFormat.ml:1727:6>>*/ (k,
                        [4, acc, str],
                        fmt) /*<<camlinternalFormat.ml:1727:52>>*/ ;
               /*<<camlinternalFormat.ml:1727:52>>*/ }
             : function
              (w, x){
               var
                str =
                   /*<<camlinternalFormat.ml:1718:16>>*/  /*<<camlinternalFormat.ml:1718:16>>*/ fix_padding
                    /*<<camlinternalFormat.ml:1718:16>>*/ (padty$0,
                    w,
                     /*<<camlinternalFormat.ml:1718:36>>*/ caml_call2
                      /*<<camlinternalFormat.ml:1718:36>>*/ (trans, iconv, x));
                /*<<camlinternalFormat.ml:1719:6>>*/ return  /*<<camlinternalFormat.ml:1719:6>>*/ make_printf
                        /*<<camlinternalFormat.ml:1719:6>>*/ (k,
                        [4, acc, str],
                        fmt) /*<<camlinternalFormat.ml:1719:52>>*/ ;
               /*<<camlinternalFormat.ml:1719:52>>*/ } /*<<camlinternalFormat.ml:1727:52>>*/ ;
    var p$1 = prec[1];
     /*<<camlinternalFormat.ml:1721:4>>*/ return function(w, x){
     var
      str =
         /*<<camlinternalFormat.ml:1722:16>>*/  /*<<camlinternalFormat.ml:1722:16>>*/ fix_padding
          /*<<camlinternalFormat.ml:1722:16>>*/ (padty$0,
          w,
           /*<<camlinternalFormat.ml:1722:36>>*/ fix_int_precision
            /*<<camlinternalFormat.ml:1722:36>>*/ (p$1,
             /*<<camlinternalFormat.ml:1722:57>>*/ caml_call2
              /*<<camlinternalFormat.ml:1722:57>>*/ (trans, iconv, x)));
      /*<<camlinternalFormat.ml:1723:6>>*/ return  /*<<camlinternalFormat.ml:1723:6>>*/ make_printf
              /*<<camlinternalFormat.ml:1723:6>>*/ (k, [4, acc, str], fmt) /*<<camlinternalFormat.ml:1723:52>>*/ ; /*<<camlinternalFormat.ml:1723:52>>*/ } /*<<camlinternalFormat.ml:1721:4>>*/ ;
    /*<<camlinternalFormat.ml:1727:52>>*/ }
   function make_custom$0(counter, k, acc, rest, arity, f){
     /*<<camlinternalFormat.ml:1778:28>>*/ if(arity){
     var arity$0 = arity[1];
      /*<<camlinternalFormat.ml:1781:4>>*/ return function(x){
       /*<<camlinternalFormat.ml:1782:6>>*/ return  /*<<camlinternalFormat.ml:1782:35>>*/ make_custom
               /*<<camlinternalFormat.ml:1782:35>>*/ (k,
               acc,
               rest,
               arity$0,
                /*<<camlinternalFormat.ml:1782:35>>*/ caml_call1
                 /*<<camlinternalFormat.ml:1782:35>>*/ (f, x)) /*<<camlinternalFormat.ml:1782:40>>*/ ; /*<<camlinternalFormat.ml:1782:40>>*/ } /*<<camlinternalFormat.ml:1781:4>>*/ ;
    }
    var _ca_ =  /*<<camlinternalFormat.ml:1779:33>>*/ [4, acc, f];
     /*<<camlinternalFormat.ml:1779:19>>*/ if(counter >= 50)
      /*<<camlinternalFormat.ml:1779:19>>*/ return  /*<<camlinternalFormat.ml:1779:19>>*/ caml_trampoline_return
              /*<<camlinternalFormat.ml:1779:19>>*/ (make_printf$0,
              [0, k, _ca_, rest]) /*<<camlinternalFormat.ml:1782:40>>*/ ;
    var counter$0 = counter + 1 | 0;
     /*<<camlinternalFormat.ml:1779:19>>*/ return  /*<<camlinternalFormat.ml:1779:19>>*/ make_printf$0
             /*<<camlinternalFormat.ml:1779:19>>*/ (counter$0, k, _ca_, rest) /*<<camlinternalFormat.ml:1782:40>>*/ ;
    /*<<camlinternalFormat.ml:1782:40>>*/ }
   function make_custom(k, acc, rest, arity, f){
     /*<<?>>*/ return caml_trampoline
            (make_custom$0(0, k, acc, rest, arity, f));
   }
   function make_iprintf$0(counter, k, o, fmt){
    var k$0 = k, fmt$0 = fmt;
     /*<<camlinternalFormat.ml:1788:17>>*/ for(;;){
     if(typeof fmt$0 === "number")
       /*<<camlinternalFormat.ml:1858:8>>*/ return  /*<<camlinternalFormat.ml:1858:8>>*/ caml_call1
               /*<<camlinternalFormat.ml:1858:8>>*/ (k$0, o) /*<<camlinternalFormat.ml:1858:11>>*/ ;
     switch(fmt$0[0]){
       case 0:
        var
         rest = fmt$0[1],
         x =
            /*<<camlinternalFormat.ml:1790:14>>*/  /*<<camlinternalFormat.ml:1790:14>>*/ make_iprintf
             /*<<camlinternalFormat.ml:1790:14>>*/ (k$0, o, rest);
         /*<<camlinternalFormat.ml:1790:14>>*/ return function(_b$_){
          /*<<camlinternalFormat.ml:1784:16>>*/ return x /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1790:14>>*/ ;
       case 1:
        var
         rest$0 = fmt$0[1],
         x$0 =
            /*<<camlinternalFormat.ml:1792:14>>*/  /*<<camlinternalFormat.ml:1792:14>>*/ make_iprintf
             /*<<camlinternalFormat.ml:1792:14>>*/ (k$0, o, rest$0);
         /*<<camlinternalFormat.ml:1792:14>>*/ return function(_b__){
          /*<<camlinternalFormat.ml:1784:16>>*/ return x$0 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1792:14>>*/ ;
       case 2:
        var _bM_ = fmt$0[1];
        if(typeof _bM_ === "number"){
         var
          rest$1 = fmt$0[2],
          x$1 =
             /*<<camlinternalFormat.ml:1794:14>>*/  /*<<camlinternalFormat.ml:1794:14>>*/ make_iprintf
              /*<<camlinternalFormat.ml:1794:14>>*/ (k$0, o, rest$1);
          /*<<camlinternalFormat.ml:1794:14>>*/ return function(_b9_){
           /*<<camlinternalFormat.ml:1784:16>>*/ return x$1 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1794:14>>*/ ;
        }
        if(0 === _bM_[0]){
         var
          rest$2 = fmt$0[2],
          x$2 =
             /*<<camlinternalFormat.ml:1796:14>>*/  /*<<camlinternalFormat.ml:1796:14>>*/ make_iprintf
              /*<<camlinternalFormat.ml:1796:14>>*/ (k$0, o, rest$2);
          /*<<camlinternalFormat.ml:1796:14>>*/ return function(_b8_){
           /*<<camlinternalFormat.ml:1784:16>>*/ return x$2 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1796:14>>*/ ;
        }
        var
         rest$3 = fmt$0[2],
         x$3 =
            /*<<camlinternalFormat.ml:1798:21>>*/  /*<<camlinternalFormat.ml:1798:21>>*/ make_iprintf
             /*<<camlinternalFormat.ml:1798:21>>*/ (k$0, o, rest$3),
         x$4 =
            /*<<camlinternalFormat.ml:1798:14>>*/ function(_b7_){
             /*<<camlinternalFormat.ml:1784:16>>*/ return x$3 /*<<camlinternalFormat.ml:1784:16>>*/ ;
           };
         /*<<camlinternalFormat.ml:1798:14>>*/ return function(_b6_){
          /*<<camlinternalFormat.ml:1784:16>>*/ return x$4 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1798:14>>*/ ;
       case 3:
        var _bN_ = fmt$0[1];
        if(typeof _bN_ === "number"){
         var
          rest$4 = fmt$0[2],
          x$5 =
             /*<<camlinternalFormat.ml:1800:14>>*/  /*<<camlinternalFormat.ml:1800:14>>*/ make_iprintf
              /*<<camlinternalFormat.ml:1800:14>>*/ (k$0, o, rest$4);
          /*<<camlinternalFormat.ml:1800:14>>*/ return function(_b5_){
           /*<<camlinternalFormat.ml:1784:16>>*/ return x$5 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1800:14>>*/ ;
        }
        if(0 === _bN_[0]){
         var
          rest$5 = fmt$0[2],
          x$6 =
             /*<<camlinternalFormat.ml:1802:14>>*/  /*<<camlinternalFormat.ml:1802:14>>*/ make_iprintf
              /*<<camlinternalFormat.ml:1802:14>>*/ (k$0, o, rest$5);
          /*<<camlinternalFormat.ml:1802:14>>*/ return function(_b4_){
           /*<<camlinternalFormat.ml:1784:16>>*/ return x$6 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1802:14>>*/ ;
        }
        var
         rest$6 = fmt$0[2],
         x$7 =
            /*<<camlinternalFormat.ml:1804:21>>*/  /*<<camlinternalFormat.ml:1804:21>>*/ make_iprintf
             /*<<camlinternalFormat.ml:1804:21>>*/ (k$0, o, rest$6),
         x$8 =
            /*<<camlinternalFormat.ml:1804:14>>*/ function(_b3_){
             /*<<camlinternalFormat.ml:1784:16>>*/ return x$7 /*<<camlinternalFormat.ml:1784:16>>*/ ;
           };
         /*<<camlinternalFormat.ml:1804:14>>*/ return function(_b2_){
          /*<<camlinternalFormat.ml:1784:16>>*/ return x$8 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1804:14>>*/ ;
       case 4:
        var rest$7 = fmt$0[4], prec = fmt$0[3], pad = fmt$0[2];
         /*<<camlinternalFormat.ml:1806:8>>*/ return  /*<<camlinternalFormat.ml:1806:8>>*/ fn_of_padding_precision
                 /*<<camlinternalFormat.ml:1806:8>>*/ (k$0,
                 o,
                 rest$7,
                 pad,
                 prec) /*<<camlinternalFormat.ml:1858:11>>*/ ;
       case 5:
        var rest$8 = fmt$0[4], prec$0 = fmt$0[3], pad$0 = fmt$0[2];
         /*<<camlinternalFormat.ml:1808:8>>*/ return  /*<<camlinternalFormat.ml:1808:8>>*/ fn_of_padding_precision
                 /*<<camlinternalFormat.ml:1808:8>>*/ (k$0,
                 o,
                 rest$8,
                 pad$0,
                 prec$0) /*<<camlinternalFormat.ml:1858:11>>*/ ;
       case 6:
        var rest$9 = fmt$0[4], prec$1 = fmt$0[3], pad$1 = fmt$0[2];
         /*<<camlinternalFormat.ml:1810:8>>*/ return  /*<<camlinternalFormat.ml:1810:8>>*/ fn_of_padding_precision
                 /*<<camlinternalFormat.ml:1810:8>>*/ (k$0,
                 o,
                 rest$9,
                 pad$1,
                 prec$1) /*<<camlinternalFormat.ml:1858:11>>*/ ;
       case 7:
        var rest$10 = fmt$0[4], prec$2 = fmt$0[3], pad$2 = fmt$0[2];
         /*<<camlinternalFormat.ml:1812:8>>*/ return  /*<<camlinternalFormat.ml:1812:8>>*/ fn_of_padding_precision
                 /*<<camlinternalFormat.ml:1812:8>>*/ (k$0,
                 o,
                 rest$10,
                 pad$2,
                 prec$2) /*<<camlinternalFormat.ml:1858:11>>*/ ;
       case 8:
        var rest$11 = fmt$0[4], prec$3 = fmt$0[3], pad$3 = fmt$0[2];
         /*<<camlinternalFormat.ml:1814:8>>*/ return  /*<<camlinternalFormat.ml:1814:8>>*/ fn_of_padding_precision
                 /*<<camlinternalFormat.ml:1814:8>>*/ (k$0,
                 o,
                 rest$11,
                 pad$3,
                 prec$3) /*<<camlinternalFormat.ml:1858:11>>*/ ;
       case 9:
        var _bO_ = fmt$0[1];
        if(typeof _bO_ === "number"){
         var
          rest$12 = fmt$0[2],
          x$9 =
             /*<<camlinternalFormat.ml:1816:14>>*/  /*<<camlinternalFormat.ml:1816:14>>*/ make_iprintf
              /*<<camlinternalFormat.ml:1816:14>>*/ (k$0, o, rest$12);
          /*<<camlinternalFormat.ml:1816:14>>*/ return function(_b1_){
           /*<<camlinternalFormat.ml:1784:16>>*/ return x$9 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1816:14>>*/ ;
        }
        if(0 === _bO_[0]){
         var
          rest$13 = fmt$0[2],
          x$10 =
             /*<<camlinternalFormat.ml:1818:14>>*/  /*<<camlinternalFormat.ml:1818:14>>*/ make_iprintf
              /*<<camlinternalFormat.ml:1818:14>>*/ (k$0, o, rest$13);
          /*<<camlinternalFormat.ml:1818:14>>*/ return function(_b0_){
           /*<<camlinternalFormat.ml:1784:16>>*/ return x$10 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1818:14>>*/ ;
        }
        var
         rest$14 = fmt$0[2],
         x$11 =
            /*<<camlinternalFormat.ml:1820:21>>*/  /*<<camlinternalFormat.ml:1820:21>>*/ make_iprintf
             /*<<camlinternalFormat.ml:1820:21>>*/ (k$0, o, rest$14),
         x$12 =
            /*<<camlinternalFormat.ml:1820:14>>*/ function(_bZ_){
             /*<<camlinternalFormat.ml:1784:16>>*/ return x$11 /*<<camlinternalFormat.ml:1784:16>>*/ ;
           };
         /*<<camlinternalFormat.ml:1820:14>>*/ return function(_bY_){
          /*<<camlinternalFormat.ml:1784:16>>*/ return x$12 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1820:14>>*/ ;
       case 10:
        var rest$15 = fmt$0[1]; fmt$0 = rest$15; break;
       case 11:
        var rest$16 = fmt$0[2]; fmt$0 = rest$16; break;
       case 12:
        var rest$17 = fmt$0[2]; fmt$0 = rest$17; break;
       case 13:
        var
         rest$18 = fmt$0[3],
         x$13 =
            /*<<camlinternalFormat.ml:1838:14>>*/  /*<<camlinternalFormat.ml:1838:14>>*/ make_iprintf
             /*<<camlinternalFormat.ml:1838:14>>*/ (k$0, o, rest$18);
         /*<<camlinternalFormat.ml:1838:14>>*/ return function(_bX_){
          /*<<camlinternalFormat.ml:1784:16>>*/ return x$13 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1838:14>>*/ ;
       case 14:
        var rest$19 = fmt$0[3], fmtty = fmt$0[2];
         /*<<camlinternalFormat.ml:1840:8>>*/ return function(param){
         var
          fmt = param[1],
          _bW_ =
             /*<<camlinternalFormat.ml:1842:24>>*/  /*<<camlinternalFormat.ml:1842:24>>*/ recast
              /*<<camlinternalFormat.ml:1842:24>>*/ (fmt, fmtty);
          /*<<camlinternalFormat.ml:1842:12>>*/ return  /*<<camlinternalFormat.ml:1842:12>>*/ make_iprintf
                  /*<<camlinternalFormat.ml:1842:12>>*/ (k$0,
                  o,
                   /*<<camlinternalFormat.ml:1842:12>>*/ caml_call2
                    /*<<camlinternalFormat.ml:1842:12>>*/ (CamlinternalFormatBasics
                     [3],
                    _bW_,
                    rest$19)) /*<<camlinternalFormat.ml:1842:48>>*/ ; /*<<camlinternalFormat.ml:1842:48>>*/ } /*<<camlinternalFormat.ml:1840:8>>*/ ;
       case 15:
        var
         rest$20 = fmt$0[1],
         x$14 =
            /*<<camlinternalFormat.ml:1822:21>>*/  /*<<camlinternalFormat.ml:1822:21>>*/ make_iprintf
             /*<<camlinternalFormat.ml:1822:21>>*/ (k$0, o, rest$20),
         x$15 =
            /*<<camlinternalFormat.ml:1822:14>>*/ function(_bV_){
             /*<<camlinternalFormat.ml:1784:16>>*/ return x$14 /*<<camlinternalFormat.ml:1784:16>>*/ ;
           };
         /*<<camlinternalFormat.ml:1822:14>>*/ return function(_bU_){
          /*<<camlinternalFormat.ml:1784:16>>*/ return x$15 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1822:14>>*/ ;
       case 16:
        var
         rest$21 = fmt$0[1],
         x$16 =
            /*<<camlinternalFormat.ml:1824:14>>*/  /*<<camlinternalFormat.ml:1824:14>>*/ make_iprintf
             /*<<camlinternalFormat.ml:1824:14>>*/ (k$0, o, rest$21);
         /*<<camlinternalFormat.ml:1824:14>>*/ return function(_bT_){
          /*<<camlinternalFormat.ml:1784:16>>*/ return x$16 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1824:14>>*/ ;
       case 17:
        var rest$22 = fmt$0[2]; fmt$0 = rest$22; break;
       case 18:
        var _bP_ = fmt$0[1];
        if(0 === _bP_[0]){
         var rest$23 = fmt$0[2], fmt$1 = _bP_[1][1];
         let k = k$0, rest = rest$23;
         var
          k$1 =
            function(koc){
              /*<<camlinternalFormat.ml:1854:33>>*/ return make_iprintf
                     (k, koc, rest) /*<<camlinternalFormat.ml:1854:56>>*/ ;
             /*<<camlinternalFormat.ml:1854:56>>*/ };
         k$0 = k$1;
         fmt$0 = fmt$1;
        }
        else{
         var rest$24 = fmt$0[2], fmt$2 = _bP_[1][1];
         let k = k$0, rest = rest$24;
         var
          k$2 =
            function(koc){
              /*<<camlinternalFormat.ml:1856:33>>*/ return make_iprintf
                     (k, koc, rest) /*<<camlinternalFormat.ml:1856:56>>*/ ;
             /*<<camlinternalFormat.ml:1856:56>>*/ };
         k$0 = k$2;
         fmt$0 = fmt$2;
        }
        break;
       case 19:
         /*<<camlinternalFormat.ml:1830:8>>*/ throw  /*<<camlinternalFormat.ml:1830:8>>*/ caml_maybe_attach_backtrace
                /*<<camlinternalFormat.ml:1830:8>>*/ ([0, Assert_failure, _w_],
                1);
       case 20:
        var
         rest$25 = fmt$0[3],
         x$17 =
            /*<<camlinternalFormat.ml:1844:14>>*/  /*<<camlinternalFormat.ml:1844:14>>*/ make_iprintf
             /*<<camlinternalFormat.ml:1844:14>>*/ (k$0, o, rest$25);
         /*<<camlinternalFormat.ml:1844:14>>*/ return function(_bS_){
          /*<<camlinternalFormat.ml:1784:16>>*/ return x$17 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1844:14>>*/ ;
       case 21:
        var
         rest$26 = fmt$0[2],
         x$18 =
            /*<<camlinternalFormat.ml:1846:14>>*/  /*<<camlinternalFormat.ml:1846:14>>*/ make_iprintf
             /*<<camlinternalFormat.ml:1846:14>>*/ (k$0, o, rest$26);
         /*<<camlinternalFormat.ml:1846:14>>*/ return function(_bR_){
          /*<<camlinternalFormat.ml:1784:16>>*/ return x$18 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1846:14>>*/ ;
       case 22:
        var
         rest$27 = fmt$0[1],
         x$19 =
            /*<<camlinternalFormat.ml:1848:14>>*/  /*<<camlinternalFormat.ml:1848:14>>*/ make_iprintf
             /*<<camlinternalFormat.ml:1848:14>>*/ (k$0, o, rest$27);
         /*<<camlinternalFormat.ml:1848:14>>*/ return function(_bQ_){
          /*<<camlinternalFormat.ml:1784:16>>*/ return x$19 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1848:14>>*/ ;
       case 23:
        var rest$28 = fmt$0[2], ign = fmt$0[1];
         /*<<camlinternalFormat.ml:1850:8>>*/ return  /*<<camlinternalFormat.ml:1850:8>>*/ make_ignored_param
                 /*<<camlinternalFormat.ml:1850:8>>*/ (function(param){
                   /*<<camlinternalFormat.ml:1850:37>>*/ return caml_call1
                          (k$0, o) /*<<camlinternalFormat.ml:1850:40>>*/ ;
                  /*<<camlinternalFormat.ml:1850:40>>*/ },
                 0,
                 ign,
                 rest$28) /*<<camlinternalFormat.ml:1858:11>>*/ ;
       default:
        var rest$29 = fmt$0[3], arity = fmt$0[1];
         /*<<camlinternalFormat.ml:1826:8>>*/ if(counter >= 50)
          /*<<camlinternalFormat.ml:1826:8>>*/ return  /*<<camlinternalFormat.ml:1826:8>>*/ caml_trampoline_return
                  /*<<camlinternalFormat.ml:1826:8>>*/ (fn_of_custom_arity$0,
                  [0, k$0, o, rest$29, arity]) /*<<camlinternalFormat.ml:1858:11>>*/ ;
        var counter$0 = counter + 1 | 0;
         /*<<camlinternalFormat.ml:1826:8>>*/ return  /*<<camlinternalFormat.ml:1826:8>>*/ fn_of_custom_arity$0
                 /*<<camlinternalFormat.ml:1826:8>>*/ (counter$0,
                 k$0,
                 o,
                 rest$29,
                 arity) /*<<camlinternalFormat.ml:1858:11>>*/ ;
     }
    }
    /*<<camlinternalFormat.ml:1858:11>>*/ }
   function make_iprintf(k, o, fmt){
     /*<<?>>*/ return caml_trampoline(make_iprintf$0(0, k, o, fmt));
   }
   function fn_of_padding_precision(k, o, fmt, pad, prec){
     /*<<camlinternalFormat.ml:1863:26>>*/ if(typeof pad === "number"){
     if(typeof prec !== "number"){
      var
       x$2 =
          /*<<camlinternalFormat.ml:1867:14>>*/  /*<<camlinternalFormat.ml:1867:14>>*/ make_iprintf
           /*<<camlinternalFormat.ml:1867:14>>*/ (k, o, fmt);
       /*<<camlinternalFormat.ml:1867:14>>*/ return function(_bL_){
        /*<<camlinternalFormat.ml:1784:16>>*/ return x$2 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1867:14>>*/ ;
     }
     if(prec){
      var
       x =
          /*<<camlinternalFormat.ml:1869:21>>*/  /*<<camlinternalFormat.ml:1869:21>>*/ make_iprintf
           /*<<camlinternalFormat.ml:1869:21>>*/ (k, o, fmt),
       x$0 =
          /*<<camlinternalFormat.ml:1869:14>>*/ function(_bK_){
           /*<<camlinternalFormat.ml:1784:16>>*/ return x /*<<camlinternalFormat.ml:1784:16>>*/ ;
         };
       /*<<camlinternalFormat.ml:1869:14>>*/ return function(_bJ_){
        /*<<camlinternalFormat.ml:1784:16>>*/ return x$0 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1869:14>>*/ ;
     }
     var
      x$1 =
         /*<<camlinternalFormat.ml:1865:14>>*/  /*<<camlinternalFormat.ml:1865:14>>*/ make_iprintf
          /*<<camlinternalFormat.ml:1865:14>>*/ (k, o, fmt);
      /*<<camlinternalFormat.ml:1865:14>>*/ return function(_bI_){
       /*<<camlinternalFormat.ml:1784:16>>*/ return x$1 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1865:14>>*/ ;
    }
    if(0 === pad[0]){
     if(typeof prec !== "number"){
      var
       x$6 =
          /*<<camlinternalFormat.ml:1873:14>>*/  /*<<camlinternalFormat.ml:1873:14>>*/ make_iprintf
           /*<<camlinternalFormat.ml:1873:14>>*/ (k, o, fmt);
       /*<<camlinternalFormat.ml:1873:14>>*/ return function(_bH_){
        /*<<camlinternalFormat.ml:1784:16>>*/ return x$6 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1873:14>>*/ ;
     }
     if(prec){
      var
       x$3 =
          /*<<camlinternalFormat.ml:1875:21>>*/  /*<<camlinternalFormat.ml:1875:21>>*/ make_iprintf
           /*<<camlinternalFormat.ml:1875:21>>*/ (k, o, fmt),
       x$4 =
          /*<<camlinternalFormat.ml:1875:14>>*/ function(_bG_){
           /*<<camlinternalFormat.ml:1784:16>>*/ return x$3 /*<<camlinternalFormat.ml:1784:16>>*/ ;
         };
       /*<<camlinternalFormat.ml:1875:14>>*/ return function(_bF_){
        /*<<camlinternalFormat.ml:1784:16>>*/ return x$4 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1875:14>>*/ ;
     }
     var
      x$5 =
         /*<<camlinternalFormat.ml:1871:14>>*/  /*<<camlinternalFormat.ml:1871:14>>*/ make_iprintf
          /*<<camlinternalFormat.ml:1871:14>>*/ (k, o, fmt);
      /*<<camlinternalFormat.ml:1871:14>>*/ return function(_bE_){
       /*<<camlinternalFormat.ml:1784:16>>*/ return x$5 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1871:14>>*/ ;
    }
    if(typeof prec !== "number"){
     var
      x$12 =
         /*<<camlinternalFormat.ml:1879:21>>*/  /*<<camlinternalFormat.ml:1879:21>>*/ make_iprintf
          /*<<camlinternalFormat.ml:1879:21>>*/ (k, o, fmt),
      x$13 =
         /*<<camlinternalFormat.ml:1879:14>>*/ function(_bD_){
          /*<<camlinternalFormat.ml:1784:16>>*/ return x$12 /*<<camlinternalFormat.ml:1784:16>>*/ ;
        };
      /*<<camlinternalFormat.ml:1879:14>>*/ return function(_bC_){
       /*<<camlinternalFormat.ml:1784:16>>*/ return x$13 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1879:14>>*/ ;
    }
    if(prec){
     var
      x$7 =
         /*<<camlinternalFormat.ml:1881:28>>*/  /*<<camlinternalFormat.ml:1881:28>>*/ make_iprintf
          /*<<camlinternalFormat.ml:1881:28>>*/ (k, o, fmt),
      x$8 =
         /*<<camlinternalFormat.ml:1881:21>>*/ function(_bB_){
          /*<<camlinternalFormat.ml:1784:16>>*/ return x$7 /*<<camlinternalFormat.ml:1784:16>>*/ ;
        },
      x$9 =
         /*<<camlinternalFormat.ml:1881:14>>*/ function(_bA_){
          /*<<camlinternalFormat.ml:1784:16>>*/ return x$8 /*<<camlinternalFormat.ml:1784:16>>*/ ;
        };
      /*<<camlinternalFormat.ml:1881:14>>*/ return function(_bz_){
       /*<<camlinternalFormat.ml:1784:16>>*/ return x$9 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1881:14>>*/ ;
    }
    var
     x$10 =
        /*<<camlinternalFormat.ml:1877:21>>*/  /*<<camlinternalFormat.ml:1877:21>>*/ make_iprintf
         /*<<camlinternalFormat.ml:1877:21>>*/ (k, o, fmt);
    function x$11(_by_){
      /*<<camlinternalFormat.ml:1784:16>>*/ return x$10 /*<<camlinternalFormat.ml:1784:16>>*/ ;
    }
     /*<<camlinternalFormat.ml:1877:14>>*/ return function(_bx_){
      /*<<camlinternalFormat.ml:1784:16>>*/ return x$11 /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1877:14>>*/ ;
    /*<<camlinternalFormat.ml:1881:52>>*/ }
   function fn_of_custom_arity$0(counter, k, o, fmt, param){
     /*<<camlinternalFormat.ml:1882:4>>*/ if(param){
     var
      arity = param[1],
      x =
         /*<<camlinternalFormat.ml:1889:14>>*/  /*<<camlinternalFormat.ml:1889:14>>*/ fn_of_custom_arity
          /*<<camlinternalFormat.ml:1889:14>>*/ (k, o, fmt, arity);
      /*<<camlinternalFormat.ml:1889:14>>*/ return function(_bw_){
       /*<<camlinternalFormat.ml:1784:16>>*/ return x /*<<camlinternalFormat.ml:1784:16>>*/ ;} /*<<camlinternalFormat.ml:1889:14>>*/ ;
    }
     /*<<camlinternalFormat.ml:1887:8>>*/ if(counter >= 50)
      /*<<camlinternalFormat.ml:1887:8>>*/ return  /*<<camlinternalFormat.ml:1887:8>>*/ caml_trampoline_return
              /*<<camlinternalFormat.ml:1887:8>>*/ (make_iprintf$0,
              [0, k, o, fmt]) /*<<camlinternalFormat.ml:1889:48>>*/ ;
    var counter$0 = counter + 1 | 0;
     /*<<camlinternalFormat.ml:1887:8>>*/ return  /*<<camlinternalFormat.ml:1887:8>>*/ make_iprintf$0
             /*<<camlinternalFormat.ml:1887:8>>*/ (counter$0, k, o, fmt) /*<<camlinternalFormat.ml:1889:48>>*/ ;
    /*<<camlinternalFormat.ml:1889:48>>*/ }
   function fn_of_custom_arity(k, o, fmt, param){
     /*<<?>>*/ return caml_trampoline
            (fn_of_custom_arity$0(0, k, o, fmt, param));
   }
   function output_acc(o, acc){
    var acc$0 = acc;
     /*<<camlinternalFormat.ml:1897:27>>*/ for(;;){
     if(typeof acc$0 === "number")
       /*<<camlinternalFormat.ml:1912:32>>*/ return 0 /*<<camlinternalFormat.ml:1912:32>>*/ ;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s =
            /*<<camlinternalFormat.ml:1899:12>>*/  /*<<camlinternalFormat.ml:1899:12>>*/ string_of_formatting_lit
             /*<<camlinternalFormat.ml:1899:12>>*/ (fmting_lit);
         /*<<camlinternalFormat.ml:1900:4>>*/  /*<<camlinternalFormat.ml:1900:4>>*/ output_acc
          /*<<camlinternalFormat.ml:1900:4>>*/ (o, p);
         /*<<camlinternalFormat.ml:1900:4>>*/ return  /*<<camlinternalFormat.ml:1900:4>>*/ caml_call2
                 /*<<camlinternalFormat.ml:1900:4>>*/ (Stdlib[66], o, s) /*<<camlinternalFormat.ml:1912:34>>*/ ;
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
          /*<<camlinternalFormat.ml:1902:4>>*/  /*<<camlinternalFormat.ml:1902:4>>*/ output_acc
           /*<<camlinternalFormat.ml:1902:4>>*/ (o, p$0);
          /*<<camlinternalFormat.ml:1902:20>>*/  /*<<camlinternalFormat.ml:1902:20>>*/ caml_call2
           /*<<camlinternalFormat.ml:1902:20>>*/ (Stdlib[66], o, cst$18);
         acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
          /*<<camlinternalFormat.ml:1904:4>>*/  /*<<camlinternalFormat.ml:1904:4>>*/ output_acc
           /*<<camlinternalFormat.ml:1904:4>>*/ (o, p$0);
          /*<<camlinternalFormat.ml:1904:20>>*/  /*<<camlinternalFormat.ml:1904:20>>*/ caml_call2
           /*<<camlinternalFormat.ml:1904:20>>*/ (Stdlib[66], o, cst$19);
         acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
         /*<<camlinternalFormat.ml:1909:32>>*/  /*<<camlinternalFormat.ml:1909:32>>*/ output_acc
          /*<<camlinternalFormat.ml:1909:32>>*/ (o, p$3);
         /*<<camlinternalFormat.ml:1909:32>>*/ return  /*<<camlinternalFormat.ml:1909:32>>*/ caml_call1
                 /*<<camlinternalFormat.ml:1909:32>>*/ (f, o) /*<<camlinternalFormat.ml:1912:34>>*/ ;
       case 7:
        var p$4 = acc$0[1];
         /*<<camlinternalFormat.ml:1910:32>>*/  /*<<camlinternalFormat.ml:1910:32>>*/ output_acc
          /*<<camlinternalFormat.ml:1910:32>>*/ (o, p$4);
         /*<<camlinternalFormat.ml:1910:32>>*/ return  /*<<camlinternalFormat.ml:1910:32>>*/ caml_call1
                 /*<<camlinternalFormat.ml:1910:32>>*/ (Stdlib[63], o) /*<<camlinternalFormat.ml:1912:34>>*/ ;
       case 8:
        var msg = acc$0[2], p$5 = acc$0[1];
         /*<<camlinternalFormat.ml:1911:32>>*/  /*<<camlinternalFormat.ml:1911:32>>*/ output_acc
          /*<<camlinternalFormat.ml:1911:32>>*/ (o, p$5);
         /*<<camlinternalFormat.ml:1911:32>>*/ return  /*<<camlinternalFormat.ml:1911:32>>*/ caml_call1
                 /*<<camlinternalFormat.ml:1911:32>>*/ (Stdlib[1], msg) /*<<camlinternalFormat.ml:1912:34>>*/ ;
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
         /*<<camlinternalFormat.ml:1906:32>>*/  /*<<camlinternalFormat.ml:1906:32>>*/ output_acc
          /*<<camlinternalFormat.ml:1906:32>>*/ (o, p$1);
         /*<<camlinternalFormat.ml:1906:32>>*/ return  /*<<camlinternalFormat.ml:1906:32>>*/ caml_call2
                 /*<<camlinternalFormat.ml:1906:32>>*/ (Stdlib[66], o, s$0) /*<<camlinternalFormat.ml:1912:34>>*/ ;
       default:
        var c = acc$0[2], p$2 = acc$0[1];
         /*<<camlinternalFormat.ml:1908:32>>*/  /*<<camlinternalFormat.ml:1908:32>>*/ output_acc
          /*<<camlinternalFormat.ml:1908:32>>*/ (o, p$2);
         /*<<camlinternalFormat.ml:1908:32>>*/ return  /*<<camlinternalFormat.ml:1908:32>>*/ caml_call2
                 /*<<camlinternalFormat.ml:1908:32>>*/ (Stdlib[65], o, c) /*<<camlinternalFormat.ml:1912:34>>*/ ;
     }
    }
    /*<<camlinternalFormat.ml:1912:34>>*/ }
   function bufput_acc(b, acc){
    var acc$0 = acc;
     /*<<camlinternalFormat.ml:1917:27>>*/ for(;;){
     if(typeof acc$0 === "number")
       /*<<camlinternalFormat.ml:1932:32>>*/ return 0 /*<<camlinternalFormat.ml:1932:32>>*/ ;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s =
            /*<<camlinternalFormat.ml:1919:12>>*/  /*<<camlinternalFormat.ml:1919:12>>*/ string_of_formatting_lit
             /*<<camlinternalFormat.ml:1919:12>>*/ (fmting_lit);
         /*<<camlinternalFormat.ml:1920:4>>*/  /*<<camlinternalFormat.ml:1920:4>>*/ bufput_acc
          /*<<camlinternalFormat.ml:1920:4>>*/ (b, p);
         /*<<camlinternalFormat.ml:1920:4>>*/ return  /*<<camlinternalFormat.ml:1920:4>>*/ caml_call2
                 /*<<camlinternalFormat.ml:1920:4>>*/ (Stdlib_Buffer[16],
                 b,
                 s) /*<<camlinternalFormat.ml:1932:34>>*/ ;
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
          /*<<camlinternalFormat.ml:1922:4>>*/  /*<<camlinternalFormat.ml:1922:4>>*/ bufput_acc
           /*<<camlinternalFormat.ml:1922:4>>*/ (b, p$0);
          /*<<camlinternalFormat.ml:1922:20>>*/  /*<<camlinternalFormat.ml:1922:20>>*/ caml_call2
           /*<<camlinternalFormat.ml:1922:20>>*/ (Stdlib_Buffer[16],
           b,
           cst$20);
         acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
          /*<<camlinternalFormat.ml:1924:4>>*/  /*<<camlinternalFormat.ml:1924:4>>*/ bufput_acc
           /*<<camlinternalFormat.ml:1924:4>>*/ (b, p$0);
          /*<<camlinternalFormat.ml:1924:20>>*/  /*<<camlinternalFormat.ml:1924:20>>*/ caml_call2
           /*<<camlinternalFormat.ml:1924:20>>*/ (Stdlib_Buffer[16],
           b,
           cst$21);
         acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
         /*<<camlinternalFormat.ml:1929:32>>*/  /*<<camlinternalFormat.ml:1929:32>>*/ bufput_acc
          /*<<camlinternalFormat.ml:1929:32>>*/ (b, p$3);
         /*<<camlinternalFormat.ml:1929:32>>*/ return  /*<<camlinternalFormat.ml:1929:32>>*/ caml_call1
                 /*<<camlinternalFormat.ml:1929:32>>*/ (f, b) /*<<camlinternalFormat.ml:1932:34>>*/ ;
       case 7:
        var acc$3 = acc$0[1]; acc$0 = acc$3; break;
       case 8:
        var msg = acc$0[2], p$4 = acc$0[1];
         /*<<camlinternalFormat.ml:1931:32>>*/  /*<<camlinternalFormat.ml:1931:32>>*/ bufput_acc
          /*<<camlinternalFormat.ml:1931:32>>*/ (b, p$4);
         /*<<camlinternalFormat.ml:1931:32>>*/ return  /*<<camlinternalFormat.ml:1931:32>>*/ caml_call1
                 /*<<camlinternalFormat.ml:1931:32>>*/ (Stdlib[1], msg) /*<<camlinternalFormat.ml:1932:34>>*/ ;
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
         /*<<camlinternalFormat.ml:1926:32>>*/  /*<<camlinternalFormat.ml:1926:32>>*/ bufput_acc
          /*<<camlinternalFormat.ml:1926:32>>*/ (b, p$1);
         /*<<camlinternalFormat.ml:1926:32>>*/ return  /*<<camlinternalFormat.ml:1926:32>>*/ caml_call2
                 /*<<camlinternalFormat.ml:1926:32>>*/ (Stdlib_Buffer[16],
                 b,
                 s$0) /*<<camlinternalFormat.ml:1932:34>>*/ ;
       default:
        var c = acc$0[2], p$2 = acc$0[1];
         /*<<camlinternalFormat.ml:1928:32>>*/  /*<<camlinternalFormat.ml:1928:32>>*/ bufput_acc
          /*<<camlinternalFormat.ml:1928:32>>*/ (b, p$2);
         /*<<camlinternalFormat.ml:1928:32>>*/ return  /*<<camlinternalFormat.ml:1928:32>>*/ caml_call2
                 /*<<camlinternalFormat.ml:1928:32>>*/ (Stdlib_Buffer[12],
                 b,
                 c) /*<<camlinternalFormat.ml:1932:34>>*/ ;
     }
    }
    /*<<camlinternalFormat.ml:1932:34>>*/ }
   function strput_acc(b, acc){
    var acc$0 = acc;
     /*<<camlinternalFormat.ml:1938:27>>*/ for(;;){
     if(typeof acc$0 === "number")
       /*<<camlinternalFormat.ml:1953:32>>*/ return 0 /*<<camlinternalFormat.ml:1953:32>>*/ ;
     switch(acc$0[0]){
       case 0:
        var
         fmting_lit = acc$0[2],
         p = acc$0[1],
         s =
            /*<<camlinternalFormat.ml:1940:12>>*/  /*<<camlinternalFormat.ml:1940:12>>*/ string_of_formatting_lit
             /*<<camlinternalFormat.ml:1940:12>>*/ (fmting_lit);
         /*<<camlinternalFormat.ml:1941:4>>*/  /*<<camlinternalFormat.ml:1941:4>>*/ strput_acc
          /*<<camlinternalFormat.ml:1941:4>>*/ (b, p);
         /*<<camlinternalFormat.ml:1941:4>>*/ return  /*<<camlinternalFormat.ml:1941:4>>*/ caml_call2
                 /*<<camlinternalFormat.ml:1941:4>>*/ (Stdlib_Buffer[16],
                 b,
                 s) /*<<camlinternalFormat.ml:1953:34>>*/ ;
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
         var acc$1 = match[1];
          /*<<camlinternalFormat.ml:1943:4>>*/  /*<<camlinternalFormat.ml:1943:4>>*/ strput_acc
           /*<<camlinternalFormat.ml:1943:4>>*/ (b, p$0);
          /*<<camlinternalFormat.ml:1943:20>>*/  /*<<camlinternalFormat.ml:1943:20>>*/ caml_call2
           /*<<camlinternalFormat.ml:1943:20>>*/ (Stdlib_Buffer[16],
           b,
           cst$22);
         acc$0 = acc$1;
        }
        else{
         var acc$2 = match[1];
          /*<<camlinternalFormat.ml:1945:4>>*/  /*<<camlinternalFormat.ml:1945:4>>*/ strput_acc
           /*<<camlinternalFormat.ml:1945:4>>*/ (b, p$0);
          /*<<camlinternalFormat.ml:1945:20>>*/  /*<<camlinternalFormat.ml:1945:20>>*/ caml_call2
           /*<<camlinternalFormat.ml:1945:20>>*/ (Stdlib_Buffer[16],
           b,
           cst$23);
         acc$0 = acc$2;
        }
        break;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
         /*<<camlinternalFormat.ml:1950:32>>*/  /*<<camlinternalFormat.ml:1950:32>>*/ strput_acc
          /*<<camlinternalFormat.ml:1950:32>>*/ (b, p$3);
        var
         _bv_ =
            /*<<camlinternalFormat.ml:1950:68>>*/  /*<<camlinternalFormat.ml:1950:68>>*/ caml_call1
             /*<<camlinternalFormat.ml:1950:68>>*/ (f, 0);
         /*<<camlinternalFormat.ml:1950:68>>*/ return  /*<<camlinternalFormat.ml:1950:68>>*/ caml_call2
                 /*<<camlinternalFormat.ml:1950:68>>*/ (Stdlib_Buffer[16],
                 b,
                 _bv_) /*<<camlinternalFormat.ml:1953:34>>*/ ;
       case 7:
        var acc$3 = acc$0[1]; acc$0 = acc$3; break;
       case 8:
        var msg = acc$0[2], p$4 = acc$0[1];
         /*<<camlinternalFormat.ml:1952:32>>*/  /*<<camlinternalFormat.ml:1952:32>>*/ strput_acc
          /*<<camlinternalFormat.ml:1952:32>>*/ (b, p$4);
         /*<<camlinternalFormat.ml:1952:32>>*/ return  /*<<camlinternalFormat.ml:1952:32>>*/ caml_call1
                 /*<<camlinternalFormat.ml:1952:32>>*/ (Stdlib[1], msg) /*<<camlinternalFormat.ml:1953:34>>*/ ;
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
         /*<<camlinternalFormat.ml:1947:32>>*/  /*<<camlinternalFormat.ml:1947:32>>*/ strput_acc
          /*<<camlinternalFormat.ml:1947:32>>*/ (b, p$1);
         /*<<camlinternalFormat.ml:1947:32>>*/ return  /*<<camlinternalFormat.ml:1947:32>>*/ caml_call2
                 /*<<camlinternalFormat.ml:1947:32>>*/ (Stdlib_Buffer[16],
                 b,
                 s$0) /*<<camlinternalFormat.ml:1953:34>>*/ ;
       default:
        var c = acc$0[2], p$2 = acc$0[1];
         /*<<camlinternalFormat.ml:1949:32>>*/  /*<<camlinternalFormat.ml:1949:32>>*/ strput_acc
          /*<<camlinternalFormat.ml:1949:32>>*/ (b, p$2);
         /*<<camlinternalFormat.ml:1949:32>>*/ return  /*<<camlinternalFormat.ml:1949:32>>*/ caml_call2
                 /*<<camlinternalFormat.ml:1949:32>>*/ (Stdlib_Buffer[12],
                 b,
                 c) /*<<camlinternalFormat.ml:1953:34>>*/ ;
     }
    }
    /*<<camlinternalFormat.ml:1953:34>>*/ }
   function failwith_message(param){
    var
     fmt = param[1],
     buf =
        /*<<camlinternalFormat.ml:1960:12>>*/  /*<<camlinternalFormat.ml:1960:12>>*/ caml_call1
         /*<<camlinternalFormat.ml:1960:12>>*/ (Stdlib_Buffer[1], 256);
    function k(acc){
      /*<<camlinternalFormat.ml:1961:14>>*/  /*<<camlinternalFormat.ml:1961:14>>*/ strput_acc
       /*<<camlinternalFormat.ml:1961:14>>*/ (buf, acc);
     var
      _bu_ =
         /*<<camlinternalFormat.ml:1961:43>>*/  /*<<camlinternalFormat.ml:1961:43>>*/ caml_call1
          /*<<camlinternalFormat.ml:1961:43>>*/ (Stdlib_Buffer[2], buf);
      /*<<camlinternalFormat.ml:1961:43>>*/ return  /*<<camlinternalFormat.ml:1961:43>>*/ caml_call1
              /*<<camlinternalFormat.ml:1961:43>>*/ (Stdlib[2], _bu_) /*<<camlinternalFormat.ml:1961:64>>*/ ;
     /*<<camlinternalFormat.ml:1961:64>>*/ }
     /*<<camlinternalFormat.ml:1962:2>>*/ return  /*<<camlinternalFormat.ml:1962:2>>*/ make_printf
             /*<<camlinternalFormat.ml:1962:2>>*/ (k, 0, fmt) /*<<camlinternalFormat.ml:1962:30>>*/ ;
    /*<<camlinternalFormat.ml:1962:30>>*/ }
   function open_box_of_string(str){
     /*<<camlinternalFormat.ml:1969:2>>*/ if(str === cst$43)
      /*<<camlinternalFormat.ml:1969:19>>*/ return _x_ /*<<camlinternalFormat.ml:1969:19>>*/ ;
    var len = caml_ml_string_length(str);
    function invalid_box(param){
      /*<<camlinternalFormat.ml:1971:25>>*/ return  /*<<camlinternalFormat.ml:1971:4>>*/ caml_call1
              /*<<camlinternalFormat.ml:1971:4>>*/ ( /*<<camlinternalFormat.ml:1971:4>>*/ failwith_message
                /*<<camlinternalFormat.ml:1971:4>>*/ (_y_),
              str) /*<<camlinternalFormat.ml:1971:74>>*/ ;
     /*<<camlinternalFormat.ml:1971:74>>*/ }
    function parse_spaces(i){
     var i$0 = i;
      /*<<camlinternalFormat.ml:1973:6>>*/ for(;;){
      if(i$0 === len)
        /*<<camlinternalFormat.ml:1973:22>>*/ return i$0 /*<<camlinternalFormat.ml:1973:22>>*/ ;
      var
       match =
          /*<<camlinternalFormat.ml:1974:14>>*/  /*<<camlinternalFormat.ml:1974:14>>*/ caml_string_get
           /*<<camlinternalFormat.ml:1974:14>>*/ (str, i$0);
      if(9 !== match && 32 !== match)
        /*<<camlinternalFormat.ml:1976:15>>*/ return i$0 /*<<camlinternalFormat.ml:1976:15>>*/ ;
      var i$1 =  /*<<camlinternalFormat.ml:1975:24>>*/ i$0 + 1 | 0;
      i$0 = i$1;
     }
     /*<<camlinternalFormat.ml:1976:16>>*/ }
    var
     wstart =
        /*<<camlinternalFormat.ml:1987:17>>*/  /*<<camlinternalFormat.ml:1987:17>>*/ parse_spaces
         /*<<camlinternalFormat.ml:1987:17>>*/ (0);
    a:
    b:
    {
     var wend = wstart;
      /*<<camlinternalFormat.ml:1978:6>>*/ for(;;){
      if(wend === len) break b;
      if
       (25
        <
          /*<<camlinternalFormat.ml:1979:14>>*/ caml_string_get
           /*<<camlinternalFormat.ml:1979:14>>*/ (str, wend)
         - 97
         >>> 0)
       break;
      var j =  /*<<camlinternalFormat.ml:1980:24>>*/ wend + 1 | 0;
      wend = j;
     }
     break a;
    }
    var
     box_name =
        /*<<camlinternalFormat.ml:1989:19>>*/  /*<<camlinternalFormat.ml:1989:19>>*/ caml_call3
         /*<<camlinternalFormat.ml:1989:19>>*/ (Stdlib_String[16],
         str,
         wstart,
         wend - wstart | 0),
     nstart =
        /*<<camlinternalFormat.ml:1990:17>>*/  /*<<camlinternalFormat.ml:1990:17>>*/ parse_spaces
         /*<<camlinternalFormat.ml:1990:17>>*/ (wend);
    a:
    b:
    {
     var nend = nstart;
      /*<<camlinternalFormat.ml:1983:6>>*/ for(;;){
      if(nend === len) break b;
      var
       match =
          /*<<camlinternalFormat.ml:1984:14>>*/  /*<<camlinternalFormat.ml:1984:14>>*/ caml_string_get
           /*<<camlinternalFormat.ml:1984:14>>*/ (str, nend);
      if(48 <= match){if(58 <= match) break;} else if(45 !== match) break;
      var j$0 =  /*<<camlinternalFormat.ml:1985:30>>*/ nend + 1 | 0;
      nend = j$0;
     }
     break a;
    }
    if(nstart === nend)
     var indent = 0;
    else
      /*<<camlinternalFormat.ml:1994:8>>*/ try{
      var
       _bs_ =
          /*<<camlinternalFormat.ml:1994:12>>*/  /*<<camlinternalFormat.ml:1994:12>>*/ runtime.caml_int_of_string
           /*<<camlinternalFormat.ml:1994:12>>*/ ( /*<<camlinternalFormat.ml:1994:26>>*/ caml_call3
             /*<<camlinternalFormat.ml:1994:26>>*/ (Stdlib_String[16],
             str,
             nstart,
             nend - nstart | 0)),
       indent = _bs_;
     }
     catch(_bt_){
      var _br_ = caml_wrap_exception(_bt_);
      if(_br_[1] !== Stdlib[7]) throw caml_maybe_attach_backtrace(_br_, 0);
      var
       indent =
          /*<<camlinternalFormat.ml:1995:26>>*/ invalid_box
           /*<<camlinternalFormat.ml:1995:26>>*/ (0);
     }
    var
     exp_end =
        /*<<camlinternalFormat.ml:1996:18>>*/  /*<<camlinternalFormat.ml:1996:18>>*/ parse_spaces
         /*<<camlinternalFormat.ml:1996:18>>*/ (nend);
    if(exp_end !== len)
      /*<<camlinternalFormat.ml:1997:27>>*/  /*<<camlinternalFormat.ml:1997:27>>*/ invalid_box
       /*<<camlinternalFormat.ml:1997:27>>*/ (0);
    a:
    {
     if(box_name !== cst$43 && box_name !== "b"){
      if(box_name === "h"){var box_type = 0; break a;}
      if(box_name === "hov"){var box_type = 3; break a;}
      if(box_name === "hv"){var box_type = 2; break a;}
      if(box_name !== "v"){
       var
        box_type =
           /*<<camlinternalFormat.ml:2004:20>>*/ invalid_box
            /*<<camlinternalFormat.ml:2004:20>>*/ (0);
       break a;
      }
      var box_type = 1;
      break a;
     }
     var box_type = 4;
    }
     /*<<camlinternalFormat.ml:2005:4>>*/ return [0, indent, box_type] /*<<camlinternalFormat.ml:2005:4>>*/ ;
    /*<<camlinternalFormat.ml:2005:22>>*/ }
   function make_padding_fmt_ebb(pad, fmt){
     /*<<camlinternalFormat.ml:2015:15>>*/ if(typeof pad === "number")
      /*<<camlinternalFormat.ml:2016:26>>*/ return [0, 0, fmt] /*<<camlinternalFormat.ml:2016:26>>*/ ;
    if(0 === pad[0]){
     var w = pad[2], s = pad[1];
      /*<<camlinternalFormat.ml:2017:26>>*/ return [0, [0, s, w], fmt] /*<<camlinternalFormat.ml:2017:26>>*/ ;
    }
    var s$0 = pad[1];
     /*<<camlinternalFormat.ml:2018:26>>*/ return [0, [1, s$0], fmt] /*<<camlinternalFormat.ml:2018:26>>*/ ;
    /*<<camlinternalFormat.ml:2018:62>>*/ }
   function make_padprec_fmt_ebb(pad, prec, fmt){
     /*<<camlinternalFormat.ml:2038:2>>*/ if(typeof prec === "number")
     var match = prec ? [0, 1] : [0, 0];
    else
     var p = prec[1], match = [0, [0, p]];
    var prec$0 = match[1];
     /*<<camlinternalFormat.ml:2039:2>>*/ if(typeof pad === "number")
      /*<<camlinternalFormat.ml:2040:26>>*/ return [0, 0, prec$0, fmt] /*<<camlinternalFormat.ml:2040:26>>*/ ;
     /*<<camlinternalFormat.ml:2039:2>>*/ if(0 === pad[0]){
     var w = pad[2], s = pad[1];
      /*<<camlinternalFormat.ml:2041:26>>*/ return [0, [0, s, w], prec$0, fmt] /*<<camlinternalFormat.ml:2041:26>>*/ ;
    }
    var s$0 = pad[1];
     /*<<camlinternalFormat.ml:2042:26>>*/ return [0, [1, s$0], prec$0, fmt] /*<<camlinternalFormat.ml:2042:26>>*/ ;
    /*<<camlinternalFormat.ml:2042:69>>*/ }
   function fmt_ebb_of_string(legacy_behavior, str){
     /*<<?>>*/ if(legacy_behavior)
     var flag = legacy_behavior[1], legacy_behavior$0 = flag;
    else
     var legacy_behavior$0 = 1;
    function invalid_format_message(str_ind, msg){
      /*<<camlinternalFormat.ml:2084:4>>*/ return  /*<<camlinternalFormat.ml:2084:4>>*/ caml_call3
              /*<<camlinternalFormat.ml:2084:4>>*/ ( /*<<camlinternalFormat.ml:2084:4>>*/ failwith_message
                /*<<camlinternalFormat.ml:2084:4>>*/ (_z_),
              str,
              str_ind,
              msg) /*<<camlinternalFormat.ml:2086:21>>*/ ;
     /*<<camlinternalFormat.ml:2086:21>>*/ }
    function invalid_format_without(str_ind, c, s){
      /*<<camlinternalFormat.ml:2104:4>>*/ return  /*<<camlinternalFormat.ml:2104:4>>*/ caml_call4
              /*<<camlinternalFormat.ml:2104:4>>*/ ( /*<<camlinternalFormat.ml:2104:4>>*/ failwith_message
                /*<<camlinternalFormat.ml:2104:4>>*/ (_A_),
              str,
              str_ind,
              c,
              s) /*<<camlinternalFormat.ml:2106:21>>*/ ;
     /*<<camlinternalFormat.ml:2106:21>>*/ }
    function expected_character(str_ind, expected, read){
      /*<<camlinternalFormat.ml:2112:4>>*/ return  /*<<camlinternalFormat.ml:2112:4>>*/ caml_call4
              /*<<camlinternalFormat.ml:2112:4>>*/ ( /*<<camlinternalFormat.ml:2112:4>>*/ failwith_message
                /*<<camlinternalFormat.ml:2112:4>>*/ (_B_),
              str,
              str_ind,
              expected,
              read) /*<<camlinternalFormat.ml:2114:31>>*/ ;
     /*<<camlinternalFormat.ml:2114:31>>*/ }
    function parse(lit_start, end_ind){
     a:
     {
      var str_ind = lit_start;
       /*<<camlinternalFormat.ml:2124:4>>*/ for(;;){
       if(str_ind === end_ind)
         /*<<camlinternalFormat.ml:2124:30>>*/ return  /*<<camlinternalFormat.ml:2124:30>>*/ add_literal
                 /*<<camlinternalFormat.ml:2124:30>>*/ (lit_start, str_ind, 0) /*<<camlinternalFormat.ml:2119:62>>*/ ;
       var
        match =
           /*<<camlinternalFormat.ml:2125:12>>*/  /*<<camlinternalFormat.ml:2125:12>>*/ caml_string_get
            /*<<camlinternalFormat.ml:2125:12>>*/ (str, str_ind);
       if(37 === match) break;
       if(64 === match) break a;
       var str_ind$1 = str_ind + 1 | 0;
       str_ind = str_ind$1;
      }
      var str_ind$2 = str_ind + 1 | 0;
      if(str_ind$2 === end_ind)
        /*<<camlinternalFormat.ml:2092:4>>*/  /*<<camlinternalFormat.ml:2092:4>>*/ invalid_format_message
         /*<<camlinternalFormat.ml:2092:4>>*/ (end_ind,
         cst_unexpected_end_of_format);
      var
       match$1 =
         95
          ===
            /*<<camlinternalFormat.ml:2142:10>>*/ caml_string_get
             /*<<camlinternalFormat.ml:2142:10>>*/ (str, str_ind$2)
          ?  /*<<camlinternalFormat.ml:2143:15>>*/ parse_flags
             /*<<camlinternalFormat.ml:2143:15>>*/ (str_ind,
             str_ind$2 + 1 | 0,
             end_ind,
             1)
          :  /*<<camlinternalFormat.ml:2144:13>>*/ parse_flags
             /*<<camlinternalFormat.ml:2144:13>>*/ (str_ind,
             str_ind$2,
             end_ind,
             0),
       fmt_rest = match$1[1];
       /*<<camlinternalFormat.ml:2128:8>>*/ return  /*<<camlinternalFormat.ml:2128:8>>*/ add_literal
               /*<<camlinternalFormat.ml:2128:8>>*/ (lit_start,
               str_ind,
               fmt_rest) /*<<camlinternalFormat.ml:2119:62>>*/ ;
     }
     var str_ind$0 = str_ind + 1 | 0;
     a:
     if(str_ind$0 === end_ind)
      var match$0 = _N_;
     else{
      var
       c =
          /*<<camlinternalFormat.ml:2593:12>>*/  /*<<camlinternalFormat.ml:2593:12>>*/ caml_string_get
           /*<<camlinternalFormat.ml:2593:12>>*/ (str, str_ind$0);
      if(65 <= c){
       if(94 <= c){
        var switcher =  /*<<camlinternalFormat.ml:2593:12>>*/ c - 123 | 0;
        if(2 >= switcher >>> 0)
         switch(switcher){
           case 0:
            var
             match$0 =
                /*<<camlinternalFormat.ml:2600:8>>*/ parse_tag
                 /*<<camlinternalFormat.ml:2600:8>>*/ (1,
                 str_ind$0 + 1 | 0,
                 end_ind);
            break a;
           case 1: break;
           default:
            var
             fmt_rest$2 =
                /*<<camlinternalFormat.ml:2602:31>>*/ parse
                  /*<<camlinternalFormat.ml:2602:31>>*/ (str_ind$0 + 1 | 0,
                  end_ind)
                [1],
             match$0 = [0, [17, 1, fmt_rest$2]];
            break a;
         }
       }
       else if(91 <= c)
        switch(c - 91 | 0){
          case 0:
           var
            match$0 =
               /*<<camlinternalFormat.ml:2595:8>>*/ parse_tag
                /*<<camlinternalFormat.ml:2595:8>>*/ (0,
                str_ind$0 + 1 | 0,
                end_ind);
           break a;
          case 1: break;
          default:
           var
            fmt_rest$3 =
               /*<<camlinternalFormat.ml:2597:31>>*/ parse
                 /*<<camlinternalFormat.ml:2597:31>>*/ (str_ind$0 + 1 | 0,
                 end_ind)
               [1],
            match$0 = [0, [17, 0, fmt_rest$3]];
           break a;
        }
      }
      else{
       if(10 === c){
        var
         fmt_rest$4 =
            /*<<camlinternalFormat.ml:2616:31>>*/ parse
              /*<<camlinternalFormat.ml:2616:31>>*/ (str_ind$0 + 1 | 0,
              end_ind)
            [1],
         match$0 = [0, [17, 3, fmt_rest$4]];
        break a;
       }
       if(32 <= c)
        switch(c - 32 | 0){
          case 0:
           var
            fmt_rest$5 =
               /*<<camlinternalFormat.ml:2608:31>>*/ parse
                 /*<<camlinternalFormat.ml:2608:31>>*/ (str_ind$0 + 1 | 0,
                 end_ind)
               [1],
            match$0 = [0, [17, _O_, fmt_rest$5]];
           break a;
          case 5:
           if
            ((str_ind$0 + 1 | 0) < end_ind
             &&
              37
              ===
                /*<<camlinternalFormat.ml:2626:42>>*/ caml_string_get
                 /*<<camlinternalFormat.ml:2626:42>>*/ (str,
                 str_ind$0 + 1 | 0)){
            var
             fmt_rest$6 =
                /*<<camlinternalFormat.ml:2627:31>>*/ parse
                  /*<<camlinternalFormat.ml:2627:31>>*/ (str_ind$0 + 2 | 0,
                  end_ind)
                [1],
             match$0 = [0, [17, 6, fmt_rest$6]];
            break a;
           }
           var
            fmt_rest$7 =
               /*<<camlinternalFormat.ml:2630:31>>*/ parse
                 /*<<camlinternalFormat.ml:2630:31>>*/ (str_ind$0, end_ind)
               [1],
            match$0 = [0, [12, 64, fmt_rest$7]];
           break a;
          case 12:
           var
            fmt_rest$8 =
               /*<<camlinternalFormat.ml:2605:31>>*/ parse
                 /*<<camlinternalFormat.ml:2605:31>>*/ (str_ind$0 + 1 | 0,
                 end_ind)
               [1],
            match$0 = [0, [17, _P_, fmt_rest$8]];
           break a;
          case 14:
           var
            fmt_rest$9 =
               /*<<camlinternalFormat.ml:2619:31>>*/ parse
                 /*<<camlinternalFormat.ml:2619:31>>*/ (str_ind$0 + 1 | 0,
                 end_ind)
               [1],
            match$0 = [0, [17, 4, fmt_rest$9]];
           break a;
          case 27:
           var str_ind$3 = str_ind$0 + 1 | 0;
           b:
           try{
            var
             _bg_ = str_ind$3 === end_ind ? 1 : 0,
             _bh_ =
               _bg_
               ||
                (60
                  !==
                    /*<<camlinternalFormat.ml:2666:32>>*/ caml_string_get
                     /*<<camlinternalFormat.ml:2666:32>>*/ (str, str_ind$3)
                  ? 1
                  : 0);
            if(_bh_)
              /*<<camlinternalFormat.ml:2666:58>>*/ throw  /*<<camlinternalFormat.ml:2666:58>>*/ caml_maybe_attach_backtrace
                     /*<<camlinternalFormat.ml:2666:58>>*/ (Stdlib[8], 1);
            var
             str_ind_1 =
                /*<<camlinternalFormat.ml:2667:24>>*/  /*<<camlinternalFormat.ml:2667:24>>*/ parse_spaces
                 /*<<camlinternalFormat.ml:2667:24>>*/ (str_ind$3 + 1 | 0,
                 end_ind),
             match$2 =
                /*<<camlinternalFormat.ml:2668:14>>*/  /*<<camlinternalFormat.ml:2668:14>>*/ caml_string_get
                 /*<<camlinternalFormat.ml:2668:14>>*/ (str, str_ind_1);
            c:
            {
             if(48 <= match$2){
              if(58 > match$2) break c;
             }
             else if(45 === match$2) break c;
              /*<<camlinternalFormat.ml:2684:15>>*/ throw  /*<<camlinternalFormat.ml:2684:15>>*/ caml_maybe_attach_backtrace
                     /*<<camlinternalFormat.ml:2684:15>>*/ (Stdlib[8], 1);
            }
            var
             match$3 =
                /*<<camlinternalFormat.ml:2670:33>>*/  /*<<camlinternalFormat.ml:2670:33>>*/ parse_integer
                 /*<<camlinternalFormat.ml:2670:33>>*/ (str_ind_1, end_ind),
             width = match$3[2],
             str_ind_2 = match$3[1],
             str_ind_3 =
                /*<<camlinternalFormat.ml:2671:28>>*/  /*<<camlinternalFormat.ml:2671:28>>*/ parse_spaces
                 /*<<camlinternalFormat.ml:2671:28>>*/ (str_ind_2, end_ind),
             switcher$0 =
                /*<<camlinternalFormat.ml:2672:18>>*/  /*<<camlinternalFormat.ml:2672:18>>*/ caml_string_get
                 /*<<camlinternalFormat.ml:2672:18>>*/ (str, str_ind_3)
               - 45
               | 0;
            if(12 < switcher$0 >>> 0){
             if(17 === switcher$0){
              var
               s =
                  /*<<camlinternalFormat.ml:2674:24>>*/  /*<<camlinternalFormat.ml:2674:24>>*/ caml_call3
                   /*<<camlinternalFormat.ml:2674:24>>*/ (Stdlib_String[16],
                   str,
                   str_ind$3 - 2 | 0,
                   (str_ind_3 - str_ind$3 | 0) + 3 | 0),
               _bi_ =  /*<<camlinternalFormat.ml:2675:31>>*/ [0, s, width, 0],
               _bj_ =  /*<<camlinternalFormat.ml:2675:31>>*/ str_ind_3 + 1 | 0,
               formatting_lit$0 = _bi_,
               next_ind = _bj_;
              break b;
             }
            }
            else if(1 < switcher$0 - 1 >>> 0){
             var
              match$4 =
                 /*<<camlinternalFormat.ml:2677:40>>*/  /*<<camlinternalFormat.ml:2677:40>>*/ parse_integer
                  /*<<camlinternalFormat.ml:2677:40>>*/ (str_ind_3, end_ind),
              offset = match$4[2],
              str_ind_4 = match$4[1],
              str_ind_5 =
                 /*<<camlinternalFormat.ml:2678:32>>*/  /*<<camlinternalFormat.ml:2678:32>>*/ parse_spaces
                  /*<<camlinternalFormat.ml:2678:32>>*/ (str_ind_4, end_ind);
             if
              (62
               !==
                 /*<<camlinternalFormat.ml:2679:19>>*/ caml_string_get
                  /*<<camlinternalFormat.ml:2679:19>>*/ (str, str_ind_5))
               /*<<camlinternalFormat.ml:2679:47>>*/ throw  /*<<camlinternalFormat.ml:2679:47>>*/ caml_maybe_attach_backtrace
                      /*<<camlinternalFormat.ml:2679:47>>*/ (Stdlib[8], 1);
             var
              s$0 =
                 /*<<camlinternalFormat.ml:2680:24>>*/  /*<<camlinternalFormat.ml:2680:24>>*/ caml_call3
                  /*<<camlinternalFormat.ml:2680:24>>*/ (Stdlib_String[16],
                  str,
                  str_ind$3 - 2 | 0,
                  (str_ind_5 - str_ind$3 | 0) + 3 | 0),
              _bk_ =
                 /*<<camlinternalFormat.ml:2681:31>>*/ [0, s$0, width, offset],
              _bl_ =  /*<<camlinternalFormat.ml:2681:31>>*/ str_ind_5 + 1 | 0,
              formatting_lit$0 = _bk_,
              next_ind = _bl_;
             break b;
            }
             /*<<camlinternalFormat.ml:2682:21>>*/ throw  /*<<camlinternalFormat.ml:2682:21>>*/ caml_maybe_attach_backtrace
                    /*<<camlinternalFormat.ml:2682:21>>*/ (Stdlib[8], 1);
           }
           catch(_bq_){
            var _bf_ = caml_wrap_exception(_bq_);
            if(_bf_ !== Stdlib[8] && _bf_[1] !== Stdlib[7])
             throw caml_maybe_attach_backtrace(_bf_, 0);
            var formatting_lit$0 = formatting_lit, next_ind = str_ind$3;
           }
           var
            fmt_rest$12 =
               /*<<camlinternalFormat.ml:2688:27>>*/ parse
                 /*<<camlinternalFormat.ml:2688:27>>*/ (next_ind, end_ind)
               [1],
            match$0 = [0, [17, formatting_lit$0, fmt_rest$12]];
           break a;
          case 28:
           var str_ind$4 = str_ind$0 + 1 | 0;
            /*<<camlinternalFormat.ml:2694:4>>*/ try{
            var
             str_ind_1$0 =
                /*<<camlinternalFormat.ml:2696:24>>*/  /*<<camlinternalFormat.ml:2696:24>>*/ parse_spaces
                 /*<<camlinternalFormat.ml:2696:24>>*/ (str_ind$4, end_ind),
             match$6 =
                /*<<camlinternalFormat.ml:2697:14>>*/  /*<<camlinternalFormat.ml:2697:14>>*/ caml_string_get
                 /*<<camlinternalFormat.ml:2697:14>>*/ (str, str_ind_1$0);
            b:
            {
             c:
             {
              if(48 <= match$6){
               if(58 > match$6) break c;
              }
              else if(45 === match$6) break c;
              var _bo_ = 0;
              break b;
             }
             var
              match$7 =
                 /*<<camlinternalFormat.ml:2699:32>>*/  /*<<camlinternalFormat.ml:2699:32>>*/ parse_integer
                  /*<<camlinternalFormat.ml:2699:32>>*/ (str_ind_1$0, end_ind),
              size = match$7[2],
              str_ind_2$0 = match$7[1],
              str_ind_3$0 =
                 /*<<camlinternalFormat.ml:2700:26>>*/  /*<<camlinternalFormat.ml:2700:26>>*/ parse_spaces
                  /*<<camlinternalFormat.ml:2700:26>>*/ (str_ind_2$0, end_ind);
             if
              (62
               !==
                 /*<<camlinternalFormat.ml:2701:13>>*/ caml_string_get
                  /*<<camlinternalFormat.ml:2701:13>>*/ (str, str_ind_3$0))
               /*<<camlinternalFormat.ml:2701:41>>*/ throw  /*<<camlinternalFormat.ml:2701:41>>*/ caml_maybe_attach_backtrace
                      /*<<camlinternalFormat.ml:2701:41>>*/ (Stdlib[8], 1);
             var
              s$1 =
                 /*<<camlinternalFormat.ml:2702:18>>*/  /*<<camlinternalFormat.ml:2702:18>>*/ caml_call3
                  /*<<camlinternalFormat.ml:2702:18>>*/ (Stdlib_String[16],
                  str,
                  str_ind$4 - 2 | 0,
                  (str_ind_3$0 - str_ind$4 | 0) + 3 | 0),
              _bo_ = [0, [0, str_ind_3$0 + 1 | 0, [1, s$1, size]]];
            }
            var _bn_ = _bo_;
           }
           catch(_bp_){
            var _bm_ = caml_wrap_exception(_bp_);
            if(_bm_ !== Stdlib[8] && _bm_[1] !== Stdlib[7])
             throw caml_maybe_attach_backtrace(_bm_, 0);
            var _bn_ = 0;
           }
           if(_bn_)
            var
             match$5 = _bn_[1],
             formatting_lit$1 = match$5[2],
             next_ind$0 = match$5[1],
             fmt_rest$13 =
                /*<<camlinternalFormat.ml:2709:29>>*/ parse
                  /*<<camlinternalFormat.ml:2709:29>>*/ (next_ind$0, end_ind)
                [1],
             _be_ = [0, [17, formatting_lit$1, fmt_rest$13]];
           else
            var
             fmt_rest$14 =
                /*<<camlinternalFormat.ml:2712:29>>*/ parse
                  /*<<camlinternalFormat.ml:2712:29>>*/ (str_ind$4, end_ind)
                [1],
             _be_ = [0, [17, _Q_, fmt_rest$14]];
           var match$0 = _be_;
           break a;
          case 31:
           var
            fmt_rest$10 =
               /*<<camlinternalFormat.ml:2613:31>>*/ parse
                 /*<<camlinternalFormat.ml:2613:31>>*/ (str_ind$0 + 1 | 0,
                 end_ind)
               [1],
            match$0 = [0, [17, 2, fmt_rest$10]];
           break a;
          case 32:
           var
            fmt_rest$11 =
               /*<<camlinternalFormat.ml:2624:31>>*/ parse
                 /*<<camlinternalFormat.ml:2624:31>>*/ (str_ind$0 + 1 | 0,
                 end_ind)
               [1],
            match$0 = [0, [17, 5, fmt_rest$11]];
           break a;
        }
      }
      var
       fmt_rest$1 =
          /*<<camlinternalFormat.ml:2633:31>>*/ parse
            /*<<camlinternalFormat.ml:2633:31>>*/ (str_ind$0 + 1 | 0, end_ind)
          [1],
       match$0 = [0, [17, [2, c], fmt_rest$1]];
     }
     var fmt_rest$0 = match$0[1];
      /*<<camlinternalFormat.ml:2131:8>>*/ return  /*<<camlinternalFormat.ml:2131:8>>*/ add_literal
              /*<<camlinternalFormat.ml:2131:8>>*/ (lit_start,
              str_ind,
              fmt_rest$0) /*<<camlinternalFormat.ml:2119:62>>*/ ;
     /*<<camlinternalFormat.ml:2119:62>>*/ }
    function parse_flags(pct_ind, str_ind, end_ind, ign){
     var
      zero =  /*<<camlinternalFormat.ml:2149:15>>*/ [0, 0],
      minus =  /*<<camlinternalFormat.ml:2149:37>>*/ [0, 0],
      plus =  /*<<camlinternalFormat.ml:2150:15>>*/ [0, 0],
      space =  /*<<camlinternalFormat.ml:2150:37>>*/ [0, 0],
      hash =  /*<<camlinternalFormat.ml:2151:15>>*/ [0, 0];
     function set_flag(str_ind, flag){
      var _bb_ = flag[1], _bc_ = _bb_ ? 1 - legacy_behavior$0 : _bb_;
      if(_bc_){
       var
        _bd_ =
           /*<<camlinternalFormat.ml:2157:22>>*/  /*<<camlinternalFormat.ml:2157:22>>*/ caml_string_get
            /*<<camlinternalFormat.ml:2157:22>>*/ (str, str_ind);
        /*<<camlinternalFormat.ml:2155:8>>*/  /*<<camlinternalFormat.ml:2155:8>>*/ caml_call3
         /*<<camlinternalFormat.ml:2155:8>>*/ ( /*<<camlinternalFormat.ml:2155:8>>*/ failwith_message
           /*<<camlinternalFormat.ml:2155:8>>*/ (_C_),
         str,
         str_ind,
         _bd_);
      }
      flag[1] = 1;
      /*<<camlinternalFormat.ml:2158:19>>*/ }
     a:
     b:
     {
      var str_ind$0 = str_ind;
      c:
       /*<<camlinternalFormat.ml:2161:6>>*/ for(;;){
       if(str_ind$0 === end_ind)
         /*<<camlinternalFormat.ml:2092:4>>*/  /*<<camlinternalFormat.ml:2092:4>>*/ invalid_format_message
          /*<<camlinternalFormat.ml:2092:4>>*/ (end_ind,
          cst_unexpected_end_of_format);
       var
        switcher =
           /*<<camlinternalFormat.ml:2162:18>>*/  /*<<camlinternalFormat.ml:2162:18>>*/ caml_string_get
            /*<<camlinternalFormat.ml:2162:18>>*/ (str, str_ind$0)
          - 32
          | 0;
       if(16 < switcher >>> 0) break b;
       switch(switcher){
         case 0:
           /*<<camlinternalFormat.ml:2167:15>>*/  /*<<camlinternalFormat.ml:2167:15>>*/ set_flag
            /*<<camlinternalFormat.ml:2167:15>>*/ (str_ind$0, space);
          var
           str_ind$1 =
              /*<<camlinternalFormat.ml:2167:15>>*/ str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$1;
          break;
         case 3:
           /*<<camlinternalFormat.ml:2166:15>>*/  /*<<camlinternalFormat.ml:2166:15>>*/ set_flag
            /*<<camlinternalFormat.ml:2166:15>>*/ (str_ind$0, hash);
          var
           str_ind$2 =
              /*<<camlinternalFormat.ml:2166:15>>*/ str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$2;
          break;
         case 11:
           /*<<camlinternalFormat.ml:2165:15>>*/  /*<<camlinternalFormat.ml:2165:15>>*/ set_flag
            /*<<camlinternalFormat.ml:2165:15>>*/ (str_ind$0, plus);
          var
           str_ind$3 =
              /*<<camlinternalFormat.ml:2165:15>>*/ str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$3;
          break;
         case 13:
           /*<<camlinternalFormat.ml:2164:15>>*/  /*<<camlinternalFormat.ml:2164:15>>*/ set_flag
            /*<<camlinternalFormat.ml:2164:15>>*/ (str_ind$0, minus);
          var
           str_ind$4 =
              /*<<camlinternalFormat.ml:2164:15>>*/ str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$4;
          break;
         case 16:
           /*<<camlinternalFormat.ml:2163:15>>*/  /*<<camlinternalFormat.ml:2163:15>>*/ set_flag
            /*<<camlinternalFormat.ml:2163:15>>*/ (str_ind$0, zero);
          var
           str_ind$5 =
              /*<<camlinternalFormat.ml:2163:15>>*/ str_ind$0 + 1 | 0;
          str_ind$0 = str_ind$5;
          break;
         default: break c;
       }
      }
      break a;
     }
     var
      space$0 = space[1],
      hash$0 = hash[1],
      plus$0 = plus[1],
      minus$0 = minus[1],
      zero$0 = zero[1];
     if(str_ind$0 === end_ind)
       /*<<camlinternalFormat.ml:2092:4>>*/  /*<<camlinternalFormat.ml:2092:4>>*/ invalid_format_message
        /*<<camlinternalFormat.ml:2092:4>>*/ (end_ind,
        cst_unexpected_end_of_format);
     var
      padty =
        zero$0
         ? minus$0
           ? legacy_behavior$0
             ? 0
             :  /*<<camlinternalFormat.ml:2187:13>>*/ incompatible_flag
                /*<<camlinternalFormat.ml:2187:13>>*/ (pct_ind,
                str_ind$0,
                45,
                cst_0)
           : 2
         : minus$0 ? 0 : 1,
      match =
         /*<<camlinternalFormat.ml:2188:10>>*/  /*<<camlinternalFormat.ml:2188:10>>*/ caml_string_get
          /*<<camlinternalFormat.ml:2188:10>>*/ (str, str_ind$0);
     if(48 <= match){
      if(58 > match){
       var
        match$0 =
           /*<<camlinternalFormat.ml:2190:27>>*/  /*<<camlinternalFormat.ml:2190:27>>*/ parse_positive
            /*<<camlinternalFormat.ml:2190:27>>*/ (str_ind$0, end_ind, 0),
        width = match$0[2],
        new_ind = match$0[1];
        /*<<camlinternalFormat.ml:2192:8>>*/ return  /*<<camlinternalFormat.ml:2192:8>>*/ parse_after_padding
                /*<<camlinternalFormat.ml:2192:8>>*/ (pct_ind,
                new_ind,
                end_ind,
                minus$0,
                plus$0,
                hash$0,
                space$0,
                ign,
                [0, padty, width]) /*<<camlinternalFormat.ml:2173:22>>*/ ;
      }
     }
     else if(42 === match)
       /*<<camlinternalFormat.ml:2195:12>>*/ return  /*<<camlinternalFormat.ml:2195:12>>*/ parse_after_padding
               /*<<camlinternalFormat.ml:2195:12>>*/ (pct_ind,
               str_ind$0 + 1 | 0,
               end_ind,
               minus$0,
               plus$0,
               hash$0,
               space$0,
               ign,
               [1, padty]) /*<<camlinternalFormat.ml:2173:22>>*/ ;
     switch(padty){
       case 0:
        if(1 - legacy_behavior$0)
          /*<<camlinternalFormat.ml:2200:10>>*/  /*<<camlinternalFormat.ml:2200:10>>*/ invalid_format_without
           /*<<camlinternalFormat.ml:2200:10>>*/ (str_ind$0 - 1 | 0,
           45,
           cst_padding);
         /*<<camlinternalFormat.ml:2200:10>>*/ return  /*<<camlinternalFormat.ml:2200:10>>*/ parse_after_padding
                 /*<<camlinternalFormat.ml:2200:10>>*/ (pct_ind,
                 str_ind$0,
                 end_ind,
                 minus$0,
                 plus$0,
                 hash$0,
                 space$0,
                 ign,
                 0) /*<<camlinternalFormat.ml:2173:22>>*/ ;
       case 1:
         /*<<camlinternalFormat.ml:2210:8>>*/ return  /*<<camlinternalFormat.ml:2210:8>>*/ parse_after_padding
                 /*<<camlinternalFormat.ml:2210:8>>*/ (pct_ind,
                 str_ind$0,
                 end_ind,
                 minus$0,
                 plus$0,
                 hash$0,
                 space$0,
                 ign,
                 0) /*<<camlinternalFormat.ml:2173:22>>*/ ;
       default:
         /*<<camlinternalFormat.ml:2207:8>>*/ return  /*<<camlinternalFormat.ml:2207:8>>*/ parse_after_padding
                 /*<<camlinternalFormat.ml:2207:8>>*/ (pct_ind,
                 str_ind$0,
                 end_ind,
                 minus$0,
                 plus$0,
                 hash$0,
                 space$0,
                 ign,
                 _D_) /*<<camlinternalFormat.ml:2173:22>>*/ ;
     }
     /*<<camlinternalFormat.ml:2173:22>>*/ }
    function parse_after_padding
    (pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, pad){
      /*<<camlinternalFormat.ml:2219:4>>*/ if(str_ind === end_ind)
       /*<<camlinternalFormat.ml:2092:4>>*/  /*<<camlinternalFormat.ml:2092:4>>*/ invalid_format_message
        /*<<camlinternalFormat.ml:2092:4>>*/ (end_ind,
        cst_unexpected_end_of_format);
     var
      symb =
         /*<<camlinternalFormat.ml:2220:10>>*/  /*<<camlinternalFormat.ml:2220:10>>*/ caml_string_get
          /*<<camlinternalFormat.ml:2220:10>>*/ (str, str_ind);
     if(46 !== symb)
       /*<<camlinternalFormat.ml:2225:6>>*/ return  /*<<camlinternalFormat.ml:2225:6>>*/ parse_conversion
               /*<<camlinternalFormat.ml:2225:6>>*/ (pct_ind,
               str_ind + 1 | 0,
               end_ind,
               plus,
               hash,
               space,
               ign,
               pad,
               0,
               pad,
               symb) /*<<camlinternalFormat.ml:2226:29>>*/ ;
     var str_ind$0 = str_ind + 1 | 0;
     if(str_ind$0 === end_ind)
       /*<<camlinternalFormat.ml:2092:4>>*/  /*<<camlinternalFormat.ml:2092:4>>*/ invalid_format_message
        /*<<camlinternalFormat.ml:2092:4>>*/ (end_ind,
        cst_unexpected_end_of_format);
     function parse_literal(minus, str_ind){
      var
       match =
          /*<<camlinternalFormat.ml:2235:26>>*/  /*<<camlinternalFormat.ml:2235:26>>*/ parse_positive
           /*<<camlinternalFormat.ml:2235:26>>*/ (str_ind, end_ind, 0),
       prec = match[2],
       new_ind = match[1];
       /*<<camlinternalFormat.ml:2237:12>>*/ return  /*<<camlinternalFormat.ml:2237:12>>*/ parse_after_precision
               /*<<camlinternalFormat.ml:2237:12>>*/ (pct_ind,
               new_ind,
               end_ind,
               minus,
               plus,
               hash,
               space,
               ign,
               pad,
               [0, prec]) /*<<camlinternalFormat.ml:2237:32>>*/ ;
      /*<<camlinternalFormat.ml:2237:32>>*/ }
     var
      symb$0 =
         /*<<camlinternalFormat.ml:2238:10>>*/  /*<<camlinternalFormat.ml:2238:10>>*/ caml_string_get
          /*<<camlinternalFormat.ml:2238:10>>*/ (str, str_ind$0);
     if(48 <= symb$0){
      if(58 > symb$0)
        /*<<camlinternalFormat.ml:2239:20>>*/ return  /*<<camlinternalFormat.ml:2239:20>>*/ parse_literal
                /*<<camlinternalFormat.ml:2239:20>>*/ (minus, str_ind$0) /*<<camlinternalFormat.ml:2226:29>>*/ ;
     }
     else if(42 <= symb$0)
      switch(symb$0 - 42 | 0){
        case 0:
          /*<<camlinternalFormat.ml:2251:6>>*/ return  /*<<camlinternalFormat.ml:2251:6>>*/ parse_after_precision
                  /*<<camlinternalFormat.ml:2251:6>>*/ (pct_ind,
                  str_ind$0 + 1 | 0,
                  end_ind,
                  minus,
                  plus,
                  hash,
                  space,
                  ign,
                  pad,
                  1) /*<<camlinternalFormat.ml:2226:29>>*/ ;
        case 1:
        case 3:
         if(legacy_behavior$0){
          var
           _ba_ =  /*<<camlinternalFormat.ml:2249:6>>*/ str_ind$0 + 1 | 0,
           minus$0 = minus || (45 === symb$0 ? 1 : 0);
           /*<<camlinternalFormat.ml:2249:6>>*/ return  /*<<camlinternalFormat.ml:2249:6>>*/ parse_literal
                   /*<<camlinternalFormat.ml:2249:6>>*/ (minus$0, _ba_) /*<<camlinternalFormat.ml:2226:29>>*/ ;
         }
         break;
      }
     return legacy_behavior$0
             ?  /*<<camlinternalFormat.ml:2258:8>>*/ parse_after_precision
                /*<<camlinternalFormat.ml:2258:8>>*/ (pct_ind,
                str_ind$0,
                end_ind,
                minus,
                plus,
                hash,
                space,
                ign,
                pad,
                _E_)
             :  /*<<camlinternalFormat.ml:2261:8>>*/ invalid_format_without
                /*<<camlinternalFormat.ml:2261:8>>*/ (str_ind$0 - 1 | 0,
                46,
                cst_precision) /*<<camlinternalFormat.ml:2226:29>>*/ ;
     /*<<camlinternalFormat.ml:2226:29>>*/ }
    function parse_after_precision
    (pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, pad, prec){
      /*<<camlinternalFormat.ml:2268:4>>*/ if(str_ind === end_ind)
       /*<<camlinternalFormat.ml:2092:4>>*/  /*<<camlinternalFormat.ml:2092:4>>*/ invalid_format_message
        /*<<camlinternalFormat.ml:2092:4>>*/ (end_ind,
        cst_unexpected_end_of_format);
     function parse_conv(padprec){
       /*<<camlinternalFormat.ml:2270:6>>*/ return  /*<<camlinternalFormat.ml:2271:21>>*/ parse_conversion
               /*<<camlinternalFormat.ml:2271:21>>*/ (pct_ind,
               str_ind + 1 | 0,
               end_ind,
               plus,
               hash,
               space,
               ign,
               pad,
               prec,
               padprec,
                /*<<camlinternalFormat.ml:2271:21>>*/ caml_string_get
                 /*<<camlinternalFormat.ml:2271:21>>*/ (str, str_ind)) /*<<camlinternalFormat.ml:2271:34>>*/ ;
      /*<<camlinternalFormat.ml:2271:34>>*/ }
     if(typeof pad !== "number")
       /*<<camlinternalFormat.ml:2287:13>>*/ return  /*<<camlinternalFormat.ml:2287:13>>*/ parse_conv
               /*<<camlinternalFormat.ml:2287:13>>*/ (pad) /*<<camlinternalFormat.ml:2287:27>>*/ ;
     if(typeof prec === "number" && ! prec)
       /*<<camlinternalFormat.ml:2281:29>>*/ return  /*<<camlinternalFormat.ml:2281:29>>*/ parse_conv
               /*<<camlinternalFormat.ml:2281:29>>*/ (0) /*<<camlinternalFormat.ml:2287:27>>*/ ;
     if(minus){
      if(typeof prec === "number")
        /*<<camlinternalFormat.ml:2285:33>>*/ return  /*<<camlinternalFormat.ml:2285:33>>*/ parse_conv
                /*<<camlinternalFormat.ml:2285:33>>*/ (_F_) /*<<camlinternalFormat.ml:2287:27>>*/ ;
      var n = prec[1];
       /*<<camlinternalFormat.ml:2283:46>>*/ return  /*<<camlinternalFormat.ml:2283:46>>*/ parse_conv
               /*<<camlinternalFormat.ml:2283:46>>*/ ([0, 0, n]) /*<<camlinternalFormat.ml:2287:27>>*/ ;
     }
     if(typeof prec === "number")
       /*<<camlinternalFormat.ml:2284:34>>*/ return  /*<<camlinternalFormat.ml:2284:34>>*/ parse_conv
               /*<<camlinternalFormat.ml:2284:34>>*/ (_G_) /*<<camlinternalFormat.ml:2287:27>>*/ ;
     var n$0 = prec[1];
      /*<<camlinternalFormat.ml:2282:47>>*/ return  /*<<camlinternalFormat.ml:2282:47>>*/ parse_conv
              /*<<camlinternalFormat.ml:2282:47>>*/ ([0, 1, n$0]) /*<<camlinternalFormat.ml:2287:27>>*/ ;
     /*<<camlinternalFormat.ml:2287:27>>*/ }
    function parse_conversion
    (pct_ind,
     str_ind,
     end_ind,
     plus,
     hash,
     space,
     ign,
     pad,
     prec,
     padprec,
     symb){
     var
      plus_used =  /*<<camlinternalFormat.ml:2295:21>>*/ [0, 0],
      hash_used =  /*<<camlinternalFormat.ml:2295:47>>*/ [0, 0],
      space_used =  /*<<camlinternalFormat.ml:2296:21>>*/ [0, 0],
      ign_used =  /*<<camlinternalFormat.ml:2296:48>>*/ [0, 0],
      pad_used =  /*<<camlinternalFormat.ml:2297:21>>*/ [0, 0],
      prec_used =  /*<<camlinternalFormat.ml:2297:48>>*/ [0, 0];
     function get_plus(param){
       /*<<camlinternalFormat.ml:2300:25>>*/ plus_used[1] = 1;
       /*<<camlinternalFormat.ml:2300:4>>*/ return plus /*<<camlinternalFormat.ml:2300:4>>*/ ;
      /*<<camlinternalFormat.ml:2300:49>>*/ }
     function get_hash(param){
       /*<<camlinternalFormat.ml:2301:24>>*/ hash_used[1] = 1;
      return hash;
      /*<<camlinternalFormat.ml:2301:47>>*/ }
     function get_space(param){
       /*<<camlinternalFormat.ml:2302:25>>*/ space_used[1] = 1;
      return space;
      /*<<camlinternalFormat.ml:2302:50>>*/ }
     function get_ign(param){
       /*<<camlinternalFormat.ml:2303:25>>*/ ign_used[1] = 1;
      return ign;
      /*<<camlinternalFormat.ml:2303:48>>*/ }
     function get_pad(param){
       /*<<camlinternalFormat.ml:2304:25>>*/ pad_used[1] = 1;
      return pad;
      /*<<camlinternalFormat.ml:2304:48>>*/ }
     function get_prec(param){
       /*<<camlinternalFormat.ml:2305:25>>*/ prec_used[1] = 1;
      return prec;
      /*<<camlinternalFormat.ml:2305:49>>*/ }
     function get_padprec(param){
       /*<<camlinternalFormat.ml:2306:25>>*/ pad_used[1] = 1;
      return padprec;
      /*<<camlinternalFormat.ml:2306:52>>*/ }
     function get_int_pad(param){
      var
       pad =
          /*<<camlinternalFormat.ml:2320:13>>*/  /*<<camlinternalFormat.ml:2320:13>>*/ get_pad
           /*<<camlinternalFormat.ml:2320:13>>*/ (0),
       match =
          /*<<camlinternalFormat.ml:2320:25>>*/  /*<<camlinternalFormat.ml:2320:25>>*/ get_prec
           /*<<camlinternalFormat.ml:2320:25>>*/ (0);
      if(typeof match === "number" && ! match)
        /*<<camlinternalFormat.ml:2321:32>>*/ return pad /*<<camlinternalFormat.ml:2321:32>>*/ ;
      if(typeof pad === "number")
        /*<<camlinternalFormat.ml:2322:32>>*/ return 0 /*<<camlinternalFormat.ml:2322:32>>*/ ;
      if(0 !== pad[0])
       return 2 <= pad[1]
               ? legacy_behavior$0
                 ? _H_
                 :  /*<<camlinternalFormat.ml:2328:16>>*/ incompatible_flag
                    /*<<camlinternalFormat.ml:2328:16>>*/ (pct_ind,
                    str_ind,
                    48,
                    cst_precision$1)
               : pad /*<<camlinternalFormat.ml:2330:41>>*/ ;
      if(2 > pad[1])
        /*<<camlinternalFormat.ml:2329:38>>*/ return pad /*<<camlinternalFormat.ml:2329:38>>*/ ;
      var n = pad[2];
       /*<<camlinternalFormat.ml:2324:11>>*/ return legacy_behavior$0
              ? [0, 1, n]
              :  /*<<camlinternalFormat.ml:2325:16>>*/ incompatible_flag
                 /*<<camlinternalFormat.ml:2325:16>>*/ (pct_ind,
                 str_ind,
                 48,
                 cst_precision$0) /*<<camlinternalFormat.ml:2330:41>>*/ ;
      /*<<camlinternalFormat.ml:2330:41>>*/ }
     function check_no_0(symb, pad){
       /*<<camlinternalFormat.ml:2334:6>>*/ if(typeof pad === "number")
        /*<<camlinternalFormat.ml:2335:22>>*/ return pad /*<<camlinternalFormat.ml:2335:22>>*/ ;
      if(0 !== pad[0])
       return 2 <= pad[1]
               ? legacy_behavior$0
                 ? _I_
                 :  /*<<camlinternalFormat.ml:2343:13>>*/ incompatible_flag
                    /*<<camlinternalFormat.ml:2343:13>>*/ (pct_ind,
                    str_ind,
                    symb,
                    cst_0$1)
               : pad /*<<camlinternalFormat.ml:2343:55>>*/ ;
      if(2 > pad[1])
        /*<<camlinternalFormat.ml:2336:43>>*/ return pad /*<<camlinternalFormat.ml:2336:43>>*/ ;
      var width = pad[2];
       /*<<camlinternalFormat.ml:2339:8>>*/ return legacy_behavior$0
              ? [0, 1, width]
              :  /*<<camlinternalFormat.ml:2340:13>>*/ incompatible_flag
                 /*<<camlinternalFormat.ml:2340:13>>*/ (pct_ind,
                 str_ind,
                 symb,
                 cst_0$0) /*<<camlinternalFormat.ml:2343:55>>*/ ;
      /*<<camlinternalFormat.ml:2343:55>>*/ }
     function opt_of_pad(c, pad){
       /*<<camlinternalFormat.ml:2349:64>>*/ if(typeof pad === "number")
        /*<<camlinternalFormat.ml:2350:22>>*/ return 0 /*<<camlinternalFormat.ml:2350:22>>*/ ;
      if(0 === pad[0])
       switch(pad[1]){
         case 0:
          var width = pad[2];
           /*<<camlinternalFormat.ml:2356:8>>*/ return legacy_behavior$0
                  ? [0, width]
                  :  /*<<camlinternalFormat.ml:2357:13>>*/ incompatible_flag
                     /*<<camlinternalFormat.ml:2357:13>>*/ (pct_ind,
                     str_ind,
                     c,
                     cst$24) /*<<camlinternalFormat.ml:2358:66>>*/ ;
         case 1:
          var width$0 = pad[2];
           /*<<camlinternalFormat.ml:2351:38>>*/ return [0, width$0] /*<<camlinternalFormat.ml:2351:38>>*/ ;
         default:
          var width$1 = pad[2];
           /*<<camlinternalFormat.ml:2353:8>>*/ return legacy_behavior$0
                  ? [0, width$1]
                  :  /*<<camlinternalFormat.ml:2354:13>>*/ incompatible_flag
                     /*<<camlinternalFormat.ml:2354:13>>*/ (pct_ind,
                     str_ind,
                     c,
                     cst_0$2) /*<<camlinternalFormat.ml:2358:66>>*/ ;
       }
       /*<<camlinternalFormat.ml:2358:25>>*/ return  /*<<camlinternalFormat.ml:2358:25>>*/ incompatible_flag
               /*<<camlinternalFormat.ml:2358:25>>*/ (pct_ind,
               str_ind,
               c,
               cst$25) /*<<camlinternalFormat.ml:2358:66>>*/ ;
      /*<<camlinternalFormat.ml:2358:66>>*/ }
     function get_pad_opt(c){
       /*<<camlinternalFormat.ml:2360:24>>*/ return  /*<<camlinternalFormat.ml:2360:37>>*/ opt_of_pad
               /*<<camlinternalFormat.ml:2360:37>>*/ (c,
                /*<<camlinternalFormat.ml:2360:37>>*/ get_pad
                 /*<<camlinternalFormat.ml:2360:37>>*/ (0)) /*<<camlinternalFormat.ml:2360:49>>*/ ;
      /*<<camlinternalFormat.ml:2360:49>>*/ }
     function get_padprec_opt(c){
       /*<<camlinternalFormat.ml:2361:28>>*/ return  /*<<camlinternalFormat.ml:2361:41>>*/ opt_of_pad
               /*<<camlinternalFormat.ml:2361:41>>*/ (c,
                /*<<camlinternalFormat.ml:2361:41>>*/ get_padprec
                 /*<<camlinternalFormat.ml:2361:41>>*/ (0)) /*<<camlinternalFormat.ml:2361:57>>*/ ;
      /*<<camlinternalFormat.ml:2361:57>>*/ }
     a:
     {
       /*<<camlinternalFormat.ml:2372:4>>*/ if(124 > symb)
       switch(symb){
         case 33:
          var
           fmt_rest$5 =
              /*<<camlinternalFormat.ml:2515:29>>*/ parse
                /*<<camlinternalFormat.ml:2515:29>>*/ (str_ind, end_ind)
              [1],
           fmt_result = [0, [10, fmt_rest$5]];
          break a;
         case 40:
          var
           sub_end =
              /*<<camlinternalFormat.ml:2531:20>>*/  /*<<camlinternalFormat.ml:2531:20>>*/ search_subformat_end
               /*<<camlinternalFormat.ml:2531:20>>*/ (str_ind, end_ind, 41),
           fmt_rest$7 =
              /*<<camlinternalFormat.ml:2532:29>>*/ parse
                /*<<camlinternalFormat.ml:2532:29>>*/ (sub_end + 2 | 0,
                end_ind)
              [1],
           sub_fmt =
              /*<<camlinternalFormat.ml:2533:28>>*/ parse
                /*<<camlinternalFormat.ml:2533:28>>*/ (str_ind, sub_end)
              [1],
           sub_fmtty =
              /*<<camlinternalFormat.ml:2534:22>>*/  /*<<camlinternalFormat.ml:2534:22>>*/ fmtty_of_fmt
               /*<<camlinternalFormat.ml:2534:22>>*/ (sub_fmt);
           /*<<camlinternalFormat.ml:2535:9>>*/ if
           ( /*<<camlinternalFormat.ml:2535:9>>*/ get_ign
              /*<<camlinternalFormat.ml:2535:9>>*/ (0))
           var
            ignored$2 =
               /*<<camlinternalFormat.ml:2536:22>>*/ [9,
                /*<<camlinternalFormat.ml:2536:44>>*/ get_pad_opt
                 /*<<camlinternalFormat.ml:2536:44>>*/ (95),
               sub_fmtty],
            _aJ_ = [0, [23, ignored$2, fmt_rest$7]];
          else
           var
            _aJ_ =
              [0,
               [14,
                 /*<<camlinternalFormat.ml:2539:31>>*/ get_pad_opt
                  /*<<camlinternalFormat.ml:2539:31>>*/ (40),
                sub_fmtty,
                fmt_rest$7]];
          var fmt_result = _aJ_;
          break a;
         case 44:
          var
           fmt_result =
              /*<<camlinternalFormat.ml:2374:6>>*/ parse
               /*<<camlinternalFormat.ml:2374:6>>*/ (str_ind, end_ind);
          break a;
         case 67:
          var
           fmt_rest$10 =
              /*<<camlinternalFormat.ml:2396:29>>*/ parse
                /*<<camlinternalFormat.ml:2396:29>>*/ (str_ind, end_ind)
              [1],
           _aL_ =
              /*<<camlinternalFormat.ml:2397:9>>*/  /*<<camlinternalFormat.ml:2397:9>>*/ get_ign
                /*<<camlinternalFormat.ml:2397:9>>*/ (0)
              ? [0, [23, 1, fmt_rest$10]]
              : [0, [1, fmt_rest$10]],
           fmt_result = _aL_;
          break a;
         case 78:
          var
           fmt_rest$14 =
              /*<<camlinternalFormat.ml:2431:29>>*/ parse
                /*<<camlinternalFormat.ml:2431:29>>*/ (str_ind, end_ind)
              [1],
           counter$0 = 2;
           /*<<camlinternalFormat.ml:2433:9>>*/ if
           ( /*<<camlinternalFormat.ml:2433:9>>*/ get_ign
              /*<<camlinternalFormat.ml:2433:9>>*/ (0))
           var
            ignored$6 =  /*<<camlinternalFormat.ml:2434:22>>*/ [11, counter$0],
            _aR_ = [0, [23, ignored$6, fmt_rest$14]];
          else
           var _aR_ = [0, [21, counter$0, fmt_rest$14]];
          var fmt_result = _aR_;
          break a;
         case 83:
          var
           pad$6 =
              /*<<camlinternalFormat.ml:2410:16>>*/  /*<<camlinternalFormat.ml:2410:16>>*/ check_no_0
               /*<<camlinternalFormat.ml:2410:16>>*/ (symb,
                /*<<camlinternalFormat.ml:2410:32>>*/ get_padprec
                 /*<<camlinternalFormat.ml:2410:32>>*/ (0)),
           fmt_rest$15 =
              /*<<camlinternalFormat.ml:2411:29>>*/ parse
                /*<<camlinternalFormat.ml:2411:29>>*/ (str_ind, end_ind)
              [1];
           /*<<camlinternalFormat.ml:2412:9>>*/ if
           ( /*<<camlinternalFormat.ml:2412:9>>*/ get_ign
              /*<<camlinternalFormat.ml:2412:9>>*/ (0))
           var
            ignored$7 =
               /*<<camlinternalFormat.ml:2413:22>>*/ [1,
                /*<<camlinternalFormat.ml:2413:42>>*/ get_padprec_opt
                 /*<<camlinternalFormat.ml:2413:42>>*/ (95)],
            _aS_ = [0, [23, ignored$7, fmt_rest$15]];
          else
           var
            match$5 =
               /*<<camlinternalFormat.ml:2417:10>>*/  /*<<camlinternalFormat.ml:2417:10>>*/ make_padding_fmt_ebb
                /*<<camlinternalFormat.ml:2417:10>>*/ (pad$6, fmt_rest$15),
            fmt_rest$16 = match$5[2],
            pad$7 = match$5[1],
            _aS_ = [0, [3, pad$7, fmt_rest$16]];
          var fmt_result = _aS_;
          break a;
         case 91:
          if(str_ind === end_ind)
            /*<<camlinternalFormat.ml:2092:4>>*/  /*<<camlinternalFormat.ml:2092:4>>*/ invalid_format_message
             /*<<camlinternalFormat.ml:2092:4>>*/ (end_ind,
             cst_unexpected_end_of_format);
          var
           char_set =
              /*<<camlinternalFormat.ml:2719:19>>*/  /*<<camlinternalFormat.ml:2719:19>>*/ create_char_set
               /*<<camlinternalFormat.ml:2719:19>>*/ (0),
           add_range =
             function(c$0, c){
               /*<<camlinternalFormat.ml:2724:6>>*/ if(c >= c$0){
               var i = c$0;
               for(;;){
                 /*<<camlinternalFormat.ml:2725:8>>*/  /*<<camlinternalFormat.ml:2725:8>>*/ add_in_char_set
                  /*<<camlinternalFormat.ml:2725:8>>*/ (char_set,
                   /*<<camlinternalFormat.ml:2725:33>>*/ caml_call1
                    /*<<camlinternalFormat.ml:2725:33>>*/ (Stdlib[29], i));
                var _a$_ =  /*<<camlinternalFormat.ml:2725:8>>*/ i + 1 | 0;
                if(c === i) break;
                i = _a$_;
               }
              }
              /*<<camlinternalFormat.ml:2726:10>>*/ },
           fail_single_percent =
             function(str_ind){
               /*<<camlinternalFormat.ml:2730:6>>*/ return  /*<<camlinternalFormat.ml:2730:6>>*/ caml_call2
                       /*<<camlinternalFormat.ml:2730:6>>*/ ( /*<<camlinternalFormat.ml:2730:6>>*/ failwith_message
                         /*<<camlinternalFormat.ml:2730:6>>*/ (_R_),
                       str,
                       str_ind) /*<<camlinternalFormat.ml:2732:54>>*/ ;
              /*<<camlinternalFormat.ml:2732:54>>*/ },
           parse_char_set_content =
             function(counter, str_ind, end_ind){
              var str_ind$0 = str_ind;
               /*<<camlinternalFormat.ml:2743:6>>*/ for(;;){
               if(str_ind$0 === end_ind)
                 /*<<camlinternalFormat.ml:2092:4>>*/  /*<<camlinternalFormat.ml:2092:4>>*/ invalid_format_message
                  /*<<camlinternalFormat.ml:2092:4>>*/ (end_ind,
                  cst_unexpected_end_of_format);
               var
                c =
                   /*<<camlinternalFormat.ml:2744:12>>*/  /*<<camlinternalFormat.ml:2744:12>>*/ caml_string_get
                    /*<<camlinternalFormat.ml:2744:12>>*/ (str, str_ind$0);
               if(45 !== c){
                if(93 === c)
                  /*<<camlinternalFormat.ml:2746:8>>*/ return str_ind$0 + 1
                        | 0 /*<<camlinternalFormat.ml:2746:8>>*/ ;
                var _a__ = str_ind$0 + 1 | 0;
                 /*<<camlinternalFormat.ml:2751:8>>*/ if(counter >= 50)
                  /*<<camlinternalFormat.ml:2751:8>>*/ return  /*<<camlinternalFormat.ml:2751:8>>*/ caml_trampoline_return
                          /*<<camlinternalFormat.ml:2751:8>>*/ (parse_char_set_after_char$0,
                          [0, _a__, end_ind, c]) /*<<camlinternalFormat.ml:2751:57>>*/ ;
                var counter$0 = counter + 1 | 0;
                 /*<<camlinternalFormat.ml:2751:8>>*/ return  /*<<camlinternalFormat.ml:2751:8>>*/ parse_char_set_after_char$0
                         /*<<camlinternalFormat.ml:2751:8>>*/ (counter$0,
                         _a__,
                         end_ind,
                         c) /*<<camlinternalFormat.ml:2751:57>>*/ ;
               }
                /*<<camlinternalFormat.ml:2721:6>>*/  /*<<camlinternalFormat.ml:2721:6>>*/ add_in_char_set
                 /*<<camlinternalFormat.ml:2721:6>>*/ (char_set, 45);
               var str_ind$1 = str_ind$0 + 1 | 0;
               str_ind$0 = str_ind$1;
              }
              /*<<camlinternalFormat.ml:2751:57>>*/ },
           parse_char_set_after_char$0 =
             function(counter, str_ind, end_ind, c){
              var str_ind$0 = str_ind, c$0 = c;
               /*<<camlinternalFormat.ml:2755:6>>*/ for(;;){
               if(str_ind$0 === end_ind)
                 /*<<camlinternalFormat.ml:2092:4>>*/  /*<<camlinternalFormat.ml:2092:4>>*/ invalid_format_message
                  /*<<camlinternalFormat.ml:2092:4>>*/ (end_ind,
                  cst_unexpected_end_of_format);
               var
                c$1 =
                   /*<<camlinternalFormat.ml:2756:12>>*/  /*<<camlinternalFormat.ml:2756:12>>*/ caml_string_get
                    /*<<camlinternalFormat.ml:2756:12>>*/ (str, str_ind$0);
               a:
               {
                if(46 <= c$1){
                 if(64 !== c$1){
                  if(93 !== c$1) break a;
                   /*<<camlinternalFormat.ml:2721:6>>*/  /*<<camlinternalFormat.ml:2721:6>>*/ add_in_char_set
                    /*<<camlinternalFormat.ml:2721:6>>*/ (char_set, c$0);
                   /*<<camlinternalFormat.ml:2758:8>>*/ return str_ind$0 + 1
                         | 0 /*<<camlinternalFormat.ml:2758:8>>*/ ;
                 }
                }
                else if(37 !== c$1){
                 if(45 > c$1) break a;
                 var str_ind$2 = str_ind$0 + 1 | 0;
                 if(str_ind$2 === end_ind)
                   /*<<camlinternalFormat.ml:2092:4>>*/  /*<<camlinternalFormat.ml:2092:4>>*/ invalid_format_message
                    /*<<camlinternalFormat.ml:2092:4>>*/ (end_ind,
                    cst_unexpected_end_of_format);
                 var
                  c$2 =
                     /*<<camlinternalFormat.ml:2776:12>>*/  /*<<camlinternalFormat.ml:2776:12>>*/ caml_string_get
                      /*<<camlinternalFormat.ml:2776:12>>*/ (str, str_ind$2);
                 if(37 === c$2){
                  if((str_ind$2 + 1 | 0) === end_ind)
                    /*<<camlinternalFormat.ml:2092:4>>*/  /*<<camlinternalFormat.ml:2092:4>>*/ invalid_format_message
                     /*<<camlinternalFormat.ml:2092:4>>*/ (end_ind,
                     cst_unexpected_end_of_format);
                  var
                   c$3 =
                      /*<<camlinternalFormat.ml:2783:20>>*/  /*<<camlinternalFormat.ml:2783:20>>*/ caml_string_get
                       /*<<camlinternalFormat.ml:2783:20>>*/ (str,
                       str_ind$2 + 1 | 0);
                  if(37 !== c$3 && 64 !== c$3)
                    /*<<camlinternalFormat.ml:2787:17>>*/ return  /*<<camlinternalFormat.ml:2787:17>>*/ fail_single_percent
                            /*<<camlinternalFormat.ml:2787:17>>*/ (str_ind$2) /*<<camlinternalFormat.ml:2771:58>>*/ ;
                   /*<<camlinternalFormat.ml:2785:12>>*/  /*<<camlinternalFormat.ml:2785:12>>*/ add_range
                    /*<<camlinternalFormat.ml:2785:12>>*/ (c$0, c$3);
                  var _a8_ = str_ind$2 + 2 | 0;
                   /*<<camlinternalFormat.ml:2785:12>>*/ if(counter >= 50)
                    /*<<camlinternalFormat.ml:2785:12>>*/ return  /*<<camlinternalFormat.ml:2785:12>>*/ caml_trampoline_return
                            /*<<camlinternalFormat.ml:2785:12>>*/ (parse_char_set_content,
                            [0, _a8_, end_ind]) /*<<camlinternalFormat.ml:2771:58>>*/ ;
                  var counter$1 = counter + 1 | 0;
                   /*<<camlinternalFormat.ml:2785:12>>*/ return  /*<<camlinternalFormat.ml:2785:12>>*/ parse_char_set_content
                           /*<<camlinternalFormat.ml:2785:12>>*/ (counter$1,
                           _a8_,
                           end_ind) /*<<camlinternalFormat.ml:2771:58>>*/ ;
                 }
                 if(93 === c$2){
                   /*<<camlinternalFormat.ml:2721:6>>*/  /*<<camlinternalFormat.ml:2721:6>>*/ add_in_char_set
                    /*<<camlinternalFormat.ml:2721:6>>*/ (char_set, c$0);
                   /*<<camlinternalFormat.ml:2721:6>>*/  /*<<camlinternalFormat.ml:2721:6>>*/ add_in_char_set
                    /*<<camlinternalFormat.ml:2721:6>>*/ (char_set, 45);
                   /*<<camlinternalFormat.ml:2779:8>>*/ return str_ind$2 + 1
                         | 0 /*<<camlinternalFormat.ml:2779:8>>*/ ;
                 }
                  /*<<camlinternalFormat.ml:2790:8>>*/  /*<<camlinternalFormat.ml:2790:8>>*/ add_range
                   /*<<camlinternalFormat.ml:2790:8>>*/ (c$0, c$2);
                 var _a9_ = str_ind$2 + 1 | 0;
                  /*<<camlinternalFormat.ml:2790:8>>*/ if(counter >= 50)
                   /*<<camlinternalFormat.ml:2790:8>>*/ return  /*<<camlinternalFormat.ml:2790:8>>*/ caml_trampoline_return
                           /*<<camlinternalFormat.ml:2790:8>>*/ (parse_char_set_content,
                           [0, _a9_, end_ind]) /*<<camlinternalFormat.ml:2771:58>>*/ ;
                 var counter$0 = counter + 1 | 0;
                  /*<<camlinternalFormat.ml:2790:8>>*/ return  /*<<camlinternalFormat.ml:2790:8>>*/ parse_char_set_content
                          /*<<camlinternalFormat.ml:2790:8>>*/ (counter$0,
                          _a9_,
                          end_ind) /*<<camlinternalFormat.ml:2771:58>>*/ ;
                }
                if(37 === c$0){
                  /*<<camlinternalFormat.ml:2721:6>>*/  /*<<camlinternalFormat.ml:2721:6>>*/ add_in_char_set
                   /*<<camlinternalFormat.ml:2721:6>>*/ (char_set, c$1);
                 var _a7_ = str_ind$0 + 1 | 0;
                  /*<<camlinternalFormat.ml:2763:8>>*/ if(counter >= 50)
                   /*<<camlinternalFormat.ml:2763:8>>*/ return  /*<<camlinternalFormat.ml:2763:8>>*/ caml_trampoline_return
                           /*<<camlinternalFormat.ml:2763:8>>*/ (parse_char_set_content,
                           [0, _a7_, end_ind]) /*<<camlinternalFormat.ml:2771:58>>*/ ;
                 var counter$2 = counter + 1 | 0;
                  /*<<camlinternalFormat.ml:2763:8>>*/ return  /*<<camlinternalFormat.ml:2763:8>>*/ parse_char_set_content
                          /*<<camlinternalFormat.ml:2763:8>>*/ (counter$2,
                          _a7_,
                          end_ind) /*<<camlinternalFormat.ml:2771:58>>*/ ;
                }
               }
               if(37 === c$0)
                 /*<<camlinternalFormat.ml:2766:24>>*/  /*<<camlinternalFormat.ml:2766:24>>*/ fail_single_percent
                  /*<<camlinternalFormat.ml:2766:24>>*/ (str_ind$0);
                /*<<camlinternalFormat.ml:2721:6>>*/  /*<<camlinternalFormat.ml:2721:6>>*/ add_in_char_set
                 /*<<camlinternalFormat.ml:2721:6>>*/ (char_set, c$0);
               var str_ind$1 = str_ind$0 + 1 | 0;
               str_ind$0 = str_ind$1;
               c$0 = c$1;
              }
              /*<<camlinternalFormat.ml:2771:58>>*/ },
           parse_char_set_after_char =
             function(str_ind, end_ind, c){
               /*<<?>>*/ return caml_trampoline
                      (parse_char_set_after_char$0(0, str_ind, end_ind, c));
             };
          if(str_ind === end_ind)
            /*<<camlinternalFormat.ml:2092:4>>*/  /*<<camlinternalFormat.ml:2092:4>>*/ invalid_format_message
             /*<<camlinternalFormat.ml:2092:4>>*/ (end_ind,
             cst_unexpected_end_of_format);
          if
           (94
            ===
              /*<<camlinternalFormat.ml:2795:12>>*/ caml_string_get
               /*<<camlinternalFormat.ml:2795:12>>*/ (str, str_ind))
           var
            str_ind$0 = str_ind + 1 | 0,
            reverse = 1,
            str_ind$1 = str_ind$0;
          else
           var reverse = 0, str_ind$1 = str_ind;
          if(str_ind$1 === end_ind)
            /*<<camlinternalFormat.ml:2092:4>>*/  /*<<camlinternalFormat.ml:2092:4>>*/ invalid_format_message
             /*<<camlinternalFormat.ml:2092:4>>*/ (end_ind,
             cst_unexpected_end_of_format);
          var
           c =
              /*<<camlinternalFormat.ml:2738:14>>*/  /*<<camlinternalFormat.ml:2738:14>>*/ caml_string_get
               /*<<camlinternalFormat.ml:2738:14>>*/ (str, str_ind$1),
           next_ind =
              /*<<camlinternalFormat.ml:2739:6>>*/  /*<<camlinternalFormat.ml:2739:6>>*/ parse_char_set_after_char
               /*<<camlinternalFormat.ml:2739:6>>*/ (str_ind$1 + 1 | 0,
               end_ind,
               c),
           char_set$0 =
              /*<<camlinternalFormat.ml:2799:19>>*/  /*<<camlinternalFormat.ml:2799:19>>*/ freeze_char_set
               /*<<camlinternalFormat.ml:2799:19>>*/ (char_set),
           char_set$1 =
              /*<<camlinternalFormat.ml:2800:4>>*/ reverse
              ?  /*<<camlinternalFormat.ml:2800:31>>*/ rev_char_set
                 /*<<camlinternalFormat.ml:2800:31>>*/ (char_set$0)
              : char_set$0,
           fmt_rest$19 =
              /*<<camlinternalFormat.ml:2542:29>>*/ parse
                /*<<camlinternalFormat.ml:2542:29>>*/ (next_ind, end_ind)
              [1];
           /*<<camlinternalFormat.ml:2543:9>>*/ if
           ( /*<<camlinternalFormat.ml:2543:9>>*/ get_ign
              /*<<camlinternalFormat.ml:2543:9>>*/ (0))
           var
            ignored$9 =
               /*<<camlinternalFormat.ml:2544:22>>*/ [10,
                /*<<camlinternalFormat.ml:2544:45>>*/ get_pad_opt
                 /*<<camlinternalFormat.ml:2544:45>>*/ (95),
               char_set$1],
            _aX_ = [0, [23, ignored$9, fmt_rest$19]];
          else
           var
            _aX_ =
              [0,
               [20,
                 /*<<camlinternalFormat.ml:2547:32>>*/ get_pad_opt
                  /*<<camlinternalFormat.ml:2547:32>>*/ (91),
                char_set$1,
                fmt_rest$19]];
          var fmt_result = _aX_;
          break a;
         case 97:
          var
           fmt_rest$20 =
              /*<<camlinternalFormat.ml:2505:29>>*/ parse
                /*<<camlinternalFormat.ml:2505:29>>*/ (str_ind, end_ind)
              [1],
           fmt_result = [0, [15, fmt_rest$20]];
          break a;
         case 99:
          var
           char_format =
             function(fmt_rest){
               /*<<camlinternalFormat.ml:2377:8>>*/ return  /*<<camlinternalFormat.ml:2377:11>>*/ get_ign
                        /*<<camlinternalFormat.ml:2377:11>>*/ (0)
                      ? [0, [23, 0, fmt_rest]]
                      : [0, [0, fmt_rest]] /*<<camlinternalFormat.ml:2379:36>>*/ ;
              /*<<camlinternalFormat.ml:2379:36>>*/ },
           fmt_rest$21 =
              /*<<camlinternalFormat.ml:2386:29>>*/ parse
                /*<<camlinternalFormat.ml:2386:29>>*/ (str_ind, end_ind)
              [1],
           match$7 =
              /*<<camlinternalFormat.ml:2387:18>>*/  /*<<camlinternalFormat.ml:2387:18>>*/ get_pad_opt
               /*<<camlinternalFormat.ml:2387:18>>*/ (99);
          if(match$7){
           if(0 === match$7[1])
            var
             _aY_ =
                /*<<camlinternalFormat.ml:2382:11>>*/  /*<<camlinternalFormat.ml:2382:11>>*/ get_ign
                  /*<<camlinternalFormat.ml:2382:11>>*/ (0)
                ? [0, [23, 3, fmt_rest$21]]
                : [0, [22, fmt_rest$21]],
             _aZ_ = _aY_;
           else
            var
             _aZ_ =
               legacy_behavior$0
                ?  /*<<camlinternalFormat.ml:2393:47>>*/ char_format
                   /*<<camlinternalFormat.ml:2393:47>>*/ (fmt_rest$21)
                :  /*<<camlinternalFormat.ml:2098:4>>*/ invalid_format_message
                   /*<<camlinternalFormat.ml:2098:4>>*/ (str_ind,
                   cst_non_zero_widths_are_unsupp);
           var _a0_ = _aZ_;
          }
          else
           var
            _a0_ =
               /*<<camlinternalFormat.ml:2388:18>>*/ char_format
                /*<<camlinternalFormat.ml:2388:18>>*/ (fmt_rest$21);
          var fmt_result = _a0_;
          break a;
         case 114:
          var
           fmt_rest$22 =
              /*<<camlinternalFormat.ml:2511:29>>*/ parse
                /*<<camlinternalFormat.ml:2511:29>>*/ (str_ind, end_ind)
              [1],
           _a1_ =
              /*<<camlinternalFormat.ml:2512:9>>*/  /*<<camlinternalFormat.ml:2512:9>>*/ get_ign
                /*<<camlinternalFormat.ml:2512:9>>*/ (0)
              ? [0, [23, 2, fmt_rest$22]]
              : [0, [19, fmt_rest$22]],
           fmt_result = _a1_;
          break a;
         case 115:
          var
           pad$9 =
              /*<<camlinternalFormat.ml:2400:16>>*/  /*<<camlinternalFormat.ml:2400:16>>*/ check_no_0
               /*<<camlinternalFormat.ml:2400:16>>*/ (symb,
                /*<<camlinternalFormat.ml:2400:32>>*/ get_padprec
                 /*<<camlinternalFormat.ml:2400:32>>*/ (0)),
           fmt_rest$23 =
              /*<<camlinternalFormat.ml:2401:29>>*/ parse
                /*<<camlinternalFormat.ml:2401:29>>*/ (str_ind, end_ind)
              [1];
           /*<<camlinternalFormat.ml:2402:9>>*/ if
           ( /*<<camlinternalFormat.ml:2402:9>>*/ get_ign
              /*<<camlinternalFormat.ml:2402:9>>*/ (0))
           var
            ignored$10 =
               /*<<camlinternalFormat.ml:2403:22>>*/ [0,
                /*<<camlinternalFormat.ml:2403:37>>*/ get_padprec_opt
                 /*<<camlinternalFormat.ml:2403:37>>*/ (95)],
            _a2_ = [0, [23, ignored$10, fmt_rest$23]];
          else
           var
            match$8 =
               /*<<camlinternalFormat.ml:2407:10>>*/  /*<<camlinternalFormat.ml:2407:10>>*/ make_padding_fmt_ebb
                /*<<camlinternalFormat.ml:2407:10>>*/ (pad$9, fmt_rest$23),
            fmt_rest$24 = match$8[2],
            pad$10 = match$8[1],
            _a2_ = [0, [2, pad$10, fmt_rest$24]];
          var fmt_result = _a2_;
          break a;
         case 116:
          var
           fmt_rest$25 =
              /*<<camlinternalFormat.ml:2508:29>>*/ parse
                /*<<camlinternalFormat.ml:2508:29>>*/ (str_ind, end_ind)
              [1],
           fmt_result = [0, [16, fmt_rest$25]];
          break a;
         case 123:
          var
           sub_end$0 =
              /*<<camlinternalFormat.ml:2521:20>>*/  /*<<camlinternalFormat.ml:2521:20>>*/ search_subformat_end
               /*<<camlinternalFormat.ml:2521:20>>*/ (str_ind, end_ind, 125),
           sub_fmt$0 =
              /*<<camlinternalFormat.ml:2522:28>>*/ parse
                /*<<camlinternalFormat.ml:2522:28>>*/ (str_ind, sub_end$0)
              [1],
           fmt_rest$26 =
              /*<<camlinternalFormat.ml:2523:29>>*/ parse
                /*<<camlinternalFormat.ml:2523:29>>*/ (sub_end$0 + 2 | 0,
                end_ind)
              [1],
           sub_fmtty$0 =
              /*<<camlinternalFormat.ml:2524:22>>*/  /*<<camlinternalFormat.ml:2524:22>>*/ fmtty_of_fmt
               /*<<camlinternalFormat.ml:2524:22>>*/ (sub_fmt$0);
           /*<<camlinternalFormat.ml:2525:9>>*/ if
           ( /*<<camlinternalFormat.ml:2525:9>>*/ get_ign
              /*<<camlinternalFormat.ml:2525:9>>*/ (0))
           var
            ignored$11 =
               /*<<camlinternalFormat.ml:2526:22>>*/ [8,
                /*<<camlinternalFormat.ml:2526:42>>*/ get_pad_opt
                 /*<<camlinternalFormat.ml:2526:42>>*/ (95),
               sub_fmtty$0],
            _a3_ = [0, [23, ignored$11, fmt_rest$26]];
          else
           var
            _a3_ =
              [0,
               [13,
                 /*<<camlinternalFormat.ml:2529:29>>*/ get_pad_opt
                  /*<<camlinternalFormat.ml:2529:29>>*/ (123),
                sub_fmtty$0,
                fmt_rest$26]];
          var fmt_result = _a3_;
          break a;
         case 66:
         case 98:
          var
           pad$3 =
              /*<<camlinternalFormat.ml:2495:16>>*/  /*<<camlinternalFormat.ml:2495:16>>*/ check_no_0
               /*<<camlinternalFormat.ml:2495:16>>*/ (symb,
                /*<<camlinternalFormat.ml:2495:32>>*/ get_padprec
                 /*<<camlinternalFormat.ml:2495:32>>*/ (0)),
           fmt_rest$8 =
              /*<<camlinternalFormat.ml:2496:29>>*/ parse
                /*<<camlinternalFormat.ml:2496:29>>*/ (str_ind, end_ind)
              [1];
           /*<<camlinternalFormat.ml:2497:9>>*/ if
           ( /*<<camlinternalFormat.ml:2497:9>>*/ get_ign
              /*<<camlinternalFormat.ml:2497:9>>*/ (0))
           var
            ignored$3 =
               /*<<camlinternalFormat.ml:2498:22>>*/ [7,
                /*<<camlinternalFormat.ml:2498:35>>*/ get_padprec_opt
                 /*<<camlinternalFormat.ml:2498:35>>*/ (95)],
            _aK_ = [0, [23, ignored$3, fmt_rest$8]];
          else
           var
            match$3 =
               /*<<camlinternalFormat.ml:2502:10>>*/  /*<<camlinternalFormat.ml:2502:10>>*/ make_padding_fmt_ebb
                /*<<camlinternalFormat.ml:2502:10>>*/ (pad$3, fmt_rest$8),
            fmt_rest$9 = match$3[2],
            pad$4 = match$3[1],
            _aK_ = [0, [9, pad$4, fmt_rest$9]];
          var fmt_result = _aK_;
          break a;
         case 37:
         case 64:
          var
           fmt_rest$6 =
              /*<<camlinternalFormat.ml:2518:29>>*/ parse
                /*<<camlinternalFormat.ml:2518:29>>*/ (str_ind, end_ind)
              [1],
           fmt_result = [0, [12, symb, fmt_rest$6]];
          break a;
         case 76:
         case 108:
         case 110:
          if(str_ind !== end_ind){
           var
            symb$0 =
               /*<<camlinternalFormat.ml:2438:63>>*/  /*<<camlinternalFormat.ml:2438:63>>*/ caml_string_get
                /*<<camlinternalFormat.ml:2438:63>>*/ (str, str_ind),
            _a4_ =  /*<<camlinternalFormat.ml:2892:25>>*/ symb$0 - 88 | 0;
           b:
           {
            if(32 >= _a4_ >>> 0)
             switch(_a4_){
               case 0:
               case 12:
               case 17:
               case 23:
               case 29:
               case 32:
                var _aQ_ = 1; break b;
             }
            var _aQ_ = 0;
           }
            /*<<camlinternalFormat.ml:2438:50>>*/ if(_aQ_) break;
          }
          var
           fmt_rest$13 =
              /*<<camlinternalFormat.ml:2439:29>>*/ parse
                /*<<camlinternalFormat.ml:2439:29>>*/ (str_ind, end_ind)
              [1];
          b:
          {
           if(108 <= symb){
            if(111 > symb)
             switch(symb - 108 | 0){
               case 0:
                var counter = 0; break b;
               case 1: break;
               default: var counter = 1; break b;
             }
           }
           else if(76 === symb){var counter = 2; break b;}
            /*<<camlinternalFormat.ml:2899:34>>*/ throw  /*<<camlinternalFormat.ml:2899:34>>*/ caml_maybe_attach_backtrace
                   /*<<camlinternalFormat.ml:2899:34>>*/ ([0,
                    Assert_failure,
                    _V_],
                   1);
          }
           /*<<camlinternalFormat.ml:2441:9>>*/ if
           ( /*<<camlinternalFormat.ml:2441:9>>*/ get_ign
              /*<<camlinternalFormat.ml:2441:9>>*/ (0))
           var
            ignored$5 =  /*<<camlinternalFormat.ml:2442:22>>*/ [11, counter],
            _aP_ = [0, [23, ignored$5, fmt_rest$13]];
          else
           var _aP_ = [0, [21, counter, fmt_rest$13]];
          var fmt_result = _aP_;
          break a;
         case 32:
         case 35:
         case 43:
         case 45:
         case 95:
          var
           fmt_result =
              /*<<camlinternalFormat.ml:2549:6>>*/ caml_call3
               /*<<camlinternalFormat.ml:2549:6>>*/ ( /*<<camlinternalFormat.ml:2549:6>>*/ failwith_message
                 /*<<camlinternalFormat.ml:2549:6>>*/ (_M_),
               str,
               pct_ind,
               symb);
          break a;
         case 88:
         case 100:
         case 105:
         case 111:
         case 117:
         case 120:
          var
           _aT_ =
              /*<<camlinternalFormat.ml:2421:8>>*/  /*<<camlinternalFormat.ml:2421:8>>*/ get_space
               /*<<camlinternalFormat.ml:2421:8>>*/ (0),
           _aU_ =
              /*<<camlinternalFormat.ml:2420:65>>*/  /*<<camlinternalFormat.ml:2420:65>>*/ get_hash
               /*<<camlinternalFormat.ml:2420:65>>*/ (0),
           iconv$2 =
              /*<<camlinternalFormat.ml:2420:18>>*/  /*<<camlinternalFormat.ml:2420:18>>*/ compute_int_conv
               /*<<camlinternalFormat.ml:2420:18>>*/ (pct_ind,
               str_ind,
                /*<<camlinternalFormat.ml:2420:51>>*/ get_plus
                 /*<<camlinternalFormat.ml:2420:51>>*/ (0),
               _aU_,
               _aT_,
               symb),
           fmt_rest$17 =
              /*<<camlinternalFormat.ml:2422:29>>*/ parse
                /*<<camlinternalFormat.ml:2422:29>>*/ (str_ind, end_ind)
              [1];
           /*<<camlinternalFormat.ml:2423:9>>*/ if
           ( /*<<camlinternalFormat.ml:2423:9>>*/ get_ign
              /*<<camlinternalFormat.ml:2423:9>>*/ (0))
           var
            ignored$8 =
               /*<<camlinternalFormat.ml:2424:22>>*/ [2,
               iconv$2,
                /*<<camlinternalFormat.ml:2424:42>>*/ get_pad_opt
                 /*<<camlinternalFormat.ml:2424:42>>*/ (95)],
            _aV_ = [0, [23, ignored$8, fmt_rest$17]];
          else
           var
            _aW_ =
               /*<<camlinternalFormat.ml:2428:48>>*/  /*<<camlinternalFormat.ml:2428:48>>*/ get_prec
                /*<<camlinternalFormat.ml:2428:48>>*/ (0),
            match$6 =
               /*<<camlinternalFormat.ml:2428:10>>*/  /*<<camlinternalFormat.ml:2428:10>>*/ make_padprec_fmt_ebb
                /*<<camlinternalFormat.ml:2428:10>>*/ ( /*<<camlinternalFormat.ml:2428:31>>*/ get_int_pad
                  /*<<camlinternalFormat.ml:2428:31>>*/ (0),
                _aW_,
                fmt_rest$17),
            fmt_rest$18 = match$6[3],
            prec$4 = match$6[2],
            pad$8 = match$6[1],
            _aV_ = [0, [4, iconv$2, pad$8, prec$4, fmt_rest$18]];
          var fmt_result = _aV_;
          break a;
         case 69:
         case 70:
         case 71:
         case 72:
         case 101:
         case 102:
         case 103:
         case 104:
          var
           space$1 =
              /*<<camlinternalFormat.ml:2485:38>>*/  /*<<camlinternalFormat.ml:2485:38>>*/ get_space
               /*<<camlinternalFormat.ml:2485:38>>*/ (0),
           hash$1 =
              /*<<camlinternalFormat.ml:2485:24>>*/  /*<<camlinternalFormat.ml:2485:24>>*/ get_hash
               /*<<camlinternalFormat.ml:2485:24>>*/ (0),
           plus$2 =
              /*<<camlinternalFormat.ml:2485:10>>*/  /*<<camlinternalFormat.ml:2485:10>>*/ get_plus
               /*<<camlinternalFormat.ml:2485:10>>*/ (0),
           flag =
             plus$2
              ? space$1
                ? legacy_behavior$0
                  ? 1
                  :  /*<<camlinternalFormat.ml:2946:11>>*/ incompatible_flag
                     /*<<camlinternalFormat.ml:2946:11>>*/ (pct_ind,
                     str_ind,
                     32,
                     cst$36)
                : 1
              : space$1 ? 2 : 0;
          b:
          {
           c:
           if(73 <= symb){
            var switcher = symb - 101 | 0;
            if(3 >= switcher >>> 0){
             switch(switcher){
               case 0:
                var _a5_ = 1; break;
               case 1:
                var _a5_ = 0; break;
               case 2:
                var _a5_ = 3; break;
               default: var _a5_ = 6;
             }
             var kind = _a5_;
             break b;
            }
           }
           else if(69 <= symb){
            switch(symb - 69 | 0){
              case 0:
               var _a6_ = 2; break;
              case 1:
               break c;
              case 2:
               var _a6_ = 4; break;
              default: var _a6_ = 7;
            }
            var kind = _a6_;
            break b;
           }
           if(hash$1){
            if(70 === symb){var kind = 8; break b;}
           }
           else if(70 === symb){var kind = 5; break b;}
            /*<<camlinternalFormat.ml:2957:11>>*/ throw  /*<<camlinternalFormat.ml:2957:11>>*/ caml_maybe_attach_backtrace
                   /*<<camlinternalFormat.ml:2957:11>>*/ ([0,
                    Assert_failure,
                    _X_],
                   1);
          }
          var
           fconv =  /*<<camlinternalFormat.ml:2958:4>>*/ [0, flag, kind],
           fmt_rest$11 =
              /*<<camlinternalFormat.ml:2486:29>>*/ parse
                /*<<camlinternalFormat.ml:2486:29>>*/ (str_ind, end_ind)
              [1];
           /*<<camlinternalFormat.ml:2487:9>>*/ if
           ( /*<<camlinternalFormat.ml:2487:9>>*/ get_ign
              /*<<camlinternalFormat.ml:2487:9>>*/ (0)){
           var
            match =
               /*<<camlinternalFormat.ml:2366:32>>*/  /*<<camlinternalFormat.ml:2366:32>>*/ get_prec
                /*<<camlinternalFormat.ml:2366:32>>*/ (0);
           if(typeof match === "number")
            var
             _aM_ =
               match
                ?  /*<<camlinternalFormat.ml:2369:30>>*/ incompatible_flag
                   /*<<camlinternalFormat.ml:2369:30>>*/ (pct_ind,
                   str_ind,
                   95,
                   cst$26)
                : 0;
           else
            var ndec = match[1], _aM_ = [0, ndec];
           var
            ignored$4 =
               /*<<camlinternalFormat.ml:2488:22>>*/ [6,
                /*<<camlinternalFormat.ml:2488:37>>*/ get_pad_opt
                 /*<<camlinternalFormat.ml:2488:37>>*/ (95),
               _aM_],
            _aN_ = [0, [23, ignored$4, fmt_rest$11]];
          }
          else
           var
            _aO_ =
               /*<<camlinternalFormat.ml:2492:44>>*/  /*<<camlinternalFormat.ml:2492:44>>*/ get_prec
                /*<<camlinternalFormat.ml:2492:44>>*/ (0),
            match$4 =
               /*<<camlinternalFormat.ml:2492:10>>*/  /*<<camlinternalFormat.ml:2492:10>>*/ make_padprec_fmt_ebb
                /*<<camlinternalFormat.ml:2492:10>>*/ ( /*<<camlinternalFormat.ml:2492:31>>*/ get_pad
                  /*<<camlinternalFormat.ml:2492:31>>*/ (0),
                _aO_,
                fmt_rest$11),
            fmt_rest$12 = match$4[3],
            prec$3 = match$4[2],
            pad$5 = match$4[1],
            _aN_ = [0, [8, fconv, pad$5, prec$3, fmt_rest$12]];
          var fmt_result = _aN_;
          break a;
       }
      b:
      if(108 <= symb){
       if(111 > symb){
        switch(symb - 108 | 0){
          case 0:
           var
            _at_ =
               /*<<camlinternalFormat.ml:2449:25>>*/  /*<<camlinternalFormat.ml:2449:25>>*/ caml_string_get
                /*<<camlinternalFormat.ml:2449:25>>*/ (str, str_ind),
            _au_ =
               /*<<camlinternalFormat.ml:2449:10>>*/  /*<<camlinternalFormat.ml:2449:10>>*/ get_space
                /*<<camlinternalFormat.ml:2449:10>>*/ (0),
            _av_ =
               /*<<camlinternalFormat.ml:2448:61>>*/  /*<<camlinternalFormat.ml:2448:61>>*/ get_hash
                /*<<camlinternalFormat.ml:2448:61>>*/ (0),
            iconv =
               /*<<camlinternalFormat.ml:2448:8>>*/  /*<<camlinternalFormat.ml:2448:8>>*/ compute_int_conv
                /*<<camlinternalFormat.ml:2448:8>>*/ (pct_ind,
                str_ind + 1 | 0,
                 /*<<camlinternalFormat.ml:2448:47>>*/ get_plus
                  /*<<camlinternalFormat.ml:2448:47>>*/ (0),
                _av_,
                _au_,
                _at_),
            fmt_rest =
               /*<<camlinternalFormat.ml:2450:29>>*/ parse
                 /*<<camlinternalFormat.ml:2450:29>>*/ (str_ind + 1 | 0,
                 end_ind)
               [1];
            /*<<camlinternalFormat.ml:2451:9>>*/ if
            ( /*<<camlinternalFormat.ml:2451:9>>*/ get_ign
               /*<<camlinternalFormat.ml:2451:9>>*/ (0))
            var
             ignored =
                /*<<camlinternalFormat.ml:2452:22>>*/ [3,
                iconv,
                 /*<<camlinternalFormat.ml:2452:44>>*/ get_pad_opt
                  /*<<camlinternalFormat.ml:2452:44>>*/ (95)],
             _aw_ = [0, [23, ignored, fmt_rest]];
           else
            var
             _ay_ =
                /*<<camlinternalFormat.ml:2456:48>>*/  /*<<camlinternalFormat.ml:2456:48>>*/ get_prec
                 /*<<camlinternalFormat.ml:2456:48>>*/ (0),
             match$0 =
                /*<<camlinternalFormat.ml:2456:10>>*/  /*<<camlinternalFormat.ml:2456:10>>*/ make_padprec_fmt_ebb
                 /*<<camlinternalFormat.ml:2456:10>>*/ ( /*<<camlinternalFormat.ml:2456:31>>*/ get_int_pad
                   /*<<camlinternalFormat.ml:2456:31>>*/ (0),
                 _ay_,
                 fmt_rest),
             fmt_rest$0 = match$0[3],
             prec$0 = match$0[2],
             pad$0 = match$0[1],
             _aw_ = [0, [5, iconv, pad$0, prec$0, fmt_rest$0]];
           var _ax_ = _aw_;
           break;
          case 1:
           break b;
          default:
           var
            _az_ =
               /*<<camlinternalFormat.ml:2461:39>>*/  /*<<camlinternalFormat.ml:2461:39>>*/ caml_string_get
                /*<<camlinternalFormat.ml:2461:39>>*/ (str, str_ind),
            _aA_ =
               /*<<camlinternalFormat.ml:2461:24>>*/  /*<<camlinternalFormat.ml:2461:24>>*/ get_space
                /*<<camlinternalFormat.ml:2461:24>>*/ (0),
            _aB_ =
               /*<<camlinternalFormat.ml:2461:10>>*/  /*<<camlinternalFormat.ml:2461:10>>*/ get_hash
                /*<<camlinternalFormat.ml:2461:10>>*/ (0),
            iconv$0 =
               /*<<camlinternalFormat.ml:2460:8>>*/  /*<<camlinternalFormat.ml:2460:8>>*/ compute_int_conv
                /*<<camlinternalFormat.ml:2460:8>>*/ (pct_ind,
                str_ind + 1 | 0,
                 /*<<camlinternalFormat.ml:2460:47>>*/ get_plus
                  /*<<camlinternalFormat.ml:2460:47>>*/ (0),
                _aB_,
                _aA_,
                _az_),
            fmt_rest$1 =
               /*<<camlinternalFormat.ml:2462:29>>*/ parse
                 /*<<camlinternalFormat.ml:2462:29>>*/ (str_ind + 1 | 0,
                 end_ind)
               [1];
            /*<<camlinternalFormat.ml:2463:9>>*/ if
            ( /*<<camlinternalFormat.ml:2463:9>>*/ get_ign
               /*<<camlinternalFormat.ml:2463:9>>*/ (0))
            var
             ignored$0 =
                /*<<camlinternalFormat.ml:2464:22>>*/ [4,
                iconv$0,
                 /*<<camlinternalFormat.ml:2464:48>>*/ get_pad_opt
                  /*<<camlinternalFormat.ml:2464:48>>*/ (95)],
             _aC_ = [0, [23, ignored$0, fmt_rest$1]];
           else
            var
             _aD_ =
                /*<<camlinternalFormat.ml:2468:48>>*/  /*<<camlinternalFormat.ml:2468:48>>*/ get_prec
                 /*<<camlinternalFormat.ml:2468:48>>*/ (0),
             match$1 =
                /*<<camlinternalFormat.ml:2468:10>>*/  /*<<camlinternalFormat.ml:2468:10>>*/ make_padprec_fmt_ebb
                 /*<<camlinternalFormat.ml:2468:10>>*/ ( /*<<camlinternalFormat.ml:2468:31>>*/ get_int_pad
                   /*<<camlinternalFormat.ml:2468:31>>*/ (0),
                 _aD_,
                 fmt_rest$1),
             fmt_rest$2 = match$1[3],
             prec$1 = match$1[2],
             pad$1 = match$1[1],
             _aC_ = [0, [6, iconv$0, pad$1, prec$1, fmt_rest$2]];
           var _ax_ = _aC_;
        }
        var fmt_result = _ax_;
        break a;
       }
      }
      else if(76 === symb){
       var
        _aE_ =
           /*<<camlinternalFormat.ml:2473:25>>*/  /*<<camlinternalFormat.ml:2473:25>>*/ caml_string_get
            /*<<camlinternalFormat.ml:2473:25>>*/ (str, str_ind),
        _aF_ =
           /*<<camlinternalFormat.ml:2473:10>>*/  /*<<camlinternalFormat.ml:2473:10>>*/ get_space
            /*<<camlinternalFormat.ml:2473:10>>*/ (0),
        _aG_ =
           /*<<camlinternalFormat.ml:2472:61>>*/  /*<<camlinternalFormat.ml:2472:61>>*/ get_hash
            /*<<camlinternalFormat.ml:2472:61>>*/ (0),
        iconv$1 =
           /*<<camlinternalFormat.ml:2472:8>>*/  /*<<camlinternalFormat.ml:2472:8>>*/ compute_int_conv
            /*<<camlinternalFormat.ml:2472:8>>*/ (pct_ind,
            str_ind + 1 | 0,
             /*<<camlinternalFormat.ml:2472:47>>*/ get_plus
              /*<<camlinternalFormat.ml:2472:47>>*/ (0),
            _aG_,
            _aF_,
            _aE_),
        fmt_rest$3 =
           /*<<camlinternalFormat.ml:2474:29>>*/ parse
             /*<<camlinternalFormat.ml:2474:29>>*/ (str_ind + 1 | 0, end_ind)
           [1];
        /*<<camlinternalFormat.ml:2475:9>>*/ if
        ( /*<<camlinternalFormat.ml:2475:9>>*/ get_ign
           /*<<camlinternalFormat.ml:2475:9>>*/ (0))
        var
         ignored$1 =
            /*<<camlinternalFormat.ml:2476:22>>*/ [5,
            iconv$1,
             /*<<camlinternalFormat.ml:2476:44>>*/ get_pad_opt
              /*<<camlinternalFormat.ml:2476:44>>*/ (95)],
         _aH_ = [0, [23, ignored$1, fmt_rest$3]];
       else
        var
         _aI_ =
            /*<<camlinternalFormat.ml:2480:48>>*/  /*<<camlinternalFormat.ml:2480:48>>*/ get_prec
             /*<<camlinternalFormat.ml:2480:48>>*/ (0),
         match$2 =
            /*<<camlinternalFormat.ml:2480:10>>*/  /*<<camlinternalFormat.ml:2480:10>>*/ make_padprec_fmt_ebb
             /*<<camlinternalFormat.ml:2480:10>>*/ ( /*<<camlinternalFormat.ml:2480:31>>*/ get_int_pad
               /*<<camlinternalFormat.ml:2480:31>>*/ (0),
             _aI_,
             fmt_rest$3),
         fmt_rest$4 = match$2[3],
         prec$2 = match$2[2],
         pad$2 = match$2[1],
         _aH_ = [0, [7, iconv$1, pad$2, prec$2, fmt_rest$4]];
       var fmt_result = _aH_;
       break a;
      }
      var
       fmt_result =
          /*<<camlinternalFormat.ml:2554:6>>*/ caml_call3
           /*<<camlinternalFormat.ml:2554:6>>*/ ( /*<<camlinternalFormat.ml:2554:6>>*/ failwith_message
             /*<<camlinternalFormat.ml:2554:6>>*/ (_J_),
           str,
           str_ind - 1 | 0,
           symb);
     }
     if(1 - legacy_behavior$0){
      var _ak_ = 1 - plus_used[1], plus$0 = _ak_ ? plus : _ak_;
      if(plus$0)
        /*<<camlinternalFormat.ml:2564:6>>*/  /*<<camlinternalFormat.ml:2564:6>>*/ incompatible_flag
         /*<<camlinternalFormat.ml:2564:6>>*/ (pct_ind, str_ind, symb, cst$27);
      var _al_ = 1 - hash_used[1], hash$0 = _al_ ? hash : _al_;
      if(hash$0)
        /*<<camlinternalFormat.ml:2566:6>>*/  /*<<camlinternalFormat.ml:2566:6>>*/ incompatible_flag
         /*<<camlinternalFormat.ml:2566:6>>*/ (pct_ind, str_ind, symb, cst$28);
      var _am_ = 1 - space_used[1], space$0 = _am_ ? space : _am_;
      if(space$0)
        /*<<camlinternalFormat.ml:2568:6>>*/  /*<<camlinternalFormat.ml:2568:6>>*/ incompatible_flag
         /*<<camlinternalFormat.ml:2568:6>>*/ (pct_ind, str_ind, symb, cst$29);
      var
       _an_ = 1 - pad_used[1],
       _ao_ =
         _an_
          ?  /*<<camlinternalFormat.ml:2569:25>>*/ caml_notequal
             /*<<camlinternalFormat.ml:2569:25>>*/ ([0, pad], _K_)
          : _an_;
       /*<<camlinternalFormat.ml:2569:25>>*/ if(_ao_)
        /*<<camlinternalFormat.ml:2570:6>>*/  /*<<camlinternalFormat.ml:2570:6>>*/ incompatible_flag
         /*<<camlinternalFormat.ml:2570:6>>*/ (pct_ind,
         str_ind,
         symb,
         cst_padding$0);
      var
       _ap_ = 1 - prec_used[1],
       _aq_ =
         _ap_
          ?  /*<<camlinternalFormat.ml:2571:25>>*/ caml_notequal
             /*<<camlinternalFormat.ml:2571:25>>*/ ([0, prec], _L_)
          : _ap_;
       /*<<camlinternalFormat.ml:2571:25>>*/ if(_aq_){
       var _ar_ = ign ? 95 : symb;
        /*<<camlinternalFormat.ml:2572:6>>*/  /*<<camlinternalFormat.ml:2572:6>>*/ incompatible_flag
         /*<<camlinternalFormat.ml:2572:6>>*/ (pct_ind,
         str_ind,
         _ar_,
         cst_precision$2);
      }
      var plus$1 = ign ? plus : ign;
      if(plus$1)
        /*<<camlinternalFormat.ml:2574:24>>*/  /*<<camlinternalFormat.ml:2574:24>>*/ incompatible_flag
         /*<<camlinternalFormat.ml:2574:24>>*/ (pct_ind, str_ind, 95, cst$30);
     }
     var _as_ = 1 - ign_used[1], ign$0 = _as_ ? ign : _as_;
     a:
     if(ign$0){
      b:
      {
       if(38 <= symb){
        if(44 !== symb && 64 !== symb) break b;
       }
       else if(33 !== symb && 37 > symb) break b;
       if(legacy_behavior$0) break a;
      }
       /*<<camlinternalFormat.ml:2584:10>>*/  /*<<camlinternalFormat.ml:2584:10>>*/ incompatible_flag
        /*<<camlinternalFormat.ml:2584:10>>*/ (pct_ind, str_ind, symb, cst$31);
     }
      /*<<camlinternalFormat.ml:2584:10>>*/ return fmt_result /*<<camlinternalFormat.ml:2584:10>>*/ ;
    }
    function parse_tag(is_open_tag, str_ind, end_ind){
      /*<<camlinternalFormat.ml:2639:4>>*/ try{
      if(str_ind === end_ind)
        /*<<camlinternalFormat.ml:2640:32>>*/ throw  /*<<camlinternalFormat.ml:2640:32>>*/ caml_maybe_attach_backtrace
               /*<<camlinternalFormat.ml:2640:32>>*/ (Stdlib[8], 1);
      if
       (60
        !==
          /*<<camlinternalFormat.ml:2641:12>>*/ caml_string_get
           /*<<camlinternalFormat.ml:2641:12>>*/ (str, str_ind))
        /*<<camlinternalFormat.ml:2653:8>>*/ throw  /*<<camlinternalFormat.ml:2653:8>>*/ caml_maybe_attach_backtrace
               /*<<camlinternalFormat.ml:2653:8>>*/ (Stdlib[8], 1);
      var
       ind =
          /*<<camlinternalFormat.ml:2643:18>>*/  /*<<camlinternalFormat.ml:2643:18>>*/ caml_call3
           /*<<camlinternalFormat.ml:2643:18>>*/ (Stdlib_String[32],
           str,
           str_ind + 1 | 0,
           62);
      if(end_ind <= ind)
        /*<<camlinternalFormat.ml:2644:31>>*/ throw  /*<<camlinternalFormat.ml:2644:31>>*/ caml_maybe_attach_backtrace
               /*<<camlinternalFormat.ml:2644:31>>*/ (Stdlib[8], 1);
      var
       sub_str =
          /*<<camlinternalFormat.ml:2645:22>>*/  /*<<camlinternalFormat.ml:2645:22>>*/ caml_call3
           /*<<camlinternalFormat.ml:2645:22>>*/ (Stdlib_String[16],
           str,
           str_ind,
           (ind - str_ind | 0) + 1 | 0),
       fmt_rest$0 =
          /*<<camlinternalFormat.ml:2646:31>>*/ parse
            /*<<camlinternalFormat.ml:2646:31>>*/ (ind + 1 | 0, end_ind)
          [1],
       sub_fmt =
          /*<<camlinternalFormat.ml:2647:30>>*/ parse
            /*<<camlinternalFormat.ml:2647:30>>*/ (str_ind, ind + 1 | 0)
          [1],
       sub_format$0 =
          /*<<camlinternalFormat.ml:2648:25>>*/ [0, sub_fmt, sub_str],
       formatting$0 =
          /*<<camlinternalFormat.ml:2649:8>>*/ is_open_tag
          ? [0, sub_format$0]
          : [1, sub_format$0],
       _ai_ =
          /*<<camlinternalFormat.ml:2651:8>>*/ [0,
          [18, formatting$0, fmt_rest$0]];
       /*<<camlinternalFormat.ml:2651:8>>*/ return _ai_ /*<<camlinternalFormat.ml:2651:8>>*/ ;
     }
     catch(_aj_){
      var _ah_ = caml_wrap_exception(_aj_);
      if(_ah_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_ah_, 0);
      var
       fmt_rest =
          /*<<camlinternalFormat.ml:2655:29>>*/ parse
            /*<<camlinternalFormat.ml:2655:29>>*/ (str_ind, end_ind)
          [1],
       formatting =
          /*<<camlinternalFormat.ml:2657:6>>*/ is_open_tag
          ? [0, sub_format]
          : [1, sub_format];
       /*<<camlinternalFormat.ml:2659:6>>*/ return [0,
              [18, formatting, fmt_rest]] /*<<camlinternalFormat.ml:2659:6>>*/ ;
     }
     /*<<camlinternalFormat.ml:2659:53>>*/ }
    function parse_spaces(str_ind, end_ind){
     var str_ind$0 = str_ind;
      /*<<camlinternalFormat.ml:2804:4>>*/ for(;;){
      if(str_ind$0 === end_ind)
        /*<<camlinternalFormat.ml:2092:4>>*/  /*<<camlinternalFormat.ml:2092:4>>*/ invalid_format_message
         /*<<camlinternalFormat.ml:2092:4>>*/ (end_ind,
         cst_unexpected_end_of_format);
       /*<<camlinternalFormat.ml:2805:7>>*/ if
       (32
        !==
          /*<<camlinternalFormat.ml:2805:7>>*/ caml_string_get
           /*<<camlinternalFormat.ml:2805:7>>*/ (str, str_ind$0))
        /*<<camlinternalFormat.ml:2805:72>>*/ return str_ind$0 /*<<camlinternalFormat.ml:2805:72>>*/ ;
      var str_ind$1 = str_ind$0 + 1 | 0;
      str_ind$0 = str_ind$1;
     }
     /*<<camlinternalFormat.ml:2805:79>>*/ }
    function parse_positive(str_ind, end_ind, acc){
     var str_ind$0 = str_ind, acc$0 = acc;
      /*<<camlinternalFormat.ml:2810:4>>*/ for(;;){
      if(str_ind$0 === end_ind)
        /*<<camlinternalFormat.ml:2092:4>>*/  /*<<camlinternalFormat.ml:2092:4>>*/ invalid_format_message
         /*<<camlinternalFormat.ml:2092:4>>*/ (end_ind,
         cst_unexpected_end_of_format);
      var
       c =
          /*<<camlinternalFormat.ml:2811:10>>*/  /*<<camlinternalFormat.ml:2811:10>>*/ caml_string_get
           /*<<camlinternalFormat.ml:2811:10>>*/ (str, str_ind$0);
      if(9 < c - 48 >>> 0)
        /*<<camlinternalFormat.ml:2820:11>>*/ return [0, str_ind$0, acc$0] /*<<camlinternalFormat.ml:2820:11>>*/ ;
      var new_acc = (acc$0 * 10 | 0) + (c - 48 | 0) | 0;
      if(Stdlib_Sys[12] < new_acc){
       var _ag_ =  /*<<camlinternalFormat.ml:2815:8>>*/ Stdlib_Sys[12];
        /*<<camlinternalFormat.ml:2815:8>>*/ return  /*<<camlinternalFormat.ml:2815:8>>*/ caml_call3
                /*<<camlinternalFormat.ml:2815:8>>*/ ( /*<<camlinternalFormat.ml:2815:8>>*/ failwith_message
                  /*<<camlinternalFormat.ml:2815:8>>*/ (_S_),
                str,
                new_acc,
                _ag_) /*<<camlinternalFormat.ml:2820:23>>*/ ;
      }
      var str_ind$1 = str_ind$0 + 1 | 0;
      str_ind$0 = str_ind$1;
      acc$0 = new_acc;
     }
     /*<<camlinternalFormat.ml:2820:23>>*/ }
    function parse_integer(str_ind, end_ind){
      /*<<camlinternalFormat.ml:2825:4>>*/ if(str_ind === end_ind)
       /*<<camlinternalFormat.ml:2092:4>>*/  /*<<camlinternalFormat.ml:2092:4>>*/ invalid_format_message
        /*<<camlinternalFormat.ml:2092:4>>*/ (end_ind,
        cst_unexpected_end_of_format);
     var
      match =
         /*<<camlinternalFormat.ml:2826:10>>*/  /*<<camlinternalFormat.ml:2826:10>>*/ caml_string_get
          /*<<camlinternalFormat.ml:2826:10>>*/ (str, str_ind);
     if(48 <= match){
      if(58 > match)
        /*<<camlinternalFormat.ml:2827:20>>*/ return  /*<<camlinternalFormat.ml:2827:20>>*/ parse_positive
                /*<<camlinternalFormat.ml:2827:20>>*/ (str_ind, end_ind, 0) /*<<camlinternalFormat.ml:2837:23>>*/ ;
     }
     else if(45 === match){
      if((str_ind + 1 | 0) === end_ind)
        /*<<camlinternalFormat.ml:2092:4>>*/  /*<<camlinternalFormat.ml:2092:4>>*/ invalid_format_message
         /*<<camlinternalFormat.ml:2092:4>>*/ (end_ind,
         cst_unexpected_end_of_format);
      var
       c =
          /*<<camlinternalFormat.ml:2830:12>>*/  /*<<camlinternalFormat.ml:2830:12>>*/ caml_string_get
           /*<<camlinternalFormat.ml:2830:12>>*/ (str, str_ind + 1 | 0);
      if(9 < c - 48 >>> 0)
        /*<<camlinternalFormat.ml:2835:8>>*/ return  /*<<camlinternalFormat.ml:2835:8>>*/ expected_character
                /*<<camlinternalFormat.ml:2835:8>>*/ (str_ind + 1 | 0,
                cst_digit,
                c) /*<<camlinternalFormat.ml:2837:23>>*/ ;
      var
       match$0 =
          /*<<camlinternalFormat.ml:2832:26>>*/  /*<<camlinternalFormat.ml:2832:26>>*/ parse_positive
           /*<<camlinternalFormat.ml:2832:26>>*/ (str_ind + 1 | 0, end_ind, 0),
       n = match$0[2],
       next_ind = match$0[1];
       /*<<camlinternalFormat.ml:2833:8>>*/ return [0, next_ind, - n | 0] /*<<camlinternalFormat.ml:2833:8>>*/ ;
     }
      /*<<camlinternalFormat.ml:2837:11>>*/ throw  /*<<camlinternalFormat.ml:2837:11>>*/ caml_maybe_attach_backtrace
             /*<<camlinternalFormat.ml:2837:11>>*/ ([0, Assert_failure, _T_],
             1);
     /*<<camlinternalFormat.ml:2837:23>>*/ }
    function add_literal(lit_start, str_ind, fmt){
     var size = str_ind - lit_start | 0;
     return 0 === size
             ? [0, fmt]
             : 1
               === size
               ? [0,
                 [12,
                   /*<<camlinternalFormat.ml:2845:37>>*/ caml_string_get
                    /*<<camlinternalFormat.ml:2845:37>>*/ (str, lit_start),
                  fmt]]
               : [0,
                 [11,
                   /*<<camlinternalFormat.ml:2846:39>>*/ caml_call3
                    /*<<camlinternalFormat.ml:2846:39>>*/ (Stdlib_String[16],
                    str,
                    lit_start,
                    size),
                  fmt]] /*<<camlinternalFormat.ml:2846:75>>*/ ;
     /*<<camlinternalFormat.ml:2846:75>>*/ }
    function search_subformat_end(str_ind, end_ind, c){
     var str_ind$0 = str_ind;
      /*<<camlinternalFormat.ml:2851:4>>*/ for(;;){
      if(str_ind$0 === end_ind)
        /*<<camlinternalFormat.ml:2852:6>>*/  /*<<camlinternalFormat.ml:2852:6>>*/ caml_call3
         /*<<camlinternalFormat.ml:2852:6>>*/ ( /*<<camlinternalFormat.ml:2852:6>>*/ failwith_message
           /*<<camlinternalFormat.ml:2852:6>>*/ (_U_),
         str,
         c,
         end_ind);
      if
       (37
        ===
          /*<<camlinternalFormat.ml:2855:10>>*/ caml_string_get
           /*<<camlinternalFormat.ml:2855:10>>*/ (str, str_ind$0)){
       if((str_ind$0 + 1 | 0) === end_ind)
         /*<<camlinternalFormat.ml:2092:4>>*/  /*<<camlinternalFormat.ml:2092:4>>*/ invalid_format_message
          /*<<camlinternalFormat.ml:2092:4>>*/ (end_ind,
          cst_unexpected_end_of_format);
       if
        ( /*<<camlinternalFormat.ml:2858:9>>*/ caml_string_get
           /*<<camlinternalFormat.ml:2858:9>>*/ (str, str_ind$0 + 1 | 0)
         === c)
         /*<<camlinternalFormat.ml:2858:62>>*/ return str_ind$0 /*<<camlinternalFormat.ml:2858:62>>*/ ;
       var
        match =
           /*<<camlinternalFormat.ml:2859:20>>*/  /*<<camlinternalFormat.ml:2859:20>>*/ caml_string_get
            /*<<camlinternalFormat.ml:2859:20>>*/ (str, str_ind$0 + 1 | 0);
       if(95 <= match){
        if(123 <= match){
         if(126 > match)
          switch(match - 123 | 0){
            case 0:
             var
              sub_end =
                 /*<<camlinternalFormat.ml:2874:24>>*/  /*<<camlinternalFormat.ml:2874:24>>*/ search_subformat_end
                  /*<<camlinternalFormat.ml:2874:24>>*/ (str_ind$0 + 2 | 0,
                  end_ind,
                  125),
              str_ind$2 =
                 /*<<camlinternalFormat.ml:2874:24>>*/ sub_end + 2 | 0;
             str_ind$0 = str_ind$2;
             continue;
            case 1: break;
            default:
              /*<<camlinternalFormat.ml:2882:10>>*/ return  /*<<camlinternalFormat.ml:2882:10>>*/ expected_character
                      /*<<camlinternalFormat.ml:2882:10>>*/ (str_ind$0 + 1 | 0,
                      cst_character,
                      125) /*<<camlinternalFormat.ml:2889:55>>*/ ;
          }
        }
        else if(96 > match){
         if((str_ind$0 + 2 | 0) === end_ind)
           /*<<camlinternalFormat.ml:2092:4>>*/  /*<<camlinternalFormat.ml:2092:4>>*/ invalid_format_message
            /*<<camlinternalFormat.ml:2092:4>>*/ (end_ind,
            cst_unexpected_end_of_format);
         var
          match$0 =
             /*<<camlinternalFormat.ml:2863:22>>*/  /*<<camlinternalFormat.ml:2863:22>>*/ caml_string_get
              /*<<camlinternalFormat.ml:2863:22>>*/ (str, str_ind$0 + 2 | 0);
         if(40 === match$0){
          var
           sub_end$0 =
              /*<<camlinternalFormat.ml:2868:26>>*/  /*<<camlinternalFormat.ml:2868:26>>*/ search_subformat_end
               /*<<camlinternalFormat.ml:2868:26>>*/ (str_ind$0 + 3 | 0,
               end_ind,
               41),
           str_ind$3 =
              /*<<camlinternalFormat.ml:2868:26>>*/ sub_end$0 + 2 | 0;
          str_ind$0 = str_ind$3;
          continue;
         }
         if(123 === match$0){
          var
           sub_end$1 =
              /*<<camlinternalFormat.ml:2865:26>>*/  /*<<camlinternalFormat.ml:2865:26>>*/ search_subformat_end
               /*<<camlinternalFormat.ml:2865:26>>*/ (str_ind$0 + 3 | 0,
               end_ind,
               125),
           str_ind$4 =
              /*<<camlinternalFormat.ml:2865:26>>*/ sub_end$1 + 2 | 0;
          str_ind$0 = str_ind$4;
          continue;
         }
         var str_ind$5 = str_ind$0 + 3 | 0;
         str_ind$0 = str_ind$5;
         continue;
        }
       }
       else{
        if(40 === match){
         var
          sub_end$2 =
             /*<<camlinternalFormat.ml:2878:24>>*/  /*<<camlinternalFormat.ml:2878:24>>*/ search_subformat_end
              /*<<camlinternalFormat.ml:2878:24>>*/ (str_ind$0 + 2 | 0,
              end_ind,
              41),
          str_ind$6 =  /*<<camlinternalFormat.ml:2878:24>>*/ sub_end$2 + 2 | 0;
         str_ind$0 = str_ind$6;
         continue;
        }
        if(41 === match)
          /*<<camlinternalFormat.ml:2885:10>>*/ return  /*<<camlinternalFormat.ml:2885:10>>*/ expected_character
                  /*<<camlinternalFormat.ml:2885:10>>*/ (str_ind$0 + 1 | 0,
                  cst_character$0,
                  41) /*<<camlinternalFormat.ml:2889:55>>*/ ;
       }
       var str_ind$1 = str_ind$0 + 2 | 0;
       str_ind$0 = str_ind$1;
      }
      else{var str_ind$7 = str_ind$0 + 1 | 0; str_ind$0 = str_ind$7;}
     }
     /*<<camlinternalFormat.ml:2889:55>>*/ }
    function compute_int_conv(pct_ind, str_ind, plus, hash, space, symb){
     var plus$0 = plus, hash$0 = hash, space$0 = space;
      /*<<camlinternalFormat.ml:2903:4>>*/ for(;;){
      a:
      {
       if(plus$0){
        if(! hash$0){
         if(space$0) break a;
         if(100 === symb)
           /*<<camlinternalFormat.ml:2906:34>>*/ return 1 /*<<camlinternalFormat.ml:2906:34>>*/ ;
         if(105 === symb)
           /*<<camlinternalFormat.ml:2906:71>>*/ return 4 /*<<camlinternalFormat.ml:2906:71>>*/ ;
         break a;
        }
       }
       else{
        if(! hash$0){
         if(space$0){
          if(100 === symb)
            /*<<camlinternalFormat.ml:2905:34>>*/ return 2 /*<<camlinternalFormat.ml:2905:34>>*/ ;
          if(105 === symb)
            /*<<camlinternalFormat.ml:2905:71>>*/ return 5 /*<<camlinternalFormat.ml:2905:71>>*/ ;
          break a;
         }
         var switcher$1 = symb - 88 | 0;
         if(32 < switcher$1 >>> 0) break a;
         switch(switcher$1){
           case 0:
             /*<<camlinternalFormat.ml:2907:71>>*/ return 8 /*<<camlinternalFormat.ml:2907:71>>*/ ;
           case 12:
             /*<<camlinternalFormat.ml:2904:34>>*/ return 0 /*<<camlinternalFormat.ml:2904:34>>*/ ;
           case 17:
             /*<<camlinternalFormat.ml:2904:71>>*/ return 3 /*<<camlinternalFormat.ml:2904:71>>*/ ;
           case 23:
             /*<<camlinternalFormat.ml:2909:34>>*/ return 10 /*<<camlinternalFormat.ml:2909:34>>*/ ;
           case 29:
             /*<<camlinternalFormat.ml:2911:34>>*/ return 12 /*<<camlinternalFormat.ml:2911:34>>*/ ;
           case 32:
             /*<<camlinternalFormat.ml:2907:34>>*/ return 6 /*<<camlinternalFormat.ml:2907:34>>*/ ;
           default: break a;
         }
        }
        if(! space$0){
         var switcher$0 = symb - 88 | 0;
         if(32 >= switcher$0 >>> 0)
          switch(switcher$0){
            case 0:
              /*<<camlinternalFormat.ml:2908:71>>*/ return 9 /*<<camlinternalFormat.ml:2908:71>>*/ ;
            case 12:
              /*<<camlinternalFormat.ml:2912:34>>*/ return 13 /*<<camlinternalFormat.ml:2912:34>>*/ ;
            case 17:
              /*<<camlinternalFormat.ml:2913:34>>*/ return 14 /*<<camlinternalFormat.ml:2913:34>>*/ ;
            case 23:
              /*<<camlinternalFormat.ml:2910:34>>*/ return 11 /*<<camlinternalFormat.ml:2910:34>>*/ ;
            case 29:
              /*<<camlinternalFormat.ml:2914:34>>*/ return 15 /*<<camlinternalFormat.ml:2914:34>>*/ ;
            case 32:
              /*<<camlinternalFormat.ml:2908:34>>*/ return 7 /*<<camlinternalFormat.ml:2908:34>>*/ ;
          }
        }
       }
       var switcher = symb - 88 | 0;
       if(32 >= switcher >>> 0)
        switch(switcher){
          case 0:
           if(legacy_behavior$0)
             /*<<camlinternalFormat.ml:2916:46>>*/ return 9 /*<<camlinternalFormat.ml:2916:46>>*/ ;
           break;
          case 23:
           if(legacy_behavior$0)
             /*<<camlinternalFormat.ml:2917:46>>*/ return 11 /*<<camlinternalFormat.ml:2917:46>>*/ ;
           break;
          case 32:
           if(legacy_behavior$0)
             /*<<camlinternalFormat.ml:2915:46>>*/ return 7 /*<<camlinternalFormat.ml:2915:46>>*/ ;
           break;
          case 12:
          case 17:
          case 29:
           if(! legacy_behavior$0)
             /*<<camlinternalFormat.ml:2921:11>>*/ return  /*<<camlinternalFormat.ml:2921:11>>*/ incompatible_flag
                     /*<<camlinternalFormat.ml:2921:11>>*/ (pct_ind,
                     str_ind,
                     symb,
                     cst$35) /*<<camlinternalFormat.ml:2935:40>>*/ ;
           hash$0 = 0;
           continue;
        }
      }
      if(plus$0)
       if(space$0){
        if(! legacy_behavior$0)
          /*<<camlinternalFormat.ml:2926:11>>*/ return  /*<<camlinternalFormat.ml:2926:11>>*/ incompatible_flag
                  /*<<camlinternalFormat.ml:2926:11>>*/ (pct_ind,
                  str_ind,
                  32,
                  cst$32) /*<<camlinternalFormat.ml:2935:40>>*/ ;
        space$0 = 0;
       }
       else{
        if(! legacy_behavior$0)
          /*<<camlinternalFormat.ml:2934:11>>*/ return  /*<<camlinternalFormat.ml:2934:11>>*/ incompatible_flag
                  /*<<camlinternalFormat.ml:2934:11>>*/ (pct_ind,
                  str_ind,
                  symb,
                  cst$33) /*<<camlinternalFormat.ml:2935:40>>*/ ;
        plus$0 = 0;
       }
      else{
       if(! space$0)
         /*<<camlinternalFormat.ml:2935:28>>*/ throw  /*<<camlinternalFormat.ml:2935:28>>*/ caml_maybe_attach_backtrace
                /*<<camlinternalFormat.ml:2935:28>>*/ ([0,
                 Assert_failure,
                 _W_],
                1);
       if(! legacy_behavior$0)
         /*<<camlinternalFormat.ml:2930:11>>*/ return  /*<<camlinternalFormat.ml:2930:11>>*/ incompatible_flag
                 /*<<camlinternalFormat.ml:2930:11>>*/ (pct_ind,
                 str_ind,
                 symb,
                 cst$34) /*<<camlinternalFormat.ml:2935:40>>*/ ;
       space$0 = 0;
      }
     }
     /*<<camlinternalFormat.ml:2935:40>>*/ }
    function incompatible_flag(pct_ind, str_ind, symb, option){
     var
      subfmt =
         /*<<camlinternalFormat.ml:2963:19>>*/  /*<<camlinternalFormat.ml:2963:19>>*/ caml_call3
          /*<<camlinternalFormat.ml:2963:19>>*/ (Stdlib_String[16],
          str,
          pct_ind,
          str_ind - pct_ind | 0);
      /*<<camlinternalFormat.ml:2964:6>>*/ return  /*<<camlinternalFormat.ml:2964:6>>*/ caml_call5
              /*<<camlinternalFormat.ml:2964:6>>*/ ( /*<<camlinternalFormat.ml:2964:6>>*/ failwith_message
                /*<<camlinternalFormat.ml:2964:6>>*/ (_Y_),
              str,
              pct_ind,
              option,
              symb,
              subfmt) /*<<camlinternalFormat.ml:2967:38>>*/ ;
     /*<<camlinternalFormat.ml:2967:38>>*/ }
    return parse(0, caml_ml_string_length(str));
   }
   function format_of_string_fmtty(str, fmtty){
    var
     fmt =
        /*<<camlinternalFormat.ml:2977:20>>*/ fmt_ebb_of_string
          /*<<camlinternalFormat.ml:2977:20>>*/ (0, str)
        [1];
     /*<<camlinternalFormat.ml:2978:2>>*/ try{
     var
      _ae_ =
         /*<<camlinternalFormat.ml:2978:6>>*/ [0,
          /*<<camlinternalFormat.ml:2978:14>>*/ type_format
           /*<<camlinternalFormat.ml:2978:14>>*/ (fmt, fmtty),
         str];
      /*<<camlinternalFormat.ml:2978:6>>*/ return _ae_ /*<<camlinternalFormat.ml:2978:6>>*/ ;
    }
    catch(_af_){
     var _ac_ = caml_wrap_exception(_af_);
     if(_ac_ !== Type_mismatch) throw caml_maybe_attach_backtrace(_ac_, 0);
     var
      _ad_ =
         /*<<camlinternalFormat.ml:2982:10>>*/  /*<<camlinternalFormat.ml:2982:10>>*/ string_of_fmtty
          /*<<camlinternalFormat.ml:2982:10>>*/ (fmtty);
      /*<<camlinternalFormat.ml:2982:10>>*/ return  /*<<camlinternalFormat.ml:2982:10>>*/ caml_call2
              /*<<camlinternalFormat.ml:2982:10>>*/ ( /*<<camlinternalFormat.ml:2982:10>>*/ failwith_message
                /*<<camlinternalFormat.ml:2982:10>>*/ (_Z_),
              str,
              _ad_) /*<<camlinternalFormat.ml:2982:33>>*/ ;
    }
    /*<<camlinternalFormat.ml:2982:33>>*/ }
   function format_of_string_format(str, param){
    var
     str$0 = param[2],
     fmt = param[1],
     fmt$0 =
        /*<<camlinternalFormat.ml:2987:20>>*/ fmt_ebb_of_string
          /*<<camlinternalFormat.ml:2987:20>>*/ (0, str)
        [1];
     /*<<camlinternalFormat.ml:2988:2>>*/ try{
     var
      _aa_ =
         /*<<camlinternalFormat.ml:2988:6>>*/ [0,
          /*<<camlinternalFormat.ml:2988:14>>*/ type_format
           /*<<camlinternalFormat.ml:2988:14>>*/ (fmt$0,
            /*<<camlinternalFormat.ml:2988:30>>*/ fmtty_of_fmt
             /*<<camlinternalFormat.ml:2988:30>>*/ (fmt)),
         str];
      /*<<camlinternalFormat.ml:2988:6>>*/ return _aa_ /*<<camlinternalFormat.ml:2988:6>>*/ ;
    }
    catch(_ab_){
     var _$_ = caml_wrap_exception(_ab_);
     if(_$_ === Type_mismatch)
       /*<<camlinternalFormat.ml:2990:4>>*/ return  /*<<camlinternalFormat.ml:2990:4>>*/ caml_call2
               /*<<camlinternalFormat.ml:2990:4>>*/ ( /*<<camlinternalFormat.ml:2990:4>>*/ failwith_message
                 /*<<camlinternalFormat.ml:2990:4>>*/ (___),
               str,
               str$0) /*<<camlinternalFormat.ml:2991:66>>*/ ;
     throw caml_maybe_attach_backtrace(_$_, 0);
    }
    /*<<camlinternalFormat.ml:2991:66>>*/ }
   var
    CamlinternalFormat =
      [0,
       is_in_char_set,
       rev_char_set,
       create_char_set,
       add_in_char_set,
       freeze_char_set,
       param_format_of_ignored_format,
       make_printf,
       make_iprintf,
       output_acc,
       bufput_acc,
       strput_acc,
       type_format,
       fmt_ebb_of_string,
       format_of_string_fmtty,
       format_of_string_format,
       char_of_iconv,
       string_of_formatting_lit,
       string_of_fmtty,
       string_of_fmt,
       open_box_of_string,
       symm,
       trans,
       recast];
   runtime.caml_register_global(197, CamlinternalFormat, "CamlinternalFormat");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Printf
//# unitInfo: Requires: CamlinternalFormat, Stdlib, Stdlib__Buffer
(function
  (globalThis){
   "use strict";
   var runtime =  /*<<?>>*/ globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    CamlinternalFormat = global_data.CamlinternalFormat,
    Stdlib = global_data.Stdlib;
   function kfprintf(k, o, param){
    var fmt = param[1];
     /*<<printf.ml:20:2>>*/ return  /*<<printf.ml:20:2>>*/ caml_call3
             /*<<printf.ml:20:2>>*/ (CamlinternalFormat[7],
             function(acc){
               /*<<printf.ml:20:26>>*/  /*<<printf.ml:20:26>>*/ caml_call2
                /*<<printf.ml:20:26>>*/ (CamlinternalFormat[9], o, acc);
              return caml_call1(k, o) /*<<printf.ml:20:47>>*/ ;
              /*<<printf.ml:20:47>>*/ },
             0,
             fmt) /*<<printf.ml:20:63>>*/ ;
    /*<<printf.ml:20:63>>*/ }
   function kbprintf(k, b, param){
    var fmt = param[1];
     /*<<printf.ml:22:2>>*/ return  /*<<printf.ml:22:2>>*/ caml_call3
             /*<<printf.ml:22:2>>*/ (CamlinternalFormat[7],
             function(acc){
               /*<<printf.ml:22:26>>*/  /*<<printf.ml:22:26>>*/ caml_call2
                /*<<printf.ml:22:26>>*/ (CamlinternalFormat[10], b, acc);
              return caml_call1(k, b) /*<<printf.ml:22:47>>*/ ;
              /*<<printf.ml:22:47>>*/ },
             0,
             fmt) /*<<printf.ml:22:63>>*/ ;
    /*<<printf.ml:22:63>>*/ }
   function ikfprintf(k, oc, param){
    var fmt = param[1];
     /*<<printf.ml:24:2>>*/ return  /*<<printf.ml:24:2>>*/ caml_call3
             /*<<printf.ml:24:2>>*/ (CamlinternalFormat[8], k, oc, fmt) /*<<printf.ml:24:23>>*/ ;
    /*<<printf.ml:24:23>>*/ }
   function fprintf(oc, fmt){
     /*<<printf.ml:27:21>>*/ return  /*<<printf.ml:27:21>>*/ kfprintf
             /*<<printf.ml:27:21>>*/ (function(_d_){ /*<<?>>*/ return 0;},
             oc,
             fmt) /*<<printf.ml:27:43>>*/ ;
    /*<<printf.ml:27:43>>*/ }
   function bprintf(b, fmt){
     /*<<printf.ml:28:20>>*/ return  /*<<printf.ml:28:20>>*/ kbprintf
             /*<<printf.ml:28:20>>*/ (function(_c_){ /*<<?>>*/ return 0;},
             b,
             fmt) /*<<printf.ml:28:41>>*/ ;
    /*<<printf.ml:28:41>>*/ }
   function ifprintf(oc, fmt){
     /*<<printf.ml:29:22>>*/ return  /*<<printf.ml:29:22>>*/ ikfprintf
             /*<<printf.ml:29:22>>*/ (function(_b_){ /*<<?>>*/ return 0;},
             oc,
             fmt) /*<<printf.ml:29:45>>*/ ;
    /*<<printf.ml:29:45>>*/ }
   function ibprintf(b, fmt){
     /*<<printf.ml:30:21>>*/ return  /*<<printf.ml:30:21>>*/ ikfprintf
             /*<<printf.ml:30:21>>*/ (function(_a_){ /*<<?>>*/ return 0;},
             b,
             fmt) /*<<printf.ml:30:43>>*/ ;
    /*<<printf.ml:30:43>>*/ }
   function printf(fmt){
     /*<<printf.ml:31:17>>*/ return  /*<<printf.ml:31:17>>*/ fprintf
             /*<<printf.ml:31:17>>*/ (Stdlib[39], fmt) /*<<printf.ml:31:35>>*/ ;
    /*<<printf.ml:31:35>>*/ }
   function eprintf(fmt){
     /*<<printf.ml:32:18>>*/ return  /*<<printf.ml:32:18>>*/ fprintf
             /*<<printf.ml:32:18>>*/ (Stdlib[40], fmt) /*<<printf.ml:32:36>>*/ ;
    /*<<printf.ml:32:36>>*/ }
   function ksprintf(k, param){
    var fmt = param[1];
    function k$0(acc){
     var
      buf =
         /*<<printf.ml:36:14>>*/  /*<<printf.ml:36:14>>*/ caml_call1
          /*<<printf.ml:36:14>>*/ (Stdlib_Buffer[1], 64);
      /*<<printf.ml:37:4>>*/  /*<<printf.ml:37:4>>*/ caml_call2
       /*<<printf.ml:37:4>>*/ (CamlinternalFormat[11], buf, acc);
      /*<<printf.ml:38:6>>*/ return  /*<<printf.ml:38:6>>*/ caml_call1
              /*<<printf.ml:38:6>>*/ (k,
               /*<<printf.ml:38:6>>*/ caml_call1
                /*<<printf.ml:38:6>>*/ (Stdlib_Buffer[2], buf)) /*<<printf.ml:38:27>>*/ ;
     /*<<printf.ml:38:27>>*/ }
     /*<<printf.ml:39:2>>*/ return  /*<<printf.ml:39:2>>*/ caml_call3
             /*<<printf.ml:39:2>>*/ (CamlinternalFormat[7], k$0, 0, fmt) /*<<printf.ml:39:31>>*/ ;
    /*<<printf.ml:39:31>>*/ }
   function sprintf(fmt){
     /*<<printf.ml:41:18>>*/ return  /*<<printf.ml:41:18>>*/ ksprintf
             /*<<printf.ml:41:18>>*/ (function(s){
               /*<<printf.ml:41:37>>*/ return s /*<<printf.ml:41:37>>*/ ;
              /*<<printf.ml:41:38>>*/ },
             fmt) /*<<printf.ml:41:43>>*/ ;
    /*<<printf.ml:41:43>>*/ }
   var
    Stdlib_Printf =
      [0,
       fprintf,
       printf,
       eprintf,
       sprintf,
       bprintf,
       ifprintf,
       ibprintf,
       kfprintf,
       ikfprintf,
       ksprintf,
       kbprintf,
       ikfprintf,
       ksprintf];
   runtime.caml_register_global(3, Stdlib_Printf, "Stdlib__Printf");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Dynarray
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__List, Stdlib__Printf, Stdlib__Seq, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst_requested =  /*<<?>>*/ " requested",
    cst_index =  /*<<?>>*/ ": index ",
    cst_Dynarray =  /*<<?>>*/ "Dynarray.",
    cst_append$1 =  /*<<?>>*/ "append",
    cst_dynarray_ml =  /*<<?>>*/ "dynarray.ml",
    cst_ensure_capacity$0 =  /*<<?>>*/ "ensure_capacity",
    caml_check_bound =  /*<<?>>*/ runtime.caml_check_bound,
    caml_make_vect =  /*<<?>>*/ runtime.caml_make_vect,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    f$0 = cst_ensure_capacity$0,
    f = "get_last",
    invalid_state_description =
      "Invalid dynarray (unsynchronized concurrent length change)",
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Printf = global_data.Stdlib__Printf,
    _a_ =
      [0,
       [11,
        cst_Dynarray,
        [2,
         0,
         [11,
          cst_index,
          [4, 0, 0, 0, [11, " out of bounds (empty dynarray)", 0]]]]],
       "Dynarray.%s: index %d out of bounds (empty dynarray)"],
    _b_ =
      [0,
       [11,
        cst_Dynarray,
        [2,
         0,
         [11,
          cst_index,
          [4, 0, 0, 0, [11, " out of bounds (0..", [4, 0, 0, 0, [12, 41, 0]]]]]]],
       "Dynarray.%s: index %d out of bounds (0..%d)"],
    _c_ =
      [0,
       [11,
        cst_Dynarray,
        [2,
         0,
         [11, ": negative length ", [4, 0, 0, 0, [11, cst_requested, 0]]]]],
       "Dynarray.%s: negative length %d requested"],
    _d_ =
      [0,
       [11,
        cst_Dynarray,
        [2,
         0,
         [11, ": negative capacity ", [4, 0, 0, 0, [11, cst_requested, 0]]]]],
       "Dynarray.%s: negative capacity %d requested"],
    _e_ =
      [0,
       [11,
        cst_Dynarray,
        [2,
         0,
         [11,
          ": cannot grow to requested length ",
          [4,
           0,
           0,
           0,
           [11, " (max_array_length is ", [4, 0, 0, 0, [12, 41, 0]]]]]]],
       "Dynarray.%s: cannot grow to requested length %d (max_array_length is %d)"],
    _f_ =
      [0,
       [2,
        0,
        [11,
         ": missing element at position ",
         [4, 0, 0, 0, [11, " < length ", [4, 0, 0, 0, 0]]]]],
       "%s: missing element at position %d < length %d"],
    _g_ =
      [0,
       [2,
        0,
        [11, ": length ", [4, 0, 0, 0, [11, " > capacity ", [4, 0, 0, 0, 0]]]]],
       "%s: length %d > capacity %d"],
    _h_ =
      [0,
       [11,
        cst_Dynarray,
        [2,
         0,
         [11,
          ": a length change from ",
          [4,
           0,
           0,
           0,
           [11, " to ", [4, 0, 0, 0, [11, " occurred during iteration", 0]]]]]]],
       "Dynarray.%s: a length change from %d to %d occurred during iteration"],
    _i_ =
      [0,
       [11, cst_Dynarray, [2, 0, [11, ": empty array", 0]]],
       "Dynarray.%s: empty array"],
    cst_make = "make",
    cst_init = "init",
    cst_get = "get",
    cst_set = "set",
    cst_truncate = "truncate",
    _j_ = [0, cst_dynarray_ml, 381, 4],
    _k_ = [0, cst_dynarray_ml, 380, 4],
    cst_ensure_capacity = cst_ensure_capacity$0,
    cst_set_capacity = "set_capacity",
    cst_append = cst_append$1,
    cst_append$0 = cst_append$1,
    cst_iter = "iter",
    cst_iteri = "iteri",
    cst_map = "map",
    cst_mapi = "mapi",
    cst_fold_left = "fold_left",
    cst_fold_right = "fold_right",
    cst_exists = "exists",
    cst_for_all = "for_all",
    cst_filter = "filter",
    cst_filter_map = "filter_map",
    cst_to_array = "to_array",
    cst_to_list = "to_list",
    cst_to_seq = "to_seq",
    cst_to_seq_rev = "to_seq_rev";
   function negative_length_requested(f, n){
     /*<<dynarray.ml:128:4>>*/ return  /*<<dynarray.ml:128:4>>*/ caml_call4
             /*<<dynarray.ml:128:4>>*/ (Stdlib_Printf[10],
             Stdlib[1],
             _c_,
             f,
             n) /*<<dynarray.ml:130:9>>*/ ;
    /*<<dynarray.ml:130:9>>*/ }
   function negative_capacity_requested(f, n){
     /*<<dynarray.ml:133:4>>*/ return  /*<<dynarray.ml:133:4>>*/ caml_call4
             /*<<dynarray.ml:133:4>>*/ (Stdlib_Printf[10],
             Stdlib[1],
             _d_,
             f,
             n) /*<<dynarray.ml:135:9>>*/ ;
    /*<<dynarray.ml:135:9>>*/ }
   function missing_element(i, length){
     /*<<dynarray.ml:152:4>>*/ return  /*<<dynarray.ml:152:4>>*/ caml_call5
             /*<<dynarray.ml:152:4>>*/ (Stdlib_Printf[10],
             Stdlib[1],
             _f_,
             invalid_state_description,
             i,
             length) /*<<dynarray.ml:155:14>>*/ ;
    /*<<dynarray.ml:155:14>>*/ }
   function unexpected_empty_element(f, i, length){
     /*<<dynarray.ml:172:4>>*/ return i < length
            ?  /*<<dynarray.ml:173:6>>*/ missing_element
               /*<<dynarray.ml:173:6>>*/ (i, length)
            : 0
              === length
              ?  /*<<dynarray.ml:119:6>>*/ caml_call4
                 /*<<dynarray.ml:119:6>>*/ (Stdlib_Printf[10],
                 Stdlib[1],
                 _a_,
                 f,
                 i)
              :  /*<<dynarray.ml:123:6>>*/ caml_call5
                 /*<<dynarray.ml:123:6>>*/ (Stdlib_Printf[10],
                 Stdlib[1],
                 _b_,
                 f,
                 i,
                 length - 1 | 0) /*<<dynarray.ml:175:38>>*/ ;
    /*<<dynarray.ml:175:38>>*/ }
   function check_same_length(f, a, expected){
    var length_a = a[1], _W_ = expected !== length_a ? 1 : 0;
    return _W_
            ?  /*<<dynarray.ml:164:4>>*/ caml_call5
               /*<<dynarray.ml:164:4>>*/ (Stdlib_Printf[10],
               Stdlib[1],
               _h_,
               f,
               expected,
               length_a)
            : _W_ /*<<dynarray.ml:190:41>>*/ ;
    /*<<dynarray.ml:190:41>>*/ }
   function check_valid_length(length, arr){
    var capacity = arr.length - 1, _V_ = capacity < length ? 1 : 0;
    return _V_
            ?  /*<<dynarray.ml:158:4>>*/ caml_call5
               /*<<dynarray.ml:158:4>>*/ (Stdlib_Printf[10],
               Stdlib[1],
               _g_,
               invalid_state_description,
               length,
               capacity)
            : _V_ /*<<dynarray.ml:199:42>>*/ ;
    /*<<dynarray.ml:199:42>>*/ }
   function unsafe_get(arr, i, length){
    var match = arr[1 + i];
    if(! match)
      /*<<dynarray.ml:207:13>>*/ return  /*<<dynarray.ml:207:13>>*/ missing_element
              /*<<dynarray.ml:207:13>>*/ (i, length) /*<<dynarray.ml:208:17>>*/ ;
    var v = match[1];
     /*<<dynarray.ml:208:16>>*/ return v /*<<dynarray.ml:208:16>>*/ ;
    /*<<dynarray.ml:208:17>>*/ }
   function create(param){
     /*<<dynarray.ml:213:16>>*/ return [0, 0, [0]] /*<<dynarray.ml:213:16>>*/ ;
    /*<<dynarray.ml:216:1>>*/ }
   function make(n, x){
     /*<<dynarray.ml:219:2>>*/ if(n < 0)
      /*<<dynarray.ml:219:16>>*/  /*<<dynarray.ml:219:16>>*/ negative_length_requested
       /*<<dynarray.ml:219:16>>*/ (cst_make, n);
     /*<<dynarray.ml:220:2>>*/ return [0,
            n,
             /*<<dynarray.ml:222:10>>*/ caml_call2
              /*<<dynarray.ml:222:10>>*/ (Stdlib_Array[1],
              n,
              function(param){
                /*<<dynarray.ml:222:33>>*/ return [0, x] /*<<dynarray.ml:222:38>>*/ ;
               /*<<dynarray.ml:222:45>>*/ })] /*<<dynarray.ml:220:2>>*/ ;
    /*<<dynarray.ml:223:3>>*/ }
   function init(n, f){
     /*<<dynarray.ml:226:2>>*/ if(n < 0)
      /*<<dynarray.ml:226:16>>*/  /*<<dynarray.ml:226:16>>*/ negative_length_requested
       /*<<dynarray.ml:226:16>>*/ (cst_init, n);
     /*<<dynarray.ml:227:2>>*/ return [0,
            n,
             /*<<dynarray.ml:229:10>>*/ caml_call2
              /*<<dynarray.ml:229:10>>*/ (Stdlib_Array[1],
              n,
              function(i){
                /*<<dynarray.ml:229:33>>*/ return [0,
                        /*<<dynarray.ml:229:43>>*/ caml_call1
                         /*<<dynarray.ml:229:43>>*/ (f, i)] /*<<dynarray.ml:229:38>>*/ ;
               /*<<dynarray.ml:229:47>>*/ })] /*<<dynarray.ml:227:2>>*/ ;
    /*<<dynarray.ml:230:3>>*/ }
   function get(a, i){
    var match =  /*<<dynarray.ml:238:8>>*/ caml_check_bound(a[2], i)[1 + i];
    return match ? match[1] : unexpected_empty_element(cst_get, i, a[1]) /*<<dynarray.ml:241:62>>*/ ;
    /*<<dynarray.ml:241:62>>*/ }
   function set(a, i, x){
    var match =  /*<<dynarray.ml:246:8>>*/ caml_check_bound(a[2], i)[1 + i];
    return match
            ? (match[1] = x, 0)
            : unexpected_empty_element(cst_set, i, a[1]) /*<<dynarray.ml:249:62>>*/ ;
    /*<<dynarray.ml:249:62>>*/ }
   function length(a){
     /*<<dynarray.ml:251:15>>*/ return a[1];
    /*<<dynarray.ml:251:23>>*/ }
   function is_empty(a){
     /*<<dynarray.ml:253:17>>*/ return 0 === a[1] ? 1 : 0;
    /*<<dynarray.ml:253:31>>*/ }
   function copy(param){
    var length = param[1], arr = param[2];
     /*<<dynarray.ml:256:2>>*/  /*<<dynarray.ml:256:2>>*/ check_valid_length
      /*<<dynarray.ml:256:2>>*/ (length, arr);
     /*<<dynarray.ml:259:2>>*/ return [0,
            length,
             /*<<dynarray.ml:261:10>>*/ caml_call2
              /*<<dynarray.ml:261:10>>*/ (Stdlib_Array[1],
              length,
              function(i){
               var
                v =
                   /*<<dynarray.ml:262:14>>*/  /*<<dynarray.ml:262:14>>*/ unsafe_get
                    /*<<dynarray.ml:262:14>>*/ (arr, i, length);
                /*<<dynarray.ml:263:11>>*/ return [0, v] /*<<dynarray.ml:263:11>>*/ ;
               /*<<dynarray.ml:263:14>>*/ })] /*<<dynarray.ml:259:2>>*/ ;
    /*<<dynarray.ml:265:3>>*/ }
   function get_last(a){
    var length = a[1], arr = a[2];
     /*<<dynarray.ml:269:2>>*/  /*<<dynarray.ml:269:2>>*/ check_valid_length
      /*<<dynarray.ml:269:2>>*/ (length, arr);
    if(0 === length)
      /*<<dynarray.ml:178:4>>*/  /*<<dynarray.ml:178:4>>*/ caml_call3
       /*<<dynarray.ml:178:4>>*/ (Stdlib_Printf[10], Stdlib[1], _i_, f);
     /*<<dynarray.ml:271:21>>*/ return  /*<<dynarray.ml:271:21>>*/ unsafe_get
             /*<<dynarray.ml:271:21>>*/ (arr, length - 1 | 0, length) /*<<dynarray.ml:273:40>>*/ ;
    /*<<dynarray.ml:273:40>>*/ }
   function find_last(a){
    var length = a[1], arr = a[2];
     /*<<dynarray.ml:277:2>>*/  /*<<dynarray.ml:277:2>>*/ check_valid_length
      /*<<dynarray.ml:277:2>>*/ (length, arr);
    return 0 === length
            ? 0
            : [0,
               /*<<dynarray.ml:282:9>>*/ unsafe_get
                /*<<dynarray.ml:282:9>>*/ (arr, length - 1 | 0, length)] /*<<dynarray.ml:282:49>>*/ ;
    /*<<dynarray.ml:282:49>>*/ }
   function pop_last(a){
    var length = a[1], arr = a[2];
     /*<<dynarray.ml:288:2>>*/  /*<<dynarray.ml:288:2>>*/ check_valid_length
      /*<<dynarray.ml:288:2>>*/ (length, arr);
    if(0 === length)
      /*<<dynarray.ml:290:21>>*/ throw  /*<<dynarray.ml:290:21>>*/ caml_maybe_attach_backtrace
             /*<<dynarray.ml:290:21>>*/ (Stdlib[8], 1);
    var
     last =  /*<<dynarray.ml:291:2>>*/ length - 1 | 0,
     match = arr[1 + last];
    return match
            ? (arr[1 + last] = 0, a[1] = last, match[1])
            :  /*<<dynarray.ml:295:6>>*/ missing_element
               /*<<dynarray.ml:295:6>>*/ (last, length) /*<<dynarray.ml:299:9>>*/ ;
    /*<<dynarray.ml:299:9>>*/ }
   function pop_last_opt(a){
     /*<<dynarray.ml:302:2>>*/ try{
     var
      x =
         /*<<dynarray.ml:302:8>>*/  /*<<dynarray.ml:302:8>>*/ pop_last
          /*<<dynarray.ml:302:8>>*/ (a);
    }
    catch(_U_){
     var _T_ = caml_wrap_exception(_U_);
     if(_T_ === Stdlib[8])
       /*<<dynarray.ml:303:27>>*/ return 0 /*<<dynarray.ml:303:27>>*/ ;
     throw caml_maybe_attach_backtrace(_T_, 0);
    }
     /*<<dynarray.ml:304:9>>*/ return [0, x] /*<<dynarray.ml:304:9>>*/ ;
    /*<<dynarray.ml:304:15>>*/ }
   function remove_last(a){
    var
     last =  /*<<dynarray.ml:307:13>>*/ a[1] - 1 | 0,
     _R_ = 0 <= last ? 1 : 0,
     _S_ =
       _R_
        ? (a[1] = last, caml_check_bound(a[2], last)[1 + last] = 0, 0)
        : _R_;
     /*<<dynarray.ml:310:4>>*/ return _S_ /*<<dynarray.ml:310:4>>*/ ;
    /*<<dynarray.ml:311:5>>*/ }
   function truncate(a, n){
     /*<<dynarray.ml:314:2>>*/ if(n < 0)
      /*<<dynarray.ml:314:16>>*/  /*<<dynarray.ml:314:16>>*/ negative_length_requested
       /*<<dynarray.ml:314:16>>*/ (cst_truncate, n);
    var length = a[1], arr = a[2];
    return length <= n
            ? 0
            : (a
               [1]
              = n,
               /*<<dynarray.ml:319:4>>*/ caml_call4
                /*<<dynarray.ml:319:4>>*/ (Stdlib_Array[8],
                arr,
                n,
                length - n | 0,
                0)) /*<<dynarray.ml:320:5>>*/ ;
    /*<<dynarray.ml:320:5>>*/ }
   function clear(a){
     /*<<dynarray.ml:322:14>>*/ return  /*<<dynarray.ml:322:14>>*/ truncate
             /*<<dynarray.ml:322:14>>*/ (a, 0) /*<<dynarray.ml:322:26>>*/ ;
    /*<<dynarray.ml:322:26>>*/ }
   function capacity(a){
     /*<<dynarray.ml:327:17>>*/ return a[2].length - 1;
    /*<<dynarray.ml:327:35>>*/ }
   function ensure_capacity(a, capacity_request){
    var arr = a[2], cur_capacity =  /*<<dynarray.ml:349:2>>*/ arr.length - 1;
     /*<<dynarray.ml:350:2>>*/ if(0 > capacity_request)
      /*<<dynarray.ml:351:4>>*/ return  /*<<dynarray.ml:351:4>>*/ negative_capacity_requested
              /*<<dynarray.ml:351:4>>*/ (cst_ensure_capacity,
              capacity_request) /*<<dynarray.ml:382:5>>*/ ;
    if(capacity_request <= cur_capacity)
      /*<<dynarray.ml:356:4>>*/ return 0 /*<<dynarray.ml:356:4>>*/ ;
    if(Stdlib_Sys[13] < capacity_request)
      /*<<dynarray.ml:138:4>>*/  /*<<dynarray.ml:138:4>>*/ caml_call5
       /*<<dynarray.ml:138:4>>*/ (Stdlib_Printf[10],
       Stdlib[1],
       _e_,
       f$0,
       capacity_request,
       Stdlib_Sys[13]);
    var
     n =
       512 < cur_capacity
        ? cur_capacity + (cur_capacity / 2 | 0) | 0
        : cur_capacity * 2 | 0,
     _O_ = Stdlib_Sys[13],
     _P_ =
        /*<<dynarray.ml:345:6>>*/  /*<<dynarray.ml:345:6>>*/ caml_call2
         /*<<dynarray.ml:345:6>>*/ (Stdlib[17], 8, n),
     _Q_ =
        /*<<dynarray.ml:345:2>>*/  /*<<dynarray.ml:345:2>>*/ caml_call2
         /*<<dynarray.ml:345:2>>*/ (Stdlib[16], _P_, _O_),
     new_capacity =
        /*<<dynarray.ml:375:6>>*/  /*<<dynarray.ml:375:6>>*/ caml_call2
         /*<<dynarray.ml:375:6>>*/ (Stdlib[17], _Q_, capacity_request),
     new_arr =
        /*<<dynarray.ml:376:18>>*/  /*<<dynarray.ml:376:18>>*/ caml_make_vect
         /*<<dynarray.ml:376:18>>*/ (new_capacity, 0);
     /*<<dynarray.ml:377:4>>*/  /*<<dynarray.ml:377:4>>*/ caml_call5
      /*<<dynarray.ml:377:4>>*/ (Stdlib_Array[9], arr, 0, new_arr, 0, a[1]);
    a[2] = new_arr;
    if(0 > capacity_request)
      /*<<dynarray.ml:380:4>>*/ throw  /*<<dynarray.ml:380:4>>*/ caml_maybe_attach_backtrace
             /*<<dynarray.ml:380:4>>*/ ([0, Assert_failure, _k_], 1);
    if(capacity_request <= new_arr.length - 1) return 0;
     /*<<dynarray.ml:381:4>>*/ throw  /*<<dynarray.ml:381:4>>*/ caml_maybe_attach_backtrace
            /*<<dynarray.ml:381:4>>*/ ([0, Assert_failure, _j_], 1);
    /*<<dynarray.ml:382:5>>*/ }
   function ensure_extra_capacity(a, extra_capacity_request){
     /*<<dynarray.ml:385:2>>*/ return  /*<<dynarray.ml:385:21>>*/ ensure_capacity
             /*<<dynarray.ml:385:21>>*/ (a, a[1] + extra_capacity_request | 0) /*<<dynarray.ml:385:55>>*/ ;
    /*<<dynarray.ml:385:55>>*/ }
   function fit_capacity(a){
    var _N_ = a[1];
    return  /*<<dynarray.ml:388:5>>*/ capacity /*<<dynarray.ml:388:5>>*/ (a)
            === _N_
            ? 0
            : (a
               [2]
              =
                /*<<dynarray.ml:390:16>>*/ caml_call3
                 /*<<dynarray.ml:390:16>>*/ (Stdlib_Array[6], a[2], 0, a[1]),
              0) /*<<dynarray.ml:390:42>>*/ ;
    /*<<dynarray.ml:390:42>>*/ }
   function set_capacity(a, n){
     /*<<dynarray.ml:393:2>>*/ if(n < 0)
      /*<<dynarray.ml:394:4>>*/  /*<<dynarray.ml:394:4>>*/ negative_capacity_requested
       /*<<dynarray.ml:394:4>>*/ (cst_set_capacity, n);
    var arr = a[2], cur_capacity =  /*<<dynarray.ml:396:2>>*/ arr.length - 1;
    if(n < cur_capacity){
     a[1] =
       /*<<dynarray.ml:398:16>>*/ caml_call2
        /*<<dynarray.ml:398:16>>*/ (Stdlib[16], a[1], n);
     a[2] =
       /*<<dynarray.ml:399:13>>*/ caml_call3
        /*<<dynarray.ml:399:13>>*/ (Stdlib_Array[6], arr, 0, n);
     return 0;
    }
    var _L_ = cur_capacity < n ? 1 : 0;
    if(_L_){
     var
      new_arr =
         /*<<dynarray.ml:402:18>>*/  /*<<dynarray.ml:402:18>>*/ caml_make_vect
          /*<<dynarray.ml:402:18>>*/ (n, 0);
      /*<<dynarray.ml:403:4>>*/  /*<<dynarray.ml:403:4>>*/ caml_call5
       /*<<dynarray.ml:403:4>>*/ (Stdlib_Array[9], arr, 0, new_arr, 0, a[1]);
     a[2] = new_arr;
     var _M_ = 0;
    }
    else
     var _M_ = _L_;
    return _M_;
    /*<<dynarray.ml:405:5>>*/ }
   function reset(a){
     /*<<dynarray.ml:408:2>>*/ a[1] = 0;
    a[2] = [0];
    return 0;
    /*<<dynarray.ml:409:15>>*/ }
   function add_last_if_room(a, elem){
    var length = a[1], arr = a[2];
    return arr.length - 1 <= length
            ? 0
            : (a[1] = length + 1 | 0, arr[1 + length] = elem, 1) /*<<dynarray.ml:435:5>>*/ ;
    /*<<dynarray.ml:435:5>>*/ }
   function add_last(a, x){
    var elem =  /*<<dynarray.ml:438:18>>*/ [0, x];
     /*<<dynarray.ml:439:5>>*/ if
     ( /*<<dynarray.ml:439:5>>*/ add_last_if_room
        /*<<dynarray.ml:439:5>>*/ (a, elem))
      /*<<dynarray.ml:439:34>>*/ return 0 /*<<dynarray.ml:439:34>>*/ ;
     /*<<dynarray.ml:443:6>>*/ for(;;){
      /*<<dynarray.ml:443:6>>*/  /*<<dynarray.ml:443:6>>*/ ensure_extra_capacity
       /*<<dynarray.ml:443:6>>*/ (a, 1);
     var
      _K_ =
         /*<<dynarray.ml:444:13>>*/ 1
        -
          /*<<dynarray.ml:444:13>>*/ add_last_if_room
           /*<<dynarray.ml:444:13>>*/ (a, elem);
     if(! _K_)
       /*<<dynarray.ml:444:13>>*/ return _K_ /*<<dynarray.ml:444:13>>*/ ;
    }
    /*<<dynarray.ml:447:5>>*/ }
   function append_list(a, li){
    var li$0 = li;
     /*<<dynarray.ml:450:2>>*/ for(;;){
     if(! li$0)
       /*<<dynarray.ml:451:10>>*/ return 0 /*<<dynarray.ml:451:10>>*/ ;
     var xs = li$0[2], x = li$0[1];
      /*<<dynarray.ml:452:15>>*/  /*<<dynarray.ml:452:15>>*/ add_last
       /*<<dynarray.ml:452:15>>*/ (a, x);
     li$0 = xs;
    }
    /*<<dynarray.ml:452:45>>*/ }
   function append_iter(a, iter, b){
     /*<<dynarray.ml:455:2>>*/ return  /*<<dynarray.ml:455:2>>*/ caml_call2
             /*<<dynarray.ml:455:2>>*/ (iter,
             function(x){
               /*<<dynarray.ml:455:17>>*/ return  /*<<dynarray.ml:455:17>>*/ add_last
                       /*<<dynarray.ml:455:17>>*/ (a, x) /*<<dynarray.ml:455:29>>*/ ;
              /*<<dynarray.ml:455:29>>*/ },
             b) /*<<dynarray.ml:455:32>>*/ ;
    /*<<dynarray.ml:455:32>>*/ }
   function append_seq(a, seq){
     /*<<dynarray.ml:458:2>>*/ return  /*<<dynarray.ml:458:2>>*/ caml_call2
             /*<<dynarray.ml:458:2>>*/ (Stdlib_Seq[4],
             function(x){
               /*<<dynarray.ml:458:21>>*/ return  /*<<dynarray.ml:458:21>>*/ add_last
                       /*<<dynarray.ml:458:21>>*/ (a, x) /*<<dynarray.ml:458:33>>*/ ;
              /*<<dynarray.ml:458:33>>*/ },
             seq) /*<<dynarray.ml:458:38>>*/ ;
    /*<<dynarray.ml:458:38>>*/ }
   function append_array_if_room(a, b){
    var
     length_a = a[1],
     arr = a[2],
     length_b =  /*<<dynarray.ml:464:2>>*/ b.length - 1;
    if(arr.length - 1 < (length_a + length_b | 0))
      /*<<dynarray.ml:465:49>>*/ return 0 /*<<dynarray.ml:465:49>>*/ ;
    a[1] = length_a + length_b | 0;
    var
     _I_ =  /*<<dynarray.ml:464:2>>*/ length_b - 1 | 0,
     _H_ =  /*<<dynarray.ml:495:4>>*/ 0;
    if(_I_ >= 0){
     var i = _H_;
     for(;;){
      var x =  /*<<dynarray.ml:496:14>>*/ b[1 + i];
      arr[1 + (length_a + i | 0)] = [0, x];
      var _J_ =  /*<<dynarray.ml:495:4>>*/ i + 1 | 0;
      if(_I_ === i) break;
      i = _J_;
     }
    }
     /*<<dynarray.ml:499:4>>*/ return 1 /*<<dynarray.ml:499:4>>*/ ;
    /*<<dynarray.ml:500:5>>*/ }
   function append_array(a, b){
     /*<<dynarray.ml:503:2>>*/ if
     ( /*<<dynarray.ml:503:5>>*/ append_array_if_room
        /*<<dynarray.ml:503:5>>*/ (a, b))
      /*<<dynarray.ml:503:35>>*/ return 0 /*<<dynarray.ml:503:35>>*/ ;
     /*<<dynarray.ml:507:6>>*/ for(;;){
      /*<<dynarray.ml:507:6>>*/  /*<<dynarray.ml:507:6>>*/ ensure_extra_capacity
       /*<<dynarray.ml:507:6>>*/ (a, b.length - 1);
     var
      _G_ =
         /*<<dynarray.ml:508:13>>*/ 1
        -
          /*<<dynarray.ml:508:13>>*/ append_array_if_room
           /*<<dynarray.ml:508:13>>*/ (a, b);
     if(! _G_)
       /*<<dynarray.ml:508:13>>*/ return _G_ /*<<dynarray.ml:508:13>>*/ ;
    }
    /*<<dynarray.ml:510:31>>*/ }
   function append_if_room(a, b, length_b){
    var length_a = a[1], arr_a = a[2];
    if(arr_a.length - 1 < (length_a + length_b | 0))
      /*<<dynarray.ml:522:51>>*/ return 0 /*<<dynarray.ml:522:51>>*/ ;
    a[1] = length_a + length_b | 0;
    var arr_b = b[2];
     /*<<dynarray.ml:526:4>>*/  /*<<dynarray.ml:526:4>>*/ check_valid_length
      /*<<dynarray.ml:526:4>>*/ (length_b, arr_b);
    var _E_ = length_b - 1 | 0, _D_ =  /*<<dynarray.ml:526:4>>*/ 0;
    if(_E_ >= 0){
     var i = _D_;
     for(;;){
      var
       x =
          /*<<dynarray.ml:528:14>>*/  /*<<dynarray.ml:528:14>>*/ unsafe_get
           /*<<dynarray.ml:528:14>>*/ (arr_b, i, length_b);
      arr_a[1 + (length_a + i | 0)] = [0, x];
      var _F_ =  /*<<dynarray.ml:526:4>>*/ i + 1 | 0;
      if(_E_ === i) break;
      i = _F_;
     }
    }
     /*<<dynarray.ml:531:4>>*/  /*<<dynarray.ml:531:4>>*/ check_same_length
      /*<<dynarray.ml:531:4>>*/ (cst_append, b, length_b);
     /*<<dynarray.ml:531:4>>*/ return 1 /*<<dynarray.ml:531:4>>*/ ;
    /*<<dynarray.ml:533:5>>*/ }
   function append(a, b){
    var length_b = b[1];
     /*<<dynarray.ml:537:5>>*/ if
     ( /*<<dynarray.ml:537:5>>*/ append_if_room
        /*<<dynarray.ml:537:5>>*/ (a, b, length_b))
      /*<<dynarray.ml:537:39>>*/ return 0 /*<<dynarray.ml:537:39>>*/ ;
     /*<<dynarray.ml:541:6>>*/ for(;;){
      /*<<dynarray.ml:541:6>>*/  /*<<dynarray.ml:541:6>>*/ ensure_extra_capacity
       /*<<dynarray.ml:541:6>>*/ (a, length_b);
      /*<<dynarray.ml:548:6>>*/  /*<<dynarray.ml:548:6>>*/ check_same_length
       /*<<dynarray.ml:548:6>>*/ (cst_append$0, b, length_b);
     var
      _C_ =
         /*<<dynarray.ml:549:13>>*/ 1
        -
          /*<<dynarray.ml:549:13>>*/ append_if_room
           /*<<dynarray.ml:549:13>>*/ (a, b, length_b);
     if(! _C_)
       /*<<dynarray.ml:549:13>>*/ return _C_ /*<<dynarray.ml:549:13>>*/ ;
    }
    /*<<dynarray.ml:552:5>>*/ }
   function iter(f, k, a){
    var length = a[1], arr = a[2];
     /*<<dynarray.ml:596:2>>*/  /*<<dynarray.ml:596:2>>*/ check_valid_length
      /*<<dynarray.ml:596:2>>*/ (length, arr);
    var _A_ = length - 1 | 0, _z_ =  /*<<dynarray.ml:596:2>>*/ 0;
    if(_A_ >= 0){
     var i = _z_;
     for(;;){
       /*<<dynarray.ml:598:4>>*/  /*<<dynarray.ml:598:4>>*/ caml_call1
        /*<<dynarray.ml:598:4>>*/ (k,
         /*<<dynarray.ml:598:6>>*/ unsafe_get
          /*<<dynarray.ml:598:6>>*/ (arr, i, length));
      var _B_ =  /*<<dynarray.ml:598:4>>*/ i + 1 | 0;
      if(_A_ === i) break;
      i = _B_;
     }
    }
     /*<<dynarray.ml:600:2>>*/ return  /*<<dynarray.ml:600:2>>*/ check_same_length
             /*<<dynarray.ml:600:2>>*/ (f, a, length) /*<<dynarray.ml:600:31>>*/ ;
    /*<<dynarray.ml:600:31>>*/ }
   function iter$0(k, a){
     /*<<dynarray.ml:603:2>>*/ return  /*<<dynarray.ml:603:2>>*/ iter
             /*<<dynarray.ml:603:2>>*/ (cst_iter, k, a) /*<<dynarray.ml:603:18>>*/ ;
    /*<<dynarray.ml:603:18>>*/ }
   function iteri(k, a){
    var length = a[1], arr = a[2];
     /*<<dynarray.ml:607:2>>*/  /*<<dynarray.ml:607:2>>*/ check_valid_length
      /*<<dynarray.ml:607:2>>*/ (length, arr);
    var _x_ = length - 1 | 0, _w_ =  /*<<dynarray.ml:607:2>>*/ 0;
    if(_x_ >= 0){
     var i = _w_;
     for(;;){
       /*<<dynarray.ml:609:4>>*/  /*<<dynarray.ml:609:4>>*/ caml_call2
        /*<<dynarray.ml:609:4>>*/ (k,
        i,
         /*<<dynarray.ml:609:8>>*/ unsafe_get
          /*<<dynarray.ml:609:8>>*/ (arr, i, length));
      var _y_ =  /*<<dynarray.ml:609:4>>*/ i + 1 | 0;
      if(_x_ === i) break;
      i = _y_;
     }
    }
     /*<<dynarray.ml:611:2>>*/ return  /*<<dynarray.ml:611:2>>*/ check_same_length
             /*<<dynarray.ml:611:2>>*/ (cst_iteri, a, length) /*<<dynarray.ml:611:37>>*/ ;
    /*<<dynarray.ml:611:37>>*/ }
   function map(f, a){
    var length = a[1], arr = a[2];
     /*<<dynarray.ml:615:2>>*/  /*<<dynarray.ml:615:2>>*/ check_valid_length
      /*<<dynarray.ml:615:2>>*/ (length, arr);
    var
     res =
        /*<<dynarray.ml:616:12>>*/ [0,
        length,
         /*<<dynarray.ml:618:10>>*/ caml_call2
          /*<<dynarray.ml:618:10>>*/ (Stdlib_Array[1],
          length,
          function(i){
            /*<<dynarray.ml:619:6>>*/ return [0,
                    /*<<dynarray.ml:619:16>>*/ caml_call1
                     /*<<dynarray.ml:619:16>>*/ (f,
                      /*<<dynarray.ml:619:18>>*/ unsafe_get
                       /*<<dynarray.ml:619:18>>*/ (arr, i, length))] /*<<dynarray.ml:619:11>>*/ ;
           /*<<dynarray.ml:619:46>>*/ })];
     /*<<dynarray.ml:621:2>>*/  /*<<dynarray.ml:621:2>>*/ check_same_length
      /*<<dynarray.ml:621:2>>*/ (cst_map, a, length);
     /*<<dynarray.ml:621:2>>*/ return res /*<<dynarray.ml:621:2>>*/ ;
    /*<<dynarray.ml:622:5>>*/ }
   function mapi(f, a){
    var length = a[1], arr = a[2];
     /*<<dynarray.ml:627:2>>*/  /*<<dynarray.ml:627:2>>*/ check_valid_length
      /*<<dynarray.ml:627:2>>*/ (length, arr);
    var
     res =
        /*<<dynarray.ml:628:12>>*/ [0,
        length,
         /*<<dynarray.ml:630:10>>*/ caml_call2
          /*<<dynarray.ml:630:10>>*/ (Stdlib_Array[1],
          length,
          function(i){
            /*<<dynarray.ml:631:6>>*/ return [0,
                    /*<<dynarray.ml:631:16>>*/ caml_call2
                     /*<<dynarray.ml:631:16>>*/ (f,
                     i,
                      /*<<dynarray.ml:631:20>>*/ unsafe_get
                       /*<<dynarray.ml:631:20>>*/ (arr, i, length))] /*<<dynarray.ml:631:11>>*/ ;
           /*<<dynarray.ml:631:48>>*/ })];
     /*<<dynarray.ml:633:2>>*/  /*<<dynarray.ml:633:2>>*/ check_same_length
      /*<<dynarray.ml:633:2>>*/ (cst_mapi, a, length);
     /*<<dynarray.ml:633:2>>*/ return res /*<<dynarray.ml:633:2>>*/ ;
    /*<<dynarray.ml:634:5>>*/ }
   function fold_left(f, acc, a){
    var length = a[1], arr = a[2];
     /*<<dynarray.ml:638:2>>*/  /*<<dynarray.ml:638:2>>*/ check_valid_length
      /*<<dynarray.ml:638:2>>*/ (length, arr);
    var
     r =  /*<<dynarray.ml:639:10>>*/ [0, acc],
     _u_ =  /*<<dynarray.ml:640:2>>*/ length - 1 | 0,
     _t_ =  /*<<dynarray.ml:639:10>>*/ 0;
    if(_u_ >= 0){
     var i = _t_;
     for(;;){
      var
       v =
          /*<<dynarray.ml:641:12>>*/  /*<<dynarray.ml:641:12>>*/ unsafe_get
           /*<<dynarray.ml:641:12>>*/ (arr, i, length);
      r[1] =
        /*<<dynarray.ml:642:9>>*/ caml_call2
         /*<<dynarray.ml:642:9>>*/ (f, r[1], v);
      var _v_ =  /*<<dynarray.ml:640:2>>*/ i + 1 | 0;
      if(_u_ === i) break;
      i = _v_;
     }
    }
     /*<<dynarray.ml:644:2>>*/  /*<<dynarray.ml:644:2>>*/ check_same_length
      /*<<dynarray.ml:644:2>>*/ (cst_fold_left, a, length);
    return r[1];
    /*<<dynarray.ml:645:4>>*/ }
   function fold_right(f, a, acc){
    var length = a[1], arr = a[2];
     /*<<dynarray.ml:649:2>>*/  /*<<dynarray.ml:649:2>>*/ check_valid_length
      /*<<dynarray.ml:649:2>>*/ (length, arr);
    var
     r =  /*<<dynarray.ml:650:10>>*/ [0, acc],
     _r_ =  /*<<dynarray.ml:650:10>>*/ length - 1 | 0;
    if(_r_ >= 0){
     var i = _r_;
     for(;;){
      var
       v =
          /*<<dynarray.ml:652:12>>*/  /*<<dynarray.ml:652:12>>*/ unsafe_get
           /*<<dynarray.ml:652:12>>*/ (arr, i, length);
      r[1] =
        /*<<dynarray.ml:653:9>>*/ caml_call2
         /*<<dynarray.ml:653:9>>*/ (f, v, r[1]);
      var _s_ =  /*<<dynarray.ml:650:10>>*/ i - 1 | 0;
      if(0 === i) break;
      i = _s_;
     }
    }
     /*<<dynarray.ml:655:2>>*/  /*<<dynarray.ml:655:2>>*/ check_same_length
      /*<<dynarray.ml:655:2>>*/ (cst_fold_right, a, length);
    return r[1];
    /*<<dynarray.ml:656:4>>*/ }
   function exists(p, a){
    var length = a[1], arr = a[2];
     /*<<dynarray.ml:660:2>>*/  /*<<dynarray.ml:660:2>>*/ check_valid_length
      /*<<dynarray.ml:660:2>>*/ (length, arr);
    var i = 0;
     /*<<dynarray.ml:662:4>>*/ for(;;){
     if(i === length)
      var res = 0;
     else{
      var
       _q_ =
          /*<<dynarray.ml:664:6>>*/  /*<<dynarray.ml:664:6>>*/ caml_call1
           /*<<dynarray.ml:664:6>>*/ (p,
            /*<<dynarray.ml:664:8>>*/ unsafe_get
             /*<<dynarray.ml:664:8>>*/ (arr, i, length));
       /*<<dynarray.ml:664:6>>*/ if(! _q_){
       var i$0 = i + 1 | 0;
       i = i$0;
       continue;
      }
      var res = _q_;
     }
      /*<<dynarray.ml:668:2>>*/  /*<<dynarray.ml:668:2>>*/ check_same_length
       /*<<dynarray.ml:668:2>>*/ (cst_exists, a, length);
      /*<<dynarray.ml:668:2>>*/ return res /*<<dynarray.ml:668:2>>*/ ;
    }
    /*<<dynarray.ml:669:5>>*/ }
   function for_all(p, a){
    var length = a[1], arr = a[2];
     /*<<dynarray.ml:673:2>>*/  /*<<dynarray.ml:673:2>>*/ check_valid_length
      /*<<dynarray.ml:673:2>>*/ (length, arr);
    var i = 0;
     /*<<dynarray.ml:675:4>>*/ for(;;){
     if(i === length)
      var res = 1;
     else{
      var
       _p_ =
          /*<<dynarray.ml:677:6>>*/  /*<<dynarray.ml:677:6>>*/ caml_call1
           /*<<dynarray.ml:677:6>>*/ (p,
            /*<<dynarray.ml:677:8>>*/ unsafe_get
             /*<<dynarray.ml:677:8>>*/ (arr, i, length));
       /*<<dynarray.ml:677:6>>*/ if(_p_){
       var i$0 = i + 1 | 0;
       i = i$0;
       continue;
      }
      var res = _p_;
     }
      /*<<dynarray.ml:681:2>>*/  /*<<dynarray.ml:681:2>>*/ check_same_length
       /*<<dynarray.ml:681:2>>*/ (cst_for_all, a, length);
      /*<<dynarray.ml:681:2>>*/ return res /*<<dynarray.ml:681:2>>*/ ;
    }
    /*<<dynarray.ml:682:5>>*/ }
   function filter(f, a){
    var
     b =
        /*<<dynarray.ml:685:10>>*/  /*<<dynarray.ml:685:10>>*/ create
         /*<<dynarray.ml:685:10>>*/ (0);
     /*<<dynarray.ml:686:2>>*/  /*<<dynarray.ml:686:2>>*/ iter
      /*<<dynarray.ml:686:2>>*/ (cst_filter,
      function(x){
       var
        _o_ =
           /*<<dynarray.ml:686:30>>*/  /*<<dynarray.ml:686:30>>*/ caml_call1
            /*<<dynarray.ml:686:30>>*/ (f, x);
        /*<<dynarray.ml:686:30>>*/ return _o_
               ?  /*<<dynarray.ml:686:39>>*/ add_last
                  /*<<dynarray.ml:686:39>>*/ (b, x)
               : _o_ /*<<dynarray.ml:686:51>>*/ ;
       /*<<dynarray.ml:686:51>>*/ },
      a);
     /*<<dynarray.ml:686:2>>*/ return b /*<<dynarray.ml:686:2>>*/ ;
    /*<<dynarray.ml:687:3>>*/ }
   function filter_map(f, a){
    var
     b =
        /*<<dynarray.ml:690:10>>*/  /*<<dynarray.ml:690:10>>*/ create
         /*<<dynarray.ml:690:10>>*/ (0);
     /*<<dynarray.ml:691:2>>*/  /*<<dynarray.ml:691:2>>*/ iter
      /*<<dynarray.ml:691:2>>*/ (cst_filter_map,
      function(x){
       var
        match =
           /*<<dynarray.ml:692:10>>*/  /*<<dynarray.ml:692:10>>*/ caml_call1
            /*<<dynarray.ml:692:10>>*/ (f, x);
       if(! match)
         /*<<dynarray.ml:693:14>>*/ return 0 /*<<dynarray.ml:693:14>>*/ ;
       var y = match[1];
        /*<<dynarray.ml:694:16>>*/ return  /*<<dynarray.ml:694:16>>*/ add_last
                /*<<dynarray.ml:694:16>>*/ (b, y) /*<<dynarray.ml:694:28>>*/ ;
       /*<<dynarray.ml:694:28>>*/ },
      a);
     /*<<dynarray.ml:691:2>>*/ return b /*<<dynarray.ml:691:2>>*/ ;
    /*<<dynarray.ml:696:3>>*/ }
   function of_array(a){
    var length = a.length - 1;
     /*<<dynarray.ml:708:2>>*/ return [0,
            length,
             /*<<dynarray.ml:710:10>>*/ caml_call2
              /*<<dynarray.ml:710:10>>*/ (Stdlib_Array[1],
              length,
              function(i){
                /*<<dynarray.ml:710:38>>*/ return [0, a[1 + i]] /*<<dynarray.ml:710:43>>*/ ;
               /*<<dynarray.ml:710:69>>*/ })] /*<<dynarray.ml:708:2>>*/ ;
    /*<<dynarray.ml:711:3>>*/ }
   function to_array(a){
    var length = a[1], arr = a[2];
     /*<<dynarray.ml:715:2>>*/  /*<<dynarray.ml:715:2>>*/ check_valid_length
      /*<<dynarray.ml:715:2>>*/ (length, arr);
    var
     res =
        /*<<dynarray.ml:716:12>>*/  /*<<dynarray.ml:716:12>>*/ caml_call2
         /*<<dynarray.ml:716:12>>*/ (Stdlib_Array[1],
         length,
         function(i){
           /*<<dynarray.ml:717:4>>*/ return  /*<<dynarray.ml:715:2>>*/ unsafe_get
                   /*<<dynarray.ml:715:2>>*/ (arr, i, length) /*<<dynarray.ml:717:29>>*/ ;
          /*<<dynarray.ml:717:29>>*/ });
     /*<<dynarray.ml:719:2>>*/  /*<<dynarray.ml:719:2>>*/ check_same_length
      /*<<dynarray.ml:719:2>>*/ (cst_to_array, a, length);
     /*<<dynarray.ml:719:2>>*/ return res /*<<dynarray.ml:719:2>>*/ ;
    /*<<dynarray.ml:720:5>>*/ }
   function of_list(li){
    var
     a =
        /*<<dynarray.ml:723:10>>*/  /*<<dynarray.ml:723:10>>*/ create
         /*<<dynarray.ml:723:10>>*/ (0);
     /*<<dynarray.ml:724:2>>*/  /*<<dynarray.ml:724:2>>*/ caml_call2
      /*<<dynarray.ml:724:2>>*/ (Stdlib_List[18],
      function(x){
        /*<<dynarray.ml:724:22>>*/ return  /*<<dynarray.ml:724:22>>*/ add_last
                /*<<dynarray.ml:724:22>>*/ (a, x) /*<<dynarray.ml:724:34>>*/ ;
       /*<<dynarray.ml:724:34>>*/ },
      li);
     /*<<dynarray.ml:724:2>>*/ return a /*<<dynarray.ml:724:2>>*/ ;
    /*<<dynarray.ml:725:3>>*/ }
   function to_list(a){
    var length = a[1], arr = a[2];
     /*<<dynarray.ml:729:2>>*/  /*<<dynarray.ml:729:2>>*/ check_valid_length
      /*<<dynarray.ml:729:2>>*/ (length, arr);
    var
     l =  /*<<dynarray.ml:730:10>>*/ [0, 0],
     _l_ =  /*<<dynarray.ml:730:10>>*/ length - 1 | 0;
    if(_l_ >= 0){
     var i = _l_;
     for(;;){
      var _m_ = l[1];
      l[1] =
       [0,
         /*<<dynarray.ml:732:9>>*/ unsafe_get
          /*<<dynarray.ml:732:9>>*/ (arr, i, length),
        _m_];
      var _n_ =  /*<<dynarray.ml:730:10>>*/ i - 1 | 0;
      if(0 === i) break;
      i = _n_;
     }
    }
     /*<<dynarray.ml:734:2>>*/  /*<<dynarray.ml:734:2>>*/ check_same_length
      /*<<dynarray.ml:734:2>>*/ (cst_to_list, a, length);
    return l[1];
    /*<<dynarray.ml:735:4>>*/ }
   function of_seq(seq){
    var
     init =
        /*<<dynarray.ml:738:13>>*/  /*<<dynarray.ml:738:13>>*/ create
         /*<<dynarray.ml:738:13>>*/ (0);
     /*<<dynarray.ml:739:2>>*/  /*<<dynarray.ml:739:2>>*/ append_seq
      /*<<dynarray.ml:739:2>>*/ (init, seq);
     /*<<dynarray.ml:739:2>>*/ return init /*<<dynarray.ml:739:2>>*/ ;
    /*<<dynarray.ml:740:6>>*/ }
   function to_seq(a){
    var length = a[1], arr = a[2];
     /*<<dynarray.ml:744:2>>*/  /*<<dynarray.ml:744:2>>*/ check_valid_length
      /*<<dynarray.ml:744:2>>*/ (length, arr);
    function aux(i){
      /*<<dynarray.ml:745:18>>*/ return function(param){
       /*<<dynarray.ml:746:4>>*/  /*<<dynarray.ml:746:4>>*/ check_same_length
        /*<<dynarray.ml:746:4>>*/ (cst_to_seq, a, length);
      if(length <= i)
        /*<<dynarray.ml:747:24>>*/ return 0 /*<<dynarray.ml:747:24>>*/ ;
      var
       v =
          /*<<dynarray.ml:749:14>>*/  /*<<dynarray.ml:749:14>>*/ unsafe_get
           /*<<dynarray.ml:749:14>>*/ (arr, i, length);
       /*<<dynarray.ml:750:6>>*/ return [0,
              v,
               /*<<dynarray.ml:750:19>>*/ aux
                /*<<dynarray.ml:750:19>>*/ (i + 1 | 0)] /*<<dynarray.ml:750:6>>*/ ; /*<<dynarray.ml:751:7>>*/ } /*<<dynarray.ml:745:18>>*/ ;
     /*<<dynarray.ml:751:7>>*/ }
     /*<<dynarray.ml:753:2>>*/ return  /*<<dynarray.ml:753:2>>*/ aux
             /*<<dynarray.ml:753:2>>*/ (0) /*<<dynarray.ml:753:7>>*/ ;
    /*<<dynarray.ml:753:7>>*/ }
   function to_seq_reentrant(a){
    function aux(i){
      /*<<dynarray.ml:756:18>>*/ return function(param){
       /*<<dynarray.ml:757:4>>*/ if(a[1] <= i)
        /*<<dynarray.ml:757:26>>*/ return 0 /*<<dynarray.ml:757:26>>*/ ;
      var
       v =
          /*<<dynarray.ml:759:14>>*/  /*<<dynarray.ml:759:14>>*/ get
           /*<<dynarray.ml:759:14>>*/ (a, i);
       /*<<dynarray.ml:760:6>>*/ return [0,
              v,
               /*<<dynarray.ml:760:19>>*/ aux
                /*<<dynarray.ml:760:19>>*/ (i + 1 | 0)] /*<<dynarray.ml:760:6>>*/ ; /*<<dynarray.ml:761:7>>*/ } /*<<dynarray.ml:756:18>>*/ ;
     /*<<dynarray.ml:761:7>>*/ }
     /*<<dynarray.ml:763:2>>*/ return  /*<<dynarray.ml:763:2>>*/ aux
             /*<<dynarray.ml:763:2>>*/ (0) /*<<dynarray.ml:763:7>>*/ ;
    /*<<dynarray.ml:763:7>>*/ }
   function to_seq_rev(a){
    var length = a[1], arr = a[2];
     /*<<dynarray.ml:767:2>>*/  /*<<dynarray.ml:767:2>>*/ check_valid_length
      /*<<dynarray.ml:767:2>>*/ (length, arr);
    function aux(i){
      /*<<dynarray.ml:768:18>>*/ return function(param){
       /*<<dynarray.ml:769:4>>*/  /*<<dynarray.ml:769:4>>*/ check_same_length
        /*<<dynarray.ml:769:4>>*/ (cst_to_seq_rev, a, length);
      if(0 > i)
        /*<<dynarray.ml:770:18>>*/ return 0 /*<<dynarray.ml:770:18>>*/ ;
      var
       v =
          /*<<dynarray.ml:772:14>>*/  /*<<dynarray.ml:772:14>>*/ unsafe_get
           /*<<dynarray.ml:772:14>>*/ (arr, i, length);
       /*<<dynarray.ml:773:6>>*/ return [0,
              v,
               /*<<dynarray.ml:773:19>>*/ aux
                /*<<dynarray.ml:773:19>>*/ (i - 1 | 0)] /*<<dynarray.ml:773:6>>*/ ; /*<<dynarray.ml:774:7>>*/ } /*<<dynarray.ml:768:18>>*/ ;
     /*<<dynarray.ml:774:7>>*/ }
     /*<<dynarray.ml:776:2>>*/ return  /*<<dynarray.ml:776:2>>*/ aux
             /*<<dynarray.ml:776:2>>*/ (length - 1 | 0) /*<<dynarray.ml:776:18>>*/ ;
    /*<<dynarray.ml:776:18>>*/ }
   function to_seq_rev_reentrant(a){
    function aux(i){
      /*<<dynarray.ml:779:18>>*/ return function(param){
       /*<<dynarray.ml:780:4>>*/ if(0 > i)
        /*<<dynarray.ml:780:18>>*/ return 0 /*<<dynarray.ml:780:18>>*/ ;
      if(a[1] <= i)
        /*<<dynarray.ml:784:6>>*/ return  /*<<dynarray.ml:784:6>>*/  /*<<dynarray.ml:784:6>>*/ aux
                 /*<<dynarray.ml:784:6>>*/ (a[1] - 1 | 0)
                /*<<dynarray.ml:784:6>>*/ (0) /*<<dynarray.ml:788:7>>*/ ;
      var
       v =
          /*<<dynarray.ml:786:14>>*/  /*<<dynarray.ml:786:14>>*/ get
           /*<<dynarray.ml:786:14>>*/ (a, i);
       /*<<dynarray.ml:787:6>>*/ return [0,
              v,
               /*<<dynarray.ml:787:19>>*/ aux
                /*<<dynarray.ml:787:19>>*/ (i - 1 | 0)] /*<<dynarray.ml:787:6>>*/ ; /*<<dynarray.ml:788:7>>*/ } /*<<dynarray.ml:779:18>>*/ ;
     /*<<dynarray.ml:788:7>>*/ }
     /*<<dynarray.ml:790:7>>*/ return  /*<<dynarray.ml:790:7>>*/ aux
             /*<<dynarray.ml:790:7>>*/ (a[1] - 1 | 0) /*<<dynarray.ml:790:20>>*/ ;
    /*<<dynarray.ml:790:20>>*/ }
   var
    Stdlib_Dynarray =
      [0,
       create,
       make,
       init,
       get,
       set,
       length,
       is_empty,
       get_last,
       find_last,
       copy,
       add_last,
       append_array,
       append_list,
       append,
       append_seq,
       append_iter,
       pop_last_opt,
       pop_last,
       remove_last,
       truncate,
       clear,
       iter$0,
       iteri,
       map,
       mapi,
       fold_left,
       fold_right,
       exists,
       for_all,
       filter,
       filter_map,
       of_array,
       to_array,
       of_list,
       to_list,
       of_seq,
       to_seq,
       to_seq_reentrant,
       to_seq_rev,
       to_seq_rev_reentrant,
       capacity,
       ensure_capacity,
       ensure_extra_capacity,
       fit_capacity,
       set_capacity,
       reset];
   runtime.caml_register_global(44, Stdlib_Dynarray, "Stdlib__Dynarray");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Arg
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Int, Stdlib__List, Stdlib__Printf, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst$8 =  /*<<?>>*/ "",
    cst$10 =  /*<<?>>*/ "  ",
    cst_Display_this_list_of_optio$1 =
       /*<<?>>*/ " Display this list of options",
    cst_s =  /*<<?>>*/ "%s",
    cst_help$4 =  /*<<?>>*/ "--help",
    cst_help$3 =  /*<<?>>*/ "-help",
    cst$9 =  /*<<?>>*/ ".\n",
    cst_a_float$1 =  /*<<?>>*/ "a float",
    cst_an_integer$1 =  /*<<?>>*/ "an integer",
    caml_check_bound =  /*<<?>>*/ runtime.caml_check_bound,
    caml_equal =  /*<<?>>*/ runtime.caml_equal,
    caml_fresh_oo_id =  /*<<?>>*/ runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length =  /*<<?>>*/ runtime.caml_ml_string_length,
    caml_string_get =  /*<<?>>*/ runtime.caml_string_get,
    caml_sys_argv =  /*<<?>>*/ runtime.caml_sys_argv,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$7 = "\n",
    cst$4 = cst$8,
    cst$5 = " ",
    cst$6 = cst$8,
    cst$2 = "(?)",
    cst$3 = "-",
    cst = "}",
    cst$0 = "|",
    cst$1 = "{",
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Int = global_data.Stdlib__Int,
    Bad =  /*<<arg.ml:50:0>>*/ [248, "Stdlib.Arg.Bad", caml_fresh_oo_id(0)],
    Help =  /*<<arg.ml:51:0>>*/ [248, "Stdlib.Arg.Help", caml_fresh_oo_id(0)],
    Stop =  /*<<arg.ml:59:0>>*/ [248, "Stdlib.Arg.Stop", caml_fresh_oo_id(0)],
    cst_none = "<none>",
    _a_ =
      [0, [11, cst$10, [2, 0, [12, 32, [2, 0, [12, 10, 0]]]]], "  %s %s\n"],
    _b_ =
      [0,
       [11, cst$10, [2, 0, [12, 32, [2, 0, [2, 0, [12, 10, 0]]]]]],
       "  %s %s%s\n"],
    _c_ = [0, cst_help$3],
    cst_Display_this_list_of_optio = cst_Display_this_list_of_optio$1,
    cst_help = cst_help$3,
    cst_Display_this_list_of_optio$0 = cst_Display_this_list_of_optio$1,
    cst_help$0 = cst_help$4,
    cst_help$1 = cst_help$4,
    cst_help$2 = cst_help$3,
    _d_ = [0, [2, 0, [12, 10, 0]], "%s\n"],
    _e_ = [0, [2, 0, 0], cst_s];
   function assoc3(x, l){
    var l$0 = l;
     /*<<arg.ml:64:2>>*/ for(;;){
     if(! l$0)
       /*<<arg.ml:65:10>>*/ throw  /*<<arg.ml:65:10>>*/ caml_maybe_attach_backtrace
              /*<<arg.ml:65:10>>*/ (Stdlib[8], 1);
     var match = l$0[1], y2 = match[2], y1 = match[1];
      /*<<arg.ml:66:26>>*/ if
      ( /*<<arg.ml:66:26>>*/ caml_equal /*<<arg.ml:66:26>>*/ (y1, x))
       /*<<arg.ml:66:36>>*/ return y2 /*<<arg.ml:66:36>>*/ ;
     var t = l$0[2];
     l$0 = t;
    }
    /*<<arg.ml:67:24>>*/ }
   function make_symlist(prefix, sep, suffix, l){
     /*<<arg.ml:77:2>>*/ if(! l)
      /*<<arg.ml:78:10>>*/ return cst_none /*<<arg.ml:78:10>>*/ ;
    var
     t = l[2],
     h = l[1],
     _az_ =
        /*<<arg.ml:79:53>>*/  /*<<arg.ml:79:53>>*/ caml_call2
         /*<<arg.ml:79:53>>*/ (Stdlib[28], prefix, h),
     _aA_ =
        /*<<arg.ml:79:12>>*/  /*<<arg.ml:79:12>>*/ caml_call3
         /*<<arg.ml:79:12>>*/ (Stdlib_List[26],
         function(x, y){
          var
           _aB_ =
              /*<<arg.ml:79:44>>*/  /*<<arg.ml:79:44>>*/ caml_call2
               /*<<arg.ml:79:44>>*/ (Stdlib[28], sep, y);
           /*<<arg.ml:79:44>>*/ return  /*<<arg.ml:79:44>>*/ caml_call2
                   /*<<arg.ml:79:44>>*/ (Stdlib[28], x, _aB_) /*<<arg.ml:79:51>>*/ ;
          /*<<arg.ml:79:51>>*/ },
         _az_,
         t);
     /*<<arg.ml:79:12>>*/ return  /*<<arg.ml:79:12>>*/ caml_call2
             /*<<arg.ml:79:12>>*/ (Stdlib[28], _aA_, suffix) /*<<arg.ml:79:77>>*/ ;
    /*<<arg.ml:79:77>>*/ }
   function help_action(param){
     /*<<arg.ml:91:21>>*/ throw  /*<<arg.ml:91:21>>*/ caml_maybe_attach_backtrace
            /*<<arg.ml:91:21>>*/ ([0, Stop, _c_], 1);
    /*<<arg.ml:91:51>>*/ }
   function add_help(speclist){
     /*<<arg.ml:94:2>>*/ try{
      /*<<arg.ml:95:15>>*/  /*<<arg.ml:95:15>>*/ assoc3
       /*<<arg.ml:95:15>>*/ (cst_help$2, speclist);
     var _aw_ =  /*<<arg.ml:95:42>>*/ 0, add1 = _aw_;
    }
    catch(_ay_){
     var _as_ = caml_wrap_exception(_ay_);
     if(_as_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_as_, 0);
     var
      add1 =
        [0,
         [0, cst_help, [0, help_action], cst_Display_this_list_of_optio],
         0];
    }
    try{
      /*<<arg.ml:99:15>>*/  /*<<arg.ml:99:15>>*/ assoc3
       /*<<arg.ml:99:15>>*/ (cst_help$1, speclist);
     var _av_ =  /*<<arg.ml:99:43>>*/ 0, add2 = _av_;
    }
    catch(_ax_){
     var _at_ = caml_wrap_exception(_ax_);
     if(_at_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_at_, 0);
     var
      add2 =
        [0,
         [0, cst_help$0, [0, help_action], cst_Display_this_list_of_optio$0],
         0];
    }
    var
     _au_ =
        /*<<arg.ml:103:13>>*/  /*<<arg.ml:103:13>>*/ caml_call2
         /*<<arg.ml:103:13>>*/ (Stdlib[37], add1, add2);
     /*<<arg.ml:103:13>>*/ return  /*<<arg.ml:103:13>>*/ caml_call2
             /*<<arg.ml:103:13>>*/ (Stdlib[37], speclist, _au_) /*<<arg.ml:103:26>>*/ ;
    /*<<arg.ml:103:26>>*/ }
   function usage_b(buf, speclist, errmsg){
     /*<<arg.ml:107:2>>*/  /*<<arg.ml:107:2>>*/ caml_call3
      /*<<arg.ml:107:2>>*/ (Stdlib_Printf[5], buf, _d_, errmsg);
    var
     _ap_ =
        /*<<arg.ml:108:29>>*/  /*<<arg.ml:108:29>>*/ add_help
         /*<<arg.ml:108:29>>*/ (speclist);
     /*<<arg.ml:108:29>>*/ return  /*<<arg.ml:108:29>>*/ caml_call2
             /*<<arg.ml:108:29>>*/ (Stdlib_List[18],
             function(param){
              var
               doc = param[3],
               spec = param[2],
               key = param[1],
               _aq_ =
                 0
                  <
                    /*<<arg.ml:83:2>>*/ caml_ml_string_length
                     /*<<arg.ml:83:2>>*/ (doc)
                  ? 1
                  : 0;
              if(! _aq_) return _aq_;
              if(11 !== spec[0])
                /*<<arg.ml:88:8>>*/ return  /*<<arg.ml:88:8>>*/ caml_call4
                        /*<<arg.ml:88:8>>*/ (Stdlib_Printf[5], buf, _a_, key, doc) /*<<arg.ml:88:8>>*/ ;
              var
               l = spec[1],
               _ar_ =
                  /*<<arg.ml:86:38>>*/  /*<<arg.ml:86:38>>*/ make_symlist
                   /*<<arg.ml:86:38>>*/ (cst$1, cst$0, cst, l);
               /*<<arg.ml:86:8>>*/ return  /*<<arg.ml:86:8>>*/ caml_call5
                       /*<<arg.ml:86:8>>*/ (Stdlib_Printf[5],
                       buf,
                       _b_,
                       key,
                       _ar_,
                       doc) /*<<arg.ml:86:8>>*/ ;
             },
             _ap_) /*<<arg.ml:108:48>>*/ ;
    /*<<arg.ml:108:48>>*/ }
   function usage_string(speclist, errmsg){
    var
     b =
        /*<<arg.ml:112:10>>*/  /*<<arg.ml:112:10>>*/ caml_call1
         /*<<arg.ml:112:10>>*/ (Stdlib_Buffer[1], 200);
     /*<<arg.ml:113:2>>*/  /*<<arg.ml:113:2>>*/ usage_b
      /*<<arg.ml:113:2>>*/ (b, speclist, errmsg);
     /*<<arg.ml:113:2>>*/ return  /*<<arg.ml:113:2>>*/ caml_call1
             /*<<arg.ml:113:2>>*/ (Stdlib_Buffer[2], b) /*<<arg.ml:114:19>>*/ ;
    /*<<arg.ml:114:19>>*/ }
   function usage(speclist, errmsg){
    var
     _ao_ =
        /*<<arg.ml:118:15>>*/  /*<<arg.ml:118:15>>*/ usage_string
         /*<<arg.ml:118:15>>*/ (speclist, errmsg);
     /*<<arg.ml:118:15>>*/ return  /*<<arg.ml:118:15>>*/ caml_call2
             /*<<arg.ml:118:15>>*/ (Stdlib_Printf[3], _e_, _ao_) /*<<arg.ml:118:45>>*/ ;
    /*<<arg.ml:118:45>>*/ }
   var
    current =  /*<<arg.ml:121:14>>*/ [0, 0],
    _f_ =
      [0,
       [2, 0, [11, ": unknown option '", [2, 0, [11, "'.\n", 0]]]],
       "%s: unknown option '%s'.\n"],
    _g_ = [0, cst_help$3],
    _h_ = [0, cst_help$4],
    _i_ =
      [0,
       [2,
        0,
        [11,
         ": wrong argument '",
         [2,
          0,
          [11,
           "'; option '",
           [2, 0, [11, "' expects ", [2, 0, [11, cst$9, 0]]]]]]]],
       "%s: wrong argument '%s'; option '%s' expects %s.\n"],
    _j_ =
      [0,
       [2, 0, [11, ": option '", [2, 0, [11, "' needs an argument.\n", 0]]]],
       "%s: option '%s' needs an argument.\n"],
    _k_ = [0, [2, 0, [11, ": ", [2, 0, [11, cst$9, 0]]]], "%s: %s.\n"],
    cst_no_argument = "no argument",
    cst_a_boolean = "a boolean",
    cst_an_integer = cst_an_integer$1,
    cst_an_integer$0 = cst_an_integer$1,
    cst_a_float = cst_a_float$1,
    cst_a_float$0 = cst_a_float$1,
    cst_one_of = "one of: ",
    cst_Arg_Expand_is_is_only_allo =
      "Arg.Expand is is only allowed with Arg.parse_and_expand_argv_dynamic",
    _l_ = [0, [2, 0, 0], cst_s],
    _m_ = [0, [2, 0, 0], cst_s],
    _n_ = [0, [2, 0, 0], cst_s],
    _o_ = [0, [2, 0, 0], cst_s],
    _p_ = [0, [2, 0, 0], cst_s],
    _q_ = [0, [2, 0, 0], cst_s],
    dummy = 0;
   function int_of_string_opt(x){
     /*<<arg.ml:128:2>>*/ try{
     var
      _am_ =
         /*<<arg.ml:128:6>>*/ [0,
          /*<<arg.ml:128:11>>*/ runtime.caml_int_of_string
           /*<<arg.ml:128:11>>*/ (x)];
      /*<<arg.ml:128:6>>*/ return _am_ /*<<arg.ml:128:6>>*/ ;
    }
    catch(_an_){
     var _al_ = caml_wrap_exception(_an_);
     if(_al_[1] === Stdlib[7])
       /*<<arg.ml:129:20>>*/ return 0 /*<<arg.ml:129:20>>*/ ;
     throw caml_maybe_attach_backtrace(_al_, 0);
    }
    /*<<arg.ml:129:24>>*/ }
   function float_of_string_opt(x){
     /*<<arg.ml:132:2>>*/ try{
     var
      _aj_ =
         /*<<arg.ml:132:6>>*/ [0,
          /*<<arg.ml:132:11>>*/ runtime.caml_float_of_string
           /*<<arg.ml:132:11>>*/ (x)];
      /*<<arg.ml:132:6>>*/ return _aj_ /*<<arg.ml:132:6>>*/ ;
    }
    catch(_ak_){
     var _ai_ = caml_wrap_exception(_ak_);
     if(_ai_[1] === Stdlib[7])
       /*<<arg.ml:133:20>>*/ return 0 /*<<arg.ml:133:20>>*/ ;
     throw caml_maybe_attach_backtrace(_ai_, 0);
    }
    /*<<arg.ml:133:24>>*/ }
   function parse_and_expand_argv_dynamic_
   (allow_expand, current, argv, speclist, anonfun, errmsg){
    var initpos = current[1];
    function convert_error(error){
     var
      b =
         /*<<arg.ml:143:12>>*/  /*<<arg.ml:143:12>>*/ caml_call1
          /*<<arg.ml:143:12>>*/ (Stdlib_Buffer[1], 200),
      progname =
        initpos < argv[1].length - 1
         ? caml_check_bound(argv[1], initpos)[1 + initpos]
         : cst$2;
      /*<<arg.ml:146:4>>*/ switch(error[0]){
       case 0:
        var s = error[1];
        if(s !== cst_help$4 && s !== cst_help$3)
          /*<<arg.ml:150:10>>*/  /*<<arg.ml:150:10>>*/ caml_call4
           /*<<arg.ml:150:10>>*/ (Stdlib_Printf[5], b, _f_, progname, s);
        break;
       case 1:
        var expected = error[3], arg = error[2], opt = error[1];
         /*<<arg.ml:154:10>>*/  /*<<arg.ml:154:10>>*/ caml_call6
          /*<<arg.ml:154:10>>*/ (Stdlib_Printf[5],
          b,
          _i_,
          progname,
          arg,
          opt,
          expected);
        break;
       case 2:
        var s$0 = error[1];
         /*<<arg.ml:152:10>>*/  /*<<arg.ml:152:10>>*/ caml_call4
          /*<<arg.ml:152:10>>*/ (Stdlib_Printf[5], b, _j_, progname, s$0);
        break;
       default:
        var s$1 = error[1];
         /*<<arg.ml:157:10>>*/  /*<<arg.ml:157:10>>*/ caml_call4
          /*<<arg.ml:157:10>>*/ (Stdlib_Printf[5], b, _k_, progname, s$1);
     }
      /*<<arg.ml:159:4>>*/  /*<<arg.ml:159:4>>*/ usage_b
       /*<<arg.ml:159:4>>*/ (b, speclist[1], errmsg);
      /*<<arg.ml:160:7>>*/ if
      (!
        /*<<arg.ml:160:7>>*/ caml_equal /*<<arg.ml:160:7>>*/ (error, _g_)
       &&
        !
         /*<<arg.ml:160:34>>*/ caml_equal /*<<arg.ml:160:34>>*/ (error, _h_))
       /*<<arg.ml:162:9>>*/ return [0,
              Bad,
               /*<<arg.ml:162:13>>*/ caml_call1
                /*<<arg.ml:162:13>>*/ (Stdlib_Buffer[2], b)] /*<<arg.ml:162:9>>*/ ;
      /*<<arg.ml:161:9>>*/ return [0,
             Help,
              /*<<arg.ml:161:14>>*/ caml_call1
               /*<<arg.ml:161:14>>*/ (Stdlib_Buffer[2], b)] /*<<arg.ml:161:9>>*/ ;
     /*<<arg.ml:162:32>>*/ }
     /*<<arg.ml:164:2>>*/ current[1]++;
    for(;;){
     if(current[1] >= argv[1].length - 1) return 0;
      /*<<arg.ml:166:4>>*/ try{
      var
       _V_ = current[1],
       s =  /*<<arg.ml:167:14>>*/ caml_check_bound(argv[1], _V_)[1 + _V_];
       /*<<arg.ml:168:9>>*/ if
       ( /*<<arg.ml:168:9>>*/ caml_call2
          /*<<arg.ml:168:9>>*/ (Stdlib_String[11], cst$3, s)){
       try{
        var
         follow$1 = 0,
         _Z_ =
            /*<<arg.ml:170:14>>*/  /*<<arg.ml:170:14>>*/ assoc3
             /*<<arg.ml:170:14>>*/ (s, speclist[1]),
         follow$0 = follow$1,
         action = _Z_;
       }
       catch(_ag_){
        var _W_ = caml_wrap_exception(_ag_);
        if(_W_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_W_, 0);
         /*<<arg.ml:172:10>>*/ try{
         var
          i =
             /*<<arg.ml:71:10>>*/  /*<<arg.ml:71:10>>*/ caml_call2
              /*<<arg.ml:71:10>>*/ (Stdlib_String[36], s, 61),
          len =
             /*<<arg.ml:72:2>>*/  /*<<arg.ml:72:2>>*/ caml_ml_string_length
              /*<<arg.ml:72:2>>*/ (s),
          arg =
             /*<<arg.ml:73:20>>*/  /*<<arg.ml:73:20>>*/ caml_call3
              /*<<arg.ml:73:20>>*/ (Stdlib_String[16],
              s,
              i + 1 | 0,
              len - (i + 1 | 0) | 0),
          keyword =
             /*<<arg.ml:73:2>>*/  /*<<arg.ml:73:2>>*/ caml_call3
              /*<<arg.ml:73:2>>*/ (Stdlib_String[16], s, 0, i),
          follow =  /*<<arg.ml:174:38>>*/ [0, arg],
          _Y_ =
             /*<<arg.ml:174:12>>*/  /*<<arg.ml:174:12>>*/ assoc3
              /*<<arg.ml:174:12>>*/ (keyword, speclist[1]),
          follow$0 = follow,
          action = _Y_;
        }
        catch(_ah_){
         var _X_ = caml_wrap_exception(_ah_);
         if(_X_ === Stdlib[8])
           /*<<arg.ml:175:28>>*/ throw  /*<<arg.ml:175:28>>*/ caml_maybe_attach_backtrace
                  /*<<arg.ml:175:28>>*/ ([0, Stop, [0, s]], 1);
         throw caml_maybe_attach_backtrace(_X_, 0);
        }
       }
       let s$0 = s, follow$2 = follow$0;
       var
        no_arg =
          function(param){
            /*<<arg.ml:178:10>>*/ if(! follow$2)
             /*<<arg.ml:179:20>>*/ return /*<<arg.ml:179:20>>*/ ;
           var arg = follow$2[1];
            /*<<arg.ml:180:24>>*/ throw  /*<<arg.ml:180:24>>*/ caml_maybe_attach_backtrace
                   /*<<arg.ml:180:24>>*/ ([0,
                    Stop,
                    [1, s$0, arg, cst_no_argument]],
                   1);
           /*<<arg.ml:180:68>>*/ },
        get_arg =
          function(param){
            /*<<arg.ml:182:10>>*/ if(follow$2){
            var arg = follow$2[1];
             /*<<arg.ml:186:24>>*/ return arg /*<<arg.ml:186:24>>*/ ;
           }
           if((current[1] + 1 | 0) >= argv[1].length - 1)
             /*<<arg.ml:185:19>>*/ throw  /*<<arg.ml:185:19>>*/ caml_maybe_attach_backtrace
                    /*<<arg.ml:185:19>>*/ ([0, Stop, [2, s$0]], 1);
           var _af_ = current[1] + 1 | 0;
            /*<<arg.ml:184:58>>*/ return caml_check_bound(argv[1], _af_)
                   [1 + _af_] /*<<arg.ml:184:58>>*/ ;
           /*<<arg.ml:186:27>>*/ },
        consume_arg =
          function(param){
            /*<<arg.ml:189:10>>*/ return follow$2 ? 0 : (current[1]++, 0) /*<<arg.ml:191:24>>*/ ;
           /*<<arg.ml:191:24>>*/ },
        treat_action =
          function(param){
            /*<<arg.ml:193:31>>*/ switch(param[0]){
             case 0:
              var f = param[1];
               /*<<arg.ml:194:20>>*/  /*<<arg.ml:194:20>>*/ no_arg$0
                /*<<arg.ml:194:20>>*/ (0);
               /*<<arg.ml:194:20>>*/ return  /*<<arg.ml:194:20>>*/ caml_call1
                       /*<<arg.ml:194:20>>*/ (f, 0) /*<<arg.ml:276:54>>*/ ;
             case 1:
              var
               f$0 = param[1],
               arg =
                  /*<<arg.ml:196:22>>*/  /*<<arg.ml:196:22>>*/ get_arg$0
                   /*<<arg.ml:196:22>>*/ (0);
               /*<<arg.ml:124:2>>*/ try{
               var
                _$_ =
                   /*<<arg.ml:124:6>>*/ [0,
                    /*<<arg.ml:124:11>>*/ caml_call1
                     /*<<arg.ml:124:11>>*/ (Stdlib[32], arg)],
                match = _$_;
              }
              catch(_ae_){
               var ___ = caml_wrap_exception(_ae_);
               if(___[1] !== Stdlib[6])
                throw caml_maybe_attach_backtrace(___, 0);
               var match = 0;
              }
              if(! match)
                /*<<arg.ml:198:22>>*/ throw  /*<<arg.ml:198:22>>*/ caml_maybe_attach_backtrace
                       /*<<arg.ml:198:22>>*/ ([0,
                        Stop,
                        [1, s$0, arg, cst_a_boolean]],
                       1);
              var s = match[1];
               /*<<arg.ml:199:24>>*/  /*<<arg.ml:199:24>>*/ caml_call1
                /*<<arg.ml:199:24>>*/ (f$0, s);
               /*<<arg.ml:201:12>>*/ return  /*<<arg.ml:201:12>>*/ consume_arg$0
                       /*<<arg.ml:201:12>>*/ (0) /*<<arg.ml:276:54>>*/ ;
             case 2:
              var r = param[1];
               /*<<arg.ml:202:19>>*/  /*<<arg.ml:202:19>>*/ no_arg$0
                /*<<arg.ml:202:19>>*/ (0);
              r[1] = 1;
              return 0;
             case 3:
              var r$0 = param[1];
               /*<<arg.ml:203:21>>*/  /*<<arg.ml:203:21>>*/ no_arg$0
                /*<<arg.ml:203:21>>*/ (0);
              r$0[1] = 0;
              return 0;
             case 4:
              var
               f$1 = param[1],
               arg$0 =
                  /*<<arg.ml:205:22>>*/  /*<<arg.ml:205:22>>*/ get_arg$0
                   /*<<arg.ml:205:22>>*/ (0);
               /*<<arg.ml:206:12>>*/  /*<<arg.ml:206:12>>*/ caml_call1
                /*<<arg.ml:206:12>>*/ (f$1, arg$0);
               /*<<arg.ml:206:12>>*/ return  /*<<arg.ml:206:12>>*/ consume_arg$0
                       /*<<arg.ml:206:12>>*/ (0) /*<<arg.ml:276:54>>*/ ;
             case 5:
              var r$1 = param[1];
              r$1[1] =
                /*<<arg.ml:218:17>>*/ get_arg$0 /*<<arg.ml:218:17>>*/ (0);
               /*<<arg.ml:219:12>>*/ return  /*<<arg.ml:219:12>>*/ consume_arg$0
                       /*<<arg.ml:219:12>>*/ (0) /*<<arg.ml:276:54>>*/ ;
             case 6:
              var
               f$2 = param[1],
               arg$1 =
                  /*<<arg.ml:221:22>>*/  /*<<arg.ml:221:22>>*/ get_arg$0
                   /*<<arg.ml:221:22>>*/ (0),
               match$0 =
                  /*<<arg.ml:222:24>>*/  /*<<arg.ml:222:24>>*/ int_of_string_opt
                   /*<<arg.ml:222:24>>*/ (arg$1);
              if(! match$0)
                /*<<arg.ml:223:22>>*/ throw  /*<<arg.ml:223:22>>*/ caml_maybe_attach_backtrace
                       /*<<arg.ml:223:22>>*/ ([0,
                        Stop,
                        [1, s$0, arg$1, cst_an_integer]],
                       1);
              var x = match$0[1];
               /*<<arg.ml:224:24>>*/  /*<<arg.ml:224:24>>*/ caml_call1
                /*<<arg.ml:224:24>>*/ (f$2, x);
               /*<<arg.ml:226:12>>*/ return  /*<<arg.ml:226:12>>*/ consume_arg$0
                       /*<<arg.ml:226:12>>*/ (0) /*<<arg.ml:276:54>>*/ ;
             case 7:
              var
               r$2 = param[1],
               arg$2 =
                  /*<<arg.ml:228:22>>*/  /*<<arg.ml:228:22>>*/ get_arg$0
                   /*<<arg.ml:228:22>>*/ (0),
               match$1 =
                  /*<<arg.ml:229:24>>*/  /*<<arg.ml:229:24>>*/ int_of_string_opt
                   /*<<arg.ml:229:24>>*/ (arg$2);
              if(! match$1)
                /*<<arg.ml:230:22>>*/ throw  /*<<arg.ml:230:22>>*/ caml_maybe_attach_backtrace
                       /*<<arg.ml:230:22>>*/ ([0,
                        Stop,
                        [1, s$0, arg$2, cst_an_integer$0]],
                       1);
              var x$0 = match$1[1];
              r$2[1] = x$0;
               /*<<arg.ml:233:12>>*/ return  /*<<arg.ml:233:12>>*/ consume_arg$0
                       /*<<arg.ml:233:12>>*/ (0) /*<<arg.ml:276:54>>*/ ;
             case 8:
              var
               f$3 = param[1],
               arg$3 =
                  /*<<arg.ml:235:22>>*/  /*<<arg.ml:235:22>>*/ get_arg$0
                   /*<<arg.ml:235:22>>*/ (0),
               match$2 =
                  /*<<arg.ml:236:24>>*/  /*<<arg.ml:236:24>>*/ float_of_string_opt
                   /*<<arg.ml:236:24>>*/ (arg$3);
              if(! match$2)
                /*<<arg.ml:237:22>>*/ throw  /*<<arg.ml:237:22>>*/ caml_maybe_attach_backtrace
                       /*<<arg.ml:237:22>>*/ ([0,
                        Stop,
                        [1, s$0, arg$3, cst_a_float]],
                       1);
              var x$1 = match$2[1];
               /*<<arg.ml:238:24>>*/  /*<<arg.ml:238:24>>*/ caml_call1
                /*<<arg.ml:238:24>>*/ (f$3, x$1);
               /*<<arg.ml:240:12>>*/ return  /*<<arg.ml:240:12>>*/ consume_arg$0
                       /*<<arg.ml:240:12>>*/ (0) /*<<arg.ml:276:54>>*/ ;
             case 9:
              var
               r$3 = param[1],
               arg$4 =
                  /*<<arg.ml:242:22>>*/  /*<<arg.ml:242:22>>*/ get_arg$0
                   /*<<arg.ml:242:22>>*/ (0),
               match$3 =
                  /*<<arg.ml:243:24>>*/  /*<<arg.ml:243:24>>*/ float_of_string_opt
                   /*<<arg.ml:243:24>>*/ (arg$4);
              if(! match$3)
                /*<<arg.ml:244:22>>*/ throw  /*<<arg.ml:244:22>>*/ caml_maybe_attach_backtrace
                       /*<<arg.ml:244:22>>*/ ([0,
                        Stop,
                        [1, s$0, arg$4, cst_a_float$0]],
                       1);
              var x$2 = match$3[1];
              r$3[1] = x$2;
               /*<<arg.ml:247:12>>*/ return  /*<<arg.ml:247:12>>*/ consume_arg$0
                       /*<<arg.ml:247:12>>*/ (0) /*<<arg.ml:276:54>>*/ ;
             case 10:
              var specs = param[1];
               /*<<arg.ml:249:12>>*/  /*<<arg.ml:249:12>>*/ no_arg$0
                /*<<arg.ml:249:12>>*/ (0);
               /*<<arg.ml:249:12>>*/ return  /*<<arg.ml:249:12>>*/ caml_call2
                       /*<<arg.ml:249:12>>*/ (Stdlib_List[18],
                       treat_action$0,
                       specs) /*<<arg.ml:276:54>>*/ ;
             case 11:
              var
               f$4 = param[2],
               symb = param[1],
               arg$5 =
                  /*<<arg.ml:209:22>>*/  /*<<arg.ml:209:22>>*/ get_arg$0
                   /*<<arg.ml:209:22>>*/ (0);
               /*<<arg.ml:210:15>>*/ if
               ( /*<<arg.ml:210:15>>*/ caml_call2
                  /*<<arg.ml:210:15>>*/ (Stdlib_List[37], arg$5, symb)){
                /*<<arg.ml:211:14>>*/  /*<<arg.ml:211:14>>*/ caml_call1
                 /*<<arg.ml:211:14>>*/ (f$4, arg$5);
                /*<<arg.ml:211:14>>*/ return  /*<<arg.ml:211:14>>*/ consume_arg$0
                        /*<<arg.ml:211:14>>*/ (0) /*<<arg.ml:276:54>>*/ ;
              }
              var
               _aa_ =
                  /*<<arg.ml:215:44>>*/  /*<<arg.ml:215:44>>*/ make_symlist
                   /*<<arg.ml:215:44>>*/ (cst$6, cst$5, cst$4, symb);
               /*<<arg.ml:213:21>>*/ throw  /*<<arg.ml:213:21>>*/ caml_maybe_attach_backtrace
                      /*<<arg.ml:213:21>>*/ ([0,
                       Stop,
                       [1,
                        s$0,
                        arg$5,
                         /*<<arg.ml:214:42>>*/ caml_call2
                          /*<<arg.ml:214:42>>*/ (Stdlib[28], cst_one_of, _aa_)]],
                      1);
             case 12:
              var f$5 = param[1];
               /*<<arg.ml:252:12>>*/  /*<<arg.ml:252:12>>*/ no_arg$0
                /*<<arg.ml:252:12>>*/ (0);
               /*<<arg.ml:255:14>>*/ for(;;){
               if(current[1] >= (argv[1].length - 2 | 0)) return 0;
               var _ab_ = current[1] + 1 | 0;
                /*<<arg.ml:254:14>>*/  /*<<arg.ml:254:14>>*/ caml_call1
                 /*<<arg.ml:254:14>>*/ (f$5,
                 caml_check_bound(argv[1], _ab_)[1 + _ab_]);
                /*<<arg.ml:255:14>>*/  /*<<arg.ml:255:14>>*/ consume_arg$0
                 /*<<arg.ml:255:14>>*/ (0);
              }
              break;
             case 13:
              var f$6 = param[1];
               /*<<arg.ml:258:12>>*/  /*<<arg.ml:258:12>>*/ no_arg$0
                /*<<arg.ml:258:12>>*/ (0);
              var acc =  /*<<arg.ml:259:22>>*/ [0, 0];
               /*<<arg.ml:262:14>>*/ for(;;){
               if(current[1] >= (argv[1].length - 2 | 0))
                 /*<<arg.ml:264:14>>*/ return  /*<<arg.ml:264:14>>*/ caml_call1
                         /*<<arg.ml:264:14>>*/ (f$6,
                          /*<<arg.ml:264:14>>*/ caml_call1
                           /*<<arg.ml:264:14>>*/ (Stdlib_List[10], acc[1])) /*<<arg.ml:276:54>>*/ ;
               var _ad_ = current[1] + 1 | 0, _ac_ = acc[1];
               acc[1] = [0, caml_check_bound(argv[1], _ad_)[1 + _ad_], _ac_];
                /*<<arg.ml:262:14>>*/  /*<<arg.ml:262:14>>*/ consume_arg$0
                 /*<<arg.ml:262:14>>*/ (0);
              }
              break;
             default:
              var f$7 = param[1];
              if(1 - allow_expand)
                /*<<arg.ml:267:14>>*/ throw  /*<<arg.ml:267:14>>*/ caml_maybe_attach_backtrace
                       /*<<arg.ml:267:14>>*/ ([0,
                        Stdlib[6],
                        cst_Arg_Expand_is_is_only_allo],
                       1);
              var
               arg$6 =
                  /*<<arg.ml:269:22>>*/  /*<<arg.ml:269:22>>*/ get_arg$0
                   /*<<arg.ml:269:22>>*/ (0),
               newarg =
                  /*<<arg.ml:270:25>>*/  /*<<arg.ml:270:25>>*/ caml_call1
                   /*<<arg.ml:270:25>>*/ (f$7, arg$6);
               /*<<arg.ml:271:12>>*/  /*<<arg.ml:271:12>>*/ consume_arg$0
                /*<<arg.ml:271:12>>*/ (0);
              var
               before =
                  /*<<arg.ml:272:25>>*/  /*<<arg.ml:272:25>>*/ caml_call3
                   /*<<arg.ml:272:25>>*/ (Stdlib_Array[6],
                   argv[1],
                   0,
                   current[1] + 1 | 0),
               after =
                  /*<<arg.ml:274:14>>*/  /*<<arg.ml:274:14>>*/ caml_call3
                   /*<<arg.ml:274:14>>*/ (Stdlib_Array[6],
                   argv[1],
                   current[1] + 1 | 0,
                   (argv[1].length - 1 - current[1] | 0) - 1 | 0);
              argv[1] =
                /*<<arg.ml:276:19>>*/ caml_call1
                 /*<<arg.ml:276:19>>*/ (Stdlib_Array[5],
                 [0, before, [0, newarg, [0, after, 0]]]);
              return 0;
           }
           /*<<arg.ml:276:54>>*/ };
       let
        no_arg$0 = no_arg,
        get_arg$0 = get_arg,
        consume_arg$0 = consume_arg,
        treat_action$0 = treat_action;
        /*<<arg.ml:278:8>>*/  /*<<arg.ml:278:8>>*/ treat_action
         /*<<arg.ml:278:8>>*/ (action);
      }
      else
        /*<<arg.ml:279:11>>*/  /*<<arg.ml:279:11>>*/ caml_call1
         /*<<arg.ml:279:11>>*/ (anonfun, s);
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] === Bad){
       var m = exn[2];
        /*<<arg.ml:280:26>>*/ throw  /*<<arg.ml:280:26>>*/ caml_maybe_attach_backtrace
               /*<<arg.ml:280:26>>*/ ( /*<<arg.ml:280:26>>*/ convert_error
                 /*<<arg.ml:280:26>>*/ ([3, m]),
               1);
      }
      if(exn[1] !== Stop) throw caml_maybe_attach_backtrace(exn, 0);
      var e = exn[2];
       /*<<arg.ml:281:27>>*/ throw  /*<<arg.ml:281:27>>*/ caml_maybe_attach_backtrace
              /*<<arg.ml:281:27>>*/ ( /*<<arg.ml:281:27>>*/ convert_error
                /*<<arg.ml:281:27>>*/ (e),
              1);
     }
     current[1]++;
    }
   }
   function parse_and_expand_argv_dynamic
   (current, argv, speclist, anonfun, errmsg){
     /*<<arg.ml:287:2>>*/ return  /*<<arg.ml:287:2>>*/ parse_and_expand_argv_dynamic_
             /*<<arg.ml:287:2>>*/ (1,
             current,
             argv,
             speclist,
             anonfun,
             errmsg) /*<<arg.ml:287:77>>*/ ;
    /*<<arg.ml:287:77>>*/ }
   function parse_argv_dynamic(opt, argv, speclist, anonfun, errmsg){
    var current$0 = opt ? opt[1] : current;
     /*<<arg.ml:290:2>>*/ return  /*<<arg.ml:290:2>>*/ parse_and_expand_argv_dynamic_
             /*<<arg.ml:290:2>>*/ (0,
             current$0,
             [0, argv],
             speclist,
             anonfun,
             errmsg) /*<<arg.ml:291:10>>*/ ;
    /*<<arg.ml:291:10>>*/ }
   function parse_argv(opt, argv, speclist, anonfun, errmsg){
    var current$0 = opt ? opt[1] : current;
     /*<<arg.ml:295:2>>*/ return  /*<<arg.ml:295:2>>*/ parse_argv_dynamic
             /*<<arg.ml:295:2>>*/ ([0, current$0],
             argv,
             [0, speclist],
             anonfun,
             errmsg) /*<<arg.ml:295:72>>*/ ;
    /*<<arg.ml:295:72>>*/ }
   function parse(l, f, msg){
     /*<<arg.ml:299:2>>*/ try{
     var
      _U_ =
         /*<<arg.ml:300:4>>*/  /*<<arg.ml:300:4>>*/ parse_argv
          /*<<arg.ml:300:4>>*/ (0, caml_sys_argv(0), l, f, msg);
      /*<<arg.ml:300:4>>*/ return _U_ /*<<arg.ml:300:4>>*/ ;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] === Bad){
      var msg$0 = exn[2];
       /*<<arg.ml:302:15>>*/  /*<<arg.ml:302:15>>*/ caml_call2
        /*<<arg.ml:302:15>>*/ (Stdlib_Printf[3], _l_, msg$0);
       /*<<arg.ml:302:15>>*/ return  /*<<arg.ml:302:15>>*/ caml_call1
               /*<<arg.ml:302:15>>*/ (Stdlib[99], 2) /*<<arg.ml:303:39>>*/ ;
     }
     if(exn[1] !== Help) throw caml_maybe_attach_backtrace(exn, 0);
     var msg$1 = exn[2];
      /*<<arg.ml:303:16>>*/  /*<<arg.ml:303:16>>*/ caml_call2
       /*<<arg.ml:303:16>>*/ (Stdlib_Printf[2], _m_, msg$1);
      /*<<arg.ml:303:16>>*/ return  /*<<arg.ml:303:16>>*/ caml_call1
              /*<<arg.ml:303:16>>*/ (Stdlib[99], 0) /*<<arg.ml:303:39>>*/ ;
    }
    /*<<arg.ml:303:39>>*/ }
   function parse_dynamic(l, f, msg){
     /*<<arg.ml:307:2>>*/ try{
     var
      _T_ =
         /*<<arg.ml:308:4>>*/  /*<<arg.ml:308:4>>*/ parse_argv_dynamic
          /*<<arg.ml:308:4>>*/ (0, caml_sys_argv(0), l, f, msg);
      /*<<arg.ml:308:4>>*/ return _T_ /*<<arg.ml:308:4>>*/ ;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] === Bad){
      var msg$0 = exn[2];
       /*<<arg.ml:310:15>>*/  /*<<arg.ml:310:15>>*/ caml_call2
        /*<<arg.ml:310:15>>*/ (Stdlib_Printf[3], _n_, msg$0);
       /*<<arg.ml:310:15>>*/ return  /*<<arg.ml:310:15>>*/ caml_call1
               /*<<arg.ml:310:15>>*/ (Stdlib[99], 2) /*<<arg.ml:311:39>>*/ ;
     }
     if(exn[1] !== Help) throw caml_maybe_attach_backtrace(exn, 0);
     var msg$1 = exn[2];
      /*<<arg.ml:311:16>>*/  /*<<arg.ml:311:16>>*/ caml_call2
       /*<<arg.ml:311:16>>*/ (Stdlib_Printf[2], _o_, msg$1);
      /*<<arg.ml:311:16>>*/ return  /*<<arg.ml:311:16>>*/ caml_call1
              /*<<arg.ml:311:16>>*/ (Stdlib[99], 0) /*<<arg.ml:311:39>>*/ ;
    }
    /*<<arg.ml:311:39>>*/ }
   function parse_expand(l, f, msg){
     /*<<arg.ml:314:2>>*/ try{
     var
      argv =  /*<<arg.ml:315:15>>*/ [0, caml_sys_argv(0)],
      spec =  /*<<arg.ml:316:15>>*/ [0, l],
      current$0 =  /*<<arg.ml:317:18>>*/ [0, current[1]],
      _S_ =
         /*<<arg.ml:318:4>>*/  /*<<arg.ml:318:4>>*/ parse_and_expand_argv_dynamic
          /*<<arg.ml:318:4>>*/ (current$0, argv, spec, f, msg);
      /*<<arg.ml:318:4>>*/ return _S_ /*<<arg.ml:318:4>>*/ ;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] === Bad){
      var msg$0 = exn[2];
       /*<<arg.ml:320:15>>*/  /*<<arg.ml:320:15>>*/ caml_call2
        /*<<arg.ml:320:15>>*/ (Stdlib_Printf[3], _p_, msg$0);
       /*<<arg.ml:320:15>>*/ return  /*<<arg.ml:320:15>>*/ caml_call1
               /*<<arg.ml:320:15>>*/ (Stdlib[99], 2) /*<<arg.ml:321:39>>*/ ;
     }
     if(exn[1] !== Help) throw caml_maybe_attach_backtrace(exn, 0);
     var msg$1 = exn[2];
      /*<<arg.ml:321:16>>*/  /*<<arg.ml:321:16>>*/ caml_call2
       /*<<arg.ml:321:16>>*/ (Stdlib_Printf[2], _q_, msg$1);
      /*<<arg.ml:321:16>>*/ return  /*<<arg.ml:321:16>>*/ caml_call1
              /*<<arg.ml:321:16>>*/ (Stdlib[99], 0) /*<<arg.ml:321:39>>*/ ;
    }
    /*<<arg.ml:321:39>>*/ }
   function second_word(s){
    var len = caml_ml_string_length(s);
    function loop(n){
     var n$0 = n;
      /*<<arg.ml:327:4>>*/ for(;;){
      if(len <= n$0)  /*<<arg.ml:326:2>>*/ return len /*<<arg.ml:326:2>>*/ ;
       /*<<arg.ml:328:12>>*/ if
       (32
        !==
          /*<<arg.ml:328:12>>*/ caml_string_get /*<<arg.ml:328:12>>*/ (s, n$0))
        /*<<arg.ml:329:9>>*/ return n$0 /*<<arg.ml:329:9>>*/ ;
      var n$1 =  /*<<arg.ml:328:29>>*/ n$0 + 1 | 0;
      n$0 = n$1;
     }
     /*<<arg.ml:329:10>>*/ }
     /*<<arg.ml:331:2>>*/ try{
     var
      n$0 =
         /*<<arg.ml:331:8>>*/  /*<<arg.ml:331:8>>*/ caml_call2
          /*<<arg.ml:331:8>>*/ (Stdlib_String[36], s, 9);
    }
    catch(_Q_){
     var _O_ = caml_wrap_exception(_Q_);
     if(_O_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_O_, 0);
      /*<<arg.ml:334:6>>*/ try{
      var
       n =
          /*<<arg.ml:334:18>>*/  /*<<arg.ml:334:18>>*/ caml_call2
           /*<<arg.ml:334:18>>*/ (Stdlib_String[36], s, 32);
     }
     catch(_R_){
      var _P_ = caml_wrap_exception(_R_);
      if(_P_ === Stdlib[8])
        /*<<arg.ml:336:31>>*/ return len /*<<arg.ml:336:31>>*/ ;
      throw caml_maybe_attach_backtrace(_P_, 0);
     }
      /*<<arg.ml:334:18>>*/ return  /*<<arg.ml:334:18>>*/ loop
              /*<<arg.ml:334:18>>*/ (n + 1 | 0) /*<<arg.ml:337:9>>*/ ;
    }
     /*<<arg.ml:331:8>>*/ return  /*<<arg.ml:331:8>>*/ loop
             /*<<arg.ml:331:8>>*/ (n$0 + 1 | 0) /*<<arg.ml:337:9>>*/ ;
    /*<<arg.ml:337:9>>*/ }
   function max_arg_len(cur, param){
    var doc = param[3], spec = param[2], kwd = param[1];
     /*<<arg.ml:341:2>>*/ if(11 === spec[0])
     return caml_call2(Stdlib_Int[11], cur, caml_ml_string_length(kwd)) /*<<arg.ml:343:58>>*/ ;
    var
     _N_ =
       caml_ml_string_length(kwd)
       +  /*<<arg.ml:343:42>>*/ second_word /*<<arg.ml:343:42>>*/ (doc)
       | 0;
    return caml_call2(Stdlib_Int[11], cur, _N_) /*<<arg.ml:343:58>>*/ ;
    /*<<arg.ml:343:58>>*/ }
   function replace_leading_tab(s){
    var seen =  /*<<arg.ml:347:13>>*/ [0, 0];
     /*<<arg.ml:348:2>>*/ return  /*<<arg.ml:348:2>>*/ caml_call2
             /*<<arg.ml:348:2>>*/ (Stdlib_String[18],
             function(c){
               /*<<arg.ml:348:13>>*/ if(9 === c && ! seen[1]){
               seen[1] = 1;
                /*<<arg.ml:348:60>>*/ return 32 /*<<arg.ml:348:60>>*/ ;
              }
               /*<<arg.ml:348:71>>*/ return c /*<<arg.ml:348:71>>*/ ;
              /*<<arg.ml:348:73>>*/ },
             s) /*<<arg.ml:348:75>>*/ ;
    /*<<arg.ml:348:75>>*/ }
   function align(opt, speclist){
    var
     limit = opt ? opt[1] : Stdlib[19],
     completed =
        /*<<arg.ml:374:18>>*/  /*<<arg.ml:374:18>>*/ add_help
         /*<<arg.ml:374:18>>*/ (speclist),
     len =
        /*<<arg.ml:375:12>>*/  /*<<arg.ml:375:12>>*/ caml_call3
         /*<<arg.ml:375:12>>*/ (Stdlib_List[26], max_arg_len, 0, completed),
     len$0 =
        /*<<arg.ml:376:12>>*/  /*<<arg.ml:376:12>>*/ caml_call2
         /*<<arg.ml:376:12>>*/ (Stdlib_Int[10], len, limit);
     /*<<arg.ml:377:2>>*/ return  /*<<arg.ml:377:2>>*/ caml_call2
             /*<<arg.ml:377:2>>*/ (Stdlib_List[20],
             function(ksd){
              var kwd = ksd[1], spec = ksd[2];
              if(ksd[3] === cst$8)
                /*<<arg.ml:355:6>>*/ return ksd /*<<arg.ml:355:6>>*/ ;
              if(11 === spec[0]){
               var
                msg$0 = ksd[3],
                cutcol$0 =
                   /*<<arg.ml:357:19>>*/  /*<<arg.ml:357:19>>*/ second_word
                    /*<<arg.ml:357:19>>*/ (msg$0),
                _K_ =
                   /*<<arg.ml:358:32>>*/  /*<<arg.ml:358:32>>*/ caml_call2
                    /*<<arg.ml:358:32>>*/ (Stdlib_Int[11],
                    0,
                    len$0 - cutcol$0 | 0)
                  + 3
                  | 0,
                spaces$0 =
                   /*<<arg.ml:358:19>>*/  /*<<arg.ml:358:19>>*/ caml_call2
                    /*<<arg.ml:358:19>>*/ (Stdlib_String[1], _K_, 32),
                _L_ =
                   /*<<arg.ml:359:34>>*/  /*<<arg.ml:359:34>>*/ replace_leading_tab
                    /*<<arg.ml:359:34>>*/ (msg$0),
                _M_ =
                   /*<<arg.ml:359:25>>*/  /*<<arg.ml:359:25>>*/ caml_call2
                    /*<<arg.ml:359:25>>*/ (Stdlib[28], spaces$0, _L_);
                /*<<arg.ml:359:6>>*/ return [0,
                       kwd,
                       spec,
                        /*<<arg.ml:359:18>>*/ caml_call2
                         /*<<arg.ml:359:18>>*/ (Stdlib[28], cst$7, _M_)] /*<<arg.ml:359:6>>*/ ;
              }
              var
               msg = ksd[3],
               spec$0 = ksd[2],
               cutcol =
                  /*<<arg.ml:361:19>>*/  /*<<arg.ml:361:19>>*/ second_word
                   /*<<arg.ml:361:19>>*/ (msg),
               kwd_len =
                  /*<<arg.ml:362:6>>*/  /*<<arg.ml:362:6>>*/ caml_ml_string_length
                   /*<<arg.ml:362:6>>*/ (kwd),
               diff = (len$0 - kwd_len | 0) - cutcol | 0;
               /*<<arg.ml:364:6>>*/ if(0 >= diff)
                /*<<arg.ml:365:8>>*/ return [0,
                       kwd,
                       spec$0,
                        /*<<arg.ml:365:20>>*/ replace_leading_tab
                         /*<<arg.ml:365:20>>*/ (msg)] /*<<arg.ml:365:8>>*/ ;
              var
               spaces =
                  /*<<arg.ml:367:21>>*/  /*<<arg.ml:367:21>>*/ caml_call2
                   /*<<arg.ml:367:21>>*/ (Stdlib_String[1], diff, 32),
               _I_ =
                  /*<<arg.ml:368:32>>*/  /*<<arg.ml:368:32>>*/ replace_leading_tab
                   /*<<arg.ml:368:32>>*/ (msg),
               prefix =
                  /*<<arg.ml:368:21>>*/  /*<<arg.ml:368:21>>*/ caml_call3
                   /*<<arg.ml:368:21>>*/ (Stdlib_String[16], _I_, 0, cutcol),
               suffix =
                  /*<<arg.ml:369:21>>*/  /*<<arg.ml:369:21>>*/ caml_call3
                   /*<<arg.ml:369:21>>*/ (Stdlib_String[16],
                   msg,
                   cutcol,
                   caml_ml_string_length(msg) - cutcol | 0),
               _J_ =
                  /*<<arg.ml:370:29>>*/  /*<<arg.ml:370:29>>*/ caml_call2
                   /*<<arg.ml:370:29>>*/ (Stdlib[28], spaces, suffix);
               /*<<arg.ml:370:8>>*/ return [0,
                      kwd,
                      spec$0,
                       /*<<arg.ml:370:20>>*/ caml_call2
                        /*<<arg.ml:370:20>>*/ (Stdlib[28], prefix, _J_)] /*<<arg.ml:370:8>>*/ ;
             },
             completed) /*<<arg.ml:377:38>>*/ ;
    /*<<arg.ml:377:38>>*/ }
   function read_aux(trim, sep, file){
    var
     ic =
        /*<<arg.ml:387:11>>*/  /*<<arg.ml:387:11>>*/ caml_call1
         /*<<arg.ml:387:11>>*/ (Stdlib[80], file),
     buf =
        /*<<arg.ml:388:12>>*/  /*<<arg.ml:388:12>>*/ caml_call1
         /*<<arg.ml:388:12>>*/ (Stdlib_Buffer[1], 200),
     words =  /*<<arg.ml:389:14>>*/ [0, 0];
    function stash(param){
     var
      word =
         /*<<arg.ml:391:15>>*/  /*<<arg.ml:391:15>>*/ caml_call1
          /*<<arg.ml:391:15>>*/ (Stdlib_Buffer[2], buf);
      /*<<arg.ml:392:4>>*/ if(trim){
      var len = caml_ml_string_length(word);
      a:
      {
        /*<<arg.ml:381:2>>*/ if
        (0 < len
         &&
          13
          ===
            /*<<arg.ml:381:16>>*/ caml_string_get
             /*<<arg.ml:381:16>>*/ (word, len - 1 | 0)){
        var
         _H_ =
            /*<<arg.ml:382:4>>*/ caml_call3
             /*<<arg.ml:382:4>>*/ (Stdlib_String[16], word, 0, len - 1 | 0);
        break a;
       }
       var _H_ = word;
      }
      var word$0 = _H_;
     }
     else
      var word$0 = word;
     words[1] = [0, word$0, words[1]];
      /*<<arg.ml:390:2>>*/ return  /*<<arg.ml:390:2>>*/ caml_call1
              /*<<arg.ml:390:2>>*/ (Stdlib_Buffer[8], buf) /*<<arg.ml:394:20>>*/ ;
     /*<<arg.ml:394:20>>*/ }
     /*<<arg.ml:396:2>>*/ try{
     for(;;){
      var
       c =
          /*<<arg.ml:398:16>>*/  /*<<arg.ml:398:16>>*/ caml_call1
           /*<<arg.ml:398:16>>*/ (Stdlib[82], ic);
      if(c === sep)
        /*<<arg.ml:399:24>>*/  /*<<arg.ml:399:24>>*/ stash
         /*<<arg.ml:399:24>>*/ (0);
      else
        /*<<arg.ml:399:38>>*/  /*<<arg.ml:399:38>>*/ caml_call2
         /*<<arg.ml:399:38>>*/ (Stdlib_Buffer[12], buf, c);
     }
    }
    catch(_G_){
     var _E_ = caml_wrap_exception(_G_);
     if(_E_ !== Stdlib[12]) throw caml_maybe_attach_backtrace(_E_, 0);
     if
      (0
       <
         /*<<arg.ml:403:5>>*/ caml_call1
          /*<<arg.ml:403:5>>*/ (Stdlib_Buffer[7], buf))
       /*<<arg.ml:403:32>>*/  /*<<arg.ml:403:32>>*/ stash
        /*<<arg.ml:403:32>>*/ (0);
      /*<<arg.ml:404:2>>*/  /*<<arg.ml:404:2>>*/ caml_call1
       /*<<arg.ml:404:2>>*/ (Stdlib[93], ic);
     var
      _F_ =
         /*<<arg.ml:405:16>>*/  /*<<arg.ml:405:16>>*/ caml_call1
          /*<<arg.ml:405:16>>*/ (Stdlib_List[10], words[1]);
      /*<<arg.ml:405:16>>*/ return  /*<<arg.ml:405:16>>*/ caml_call1
              /*<<arg.ml:405:16>>*/ (Stdlib_Array[11], _F_) /*<<arg.ml:405:33>>*/ ;
    }
    /*<<arg.ml:405:33>>*/ }
   var _r_ =  /*<<arg.ml:386:13>>*/ 10, _s_ = 1;
   function read_arg(_D_){ /*<<?>>*/ return read_aux(_s_, _r_, _D_);}
   var
    _t_ =  /*<<arg.ml:407:15>>*/ 0,
    _u_ = 0,
    _v_ = [0, [2, 0, [0, 0]], "%s%c"];
   function read_arg0(_C_){ /*<<?>>*/ return read_aux(_u_, _t_, _C_);}
   function write_aux(sep, file, args){
    var
     oc =
        /*<<arg.ml:412:11>>*/  /*<<arg.ml:412:11>>*/ caml_call1
         /*<<arg.ml:412:11>>*/ (Stdlib[61], file);
     /*<<arg.ml:413:2>>*/  /*<<arg.ml:413:2>>*/ caml_call2
      /*<<arg.ml:413:2>>*/ (Stdlib_Array[12],
      function(s){
        /*<<arg.ml:413:23>>*/ return caml_call4
               (Stdlib_Printf[1], oc, _v_, s, sep) /*<<arg.ml:413:46>>*/ ;
       /*<<arg.ml:413:46>>*/ },
      args);
     /*<<arg.ml:413:2>>*/ return  /*<<arg.ml:413:2>>*/ caml_call1
             /*<<arg.ml:413:2>>*/ (Stdlib[76], oc) /*<<arg.ml:414:14>>*/ ;
    /*<<arg.ml:414:14>>*/ }
   var _w_ =  /*<<arg.ml:411:14>>*/ 10;
   function write_arg(_A_, _B_){ /*<<?>>*/ return write_aux(_w_, _A_, _B_);}
   var _x_ =  /*<<arg.ml:416:16>>*/ 0;
   function write_arg0(_y_, _z_){ /*<<?>>*/ return write_aux(_x_, _y_, _z_);}
   var
    Stdlib_Arg =
      [0,
       parse,
       parse_dynamic,
       parse_argv,
       parse_argv_dynamic,
       parse_and_expand_argv_dynamic,
       parse_expand,
       Help,
       Bad,
       usage,
       usage_string,
       align,
       current,
       read_arg,
       read_arg0,
       write_arg,
       write_arg0];
   runtime.caml_register_global(55, Stdlib_Arg, "Stdlib__Arg");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Printexc
//# unitInfo: Requires: Stdlib, Stdlib__Atomic, Stdlib__Buffer, Stdlib__Obj, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst$4 =  /*<<?>>*/ "",
    cst_s =  /*<<?>>*/ "%s\n",
    cst_Program_not_linked_with_g_$0 =
       /*<<?>>*/ "(Program not linked with -g, cannot print stack backtrace)\n",
    cst_characters =  /*<<?>>*/ ", characters ",
    cst_Fatal_error_exception =  /*<<?>>*/ "Fatal error: exception ",
    cst_Fatal_error_exception_s =  /*<<?>>*/ "Fatal error: exception %s\n",
    cst_Uncaught_exception =  /*<<?>>*/ "Uncaught exception: ",
    cst_Uncaught_exception_s =  /*<<?>>*/ "Uncaught exception: %s\n",
    caml_check_bound =  /*<<?>>*/ runtime.caml_check_bound,
    caml_get_exception_raw_backtra =
       /*<<?>>*/ runtime.caml_get_exception_raw_backtrace,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_obj_tag =  /*<<?>>*/ runtime.caml_obj_tag,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) === 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) === 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$4,
    cst$3 = cst$4,
    partial = [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]],
    cst$1 = cst$4,
    cst$2 = cst$4,
    cst = "_",
    locfmt =
      [0,
       [11,
        'File "',
        [2,
         0,
         [11,
          '", line ',
          [4,
           0,
           0,
           0,
           [11,
            cst_characters,
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [11, ": ", [2, 0, 0]]]]]]]]]],
       'File "%s", line %d, characters %d-%d: %s'],
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Atomic = global_data.Stdlib__Atomic,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Obj = global_data.Stdlib__Obj,
    printers =
       /*<<printexc.ml:20:15>>*/  /*<<printexc.ml:20:15>>*/ caml_call1
        /*<<printexc.ml:20:15>>*/ (Stdlib_Atomic[1], 0),
    _a_ = [0, [3, 0, 0], "%S"],
    _b_ = [0, [4, 0, 0, 0, 0], "%d"],
    _c_ = [0, [11, ", ", [2, 0, [2, 0, 0]]], ", %s%s"],
    _d_ = [0, [12, 40, [2, 0, [2, 0, [12, 41, 0]]]], "(%s%s)"],
    _e_ = [0, [12, 40, [2, 0, [12, 41, 0]]], "(%s)"],
    cst_Out_of_memory = "Out of memory",
    cst_Stack_overflow = "Stack overflow",
    cst_Pattern_matching_failed = "Pattern matching failed",
    cst_Assertion_failed = "Assertion failed",
    cst_Undefined_recursive_module = "Undefined recursive module",
    _f_ =
      [0,
       [11, cst_Uncaught_exception, [2, 0, [12, 10, 0]]],
       cst_Uncaught_exception_s],
    _g_ =
      [0,
       [11, cst_Uncaught_exception, [2, 0, [12, 10, 0]]],
       cst_Uncaught_exception_s],
    cst_Raised_at = "Raised at",
    cst_Re_raised_at = "Re-raised at",
    cst_Raised_by_primitive_operat = "Raised by primitive operation at",
    cst_Called_from = "Called from",
    _h_ = [0, [12, 32, [4, 0, 0, 0, 0]], " %d"],
    cst_inlined = " (inlined)",
    _i_ =
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           ' in file "',
           [2,
            0,
            [12,
             34,
             [2, 0, [11, ", line", [2, 0, [11, cst_characters, partial]]]]]]]]]],
       '%s %s in file "%s"%s, line%s, characters %d-%d'],
    _j_ = [0, [11, "s ", [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]]], "s %d-%d"],
    _k_ = [0, [2, 0, [11, " unknown location", 0]], "%s unknown location"],
    _l_ = [0, [2, 0, [12, 10, 0]], cst_s],
    _m_ =
      [0,
       [11, cst_Program_not_linked_with_g_$0, 0],
       cst_Program_not_linked_with_g_$0],
    _n_ = [0, [2, 0, [12, 10, 0]], cst_s],
    cst_Program_not_linked_with_g_ = cst_Program_not_linked_with_g_$0;
   function field(x, i){
    var f =  /*<<printexc.ml:25:10>>*/ x[1 + i];
     /*<<printexc.ml:26:9>>*/ if
     (!
       /*<<printexc.ml:26:9>>*/ caml_call1
        /*<<printexc.ml:26:9>>*/ (Stdlib_Obj[1], f))
      /*<<printexc.ml:27:4>>*/ return  /*<<printexc.ml:27:4>>*/ caml_call2
              /*<<printexc.ml:27:4>>*/ (Stdlib_Printf[4], _b_, f) /*<<printexc.ml:33:7>>*/ ;
    var _ah_ =  /*<<printexc.ml:28:7>>*/ Stdlib_Obj[15];
    if
     ( /*<<printexc.ml:28:10>>*/ caml_obj_tag /*<<printexc.ml:28:10>>*/ (f)
      === _ah_)
      /*<<printexc.ml:29:4>>*/ return  /*<<printexc.ml:29:4>>*/ caml_call2
              /*<<printexc.ml:29:4>>*/ (Stdlib_Printf[4], _a_, f) /*<<printexc.ml:33:7>>*/ ;
    var _ai_ =  /*<<printexc.ml:30:7>>*/ Stdlib_Obj[16];
    return  /*<<printexc.ml:30:10>>*/ caml_obj_tag
              /*<<printexc.ml:30:10>>*/ (f)
            === _ai_
            ?  /*<<printexc.ml:31:4>>*/ caml_call1
               /*<<printexc.ml:31:4>>*/ (Stdlib[35], f)
            : cst /*<<printexc.ml:33:7>>*/ ;
    /*<<printexc.ml:33:7>>*/ }
   function other_fields(x, i){
     /*<<printexc.ml:36:2>>*/ if(x.length - 1 <= i)
      /*<<printexc.ml:36:26>>*/ return cst$0 /*<<printexc.ml:36:26>>*/ ;
    var
     _af_ =
        /*<<printexc.ml:37:36>>*/  /*<<printexc.ml:37:36>>*/ other_fields
         /*<<printexc.ml:37:36>>*/ (x, i + 1 | 0),
     _ag_ =
        /*<<printexc.ml:37:24>>*/  /*<<printexc.ml:37:24>>*/ field
         /*<<printexc.ml:37:24>>*/ (x, i);
     /*<<printexc.ml:37:36>>*/ return  /*<<printexc.ml:37:36>>*/ caml_call3
             /*<<printexc.ml:37:36>>*/ (Stdlib_Printf[4], _c_, _ag_, _af_) /*<<printexc.ml:37:58>>*/ ;
    /*<<printexc.ml:37:58>>*/ }
   function use_printers(x){
    var
     param =
        /*<<printexc.ml:53:7>>*/ caml_call1
         /*<<printexc.ml:53:7>>*/ (Stdlib_Atomic[3], printers);
     /*<<printexc.ml:47:17>>*/ for(;;){
     if(! param)
       /*<<printexc.ml:52:12>>*/ return 0 /*<<printexc.ml:52:12>>*/ ;
     var tl = param[2], hd = param[1];
     a:
     {
       /*<<printexc.ml:49:8>>*/ try{
       var
        val =
           /*<<printexc.ml:49:15>>*/  /*<<printexc.ml:49:15>>*/ caml_call1
            /*<<printexc.ml:49:15>>*/ (hd, x);
      }
      catch(_ae_){break a;}
      if(val){
       var s = val[1];
        /*<<printexc.ml:51:21>>*/ return [0, s] /*<<printexc.ml:51:21>>*/ ;
      }
     }
     param = tl;
    }
    /*<<printexc.ml:53:28>>*/ }
   function string_of_extension_constructo(t){
     /*<<printexc.ml:64:2>>*/ if
     (0
      ===  /*<<printexc.ml:56:5>>*/ caml_obj_tag /*<<printexc.ml:56:5>>*/ (t)){
     var
      constructor =  /*<<printexc.ml:60:17>>*/ t[1][1],
      match = t.length - 1;
     if(2 < match >>> 0)
      var
       _aa_ =
          /*<<printexc.ml:44:38>>*/  /*<<printexc.ml:44:38>>*/ other_fields
           /*<<printexc.ml:44:38>>*/ (t, 2),
       _ab_ =
          /*<<printexc.ml:44:26>>*/  /*<<printexc.ml:44:26>>*/ field
           /*<<printexc.ml:44:26>>*/ (t, 1),
       _ad_ =
          /*<<printexc.ml:44:38>>*/ caml_call3
           /*<<printexc.ml:44:38>>*/ (Stdlib_Printf[4], _d_, _ab_, _aa_);
     else
      switch(match){
        case 0:
         var _ad_ = cst$1; break;
        case 1:
         var _ad_ = cst$2; break;
        default:
         var
          _ac_ =
             /*<<printexc.ml:43:24>>*/  /*<<printexc.ml:43:24>>*/ field
              /*<<printexc.ml:43:24>>*/ (t, 1),
          _ad_ =
             /*<<printexc.ml:43:24>>*/ caml_call2
              /*<<printexc.ml:43:24>>*/ (Stdlib_Printf[4], _e_, _ac_);
      }
     var match$0 = [0, constructor, [0, _ad_]];
    }
    else
     var match$0 = [0, t[1], 0];
    var fields_opt = match$0[2], constructor$0 = match$0[1];
     /*<<printexc.ml:65:2>>*/ if(! fields_opt)
      /*<<printexc.ml:66:12>>*/ return constructor$0 /*<<printexc.ml:66:12>>*/ ;
    var f = fields_opt[1];
     /*<<printexc.ml:67:14>>*/ return  /*<<printexc.ml:67:14>>*/ caml_call2
             /*<<printexc.ml:67:14>>*/ (Stdlib[28], constructor$0, f) /*<<printexc.ml:67:29>>*/ ;
    /*<<printexc.ml:67:29>>*/ }
   function to_string_default(x){
     /*<<printexc.ml:69:24>>*/ if(x === Stdlib[9])
      /*<<printexc.ml:70:21>>*/ return cst_Out_of_memory /*<<printexc.ml:70:21>>*/ ;
    if(x === Stdlib[10])
      /*<<printexc.ml:71:22>>*/ return cst_Stack_overflow /*<<printexc.ml:71:22>>*/ ;
    if(x[1] === Stdlib[4]){
     var match = x[2], char$0 = match[3], line = match[2], file = match[1];
      /*<<printexc.ml:73:6>>*/ return  /*<<printexc.ml:73:6>>*/ caml_call6
              /*<<printexc.ml:73:6>>*/ (Stdlib_Printf[4],
              locfmt,
              file,
              line,
              char$0,
              char$0 + 5 | 0,
              cst_Pattern_matching_failed) /*<<printexc.ml:79:50>>*/ ;
    }
    if(x[1] === Stdlib[5]){
     var
      match$0 = x[2],
      char$1 = match$0[3],
      line$0 = match$0[2],
      file$0 = match$0[1];
      /*<<printexc.ml:75:6>>*/ return  /*<<printexc.ml:75:6>>*/ caml_call6
              /*<<printexc.ml:75:6>>*/ (Stdlib_Printf[4],
              locfmt,
              file$0,
              line$0,
              char$1,
              char$1 + 6 | 0,
              cst_Assertion_failed) /*<<printexc.ml:79:50>>*/ ;
    }
    if(x[1] !== Stdlib[15])
      /*<<printexc.ml:79:6>>*/ return  /*<<printexc.ml:79:6>>*/ string_of_extension_constructo
              /*<<printexc.ml:79:6>>*/ (x) /*<<printexc.ml:79:50>>*/ ;
    var
     match$1 = x[2],
     char$2 = match$1[3],
     line$1 = match$1[2],
     file$1 = match$1[1];
     /*<<printexc.ml:77:6>>*/ return  /*<<printexc.ml:77:6>>*/ caml_call6
             /*<<printexc.ml:77:6>>*/ (Stdlib_Printf[4],
             locfmt,
             file$1,
             line$1,
             char$2,
             char$2 + 6 | 0,
             cst_Undefined_recursive_module) /*<<printexc.ml:79:50>>*/ ;
    /*<<printexc.ml:79:50>>*/ }
   function to_string(e){
    var
     match =
        /*<<printexc.ml:82:8>>*/  /*<<printexc.ml:82:8>>*/ use_printers
         /*<<printexc.ml:82:8>>*/ (e);
    if(! match)
      /*<<printexc.ml:84:12>>*/ return  /*<<printexc.ml:84:12>>*/ to_string_default
              /*<<printexc.ml:84:12>>*/ (e) /*<<printexc.ml:84:31>>*/ ;
    var s = match[1];
     /*<<printexc.ml:83:14>>*/ return s /*<<printexc.ml:83:14>>*/ ;
    /*<<printexc.ml:84:31>>*/ }
   function print(fct, arg){
     /*<<printexc.ml:87:2>>*/ try{
     var
      _$_ =
         /*<<printexc.ml:88:4>>*/  /*<<printexc.ml:88:4>>*/ caml_call1
          /*<<printexc.ml:88:4>>*/ (fct, arg);
      /*<<printexc.ml:88:4>>*/ return _$_ /*<<printexc.ml:88:4>>*/ ;
    }
    catch(x$0){
     var
      x = caml_wrap_exception(x$0),
      ___ =
         /*<<printexc.ml:90:39>>*/  /*<<printexc.ml:90:39>>*/ to_string
          /*<<printexc.ml:90:39>>*/ (x);
      /*<<printexc.ml:90:4>>*/  /*<<printexc.ml:90:4>>*/ caml_call2
       /*<<printexc.ml:90:4>>*/ (Stdlib_Printf[3], _f_, ___);
      /*<<printexc.ml:91:4>>*/  /*<<printexc.ml:91:4>>*/ caml_call1
       /*<<printexc.ml:91:4>>*/ (Stdlib[63], Stdlib[40]);
      /*<<printexc.ml:92:4>>*/ throw  /*<<printexc.ml:92:4>>*/ caml_maybe_attach_backtrace
             /*<<printexc.ml:92:4>>*/ (x, 0);
    }
    /*<<printexc.ml:92:11>>*/ }
   function catch$0(fct, arg){
     /*<<printexc.ml:95:2>>*/ try{
     var
      _Z_ =
         /*<<printexc.ml:96:4>>*/  /*<<printexc.ml:96:4>>*/ caml_call1
          /*<<printexc.ml:96:4>>*/ (fct, arg);
      /*<<printexc.ml:96:4>>*/ return _Z_ /*<<printexc.ml:96:4>>*/ ;
    }
    catch(x$0){
     var x = caml_wrap_exception(x$0);
      /*<<printexc.ml:98:4>>*/  /*<<printexc.ml:98:4>>*/ caml_call1
       /*<<printexc.ml:98:4>>*/ (Stdlib[63], Stdlib[39]);
     var
      _Y_ =
         /*<<printexc.ml:99:39>>*/  /*<<printexc.ml:99:39>>*/ to_string
          /*<<printexc.ml:99:39>>*/ (x);
      /*<<printexc.ml:99:4>>*/  /*<<printexc.ml:99:4>>*/ caml_call2
       /*<<printexc.ml:99:4>>*/ (Stdlib_Printf[3], _g_, _Y_);
      /*<<printexc.ml:99:4>>*/ return  /*<<printexc.ml:99:4>>*/ caml_call1
              /*<<printexc.ml:99:4>>*/ (Stdlib[99], 2) /*<<printexc.ml:100:10>>*/ ;
    }
    /*<<printexc.ml:100:10>>*/ }
   function raw_backtrace_entries(bt){
     /*<<printexc.ml:106:31>>*/ return bt /*<<printexc.ml:106:31>>*/ ;
    /*<<printexc.ml:106:33>>*/ }
   function convert_raw_backtrace(bt){
     /*<<printexc.ml:138:2>>*/ return [0,
             /*<<printexc.ml:138:11>>*/ runtime.caml_convert_raw_backtrace
              /*<<printexc.ml:138:11>>*/ (bt)] /*<<printexc.ml:138:6>>*/ ;
    /*<<printexc.ml:139:24>>*/ }
   function format_backtrace_slot(pos, slot){
    function info(is_raise){
      /*<<printexc.ml:143:4>>*/ return is_raise
             ? 0 === pos ? cst_Raised_at : cst_Re_raised_at
             : 0 === pos ? cst_Raised_by_primitive_operat : cst_Called_from /*<<printexc.ml:146:75>>*/ ;
     /*<<printexc.ml:146:75>>*/ }
     /*<<printexc.ml:148:2>>*/ if(0 === slot[0]){
     var
      lines =
        slot[3] === slot[6]
         ?  /*<<printexc.ml:157:10>>*/ caml_call2
            /*<<printexc.ml:157:10>>*/ (Stdlib_Printf[4], _h_, slot[3])
         :  /*<<printexc.ml:159:10>>*/ caml_call3
            /*<<printexc.ml:159:10>>*/ (Stdlib_Printf[4],
            _j_,
            slot[3],
            slot[6]),
      _R_ = slot[7],
      _S_ = slot[4],
      _T_ = slot[8] ? cst_inlined : cst$3,
      _U_ = slot[2],
      _V_ = slot[9],
      _W_ =
         /*<<printexc.ml:162:14>>*/  /*<<printexc.ml:162:14>>*/ info
          /*<<printexc.ml:162:14>>*/ (slot[1]);
      /*<<printexc.ml:161:6>>*/ return [0,
              /*<<printexc.ml:161:11>>*/ caml_call8
               /*<<printexc.ml:161:11>>*/ (Stdlib_Printf[4],
               _i_,
               _W_,
               _V_,
               _U_,
               _T_,
               lines,
               _S_,
               _R_)] /*<<printexc.ml:161:6>>*/ ;
    }
    if(slot[1])
      /*<<printexc.ml:151:50>>*/ return 0 /*<<printexc.ml:151:50>>*/ ;
    var
     _X_ =
        /*<<printexc.ml:153:44>>*/  /*<<printexc.ml:153:44>>*/ info
         /*<<printexc.ml:153:44>>*/ (0);
     /*<<printexc.ml:153:8>>*/ return [0,
             /*<<printexc.ml:153:13>>*/ caml_call2
              /*<<printexc.ml:153:13>>*/ (Stdlib_Printf[4], _k_, _X_)] /*<<printexc.ml:153:8>>*/ ;
    /*<<printexc.ml:164:44>>*/ }
   function print_raw_backtrace(outchan, raw_backtrace){
    var
     backtrace =
        /*<<printexc.ml:179:36>>*/  /*<<printexc.ml:179:36>>*/ convert_raw_backtrace
         /*<<printexc.ml:179:36>>*/ (raw_backtrace);
    if(! backtrace)
      /*<<printexc.ml:169:6>>*/ return  /*<<printexc.ml:169:6>>*/ caml_call2
              /*<<printexc.ml:169:6>>*/ (Stdlib_Printf[1], outchan, _m_) /*<<printexc.ml:179:73>>*/ ;
    var a = backtrace[1], _P_ = a.length - 2 | 0, _O_ = 0;
    if(_P_ >= 0){
     var i = _O_;
     for(;;){
      var
       match =
          /*<<printexc.ml:173:14>>*/  /*<<printexc.ml:173:14>>*/ format_backtrace_slot
           /*<<printexc.ml:173:14>>*/ (i, caml_check_bound(a, i)[1 + i]);
      if(match){
       var str = match[1];
        /*<<printexc.ml:175:24>>*/  /*<<printexc.ml:175:24>>*/ caml_call3
         /*<<printexc.ml:175:24>>*/ (Stdlib_Printf[1], outchan, _l_, str);
      }
      var _Q_ =  /*<<printexc.ml:172:6>>*/ i + 1 | 0;
      if(_P_ === i) break;
      i = _Q_;
     }
    }
    return 0;
    /*<<printexc.ml:179:73>>*/ }
   function print_backtrace(outchan){
     /*<<printexc.ml:183:2>>*/ return  /*<<printexc.ml:183:30>>*/ print_raw_backtrace
             /*<<printexc.ml:183:30>>*/ (outchan,
              /*<<printexc.ml:183:30>>*/ caml_get_exception_raw_backtra
               /*<<printexc.ml:183:30>>*/ (0)) /*<<printexc.ml:183:52>>*/ ;
    /*<<printexc.ml:183:52>>*/ }
   function raw_backtrace_to_string(raw_backtrace){
    var
     backtrace =
        /*<<printexc.ml:199:22>>*/  /*<<printexc.ml:199:22>>*/ convert_raw_backtrace
         /*<<printexc.ml:199:22>>*/ (raw_backtrace);
    if(! backtrace)
      /*<<printexc.ml:188:5>>*/ return cst_Program_not_linked_with_g_ /*<<printexc.ml:188:5>>*/ ;
    var
     a = backtrace[1],
     b =
        /*<<printexc.ml:190:14>>*/  /*<<printexc.ml:190:14>>*/ caml_call1
         /*<<printexc.ml:190:14>>*/ (Stdlib_Buffer[1], 1024),
     _M_ = a.length - 2 | 0,
     _L_ =  /*<<printexc.ml:190:14>>*/ 0;
    if(_M_ >= 0){
     var i = _L_;
     for(;;){
      var
       match =
          /*<<printexc.ml:192:14>>*/  /*<<printexc.ml:192:14>>*/ format_backtrace_slot
           /*<<printexc.ml:192:14>>*/ (i, caml_check_bound(a, i)[1 + i]);
      if(match){
       var str = match[1];
        /*<<printexc.ml:194:24>>*/  /*<<printexc.ml:194:24>>*/ caml_call3
         /*<<printexc.ml:194:24>>*/ (Stdlib_Printf[5], b, _n_, str);
      }
      var _N_ =  /*<<printexc.ml:191:6>>*/ i + 1 | 0;
      if(_M_ === i) break;
      i = _N_;
     }
    }
     /*<<printexc.ml:196:6>>*/ return  /*<<printexc.ml:196:6>>*/ caml_call1
             /*<<printexc.ml:196:6>>*/ (Stdlib_Buffer[2], b) /*<<printexc.ml:199:59>>*/ ;
    /*<<printexc.ml:199:59>>*/ }
   function backtrace_slot_is_raise(param){
     /*<<printexc.ml:201:30>>*/ return 0 === param[0] ? param[1] : param[1] /*<<printexc.ml:203:36>>*/ ;
    /*<<printexc.ml:203:36>>*/ }
   function backtrace_slot_is_inline(param){
     /*<<printexc.ml:205:31>>*/ return 0 === param[0] ? param[8] : 0 /*<<printexc.ml:207:31>>*/ ;
    /*<<printexc.ml:207:31>>*/ }
   function backtrace_slot_location(param){
     /*<<printexc.ml:218:30>>*/ return 0 === param[0]
            ? [0,
              [0, param[2], param[3], param[4], param[5], param[6], param[7]]]
            : 0 /*<<printexc.ml:228:5>>*/ ;
    /*<<printexc.ml:228:5>>*/ }
   function backtrace_slot_defname(param){
     /*<<printexc.ml:230:29>>*/ if(0 === param[0] && param[9] !== cst$4)
      /*<<printexc.ml:233:24>>*/ return [0, param[9]] /*<<printexc.ml:233:24>>*/ ;
     /*<<printexc.ml:232:39>>*/ return 0 /*<<printexc.ml:232:39>>*/ ;
    /*<<printexc.ml:233:38>>*/ }
   function backtrace_slots(raw_backtrace){
    var
     match =
        /*<<printexc.ml:242:8>>*/  /*<<printexc.ml:242:8>>*/ convert_raw_backtrace
         /*<<printexc.ml:242:8>>*/ (raw_backtrace);
    if(! match)
      /*<<printexc.ml:243:14>>*/ return 0 /*<<printexc.ml:243:14>>*/ ;
    var backtrace = match[1], i$1 = backtrace.length - 2 | 0, i = i$1;
     /*<<printexc.ml:248:30>>*/ for(;;){
     if(-1 === i)
      var _K_ = 0;
     else{
      var _J_ = 0 === caml_check_bound(backtrace, i)[1 + i][0] ? 1 : 0;
       /*<<printexc.ml:250:15>>*/ if(! _J_){
       var i$0 = i - 1 | 0;
       i = i$0;
       continue;
      }
      var _K_ = _J_;
     }
      /*<<printexc.ml:251:9>>*/ return _K_ ? [0, backtrace] : 0 /*<<printexc.ml:253:15>>*/ ;
    }
    /*<<printexc.ml:253:15>>*/ }
   function backtrace_slots_of_raw_entry(entry){
     /*<<printexc.ml:256:2>>*/ return  /*<<printexc.ml:256:18>>*/ backtrace_slots
             /*<<printexc.ml:256:18>>*/ ([0, entry]) /*<<printexc.ml:256:29>>*/ ;
    /*<<printexc.ml:256:29>>*/ }
   function raw_backtrace_length(bt){
     /*<<printexc.ml:267:30>>*/ return bt.length - 1;
    /*<<printexc.ml:267:45>>*/ }
   function get_backtrace(param){
     /*<<printexc.ml:278:23>>*/ return  /*<<printexc.ml:278:47>>*/ raw_backtrace_to_string
             /*<<printexc.ml:278:47>>*/ ( /*<<printexc.ml:278:47>>*/ caml_get_exception_raw_backtra
               /*<<printexc.ml:278:47>>*/ (0)) /*<<printexc.ml:278:69>>*/ ;
    /*<<printexc.ml:278:69>>*/ }
   function register_printer(fn){
     /*<<printexc.ml:284:2>>*/ for(;;){
     var
      old_printers =
         /*<<printexc.ml:284:21>>*/  /*<<printexc.ml:284:21>>*/ caml_call1
          /*<<printexc.ml:284:21>>*/ (Stdlib_Atomic[3], printers),
      new_printers =  /*<<printexc.ml:285:21>>*/ [0, fn, old_printers],
      success =
         /*<<printexc.ml:286:16>>*/  /*<<printexc.ml:286:16>>*/ caml_call3
          /*<<printexc.ml:286:16>>*/ (Stdlib_Atomic[6],
          printers,
          old_printers,
          new_printers),
      _I_ =  /*<<printexc.ml:287:2>>*/ 1 - success;
     if(! _I_)
       /*<<printexc.ml:287:2>>*/ return _I_ /*<<printexc.ml:287:2>>*/ ;
    }
    /*<<printexc.ml:287:41>>*/ }
   function exn_slot(x){
     /*<<printexc.ml:292:2>>*/ return 0
            ===
              /*<<printexc.ml:293:5>>*/ caml_obj_tag
               /*<<printexc.ml:293:5>>*/ (x)
            ? x[1]
            : x /*<<printexc.ml:293:44>>*/ ;
    /*<<printexc.ml:293:44>>*/ }
   function exn_slot_id(x){
    var
     slot =
        /*<<printexc.ml:296:13>>*/  /*<<printexc.ml:296:13>>*/ exn_slot
         /*<<printexc.ml:296:13>>*/ (x);
     /*<<printexc.ml:297:11>>*/ return slot[2] /*<<printexc.ml:297:11>>*/ ;
    /*<<printexc.ml:297:36>>*/ }
   function exn_slot_name(x){
    var
     slot =
        /*<<printexc.ml:300:13>>*/  /*<<printexc.ml:300:13>>*/ exn_slot
         /*<<printexc.ml:300:13>>*/ (x);
     /*<<printexc.ml:301:11>>*/ return slot[1] /*<<printexc.ml:301:11>>*/ ;
    /*<<printexc.ml:301:39>>*/ }
   var
    errors =
      [0,
        cst$4,
        "(Cannot print locations:\n bytecode executable program file not found)",
        "(Cannot print locations:\n bytecode executable program file appears to be corrupt)",
        "(Cannot print locations:\n bytecode executable program file has wrong magic number)",
        "(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)"].slice
       (),
    _o_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s];
   function default_uncaught_exception_han(exn, raw_backtrace){
    var
     _F_ =
        /*<<printexc.ml:323:40>>*/  /*<<printexc.ml:323:40>>*/ to_string
         /*<<printexc.ml:323:40>>*/ (exn);
     /*<<printexc.ml:323:2>>*/  /*<<printexc.ml:323:2>>*/ caml_call2
      /*<<printexc.ml:323:2>>*/ (Stdlib_Printf[3], _o_, _F_);
     /*<<printexc.ml:324:2>>*/  /*<<printexc.ml:324:2>>*/ print_raw_backtrace
      /*<<printexc.ml:324:2>>*/ (Stdlib[40], raw_backtrace);
    var
     status =
        /*<<printexc.ml:325:15>>*/  /*<<printexc.ml:325:15>>*/ runtime.caml_ml_debug_info_status
         /*<<printexc.ml:325:15>>*/ (0);
    if(status < 0){
     var
      _G_ =
         /*<<printexc.ml:327:26>>*/  /*<<printexc.ml:327:26>>*/ caml_call1
          /*<<printexc.ml:327:26>>*/ (Stdlib[18], status),
      _H_ =  /*<<printexc.ml:327:18>>*/ caml_check_bound(errors, _G_)[1 + _G_];
      /*<<printexc.ml:327:4>>*/  /*<<printexc.ml:327:4>>*/ caml_call1
       /*<<printexc.ml:327:4>>*/ (Stdlib[53], _H_);
    }
     /*<<printexc.ml:327:4>>*/ return  /*<<printexc.ml:327:4>>*/ caml_call1
             /*<<printexc.ml:327:4>>*/ (Stdlib[63], Stdlib[40]) /*<<printexc.ml:328:14>>*/ ;
    /*<<printexc.ml:328:14>>*/ }
   var
    uncaught_exception_handler =
       /*<<printexc.ml:330:33>>*/ [0, default_uncaught_exception_han];
   function set_uncaught_exception_handler(fn){
     /*<<printexc.ml:332:40>>*/ uncaught_exception_handler[1] = fn;
    return 0;
    /*<<printexc.ml:332:72>>*/ }
   var
    empty_backtrace = [0],
    cst_Fatal_error_out_of_memory_ =
      "Fatal error: out of memory in uncaught exception handler",
    _p_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _q_ =
      [0,
       [11,
        "Fatal error in uncaught exception handler: exception ",
        [2, 0, [12, 10, 0]]],
       "Fatal error in uncaught exception handler: exception %s\n"];
   function handle_uncaught_exception(exn$0, debugger_in_use){
     /*<<printexc.ml:371:2>>*/ try{
      /*<<printexc.ml:343:2>>*/ try{
      var
       raw_backtrace =
         debugger_in_use
          ? empty_backtrace
          :  /*<<printexc.ml:338:4>>*/ caml_get_exception_raw_backtra
             /*<<printexc.ml:338:4>>*/ (0);
       /*<<printexc.ml:352:4>>*/ try{
        /*<<printexc.ml:352:9>>*/  /*<<printexc.ml:352:9>>*/ caml_call1
         /*<<printexc.ml:352:9>>*/ (Stdlib[103], 0);
      }
      catch(_E_){}
       /*<<printexc.ml:353:4>>*/ try{
       var
        _A_ =
           /*<<printexc.ml:354:6>>*/  /*<<printexc.ml:354:6>>*/ caml_call2
            /*<<printexc.ml:354:6>>*/ (uncaught_exception_handler[1],
            exn$0,
            raw_backtrace),
        _z_ = _A_;
      }
      catch(exn$1){
       var
        exn = caml_wrap_exception(exn$1),
        raw_backtrace$0 =
           /*<<printexc.ml:338:4>>*/  /*<<printexc.ml:338:4>>*/ caml_get_exception_raw_backtra
            /*<<printexc.ml:338:4>>*/ (0),
        _x_ =
           /*<<printexc.ml:357:44>>*/  /*<<printexc.ml:357:44>>*/ to_string
            /*<<printexc.ml:357:44>>*/ (exn$0);
        /*<<printexc.ml:357:6>>*/  /*<<printexc.ml:357:6>>*/ caml_call2
         /*<<printexc.ml:357:6>>*/ (Stdlib_Printf[3], _p_, _x_);
        /*<<printexc.ml:358:6>>*/  /*<<printexc.ml:358:6>>*/ print_raw_backtrace
         /*<<printexc.ml:358:6>>*/ (Stdlib[40], raw_backtrace);
       var
        _y_ =
           /*<<printexc.ml:360:8>>*/  /*<<printexc.ml:360:8>>*/ to_string
            /*<<printexc.ml:360:8>>*/ (exn);
        /*<<printexc.ml:359:6>>*/  /*<<printexc.ml:359:6>>*/ caml_call2
         /*<<printexc.ml:359:6>>*/ (Stdlib_Printf[3], _q_, _y_);
        /*<<printexc.ml:361:6>>*/  /*<<printexc.ml:361:6>>*/ print_raw_backtrace
         /*<<printexc.ml:361:6>>*/ (Stdlib[40], raw_backtrace$0);
       var
        _z_ =
           /*<<printexc.ml:362:6>>*/ caml_call1
            /*<<printexc.ml:362:6>>*/ (Stdlib[63], Stdlib[40]);
      }
      var _B_ = _z_;
     }
     catch(_D_){
      var _w_ = caml_wrap_exception(_D_);
      if(_w_ !== Stdlib[9]) throw caml_maybe_attach_backtrace(_w_, 0);
      var
       _B_ =
          /*<<printexc.ml:365:8>>*/ caml_call1
           /*<<printexc.ml:365:8>>*/ (Stdlib[53],
           cst_Fatal_error_out_of_memory_);
     }
      /*<<printexc.ml:372:4>>*/ return _B_ /*<<printexc.ml:372:4>>*/ ;
    }
    catch(_C_){ /*<<printexc.ml:375:4>>*/ return 0 /*<<printexc.ml:375:4>>*/ ;
    }
    /*<<printexc.ml:375:6>>*/ }
    /*<<printexc.ml:381:2>>*/  /*<<printexc.ml:381:2>>*/ runtime.caml_register_named_value
     /*<<printexc.ml:381:2>>*/ ("Printexc.handle_uncaught_exception",
     handle_uncaught_exception);
   var
    Stdlib_Printexc =
      [0,
       to_string,
       to_string_default,
       print,
       catch$0,
       print_backtrace,
       get_backtrace,
       runtime.caml_record_backtrace,
       runtime.caml_backtrace_status,
       register_printer,
       use_printers,
       raw_backtrace_entries,
       function(_v_){ /*<<?>>*/ return caml_get_exception_raw_backtra(_v_);},
       print_raw_backtrace,
       raw_backtrace_to_string,
       default_uncaught_exception_han,
       set_uncaught_exception_handler,
       backtrace_slots,
       backtrace_slots_of_raw_entry,
       [0,
        backtrace_slot_is_raise,
        backtrace_slot_is_inline,
        backtrace_slot_location,
        backtrace_slot_defname,
        format_backtrace_slot],
       raw_backtrace_length,
       function(_u_, _t_){
         /*<<?>>*/ return runtime.caml_raw_backtrace_slot(_u_, _t_);
       },
       function(_s_){
         /*<<?>>*/ return runtime.caml_convert_raw_backtrace_slot(_s_);
       },
       function(_r_){
         /*<<?>>*/ return runtime.caml_raw_backtrace_next_slot(_r_);
       },
       exn_slot_id,
       exn_slot_name,
       string_of_extension_constructo];
   runtime.caml_register_global(43, Stdlib_Printexc, "Stdlib__Printexc");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Fun
//# unitInfo: Requires: Stdlib, Stdlib__Printexc
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_restore_raw_backtrace =  /*<<?>>*/ runtime.caml_restore_raw_backtrace,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib = global_data.Stdlib;
   function const$0(c, param){
     /*<<fun.ml:17:16>>*/ return c /*<<fun.ml:17:16>>*/ ;
    /*<<fun.ml:17:17>>*/ }
   function compose(f, g, x){
     /*<<fun.ml:18:20>>*/ return  /*<<fun.ml:18:22>>*/ caml_call1
             /*<<fun.ml:18:22>>*/ (f,
              /*<<fun.ml:18:22>>*/ caml_call1 /*<<fun.ml:18:22>>*/ (g, x)) /*<<fun.ml:18:27>>*/ ;
    /*<<fun.ml:18:27>>*/ }
   function flip(f, x, y){
     /*<<fun.ml:19:17>>*/ return  /*<<fun.ml:19:17>>*/ caml_call2
             /*<<fun.ml:19:17>>*/ (f, y, x) /*<<fun.ml:19:22>>*/ ;
    /*<<fun.ml:19:22>>*/ }
   function negate(p, v){
     /*<<fun.ml:20:17>>*/ return 1
           -  /*<<fun.ml:20:21>>*/ caml_call1 /*<<fun.ml:20:21>>*/ (p, v) /*<<fun.ml:20:21>>*/ ;
    /*<<fun.ml:20:26>>*/ }
   var
    Finally_raised =
       /*<<fun.ml:22:0>>*/ [248,
       "Stdlib.Fun.Finally_raised",
       runtime.caml_fresh_oo_id(0)],
    cst_Fun_Finally_raised = "Fun.Finally_raised: ";
    /*<<fun.ml:24:9>>*/  /*<<fun.ml:24:9>>*/ caml_call1
     /*<<fun.ml:24:9>>*/ (Stdlib_Printexc[9],
     function(param){
       /*<<fun.ml:24:38>>*/ if(param[1] !== Finally_raised)
        /*<<fun.ml:26:7>>*/ return 0 /*<<fun.ml:26:7>>*/ ;
      var
       exn = param[2],
       _a_ =
          /*<<fun.ml:25:55>>*/  /*<<fun.ml:25:55>>*/ caml_call1
           /*<<fun.ml:25:55>>*/ (Stdlib_Printexc[1], exn);
       /*<<fun.ml:25:24>>*/ return [0,
               /*<<fun.ml:25:29>>*/ caml_call2
                /*<<fun.ml:25:29>>*/ (Stdlib[28], cst_Fun_Finally_raised, _a_)] /*<<fun.ml:25:24>>*/ ;
      /*<<fun.ml:26:11>>*/ });
   var dummy = 0;
   function protect(finally$0, work){
    function finally_no_exn(param){
      /*<<fun.ml:30:4>>*/ try{
       /*<<fun.ml:30:8>>*/  /*<<fun.ml:30:8>>*/ caml_call1
        /*<<fun.ml:30:8>>*/ (finally$0, 0);
       /*<<fun.ml:30:8>>*/ return /*<<fun.ml:30:8>>*/ ;
     }
     catch(e$0){
      var
       e = caml_wrap_exception(e$0),
       bt =
          /*<<fun.ml:31:15>>*/  /*<<fun.ml:31:15>>*/ caml_call1
           /*<<fun.ml:31:15>>*/ (Stdlib_Printexc[12], 0),
       exn =  /*<<fun.ml:32:36>>*/ [0, Finally_raised, e];
      caml_restore_raw_backtrace(exn, bt);
       /*<<fun.ml:32:6>>*/ throw  /*<<fun.ml:32:6>>*/ caml_maybe_attach_backtrace
              /*<<fun.ml:32:6>>*/ (exn, 0);
     }
     /*<<fun.ml:32:57>>*/ }
     /*<<fun.ml:34:2>>*/ try{
     var
      result =
         /*<<fun.ml:34:8>>*/  /*<<fun.ml:34:8>>*/ caml_call1
          /*<<fun.ml:34:8>>*/ (work, 0);
    }
    catch(work_exn$0){
     var
      work_exn = caml_wrap_exception(work_exn$0),
      work_bt =
         /*<<fun.ml:37:20>>*/  /*<<fun.ml:37:20>>*/ caml_call1
          /*<<fun.ml:37:20>>*/ (Stdlib_Printexc[12], 0);
      /*<<fun.ml:38:6>>*/  /*<<fun.ml:38:6>>*/ finally_no_exn
       /*<<fun.ml:38:6>>*/ (0);
     caml_restore_raw_backtrace(work_exn, work_bt);
      /*<<fun.ml:39:6>>*/ throw  /*<<fun.ml:39:6>>*/ caml_maybe_attach_backtrace
             /*<<fun.ml:39:6>>*/ (work_exn, 0);
    }
     /*<<fun.ml:35:14>>*/  /*<<fun.ml:35:14>>*/ finally_no_exn
      /*<<fun.ml:35:14>>*/ (0);
     /*<<fun.ml:35:14>>*/ return result /*<<fun.ml:35:14>>*/ ;
    /*<<fun.ml:39:52>>*/ }
   var
    Stdlib_Fun = [0, const$0, compose, flip, negate, protect, Finally_raised];
   runtime.caml_register_global(4, Stdlib_Fun, "Stdlib__Fun");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Gc
//# unitInfo: Requires: Stdlib, Stdlib__Atomic, Stdlib__Domain, Stdlib__Fun, Stdlib__Printf, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst =  /*<<?>>*/ "\n",
    caml_ml_string_length =  /*<<?>>*/ runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Atomic = global_data.Stdlib__Atomic;
   global_data.Stdlib__Fun;
   var
    Stdlib = global_data.Stdlib,
    Stdlib_Domain = global_data.Stdlib__Domain,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Printf = global_data.Stdlib__Printf,
    _a_ =
      [0,
       [11, "minor_collections:      ", [4, 0, 0, 0, [12, 10, 0]]],
       "minor_collections:      %d\n"],
    _b_ =
      [0,
       [11, "major_collections:      ", [4, 0, 0, 0, [12, 10, 0]]],
       "major_collections:      %d\n"],
    _c_ =
      [0,
       [11, "compactions:            ", [4, 0, 0, 0, [12, 10, 0]]],
       "compactions:            %d\n"],
    _d_ =
      [0,
       [11, "forced_major_collections: ", [4, 0, 0, 0, [12, 10, 0]]],
       "forced_major_collections: %d\n"],
    _e_ = [0, [12, 10, 0], cst],
    _f_ = [0, [8, [0, 0, 0], 0, [0, 0], 0], "%.0f"],
    _g_ =
      [0,
       [11, "minor_words:    ", [8, [0, 0, 0], [1, 1], [0, 0], [12, 10, 0]]],
       "minor_words:    %*.0f\n"],
    _h_ =
      [0,
       [11, "promoted_words: ", [8, [0, 0, 0], [1, 1], [0, 0], [12, 10, 0]]],
       "promoted_words: %*.0f\n"],
    _i_ =
      [0,
       [11, "major_words:    ", [8, [0, 0, 0], [1, 1], [0, 0], [12, 10, 0]]],
       "major_words:    %*.0f\n"],
    _j_ = [0, [12, 10, 0], cst],
    _k_ = [0, [4, 0, 0, 0, 0], "%d"],
    _l_ =
      [0,
       [11, "top_heap_words: ", [4, 0, [1, 1], 0, [12, 10, 0]]],
       "top_heap_words: %*d\n"],
    _m_ =
      [0,
       [11, "heap_words:     ", [4, 0, [1, 1], 0, [12, 10, 0]]],
       "heap_words:     %*d\n"],
    _n_ =
      [0,
       [11, "live_words:     ", [4, 0, [1, 1], 0, [12, 10, 0]]],
       "live_words:     %*d\n"],
    _o_ =
      [0,
       [11, "free_words:     ", [4, 0, [1, 1], 0, [12, 10, 0]]],
       "free_words:     %*d\n"],
    _p_ =
      [0,
       [11, "largest_free:   ", [4, 0, [1, 1], 0, [12, 10, 0]]],
       "largest_free:   %*d\n"],
    _q_ =
      [0,
       [11, "fragments:      ", [4, 0, [1, 1], 0, [12, 10, 0]]],
       "fragments:      %*d\n"],
    _r_ = [0, [12, 10, 0], cst],
    _s_ =
      [0,
       [11, "live_blocks: ", [4, 0, 0, 0, [12, 10, 0]]],
       "live_blocks: %d\n"],
    _t_ =
      [0,
       [11, "free_blocks: ", [4, 0, 0, 0, [12, 10, 0]]],
       "free_blocks: %d\n"],
    _u_ =
      [0,
       [11, "heap_chunks: ", [4, 0, 0, 0, [12, 10, 0]]],
       "heap_chunks: %d\n"];
   function eventlog_pause(param){
     /*<<gc.ml:65:24>>*/ return 0 /*<<gc.ml:65:24>>*/ ;
    /*<<gc.ml:65:26>>*/ }
   function eventlog_resume(param){
     /*<<gc.ml:66:25>>*/ return 0 /*<<gc.ml:66:25>>*/ ;
    /*<<gc.ml:66:27>>*/ }
   function print_stat(c){
    var
     st =
        /*<<gc.ml:71:11>>*/  /*<<gc.ml:71:11>>*/ runtime.caml_gc_stat
         /*<<gc.ml:71:11>>*/ (0);
     /*<<gc.ml:72:2>>*/  /*<<gc.ml:72:2>>*/ caml_call3
      /*<<gc.ml:72:2>>*/ (Stdlib_Printf[1], c, _a_, st[4]);
     /*<<gc.ml:73:2>>*/  /*<<gc.ml:73:2>>*/ caml_call3
      /*<<gc.ml:73:2>>*/ (Stdlib_Printf[1], c, _b_, st[5]);
     /*<<gc.ml:74:2>>*/  /*<<gc.ml:74:2>>*/ caml_call3
      /*<<gc.ml:74:2>>*/ (Stdlib_Printf[1], c, _c_, st[14]);
     /*<<gc.ml:75:2>>*/  /*<<gc.ml:75:2>>*/ caml_call3
      /*<<gc.ml:75:2>>*/ (Stdlib_Printf[1], c, _d_, st[17]);
     /*<<gc.ml:76:2>>*/  /*<<gc.ml:76:2>>*/ caml_call2
      /*<<gc.ml:76:2>>*/ (Stdlib_Printf[1], c, _e_);
    var
     l1 =
        /*<<gc.ml:77:25>>*/  /*<<gc.ml:77:25>>*/ caml_ml_string_length
         /*<<gc.ml:77:25>>*/ ( /*<<gc.ml:77:25>>*/ caml_call2
           /*<<gc.ml:77:25>>*/ (Stdlib_Printf[4], _f_, st[1]));
     /*<<gc.ml:78:2>>*/  /*<<gc.ml:78:2>>*/ caml_call4
      /*<<gc.ml:78:2>>*/ (Stdlib_Printf[1], c, _g_, l1, st[1]);
     /*<<gc.ml:79:2>>*/  /*<<gc.ml:79:2>>*/ caml_call4
      /*<<gc.ml:79:2>>*/ (Stdlib_Printf[1], c, _h_, l1, st[2]);
     /*<<gc.ml:80:2>>*/  /*<<gc.ml:80:2>>*/ caml_call4
      /*<<gc.ml:80:2>>*/ (Stdlib_Printf[1], c, _i_, l1, st[3]);
     /*<<gc.ml:81:2>>*/  /*<<gc.ml:81:2>>*/ caml_call2
      /*<<gc.ml:81:2>>*/ (Stdlib_Printf[1], c, _j_);
    var
     l2 =
        /*<<gc.ml:82:25>>*/  /*<<gc.ml:82:25>>*/ caml_ml_string_length
         /*<<gc.ml:82:25>>*/ ( /*<<gc.ml:82:25>>*/ caml_call2
           /*<<gc.ml:82:25>>*/ (Stdlib_Printf[4], _k_, st[15]));
     /*<<gc.ml:83:2>>*/  /*<<gc.ml:83:2>>*/ caml_call4
      /*<<gc.ml:83:2>>*/ (Stdlib_Printf[1], c, _l_, l2, st[15]);
     /*<<gc.ml:84:2>>*/  /*<<gc.ml:84:2>>*/ caml_call4
      /*<<gc.ml:84:2>>*/ (Stdlib_Printf[1], c, _m_, l2, st[6]);
     /*<<gc.ml:85:2>>*/  /*<<gc.ml:85:2>>*/ caml_call4
      /*<<gc.ml:85:2>>*/ (Stdlib_Printf[1], c, _n_, l2, st[8]);
     /*<<gc.ml:86:2>>*/  /*<<gc.ml:86:2>>*/ caml_call4
      /*<<gc.ml:86:2>>*/ (Stdlib_Printf[1], c, _o_, l2, st[10]);
     /*<<gc.ml:87:2>>*/  /*<<gc.ml:87:2>>*/ caml_call4
      /*<<gc.ml:87:2>>*/ (Stdlib_Printf[1], c, _p_, l2, st[12]);
     /*<<gc.ml:88:2>>*/  /*<<gc.ml:88:2>>*/ caml_call4
      /*<<gc.ml:88:2>>*/ (Stdlib_Printf[1], c, _q_, l2, st[13]);
     /*<<gc.ml:89:2>>*/  /*<<gc.ml:89:2>>*/ caml_call2
      /*<<gc.ml:89:2>>*/ (Stdlib_Printf[1], c, _r_);
     /*<<gc.ml:90:2>>*/  /*<<gc.ml:90:2>>*/ caml_call3
      /*<<gc.ml:90:2>>*/ (Stdlib_Printf[1], c, _s_, st[9]);
     /*<<gc.ml:91:2>>*/  /*<<gc.ml:91:2>>*/ caml_call3
      /*<<gc.ml:91:2>>*/ (Stdlib_Printf[1], c, _t_, st[11]);
    return caml_call3(Stdlib_Printf[1], c, _u_, st[7]) /*<<gc.ml:92:46>>*/ ;
    /*<<gc.ml:92:46>>*/ }
   function allocated_bytes(param){
    var
     match =
        /*<<gc.ml:96:22>>*/  /*<<gc.ml:96:22>>*/ runtime.caml_gc_counters
         /*<<gc.ml:96:22>>*/ (0),
     ma = match[3],
     pro = match[2],
     mi = match[1];
     /*<<gc.ml:97:2>>*/ return (mi + ma - pro) * (Stdlib_Sys[9] / 8 | 0) /*<<gc.ml:97:2>>*/ ;
    /*<<gc.ml:97:55>>*/ }
   function delete_alarm(a){
     /*<<gc.ml:115:21>>*/ return  /*<<gc.ml:115:21>>*/ caml_call2
             /*<<gc.ml:115:21>>*/ (Stdlib_Atomic[4], a, 0) /*<<gc.ml:115:39>>*/ ;
    /*<<gc.ml:115:39>>*/ }
   function create_alarm(f){
    var
     _y_ =
        /*<<gc.ml:118:24>>*/  /*<<gc.ml:118:24>>*/ caml_call1
         /*<<gc.ml:118:24>>*/ (Stdlib_Atomic[1], 1);
     /*<<gc.ml:119:2>>*/  /*<<gc.ml:119:2>>*/ caml_call1
      /*<<gc.ml:119:2>>*/ (Stdlib_Domain[6],
      function(param){
        /*<<gc.ml:119:28>>*/ return  /*<<gc.ml:115:17>>*/ delete_alarm
                /*<<gc.ml:115:17>>*/ (_y_) /*<<gc.ml:119:52>>*/ ;
       /*<<gc.ml:119:52>>*/ });
    return _y_;
    /*<<gc.ml:121:13>>*/ }
   var
    null_tracker =
       /*<<gc.ml:142:23>>*/ [0,
       function(param){
         /*<<gc.ml:143:30>>*/ return 0 /*<<gc.ml:143:30>>*/ ;
        /*<<gc.ml:143:34>>*/ },
       function(param){
         /*<<gc.ml:144:30>>*/ return 0 /*<<gc.ml:144:30>>*/ ;
        /*<<gc.ml:144:34>>*/ },
       function(param){
         /*<<gc.ml:145:26>>*/ return 0 /*<<gc.ml:145:26>>*/ ;
        /*<<gc.ml:145:30>>*/ },
       function(param){
         /*<<gc.ml:146:32>>*/ return 0 /*<<gc.ml:146:32>>*/ ;
        /*<<gc.ml:146:34>>*/ },
       function(param){
         /*<<gc.ml:147:32>>*/ return 0 /*<<gc.ml:147:32>>*/ ;
        /*<<gc.ml:147:34>>*/ }];
   function start(sampling_rate, opt, tracker){
    var callstack_size = opt ? opt[1] : Stdlib[19];
     /*<<gc.ml:158:6>>*/ return  /*<<gc.ml:158:6>>*/ runtime.caml_memprof_start
             /*<<gc.ml:158:6>>*/ (sampling_rate, callstack_size, tracker) /*<<gc.ml:158:50>>*/ ;
    /*<<gc.ml:158:50>>*/ }
   var
    Stdlib_Gc =
      [0,
       print_stat,
       allocated_bytes,
       function(_x_, _w_){
         /*<<?>>*/ return runtime.caml_final_register(_x_, _w_);
       },
       runtime.caml_final_register_called_without_value,
       function(_v_){ /*<<?>>*/ return runtime.caml_final_release(_v_);},
       create_alarm,
       delete_alarm,
       eventlog_pause,
       eventlog_resume,
       [0,
        null_tracker,
        start,
        runtime.caml_memprof_stop,
        runtime.caml_memprof_discard]];
   runtime.caml_register_global(27, Stdlib_Gc, "Stdlib__Gc");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__In_channel
//# unitInfo: Requires: Stdlib, Stdlib__Bytes, Stdlib__Fun, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_ba_dim_1 =  /*<<?>>*/ runtime.caml_ba_dim_1,
    caml_create_bytes =  /*<<?>>*/ runtime.caml_create_bytes,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length =  /*<<?>>*/ runtime.caml_ml_bytes_length,
    caml_ml_input_bigarray =  /*<<?>>*/ runtime.caml_ml_input_bigarray,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Fun = global_data.Stdlib__Fun,
    stdin = Stdlib[38],
    open_bin = Stdlib[80],
    open_text = Stdlib[79],
    open_gen = Stdlib[81];
   function with_open(openfun, s, f){
    var
     ic =
        /*<<in_channel.ml:35:11>>*/  /*<<in_channel.ml:35:11>>*/ caml_call1
         /*<<in_channel.ml:35:11>>*/ (openfun, s);
     /*<<in_channel.ml:37:4>>*/ return  /*<<in_channel.ml:37:4>>*/ caml_call2
             /*<<in_channel.ml:37:4>>*/ (Stdlib_Fun[5],
             function(param){
               /*<<in_channel.ml:36:34>>*/ return  /*<<in_channel.ml:37:4>>*/ caml_call1
                       /*<<in_channel.ml:37:4>>*/ (Stdlib[94], ic) /*<<in_channel.ml:36:58>>*/ ;
              /*<<in_channel.ml:36:58>>*/ },
             function(param){
               /*<<in_channel.ml:37:15>>*/ return  /*<<in_channel.ml:36:2>>*/ caml_call1
                       /*<<in_channel.ml:36:2>>*/ (f, ic) /*<<in_channel.ml:37:19>>*/ ;
              /*<<in_channel.ml:37:19>>*/ }) /*<<in_channel.ml:37:20>>*/ ;
    /*<<in_channel.ml:37:20>>*/ }
   function with_open_bin(s, f){
     /*<<in_channel.ml:40:2>>*/ return  /*<<in_channel.ml:40:2>>*/ with_open
             /*<<in_channel.ml:40:2>>*/ (Stdlib[80], s, f) /*<<in_channel.ml:40:34>>*/ ;
    /*<<in_channel.ml:40:34>>*/ }
   function with_open_text(s, f){
     /*<<in_channel.ml:43:2>>*/ return  /*<<in_channel.ml:43:2>>*/ with_open
             /*<<in_channel.ml:43:2>>*/ (Stdlib[79], s, f) /*<<in_channel.ml:43:30>>*/ ;
    /*<<in_channel.ml:43:30>>*/ }
   function with_open_gen(flags, perm, s, f){
     /*<<in_channel.ml:46:2>>*/ return  /*<<in_channel.ml:46:2>>*/ with_open
             /*<<in_channel.ml:46:2>>*/ ( /*<<in_channel.ml:46:12>>*/ caml_call2
               /*<<in_channel.ml:46:12>>*/ (Stdlib[81], flags, perm),
             s,
             f) /*<<in_channel.ml:46:47>>*/ ;
    /*<<in_channel.ml:46:47>>*/ }
   var
    seek = Stdlib[96][4],
    pos = Stdlib[96][5],
    length = Stdlib[96][6],
    close = Stdlib[93],
    close_noerr = Stdlib[94];
   function input_char(ic){
     /*<<in_channel.ml:55:2>>*/ try{
     var
      c =
         /*<<in_channel.ml:55:8>>*/  /*<<in_channel.ml:55:8>>*/ caml_call1
          /*<<in_channel.ml:55:8>>*/ (Stdlib[82], ic);
    }
    catch(_x_){
     var _w_ = caml_wrap_exception(_x_);
     if(_w_ === Stdlib[12])
       /*<<in_channel.ml:57:29>>*/ return 0 /*<<in_channel.ml:57:29>>*/ ;
     throw caml_maybe_attach_backtrace(_w_, 0);
    }
     /*<<in_channel.ml:56:9>>*/ return [0, c] /*<<in_channel.ml:56:9>>*/ ;
    /*<<in_channel.ml:57:33>>*/ }
   function input_byte(ic){
     /*<<in_channel.ml:60:2>>*/ try{
     var
      n =
         /*<<in_channel.ml:60:8>>*/  /*<<in_channel.ml:60:8>>*/ caml_call1
          /*<<in_channel.ml:60:8>>*/ (Stdlib[87], ic);
    }
    catch(_v_){
     var _u_ = caml_wrap_exception(_v_);
     if(_u_ === Stdlib[12])
       /*<<in_channel.ml:62:29>>*/ return 0 /*<<in_channel.ml:62:29>>*/ ;
     throw caml_maybe_attach_backtrace(_u_, 0);
    }
     /*<<in_channel.ml:61:9>>*/ return [0, n] /*<<in_channel.ml:61:9>>*/ ;
    /*<<in_channel.ml:62:33>>*/ }
   function input_line(ic){
     /*<<in_channel.ml:65:2>>*/ try{
     var
      s =
         /*<<in_channel.ml:65:8>>*/  /*<<in_channel.ml:65:8>>*/ caml_call1
          /*<<in_channel.ml:65:8>>*/ (Stdlib[83], ic);
    }
    catch(_t_){
     var _s_ = caml_wrap_exception(_t_);
     if(_s_ === Stdlib[12])
       /*<<in_channel.ml:67:29>>*/ return 0 /*<<in_channel.ml:67:29>>*/ ;
     throw caml_maybe_attach_backtrace(_s_, 0);
    }
     /*<<in_channel.ml:66:9>>*/ return [0, s] /*<<in_channel.ml:66:9>>*/ ;
    /*<<in_channel.ml:67:33>>*/ }
   var
    input =  /*<<in_channel.ml:64:15>>*/ Stdlib[84],
    cst_input_bigarray = "input_bigarray",
    _a_ = [0, 0],
    _b_ = [0, 0],
    cst_really_input_bigarray = "really_input_bigarray",
    cst_In_channel_input_all_chann =
      "In_channel.input_all: channel content is larger than maximum string length";
   function input_bigarray(ic, buf, ofs, len){
     /*<<in_channel.ml:76:2>>*/ if
     (0 <= ofs
      &&
       0 <= len
       &&
        ( /*<<in_channel.ml:76:33>>*/ caml_ba_dim_1
          /*<<in_channel.ml:76:33>>*/ (buf)
        - len
        | 0)
        >= ofs)
      /*<<in_channel.ml:78:7>>*/ return  /*<<in_channel.ml:78:7>>*/ caml_ml_input_bigarray
              /*<<in_channel.ml:78:7>>*/ (ic, buf, ofs, len) /*<<in_channel.ml:78:43>>*/ ;
     /*<<in_channel.ml:77:7>>*/ return  /*<<in_channel.ml:77:7>>*/ caml_call1
             /*<<in_channel.ml:77:7>>*/ (Stdlib[1], cst_input_bigarray) /*<<in_channel.ml:78:43>>*/ ;
    /*<<in_channel.ml:78:43>>*/ }
   function really_input(ic, buf, pos, len){
     /*<<in_channel.ml:81:2>>*/ try{
      /*<<in_channel.ml:81:8>>*/  /*<<in_channel.ml:81:8>>*/ caml_call4
       /*<<in_channel.ml:81:8>>*/ (Stdlib[85], ic, buf, pos, len);
      /*<<in_channel.ml:82:10>>*/ return _a_ /*<<in_channel.ml:82:10>>*/ ;
    }
    catch(_r_){
     var _q_ = caml_wrap_exception(_r_);
     if(_q_ === Stdlib[12])
       /*<<in_channel.ml:83:29>>*/ return 0 /*<<in_channel.ml:83:29>>*/ ;
     throw caml_maybe_attach_backtrace(_q_, 0);
    }
    /*<<in_channel.ml:83:33>>*/ }
   function really_input_bigarray(ic, buf, ofs$1, len$1){
     /*<<in_channel.ml:94:2>>*/ if
     (0 <= ofs$1
      &&
       0 <= len$1
       &&
        ( /*<<in_channel.ml:94:33>>*/ caml_ba_dim_1
          /*<<in_channel.ml:94:33>>*/ (buf)
        - len$1
        | 0)
        >= ofs$1){
     var ofs = ofs$1, len = len$1;
      /*<<in_channel.ml:86:2>>*/ for(;;){
      if(0 >= len)
        /*<<in_channel.ml:86:19>>*/ return _b_ /*<<in_channel.ml:86:19>>*/ ;
      var
       r =
          /*<<in_channel.ml:87:12>>*/  /*<<in_channel.ml:87:12>>*/ caml_ml_input_bigarray
           /*<<in_channel.ml:87:12>>*/ (ic, buf, ofs, len);
       /*<<in_channel.ml:88:4>>*/ if(0 === r)
        /*<<in_channel.ml:89:9>>*/ return 0 /*<<in_channel.ml:89:9>>*/ ;
      var len$0 = len - r | 0, ofs$0 = ofs + r | 0;
      ofs = ofs$0;
      len = len$0;
     }
    }
     /*<<in_channel.ml:95:7>>*/ return  /*<<in_channel.ml:95:7>>*/ caml_call1
             /*<<in_channel.ml:95:7>>*/ (Stdlib[1], cst_really_input_bigarray) /*<<in_channel.ml:96:50>>*/ ;
    /*<<in_channel.ml:96:50>>*/ }
   function really_input_string(ic, len){
     /*<<in_channel.ml:99:2>>*/ try{
     var
      s =
         /*<<in_channel.ml:99:8>>*/  /*<<in_channel.ml:99:8>>*/ caml_call2
          /*<<in_channel.ml:99:8>>*/ (Stdlib[86], ic, len);
    }
    catch(_p_){
     var _o_ = caml_wrap_exception(_p_);
     if(_o_ === Stdlib[12])
       /*<<in_channel.ml:101:29>>*/ return 0 /*<<in_channel.ml:101:29>>*/ ;
     throw caml_maybe_attach_backtrace(_o_, 0);
    }
     /*<<in_channel.ml:100:9>>*/ return [0, s] /*<<in_channel.ml:100:9>>*/ ;
    /*<<in_channel.ml:101:33>>*/ }
   function read_upto(ic, buf, ofs, len){
    var ofs$0 = ofs, len$0 = len;
     /*<<in_channel.ml:107:4>>*/ for(;;){
     if(0 !== len$0){
      var
       r =
          /*<<in_channel.ml:109:14>>*/  /*<<in_channel.ml:109:14>>*/ caml_call4
           /*<<in_channel.ml:109:14>>*/ (Stdlib[84], ic, buf, ofs$0, len$0);
       /*<<in_channel.ml:110:6>>*/ if(0 !== r){
       var len$1 = len$0 - r | 0, ofs$1 = ofs$0 + r | 0;
       ofs$0 = ofs$1;
       len$0 = len$1;
       continue;
      }
     }
      /*<<in_channel.ml:116:2>>*/ return ofs$0 - ofs | 0 /*<<in_channel.ml:116:2>>*/ ;
    }
    /*<<in_channel.ml:116:20>>*/ }
   function ensure(buf, ofs, n){
    var len = caml_ml_bytes_length(buf);
    if((ofs + n | 0) <= len)
      /*<<in_channel.ml:132:25>>*/ return buf /*<<in_channel.ml:132:25>>*/ ;
    var new_len =  /*<<in_channel.ml:134:18>>*/ [0, len];
    for(;;){
     if(new_len[1] >= (ofs + n | 0)) break;
     new_len[1] = (2 * new_len[1] | 0) + 1 | 0;
    }
    var
     new_len$0 = new_len[1],
     new_len$1 =
       new_len$0 <= Stdlib_Sys[12]
        ? new_len$0
        : ofs
          < Stdlib_Sys[12]
          ? Stdlib_Sys[12]
          :  /*<<in_channel.ml:145:8>>*/ caml_call1
             /*<<in_channel.ml:145:8>>*/ (Stdlib[2],
             cst_In_channel_input_all_chann),
     new_buf =
        /*<<in_channel.ml:148:18>>*/  /*<<in_channel.ml:148:18>>*/ caml_create_bytes
         /*<<in_channel.ml:148:18>>*/ (new_len$1);
     /*<<in_channel.ml:149:4>>*/  /*<<in_channel.ml:149:4>>*/ caml_call5
      /*<<in_channel.ml:149:4>>*/ (Stdlib_Bytes[11], buf, 0, new_buf, 0, ofs);
     /*<<in_channel.ml:149:4>>*/ return new_buf /*<<in_channel.ml:149:4>>*/ ;
    /*<<in_channel.ml:151:5>>*/ }
   function input_all(ic){
    var chunk_size =  /*<<in_channel.ml:154:2>>*/ 65536;
     /*<<in_channel.ml:155:2>>*/ try{
     var
      _k_ =
         /*<<in_channel.ml:157:36>>*/  /*<<in_channel.ml:157:36>>*/ caml_call1
          /*<<in_channel.ml:157:36>>*/ (Stdlib[91], ic),
      _l_ =
         /*<<in_channel.ml:157:6>>*/  /*<<in_channel.ml:157:6>>*/ caml_call1
          /*<<in_channel.ml:157:6>>*/ (Stdlib[92], ic)
        - _k_
        | 0,
      initial_size = _l_;
    }
    catch(_n_){
     var _i_ = caml_wrap_exception(_n_);
     if(_i_[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(_i_, 0);
     var initial_size = -1;
    }
    var
     initial_size$0 =
        /*<<in_channel.ml:161:2>>*/ 0 <= initial_size
        ? initial_size
        : chunk_size,
     initial_size$1 =
       initial_size$0 <= Stdlib_Sys[12] ? initial_size$0 : Stdlib_Sys[12],
     buf =
        /*<<in_channel.ml:168:12>>*/  /*<<in_channel.ml:168:12>>*/ caml_create_bytes
         /*<<in_channel.ml:168:12>>*/ (initial_size$1),
     nread =
        /*<<in_channel.ml:169:14>>*/  /*<<in_channel.ml:169:14>>*/ read_upto
         /*<<in_channel.ml:169:14>>*/ (ic, buf, 0, initial_size$1);
    if(nread < initial_size$1)
      /*<<in_channel.ml:171:4>>*/ return  /*<<in_channel.ml:171:4>>*/ caml_call3
              /*<<in_channel.ml:171:4>>*/ (Stdlib_Bytes[8], buf, 0, nread) /*<<in_channel.ml:193:5>>*/ ;
     /*<<in_channel.ml:172:7>>*/ try{
     var
      c =
         /*<<in_channel.ml:173:10>>*/  /*<<in_channel.ml:173:10>>*/ caml_call1
          /*<<in_channel.ml:173:10>>*/ (Stdlib[82], ic);
    }
    catch(_m_){
     var _j_ = caml_wrap_exception(_m_);
     if(_j_ === Stdlib[12])
       /*<<in_channel.ml:176:8>>*/ return  /*<<in_channel.ml:176:8>>*/ caml_call1
               /*<<in_channel.ml:176:8>>*/ (Stdlib_Bytes[44], buf) /*<<in_channel.ml:193:5>>*/ ;
     throw caml_maybe_attach_backtrace(_j_, 0);
    }
    var
     buf$2 =
        /*<<in_channel.ml:190:18>>*/  /*<<in_channel.ml:190:18>>*/ ensure
         /*<<in_channel.ml:190:18>>*/ (buf, nread, 65537);
     /*<<in_channel.ml:191:8>>*/  /*<<in_channel.ml:191:8>>*/ runtime.caml_bytes_set
      /*<<in_channel.ml:191:8>>*/ (buf$2, nread, c);
    var
     ofs$1 =  /*<<in_channel.ml:191:8>>*/ nread + 1 | 0,
     buf$0 = buf$2,
     ofs = ofs$1;
     /*<<in_channel.ml:180:10>>*/ for(;;){
     var
      buf$1 =
         /*<<in_channel.ml:180:20>>*/  /*<<in_channel.ml:180:20>>*/ ensure
          /*<<in_channel.ml:180:20>>*/ (buf$0, ofs, chunk_size),
      rem = caml_ml_bytes_length(buf$1) - ofs | 0,
      r =
         /*<<in_channel.ml:184:18>>*/  /*<<in_channel.ml:184:18>>*/ read_upto
          /*<<in_channel.ml:184:18>>*/ (ic, buf$1, ofs, rem);
     if(r < rem)
       /*<<in_channel.ml:180:20>>*/ return  /*<<in_channel.ml:180:20>>*/ caml_call3
               /*<<in_channel.ml:180:20>>*/ (Stdlib_Bytes[8],
               buf$1,
               0,
               ofs + r | 0) /*<<in_channel.ml:193:5>>*/ ;
     var ofs$0 = ofs + rem | 0;
     buf$0 = buf$1;
     ofs = ofs$0;
    }
    /*<<in_channel.ml:193:5>>*/ }
   function input_lines(ic){
     /*<<in_channel.ml:196:2>>*/ try{
     var
      line =
         /*<<in_channel.ml:196:8>>*/  /*<<in_channel.ml:196:8>>*/ caml_call1
          /*<<in_channel.ml:196:8>>*/ (Stdlib[83], ic);
    }
    catch(_h_){
     var _e_ = caml_wrap_exception(_h_);
     if(_e_ === Stdlib[12])
       /*<<in_channel.ml:198:29>>*/ return 0 /*<<in_channel.ml:198:29>>*/ ;
     throw caml_maybe_attach_backtrace(_e_, 0);
    }
    var
     block =  /*<<in_channel.ml:197:12>>*/ [0, line, 24029],
     dst = block,
     offset = 1;
     /*<<in_channel.ml:196:2>>*/ for(;;){
      /*<<in_channel.ml:196:2>>*/ try{
      var
       line$0 =
          /*<<in_channel.ml:196:8>>*/  /*<<in_channel.ml:196:8>>*/ caml_call1
           /*<<in_channel.ml:196:8>>*/ (Stdlib[83], ic);
     }
     catch(_g_){
      var _f_ = caml_wrap_exception(_g_);
      if(_f_ !== Stdlib[12]) throw caml_maybe_attach_backtrace(_f_, 0);
      dst[1 + offset] = 0;
       /*<<in_channel.ml:197:20>>*/ return block /*<<in_channel.ml:197:20>>*/ ;
     }
     var dst$0 =  /*<<in_channel.ml:197:12>>*/ [0, line$0, 24029];
     dst[1 + offset] = dst$0;
     dst = dst$0;
     offset = 1;
    }
    /*<<in_channel.ml:198:31>>*/ }
   function fold_lines(f, accu, ic){
    var accu$0 = accu;
     /*<<in_channel.ml:201:2>>*/ for(;;){
      /*<<in_channel.ml:201:2>>*/ try{
      var
       line =
          /*<<in_channel.ml:201:8>>*/  /*<<in_channel.ml:201:8>>*/ caml_call1
           /*<<in_channel.ml:201:8>>*/ (Stdlib[83], ic);
     }
     catch(_d_){
      var _c_ = caml_wrap_exception(_d_);
      if(_c_ === Stdlib[12])
        /*<<in_channel.ml:203:29>>*/ return accu$0 /*<<in_channel.ml:203:29>>*/ ;
      throw caml_maybe_attach_backtrace(_c_, 0);
     }
     var
      accu$1 =
         /*<<in_channel.ml:202:25>>*/  /*<<in_channel.ml:202:25>>*/ caml_call2
          /*<<in_channel.ml:202:25>>*/ (f, accu$0, line);
     accu$0 = accu$1;
    }
    /*<<in_channel.ml:203:33>>*/ }
   var
    set_binary_mode = Stdlib[95],
    Stdlib_In_channel =
      [0,
       stdin,
       open_bin,
       open_text,
       open_gen,
       with_open_bin,
       with_open_text,
       with_open_gen,
       close,
       close_noerr,
       input_char,
       input_byte,
       input_line,
       really_input_string,
       input_all,
       input_lines,
       input,
       input_bigarray,
       really_input,
       really_input_bigarray,
       fold_lines,
       seek,
       pos,
       length,
       set_binary_mode,
       runtime.caml_ml_is_binary_mode,
       runtime.caml_sys_isatty];
   runtime.caml_register_global(9, Stdlib_In_channel, "Stdlib__In_channel");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Out_channel
//# unitInfo: Requires: Stdlib, Stdlib__Fun
(function
  (globalThis){
   "use strict";
   var runtime =  /*<<?>>*/ globalThis.jsoo_runtime;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Fun = global_data.Stdlib__Fun,
    stdout = Stdlib[39],
    stderr = Stdlib[40],
    open_bin = Stdlib[61],
    open_text = Stdlib[60],
    open_gen = Stdlib[62];
   function with_open(openfun, s, f){
    var
     oc =
        /*<<out_channel.ml:36:11>>*/  /*<<out_channel.ml:36:11>>*/ caml_call1
         /*<<out_channel.ml:36:11>>*/ (openfun, s);
     /*<<out_channel.ml:38:4>>*/ return  /*<<out_channel.ml:38:4>>*/ caml_call2
             /*<<out_channel.ml:38:4>>*/ (Stdlib_Fun[5],
             function(param){
               /*<<out_channel.ml:37:34>>*/ return  /*<<out_channel.ml:38:4>>*/ caml_call1
                       /*<<out_channel.ml:38:4>>*/ (Stdlib[77], oc) /*<<out_channel.ml:37:59>>*/ ;
              /*<<out_channel.ml:37:59>>*/ },
             function(param){
               /*<<out_channel.ml:38:15>>*/ return  /*<<out_channel.ml:37:2>>*/ caml_call1
                       /*<<out_channel.ml:37:2>>*/ (f, oc) /*<<out_channel.ml:38:19>>*/ ;
              /*<<out_channel.ml:38:19>>*/ }) /*<<out_channel.ml:38:20>>*/ ;
    /*<<out_channel.ml:38:20>>*/ }
   function with_open_bin(s, f){
     /*<<out_channel.ml:41:2>>*/ return  /*<<out_channel.ml:41:2>>*/ with_open
             /*<<out_channel.ml:41:2>>*/ (Stdlib[61], s, f) /*<<out_channel.ml:41:35>>*/ ;
    /*<<out_channel.ml:41:35>>*/ }
   function with_open_text(s, f){
     /*<<out_channel.ml:44:2>>*/ return  /*<<out_channel.ml:44:2>>*/ with_open
             /*<<out_channel.ml:44:2>>*/ (Stdlib[60], s, f) /*<<out_channel.ml:44:31>>*/ ;
    /*<<out_channel.ml:44:31>>*/ }
   function with_open_gen(flags, perm, s, f){
     /*<<out_channel.ml:47:2>>*/ return  /*<<out_channel.ml:47:2>>*/ with_open
             /*<<out_channel.ml:47:2>>*/ ( /*<<out_channel.ml:47:12>>*/ caml_call2
               /*<<out_channel.ml:47:12>>*/ (Stdlib[62], flags, perm),
             s,
             f) /*<<out_channel.ml:47:48>>*/ ;
    /*<<out_channel.ml:47:48>>*/ }
   var
    seek = Stdlib[96][1],
    pos = Stdlib[96][2],
    length = Stdlib[96][3],
    close = Stdlib[76],
    close_noerr = Stdlib[77],
    flush = Stdlib[63],
    flush_all = Stdlib[64],
    output_char = Stdlib[65],
    output_byte = Stdlib[70],
    output_string = Stdlib[66],
    output_bytes = Stdlib[67],
    output = Stdlib[68],
    output_substring = Stdlib[69],
    cst_output_bigarray = "output_bigarray";
   function output_bigarray(oc, buf, ofs, len){
     /*<<out_channel.ml:67:2>>*/ if
     (0 <= ofs
      &&
       0 <= len
       &&
        ( /*<<out_channel.ml:67:33>>*/ runtime.caml_ba_dim_1
          /*<<out_channel.ml:67:33>>*/ (buf)
        - len
        | 0)
        >= ofs)
      /*<<out_channel.ml:69:7>>*/ return  /*<<out_channel.ml:69:7>>*/ runtime.caml_ml_output_bigarray
              /*<<out_channel.ml:69:7>>*/ (oc, buf, ofs, len) /*<<out_channel.ml:69:44>>*/ ;
     /*<<out_channel.ml:68:7>>*/ return  /*<<out_channel.ml:68:7>>*/ caml_call1
             /*<<out_channel.ml:68:7>>*/ (Stdlib[1], cst_output_bigarray) /*<<out_channel.ml:69:44>>*/ ;
    /*<<out_channel.ml:69:44>>*/ }
   var
    set_binary_mode =  /*<<out_channel.ml:66:20>>*/ Stdlib[78],
    Stdlib_Out_channel =
      [0,
       stdout,
       stderr,
       open_bin,
       open_text,
       open_gen,
       with_open_bin,
       with_open_text,
       with_open_gen,
       close,
       close_noerr,
       output_char,
       output_byte,
       output_string,
       output_bytes,
       output,
       output_substring,
       output_bigarray,
       flush,
       flush_all,
       seek,
       pos,
       length,
       set_binary_mode,
       runtime.caml_ml_is_binary_mode,
       runtime.caml_ml_set_buffered,
       runtime.caml_ml_is_buffered,
       runtime.caml_sys_isatty];
   runtime.caml_register_global(3, Stdlib_Out_channel, "Stdlib__Out_channel");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Digest
//# unitInfo: Requires: Stdlib, Stdlib__Bytes, Stdlib__Char, Stdlib__In_channel, Stdlib__Int, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst =  /*<<?>>*/ "",
    cst_Digest_of_hex$1 =  /*<<?>>*/ "Digest.of_hex",
    cst_Digest_substring$1 =  /*<<?>>*/ "Digest.substring",
    cst_Digest_to_hex$1 =  /*<<?>>*/ "Digest.to_hex",
    caml_blake2_final =  /*<<?>>*/ runtime.caml_blake2_final,
    caml_blake2_string =  /*<<?>>*/ runtime.caml_blake2_string,
    caml_blake2_update =  /*<<?>>*/ runtime.caml_blake2_update,
    caml_bytes_unsafe_set =  /*<<?>>*/ runtime.caml_bytes_unsafe_set,
    caml_create_bytes =  /*<<?>>*/ runtime.caml_create_bytes,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_md5_chan =  /*<<?>>*/ runtime.caml_md5_chan,
    caml_md5_string =  /*<<?>>*/ runtime.caml_md5_string,
    caml_ml_string_length =  /*<<?>>*/ runtime.caml_ml_string_length,
    caml_string_get =  /*<<?>>*/ runtime.caml_string_get;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_In_channel = global_data.Stdlib__In_channel,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Char = global_data.Stdlib__Char,
    cst_Digest_of_hex = cst_Digest_of_hex$1,
    cst_Digest_BLAKE2_wrong_hash_s = "Digest.BLAKE2: wrong hash size",
    cst_Digest_substring = cst_Digest_substring$1,
    cst_Digest_to_hex = cst_Digest_to_hex$1,
    cst_Digest_of_hex$0 = cst_Digest_of_hex$1;
   function hex_of_string(d){
    function char_hex(n){
     var _l_ = 10 <= n ? (97 + n | 0) - 10 | 0 : 48 + n | 0;
     return caml_call1(Stdlib_Char[1], _l_) /*<<digest.ml:21:52>>*/ ;
     /*<<digest.ml:21:52>>*/ }
    var
     len =
        /*<<digest.ml:22:2>>*/  /*<<digest.ml:22:2>>*/ caml_ml_string_length
         /*<<digest.ml:22:2>>*/ (d),
     result =
        /*<<digest.ml:23:15>>*/  /*<<digest.ml:23:15>>*/ caml_create_bytes
         /*<<digest.ml:23:15>>*/ (len * 2 | 0),
     _j_ =  /*<<digest.ml:24:2>>*/ len - 1 | 0,
     _i_ =  /*<<digest.ml:23:15>>*/ 0;
    if(_j_ >= 0){
     var i = _i_;
     for(;;){
      var
       x =
          /*<<digest.ml:25:22>>*/  /*<<digest.ml:25:22>>*/ caml_string_get
           /*<<digest.ml:25:22>>*/ (d, i);
      caml_bytes_unsafe_set
       (result,
        i * 2 | 0,
         /*<<digest.ml:26:34>>*/ char_hex
          /*<<digest.ml:26:34>>*/ (x >>> 4 | 0));
      caml_bytes_unsafe_set
       (result,
        (i * 2 | 0) + 1 | 0,
         /*<<digest.ml:27:36>>*/ char_hex /*<<digest.ml:27:36>>*/ (x & 15));
      var _k_ =  /*<<digest.ml:24:2>>*/ i + 1 | 0;
      if(_j_ === i) break;
      i = _k_;
     }
    }
     /*<<digest.ml:29:2>>*/ return  /*<<digest.ml:29:2>>*/ caml_call1
             /*<<digest.ml:29:2>>*/ (Stdlib_Bytes[44], result) /*<<digest.ml:29:31>>*/ ;
    /*<<digest.ml:29:31>>*/ }
   function string_of_hex(s){
    function digit(c){
      /*<<digest.ml:33:4>>*/ if(65 <= c){
      if(97 <= c){
       if(103 > c) return (c - 97 | 0) + 10 | 0;
      }
      else if(71 > c) return (c - 65 | 0) + 10 | 0;
     }
     else if(9 >= c - 48 >>> 0) return c - 48 | 0;
      /*<<digest.ml:37:11>>*/ return  /*<<digest.ml:37:11>>*/ caml_call1
              /*<<digest.ml:37:11>>*/ (Stdlib[1], cst_Digest_of_hex) /*<<digest.ml:37:38>>*/ ;
     /*<<digest.ml:37:38>>*/ }
     /*<<digest.ml:39:36>>*/ return  /*<<digest.ml:39:36>>*/ caml_call2
             /*<<digest.ml:39:36>>*/ (Stdlib_String[2],
             caml_ml_string_length(s) / 2 | 0,
             function(i){
              var
               i$0 = 2 * i | 0,
               _g_ =
                  /*<<digest.ml:38:35>>*/  /*<<digest.ml:38:35>>*/ digit
                   /*<<digest.ml:38:35>>*/ ( /*<<digest.ml:38:41>>*/ caml_string_get
                     /*<<digest.ml:38:41>>*/ (s, i$0 + 1 | 0)),
               _h_ =
                 ( /*<<digest.ml:38:15>>*/ digit
                   /*<<digest.ml:38:15>>*/ ( /*<<digest.ml:38:21>>*/ caml_string_get
                     /*<<digest.ml:38:21>>*/ (s, i$0))
                 << 4)
                 + _g_
                 | 0;
               /*<<digest.ml:39:55>>*/ return  /*<<digest.ml:39:55>>*/ caml_call1
                       /*<<digest.ml:39:55>>*/ (Stdlib_Char[1], _h_) /*<<digest.ml:39:69>>*/ ;
              /*<<digest.ml:39:69>>*/ }) /*<<digest.ml:39:70>>*/ ;
    /*<<digest.ml:39:70>>*/ }
   function BLAKE2(X){
    var _a_ = X[1] < 1 ? 1 : 0, _b_ = _a_ || (64 < X[1] ? 1 : 0);
    if(_b_)
      /*<<digest.ml:68:9>>*/  /*<<digest.ml:68:9>>*/ caml_call1
       /*<<digest.ml:68:9>>*/ (Stdlib[1], cst_Digest_BLAKE2_wrong_hash_s);
    var
     hash_length = X[1],
     compare = Stdlib_String[10],
     equal = Stdlib_String[9];
    function string(str){
      /*<<digest.ml:85:4>>*/ return  /*<<digest.ml:85:4>>*/ caml_blake2_string
              /*<<digest.ml:85:4>>*/ (hash_length,
              cst,
              str,
              0,
              caml_ml_string_length(str)) /*<<digest.ml:85:58>>*/ ;
     /*<<digest.ml:85:58>>*/ }
    function bytes(b){
      /*<<digest.ml:88:4>>*/ return  /*<<digest.ml:88:11>>*/ string
              /*<<digest.ml:88:11>>*/ ( /*<<digest.ml:88:11>>*/ caml_call1
                /*<<digest.ml:88:11>>*/ (Stdlib_Bytes[44], b)) /*<<digest.ml:88:37>>*/ ;
     /*<<digest.ml:88:37>>*/ }
    function substring(str, ofs, len){
     var _d_ = ofs < 0 ? 1 : 0;
     if(_d_)
      var _e_ = _d_;
     else
      var
       _f_ = len < 0 ? 1 : 0,
       _e_ = _f_ || ((caml_ml_string_length(str) - len | 0) < ofs ? 1 : 0);
     if(_e_)
       /*<<digest.ml:92:9>>*/  /*<<digest.ml:92:9>>*/ caml_call1
        /*<<digest.ml:92:9>>*/ (Stdlib[1], cst_Digest_substring);
      /*<<digest.ml:93:4>>*/ return  /*<<digest.ml:93:4>>*/ caml_blake2_string
              /*<<digest.ml:93:4>>*/ (hash_length, cst, str, ofs, len) /*<<digest.ml:93:44>>*/ ;
     /*<<digest.ml:93:44>>*/ }
    function subbytes(b, ofs, len){
      /*<<digest.ml:96:4>>*/ return  /*<<digest.ml:96:4>>*/ substring
              /*<<digest.ml:96:4>>*/ ( /*<<digest.ml:96:14>>*/ caml_call1
                /*<<digest.ml:96:14>>*/ (Stdlib_Bytes[44], b),
              ofs,
              len) /*<<digest.ml:96:48>>*/ ;
     /*<<digest.ml:96:48>>*/ }
    function channel(ic, toread){
     var
      buf_size =  /*<<digest.ml:99:4>>*/ 4096,
      buf =
         /*<<digest.ml:100:14>>*/  /*<<digest.ml:100:14>>*/ caml_create_bytes
          /*<<digest.ml:100:14>>*/ (4096),
      ctx =
         /*<<digest.ml:82:18>>*/  /*<<digest.ml:82:18>>*/ runtime.caml_blake2_create
          /*<<digest.ml:82:18>>*/ (hash_length, cst);
      /*<<digest.ml:102:4>>*/ if(0 <= toread){
      var toread$0 = toread;
       /*<<digest.ml:111:8>>*/ for(;;){
       if(0 === toread$0)
         /*<<digest.ml:111:27>>*/ return  /*<<digest.ml:111:27>>*/ caml_blake2_final
                 /*<<digest.ml:111:27>>*/ (ctx, hash_length) /*<<digest.ml:121:7>>*/ ;
       var
        _c_ =
           /*<<digest.ml:112:44>>*/  /*<<digest.ml:112:44>>*/ caml_call2
            /*<<digest.ml:112:44>>*/ (Stdlib_Int[10], buf_size, toread$0),
        n =
           /*<<digest.ml:112:18>>*/  /*<<digest.ml:112:18>>*/ caml_call4
            /*<<digest.ml:112:18>>*/ (Stdlib_In_channel[16], ic, buf, 0, _c_);
        /*<<digest.ml:113:10>>*/ if(0 === n)
         /*<<digest.ml:114:15>>*/ throw  /*<<digest.ml:114:15>>*/ caml_maybe_attach_backtrace
                /*<<digest.ml:114:15>>*/ (Stdlib[12], 1);
        /*<<digest.ml:116:12>>*/  /*<<digest.ml:116:12>>*/ caml_blake2_update
         /*<<digest.ml:116:12>>*/ (ctx,
          /*<<digest.ml:116:23>>*/ caml_call1
           /*<<digest.ml:116:23>>*/ (Stdlib_Bytes[44], buf),
         0,
         n);
       var toread$1 = toread$0 - n | 0;
       toread$0 = toread$1;
      }
     }
     else
       /*<<digest.ml:104:8>>*/ for(;;){
       var
        n$0 =
           /*<<digest.ml:104:16>>*/  /*<<digest.ml:104:16>>*/ caml_call4
            /*<<digest.ml:104:16>>*/ (Stdlib_In_channel[16],
            ic,
            buf,
            0,
            buf_size);
        /*<<digest.ml:105:8>>*/ if(0 === n$0)
         /*<<digest.ml:106:13>>*/ return  /*<<digest.ml:106:13>>*/ caml_blake2_final
                 /*<<digest.ml:106:13>>*/ (ctx, hash_length) /*<<digest.ml:121:7>>*/ ;
        /*<<digest.ml:107:14>>*/  /*<<digest.ml:107:14>>*/ caml_blake2_update
         /*<<digest.ml:107:14>>*/ (ctx,
          /*<<digest.ml:107:25>>*/ caml_call1
           /*<<digest.ml:107:25>>*/ (Stdlib_Bytes[44], buf),
         0,
         n$0);
      }
     /*<<digest.ml:121:7>>*/ }
    function file(filename){
      /*<<digest.ml:124:4>>*/ return  /*<<digest.ml:124:38>>*/ caml_call2
              /*<<digest.ml:124:38>>*/ (Stdlib_In_channel[5],
              filename,
              function(ic){
                /*<<digest.ml:124:49>>*/ return  /*<<digest.ml:124:49>>*/ channel
                        /*<<digest.ml:124:49>>*/ (ic, -1) /*<<digest.ml:124:64>>*/ ;
               /*<<digest.ml:124:64>>*/ }) /*<<digest.ml:124:65>>*/ ;
     /*<<digest.ml:124:65>>*/ }
    function output(chan, digest){
      /*<<digest.ml:126:27>>*/ return  /*<<digest.ml:126:27>>*/ caml_call2
              /*<<digest.ml:126:27>>*/ (Stdlib[66], chan, digest) /*<<digest.ml:126:52>>*/ ;
     /*<<digest.ml:126:52>>*/ }
    function input(chan){
      /*<<digest.ml:128:19>>*/ return  /*<<digest.ml:126:13>>*/ caml_call2
              /*<<digest.ml:126:13>>*/ (Stdlib[86], chan, hash_length) /*<<digest.ml:128:55>>*/ ;
     /*<<digest.ml:128:55>>*/ }
    function to_hex(d){
      /*<<digest.ml:131:4>>*/ if(caml_ml_string_length(d) !== hash_length)
       /*<<digest.ml:131:43>>*/  /*<<digest.ml:131:43>>*/ caml_call1
        /*<<digest.ml:131:43>>*/ (Stdlib[1], cst_Digest_to_hex);
      /*<<digest.ml:131:43>>*/ return  /*<<digest.ml:131:43>>*/ hex_of_string
              /*<<digest.ml:131:43>>*/ (d) /*<<digest.ml:132:19>>*/ ;
     /*<<digest.ml:132:19>>*/ }
    function of_hex(s){
      /*<<digest.ml:135:4>>*/ if
      (caml_ml_string_length(s) !== (hash_length * 2 | 0))
       /*<<digest.ml:135:47>>*/  /*<<digest.ml:135:47>>*/ caml_call1
        /*<<digest.ml:135:47>>*/ (Stdlib[1], cst_Digest_of_hex$0);
      /*<<digest.ml:135:47>>*/ return  /*<<digest.ml:135:47>>*/ string_of_hex
              /*<<digest.ml:135:47>>*/ (s) /*<<digest.ml:136:19>>*/ ;
     /*<<digest.ml:136:19>>*/ }
     /*<<digest.ml:62:55>>*/ return [0,
            hash_length,
            compare,
            equal,
            string,
            bytes,
            substring,
            subbytes,
            channel,
            file,
            output,
            input,
            to_hex,
            of_hex] /*<<digest.ml:62:55>>*/ ;
   }
   var
    BLAKE128 = BLAKE2([0, 16]),
    BLAKE256 = BLAKE2([0, 32]),
    BLAKE512 = BLAKE2([0, 64]),
    compare = Stdlib_String[10],
    equal = Stdlib_String[9],
    cst_Digest_substring$0 = cst_Digest_substring$1,
    cst_Digest_to_hex$0 = cst_Digest_to_hex$1,
    cst_Digest_from_hex = "Digest.from_hex";
   function string(str){
     /*<<digest.ml:159:4>>*/ return  /*<<digest.ml:159:4>>*/ caml_md5_string
             /*<<digest.ml:159:4>>*/ (str, 0, caml_ml_string_length(str)) /*<<digest.ml:159:43>>*/ ;
    /*<<digest.ml:159:43>>*/ }
   function bytes(b){
     /*<<digest.ml:161:16>>*/ return  /*<<digest.ml:161:23>>*/ string
             /*<<digest.ml:161:23>>*/ ( /*<<digest.ml:161:23>>*/ caml_call1
               /*<<digest.ml:161:23>>*/ (Stdlib_Bytes[44], b)) /*<<digest.ml:161:49>>*/ ;
    /*<<digest.ml:161:49>>*/ }
   function substring(str, ofs, len){
     /*<<digest.ml:164:4>>*/ if
     (0 <= ofs && 0 <= len && (caml_ml_string_length(str) - len | 0) >= ofs)
      /*<<digest.ml:166:9>>*/ return  /*<<digest.ml:166:9>>*/ caml_md5_string
              /*<<digest.ml:166:9>>*/ (str, ofs, len) /*<<digest.ml:166:34>>*/ ;
     /*<<digest.ml:165:9>>*/ return  /*<<digest.ml:165:9>>*/ caml_call1
             /*<<digest.ml:165:9>>*/ (Stdlib[1], cst_Digest_substring$0) /*<<digest.ml:166:34>>*/ ;
    /*<<digest.ml:166:34>>*/ }
   function subbytes(b, ofs, len){
     /*<<digest.ml:168:27>>*/ return  /*<<digest.ml:168:27>>*/ substring
             /*<<digest.ml:168:27>>*/ ( /*<<digest.ml:168:37>>*/ caml_call1
               /*<<digest.ml:168:37>>*/ (Stdlib_Bytes[44], b),
             ofs,
             len) /*<<digest.ml:168:71>>*/ ;
    /*<<digest.ml:168:71>>*/ }
   function file(filename){
     /*<<digest.ml:171:4>>*/ return  /*<<digest.ml:171:38>>*/ caml_call2
             /*<<digest.ml:171:38>>*/ (Stdlib_In_channel[5],
             filename,
             function(ic){
               /*<<digest.ml:171:49>>*/ return  /*<<digest.ml:171:49>>*/ caml_md5_chan
                       /*<<digest.ml:171:49>>*/ (ic, -1) /*<<digest.ml:171:64>>*/ ;
              /*<<digest.ml:171:64>>*/ }) /*<<digest.ml:171:65>>*/ ;
    /*<<digest.ml:171:65>>*/ }
   function output(chan, digest){
     /*<<digest.ml:173:27>>*/ return  /*<<digest.ml:173:27>>*/ caml_call2
             /*<<digest.ml:173:27>>*/ (Stdlib[66], chan, digest) /*<<digest.ml:173:52>>*/ ;
    /*<<digest.ml:173:52>>*/ }
   function input(chan){
     /*<<digest.ml:175:19>>*/ return  /*<<digest.ml:175:19>>*/ caml_call2
             /*<<digest.ml:175:19>>*/ (Stdlib[86], chan, 16) /*<<digest.ml:175:46>>*/ ;
    /*<<digest.ml:175:46>>*/ }
   function to_hex(d){
     /*<<digest.ml:178:4>>*/ if(16 !== caml_ml_string_length(d))
      /*<<digest.ml:178:34>>*/  /*<<digest.ml:178:34>>*/ caml_call1
       /*<<digest.ml:178:34>>*/ (Stdlib[1], cst_Digest_to_hex$0);
     /*<<digest.ml:178:34>>*/ return  /*<<digest.ml:178:34>>*/ hex_of_string
             /*<<digest.ml:178:34>>*/ (d) /*<<digest.ml:179:19>>*/ ;
    /*<<digest.ml:179:19>>*/ }
   function of_hex(s){
     /*<<digest.ml:182:4>>*/ if(32 !== caml_ml_string_length(s))
      /*<<digest.ml:182:34>>*/  /*<<digest.ml:182:34>>*/ caml_call1
       /*<<digest.ml:182:34>>*/ (Stdlib[1], cst_Digest_from_hex);
     /*<<digest.ml:182:34>>*/ return  /*<<digest.ml:182:34>>*/ string_of_hex
             /*<<digest.ml:182:34>>*/ (s) /*<<digest.ml:183:19>>*/ ;
    /*<<digest.ml:183:19>>*/ }
   var
    Stdlib_Digest =
      [0,
       compare,
       equal,
       string,
       bytes,
       substring,
       subbytes,
       caml_md5_chan,
       file,
       output,
       input,
       to_hex,
       of_hex,
       of_hex,
       BLAKE128,
       BLAKE256,
       BLAKE512,
       [0,
        16,
        compare,
        equal,
        string,
        bytes,
        substring,
        subbytes,
        caml_md5_chan,
        file,
        output,
        input,
        to_hex,
        of_hex]];
   runtime.caml_register_global(17, Stdlib_Digest, "Stdlib__Digest");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Bigarray
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst_Bigarray_Array3_of_array_n$1 =
       /*<<?>>*/ "Bigarray.Array3.of_array: non-cubic data",
    caml_ba_change_layout =  /*<<?>>*/ runtime.caml_ba_change_layout,
    caml_ba_create =  /*<<?>>*/ runtime.caml_ba_create,
    caml_ba_dim_1 =  /*<<?>>*/ runtime.caml_ba_dim_1,
    caml_ba_dim_2 =  /*<<?>>*/ runtime.caml_ba_dim_2,
    caml_ba_kind =  /*<<?>>*/ runtime.caml_ba_kind,
    caml_ba_num_dims =  /*<<?>>*/ runtime.caml_ba_num_dims,
    caml_ba_reshape =  /*<<?>>*/ runtime.caml_ba_reshape,
    caml_ba_set_1 =  /*<<?>>*/ runtime.caml_ba_set_1,
    caml_ba_set_2 =  /*<<?>>*/ runtime.caml_ba_set_2,
    caml_ba_set_3 =  /*<<?>>*/ runtime.caml_ba_set_3,
    caml_ba_set_generic =  /*<<?>>*/ runtime.caml_ba_set_generic,
    caml_ba_slice =  /*<<?>>*/ runtime.caml_ba_slice,
    caml_check_bound =  /*<<?>>*/ runtime.caml_check_bound,
    caml_make_vect =  /*<<?>>*/ runtime.caml_make_vect,
    caml_mul =  /*<<?>>*/ runtime.caml_mul;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Sys = global_data.Stdlib__Sys;
   function kind_size_in_bytes(param){
     /*<<bigarray.ml:76:4>>*/ switch(param){
      case 0:
        /*<<bigarray.ml:78:15>>*/ return 4 /*<<bigarray.ml:78:15>>*/ ;
      case 1:
        /*<<bigarray.ml:79:15>>*/ return 8 /*<<bigarray.ml:79:15>>*/ ;
      case 2:
        /*<<bigarray.ml:80:19>>*/ return 1 /*<<bigarray.ml:80:19>>*/ ;
      case 3:
        /*<<bigarray.ml:81:21>>*/ return 1 /*<<bigarray.ml:81:21>>*/ ;
      case 4:
        /*<<bigarray.ml:82:20>>*/ return 2 /*<<bigarray.ml:82:20>>*/ ;
      case 5:
        /*<<bigarray.ml:83:22>>*/ return 2 /*<<bigarray.ml:83:22>>*/ ;
      case 6:
        /*<<bigarray.ml:84:13>>*/ return 4 /*<<bigarray.ml:84:13>>*/ ;
      case 7:
        /*<<bigarray.ml:85:13>>*/ return 8 /*<<bigarray.ml:85:13>>*/ ;
      case 8:
       return Stdlib_Sys[9] / 8 | 0;
      case 9:
       return Stdlib_Sys[9] / 8 | 0;
      case 10:
        /*<<bigarray.ml:88:17>>*/ return 8 /*<<bigarray.ml:88:17>>*/ ;
      case 11:
        /*<<bigarray.ml:89:17>>*/ return 16 /*<<bigarray.ml:89:17>>*/ ;
      case 12:
        /*<<bigarray.ml:90:12>>*/ return 1 /*<<bigarray.ml:90:12>>*/ ;
      default:  /*<<bigarray.ml:77:15>>*/ return 2 /*<<bigarray.ml:77:15>>*/ ;
    }
    /*<<bigarray.ml:90:13>>*/ }
   var
    cst_Bigarray_Array2_of_array_n =
      "Bigarray.Array2.of_array: non-rectangular data",
    cst_Bigarray_Array3_of_array_n = cst_Bigarray_Array3_of_array_n$1,
    cst_Bigarray_Array3_of_array_n$0 = cst_Bigarray_Array3_of_array_n$1,
    cst_Bigarray_array0_of_genarra = "Bigarray.array0_of_genarray",
    cst_Bigarray_array1_of_genarra = "Bigarray.array1_of_genarray",
    cst_Bigarray_array2_of_genarra = "Bigarray.array2_of_genarray",
    cst_Bigarray_array3_of_genarra = "Bigarray.array3_of_genarray";
   function cloop(arr, idx, f, col, max){
     /*<<bigarray.ml:108:4>>*/ if(col === idx.length - 1){
      /*<<bigarray.ml:108:35>>*/  /*<<bigarray.ml:108:35>>*/ caml_ba_set_generic
       /*<<bigarray.ml:108:35>>*/ (arr,
       idx,
        /*<<bigarray.ml:108:47>>*/ caml_call1
         /*<<bigarray.ml:108:47>>*/ (f, idx));
      /*<<bigarray.ml:108:35>>*/ return /*<<bigarray.ml:108:35>>*/ ;
    }
    var
     _am_ =
        /*<<bigarray.ml:109:27>>*/ caml_check_bound(max, col)[1 + col] - 1 | 0,
     _al_ =  /*<<bigarray.ml:109:9>>*/ 0;
    if(_am_ >= 0){
     var j = _al_;
     for(;;){
       /*<<bigarray.ml:110:11>>*/ caml_check_bound(idx, col)[1 + col] = j;
       /*<<bigarray.ml:111:11>>*/  /*<<bigarray.ml:111:11>>*/ cloop
        /*<<bigarray.ml:111:11>>*/ (arr, idx, f, col + 1 | 0, max);
      var _an_ =  /*<<bigarray.ml:111:11>>*/ j + 1 | 0;
      if(_am_ === j) break;
      j = _an_;
     }
    }
    /*<<bigarray.ml:112:13>>*/ }
   function floop(arr, idx, f, col, max){
     /*<<bigarray.ml:114:4>>*/ if(0 > col){
      /*<<bigarray.ml:114:20>>*/  /*<<bigarray.ml:114:20>>*/ caml_ba_set_generic
       /*<<bigarray.ml:114:20>>*/ (arr,
       idx,
        /*<<bigarray.ml:114:32>>*/ caml_call1
         /*<<bigarray.ml:114:32>>*/ (f, idx));
      /*<<bigarray.ml:114:20>>*/ return /*<<bigarray.ml:114:20>>*/ ;
    }
    var
     _aj_ =  /*<<bigarray.ml:115:22>>*/ caml_check_bound(max, col)[1 + col],
     _ai_ =  /*<<bigarray.ml:115:9>>*/ 1;
    if(_aj_ >= 1){
     var j = _ai_;
     for(;;){
       /*<<bigarray.ml:116:11>>*/ caml_check_bound(idx, col)[1 + col] = j;
       /*<<bigarray.ml:117:11>>*/  /*<<bigarray.ml:117:11>>*/ floop
        /*<<bigarray.ml:117:11>>*/ (arr, idx, f, col - 1 | 0, max);
      var _ak_ =  /*<<bigarray.ml:117:11>>*/ j + 1 | 0;
      if(_aj_ === j) break;
      j = _ak_;
     }
    }
    /*<<bigarray.ml:118:13>>*/ }
   function init(kind, layout, dims, f){
    var
     arr =
        /*<<bigarray.ml:120:14>>*/  /*<<bigarray.ml:120:14>>*/ caml_ba_create
         /*<<bigarray.ml:120:14>>*/ (kind, layout, dims),
     dlen =  /*<<bigarray.ml:121:4>>*/ dims.length - 1;
     /*<<bigarray.ml:122:4>>*/ return layout
            ? ( /*<<bigarray.ml:124:24>>*/ floop
                /*<<bigarray.ml:124:24>>*/ (arr,
                 /*<<bigarray.ml:124:34>>*/ caml_make_vect
                  /*<<bigarray.ml:124:34>>*/ (dlen, 1),
                f,
                dlen - 1 | 0,
                dims),
              arr)
            : ( /*<<bigarray.ml:123:18>>*/ cloop
                /*<<bigarray.ml:123:18>>*/ (arr,
                 /*<<bigarray.ml:123:28>>*/ caml_make_vect
                  /*<<bigarray.ml:123:28>>*/ (dlen, 0),
                f,
                0,
                dims),
              arr) /*<<bigarray.ml:124:77>>*/ ;
    /*<<bigarray.ml:124:77>>*/ }
   function dims(a){
    var
     n =
        /*<<bigarray.ml:129:12>>*/  /*<<bigarray.ml:129:12>>*/ caml_ba_num_dims
         /*<<bigarray.ml:129:12>>*/ (a),
     d =
        /*<<bigarray.ml:130:12>>*/  /*<<bigarray.ml:130:12>>*/ caml_make_vect
         /*<<bigarray.ml:130:12>>*/ (n, 0),
     _af_ =  /*<<bigarray.ml:131:4>>*/ n - 1 | 0,
     _ae_ =  /*<<bigarray.ml:130:12>>*/ 0;
    if(_af_ >= 0){
     var i = _ae_;
     for(;;){
      var
       _ag_ =
          /*<<bigarray.ml:131:33>>*/  /*<<bigarray.ml:131:33>>*/ runtime.caml_ba_dim
           /*<<bigarray.ml:131:33>>*/ (a, i);
       /*<<bigarray.ml:131:24>>*/ caml_check_bound(d, i)[1 + i] = _ag_;
      var _ah_ =  /*<<bigarray.ml:131:24>>*/ i + 1 | 0;
      if(_af_ === i) break;
      i = _ah_;
     }
    }
     /*<<bigarray.ml:132:4>>*/ return d /*<<bigarray.ml:132:4>>*/ ;
    /*<<bigarray.ml:132:5>>*/ }
   function size_in_bytes(arr){
    var
     _ac_ =
        /*<<bigarray.ml:140:63>>*/  /*<<bigarray.ml:140:63>>*/ dims
         /*<<bigarray.ml:140:63>>*/ (arr),
     _ad_ =
        /*<<bigarray.ml:140:38>>*/  /*<<bigarray.ml:140:38>>*/ caml_call3
         /*<<bigarray.ml:140:38>>*/ (Stdlib_Array[18], caml_mul, 1, _ac_);
     /*<<bigarray.ml:140:4>>*/ return  /*<<bigarray.ml:140:4>>*/ caml_mul
             /*<<bigarray.ml:140:4>>*/ ( /*<<bigarray.ml:140:4>>*/ kind_size_in_bytes
               /*<<bigarray.ml:140:4>>*/ ( /*<<bigarray.ml:140:24>>*/ caml_ba_kind
                 /*<<bigarray.ml:140:24>>*/ (arr)),
             _ad_) /*<<bigarray.ml:140:74>>*/ ;
    /*<<bigarray.ml:140:74>>*/ }
   function create(kind, layout){
     /*<<bigarray.ml:161:4>>*/ return  /*<<bigarray.ml:161:4>>*/ caml_ba_create
             /*<<bigarray.ml:161:4>>*/ (kind, layout, [0]) /*<<bigarray.ml:161:36>>*/ ;
    /*<<bigarray.ml:161:36>>*/ }
   function get(arr){
     /*<<bigarray.ml:162:16>>*/ return  /*<<bigarray.ml:162:16>>*/ runtime.caml_ba_get_generic
             /*<<bigarray.ml:162:16>>*/ (arr, [0]) /*<<bigarray.ml:162:37>>*/ ;
    /*<<bigarray.ml:162:37>>*/ }
   function set(arr){
    var _aa_ =  /*<<bigarray.ml:163:16>>*/ [0];
     /*<<bigarray.ml:163:33>>*/ return function(_ab_){
      /*<<?>>*/ return caml_ba_set_generic(arr, _aa_, _ab_);} /*<<bigarray.ml:163:33>>*/ ;
    /*<<bigarray.ml:163:37>>*/ }
   function size_in_bytes$0(arr){
     /*<<bigarray.ml:170:26>>*/ return  /*<<bigarray.ml:170:45>>*/ kind_size_in_bytes
             /*<<bigarray.ml:170:45>>*/ ( /*<<bigarray.ml:170:45>>*/ caml_ba_kind
               /*<<bigarray.ml:170:45>>*/ (arr)) /*<<bigarray.ml:170:55>>*/ ;
    /*<<bigarray.ml:170:55>>*/ }
   function of_value(kind, layout, v){
    var
     a =
        /*<<bigarray.ml:176:12>>*/  /*<<bigarray.ml:176:12>>*/ create
         /*<<bigarray.ml:176:12>>*/ (kind, layout);
     /*<<bigarray.ml:177:4>>*/  /*<<bigarray.ml:177:4>>*/  /*<<bigarray.ml:177:4>>*/ set
       /*<<bigarray.ml:177:4>>*/ (a)
      /*<<bigarray.ml:177:4>>*/ (v);
     /*<<bigarray.ml:177:4>>*/ return a /*<<bigarray.ml:177:4>>*/ ;
    /*<<bigarray.ml:178:5>>*/ }
   function create$0(kind, layout, dim){
     /*<<bigarray.ml:185:4>>*/ return  /*<<bigarray.ml:185:4>>*/ caml_ba_create
             /*<<bigarray.ml:185:4>>*/ (kind, layout, [0, dim]) /*<<bigarray.ml:185:39>>*/ ;
    /*<<bigarray.ml:185:39>>*/ }
   function size_in_bytes$1(arr){
    var
     _$_ =
        /*<<bigarray.ml:199:38>>*/  /*<<bigarray.ml:199:38>>*/ caml_ba_dim_1
         /*<<bigarray.ml:199:38>>*/ (arr);
     /*<<bigarray.ml:199:4>>*/ return  /*<<bigarray.ml:199:4>>*/ caml_mul
             /*<<bigarray.ml:199:4>>*/ ( /*<<bigarray.ml:199:4>>*/ kind_size_in_bytes
               /*<<bigarray.ml:199:4>>*/ ( /*<<bigarray.ml:199:24>>*/ caml_ba_kind
                 /*<<bigarray.ml:199:24>>*/ (arr)),
             _$_) /*<<bigarray.ml:199:47>>*/ ;
    /*<<bigarray.ml:199:47>>*/ }
   function slice(a, n){
     /*<<bigarray.ml:203:4>>*/ return  /*<<bigarray.ml:203:10>>*/ runtime.caml_ba_layout
              /*<<bigarray.ml:203:10>>*/ (a)
            ?  /*<<bigarray.ml:205:25>>*/ caml_ba_slice
               /*<<bigarray.ml:205:25>>*/ (a, [0, n])
            :  /*<<bigarray.ml:204:19>>*/ caml_ba_slice
               /*<<bigarray.ml:204:19>>*/ (a, [0, n]) /*<<bigarray.ml:205:76>>*/ ;
    /*<<bigarray.ml:205:76>>*/ }
   function init$0(kind, layout, dim, f){
    var
     arr =
        /*<<bigarray.ml:213:14>>*/  /*<<bigarray.ml:213:14>>*/ create$0
         /*<<bigarray.ml:213:14>>*/ (kind, layout, dim);
     /*<<bigarray.ml:214:4>>*/ if(layout){
     var _Z_ =  /*<<bigarray.ml:211:4>>*/ 1;
     if(dim >= 1){
      var i$0 = _Z_;
      for(;;){
        /*<<bigarray.ml:211:24>>*/  /*<<bigarray.ml:211:24>>*/ caml_ba_set_1
         /*<<bigarray.ml:211:24>>*/ (arr,
         i$0,
          /*<<bigarray.ml:211:41>>*/ caml_call1
           /*<<bigarray.ml:211:41>>*/ (f, i$0));
       var ___ =  /*<<bigarray.ml:211:24>>*/ i$0 + 1 | 0;
       if(dim === i$0) break;
       i$0 = ___;
      }
     }
      /*<<bigarray.ml:216:24>>*/ return arr /*<<bigarray.ml:216:24>>*/ ;
    }
    var _X_ = dim - 1 | 0, _W_ =  /*<<bigarray.ml:209:4>>*/ 0;
    if(_X_ >= 0){
     var i = _W_;
     for(;;){
       /*<<bigarray.ml:209:29>>*/  /*<<bigarray.ml:209:29>>*/ caml_ba_set_1
        /*<<bigarray.ml:209:29>>*/ (arr,
        i,
         /*<<bigarray.ml:209:46>>*/ caml_call1
          /*<<bigarray.ml:209:46>>*/ (f, i));
      var _Y_ =  /*<<bigarray.ml:209:29>>*/ i + 1 | 0;
      if(_X_ === i) break;
      i = _Y_;
     }
    }
     /*<<bigarray.ml:215:18>>*/ return arr /*<<bigarray.ml:215:18>>*/ ;
    /*<<bigarray.ml:216:51>>*/ }
   function of_array(kind, layout, data){
    var
     ba =
        /*<<bigarray.ml:218:13>>*/  /*<<bigarray.ml:218:13>>*/ create$0
         /*<<bigarray.ml:218:13>>*/ (kind, layout, data.length - 1),
     ofs =  /*<<bigarray.ml:219:4>>*/ layout ? 1 : 0,
     _U_ = data.length - 2 | 0,
     _T_ = 0;
    if(_U_ >= 0){
     var i = _T_;
     for(;;){
       /*<<bigarray.ml:224:42>>*/  /*<<bigarray.ml:224:42>>*/ caml_ba_set_1
        /*<<bigarray.ml:224:42>>*/ (ba,
        i + ofs | 0,
        caml_check_bound(data, i)[1 + i]);
      var _V_ =  /*<<bigarray.ml:224:42>>*/ i + 1 | 0;
      if(_U_ === i) break;
      i = _V_;
     }
    }
     /*<<bigarray.ml:225:4>>*/ return ba /*<<bigarray.ml:225:4>>*/ ;
    /*<<bigarray.ml:225:6>>*/ }
   function create$1(kind, layout, dim1, dim2){
     /*<<bigarray.ml:231:4>>*/ return  /*<<bigarray.ml:231:4>>*/ caml_ba_create
             /*<<bigarray.ml:231:4>>*/ (kind, layout, [0, dim1, dim2]) /*<<bigarray.ml:231:46>>*/ ;
    /*<<bigarray.ml:231:46>>*/ }
   function size_in_bytes$2(arr){
    var
     _R_ =
        /*<<bigarray.ml:247:51>>*/  /*<<bigarray.ml:247:51>>*/ caml_ba_dim_2
         /*<<bigarray.ml:247:51>>*/ (arr),
     _S_ =
        /*<<bigarray.ml:247:38>>*/  /*<<bigarray.ml:247:38>>*/ caml_ba_dim_1
         /*<<bigarray.ml:247:38>>*/ (arr);
    return caml_mul
            ( /*<<bigarray.ml:247:4>>*/ caml_mul
               /*<<bigarray.ml:247:4>>*/ ( /*<<bigarray.ml:247:4>>*/ kind_size_in_bytes
                 /*<<bigarray.ml:247:4>>*/ ( /*<<bigarray.ml:247:24>>*/ caml_ba_kind
                   /*<<bigarray.ml:247:24>>*/ (arr)),
               _S_),
             _R_) /*<<bigarray.ml:247:61>>*/ ;
    /*<<bigarray.ml:247:61>>*/ }
   function slice_left(a, n){
     /*<<bigarray.ml:254:23>>*/ return  /*<<bigarray.ml:254:23>>*/ caml_ba_slice
             /*<<bigarray.ml:254:23>>*/ (a, [0, n]) /*<<bigarray.ml:254:50>>*/ ;
    /*<<bigarray.ml:254:50>>*/ }
   function slice_right(a, n){
     /*<<bigarray.ml:255:24>>*/ return  /*<<bigarray.ml:255:24>>*/ caml_ba_slice
             /*<<bigarray.ml:255:24>>*/ (a, [0, n]) /*<<bigarray.ml:255:52>>*/ ;
    /*<<bigarray.ml:255:52>>*/ }
   function init$1(kind, layout, dim1, dim2, f){
    var
     arr =
        /*<<bigarray.ml:271:14>>*/  /*<<bigarray.ml:271:14>>*/ create$1
         /*<<bigarray.ml:271:14>>*/ (kind, layout, dim1, dim2);
     /*<<bigarray.ml:272:4>>*/ if(layout){
     var _N_ =  /*<<bigarray.ml:265:4>>*/ 1;
     if(dim2 >= 1){
      var j$0 = _N_;
      for(;;){
       var _O_ =  /*<<bigarray.ml:266:6>>*/ 1;
       if(dim1 >= 1){
        var i$0 = _O_;
        for(;;){
          /*<<bigarray.ml:267:8>>*/  /*<<bigarray.ml:267:8>>*/ caml_ba_set_2
           /*<<bigarray.ml:267:8>>*/ (arr,
           i$0,
           j$0,
            /*<<bigarray.ml:267:27>>*/ caml_call2
             /*<<bigarray.ml:267:27>>*/ (f, i$0, j$0));
         var _Q_ =  /*<<bigarray.ml:267:8>>*/ i$0 + 1 | 0;
         if(dim1 === i$0) break;
         i$0 = _Q_;
        }
       }
       var _P_ =  /*<<bigarray.ml:265:4>>*/ j$0 + 1 | 0;
       if(dim2 === j$0) break;
       j$0 = _P_;
      }
     }
      /*<<bigarray.ml:274:24>>*/ return arr /*<<bigarray.ml:274:24>>*/ ;
    }
    var _I_ = dim1 - 1 | 0, _H_ =  /*<<bigarray.ml:259:4>>*/ 0;
    if(_I_ >= 0){
     var i = _H_;
     for(;;){
      var _K_ = dim2 - 1 | 0, _J_ =  /*<<bigarray.ml:260:6>>*/ 0;
      if(_K_ >= 0){
       var j = _J_;
       for(;;){
         /*<<bigarray.ml:261:8>>*/  /*<<bigarray.ml:261:8>>*/ caml_ba_set_2
          /*<<bigarray.ml:261:8>>*/ (arr,
          i,
          j,
           /*<<bigarray.ml:261:27>>*/ caml_call2
            /*<<bigarray.ml:261:27>>*/ (f, i, j));
        var _M_ =  /*<<bigarray.ml:261:8>>*/ j + 1 | 0;
        if(_K_ === j) break;
        j = _M_;
       }
      }
      var _L_ =  /*<<bigarray.ml:259:4>>*/ i + 1 | 0;
      if(_I_ === i) break;
      i = _L_;
     }
    }
     /*<<bigarray.ml:273:18>>*/ return arr /*<<bigarray.ml:273:18>>*/ ;
    /*<<bigarray.ml:274:57>>*/ }
   function of_array$0(kind, layout, data){
    var
     dim1 = data.length - 1,
     dim2 =
        /*<<bigarray.ml:277:4>>*/ 0 === dim1
        ? 0
        : caml_check_bound(data, 0)[1].length - 1,
     ba =
        /*<<bigarray.ml:278:13>>*/  /*<<bigarray.ml:278:13>>*/ create$1
         /*<<bigarray.ml:278:13>>*/ (kind, layout, dim1, dim2),
     ofs =  /*<<bigarray.ml:279:4>>*/ layout ? 1 : 0,
     _C_ =  /*<<bigarray.ml:284:4>>*/ dim1 - 1 | 0,
     _B_ = 0;
    if(_C_ >= 0){
     var i = _B_;
     for(;;){
      var row =  /*<<bigarray.ml:285:16>>*/ caml_check_bound(data, i)[1 + i];
      if(row.length - 1 !== dim2)
        /*<<bigarray.ml:287:8>>*/  /*<<bigarray.ml:287:8>>*/ caml_call1
         /*<<bigarray.ml:287:8>>*/ (Stdlib[1], cst_Bigarray_Array2_of_array_n);
      var
       _E_ =  /*<<bigarray.ml:277:32>>*/ dim2 - 1 | 0,
       _D_ =  /*<<bigarray.ml:287:8>>*/ 0;
      if(_E_ >= 0){
       var j = _D_;
       for(;;){
         /*<<bigarray.ml:289:8>>*/  /*<<bigarray.ml:289:8>>*/ caml_ba_set_2
          /*<<bigarray.ml:289:8>>*/ (ba,
          i + ofs | 0,
          j + ofs | 0,
          caml_check_bound(row, j)[1 + j]);
        var _G_ =  /*<<bigarray.ml:289:8>>*/ j + 1 | 0;
        if(_E_ === j) break;
        j = _G_;
       }
      }
      var _F_ =  /*<<bigarray.ml:284:4>>*/ i + 1 | 0;
      if(_C_ === i) break;
      i = _F_;
     }
    }
     /*<<bigarray.ml:292:4>>*/ return ba /*<<bigarray.ml:292:4>>*/ ;
    /*<<bigarray.ml:292:6>>*/ }
   function create$2(kind, layout, dim1, dim2, dim3){
     /*<<bigarray.ml:298:4>>*/ return  /*<<bigarray.ml:298:4>>*/ caml_ba_create
             /*<<bigarray.ml:298:4>>*/ (kind, layout, [0, dim1, dim2, dim3]) /*<<bigarray.ml:298:52>>*/ ;
    /*<<bigarray.ml:298:52>>*/ }
   function size_in_bytes$3(arr){
    var
     _y_ =
        /*<<bigarray.ml:316:64>>*/  /*<<bigarray.ml:316:64>>*/ runtime.caml_ba_dim_3
         /*<<bigarray.ml:316:64>>*/ (arr),
     _z_ =
        /*<<bigarray.ml:316:51>>*/  /*<<bigarray.ml:316:51>>*/ caml_ba_dim_2
         /*<<bigarray.ml:316:51>>*/ (arr),
     _A_ =
        /*<<bigarray.ml:316:38>>*/  /*<<bigarray.ml:316:38>>*/ caml_ba_dim_1
         /*<<bigarray.ml:316:38>>*/ (arr);
    return caml_mul
            (caml_mul
              ( /*<<bigarray.ml:316:4>>*/ caml_mul
                 /*<<bigarray.ml:316:4>>*/ ( /*<<bigarray.ml:316:4>>*/ kind_size_in_bytes
                   /*<<bigarray.ml:316:4>>*/ ( /*<<bigarray.ml:316:24>>*/ caml_ba_kind
                     /*<<bigarray.ml:316:24>>*/ (arr)),
                 _A_),
               _z_),
             _y_) /*<<bigarray.ml:316:74>>*/ ;
    /*<<bigarray.ml:316:74>>*/ }
   function slice_left_1(a, n, m){
     /*<<bigarray.ml:323:27>>*/ return  /*<<bigarray.ml:323:27>>*/ caml_ba_slice
             /*<<bigarray.ml:323:27>>*/ (a, [0, n, m]) /*<<bigarray.ml:323:57>>*/ ;
    /*<<bigarray.ml:323:57>>*/ }
   function slice_right_1(a, n, m){
     /*<<bigarray.ml:324:28>>*/ return  /*<<bigarray.ml:324:28>>*/ caml_ba_slice
             /*<<bigarray.ml:324:28>>*/ (a, [0, n, m]) /*<<bigarray.ml:324:59>>*/ ;
    /*<<bigarray.ml:324:59>>*/ }
   function slice_left_2(a, n){
     /*<<bigarray.ml:325:25>>*/ return  /*<<bigarray.ml:325:25>>*/ caml_ba_slice
             /*<<bigarray.ml:325:25>>*/ (a, [0, n]) /*<<bigarray.ml:325:52>>*/ ;
    /*<<bigarray.ml:325:52>>*/ }
   function slice_right_2(a, n){
     /*<<bigarray.ml:326:26>>*/ return  /*<<bigarray.ml:326:26>>*/ caml_ba_slice
             /*<<bigarray.ml:326:26>>*/ (a, [0, n]) /*<<bigarray.ml:326:54>>*/ ;
    /*<<bigarray.ml:326:54>>*/ }
   function init$2(kind, layout, dim1, dim2, dim3, f){
    var
     arr =
        /*<<bigarray.ml:346:14>>*/  /*<<bigarray.ml:346:14>>*/ create$2
         /*<<bigarray.ml:346:14>>*/ (kind, layout, dim1, dim2, dim3);
     /*<<bigarray.ml:347:4>>*/ if(layout){
     var _s_ =  /*<<bigarray.ml:338:4>>*/ 1;
     if(dim3 >= 1){
      var k$0 = _s_;
      for(;;){
       var _t_ =  /*<<bigarray.ml:339:6>>*/ 1;
       if(dim2 >= 1){
        var j$0 = _t_;
        for(;;){
         var _v_ =  /*<<bigarray.ml:340:8>>*/ 1;
         if(dim1 >= 1){
          var i$0 = _v_;
          for(;;){
            /*<<bigarray.ml:341:10>>*/  /*<<bigarray.ml:341:10>>*/ caml_ba_set_3
             /*<<bigarray.ml:341:10>>*/ (arr,
             i$0,
             j$0,
             k$0,
              /*<<bigarray.ml:341:31>>*/ caml_call3
               /*<<bigarray.ml:341:31>>*/ (f, i$0, j$0, k$0));
           var _x_ =  /*<<bigarray.ml:341:10>>*/ i$0 + 1 | 0;
           if(dim1 === i$0) break;
           i$0 = _x_;
          }
         }
         var _w_ =  /*<<bigarray.ml:339:6>>*/ j$0 + 1 | 0;
         if(dim2 === j$0) break;
         j$0 = _w_;
        }
       }
       var _u_ =  /*<<bigarray.ml:338:4>>*/ k$0 + 1 | 0;
       if(dim3 === k$0) break;
       k$0 = _u_;
      }
     }
      /*<<bigarray.ml:349:24>>*/ return arr /*<<bigarray.ml:349:24>>*/ ;
    }
    var _k_ = dim1 - 1 | 0, _j_ =  /*<<bigarray.ml:330:4>>*/ 0;
    if(_k_ >= 0){
     var i = _j_;
     for(;;){
      var _m_ = dim2 - 1 | 0, _l_ =  /*<<bigarray.ml:331:6>>*/ 0;
      if(_m_ >= 0){
       var j = _l_;
       for(;;){
        var _p_ = dim3 - 1 | 0, _o_ =  /*<<bigarray.ml:332:8>>*/ 0;
        if(_p_ >= 0){
         var k = _o_;
         for(;;){
           /*<<bigarray.ml:333:10>>*/  /*<<bigarray.ml:333:10>>*/ caml_ba_set_3
            /*<<bigarray.ml:333:10>>*/ (arr,
            i,
            j,
            k,
             /*<<bigarray.ml:333:31>>*/ caml_call3
              /*<<bigarray.ml:333:31>>*/ (f, i, j, k));
          var _r_ =  /*<<bigarray.ml:333:10>>*/ k + 1 | 0;
          if(_p_ === k) break;
          k = _r_;
         }
        }
        var _q_ =  /*<<bigarray.ml:331:6>>*/ j + 1 | 0;
        if(_m_ === j) break;
        j = _q_;
       }
      }
      var _n_ =  /*<<bigarray.ml:330:4>>*/ i + 1 | 0;
      if(_k_ === i) break;
      i = _n_;
     }
    }
     /*<<bigarray.ml:348:18>>*/ return arr /*<<bigarray.ml:348:18>>*/ ;
    /*<<bigarray.ml:349:62>>*/ }
   function of_array$1(kind, layout, data){
    var
     dim1 = data.length - 1,
     dim2 =
        /*<<bigarray.ml:352:4>>*/ 0 === dim1
        ? 0
        : caml_check_bound(data, 0)[1].length - 1,
     dim3 =
        /*<<bigarray.ml:353:4>>*/ 0 === dim2
        ? 0
        : caml_check_bound(caml_check_bound(data, 0)[1], 0)[1].length - 1,
     ba =
        /*<<bigarray.ml:354:13>>*/  /*<<bigarray.ml:354:13>>*/ create$2
         /*<<bigarray.ml:354:13>>*/ (kind, layout, dim1, dim2, dim3),
     ofs =  /*<<bigarray.ml:355:4>>*/ layout ? 1 : 0,
     _b_ =  /*<<bigarray.ml:360:4>>*/ dim1 - 1 | 0,
     _a_ = 0;
    if(_b_ >= 0){
     var i = _a_;
     for(;;){
      var row =  /*<<bigarray.ml:361:16>>*/ caml_check_bound(data, i)[1 + i];
      if(row.length - 1 !== dim2)
        /*<<bigarray.ml:363:8>>*/  /*<<bigarray.ml:363:8>>*/ caml_call1
         /*<<bigarray.ml:363:8>>*/ (Stdlib[1], cst_Bigarray_Array3_of_array_n);
      var
       _d_ =  /*<<bigarray.ml:352:32>>*/ dim2 - 1 | 0,
       _c_ =  /*<<bigarray.ml:363:8>>*/ 0;
      if(_d_ >= 0){
       var j = _c_;
       for(;;){
        var col =  /*<<bigarray.ml:365:18>>*/ caml_check_bound(row, j)[1 + j];
        if(col.length - 1 !== dim3)
          /*<<bigarray.ml:367:10>>*/  /*<<bigarray.ml:367:10>>*/ caml_call1
           /*<<bigarray.ml:367:10>>*/ (Stdlib[1],
           cst_Bigarray_Array3_of_array_n$0);
        var
         _g_ =  /*<<bigarray.ml:353:32>>*/ dim3 - 1 | 0,
         _f_ =  /*<<bigarray.ml:367:10>>*/ 0;
        if(_g_ >= 0){
         var k = _f_;
         for(;;){
           /*<<bigarray.ml:369:10>>*/  /*<<bigarray.ml:369:10>>*/ caml_ba_set_3
            /*<<bigarray.ml:369:10>>*/ (ba,
            i + ofs | 0,
            j + ofs | 0,
            k + ofs | 0,
            caml_check_bound(col, k)[1 + k]);
          var _i_ =  /*<<bigarray.ml:369:10>>*/ k + 1 | 0;
          if(_g_ === k) break;
          k = _i_;
         }
        }
        var _h_ =  /*<<bigarray.ml:363:8>>*/ j + 1 | 0;
        if(_d_ === j) break;
        j = _h_;
       }
      }
      var _e_ =  /*<<bigarray.ml:360:4>>*/ i + 1 | 0;
      if(_b_ === i) break;
      i = _e_;
     }
    }
     /*<<bigarray.ml:373:4>>*/ return ba /*<<bigarray.ml:373:4>>*/ ;
    /*<<bigarray.ml:373:6>>*/ }
   function array0_of_genarray(a){
     /*<<bigarray.ml:385:2>>*/ return 0
            ===
              /*<<bigarray.ml:385:5>>*/ caml_ba_num_dims
               /*<<bigarray.ml:385:5>>*/ (a)
            ? a
            :  /*<<bigarray.ml:386:7>>*/ caml_call1
               /*<<bigarray.ml:386:7>>*/ (Stdlib[1],
               cst_Bigarray_array0_of_genarra) /*<<bigarray.ml:386:48>>*/ ;
    /*<<bigarray.ml:386:48>>*/ }
   function array1_of_genarray(a){
     /*<<bigarray.ml:388:2>>*/ return 1
            ===
              /*<<bigarray.ml:388:5>>*/ caml_ba_num_dims
               /*<<bigarray.ml:388:5>>*/ (a)
            ? a
            :  /*<<bigarray.ml:389:7>>*/ caml_call1
               /*<<bigarray.ml:389:7>>*/ (Stdlib[1],
               cst_Bigarray_array1_of_genarra) /*<<bigarray.ml:389:48>>*/ ;
    /*<<bigarray.ml:389:48>>*/ }
   function array2_of_genarray(a){
     /*<<bigarray.ml:391:2>>*/ return 2
            ===
              /*<<bigarray.ml:391:5>>*/ caml_ba_num_dims
               /*<<bigarray.ml:391:5>>*/ (a)
            ? a
            :  /*<<bigarray.ml:392:7>>*/ caml_call1
               /*<<bigarray.ml:392:7>>*/ (Stdlib[1],
               cst_Bigarray_array2_of_genarra) /*<<bigarray.ml:392:48>>*/ ;
    /*<<bigarray.ml:392:48>>*/ }
   function array3_of_genarray(a){
     /*<<bigarray.ml:394:2>>*/ return 3
            ===
              /*<<bigarray.ml:394:5>>*/ caml_ba_num_dims
               /*<<bigarray.ml:394:5>>*/ (a)
            ? a
            :  /*<<bigarray.ml:395:7>>*/ caml_call1
               /*<<bigarray.ml:395:7>>*/ (Stdlib[1],
               cst_Bigarray_array3_of_genarra) /*<<bigarray.ml:395:48>>*/ ;
    /*<<bigarray.ml:395:48>>*/ }
   function reshape_0(a){
     /*<<bigarray.ml:400:18>>*/ return  /*<<bigarray.ml:400:18>>*/ caml_ba_reshape
             /*<<bigarray.ml:400:18>>*/ (a, [0]) /*<<bigarray.ml:400:32>>*/ ;
    /*<<bigarray.ml:400:32>>*/ }
   function reshape_1(a, dim1){
     /*<<bigarray.ml:401:23>>*/ return  /*<<bigarray.ml:401:23>>*/ caml_ba_reshape
             /*<<bigarray.ml:401:23>>*/ (a, [0, dim1]) /*<<bigarray.ml:401:41>>*/ ;
    /*<<bigarray.ml:401:41>>*/ }
   function reshape_2(a, dim1, dim2){
     /*<<bigarray.ml:402:28>>*/ return  /*<<bigarray.ml:402:28>>*/ caml_ba_reshape
             /*<<bigarray.ml:402:28>>*/ (a, [0, dim1, dim2]) /*<<bigarray.ml:402:51>>*/ ;
    /*<<bigarray.ml:402:51>>*/ }
   function reshape_3(a, dim1, dim2, dim3){
     /*<<bigarray.ml:403:33>>*/ return  /*<<bigarray.ml:403:33>>*/ caml_ba_reshape
             /*<<bigarray.ml:403:33>>*/ (a, [0, dim1, dim2, dim3]) /*<<bigarray.ml:403:61>>*/ ;
    /*<<bigarray.ml:403:61>>*/ }
   var
    Stdlib_Bigarray =
      [0,
       13,
       0,
       1,
       10,
       11,
       2,
       3,
       4,
       5,
       8,
       6,
       7,
       9,
       12,
       kind_size_in_bytes,
       0,
       1,
       [0, init, dims, size_in_bytes],
       [0,
        create,
        of_value,
        caml_ba_change_layout,
        size_in_bytes$0,
        get,
        set,
        of_value],
       [0,
        create$0,
        init$0,
        caml_ba_change_layout,
        size_in_bytes$1,
        slice,
        of_array],
       [0,
        create$1,
        init$1,
        caml_ba_change_layout,
        size_in_bytes$2,
        slice_left,
        slice_right,
        of_array$0],
       [0,
        create$2,
        init$2,
        caml_ba_change_layout,
        size_in_bytes$3,
        slice_left_1,
        slice_right_1,
        slice_left_2,
        slice_right_2,
        of_array$1],
       array0_of_genarray,
       array1_of_genarray,
       array2_of_genarray,
       array3_of_genarray,
       caml_ba_reshape,
       reshape_0,
       reshape_1,
       reshape_2,
       reshape_3];
   runtime.caml_register_global(10, Stdlib_Bigarray, "Stdlib__Bigarray");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Random
//# unitInfo: Requires: Stdlib, Stdlib__Bigarray, Stdlib__Bytes, Stdlib__Digest, Stdlib__Domain, Stdlib__Int32, Stdlib__Int64, Stdlib__Nativeint, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_ba_blit =  /*<<?>>*/ runtime.caml_ba_blit,
    caml_ba_set_1 =  /*<<?>>*/ runtime.caml_ba_set_1,
    caml_bytes_set =  /*<<?>>*/ runtime.caml_bytes_set,
    caml_create_bytes =  /*<<?>>*/ runtime.caml_create_bytes,
    caml_greaterthan =  /*<<?>>*/ runtime.caml_greaterthan,
    caml_int64_add =  /*<<?>>*/ runtime.caml_int64_add,
    caml_int64_of_int32 =  /*<<?>>*/ runtime.caml_int64_of_int32,
    caml_int64_shift_right_unsigne =
       /*<<?>>*/ runtime.caml_int64_shift_right_unsigned,
    caml_int64_sub =  /*<<?>>*/ runtime.caml_int64_sub,
    caml_int64_to_int32 =  /*<<?>>*/ runtime.caml_int64_to_int32,
    caml_lessequal =  /*<<?>>*/ runtime.caml_lessequal,
    caml_lessthan =  /*<<?>>*/ runtime.caml_lessthan,
    caml_lxm_next =  /*<<?>>*/ runtime.caml_lxm_next,
    caml_mod =  /*<<?>>*/ runtime.caml_mod,
    caml_notequal =  /*<<?>>*/ runtime.caml_notequal,
    caml_sys_random_seed =  /*<<?>>*/ runtime.caml_sys_random_seed;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    serialization_prefix = "lxm1:",
    Stdlib_Domain = global_data.Stdlib__Domain,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Int32 = global_data.Stdlib__Int32,
    Stdlib_Int64 = global_data.Stdlib__Int64,
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Digest = global_data.Stdlib__Digest,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Bigarray = global_data.Stdlib__Bigarray,
    Stdlib_Nativeint = global_data.Stdlib__Nativeint,
    _a_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _b_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _c_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _d_ = runtime.caml_int64_create_lo_mi_hi(2, 0, 0),
    _e_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0);
   function create(param){
     /*<<random.ml:31:4>>*/ return  /*<<random.ml:31:4>>*/ caml_call3
             /*<<random.ml:31:4>>*/ (Stdlib_Bigarray[20][1], 7, 0, 4) /*<<random.ml:31:34>>*/ ;
    /*<<random.ml:31:34>>*/ }
   function set(s, i1, i2, i3, i4){
     /*<<random.ml:34:4>>*/  /*<<random.ml:34:4>>*/ caml_ba_set_1
      /*<<random.ml:34:4>>*/ (s,
      0,
       /*<<random.ml:34:26>>*/ runtime.caml_int64_or
        /*<<random.ml:34:26>>*/ (i1, _a_));
     /*<<random.ml:35:4>>*/  /*<<random.ml:35:4>>*/ caml_ba_set_1
      /*<<random.ml:35:4>>*/ (s, 1, i2);
    var
     i3$0 =
        /*<<random.ml:36:30>>*/  /*<<random.ml:36:30>>*/ caml_notequal
          /*<<random.ml:36:30>>*/ (i3, _b_)
        ? i3
        : _e_;
     /*<<random.ml:36:4>>*/  /*<<random.ml:36:4>>*/ caml_ba_set_1
      /*<<random.ml:36:4>>*/ (s, 2, i3$0);
    var
     i4$0 =
        /*<<random.ml:37:30>>*/  /*<<random.ml:37:30>>*/ caml_notequal
          /*<<random.ml:37:30>>*/ (i4, _c_)
        ? i4
        : _d_;
     /*<<random.ml:37:4>>*/ return  /*<<random.ml:37:4>>*/ caml_ba_set_1
             /*<<random.ml:37:4>>*/ (s, 3, i4$0) /*<<random.ml:37:55>>*/ ;
    /*<<random.ml:37:55>>*/ }
   function mk(i1, i2, i3, i4){
    var
     s =
        /*<<random.ml:40:12>>*/  /*<<random.ml:40:12>>*/ create
         /*<<random.ml:40:12>>*/ (0);
     /*<<random.ml:41:4>>*/  /*<<random.ml:41:4>>*/ set
      /*<<random.ml:41:4>>*/ (s, i1, i2, i3, i4);
     /*<<random.ml:41:4>>*/ return s /*<<random.ml:41:4>>*/ ;
    /*<<random.ml:41:24>>*/ }
   var
    serialization_prefix_len = 5,
    cst_Random_State_of_binary_str =
      "Random.State.of_binary_string: expected a format compatible with OCaml ";
   function to_binary_string(s){
    var
     buf =
        /*<<random.ml:63:14>>*/  /*<<random.ml:63:14>>*/ caml_create_bytes
         /*<<random.ml:63:14>>*/ (37);
     /*<<random.ml:64:4>>*/  /*<<random.ml:64:4>>*/ caml_call5
      /*<<random.ml:64:4>>*/ (Stdlib_Bytes[12],
      serialization_prefix,
      0,
      buf,
      0,
      serialization_prefix_len);
    var i = 0;
    for(;;){
     var
      _y_ =
         /*<<random.ml:66:47>>*/  /*<<random.ml:66:47>>*/ runtime.caml_ba_get_1
          /*<<random.ml:66:47>>*/ (s, i);
      /*<<random.ml:66:6>>*/  /*<<random.ml:66:6>>*/ caml_call3
       /*<<random.ml:66:6>>*/ (Stdlib_Bytes[86],
       buf,
       5 + (i * 8 | 0) | 0,
       _y_);
     var _z_ =  /*<<random.ml:66:6>>*/ i + 1 | 0;
     if(3 === i)
       /*<<random.ml:68:4>>*/ return  /*<<random.ml:68:4>>*/ caml_call1
               /*<<random.ml:68:4>>*/ (Stdlib_Bytes[44], buf) /*<<random.ml:68:30>>*/ ;
     i = _z_;
    }
    /*<<random.ml:68:30>>*/ }
   function of_binary_string(buf){
    var
     _v_ = runtime.caml_ml_string_length(buf) !== 37 ? 1 : 0,
     _w_ =
       _v_
       ||
        1
        -
          /*<<random.ml:74:14>>*/ caml_call2
           /*<<random.ml:74:14>>*/ (Stdlib_String[11],
           serialization_prefix,
           buf);
    if(_w_){
     var
      _x_ =
         /*<<random.ml:77:8>>*/  /*<<random.ml:77:8>>*/ caml_call2
          /*<<random.ml:77:8>>*/ (Stdlib[28],
          cst_Random_State_of_binary_str,
          Stdlib_Sys[46]);
      /*<<random.ml:76:6>>*/  /*<<random.ml:76:6>>*/ caml_call1
       /*<<random.ml:76:6>>*/ (Stdlib[2], _x_);
    }
    var
     i1 =
        /*<<random.ml:79:13>>*/  /*<<random.ml:79:13>>*/ caml_call2
         /*<<random.ml:79:13>>*/ (Stdlib_String[64], buf, 5),
     i2 =
        /*<<random.ml:80:13>>*/  /*<<random.ml:80:13>>*/ caml_call2
         /*<<random.ml:80:13>>*/ (Stdlib_String[64], buf, 13),
     i3 =
        /*<<random.ml:81:13>>*/  /*<<random.ml:81:13>>*/ caml_call2
         /*<<random.ml:81:13>>*/ (Stdlib_String[64], buf, 21),
     i4 =
        /*<<random.ml:82:13>>*/  /*<<random.ml:82:13>>*/ caml_call2
         /*<<random.ml:82:13>>*/ (Stdlib_String[64], buf, 29);
     /*<<random.ml:83:4>>*/ return  /*<<random.ml:83:4>>*/ mk
             /*<<random.ml:83:4>>*/ (i1, i2, i3, i4) /*<<random.ml:83:18>>*/ ;
    /*<<random.ml:83:18>>*/ }
   function copy(src){
    var
     dst =
        /*<<random.ml:89:13>>*/  /*<<random.ml:89:13>>*/ create
         /*<<random.ml:89:13>>*/ (0);
     /*<<random.ml:86:4>>*/  /*<<random.ml:86:4>>*/ caml_ba_blit
      /*<<random.ml:86:4>>*/ (src, dst);
     /*<<random.ml:89:25>>*/ return dst /*<<random.ml:89:25>>*/ ;
    /*<<random.ml:89:40>>*/ }
   function reinit(s, seed){
    var
     n = seed.length - 1,
     b =
        /*<<random.ml:98:12>>*/  /*<<random.ml:98:12>>*/ caml_create_bytes
         /*<<random.ml:98:12>>*/ ((n * 8 | 0) + 1 | 0),
     _p_ =  /*<<random.ml:99:4>>*/ n - 1 | 0,
     _o_ =  /*<<random.ml:98:12>>*/ 0;
    if(_p_ >= 0){
     var i = _o_;
     for(;;){
      var
       _t_ =
          /*<<random.ml:100:35>>*/  /*<<random.ml:100:35>>*/ caml_int64_of_int32
           /*<<random.ml:100:35>>*/ (runtime.caml_check_bound(seed, i)[1 + i]);
       /*<<random.ml:100:6>>*/  /*<<random.ml:100:6>>*/ caml_call3
        /*<<random.ml:100:6>>*/ (Stdlib_Bytes[86], b, i * 8 | 0, _t_);
      var _u_ =  /*<<random.ml:100:6>>*/ i + 1 | 0;
      if(_p_ === i) break;
      i = _u_;
     }
    }
     /*<<random.ml:102:4>>*/  /*<<random.ml:102:4>>*/ caml_bytes_set
      /*<<random.ml:102:4>>*/ (b, n * 8 | 0, 1);
    var
     d1 =
        /*<<random.ml:103:13>>*/  /*<<random.ml:103:13>>*/ caml_call1
         /*<<random.ml:103:13>>*/ (Stdlib_Digest[4], b);
     /*<<random.ml:104:4>>*/  /*<<random.ml:104:4>>*/ caml_bytes_set
      /*<<random.ml:104:4>>*/ (b, n * 8 | 0, 2);
    var
     d2 =
        /*<<random.ml:105:13>>*/  /*<<random.ml:105:13>>*/ caml_call1
         /*<<random.ml:105:13>>*/ (Stdlib_Digest[4], b),
     _q_ =
        /*<<random.ml:109:10>>*/  /*<<random.ml:109:10>>*/ caml_call2
         /*<<random.ml:109:10>>*/ (Stdlib_String[64], d2, 8),
     _r_ =
        /*<<random.ml:108:10>>*/  /*<<random.ml:108:10>>*/ caml_call2
         /*<<random.ml:108:10>>*/ (Stdlib_String[64], d2, 0),
     _s_ =
        /*<<random.ml:107:10>>*/  /*<<random.ml:107:10>>*/ caml_call2
         /*<<random.ml:107:10>>*/ (Stdlib_String[64], d1, 8);
     /*<<random.ml:109:10>>*/ return  /*<<random.ml:109:10>>*/ set
             /*<<random.ml:109:10>>*/ (s,
              /*<<random.ml:106:10>>*/ caml_call2
               /*<<random.ml:106:10>>*/ (Stdlib_String[64], d1, 0),
             _s_,
             _r_,
             _q_) /*<<random.ml:109:36>>*/ ;
    /*<<random.ml:109:36>>*/ }
   function make(seed){
    var
     s =
        /*<<random.ml:112:12>>*/  /*<<random.ml:112:12>>*/ create
         /*<<random.ml:112:12>>*/ (0);
     /*<<random.ml:112:24>>*/  /*<<random.ml:112:24>>*/ reinit
      /*<<random.ml:112:24>>*/ (s, seed);
     /*<<random.ml:112:24>>*/ return s /*<<random.ml:112:24>>*/ ;
    /*<<random.ml:112:40>>*/ }
   function make_self_init(param){
     /*<<random.ml:115:4>>*/ return  /*<<random.ml:115:9>>*/ make
             /*<<random.ml:115:9>>*/ ( /*<<random.ml:115:9>>*/ caml_sys_random_seed
               /*<<random.ml:115:9>>*/ (0)) /*<<random.ml:115:25>>*/ ;
    /*<<random.ml:115:25>>*/ }
   var
    max_int31 = 1073741823,
    max_int32 = 2147483647,
    cst_Random_int = "Random.int",
    cst_Random_full_int = "Random.full_int",
    cst_Random_int_in_range = "Random.int_in_range",
    cst_Random_int32 = "Random.int32",
    cst_Random_int32_in_range = "Random.int32_in_range";
   function bits(s){
     /*<<random.ml:129:4>>*/ return  /*<<random.ml:129:17>>*/ caml_int64_to_int32
             /*<<random.ml:129:17>>*/ ( /*<<random.ml:129:17>>*/ caml_lxm_next
               /*<<random.ml:129:17>>*/ (s))
           & 1073741823;
    /*<<random.ml:129:40>>*/ }
   function int_aux(s, n, mask){
     /*<<random.ml:138:4>>*/ for(;;){
     var
      r =
         /*<<random.ml:138:25>>*/ caml_int64_to_int32
          /*<<random.ml:138:25>>*/ ( /*<<random.ml:138:25>>*/ caml_lxm_next
            /*<<random.ml:138:25>>*/ (s))
        & mask,
      v = caml_mod(r, n);
     if(((mask - n | 0) + 1 | 0) >= (r - v | 0))
       /*<<random.ml:148:55>>*/ return v /*<<random.ml:148:55>>*/ ;
    }
    /*<<random.ml:148:56>>*/ }
   function int$0(s, bound){
     /*<<random.ml:154:4>>*/ if(1073741823 >= bound && 0 < bound)
     return int_aux(s, bound, max_int31) /*<<random.ml:156:34>>*/ ;
     /*<<random.ml:155:9>>*/ return  /*<<random.ml:155:9>>*/ caml_call1
             /*<<random.ml:155:9>>*/ (Stdlib[1], cst_Random_int) /*<<random.ml:156:34>>*/ ;
    /*<<random.ml:156:34>>*/ }
   function full_int(s, bound){
     /*<<random.ml:161:4>>*/ if(0 >= bound)
      /*<<random.ml:162:6>>*/ return  /*<<random.ml:162:6>>*/ caml_call1
              /*<<random.ml:162:6>>*/ (Stdlib[1], cst_Random_full_int) /*<<random.ml:173:22>>*/ ;
    var
     _n_ =
       bound <= 1073741823
        ? max_int31
        : bound <= 2147483647 ? max_int32 : Stdlib[19];
     /*<<random.ml:153:10>>*/ return  /*<<random.ml:153:10>>*/ int_aux
             /*<<random.ml:153:10>>*/ (s, bound, _n_) /*<<random.ml:173:22>>*/ ;
    /*<<random.ml:173:22>>*/ }
   function int_in_range_aux(s, min, max, mask, nbits){
    var span = (max - min | 0) + 1 | 0;
    if(span <= mask && 0 < span)
     return min
            +
              /*<<random.ml:198:12>>*/ int_aux
               /*<<random.ml:198:12>>*/ (s, span, mask)
            | 0;
     /*<<random.ml:184:4>>*/ for(;;){
     var
      drop = Stdlib_Sys[10] - nbits | 0,
      r =
         /*<<random.ml:186:27>>*/ caml_int64_to_int32
          /*<<random.ml:186:27>>*/ ( /*<<random.ml:186:27>>*/ caml_lxm_next
            /*<<random.ml:186:27>>*/ (s))
        << drop
        >> drop;
     if(r >= min && max >= r)
       /*<<random.ml:187:74>>*/ return r /*<<random.ml:187:74>>*/ ;
    }
    /*<<random.ml:201:43>>*/ }
   function int_in_range(s, min, max){
     /*<<random.ml:206:4>>*/ if(max < min)
      /*<<random.ml:207:6>>*/  /*<<random.ml:207:6>>*/ caml_call1
       /*<<random.ml:207:6>>*/ (Stdlib[1], cst_Random_int_in_range);
    if(-1073741824 <= min && max <= 1073741823)
      /*<<random.ml:215:6>>*/ return  /*<<random.ml:215:6>>*/ int_in_range_aux
              /*<<random.ml:215:6>>*/ (s, min, max, max_int31, 31) /*<<random.ml:219:68>>*/ ;
    if(-2147483648 <= min && max <= 2147483647)
      /*<<random.ml:217:6>>*/ return  /*<<random.ml:217:6>>*/ int_in_range_aux
              /*<<random.ml:217:6>>*/ (s, min, max, max_int32, 32) /*<<random.ml:219:68>>*/ ;
     /*<<random.ml:219:6>>*/ return  /*<<random.ml:219:6>>*/ int_in_range_aux
             /*<<random.ml:219:6>>*/ (s, min, max, Stdlib[19], Stdlib_Sys[10]) /*<<random.ml:219:68>>*/ ;
    /*<<random.ml:219:68>>*/ }
   function bits32(s){
     /*<<random.ml:223:4>>*/ return  /*<<random.ml:223:4>>*/ caml_int64_to_int32
             /*<<random.ml:223:4>>*/ ( /*<<random.ml:223:19>>*/ caml_lxm_next
               /*<<random.ml:223:19>>*/ (s)) /*<<random.ml:223:27>>*/ ;
    /*<<random.ml:223:27>>*/ }
   function int32aux(s, n){
     /*<<random.ml:227:4>>*/ for(;;){
     var
      r =
         /*<<random.ml:227:12>>*/  /*<<random.ml:227:38>>*/ bits32
          /*<<random.ml:227:38>>*/ (s)
        >>> 1
        | 0,
      v =
         /*<<random.ml:228:12>>*/  /*<<random.ml:228:12>>*/ caml_mod
          /*<<random.ml:228:12>>*/ (r, n);
      /*<<random.ml:230:14>>*/ if
      (!
        /*<<random.ml:230:14>>*/ caml_greaterthan
         /*<<random.ml:230:14>>*/ (r - v | 0,
         (Stdlib_Int32[9] - n | 0) + 1 | 0))
       /*<<random.ml:232:9>>*/ return v /*<<random.ml:232:9>>*/ ;
    }
    /*<<random.ml:232:10>>*/ }
   function int32(s, bound){
     /*<<random.ml:235:4>>*/ return  /*<<random.ml:235:7>>*/ caml_lessequal
              /*<<random.ml:235:7>>*/ (bound, 0)
            ?  /*<<random.ml:236:9>>*/ caml_call1
               /*<<random.ml:236:9>>*/ (Stdlib[1], cst_Random_int32)
            :  /*<<random.ml:237:9>>*/ int32aux
               /*<<random.ml:237:9>>*/ (s, bound) /*<<random.ml:237:25>>*/ ;
    /*<<random.ml:237:25>>*/ }
   function int32_in_range(s, min, max){
     /*<<random.ml:246:4>>*/ if
     ( /*<<random.ml:246:7>>*/ caml_greaterthan
        /*<<random.ml:246:7>>*/ (min, max))
      /*<<random.ml:247:6>>*/ return  /*<<random.ml:247:6>>*/ caml_call1
              /*<<random.ml:247:6>>*/ (Stdlib[1], cst_Random_int32_in_range) /*<<random.ml:254:39>>*/ ;
    var
     span =
        /*<<random.ml:249:17>>*/  /*<<random.ml:249:17>>*/ caml_call1
         /*<<random.ml:249:17>>*/ (Stdlib_Int32[6], max - min | 0);
     /*<<random.ml:251:9>>*/ if
     (!
       /*<<random.ml:251:9>>*/ caml_lessequal
        /*<<random.ml:251:9>>*/ (span, Stdlib_Int32[1]))
      /*<<random.ml:254:8>>*/ return min
            +
              /*<<random.ml:254:22>>*/ int32aux
               /*<<random.ml:254:22>>*/ (s, span)
            | 0 /*<<random.ml:254:8>>*/ ;
     /*<<random.ml:242:4>>*/ for(;;){
     var
      r =
         /*<<random.ml:242:12>>*/  /*<<random.ml:242:12>>*/ caml_int64_to_int32
          /*<<random.ml:242:12>>*/ ( /*<<random.ml:242:27>>*/ caml_lxm_next
            /*<<random.ml:242:27>>*/ (s));
      /*<<random.ml:243:7>>*/ if
      (!
        /*<<random.ml:243:7>>*/ caml_lessthan /*<<random.ml:243:7>>*/ (r, min)
       &&
        !
         /*<<random.ml:243:18>>*/ caml_greaterthan
          /*<<random.ml:243:18>>*/ (r, max))
       /*<<random.ml:243:67>>*/ return r /*<<random.ml:243:67>>*/ ;
    }
    /*<<random.ml:254:39>>*/ }
   var
    bits64 = caml_lxm_next,
    _f_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _g_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    cst_Random_int64 = "Random.int64",
    cst_Random_int64_in_range = "Random.int64_in_range";
   function int64aux(s, n){
     /*<<random.ml:262:4>>*/ for(;;){
     var
      r =
         /*<<random.ml:262:12>>*/  /*<<random.ml:262:12>>*/ caml_int64_shift_right_unsigne
          /*<<random.ml:262:12>>*/ ( /*<<random.ml:258:4>>*/ caml_lxm_next
            /*<<random.ml:258:4>>*/ (s),
          1),
      v =
         /*<<random.ml:263:12>>*/  /*<<random.ml:263:12>>*/ runtime.caml_int64_mod
          /*<<random.ml:263:12>>*/ (r, n);
      /*<<random.ml:265:14>>*/ if
      (!
        /*<<random.ml:265:14>>*/ caml_greaterthan
         /*<<random.ml:265:14>>*/ ( /*<<random.ml:265:14>>*/ caml_int64_sub
           /*<<random.ml:265:14>>*/ (r, v),
          /*<<random.ml:265:24>>*/ caml_int64_add
           /*<<random.ml:265:24>>*/ ( /*<<random.ml:265:28>>*/ caml_int64_sub
             /*<<random.ml:265:28>>*/ (Stdlib_Int64[9], n),
           _f_)))
       /*<<random.ml:267:9>>*/ return v /*<<random.ml:267:9>>*/ ;
    }
    /*<<random.ml:267:10>>*/ }
   function int64(s, bound){
     /*<<random.ml:270:4>>*/ return  /*<<random.ml:270:7>>*/ caml_lessequal
              /*<<random.ml:270:7>>*/ (bound, _g_)
            ?  /*<<random.ml:271:9>>*/ caml_call1
               /*<<random.ml:271:9>>*/ (Stdlib[1], cst_Random_int64)
            :  /*<<random.ml:272:9>>*/ int64aux
               /*<<random.ml:272:9>>*/ (s, bound) /*<<random.ml:272:25>>*/ ;
    /*<<random.ml:272:25>>*/ }
   function int64_in_range(s, min, max){
     /*<<random.ml:281:4>>*/ if
     ( /*<<random.ml:281:7>>*/ caml_greaterthan
        /*<<random.ml:281:7>>*/ (min, max))
      /*<<random.ml:282:6>>*/ return  /*<<random.ml:282:6>>*/ caml_call1
              /*<<random.ml:282:6>>*/ (Stdlib[1], cst_Random_int64_in_range) /*<<random.ml:289:39>>*/ ;
    var
     span =
        /*<<random.ml:284:17>>*/  /*<<random.ml:284:17>>*/ caml_call1
         /*<<random.ml:284:17>>*/ (Stdlib_Int64[6],
          /*<<random.ml:284:28>>*/ caml_int64_sub
           /*<<random.ml:284:28>>*/ (max, min));
     /*<<random.ml:286:9>>*/ if
     (!
       /*<<random.ml:286:9>>*/ caml_lessequal
        /*<<random.ml:286:9>>*/ (span, Stdlib_Int64[1]))
      /*<<random.ml:289:8>>*/ return  /*<<random.ml:289:8>>*/ caml_int64_add
              /*<<random.ml:289:8>>*/ (min,
               /*<<random.ml:289:22>>*/ int64aux
                /*<<random.ml:289:22>>*/ (s, span)) /*<<random.ml:289:39>>*/ ;
     /*<<random.ml:277:4>>*/ for(;;){
     var
      r =
         /*<<random.ml:277:12>>*/  /*<<random.ml:277:12>>*/ caml_lxm_next
          /*<<random.ml:277:12>>*/ (s);
      /*<<random.ml:278:7>>*/ if
      (!
        /*<<random.ml:278:7>>*/ caml_lessthan /*<<random.ml:278:7>>*/ (r, min)
       &&
        !
         /*<<random.ml:278:18>>*/ caml_greaterthan
          /*<<random.ml:278:18>>*/ (r, max))
       /*<<random.ml:278:67>>*/ return r /*<<random.ml:278:67>>*/ ;
    }
    /*<<random.ml:289:39>>*/ }
   var
    _j_ = runtime.caml_int64_create_lo_mi_hi(14371852, 15349651, 22696),
    _k_ = runtime.caml_int64_create_lo_mi_hi(12230193, 11438743, 35013),
    _l_ = runtime.caml_int64_create_lo_mi_hi(1424933, 15549263, 2083),
    _m_ = runtime.caml_int64_create_lo_mi_hi(9492471, 4696708, 43520),
    _h_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _i_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    nativebits =
      32 === Stdlib_Nativeint[9]
       ? function
        (s){
          /*<<random.ml:294:18>>*/ return  /*<<random.ml:294:37>>*/ bits32
                  /*<<random.ml:294:37>>*/ (s) /*<<random.ml:294:47>>*/ ;
         /*<<random.ml:294:47>>*/ }
       : function
        (s){
          /*<<random.ml:295:18>>*/ return  /*<<random.ml:295:18>>*/ caml_int64_to_int32
                  /*<<random.ml:295:18>>*/ ( /*<<random.ml:258:4>>*/ caml_lxm_next
                    /*<<random.ml:258:4>>*/ (s)) /*<<random.ml:295:47>>*/ ;
         /*<<random.ml:295:47>>*/ },
    nativeint =
      32 === Stdlib_Nativeint[9]
       ? function
        (s, bound){
          /*<<random.ml:300:24>>*/ return  /*<<random.ml:300:43>>*/ int32
                  /*<<random.ml:300:43>>*/ (s, bound) /*<<random.ml:300:79>>*/ ;
         /*<<random.ml:300:79>>*/ }
       : function
        (s, bound){
          /*<<random.ml:301:24>>*/ return  /*<<random.ml:301:24>>*/ caml_int64_to_int32
                  /*<<random.ml:301:24>>*/ ( /*<<random.ml:301:43>>*/ int64
                    /*<<random.ml:301:43>>*/ (s,
                     /*<<random.ml:301:52>>*/ caml_int64_of_int32
                      /*<<random.ml:301:52>>*/ (bound))) /*<<random.ml:301:79>>*/ ;
         /*<<random.ml:301:79>>*/ },
    nativeint_in_range =
      32 === Stdlib_Nativeint[9]
       ? function
        (s, min, max){
          /*<<random.ml:307:6>>*/ return  /*<<random.ml:307:25>>*/ int32_in_range
                  /*<<random.ml:307:25>>*/ (s, min, max) /*<<random.ml:308:68>>*/ ;
         /*<<random.ml:308:68>>*/ }
       : function
        (s, min, max){
          /*<<random.ml:310:6>>*/ return  /*<<random.ml:310:6>>*/ caml_int64_to_int32
                  /*<<random.ml:310:6>>*/ ( /*<<random.ml:310:25>>*/ int64_in_range
                    /*<<random.ml:310:25>>*/ (s,
                     /*<<random.ml:311:13>>*/ caml_int64_of_int32
                      /*<<random.ml:311:13>>*/ (min),
                     /*<<random.ml:311:43>>*/ caml_int64_of_int32
                      /*<<random.ml:311:43>>*/ (max))) /*<<random.ml:311:68>>*/ ;
         /*<<random.ml:311:68>>*/ };
   function float$0(s, bound){
     /*<<random.ml:321:22>>*/ for(;;){
     var
      b =
         /*<<random.ml:316:12>>*/  /*<<random.ml:316:12>>*/ caml_lxm_next
          /*<<random.ml:316:12>>*/ (s),
      n =
         /*<<random.ml:317:12>>*/  /*<<random.ml:317:12>>*/ caml_int64_shift_right_unsigne
          /*<<random.ml:317:12>>*/ (b, 11);
      /*<<random.ml:318:7>>*/ if
      ( /*<<random.ml:318:7>>*/ caml_notequal /*<<random.ml:318:7>>*/ (n, _h_))
       /*<<random.ml:321:22>>*/ return  /*<<random.ml:318:20>>*/ runtime.caml_int64_to_float
               /*<<random.ml:318:20>>*/ (n)
             * 1.1102230246251565e-16
             * bound /*<<random.ml:321:22>>*/ ;
    }
    /*<<random.ml:321:41>>*/ }
   function bool(s){
     /*<<random.ml:324:15>>*/ return  /*<<random.ml:324:15>>*/ caml_lessthan
             /*<<random.ml:324:15>>*/ ( /*<<random.ml:324:15>>*/ caml_lxm_next
               /*<<random.ml:324:15>>*/ (s),
             _i_) /*<<random.ml:324:26>>*/ ;
    /*<<random.ml:324:26>>*/ }
   function split(s){
    var
     i1 =
        /*<<random.ml:258:4>>*/  /*<<random.ml:258:4>>*/ caml_lxm_next
         /*<<random.ml:258:4>>*/ (s),
     i2 =
        /*<<random.ml:258:4>>*/  /*<<random.ml:258:4>>*/ caml_lxm_next
         /*<<random.ml:258:4>>*/ (s),
     i3 =
        /*<<random.ml:258:4>>*/  /*<<random.ml:258:4>>*/ caml_lxm_next
         /*<<random.ml:258:4>>*/ (s),
     i4 =
        /*<<random.ml:258:4>>*/  /*<<random.ml:258:4>>*/ caml_lxm_next
         /*<<random.ml:258:4>>*/ (s);
     /*<<random.ml:330:4>>*/ return  /*<<random.ml:330:4>>*/ mk
             /*<<random.ml:330:4>>*/ (i1, i2, i3, i4) /*<<random.ml:330:18>>*/ ;
    /*<<random.ml:330:18>>*/ }
   function mk_default(param){
     /*<<random.ml:335:2>>*/ return  /*<<random.ml:335:2>>*/ mk
             /*<<random.ml:335:2>>*/ (_m_, _l_, _k_, _j_) /*<<random.ml:338:31>>*/ ;
    /*<<random.ml:338:31>>*/ }
   var
    random_key =
       /*<<random.ml:341:2>>*/  /*<<random.ml:341:2>>*/ caml_call2
        /*<<random.ml:341:2>>*/ (Stdlib_Domain[10][1], [0, split], mk_default);
   function bits$0(param){
     /*<<random.ml:343:14>>*/ return  /*<<random.ml:343:25>>*/ bits
             /*<<random.ml:343:25>>*/ ( /*<<random.ml:343:25>>*/ caml_call1
               /*<<random.ml:343:25>>*/ (Stdlib_Domain[10][2], random_key)) /*<<random.ml:343:52>>*/ ;
    /*<<random.ml:343:52>>*/ }
   function int$1(bound){
     /*<<random.ml:344:16>>*/ return  /*<<random.ml:344:16>>*/ int$0
             /*<<random.ml:344:16>>*/ ( /*<<random.ml:344:26>>*/ caml_call1
               /*<<random.ml:344:26>>*/ (Stdlib_Domain[10][2], random_key),
             bound) /*<<random.ml:344:59>>*/ ;
    /*<<random.ml:344:59>>*/ }
   function full_int$0(bound){
     /*<<random.ml:345:21>>*/ return  /*<<random.ml:345:21>>*/ full_int
             /*<<random.ml:345:21>>*/ ( /*<<random.ml:345:36>>*/ caml_call1
               /*<<random.ml:345:36>>*/ (Stdlib_Domain[10][2], random_key),
             bound) /*<<random.ml:345:69>>*/ ;
    /*<<random.ml:345:69>>*/ }
   function int_in_range$0(min, max){
     /*<<random.ml:347:2>>*/ return  /*<<random.ml:347:2>>*/ int_in_range
             /*<<random.ml:347:2>>*/ ( /*<<random.ml:347:21>>*/ caml_call1
               /*<<random.ml:347:21>>*/ (Stdlib_Domain[10][2], random_key),
             min,
             max) /*<<random.ml:347:58>>*/ ;
    /*<<random.ml:347:58>>*/ }
   function int32$0(bound){
     /*<<random.ml:348:18>>*/ return  /*<<random.ml:348:18>>*/ int32
             /*<<random.ml:348:18>>*/ ( /*<<random.ml:348:30>>*/ caml_call1
               /*<<random.ml:348:30>>*/ (Stdlib_Domain[10][2], random_key),
             bound) /*<<random.ml:348:63>>*/ ;
    /*<<random.ml:348:63>>*/ }
   function int32_in_range$0(min, max){
     /*<<random.ml:350:2>>*/ return  /*<<random.ml:350:2>>*/ int32_in_range
             /*<<random.ml:350:2>>*/ ( /*<<random.ml:350:23>>*/ caml_call1
               /*<<random.ml:350:23>>*/ (Stdlib_Domain[10][2], random_key),
             min,
             max) /*<<random.ml:350:60>>*/ ;
    /*<<random.ml:350:60>>*/ }
   function nativeint$0(bound){
     /*<<random.ml:351:22>>*/ return  /*<<random.ml:351:22>>*/ nativeint
             /*<<random.ml:351:22>>*/ ( /*<<random.ml:351:38>>*/ caml_call1
               /*<<random.ml:351:38>>*/ (Stdlib_Domain[10][2], random_key),
             bound) /*<<random.ml:351:71>>*/ ;
    /*<<random.ml:351:71>>*/ }
   function nativeint_in_range$0(min, max){
     /*<<random.ml:353:2>>*/ return  /*<<random.ml:353:2>>*/ nativeint_in_range
             /*<<random.ml:353:2>>*/ ( /*<<random.ml:353:27>>*/ caml_call1
               /*<<random.ml:353:27>>*/ (Stdlib_Domain[10][2], random_key),
             min,
             max) /*<<random.ml:353:64>>*/ ;
    /*<<random.ml:353:64>>*/ }
   function int64$0(bound){
     /*<<random.ml:354:18>>*/ return  /*<<random.ml:354:18>>*/ int64
             /*<<random.ml:354:18>>*/ ( /*<<random.ml:354:30>>*/ caml_call1
               /*<<random.ml:354:30>>*/ (Stdlib_Domain[10][2], random_key),
             bound) /*<<random.ml:354:63>>*/ ;
    /*<<random.ml:354:63>>*/ }
   function int64_in_range$0(min, max){
     /*<<random.ml:356:2>>*/ return  /*<<random.ml:356:2>>*/ int64_in_range
             /*<<random.ml:356:2>>*/ ( /*<<random.ml:356:23>>*/ caml_call1
               /*<<random.ml:356:23>>*/ (Stdlib_Domain[10][2], random_key),
             min,
             max) /*<<random.ml:356:60>>*/ ;
    /*<<random.ml:356:60>>*/ }
   function float$1(scale){
     /*<<random.ml:357:18>>*/ return  /*<<random.ml:357:18>>*/ float$0
             /*<<random.ml:357:18>>*/ ( /*<<random.ml:357:30>>*/ caml_call1
               /*<<random.ml:357:30>>*/ (Stdlib_Domain[10][2], random_key),
             scale) /*<<random.ml:357:63>>*/ ;
    /*<<random.ml:357:63>>*/ }
   function bool$0(param){
     /*<<random.ml:358:14>>*/ return  /*<<random.ml:358:25>>*/ bool
             /*<<random.ml:358:25>>*/ ( /*<<random.ml:358:25>>*/ caml_call1
               /*<<random.ml:358:25>>*/ (Stdlib_Domain[10][2], random_key)) /*<<random.ml:358:52>>*/ ;
    /*<<random.ml:358:52>>*/ }
   function bits32$0(param){
     /*<<random.ml:359:16>>*/ return  /*<<random.ml:359:29>>*/ bits32
             /*<<random.ml:359:29>>*/ ( /*<<random.ml:359:29>>*/ caml_call1
               /*<<random.ml:359:29>>*/ (Stdlib_Domain[10][2], random_key)) /*<<random.ml:359:56>>*/ ;
    /*<<random.ml:359:56>>*/ }
   function bits64$0(param){
    var
     s =
        /*<<random.ml:360:29>>*/  /*<<random.ml:360:29>>*/ caml_call1
         /*<<random.ml:360:29>>*/ (Stdlib_Domain[10][2], random_key);
     /*<<random.ml:258:4>>*/ return  /*<<random.ml:258:4>>*/ caml_lxm_next
             /*<<random.ml:258:4>>*/ (s) /*<<random.ml:360:56>>*/ ;
    /*<<random.ml:360:56>>*/ }
   function nativebits$0(param){
     /*<<random.ml:361:20>>*/ return  /*<<random.ml:361:37>>*/ nativebits
             /*<<random.ml:361:37>>*/ ( /*<<random.ml:361:37>>*/ caml_call1
               /*<<random.ml:361:37>>*/ (Stdlib_Domain[10][2], random_key)) /*<<random.ml:361:64>>*/ ;
    /*<<random.ml:361:64>>*/ }
   function full_init(seed){
     /*<<random.ml:363:21>>*/ return  /*<<random.ml:363:21>>*/ reinit
             /*<<random.ml:363:21>>*/ ( /*<<random.ml:363:34>>*/ caml_call1
               /*<<random.ml:363:34>>*/ (Stdlib_Domain[10][2], random_key),
             seed) /*<<random.ml:363:66>>*/ ;
    /*<<random.ml:363:66>>*/ }
   function init(seed){
     /*<<random.ml:364:16>>*/ return  /*<<random.ml:364:26>>*/ full_init
             /*<<random.ml:364:26>>*/ ([0, seed]) /*<<random.ml:364:36>>*/ ;
    /*<<random.ml:364:36>>*/ }
   function self_init(param){
     /*<<random.ml:365:19>>*/ return  /*<<random.ml:365:29>>*/ full_init
             /*<<random.ml:365:29>>*/ ( /*<<random.ml:365:29>>*/ caml_sys_random_seed
               /*<<random.ml:365:29>>*/ (0)) /*<<random.ml:365:44>>*/ ;
    /*<<random.ml:365:44>>*/ }
   function split$0(param){
     /*<<random.ml:369:15>>*/ return  /*<<random.ml:369:27>>*/ split
             /*<<random.ml:369:27>>*/ ( /*<<random.ml:369:27>>*/ caml_call1
               /*<<random.ml:369:27>>*/ (Stdlib_Domain[10][2], random_key)) /*<<random.ml:369:54>>*/ ;
    /*<<random.ml:369:54>>*/ }
   function get_state(param){
     /*<<random.ml:373:19>>*/ return  /*<<random.ml:373:30>>*/ copy
             /*<<random.ml:373:30>>*/ ( /*<<random.ml:373:30>>*/ caml_call1
               /*<<random.ml:373:30>>*/ (Stdlib_Domain[10][2], random_key)) /*<<random.ml:373:57>>*/ ;
    /*<<random.ml:373:57>>*/ }
   function set_state(src){
    var
     dst =
        /*<<random.ml:374:31>>*/  /*<<random.ml:374:31>>*/ caml_call1
         /*<<random.ml:374:31>>*/ (Stdlib_Domain[10][2], random_key);
     /*<<random.ml:86:4>>*/ return  /*<<random.ml:86:4>>*/ caml_ba_blit
             /*<<random.ml:86:4>>*/ (src, dst) /*<<random.ml:374:60>>*/ ;
    /*<<random.ml:374:60>>*/ }
   var
    Stdlib_Random =
      [0,
       init,
       full_init,
       self_init,
       bits$0,
       int$1,
       full_int$0,
       int_in_range$0,
       int32$0,
       int32_in_range$0,
       nativeint$0,
       nativeint_in_range$0,
       int64$0,
       int64_in_range$0,
       float$1,
       bool$0,
       bits32$0,
       bits64$0,
       nativebits$0,
       [0,
        make,
        make_self_init,
        copy,
        bits,
        int$0,
        full_int,
        int_in_range,
        int32,
        int32_in_range,
        nativeint,
        nativeint_in_range,
        int64,
        int64_in_range,
        float$0,
        bool,
        bits32,
        bits64,
        nativebits,
        split,
        to_binary_string,
        of_binary_string],
       get_state,
       set_state,
       split$0];
   runtime.caml_register_global(35, Stdlib_Random, "Stdlib__Random");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Hashtbl
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__Atomic, Stdlib__Domain, Stdlib__Int, Stdlib__Random, Stdlib__Seq, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_check_bound =  /*<<?>>*/ runtime.caml_check_bound,
    caml_compare =  /*<<?>>*/ runtime.caml_compare,
    caml_hash =  /*<<?>>*/ runtime.caml_hash,
    caml_make_vect =  /*<<?>>*/ runtime.caml_make_vect,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_sys_getenv =  /*<<?>>*/ runtime.caml_sys_getenv,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    _d_ = [0, 0],
    cst = "",
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib = global_data.Stdlib,
    Stdlib_Atomic = global_data.Stdlib__Atomic,
    Stdlib_Domain = global_data.Stdlib__Domain,
    Stdlib_Random = global_data.Stdlib__Random,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Array = global_data.Stdlib__Array;
   global_data.Assert_failure;
   var Stdlib_String = global_data.Stdlib__String;
   function ongoing_traversal(h){
    var _an_ = h.length - 1 < 4 ? 1 : 0, _ao_ = _an_ || (h[4] < 0 ? 1 : 0);
    return _ao_;
    /*<<hashtbl.ml:42:23>>*/ }
   function flip_ongoing_traversal(h){
     /*<<hashtbl.ml:45:2>>*/ h[4] = - h[4] | 0;
    return 0;
    /*<<hashtbl.ml:45:36>>*/ }
   var
    cst_Hashtbl_unsupported_hash_t = "Hashtbl: unsupported hash table format";
   try{
    var
     _f_ =
        /*<<hashtbl.ml:51:8>>*/  /*<<hashtbl.ml:51:8>>*/ caml_sys_getenv
         /*<<hashtbl.ml:51:8>>*/ ("OCAMLRUNPARAM"),
     params = _f_;
   }
   catch(_al_){
    var _a_ = caml_wrap_exception(_al_);
    if(_a_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_a_, 0);
     /*<<hashtbl.ml:52:4>>*/ try{
     var
      _e_ =
         /*<<hashtbl.ml:52:8>>*/  /*<<hashtbl.ml:52:8>>*/ caml_sys_getenv
          /*<<hashtbl.ml:52:8>>*/ ("CAMLRUNPARAM"),
      _c_ = _e_;
    }
    catch(_am_){
     var _b_ = caml_wrap_exception(_am_);
     if(_b_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_b_, 0);
     var _c_ = cst;
    }
    var params = _c_;
   }
   var
    randomized_default =
       /*<<hashtbl.ml:53:2>>*/  /*<<hashtbl.ml:53:2>>*/ caml_call2
        /*<<hashtbl.ml:53:2>>*/ (Stdlib_String[15], params, 82),
    randomized =
       /*<<hashtbl.ml:55:17>>*/  /*<<hashtbl.ml:55:17>>*/ caml_call1
        /*<<hashtbl.ml:55:17>>*/ (Stdlib_Atomic[1], randomized_default);
   function randomize(param){
     /*<<hashtbl.ml:57:19>>*/ return  /*<<hashtbl.ml:57:19>>*/ caml_call2
             /*<<hashtbl.ml:57:19>>*/ (Stdlib_Atomic[4], randomized, 1) /*<<hashtbl.ml:57:45>>*/ ;
    /*<<hashtbl.ml:57:45>>*/ }
   function is_randomized(param){
     /*<<hashtbl.ml:58:23>>*/ return  /*<<hashtbl.ml:57:14>>*/ caml_call1
             /*<<hashtbl.ml:57:14>>*/ (Stdlib_Atomic[3], randomized) /*<<hashtbl.ml:58:44>>*/ ;
    /*<<hashtbl.ml:58:44>>*/ }
   var
    prng_key =
       /*<<hashtbl.ml:60:15>>*/  /*<<hashtbl.ml:60:15>>*/ caml_call2
        /*<<hashtbl.ml:60:15>>*/ (Stdlib_Domain[10][1],
        0,
        Stdlib_Random[19][2]);
   function power_2_above(x, n){
    var x$0 = x;
     /*<<hashtbl.ml:69:2>>*/ for(;;){
     if(n <= x$0)
       /*<<hashtbl.ml:69:17>>*/ return x$0 /*<<hashtbl.ml:69:17>>*/ ;
     if(Stdlib_Sys[13] < (x$0 * 2 | 0))
       /*<<hashtbl.ml:70:44>>*/ return x$0 /*<<hashtbl.ml:70:44>>*/ ;
     var x$1 = x$0 * 2 | 0;
     x$0 = x$1;
    }
    /*<<hashtbl.ml:71:30>>*/ }
   function create(opt, initial_size){
    var
     random =
       opt
        ? opt[1]
        :  /*<<hashtbl.ml:73:22>>*/ caml_call1
           /*<<hashtbl.ml:73:22>>*/ (Stdlib_Atomic[3], randomized),
     s =
        /*<<hashtbl.ml:74:10>>*/  /*<<hashtbl.ml:74:10>>*/ power_2_above
         /*<<hashtbl.ml:74:10>>*/ (16, initial_size);
     /*<<hashtbl.ml:75:2>>*/ if(random)
     var
      _ak_ =
         /*<<hashtbl.ml:76:37>>*/  /*<<hashtbl.ml:76:37>>*/ caml_call1
          /*<<hashtbl.ml:76:37>>*/ (Stdlib_Domain[10][2], prng_key),
      seed =
         /*<<hashtbl.ml:76:19>>*/ caml_call1
          /*<<hashtbl.ml:76:19>>*/ (Stdlib_Random[19][4], _ak_);
    else
     var seed = 0;
     /*<<hashtbl.ml:78:2>>*/ return [0,
            0,
             /*<<hashtbl.ml:78:52>>*/ caml_make_vect
              /*<<hashtbl.ml:78:52>>*/ (s, 0),
            seed,
            s] /*<<hashtbl.ml:78:2>>*/ ;
    /*<<hashtbl.ml:78:72>>*/ }
   function clear(h){
    var _aj_ = 0 < h[1] ? 1 : 0;
    return _aj_
            ? (h
               [1]
              = 0,
               /*<<hashtbl.ml:83:4>>*/ caml_call4
                /*<<hashtbl.ml:83:4>>*/ (Stdlib_Array[8],
                h[2],
                0,
                h[2].length - 1,
                0))
            : _aj_ /*<<hashtbl.ml:84:5>>*/ ;
    /*<<hashtbl.ml:84:5>>*/ }
   function reset(h){
    var len = h[2].length - 1;
    if
     (4 <= h.length - 1
      &&
       len
       !==
         /*<<hashtbl.ml:89:13>>*/ caml_call1
          /*<<hashtbl.ml:89:13>>*/ (Stdlib[18], h[4])){
     h[1] = 0;
     h[2] =
       /*<<hashtbl.ml:93:14>>*/ caml_make_vect
        /*<<hashtbl.ml:93:14>>*/ ( /*<<hashtbl.ml:93:25>>*/ caml_call1
          /*<<hashtbl.ml:93:25>>*/ (Stdlib[18], h[4]),
        0);
     return 0;
    }
     /*<<hashtbl.ml:90:4>>*/ return  /*<<hashtbl.ml:90:4>>*/ clear
             /*<<hashtbl.ml:90:4>>*/ (h) /*<<hashtbl.ml:94:5>>*/ ;
    /*<<hashtbl.ml:94:5>>*/ }
   function copy_bucketlist(param){
     /*<<hashtbl.ml:96:22>>*/ if(! param)
      /*<<hashtbl.ml:97:13>>*/ return 0 /*<<hashtbl.ml:97:13>>*/ ;
    var
     key = param[1],
     data = param[2],
     next = param[3],
     prec$1 =  /*<<hashtbl.ml:109:19>>*/ [0, key, data, next],
     prec = prec$1,
     param$0 = next;
     /*<<hashtbl.ml:99:19>>*/ for(;;){
     if(! param$0)
       /*<<hashtbl.ml:110:6>>*/ return prec$1 /*<<hashtbl.ml:110:6>>*/ ;
     var
      key$0 = param$0[1],
      data$0 = param$0[2],
      next$0 = param$0[3],
      prec$0 =  /*<<hashtbl.ml:102:25>>*/ [0, key$0, data$0, next$0];
     prec[3] = prec$0;
     prec = prec$0;
     param$0 = next$0;
    }
    /*<<hashtbl.ml:111:7>>*/ }
   function copy(h){
    var
     _ag_ = h[4],
     _ah_ = h[3],
     _ai_ =
        /*<<hashtbl.ml:113:29>>*/  /*<<hashtbl.ml:113:29>>*/ caml_call2
         /*<<hashtbl.ml:113:29>>*/ (Stdlib_Array[14], copy_bucketlist, h[2]);
     /*<<hashtbl.ml:113:13>>*/ return [0, h[1], _ai_, _ah_, _ag_] /*<<hashtbl.ml:113:13>>*/ ;
    /*<<hashtbl.ml:113:63>>*/ }
   function length(h){
     /*<<hashtbl.ml:115:15>>*/ return h[1];
    /*<<hashtbl.ml:115:21>>*/ }
   function insert_all_buckets(indexfun, inplace, odata, ndata){
    var
     nsize = ndata.length - 1,
     ndata_tail =
        /*<<hashtbl.ml:119:19>>*/  /*<<hashtbl.ml:119:19>>*/ caml_make_vect
         /*<<hashtbl.ml:119:19>>*/ (nsize, 0),
     _aa_ = odata.length - 2 | 0,
     _$_ =  /*<<hashtbl.ml:135:2>>*/ 0;
    if(_aa_ >= 0){
     var i$0 = _$_;
     for(;;){
      var
       cell$1 =
          /*<<hashtbl.ml:136:18>>*/ caml_check_bound(odata, i$0)[1 + i$0],
       cell = cell$1;
       /*<<hashtbl.ml:120:26>>*/ for(;;){
       if(! cell) break;
       var
        key = cell[1],
        data = cell[2],
        next = cell[3],
        cell$0 =  /*<<hashtbl.ml:123:8>>*/ inplace ? cell : [0, key, data, 0],
        nidx =
           /*<<hashtbl.ml:127:19>>*/  /*<<hashtbl.ml:127:19>>*/ caml_call1
            /*<<hashtbl.ml:127:19>>*/ (indexfun, key),
        match =
           /*<<hashtbl.ml:128:20>>*/ caml_check_bound(ndata_tail, nidx)
           [1 + nidx];
       if(match)
        match[3] = cell$0;
       else
         /*<<hashtbl.ml:129:19>>*/ caml_check_bound(ndata, nidx)[1 + nidx] = cell$0;
        /*<<hashtbl.ml:132:8>>*/ caml_check_bound(ndata_tail, nidx)[1 + nidx]
       = cell$0;
       cell = next;
      }
      var _af_ =  /*<<hashtbl.ml:136:4>>*/ i$0 + 1 | 0;
      if(_aa_ === i$0) break;
      i$0 = _af_;
     }
    }
    if(inplace){
     var _ac_ = nsize - 1 | 0, _ab_ =  /*<<hashtbl.ml:139:4>>*/ 0;
     if(_ac_ >= 0){
      var i = _ab_;
      for(;;){
       var
        match$0 =
           /*<<hashtbl.ml:140:12>>*/ caml_check_bound(ndata_tail, i)[1 + i];
       if(match$0) match$0[3] = 0;
       var _ae_ =  /*<<hashtbl.ml:139:4>>*/ i + 1 | 0;
       if(_ac_ === i) break;
       i = _ae_;
      }
     }
     var _ad_ = 0;
    }
    else
     var _ad_ = inplace;
    return _ad_;
    /*<<hashtbl.ml:143:8>>*/ }
   function resize(indexfun, h){
    var
     odata = h[2],
     osize =  /*<<hashtbl.ml:147:2>>*/ odata.length - 1,
     nsize = osize * 2 | 0,
     ___ = nsize < Stdlib_Sys[13] ? 1 : 0;
    if(! ___) return ___;
    var
     ndata =
        /*<<hashtbl.ml:150:16>>*/  /*<<hashtbl.ml:150:16>>*/ caml_make_vect
         /*<<hashtbl.ml:150:16>>*/ (nsize, 0),
     inplace =
        /*<<hashtbl.ml:151:22>>*/ 1
       -
         /*<<hashtbl.ml:151:22>>*/ ongoing_traversal
          /*<<hashtbl.ml:151:22>>*/ (h);
    h[2] = ndata;
     /*<<hashtbl.ml:153:4>>*/ return  /*<<hashtbl.ml:153:4>>*/ insert_all_buckets
             /*<<hashtbl.ml:153:4>>*/ ( /*<<hashtbl.ml:153:23>>*/ caml_call1
               /*<<hashtbl.ml:153:23>>*/ (indexfun, h),
             inplace,
             odata,
             ndata) /*<<hashtbl.ml:154:5>>*/ ;
    /*<<hashtbl.ml:154:5>>*/ }
   function iter(f, h){
    var
     old_trav =
        /*<<hashtbl.ml:162:17>>*/  /*<<hashtbl.ml:162:17>>*/ ongoing_traversal
         /*<<hashtbl.ml:162:17>>*/ (h);
    if(1 - old_trav)
      /*<<hashtbl.ml:163:23>>*/  /*<<hashtbl.ml:163:23>>*/ flip_ongoing_traversal
       /*<<hashtbl.ml:163:23>>*/ (h);
     /*<<hashtbl.ml:163:23>>*/ try{
     var d = h[2], _W_ = d.length - 2 | 0, _V_ = 0;
     if(_W_ >= 0){
      var i = _V_;
      for(;;){
       var param = caml_check_bound(d, i)[1 + i];
        /*<<hashtbl.ml:157:22>>*/ for(;;){
        if(! param) break;
        var key = param[1], data = param[2], next = param[3];
         /*<<hashtbl.ml:161:8>>*/  /*<<hashtbl.ml:161:8>>*/ caml_call2
          /*<<hashtbl.ml:161:8>>*/ (f, key, data);
        param = next;
       }
       var _Z_ =  /*<<hashtbl.ml:167:6>>*/ i + 1 | 0;
       if(_W_ === i) break;
       i = _Z_;
      }
     }
     var
      _X_ = 1 - old_trav,
      _Y_ =
        _X_
         ?  /*<<hashtbl.ml:169:25>>*/ flip_ongoing_traversal
            /*<<hashtbl.ml:169:25>>*/ (h)
         : _X_;
      /*<<hashtbl.ml:169:25>>*/ return _Y_ /*<<hashtbl.ml:169:25>>*/ ;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
      /*<<hashtbl.ml:170:16>>*/ if(old_trav)
      throw caml_maybe_attach_backtrace(exn, 0);
      /*<<hashtbl.ml:171:4>>*/  /*<<hashtbl.ml:171:4>>*/ flip_ongoing_traversal
       /*<<hashtbl.ml:171:4>>*/ (h);
      /*<<hashtbl.ml:172:4>>*/ throw  /*<<hashtbl.ml:172:4>>*/ caml_maybe_attach_backtrace
             /*<<hashtbl.ml:172:4>>*/ (exn, 0);
    }
    /*<<hashtbl.ml:172:13>>*/ }
   function filter_map_inplace(f, h){
    var
     d = h[2],
     old_trav =
        /*<<hashtbl.ml:196:17>>*/  /*<<hashtbl.ml:196:17>>*/ ongoing_traversal
         /*<<hashtbl.ml:196:17>>*/ (h);
    if(1 - old_trav)
      /*<<hashtbl.ml:197:23>>*/  /*<<hashtbl.ml:197:23>>*/ flip_ongoing_traversal
       /*<<hashtbl.ml:197:23>>*/ (h);
     /*<<hashtbl.ml:197:23>>*/ try{
     var _R_ = d.length - 2 | 0, _Q_ = 0;
     if(_R_ >= 0){
      var i = _Q_;
      for(;;){
       var
        slot$0 =  /*<<hashtbl.ml:200:44>>*/ caml_check_bound(h[2], i)[1 + i],
        prec = 0,
        slot = slot$0;
        /*<<hashtbl.ml:174:34>>*/ for(;;){
        if(! slot) break;
        var
         key = slot[1],
         data = slot[2],
         next = slot[3],
         match =
            /*<<hashtbl.ml:181:18>>*/  /*<<hashtbl.ml:181:18>>*/ caml_call2
             /*<<hashtbl.ml:181:18>>*/ (f, key, data);
        if(match){
         var data$0 = match[1];
          /*<<hashtbl.ml:186:10>>*/ if(prec)
          prec[3] = slot;
         else
           /*<<hashtbl.ml:187:21>>*/ caml_check_bound(h[2], i)[1 + i] = slot;
         slot[2] = data$0;
         prec = slot;
         slot = next;
        }
        else{h[1] = h[1] - 1 | 0; slot = next;}
       }
       if(prec)
        prec[3] = 0;
       else
         /*<<hashtbl.ml:177:17>>*/ caml_check_bound(h[2], i)[1 + i] = 0;
       var _U_ =  /*<<hashtbl.ml:200:6>>*/ i + 1 | 0;
       if(_R_ === i) break;
       i = _U_;
      }
     }
     var
      _S_ = 1 - old_trav,
      _T_ =
        _S_
         ?  /*<<hashtbl.ml:202:25>>*/ flip_ongoing_traversal
            /*<<hashtbl.ml:202:25>>*/ (h)
         : _S_;
      /*<<hashtbl.ml:202:25>>*/ return _T_ /*<<hashtbl.ml:202:25>>*/ ;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
      /*<<hashtbl.ml:203:16>>*/ if(old_trav)
      throw caml_maybe_attach_backtrace(exn, 0);
      /*<<hashtbl.ml:204:4>>*/  /*<<hashtbl.ml:204:4>>*/ flip_ongoing_traversal
       /*<<hashtbl.ml:204:4>>*/ (h);
      /*<<hashtbl.ml:205:4>>*/ throw  /*<<hashtbl.ml:205:4>>*/ caml_maybe_attach_backtrace
             /*<<hashtbl.ml:205:4>>*/ (exn, 0);
    }
    /*<<hashtbl.ml:205:13>>*/ }
   function fold(f, h, init){
    var
     old_trav =
        /*<<hashtbl.ml:214:17>>*/  /*<<hashtbl.ml:214:17>>*/ ongoing_traversal
         /*<<hashtbl.ml:214:17>>*/ (h);
    if(1 - old_trav)
      /*<<hashtbl.ml:215:23>>*/  /*<<hashtbl.ml:215:23>>*/ flip_ongoing_traversal
       /*<<hashtbl.ml:215:23>>*/ (h);
     /*<<hashtbl.ml:215:23>>*/ try{
     var
      d = h[2],
      accu$1 =  /*<<hashtbl.ml:218:15>>*/ [0, init],
      _N_ = d.length - 2 | 0,
      _M_ =  /*<<hashtbl.ml:218:15>>*/ 0;
     if(_N_ >= 0){
      var i = _M_;
      for(;;){
       var
        accu$2 = accu$1[1],
        b$0 =  /*<<hashtbl.ml:220:24>>*/ caml_check_bound(d, i)[1 + i],
        b = b$0,
        accu = accu$2;
        /*<<hashtbl.ml:209:4>>*/ for(;;){
        if(! b) break;
        var
         key = b[1],
         data = b[2],
         next = b[3],
         accu$0 =
            /*<<hashtbl.ml:213:23>>*/  /*<<hashtbl.ml:213:23>>*/ caml_call3
             /*<<hashtbl.ml:213:23>>*/ (f, key, data, accu);
        b = next;
        accu = accu$0;
       }
       accu$1[1] = accu;
       var _P_ =  /*<<hashtbl.ml:219:4>>*/ i + 1 | 0;
       if(_N_ === i) break;
       i = _P_;
      }
     }
     if(1 - old_trav)
       /*<<hashtbl.ml:222:25>>*/  /*<<hashtbl.ml:222:25>>*/ flip_ongoing_traversal
        /*<<hashtbl.ml:222:25>>*/ (h);
     var _O_ = accu$1[1];
     return _O_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
      /*<<hashtbl.ml:224:16>>*/ if(old_trav)
      throw caml_maybe_attach_backtrace(exn, 0);
      /*<<hashtbl.ml:225:4>>*/  /*<<hashtbl.ml:225:4>>*/ flip_ongoing_traversal
       /*<<hashtbl.ml:225:4>>*/ (h);
      /*<<hashtbl.ml:226:4>>*/ throw  /*<<hashtbl.ml:226:4>>*/ caml_maybe_attach_backtrace
             /*<<hashtbl.ml:226:4>>*/ (exn, 0);
    }
    /*<<hashtbl.ml:226:13>>*/ }
   function bucket_length(accu, param){
    var accu$0 = accu, param$0 = param;
     /*<<hashtbl.ml:235:22>>*/ for(;;){
     if(! param$0)
       /*<<hashtbl.ml:236:13>>*/ return accu$0 /*<<hashtbl.ml:236:13>>*/ ;
     var
      next = param$0[3],
      accu$1 =  /*<<hashtbl.ml:237:18>>*/ accu$0 + 1 | 0;
     accu$0 = accu$1;
     param$0 = next;
    }
    /*<<hashtbl.ml:237:47>>*/ }
   function stats(h){
    var
     mbl =
        /*<<hashtbl.ml:241:4>>*/  /*<<hashtbl.ml:241:4>>*/ caml_call3
         /*<<hashtbl.ml:241:4>>*/ (Stdlib_Array[18],
         function(m, b){
          var
           _L_ =
              /*<<hashtbl.ml:241:42>>*/  /*<<hashtbl.ml:241:42>>*/ bucket_length
               /*<<hashtbl.ml:241:42>>*/ (0, b);
           /*<<hashtbl.ml:241:42>>*/ return  /*<<hashtbl.ml:241:42>>*/ caml_call2
                   /*<<hashtbl.ml:241:42>>*/ (Stdlib_Int[11], m, _L_) /*<<hashtbl.ml:241:61>>*/ ;
          /*<<hashtbl.ml:241:61>>*/ },
         0,
         h[2]),
     histo =
        /*<<hashtbl.ml:242:14>>*/  /*<<hashtbl.ml:242:14>>*/ caml_make_vect
         /*<<hashtbl.ml:242:14>>*/ (mbl + 1 | 0, 0);
     /*<<hashtbl.ml:243:2>>*/  /*<<hashtbl.ml:243:2>>*/ caml_call2
      /*<<hashtbl.ml:243:2>>*/ (Stdlib_Array[12],
      function(b){
       var
        l =
           /*<<hashtbl.ml:245:14>>*/  /*<<hashtbl.ml:245:14>>*/ bucket_length
            /*<<hashtbl.ml:245:14>>*/ (0, b);
        /*<<hashtbl.ml:246:6>>*/ histo[1 + l] =
        caml_check_bound(histo, l)[1 + l] + 1 | 0;
        /*<<hashtbl.ml:246:6>>*/ return 0 /*<<hashtbl.ml:246:6>>*/ ;
       /*<<hashtbl.ml:246:32>>*/ },
      h[2]);
     /*<<hashtbl.ml:248:2>>*/ return [0, h[1], h[2].length - 1, mbl, histo] /*<<hashtbl.ml:248:2>>*/ ;
    /*<<hashtbl.ml:251:30>>*/ }
   function to_seq(tbl){
    var tbl_data = tbl[2];
    function aux(i, buck, param){
     var i$0 = i, buck$0 = buck;
      /*<<hashtbl.ml:260:26>>*/ for(;;){
      if(buck$0){
       var key = buck$0[1], data = buck$0[2], next = buck$0[3];
        /*<<hashtbl.ml:266:8>>*/ return [0,
               [0, key, data],
               function(_K_){ /*<<?>>*/ return aux(i$0, next, _K_);}] /*<<hashtbl.ml:266:8>>*/ ;
      }
      if(i$0 === tbl_data.length - 1)
        /*<<hashtbl.ml:263:13>>*/ return 0 /*<<hashtbl.ml:263:13>>*/ ;
      var
       buck$1 =
          /*<<hashtbl.ml:264:22>>*/ caml_check_bound(tbl_data, i$0)[1 + i$0],
       i$1 =  /*<<hashtbl.ml:264:22>>*/ i$0 + 1 | 0;
      i$0 = i$1;
      buck$0 = buck$1;
     }
     /*<<hashtbl.ml:266:42>>*/ }
    var _H_ =  /*<<hashtbl.ml:268:2>>*/ 0, _I_ = 0;
     /*<<hashtbl.ml:268:2>>*/ return function(_J_){
      /*<<?>>*/ return aux(_I_, _H_, _J_);} /*<<hashtbl.ml:268:2>>*/ ;
    /*<<hashtbl.ml:268:13>>*/ }
   function to_seq_keys(m){
    var
     _F_ =
        /*<<hashtbl.ml:270:32>>*/  /*<<hashtbl.ml:270:32>>*/ to_seq
         /*<<hashtbl.ml:270:32>>*/ (m);
     /*<<hashtbl.ml:270:32>>*/ return  /*<<hashtbl.ml:270:32>>*/ caml_call2
             /*<<hashtbl.ml:270:32>>*/ (Stdlib_Seq[29],
             function(_G_){ /*<<?>>*/ return _G_[1];},
             _F_) /*<<hashtbl.ml:270:42>>*/ ;
    /*<<hashtbl.ml:270:42>>*/ }
   function to_seq_values(m){
    var
     _D_ =
        /*<<hashtbl.ml:272:34>>*/  /*<<hashtbl.ml:272:34>>*/ to_seq
         /*<<hashtbl.ml:272:34>>*/ (m);
     /*<<hashtbl.ml:272:34>>*/ return  /*<<hashtbl.ml:272:34>>*/ caml_call2
             /*<<hashtbl.ml:272:34>>*/ (Stdlib_Seq[29],
             function(_E_){ /*<<?>>*/ return _E_[2];},
             _D_) /*<<hashtbl.ml:272:44>>*/ ;
    /*<<hashtbl.ml:272:44>>*/ }
   function MakeSeeded(H){
    function key_index(h, key){
     var _C_ = h[2].length - 2 | 0;
      /*<<hashtbl.ml:357:6>>*/ return  /*<<hashtbl.ml:357:6>>*/ caml_call2
              /*<<hashtbl.ml:357:6>>*/ (H[2], h[3], key)
            & _C_ /*<<hashtbl.ml:357:6>>*/ ;
     /*<<hashtbl.ml:357:63>>*/ }
    function add(h, key, data){
     var
      i =
         /*<<hashtbl.ml:360:14>>*/  /*<<hashtbl.ml:360:14>>*/ key_index
          /*<<hashtbl.ml:360:14>>*/ (h, key),
      bucket =
         /*<<hashtbl.ml:361:23>>*/ [0,
         key,
         data,
         caml_check_bound(h[2], i)[1 + i]];
      /*<<hashtbl.ml:362:6>>*/ caml_check_bound(h[2], i)[1 + i] = bucket;
     h[1] = h[1] + 1 | 0;
     var _B_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
     return _B_
             ?  /*<<hashtbl.ml:364:49>>*/ resize
                /*<<hashtbl.ml:364:49>>*/ (key_index, h)
             : _B_ /*<<hashtbl.ml:364:67>>*/ ;
     /*<<hashtbl.ml:364:67>>*/ }
    function remove(h, key){
     var
      i =
         /*<<hashtbl.ml:380:14>>*/  /*<<hashtbl.ml:380:14>>*/ key_index
          /*<<hashtbl.ml:380:14>>*/ (h, key),
      c =  /*<<hashtbl.ml:381:34>>*/ caml_check_bound(h[2], i)[1 + i],
      prec$0 = 0,
      prec = c;
      /*<<hashtbl.ml:366:26>>*/ for(;;){
      if(! prec)
        /*<<hashtbl.ml:368:10>>*/ return 0 /*<<hashtbl.ml:368:10>>*/ ;
      var k = prec[1], next = prec[3];
       /*<<hashtbl.ml:370:13>>*/ if
       ( /*<<hashtbl.ml:370:13>>*/ caml_call2
          /*<<hashtbl.ml:370:13>>*/ (H[1], k, key)){
       h[1] = h[1] - 1 | 0;
       return prec$0
               ? (prec$0[3] = next, 0)
               : (caml_check_bound(h[2], i)[1 + i] = next, 0) /*<<hashtbl.ml:381:44>>*/ ;
      }
      prec$0 = prec;
      prec = next;
     }
     /*<<hashtbl.ml:381:44>>*/ }
    function find(h, key){
     var
      _A_ =
         /*<<hashtbl.ml:390:20>>*/  /*<<hashtbl.ml:390:20>>*/ key_index
          /*<<hashtbl.ml:390:20>>*/ (h, key),
      match =  /*<<hashtbl.ml:390:12>>*/ caml_check_bound(h[2], _A_)[1 + _A_];
     if(! match)
       /*<<hashtbl.ml:391:17>>*/ throw  /*<<hashtbl.ml:391:17>>*/ caml_maybe_attach_backtrace
              /*<<hashtbl.ml:391:17>>*/ (Stdlib[8], 1);
     var k1 = match[1], d1 = match[2], next1 = match[3];
      /*<<hashtbl.ml:393:13>>*/ if
      ( /*<<hashtbl.ml:393:13>>*/ caml_call2
         /*<<hashtbl.ml:393:13>>*/ (H[1], key, k1))
       /*<<hashtbl.ml:393:33>>*/ return d1 /*<<hashtbl.ml:393:33>>*/ ;
     if(! next1)
       /*<<hashtbl.ml:395:21>>*/ throw  /*<<hashtbl.ml:395:21>>*/ caml_maybe_attach_backtrace
              /*<<hashtbl.ml:395:21>>*/ (Stdlib[8], 1);
     var k2 = next1[1], d2 = next1[2], next2 = next1[3];
      /*<<hashtbl.ml:397:17>>*/ if
      ( /*<<hashtbl.ml:397:17>>*/ caml_call2
         /*<<hashtbl.ml:397:17>>*/ (H[1], key, k2))
       /*<<hashtbl.ml:397:37>>*/ return d2 /*<<hashtbl.ml:397:37>>*/ ;
     if(! next2)
       /*<<hashtbl.ml:399:25>>*/ throw  /*<<hashtbl.ml:399:25>>*/ caml_maybe_attach_backtrace
              /*<<hashtbl.ml:399:25>>*/ (Stdlib[8], 1);
     var k3 = next2[1], d3 = next2[2], next3 = next2[3];
      /*<<hashtbl.ml:401:21>>*/ if
      ( /*<<hashtbl.ml:401:21>>*/ caml_call2
         /*<<hashtbl.ml:401:21>>*/ (H[1], key, k3))
       /*<<hashtbl.ml:401:41>>*/ return d3 /*<<hashtbl.ml:401:41>>*/ ;
     var param = next3;
      /*<<hashtbl.ml:383:21>>*/ for(;;){
      if(! param)
        /*<<hashtbl.ml:385:10>>*/ throw  /*<<hashtbl.ml:385:10>>*/ caml_maybe_attach_backtrace
               /*<<hashtbl.ml:385:10>>*/ (Stdlib[8], 1);
      var k = param[1], data = param[2], next = param[3];
       /*<<hashtbl.ml:387:13>>*/ if
       ( /*<<hashtbl.ml:387:13>>*/ caml_call2
          /*<<hashtbl.ml:387:13>>*/ (H[1], key, k))
        /*<<hashtbl.ml:387:32>>*/ return data /*<<hashtbl.ml:387:32>>*/ ;
      param = next;
     }
     /*<<hashtbl.ml:401:67>>*/ }
    function find_opt(h, key){
     var
      _z_ =
         /*<<hashtbl.ml:410:20>>*/  /*<<hashtbl.ml:410:20>>*/ key_index
          /*<<hashtbl.ml:410:20>>*/ (h, key),
      match =  /*<<hashtbl.ml:410:12>>*/ caml_check_bound(h[2], _z_)[1 + _z_];
     if(! match)
       /*<<hashtbl.ml:411:17>>*/ return 0 /*<<hashtbl.ml:411:17>>*/ ;
     var k1 = match[1], d1 = match[2], next1 = match[3];
      /*<<hashtbl.ml:413:13>>*/ if
      ( /*<<hashtbl.ml:413:13>>*/ caml_call2
         /*<<hashtbl.ml:413:13>>*/ (H[1], key, k1))
       /*<<hashtbl.ml:413:33>>*/ return [0, d1] /*<<hashtbl.ml:413:33>>*/ ;
     if(! next1)
       /*<<hashtbl.ml:415:21>>*/ return 0 /*<<hashtbl.ml:415:21>>*/ ;
     var k2 = next1[1], d2 = next1[2], next2 = next1[3];
      /*<<hashtbl.ml:417:17>>*/ if
      ( /*<<hashtbl.ml:417:17>>*/ caml_call2
         /*<<hashtbl.ml:417:17>>*/ (H[1], key, k2))
       /*<<hashtbl.ml:417:37>>*/ return [0, d2] /*<<hashtbl.ml:417:37>>*/ ;
     if(! next2)
       /*<<hashtbl.ml:419:25>>*/ return 0 /*<<hashtbl.ml:419:25>>*/ ;
     var k3 = next2[1], d3 = next2[2], next3 = next2[3];
      /*<<hashtbl.ml:421:21>>*/ if
      ( /*<<hashtbl.ml:421:21>>*/ caml_call2
         /*<<hashtbl.ml:421:21>>*/ (H[1], key, k3))
       /*<<hashtbl.ml:421:41>>*/ return [0, d3] /*<<hashtbl.ml:421:41>>*/ ;
     var param = next3;
      /*<<hashtbl.ml:403:25>>*/ for(;;){
      if(! param)
        /*<<hashtbl.ml:405:10>>*/ return 0 /*<<hashtbl.ml:405:10>>*/ ;
      var k = param[1], data = param[2], next = param[3];
       /*<<hashtbl.ml:407:13>>*/ if
       ( /*<<hashtbl.ml:407:13>>*/ caml_call2
          /*<<hashtbl.ml:407:13>>*/ (H[1], key, k))
        /*<<hashtbl.ml:407:32>>*/ return [0, data] /*<<hashtbl.ml:407:32>>*/ ;
      param = next;
     }
     /*<<hashtbl.ml:421:76>>*/ }
    function find_all(h, key){
     var
      _y_ =
         /*<<hashtbl.ml:431:29>>*/  /*<<hashtbl.ml:431:29>>*/ key_index
          /*<<hashtbl.ml:431:29>>*/ (h, key),
      param = caml_check_bound(h[2], _y_)[1 + _y_];
      /*<<hashtbl.ml:424:47>>*/ for(;;){
      if(! param)
        /*<<hashtbl.ml:426:10>>*/ return 0 /*<<hashtbl.ml:426:10>>*/ ;
      var k = param[1], d = param[2], next = param[3];
       /*<<hashtbl.ml:428:13>>*/ if
       ( /*<<hashtbl.ml:428:13>>*/ caml_call2
          /*<<hashtbl.ml:428:13>>*/ (H[1], k, key))
       break;
      param = next;
     }
     var
      block =  /*<<hashtbl.ml:429:15>>*/ [0, d, 24029],
      dst = block,
      offset = 1,
      param$0 = next;
      /*<<hashtbl.ml:424:47>>*/ for(;;){
      if(! param$0){
       dst[1 + offset] = 0;
        /*<<hashtbl.ml:429:20>>*/ return block /*<<hashtbl.ml:429:20>>*/ ;
      }
      var k$0 = param$0[1], d$0 = param$0[2], next$0 = param$0[3];
       /*<<hashtbl.ml:428:13>>*/ if
       ( /*<<hashtbl.ml:428:13>>*/ caml_call2
          /*<<hashtbl.ml:428:13>>*/ (H[1], k$0, key)){
       var dst$0 =  /*<<hashtbl.ml:429:15>>*/ [0, d$0, 24029];
       dst[1 + offset] = dst$0;
       dst = dst$0;
       offset = 1;
       param$0 = next$0;
      }
      else
       param$0 = next$0;
     }
     /*<<hashtbl.ml:431:45>>*/ }
    function replace(h, key, data){
     var
      i =
         /*<<hashtbl.ml:442:14>>*/  /*<<hashtbl.ml:442:14>>*/ key_index
          /*<<hashtbl.ml:442:14>>*/ (h, key),
      l =  /*<<hashtbl.ml:443:14>>*/ caml_check_bound(h[2], i)[1 + i],
      slot = l;
      /*<<hashtbl.ml:433:27>>*/ for(;;){
      if(slot){
       var k = slot[1], next = slot[3];
        /*<<hashtbl.ml:437:13>>*/ if
        (!
          /*<<hashtbl.ml:437:13>>*/ caml_call2
           /*<<hashtbl.ml:437:13>>*/ (H[1], k, key)){
        slot = next;
        continue;
       }
       slot[1] = key;
       slot[2] = data;
       var _v_ = 0;
      }
      else
       var _v_ = 1;
       /*<<hashtbl.ml:444:9>>*/ if(_v_){
        /*<<hashtbl.ml:445:8>>*/ caml_check_bound(h[2], i)[1 + i] = [0, key, data, l];
       h[1] = h[1] + 1 | 0;
       var _w_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
       if(_w_)
         /*<<hashtbl.ml:447:51>>*/ return  /*<<hashtbl.ml:447:51>>*/ resize
                 /*<<hashtbl.ml:447:51>>*/ (key_index, h) /*<<hashtbl.ml:448:9>>*/ ;
       var _x_ = _w_;
      }
      else
       var _x_ = _v_;
      return _x_;
     }
     /*<<hashtbl.ml:448:9>>*/ }
    function mem(h, key){
     var
      _u_ =
         /*<<hashtbl.ml:457:32>>*/  /*<<hashtbl.ml:457:32>>*/ key_index
          /*<<hashtbl.ml:457:32>>*/ (h, key),
      param = caml_check_bound(h[2], _u_)[1 + _u_];
      /*<<hashtbl.ml:450:26>>*/ for(;;){
      if(! param)
        /*<<hashtbl.ml:452:10>>*/ return 0 /*<<hashtbl.ml:452:10>>*/ ;
      var
       k = param[1],
       next = param[3],
       _t_ =
          /*<<hashtbl.ml:454:10>>*/  /*<<hashtbl.ml:454:10>>*/ caml_call2
           /*<<hashtbl.ml:454:10>>*/ (H[1], k, key);
       /*<<hashtbl.ml:454:10>>*/ if(_t_)
        /*<<hashtbl.ml:454:10>>*/ return _t_ /*<<hashtbl.ml:454:10>>*/ ;
      param = next;
     }
     /*<<hashtbl.ml:457:48>>*/ }
    function add_seq(tbl, i){
      /*<<hashtbl.ml:460:6>>*/ return  /*<<hashtbl.ml:460:6>>*/ caml_call2
              /*<<hashtbl.ml:460:6>>*/ (Stdlib_Seq[4],
              function(param){
               var v = param[2], k = param[1];
                /*<<hashtbl.ml:460:29>>*/ return  /*<<hashtbl.ml:460:29>>*/ add
                        /*<<hashtbl.ml:460:29>>*/ (tbl, k, v) /*<<hashtbl.ml:460:41>>*/ ;
               /*<<hashtbl.ml:460:41>>*/ },
              i) /*<<hashtbl.ml:460:43>>*/ ;
     /*<<hashtbl.ml:460:43>>*/ }
    function replace_seq(tbl, i){
      /*<<hashtbl.ml:463:6>>*/ return  /*<<hashtbl.ml:463:6>>*/ caml_call2
              /*<<hashtbl.ml:463:6>>*/ (Stdlib_Seq[4],
              function(param){
               var v = param[2], k = param[1];
                /*<<hashtbl.ml:463:29>>*/ return  /*<<hashtbl.ml:463:29>>*/ replace
                        /*<<hashtbl.ml:463:29>>*/ (tbl, k, v) /*<<hashtbl.ml:463:45>>*/ ;
               /*<<hashtbl.ml:463:45>>*/ },
              i) /*<<hashtbl.ml:463:47>>*/ ;
     /*<<hashtbl.ml:463:47>>*/ }
    function of_seq(i){
     var
      tbl =
         /*<<hashtbl.ml:466:16>>*/  /*<<hashtbl.ml:466:16>>*/ create
          /*<<hashtbl.ml:466:16>>*/ (0, 16);
      /*<<hashtbl.ml:467:6>>*/  /*<<hashtbl.ml:467:6>>*/ replace_seq
       /*<<hashtbl.ml:467:6>>*/ (tbl, i);
      /*<<hashtbl.ml:467:6>>*/ return tbl /*<<hashtbl.ml:467:6>>*/ ;
     /*<<hashtbl.ml:468:9>>*/ }
     /*<<hashtbl.ml:347:2>>*/ return [0,
            create,
            clear,
            reset,
            copy,
            add,
            remove,
            find,
            find_opt,
            find_all,
            replace,
            mem,
            iter,
            filter_map_inplace,
            fold,
            length,
            stats,
            to_seq,
            to_seq_keys,
            to_seq_values,
            add_seq,
            replace_seq,
            of_seq] /*<<hashtbl.ml:347:2>>*/ ;
   }
   function Make(H){
    var equal = H[1];
    function seeded_hash(seed, x){
      /*<<hashtbl.ml:485:41>>*/ return  /*<<hashtbl.ml:485:41>>*/ caml_call1
              /*<<hashtbl.ml:485:41>>*/ (H[2], x) /*<<hashtbl.ml:485:49>>*/ ;
     /*<<hashtbl.ml:485:49>>*/ }
    var
     include = MakeSeeded([0, equal, seeded_hash]),
     _s_ = include[1],
     clear = include[2],
     reset = include[3],
     copy = include[4],
     add = include[5],
     remove = include[6],
     find = include[7],
     find_opt = include[8],
     find_all = include[9],
     replace = include[10],
     mem = include[11],
     iter = include[12],
     filter_map_inplace = include[13],
     fold = include[14],
     length = include[15],
     stats = include[16],
     to_seq = include[17],
     to_seq_keys = include[18],
     to_seq_values = include[19],
     add_seq = include[20],
     replace_seq = include[21];
    function create(sz){
      /*<<hashtbl.ml:487:20>>*/ return  /*<<hashtbl.ml:487:20>>*/ caml_call2
              /*<<hashtbl.ml:487:20>>*/ (_s_, _d_, sz) /*<<hashtbl.ml:487:43>>*/ ;
     /*<<hashtbl.ml:487:43>>*/ }
    function of_seq(i){
     var
      tbl =
         /*<<hashtbl.ml:487:20>>*/  /*<<hashtbl.ml:487:20>>*/ caml_call2
          /*<<hashtbl.ml:487:20>>*/ (_s_, _d_, 16);
      /*<<hashtbl.ml:490:6>>*/  /*<<hashtbl.ml:490:6>>*/ caml_call2
       /*<<hashtbl.ml:490:6>>*/ (replace_seq, tbl, i);
      /*<<hashtbl.ml:490:6>>*/ return tbl /*<<hashtbl.ml:490:6>>*/ ;
     /*<<hashtbl.ml:491:9>>*/ }
     /*<<hashtbl.ml:481:2>>*/ return [0,
            create,
            clear,
            reset,
            copy,
            add,
            remove,
            find,
            find_opt,
            find_all,
            replace,
            mem,
            iter,
            filter_map_inplace,
            fold,
            length,
            stats,
            to_seq,
            to_seq_keys,
            to_seq_values,
            add_seq,
            replace_seq,
            of_seq] /*<<hashtbl.ml:481:2>>*/ ;
   }
   function hash(x){
     /*<<hashtbl.ml:501:13>>*/ return  /*<<hashtbl.ml:501:13>>*/ caml_hash
             /*<<hashtbl.ml:501:13>>*/ (10, 100, 0, x) /*<<hashtbl.ml:501:41>>*/ ;
    /*<<hashtbl.ml:501:41>>*/ }
   function hash_param(n1, n2, x){
     /*<<hashtbl.ml:502:25>>*/ return  /*<<hashtbl.ml:502:25>>*/ caml_hash
             /*<<hashtbl.ml:502:25>>*/ (n1, n2, 0, x) /*<<hashtbl.ml:502:52>>*/ ;
    /*<<hashtbl.ml:502:52>>*/ }
   function seeded_hash(seed, x){
     /*<<hashtbl.ml:503:25>>*/ return  /*<<hashtbl.ml:503:25>>*/ caml_hash
             /*<<hashtbl.ml:503:25>>*/ (10, 100, seed, x) /*<<hashtbl.ml:503:56>>*/ ;
    /*<<hashtbl.ml:503:56>>*/ }
   function key_index(h, key){
     /*<<hashtbl.ml:506:2>>*/ return 4 <= h.length - 1
            ?  /*<<hashtbl.ml:507:7>>*/ caml_hash
               /*<<hashtbl.ml:507:7>>*/ (10, 100, h[3], key)
             & (h[2].length - 2 | 0)
            :  /*<<hashtbl.ml:508:7>>*/ caml_call1
               /*<<hashtbl.ml:508:7>>*/ (Stdlib[1],
               cst_Hashtbl_unsupported_hash_t) /*<<hashtbl.ml:508:59>>*/ ;
    /*<<hashtbl.ml:508:59>>*/ }
   function add(h, key, data){
    var
     i =
        /*<<hashtbl.ml:511:10>>*/  /*<<hashtbl.ml:511:10>>*/ key_index
         /*<<hashtbl.ml:511:10>>*/ (h, key),
     bucket =
        /*<<hashtbl.ml:512:19>>*/ [0,
        key,
        data,
        caml_check_bound(h[2], i)[1 + i]];
     /*<<hashtbl.ml:513:2>>*/ caml_check_bound(h[2], i)[1 + i] = bucket;
    h[1] = h[1] + 1 | 0;
    var _r_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
    return _r_
            ?  /*<<hashtbl.ml:515:45>>*/ resize
               /*<<hashtbl.ml:515:45>>*/ (key_index, h)
            : _r_ /*<<hashtbl.ml:515:63>>*/ ;
    /*<<hashtbl.ml:515:63>>*/ }
   function remove(h, key){
    var
     i =
        /*<<hashtbl.ml:531:10>>*/  /*<<hashtbl.ml:531:10>>*/ key_index
         /*<<hashtbl.ml:531:10>>*/ (h, key),
     c =  /*<<hashtbl.ml:532:30>>*/ caml_check_bound(h[2], i)[1 + i],
     prec$0 = 0,
     prec = c;
     /*<<hashtbl.ml:517:22>>*/ for(;;){
     if(! prec)  /*<<hashtbl.ml:519:6>>*/ return 0 /*<<hashtbl.ml:519:6>>*/ ;
     var k = prec[1], next = prec[3];
      /*<<hashtbl.ml:521:9>>*/ if
      (0
       ===
         /*<<hashtbl.ml:521:9>>*/ caml_compare
          /*<<hashtbl.ml:521:9>>*/ (k, key)){
      h[1] = h[1] - 1 | 0;
      return prec$0
              ? (prec$0[3] = next, 0)
              : (caml_check_bound(h[2], i)[1 + i] = next, 0) /*<<hashtbl.ml:532:40>>*/ ;
     }
     prec$0 = prec;
     prec = next;
    }
    /*<<hashtbl.ml:532:40>>*/ }
   function find(h, key){
    var
     _q_ =
        /*<<hashtbl.ml:541:16>>*/  /*<<hashtbl.ml:541:16>>*/ key_index
         /*<<hashtbl.ml:541:16>>*/ (h, key),
     match =  /*<<hashtbl.ml:541:8>>*/ caml_check_bound(h[2], _q_)[1 + _q_];
    if(! match)
      /*<<hashtbl.ml:542:13>>*/ throw  /*<<hashtbl.ml:542:13>>*/ caml_maybe_attach_backtrace
             /*<<hashtbl.ml:542:13>>*/ (Stdlib[8], 1);
    var k1 = match[1], d1 = match[2], next1 = match[3];
     /*<<hashtbl.ml:544:9>>*/ if
     (0
      ===
        /*<<hashtbl.ml:544:9>>*/ caml_compare
         /*<<hashtbl.ml:544:9>>*/ (key, k1))
      /*<<hashtbl.ml:544:33>>*/ return d1 /*<<hashtbl.ml:544:33>>*/ ;
    if(! next1)
      /*<<hashtbl.ml:546:17>>*/ throw  /*<<hashtbl.ml:546:17>>*/ caml_maybe_attach_backtrace
             /*<<hashtbl.ml:546:17>>*/ (Stdlib[8], 1);
    var k2 = next1[1], d2 = next1[2], next2 = next1[3];
     /*<<hashtbl.ml:548:13>>*/ if
     (0
      ===
        /*<<hashtbl.ml:548:13>>*/ caml_compare
         /*<<hashtbl.ml:548:13>>*/ (key, k2))
      /*<<hashtbl.ml:548:37>>*/ return d2 /*<<hashtbl.ml:548:37>>*/ ;
    if(! next2)
      /*<<hashtbl.ml:550:21>>*/ throw  /*<<hashtbl.ml:550:21>>*/ caml_maybe_attach_backtrace
             /*<<hashtbl.ml:550:21>>*/ (Stdlib[8], 1);
    var k3 = next2[1], d3 = next2[2], next3 = next2[3];
     /*<<hashtbl.ml:552:17>>*/ if
     (0
      ===
        /*<<hashtbl.ml:552:17>>*/ caml_compare
         /*<<hashtbl.ml:552:17>>*/ (key, k3))
      /*<<hashtbl.ml:552:41>>*/ return d3 /*<<hashtbl.ml:552:41>>*/ ;
    var param = next3;
     /*<<hashtbl.ml:534:17>>*/ for(;;){
     if(! param)
       /*<<hashtbl.ml:536:6>>*/ throw  /*<<hashtbl.ml:536:6>>*/ caml_maybe_attach_backtrace
              /*<<hashtbl.ml:536:6>>*/ (Stdlib[8], 1);
     var k = param[1], data = param[2], next = param[3];
      /*<<hashtbl.ml:538:9>>*/ if
      (0
       ===
         /*<<hashtbl.ml:538:9>>*/ caml_compare
          /*<<hashtbl.ml:538:9>>*/ (key, k))
       /*<<hashtbl.ml:538:32>>*/ return data /*<<hashtbl.ml:538:32>>*/ ;
     param = next;
    }
    /*<<hashtbl.ml:552:67>>*/ }
   function find_opt(h, key){
    var
     _p_ =
        /*<<hashtbl.ml:561:16>>*/  /*<<hashtbl.ml:561:16>>*/ key_index
         /*<<hashtbl.ml:561:16>>*/ (h, key),
     match =  /*<<hashtbl.ml:561:8>>*/ caml_check_bound(h[2], _p_)[1 + _p_];
    if(! match)
      /*<<hashtbl.ml:562:13>>*/ return 0 /*<<hashtbl.ml:562:13>>*/ ;
    var k1 = match[1], d1 = match[2], next1 = match[3];
     /*<<hashtbl.ml:564:9>>*/ if
     (0
      ===
        /*<<hashtbl.ml:564:9>>*/ caml_compare
         /*<<hashtbl.ml:564:9>>*/ (key, k1))
      /*<<hashtbl.ml:564:33>>*/ return [0, d1] /*<<hashtbl.ml:564:33>>*/ ;
    if(! next1)
      /*<<hashtbl.ml:566:17>>*/ return 0 /*<<hashtbl.ml:566:17>>*/ ;
    var k2 = next1[1], d2 = next1[2], next2 = next1[3];
     /*<<hashtbl.ml:568:13>>*/ if
     (0
      ===
        /*<<hashtbl.ml:568:13>>*/ caml_compare
         /*<<hashtbl.ml:568:13>>*/ (key, k2))
      /*<<hashtbl.ml:568:37>>*/ return [0, d2] /*<<hashtbl.ml:568:37>>*/ ;
    if(! next2)
      /*<<hashtbl.ml:570:21>>*/ return 0 /*<<hashtbl.ml:570:21>>*/ ;
    var k3 = next2[1], d3 = next2[2], next3 = next2[3];
     /*<<hashtbl.ml:572:17>>*/ if
     (0
      ===
        /*<<hashtbl.ml:572:17>>*/ caml_compare
         /*<<hashtbl.ml:572:17>>*/ (key, k3))
      /*<<hashtbl.ml:572:41>>*/ return [0, d3] /*<<hashtbl.ml:572:41>>*/ ;
    var param = next3;
     /*<<hashtbl.ml:554:21>>*/ for(;;){
     if(! param)  /*<<hashtbl.ml:556:6>>*/ return 0 /*<<hashtbl.ml:556:6>>*/ ;
     var k = param[1], data = param[2], next = param[3];
      /*<<hashtbl.ml:558:9>>*/ if
      (0
       ===
         /*<<hashtbl.ml:558:9>>*/ caml_compare
          /*<<hashtbl.ml:558:9>>*/ (key, k))
       /*<<hashtbl.ml:558:32>>*/ return [0, data] /*<<hashtbl.ml:558:32>>*/ ;
     param = next;
    }
    /*<<hashtbl.ml:572:76>>*/ }
   function find_all(h, key){
    var
     _o_ =
        /*<<hashtbl.ml:582:25>>*/  /*<<hashtbl.ml:582:25>>*/ key_index
         /*<<hashtbl.ml:582:25>>*/ (h, key),
     param = caml_check_bound(h[2], _o_)[1 + _o_];
     /*<<hashtbl.ml:575:43>>*/ for(;;){
     if(! param)  /*<<hashtbl.ml:577:6>>*/ return 0 /*<<hashtbl.ml:577:6>>*/ ;
     var k = param[1], data = param[2], next = param[3];
      /*<<hashtbl.ml:579:9>>*/ if
      (0
       ===
         /*<<hashtbl.ml:579:9>>*/ caml_compare
          /*<<hashtbl.ml:579:9>>*/ (k, key))
      break;
     param = next;
    }
    var
     block =  /*<<hashtbl.ml:580:11>>*/ [0, data, 24029],
     dst = block,
     offset = 1,
     param$0 = next;
     /*<<hashtbl.ml:575:43>>*/ for(;;){
     if(! param$0){
      dst[1 + offset] = 0;
       /*<<hashtbl.ml:580:19>>*/ return block /*<<hashtbl.ml:580:19>>*/ ;
     }
     var k$0 = param$0[1], data$0 = param$0[2], next$0 = param$0[3];
      /*<<hashtbl.ml:579:9>>*/ if
      (0
       ===
         /*<<hashtbl.ml:579:9>>*/ caml_compare
          /*<<hashtbl.ml:579:9>>*/ (k$0, key)){
      var dst$0 =  /*<<hashtbl.ml:580:11>>*/ [0, data$0, 24029];
      dst[1 + offset] = dst$0;
      dst = dst$0;
      offset = 1;
      param$0 = next$0;
     }
     else
      param$0 = next$0;
    }
    /*<<hashtbl.ml:582:41>>*/ }
   function replace(h, key, data){
    var
     i =
        /*<<hashtbl.ml:593:10>>*/  /*<<hashtbl.ml:593:10>>*/ key_index
         /*<<hashtbl.ml:593:10>>*/ (h, key),
     l =  /*<<hashtbl.ml:594:10>>*/ caml_check_bound(h[2], i)[1 + i],
     slot = l;
     /*<<hashtbl.ml:584:23>>*/ for(;;){
     if(slot){
      var k = slot[1], next = slot[3];
       /*<<hashtbl.ml:588:9>>*/ if
       (0
        !==
          /*<<hashtbl.ml:588:9>>*/ caml_compare
           /*<<hashtbl.ml:588:9>>*/ (k, key)){
       slot = next;
       continue;
      }
      slot[1] = key;
      slot[2] = data;
      var _l_ = 0;
     }
     else
      var _l_ = 1;
      /*<<hashtbl.ml:595:5>>*/ if(_l_){
       /*<<hashtbl.ml:596:4>>*/ caml_check_bound(h[2], i)[1 + i] = [0, key, data, l];
      h[1] = h[1] + 1 | 0;
      var _m_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
      if(_m_)
        /*<<hashtbl.ml:598:47>>*/ return  /*<<hashtbl.ml:598:47>>*/ resize
                /*<<hashtbl.ml:598:47>>*/ (key_index, h) /*<<hashtbl.ml:599:5>>*/ ;
      var _n_ = _m_;
     }
     else
      var _n_ = _l_;
     return _n_;
    }
    /*<<hashtbl.ml:599:5>>*/ }
   function mem(h, key){
    var
     _k_ =
        /*<<hashtbl.ml:608:28>>*/  /*<<hashtbl.ml:608:28>>*/ key_index
         /*<<hashtbl.ml:608:28>>*/ (h, key),
     param = caml_check_bound(h[2], _k_)[1 + _k_];
     /*<<hashtbl.ml:601:22>>*/ for(;;){
     if(! param)  /*<<hashtbl.ml:603:6>>*/ return 0 /*<<hashtbl.ml:603:6>>*/ ;
     var
      k = param[1],
      next = param[3],
      _j_ =
        0
         ===
           /*<<hashtbl.ml:605:6>>*/ caml_compare
            /*<<hashtbl.ml:605:6>>*/ (k, key)
         ? 1
         : 0;
     if(_j_) return _j_;
     param = next;
    }
    /*<<hashtbl.ml:608:44>>*/ }
   function add_seq(tbl, i){
     /*<<hashtbl.ml:611:2>>*/ return  /*<<hashtbl.ml:611:2>>*/ caml_call2
             /*<<hashtbl.ml:611:2>>*/ (Stdlib_Seq[4],
             function(param){
              var v = param[2], k = param[1];
               /*<<hashtbl.ml:611:25>>*/ return  /*<<hashtbl.ml:611:25>>*/ add
                       /*<<hashtbl.ml:611:25>>*/ (tbl, k, v) /*<<hashtbl.ml:611:37>>*/ ;
              /*<<hashtbl.ml:611:37>>*/ },
             i) /*<<hashtbl.ml:611:39>>*/ ;
    /*<<hashtbl.ml:611:39>>*/ }
   function replace_seq(tbl, i){
     /*<<hashtbl.ml:614:2>>*/ return  /*<<hashtbl.ml:614:2>>*/ caml_call2
             /*<<hashtbl.ml:614:2>>*/ (Stdlib_Seq[4],
             function(param){
              var v = param[2], k = param[1];
               /*<<hashtbl.ml:614:25>>*/ return  /*<<hashtbl.ml:614:25>>*/ replace
                       /*<<hashtbl.ml:614:25>>*/ (tbl, k, v) /*<<hashtbl.ml:614:41>>*/ ;
              /*<<hashtbl.ml:614:41>>*/ },
             i) /*<<hashtbl.ml:614:43>>*/ ;
    /*<<hashtbl.ml:614:43>>*/ }
   function of_seq(i){
    var
     tbl =
        /*<<hashtbl.ml:617:12>>*/  /*<<hashtbl.ml:617:12>>*/ create
         /*<<hashtbl.ml:617:12>>*/ (0, 16);
     /*<<hashtbl.ml:618:2>>*/  /*<<hashtbl.ml:618:2>>*/ replace_seq
      /*<<hashtbl.ml:618:2>>*/ (tbl, i);
     /*<<hashtbl.ml:618:2>>*/ return tbl /*<<hashtbl.ml:618:2>>*/ ;
    /*<<hashtbl.ml:619:5>>*/ }
   function rebuild(opt, h){
    var
     random =
       opt
        ? opt[1]
        :  /*<<hashtbl.ml:621:23>>*/ caml_call1
           /*<<hashtbl.ml:621:23>>*/ (Stdlib_Atomic[3], randomized),
     s =
        /*<<hashtbl.ml:622:10>>*/  /*<<hashtbl.ml:622:10>>*/ power_2_above
         /*<<hashtbl.ml:622:10>>*/ (16, h[2].length - 1);
     /*<<hashtbl.ml:623:2>>*/ if(random)
     var
      _g_ =
         /*<<hashtbl.ml:624:37>>*/  /*<<hashtbl.ml:624:37>>*/ caml_call1
          /*<<hashtbl.ml:624:37>>*/ (Stdlib_Domain[10][2], prng_key),
      seed =
         /*<<hashtbl.ml:624:19>>*/ caml_call1
          /*<<hashtbl.ml:624:19>>*/ (Stdlib_Random[19][4], _g_);
    else
     var seed = 4 <= h.length - 1 ? h[3] : 0;
    var
     _h_ = 4 <= h.length - 1 ? h[4] : s,
     h$0 =
        /*<<hashtbl.ml:627:11>>*/ [0,
        h[1],
         /*<<hashtbl.ml:629:11>>*/ caml_make_vect
          /*<<hashtbl.ml:629:11>>*/ (s, 0),
        seed,
        _h_];
     /*<<hashtbl.ml:633:2>>*/  /*<<hashtbl.ml:633:2>>*/ insert_all_buckets
      /*<<hashtbl.ml:633:2>>*/ (function(_i_){
        /*<<?>>*/ return key_index(h$0, _i_);
      },
      0,
      h[2],
      h$0[2]);
     /*<<hashtbl.ml:633:2>>*/ return h$0 /*<<hashtbl.ml:633:2>>*/ ;
    /*<<hashtbl.ml:634:4>>*/ }
   var
    Stdlib_Hashtbl =
      [0,
       create,
       clear,
       reset,
       copy,
       add,
       find,
       find_opt,
       find_all,
       mem,
       remove,
       replace,
       iter,
       filter_map_inplace,
       fold,
       length,
       randomize,
       is_randomized,
       rebuild,
       stats,
       to_seq,
       to_seq_keys,
       to_seq_values,
       add_seq,
       replace_seq,
       of_seq,
       Make,
       MakeSeeded,
       hash,
       seeded_hash,
       hash_param,
       caml_hash];
   runtime.caml_register_global(16, Stdlib_Hashtbl, "Stdlib__Hashtbl");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Weak
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__Int, Stdlib__Obj, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_check_bound =  /*<<?>>*/ runtime.caml_check_bound,
    caml_make_vect =  /*<<?>>*/ runtime.caml_make_vect,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_mod =  /*<<?>>*/ runtime.caml_mod;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Obj = global_data.Stdlib__Obj,
    cst_Weak_create = "Weak.create",
    cst_Weak_set = "Weak.set",
    cst_Weak_get = "Weak.get",
    cst_Weak_get_copy = "Weak.get_copy",
    cst_Weak_check = "Weak.check",
    cst_Weak_blit = "Weak.blit",
    cst_Weak_fill = "Weak.fill",
    cst_Weak_Make_hash_bucket_cann = "Weak.Make: hash bucket cannot grow more";
   function create(l){
    var
     _J_ = 0 <= l ? 1 : 0,
     _K_ = _J_ ? l <= Stdlib_Obj[23][15] ? 1 : 0 : _J_;
    if(1 - _K_)
      /*<<weak.ml:29:4>>*/  /*<<weak.ml:29:4>>*/ caml_call1
       /*<<weak.ml:29:4>>*/ (Stdlib[1], cst_Weak_create);
     /*<<weak.ml:30:2>>*/ return  /*<<weak.ml:30:2>>*/ runtime.caml_weak_create
             /*<<weak.ml:30:2>>*/ (l) /*<<weak.ml:30:10>>*/ ;
    /*<<weak.ml:30:10>>*/ }
   function length(x){
     /*<<weak.ml:33:15>>*/ return x.length - 3 | 0;
    /*<<weak.ml:33:55>>*/ }
   function raise_if_invalid_offset(e, o, msg){
    var
     _G_ = 0 <= o ? 1 : 0,
     _H_ =
       _G_
        ? o <  /*<<weak.ml:36:24>>*/ length /*<<weak.ml:36:24>>*/ (e) ? 1 : 0
        : _G_,
     _I_ = 1 - _H_;
    return _I_
            ?  /*<<weak.ml:37:4>>*/ caml_call1
               /*<<weak.ml:37:4>>*/ (Stdlib[1], msg)
            : _I_ /*<<weak.ml:37:20>>*/ ;
    /*<<weak.ml:37:20>>*/ }
   function set(e, o, x){
     /*<<weak.ml:42:2>>*/  /*<<weak.ml:42:2>>*/ raise_if_invalid_offset
      /*<<weak.ml:42:2>>*/ (e, o, cst_Weak_set);
    if(! x)
      /*<<weak.ml:44:12>>*/ return  /*<<weak.ml:44:12>>*/ runtime.caml_ephe_unset_key
              /*<<weak.ml:44:12>>*/ (e, o) /*<<weak.ml:45:24>>*/ ;
    var x$0 = x[1];
     /*<<weak.ml:45:14>>*/ return  /*<<weak.ml:45:14>>*/ runtime.caml_ephe_set_key
             /*<<weak.ml:45:14>>*/ (e, o, x$0) /*<<weak.ml:45:24>>*/ ;
    /*<<weak.ml:45:24>>*/ }
   function get(e, o){
     /*<<weak.ml:49:2>>*/  /*<<weak.ml:49:2>>*/ raise_if_invalid_offset
      /*<<weak.ml:49:2>>*/ (e, o, cst_Weak_get);
     /*<<weak.ml:50:2>>*/ return  /*<<weak.ml:50:2>>*/ runtime.caml_ephe_get_key
             /*<<weak.ml:50:2>>*/ (e, o) /*<<weak.ml:50:9>>*/ ;
    /*<<weak.ml:50:9>>*/ }
   function get_copy(e, o){
     /*<<weak.ml:54:2>>*/  /*<<weak.ml:54:2>>*/ raise_if_invalid_offset
      /*<<weak.ml:54:2>>*/ (e, o, cst_Weak_get_copy);
     /*<<weak.ml:55:2>>*/ return  /*<<weak.ml:55:2>>*/ runtime.caml_ephe_get_key_copy
             /*<<weak.ml:55:2>>*/ (e, o) /*<<weak.ml:55:14>>*/ ;
    /*<<weak.ml:55:14>>*/ }
   function check(e, o){
     /*<<weak.ml:59:2>>*/  /*<<weak.ml:59:2>>*/ raise_if_invalid_offset
      /*<<weak.ml:59:2>>*/ (e, o, cst_Weak_check);
     /*<<weak.ml:60:2>>*/ return  /*<<weak.ml:60:2>>*/ runtime.caml_ephe_check_key
             /*<<weak.ml:60:2>>*/ (e, o) /*<<weak.ml:60:11>>*/ ;
    /*<<weak.ml:60:11>>*/ }
   function blit(e1, o1, e2, o2, l){
     /*<<weak.ml:66:2>>*/ if
     (0 <= l
      &&
       0 <= o1
       &&
        ( /*<<weak.ml:66:29>>*/ length /*<<weak.ml:66:29>>*/ (e1) - l | 0)
        >= o1
        &&
         0 <= o2
         &&
          ( /*<<weak.ml:67:23>>*/ length /*<<weak.ml:67:23>>*/ (e2) - l | 0)
          >= o2){
     var
      _E_ = 0 !== l ? 1 : 0,
      _F_ =
        _E_
         ?  /*<<weak.ml:69:22>>*/ runtime.caml_ephe_blit_key
            /*<<weak.ml:69:22>>*/ (e1, o1, e2, o2, l)
         : _E_;
      /*<<weak.ml:69:22>>*/ return _F_ /*<<weak.ml:69:22>>*/ ;
    }
     /*<<weak.ml:68:7>>*/ return  /*<<weak.ml:68:7>>*/ caml_call1
             /*<<weak.ml:68:7>>*/ (Stdlib[1], cst_Weak_blit) /*<<weak.ml:69:40>>*/ ;
    /*<<weak.ml:69:40>>*/ }
   function fill(ar, ofs, len, x){
     /*<<weak.ml:72:2>>*/ if
     (0 <= ofs
      &&
       0 <= len
       &&
        ( /*<<weak.ml:72:33>>*/ length /*<<weak.ml:72:33>>*/ (ar) - len | 0)
        >= ofs){
     var _C_ = (ofs + len | 0) - 1 | 0;
     if(_C_ >= ofs){
      var i = ofs;
      for(;;){
        /*<<weak.ml:76:6>>*/  /*<<weak.ml:76:6>>*/ set
         /*<<weak.ml:76:6>>*/ (ar, i, x);
       var _D_ =  /*<<weak.ml:76:6>>*/ i + 1 | 0;
       if(_C_ === i) break;
       i = _D_;
      }
     }
     return 0;
    }
     /*<<weak.ml:73:7>>*/ throw  /*<<weak.ml:73:7>>*/ caml_maybe_attach_backtrace
            /*<<weak.ml:73:7>>*/ ([0, Stdlib[6], cst_Weak_fill], 1);
    /*<<weak.ml:78:5>>*/ }
   function Make(H){
    var
     emptybucket =
        /*<<weak.ml:105:20>>*/  /*<<weak.ml:105:20>>*/ create
         /*<<weak.ml:105:20>>*/ (0);
    function get_index(t, h){
      /*<<weak.ml:117:22>>*/ return caml_mod(h & Stdlib[19], t[1].length - 1) /*<<weak.ml:117:65>>*/ ;
     /*<<weak.ml:117:65>>*/ }
    var limit =  /*<<weak.ml:117:16>>*/ 7;
    function create$0(sz){
     var
      sz$0 = 7 <= sz ? sz : 7,
      sz$1 = Stdlib_Sys[13] < sz$0 ? Stdlib_Sys[13] : sz$0;
      /*<<weak.ml:125:4>>*/ return [0,
              /*<<weak.ml:126:14>>*/ caml_make_vect
               /*<<weak.ml:126:14>>*/ (sz$1, emptybucket),
              /*<<weak.ml:127:15>>*/ caml_make_vect
               /*<<weak.ml:127:15>>*/ (sz$1, [0]),
             limit,
             0,
             0] /*<<weak.ml:125:4>>*/ ;
     /*<<weak.ml:131:5>>*/ }
    function clear(t){
     var _A_ = t[1].length - 2 | 0, _z_ =  /*<<weak.ml:134:4>>*/ 0;
     if(_A_ >= 0){
      var i = _z_;
      for(;;){
        /*<<weak.ml:135:6>>*/ caml_check_bound(t[1], i)[1 + i] = emptybucket;
        /*<<weak.ml:136:6>>*/ caml_check_bound(t[2], i)[1 + i] = [0];
       var _B_ =  /*<<weak.ml:136:6>>*/ i + 1 | 0;
       if(_A_ === i) break;
       i = _B_;
      }
     }
     t[3] = limit;
     t[4] = 0;
     return 0;
     /*<<weak.ml:139:19>>*/ }
    function fold(f, t, init){
     var i = 0;
      /*<<weak.ml:149:4>>*/ return  /*<<weak.ml:149:4>>*/ caml_call3
              /*<<weak.ml:149:4>>*/ (Stdlib_Array[20],
              function(b, accu$1){
               var i$0 = i, accu = accu$1;
                /*<<weak.ml:144:6>>*/ for(;;){
                if
                 ( /*<<weak.ml:144:14>>*/ length /*<<weak.ml:144:14>>*/ (b)
                  <= i$0)
                  /*<<weak.ml:144:28>>*/ return accu /*<<weak.ml:144:28>>*/ ;
                var
                 match =
                    /*<<weak.ml:145:12>>*/  /*<<weak.ml:145:12>>*/ get
                     /*<<weak.ml:145:12>>*/ (b, i$0);
                if(match){
                 var
                  v = match[1],
                  accu$0 =
                     /*<<weak.ml:146:38>>*/  /*<<weak.ml:146:38>>*/ caml_call2
                      /*<<weak.ml:146:38>>*/ (f, v, accu),
                  i$1 = i$0 + 1 | 0;
                 i$0 = i$1;
                 accu = accu$0;
                }
                else{var i$2 = i$0 + 1 | 0; i$0 = i$2;}
               }
              },
              t[1],
              init) /*<<weak.ml:149:49>>*/ ;
     /*<<weak.ml:149:49>>*/ }
    function iter(f, t){
     var i = 0;
      /*<<weak.ml:159:15>>*/ return  /*<<weak.ml:159:15>>*/ caml_call2
              /*<<weak.ml:159:15>>*/ (Stdlib_Array[12],
              function(b){
               var i$0 = i;
                /*<<weak.ml:154:6>>*/ for(;;){
                if
                 ( /*<<weak.ml:154:14>>*/ length /*<<weak.ml:154:14>>*/ (b)
                  <= i$0)
                  /*<<weak.ml:154:28>>*/ return 0 /*<<weak.ml:154:28>>*/ ;
                var
                 match =
                    /*<<weak.ml:155:12>>*/  /*<<weak.ml:155:12>>*/ get
                     /*<<weak.ml:155:12>>*/ (b, i$0);
                if(match){
                 var v = match[1];
                  /*<<weak.ml:156:18>>*/  /*<<weak.ml:156:18>>*/ caml_call1
                   /*<<weak.ml:156:18>>*/ (f, v);
                 var i$1 = i$0 + 1 | 0;
                 i$0 = i$1;
                }
                else{var i$2 = i$0 + 1 | 0; i$0 = i$2;}
               }
              },
              t[1]) /*<<weak.ml:159:38>>*/ ;
     /*<<weak.ml:159:38>>*/ }
    function count_bucket(i, b, accu){
     var i$0 = i, accu$0 = accu;
      /*<<weak.ml:173:4>>*/ for(;;){
      if( /*<<weak.ml:173:12>>*/ length /*<<weak.ml:173:12>>*/ (b) <= i$0)
        /*<<weak.ml:173:26>>*/ return accu$0 /*<<weak.ml:173:26>>*/ ;
      var
       _y_ =
          /*<<weak.ml:174:37>>*/  /*<<weak.ml:174:37>>*/ check
            /*<<weak.ml:174:37>>*/ (b, i$0)
          ? 1
          : 0,
       accu$1 = accu$0 + _y_ | 0,
       i$1 = i$0 + 1 | 0;
      i$0 = i$1;
      accu$0 = accu$1;
     }
     /*<<weak.ml:174:62>>*/ }
    function count(t){
     var _v_ = 0;
      /*<<weak.ml:178:4>>*/ return  /*<<weak.ml:178:4>>*/ caml_call3
              /*<<weak.ml:178:4>>*/ (Stdlib_Array[20],
              function(_w_, _x_){
                /*<<?>>*/ return count_bucket(_v_, _w_, _x_);
              },
              t[1],
              0) /*<<weak.ml:178:47>>*/ ;
     /*<<weak.ml:178:47>>*/ }
    function add_aux(t, setter, d, h, index){
     var
      bucket$0 =
         /*<<weak.ml:238:17>>*/ caml_check_bound(t[1], index)[1 + index],
      hashes =
         /*<<weak.ml:239:17>>*/ caml_check_bound(t[2], index)[1 + index],
      sz =
         /*<<weak.ml:240:13>>*/  /*<<weak.ml:240:13>>*/ length
          /*<<weak.ml:240:13>>*/ (bucket$0),
      i$3 = 0;
      /*<<weak.ml:242:6>>*/ for(;;){
      if(sz <= i$3) break;
       /*<<weak.ml:260:18>>*/ if
       (!
         /*<<weak.ml:260:18>>*/ check /*<<weak.ml:260:18>>*/ (bucket$0, i$3)){
        /*<<weak.ml:263:8>>*/  /*<<weak.ml:263:8>>*/ caml_call3
         /*<<weak.ml:263:8>>*/ (setter, bucket$0, i$3, d);
        /*<<weak.ml:264:8>>*/ caml_check_bound(hashes, i$3)[1 + i$3] = h;
        /*<<weak.ml:264:8>>*/ return 0 /*<<weak.ml:264:8>>*/ ;
      }
      var i$5 =  /*<<weak.ml:260:38>>*/ i$3 + 1 | 0;
      i$3 = i$5;
     }
     var
      newsz =
         /*<<weak.ml:244:10>>*/  /*<<weak.ml:244:10>>*/ caml_call2
          /*<<weak.ml:244:10>>*/ (Stdlib_Int[10],
          ((3 * sz | 0) / 2 | 0) + 3 | 0,
          Stdlib_Sys[13] - 2 | 0);
     if(newsz <= sz)
       /*<<weak.ml:246:28>>*/  /*<<weak.ml:246:28>>*/ caml_call1
        /*<<weak.ml:246:28>>*/ (Stdlib[2], cst_Weak_Make_hash_bucket_cann);
     var
      newbucket$0 =
         /*<<weak.ml:247:24>>*/  /*<<weak.ml:247:24>>*/ create
          /*<<weak.ml:247:24>>*/ (newsz),
      newhashes =
         /*<<weak.ml:248:24>>*/  /*<<weak.ml:248:24>>*/ caml_make_vect
          /*<<weak.ml:248:24>>*/ (newsz, 0);
      /*<<weak.ml:249:8>>*/  /*<<weak.ml:249:8>>*/ blit
       /*<<weak.ml:249:8>>*/ (bucket$0, 0, newbucket$0, 0, sz);
      /*<<weak.ml:250:8>>*/  /*<<weak.ml:250:8>>*/ caml_call5
       /*<<weak.ml:250:8>>*/ (Stdlib_Array[9], hashes, 0, newhashes, 0, sz);
      /*<<weak.ml:251:8>>*/  /*<<weak.ml:251:8>>*/ caml_call3
       /*<<weak.ml:251:8>>*/ (setter, newbucket$0, sz, d);
      /*<<weak.ml:252:8>>*/ caml_check_bound(newhashes, sz)[1 + sz] = h;
      /*<<weak.ml:253:8>>*/ caml_check_bound(t[1], index)[1 + index] = newbucket$0;
      /*<<weak.ml:254:8>>*/ caml_check_bound(t[2], index)[1 + index] = newhashes;
     var _r_ = sz <= t[3] ? 1 : 0, _s_ = _r_ ? t[3] < newsz ? 1 : 0 : _r_;
     if(_s_){
      t[4] = t[4] + 1 | 0;
      var i$4 = 0;
      for(;;){
       var
        _h_ = t[5],
        bucket =  /*<<weak.ml:185:17>>*/ caml_check_bound(t[1], _h_)[1 + _h_],
        _i_ =  /*<<weak.ml:186:4>>*/ t[5],
        hbucket =  /*<<weak.ml:186:18>>*/ caml_check_bound(t[2], _i_)[1 + _i_],
        len =
           /*<<weak.ml:187:14>>*/  /*<<weak.ml:187:14>>*/ length
            /*<<weak.ml:187:14>>*/ (bucket),
        prev_len = (((len - 3 | 0) * 2 | 0) + 2 | 0) / 3 | 0,
        live =
           /*<<weak.ml:189:15>>*/  /*<<weak.ml:189:15>>*/ count_bucket
            /*<<weak.ml:189:15>>*/ (0, bucket, 0);
       if(live <= prev_len){
        var
         j$2 =
            /*<<weak.ml:201:14>>*/  /*<<weak.ml:201:14>>*/ length
             /*<<weak.ml:201:14>>*/ (bucket)
           - 1
           | 0,
         i$0 = 0,
         j = j$2;
         /*<<weak.ml:192:8>>*/ for(;;){
         if(prev_len > j) break;
          /*<<weak.ml:193:13>>*/ if
          ( /*<<weak.ml:193:13>>*/ check /*<<weak.ml:193:13>>*/ (bucket, i$0)){var i$1 = i$0 + 1 | 0; i$0 = i$1;}
         else if
          ( /*<<weak.ml:194:18>>*/ check /*<<weak.ml:194:18>>*/ (bucket, j)){
           /*<<weak.ml:195:12>>*/  /*<<weak.ml:195:12>>*/ blit
            /*<<weak.ml:195:12>>*/ (bucket, j, bucket, i$0, 1);
          var
           _j_ =  /*<<weak.ml:196:27>>*/ caml_check_bound(hbucket, j)[1 + j];
           /*<<weak.ml:196:12>>*/ caml_check_bound(hbucket, i$0)[1 + i$0] = _j_;
          var j$0 =  /*<<weak.ml:196:12>>*/ j - 1 | 0, i$2 = i$0 + 1 | 0;
          i$0 = i$2;
          j = j$0;
         }
         else{var j$1 =  /*<<weak.ml:198:19>>*/ j - 1 | 0; j = j$1;}
        }
        if(0 === prev_len){
         var _k_ = t[5];
          /*<<weak.ml:203:8>>*/ caml_check_bound(t[1], _k_)[1 + _k_] = emptybucket;
         var _l_ = t[5];
          /*<<weak.ml:204:8>>*/ caml_check_bound(t[2], _l_)[1 + _l_] = [0];
        }
        else{
         var
          newbucket =
             /*<<weak.ml:206:24>>*/  /*<<weak.ml:206:24>>*/ create
              /*<<weak.ml:206:24>>*/ (prev_len);
          /*<<weak.ml:207:8>>*/  /*<<weak.ml:207:8>>*/ blit
           /*<<weak.ml:207:8>>*/ (bucket, 0, newbucket, 0, prev_len);
         var _o_ = t[5];
          /*<<weak.ml:208:8>>*/ caml_check_bound(t[1], _o_)[1 + _o_] = newbucket;
         var
          _p_ =
             /*<<weak.ml:209:30>>*/  /*<<weak.ml:209:30>>*/ caml_call3
              /*<<weak.ml:209:30>>*/ (Stdlib_Array[6], hbucket, 0, prev_len),
          _q_ = t[5];
          /*<<weak.ml:209:8>>*/ caml_check_bound(t[2], _q_)[1 + _q_] = _p_;
        }
        var
         _m_ = t[3] < len ? 1 : 0,
         _n_ = _m_ ? prev_len <= t[3] ? 1 : 0 : _m_;
        if(_n_) t[4] = t[4] - 1 | 0;
       }
       t[5] = caml_mod(t[5] + 1 | 0, t[1].length - 1);
       var _u_ =  /*<<weak.ml:257:38>>*/ i$4 + 1 | 0;
       if(2 === i$4) break;
       i$4 = _u_;
      }
     }
     var _t_ = ((t[1].length - 1) / 2 | 0) < t[4] ? 1 : 0;
     if(! _t_) return _t_;
     var
      oldlen = t[1].length - 1,
      newlen =
         /*<<weak.ml:181:18>>*/  /*<<weak.ml:181:18>>*/ caml_call2
          /*<<weak.ml:181:18>>*/ (Stdlib_Int[10],
          ((3 * oldlen | 0) / 2 | 0) + 3 | 0,
          Stdlib_Sys[13]);
     if(oldlen < newlen){
      var
       newt =
          /*<<weak.ml:220:17>>*/  /*<<weak.ml:220:17>>*/ create$0
           /*<<weak.ml:220:17>>*/ (newlen),
       i = 0;
       /*<<weak.ml:169:16>>*/  /*<<weak.ml:169:16>>*/ caml_call2
        /*<<weak.ml:169:16>>*/ (Stdlib_Array[13],
        function(j, ob){
         var oi = i;
          /*<<weak.ml:164:6>>*/ for(;;){
          if( /*<<weak.ml:164:14>>*/ length /*<<weak.ml:164:14>>*/ (ob) <= oi)
            /*<<weak.ml:164:28>>*/ return 0 /*<<weak.ml:164:28>>*/ ;
          if( /*<<weak.ml:165:12>>*/ check /*<<weak.ml:165:12>>*/ (ob, oi)){
           var oh =  /*<<weak.ml:166:20>>*/ caml_check_bound(t[2], j)[1 + j];
           let oi$0 = oi;
           var
            setter =
              function(nb, ni, param){
                /*<<weak.ml:222:29>>*/ return  /*<<weak.ml:222:29>>*/ blit
                        /*<<weak.ml:222:29>>*/ (ob, oi$0, nb, ni, 1) /*<<weak.ml:222:47>>*/ ;
               /*<<weak.ml:222:47>>*/ },
            h =  /*<<weak.ml:223:16>>*/ caml_check_bound(oh, oi)[1 + oi];
            /*<<weak.ml:224:35>>*/  /*<<weak.ml:224:35>>*/ add_aux
             /*<<weak.ml:224:35>>*/ (newt,
             setter,
             0,
             h,
              /*<<weak.ml:224:35>>*/ get_index
               /*<<weak.ml:224:35>>*/ (newt, h));
           var i$0 = oi + 1 | 0;
           oi = i$0;
          }
          else{var i$1 = oi + 1 | 0; oi = i$1;}
         }
        },
        t[1]);
      t[1] = newt[1];
      t[2] = newt[2];
      t[3] = newt[3];
      t[4] = newt[4];
      t[5] = caml_mod(t[5], newt[1].length - 1);
      return 0;
     }
     t[3] = Stdlib[19];
     t[4] = 0;
     return 0;
     /*<<weak.ml:267:10>>*/ }
    function add(t, d){
     var
      h =
         /*<<weak.ml:271:12>>*/  /*<<weak.ml:271:12>>*/ caml_call1
          /*<<weak.ml:271:12>>*/ (H[2], d);
      /*<<weak.ml:272:29>>*/ return  /*<<weak.ml:272:29>>*/ add_aux
              /*<<weak.ml:272:29>>*/ (t,
              set,
              [0, d],
              h,
               /*<<weak.ml:272:29>>*/ get_index /*<<weak.ml:272:29>>*/ (t, h)) /*<<weak.ml:272:44>>*/ ;
     /*<<weak.ml:272:44>>*/ }
    function find_aux(t, d, found, notfound){
     var
      h =
         /*<<weak.ml:278:12>>*/  /*<<weak.ml:278:12>>*/ caml_call1
          /*<<weak.ml:278:12>>*/ (H[2], d),
      index =
         /*<<weak.ml:279:16>>*/  /*<<weak.ml:279:16>>*/ get_index
          /*<<weak.ml:279:16>>*/ (t, h),
      bucket =
         /*<<weak.ml:280:17>>*/ caml_check_bound(t[1], index)[1 + index],
      hashes =
         /*<<weak.ml:281:17>>*/ caml_check_bound(t[2], index)[1 + index],
      sz =
         /*<<weak.ml:282:13>>*/  /*<<weak.ml:282:13>>*/ length
          /*<<weak.ml:282:13>>*/ (bucket),
      i = 0;
      /*<<weak.ml:284:6>>*/ for(;;){
      if(sz <= i)
        /*<<weak.ml:279:16>>*/ return  /*<<weak.ml:279:16>>*/ caml_call2
                /*<<weak.ml:279:16>>*/ (notfound, h, index) /*<<weak.ml:291:10>>*/ ;
      if(h === caml_check_bound(hashes, i)[1 + i]){
       var
        opt =
           /*<<weak.ml:286:14>>*/  /*<<weak.ml:286:14>>*/ get
            /*<<weak.ml:286:14>>*/ (bucket, i);
       if(opt){
        var v = opt[1];
         /*<<weak.ml:287:29>>*/ if
         ( /*<<weak.ml:287:29>>*/ caml_call2
            /*<<weak.ml:287:29>>*/ (H[1], v, d))
          /*<<weak.ml:287:44>>*/ return  /*<<weak.ml:287:44>>*/ caml_call4
                  /*<<weak.ml:287:44>>*/ (found, bucket, i, opt, v) /*<<weak.ml:291:10>>*/ ;
       }
       var i$0 =  /*<<weak.ml:288:15>>*/ i + 1 | 0;
       i = i$0;
      }
      else{var i$1 =  /*<<weak.ml:289:15>>*/ i + 1 | 0; i = i$1;}
     }
     /*<<weak.ml:291:10>>*/ }
    function find_opt(t, d){
      /*<<weak.ml:293:21>>*/ return  /*<<weak.ml:294:34>>*/ find_aux
              /*<<weak.ml:294:34>>*/ (t,
              d,
              function(b, i, o, v){
                /*<<weak.ml:293:54>>*/ return o /*<<weak.ml:293:54>>*/ ;
               /*<<weak.ml:293:55>>*/ },
              function(h, i){
                /*<<weak.ml:294:48>>*/ return 0 /*<<weak.ml:294:48>>*/ ;
               /*<<weak.ml:294:52>>*/ }) /*<<weak.ml:294:53>>*/ ;
     /*<<weak.ml:294:53>>*/ }
    function merge(t, d){
      /*<<weak.ml:296:21>>*/ return  /*<<weak.ml:297:34>>*/ find_aux
              /*<<weak.ml:297:34>>*/ (t,
              d,
              function(b, i, o, v){
                /*<<weak.ml:296:54>>*/ return v /*<<weak.ml:296:54>>*/ ;
               /*<<weak.ml:296:55>>*/ },
              function(h, i){
                /*<<weak.ml:298:40>>*/  /*<<weak.ml:298:40>>*/ add_aux
                 /*<<weak.ml:298:40>>*/ (t, set, [0, d], h, i);
                /*<<weak.ml:296:21>>*/ return d /*<<weak.ml:296:21>>*/ ;
               /*<<weak.ml:298:69>>*/ }) /*<<weak.ml:298:70>>*/ ;
     /*<<weak.ml:298:70>>*/ }
    function find(t, d){
      /*<<weak.ml:300:21>>*/ return  /*<<weak.ml:301:34>>*/ find_aux
              /*<<weak.ml:301:34>>*/ (t,
              d,
              function(b, i, o, v){
                /*<<weak.ml:300:54>>*/ return v /*<<weak.ml:300:54>>*/ ;
               /*<<weak.ml:300:55>>*/ },
              function(h, i){
                /*<<weak.ml:301:48>>*/ throw  /*<<weak.ml:301:48>>*/ caml_maybe_attach_backtrace
                       /*<<weak.ml:301:48>>*/ (Stdlib[8], 1);
               /*<<weak.ml:301:63>>*/ }) /*<<weak.ml:301:64>>*/ ;
     /*<<weak.ml:301:64>>*/ }
    function remove(t, d){
      /*<<weak.ml:303:21>>*/ return  /*<<weak.ml:304:34>>*/ find_aux
              /*<<weak.ml:304:34>>*/ (t,
              d,
              function(b, i, o, v){
                /*<<weak.ml:303:54>>*/ return  /*<<weak.ml:303:54>>*/ set
                        /*<<weak.ml:303:54>>*/ (b, i, 0) /*<<weak.ml:303:66>>*/ ;
               /*<<weak.ml:303:66>>*/ },
              function(h, i){
                /*<<weak.ml:304:48>>*/ return 0 /*<<weak.ml:304:48>>*/ ;
               /*<<weak.ml:304:50>>*/ }) /*<<weak.ml:304:51>>*/ ;
     /*<<weak.ml:304:51>>*/ }
    function mem(t, d){
      /*<<weak.ml:306:21>>*/ return  /*<<weak.ml:307:34>>*/ find_aux
              /*<<weak.ml:307:34>>*/ (t,
              d,
              function(b, i, o, v){
                /*<<weak.ml:306:54>>*/ return 1 /*<<weak.ml:306:54>>*/ ;
               /*<<weak.ml:306:58>>*/ },
              function(h, i){
                /*<<weak.ml:307:48>>*/ return 0 /*<<weak.ml:307:48>>*/ ;
               /*<<weak.ml:307:53>>*/ }) /*<<weak.ml:307:54>>*/ ;
     /*<<weak.ml:307:54>>*/ }
    function find_all(t, d){
     var
      h =
         /*<<weak.ml:310:12>>*/  /*<<weak.ml:310:12>>*/ caml_call1
          /*<<weak.ml:310:12>>*/ (H[2], d),
      index =
         /*<<weak.ml:311:16>>*/  /*<<weak.ml:311:16>>*/ get_index
          /*<<weak.ml:311:16>>*/ (t, h),
      bucket =
         /*<<weak.ml:312:17>>*/ caml_check_bound(t[1], index)[1 + index],
      hashes =
         /*<<weak.ml:313:17>>*/ caml_check_bound(t[2], index)[1 + index],
      sz =
         /*<<weak.ml:314:13>>*/  /*<<weak.ml:314:13>>*/ length
          /*<<weak.ml:314:13>>*/ (bucket),
      i = 0,
      accu = 0;
      /*<<weak.ml:316:6>>*/ for(;;){
      if(sz <= i)  /*<<weak.ml:316:22>>*/ return accu /*<<weak.ml:316:22>>*/ ;
      if(h === caml_check_bound(hashes, i)[1 + i]){
       var
        match =
           /*<<weak.ml:318:14>>*/  /*<<weak.ml:318:14>>*/ get
            /*<<weak.ml:318:14>>*/ (bucket, i);
       if(match){
        var v = match[1];
         /*<<weak.ml:319:22>>*/ if
         ( /*<<weak.ml:319:22>>*/ caml_call2
            /*<<weak.ml:319:22>>*/ (H[1], v, d)){
         var
          accu$0 =  /*<<weak.ml:319:50>>*/ [0, v, accu],
          i$0 =  /*<<weak.ml:319:50>>*/ i + 1 | 0;
         i = i$0;
         accu = accu$0;
         continue;
        }
       }
       var i$1 = i + 1 | 0;
       i = i$1;
      }
      else{var i$2 = i + 1 | 0; i = i$2;}
     }
     /*<<weak.ml:323:13>>*/ }
    function stats(t){
     var
      len = t[1].length - 1,
      lens =
         /*<<weak.ml:327:15>>*/  /*<<weak.ml:327:15>>*/ caml_call2
          /*<<weak.ml:327:15>>*/ (Stdlib_Array[14], length, t[1]);
      /*<<weak.ml:328:4>>*/  /*<<weak.ml:328:4>>*/ caml_call2
       /*<<weak.ml:328:4>>*/ (Stdlib_Array[35],
       runtime.caml_int_compare,
       lens);
     var
      totlen =
         /*<<weak.ml:329:17>>*/  /*<<weak.ml:329:17>>*/ caml_call3
          /*<<weak.ml:329:17>>*/ (Stdlib_Array[18],
          function(_g_, _f_){ /*<<?>>*/ return _g_ + _f_ | 0;},
          0,
          lens),
      _a_ =  /*<<weak.ml:329:17>>*/ len - 1 | 0,
      _c_ = len / 2 | 0,
      _b_ =  /*<<weak.ml:330:51>>*/ caml_check_bound(lens, _a_)[1 + _a_],
      _d_ =  /*<<weak.ml:330:37>>*/ caml_check_bound(lens, _c_)[1 + _c_],
      _e_ =  /*<<weak.ml:330:27>>*/ caml_check_bound(lens, 0)[1];
      /*<<weak.ml:330:4>>*/ return [0,
             len,
              /*<<weak.ml:330:10>>*/ count /*<<weak.ml:330:10>>*/ (t),
             totlen,
             _e_,
             _d_,
             _b_] /*<<weak.ml:330:4>>*/ ;
     /*<<weak.ml:330:64>>*/ }
     /*<<weak.ml:101:66>>*/ return [0,
            create$0,
            clear,
            merge,
            add,
            remove,
            find,
            find_opt,
            find_all,
            mem,
            iter,
            fold,
            count,
            stats] /*<<weak.ml:101:66>>*/ ;
   }
   var
    Stdlib_Weak =
      [0, create, length, set, get, get_copy, check, fill, blit, Make];
   runtime.caml_register_global(13, Stdlib_Weak, "Stdlib__Weak");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Format
//# unitInfo: Requires: CamlinternalFormat, Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Domain, Stdlib__Int, Stdlib__List, Stdlib__Queue, Stdlib__Seq, Stdlib__Stack, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst$16 =  /*<<?>>*/ "",
    cst$15 =  /*<<?>>*/ ">",
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length =  /*<<?>>*/ runtime.caml_ml_string_length;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    cst$14 = ".",
    cst$11 = cst$15,
    cst$12 = "<\/",
    cst$13 = cst$16,
    cst$8 = cst$15,
    cst$9 = "<",
    cst$10 = cst$16,
    cst$7 = "\n",
    cst$3 = cst$16,
    cst$4 = cst$16,
    cst$5 = cst$16,
    cst$6 = cst$16,
    cst = cst$16,
    cst$0 = cst$16,
    cst$1 = cst$16,
    cst$2 = cst$16,
    _a_ = [0, cst$16, 0, cst$16],
    Stdlib_Queue = global_data.Stdlib__Queue,
    CamlinternalFormat = global_data.CamlinternalFormat,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Domain = global_data.Stdlib__Domain,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Stack = global_data.Stdlib__Stack,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Bytes = global_data.Stdlib__Bytes;
   function id(x){
     /*<<format.ml:23:11>>*/ return x /*<<format.ml:23:11>>*/ ;
    /*<<format.ml:23:12>>*/ }
   var
    zero = 0,
    unknown = -1,
    String_tag =
       /*<<format.ml:91:13>>*/ [248,
       "Stdlib.Format.String_tag",
       runtime.caml_fresh_oo_id(0)];
   function pp_enqueue(state, token){
     /*<<format.ml:219:2>>*/ state[13] = state[13] + token[3] | 0;
    return caml_call2(Stdlib_Queue[3], token, state[28]) /*<<format.ml:220:32>>*/ ;
    /*<<format.ml:220:32>>*/ }
   var
    pp_infinity =  /*<<format.ml:223:19>>*/ 1000000010,
    _b_ = [0, cst$16],
    _c_ = [1, "margin <= max_indent"],
    _d_ = [1, "margin >= pp_infinity"],
    _e_ = [0, 0],
    _f_ = [1, "max_indent < 2"],
    cst_Format_pp_set_geometry = "Format.pp_set_geometry: ";
   function pp_output_string(state, s){
     /*<<format.ml:251:31>>*/ return caml_call3
            (state[17], s, 0, caml_ml_string_length(s)) /*<<format.ml:251:72>>*/ ;
    /*<<format.ml:251:72>>*/ }
   function pp_output_newline(state){
     /*<<format.ml:252:30>>*/ return  /*<<format.ml:252:30>>*/ caml_call1
             /*<<format.ml:252:30>>*/ (state[19], 0) /*<<format.ml:252:53>>*/ ;
    /*<<format.ml:252:53>>*/ }
   function format_pp_text(state, size, text){
     /*<<format.ml:258:2>>*/ state[9] = state[9] - size | 0;
     /*<<format.ml:259:2>>*/  /*<<format.ml:259:2>>*/ pp_output_string
      /*<<format.ml:259:2>>*/ (state, text);
    state[11] = 0;
    /*<<format.ml:260:31>>*/ }
   function format_string(state, s){
    var _a__ =  /*<<format.ml:264:5>>*/ s !== cst$16 ? 1 : 0;
     /*<<format.ml:264:5>>*/ return _a__
            ?  /*<<format.ml:264:18>>*/ format_pp_text
               /*<<format.ml:264:18>>*/ (state, caml_ml_string_length(s), s)
            : _a__ /*<<format.ml:264:58>>*/ ;
    /*<<format.ml:264:58>>*/ }
   function break_new_line(state, param, width){
    var after = param[3], offset = param[2], before = param[1];
     /*<<format.ml:268:2>>*/  /*<<format.ml:268:2>>*/ format_string
      /*<<format.ml:268:2>>*/ (state, before);
     /*<<format.ml:269:2>>*/  /*<<format.ml:269:2>>*/ pp_output_newline
      /*<<format.ml:269:2>>*/ (state);
    state[11] = 1;
    var
     indent = (state[6] - width | 0) + offset | 0,
     real_indent =
        /*<<format.ml:273:20>>*/  /*<<format.ml:273:20>>*/ caml_call2
         /*<<format.ml:273:20>>*/ (Stdlib_Int[10], state[8], indent);
    state[10] = real_indent;
    state[9] = state[6] - state[10] | 0;
    var n = state[10];
     /*<<format.ml:254:31>>*/  /*<<format.ml:254:31>>*/ caml_call1
      /*<<format.ml:254:31>>*/ (state[21], n);
     /*<<format.ml:276:2>>*/ return  /*<<format.ml:276:2>>*/ format_string
             /*<<format.ml:276:2>>*/ (state, after) /*<<format.ml:277:27>>*/ ;
    /*<<format.ml:277:27>>*/ }
   function break_same_line(state, param){
    var after = param[3], width = param[2], before = param[1];
     /*<<format.ml:285:2>>*/  /*<<format.ml:285:2>>*/ format_string
      /*<<format.ml:285:2>>*/ (state, before);
    state[9] = state[9] - width | 0;
     /*<<format.ml:253:31>>*/  /*<<format.ml:253:31>>*/ caml_call1
      /*<<format.ml:253:31>>*/ (state[20], width);
     /*<<format.ml:287:2>>*/ return  /*<<format.ml:287:2>>*/ format_string
             /*<<format.ml:287:2>>*/ (state, after) /*<<format.ml:288:27>>*/ ;
    /*<<format.ml:288:27>>*/ }
   function format_pp_token(state, size$0, param){
     /*<<format.ml:320:20>>*/ if(typeof param === "number")
     switch(param){
       case 0:
        var
         match$3 =
            /*<<format.ml:348:16>>*/  /*<<format.ml:348:16>>*/ caml_call1
             /*<<format.ml:348:16>>*/ (Stdlib_Stack[8], state[3]);
        if(! match$3)
          /*<<format.ml:349:14>>*/ return /*<<format.ml:349:14>>*/ ;
        var
         tabs = match$3[1][1],
         add_tab =
            /*<<format.ml:351:6>>*/ function(n, ls){
             /*<<format.ml:351:22>>*/ if(! ls)
              /*<<format.ml:352:16>>*/ return [0, n, 0] /*<<format.ml:352:16>>*/ ;
            var l = ls[2], x = ls[1];
             /*<<format.ml:353:29>>*/ return  /*<<format.ml:353:29>>*/ runtime.caml_lessthan
                      /*<<format.ml:353:29>>*/ (n, x)
                    ? [0, n, ls]
                    : [0,
                      x,
                       /*<<format.ml:353:58>>*/ add_tab
                        /*<<format.ml:353:58>>*/ (n, l)] /*<<format.ml:353:69>>*/ ;
            /*<<format.ml:353:69>>*/ };
        tabs[1] =
          /*<<format.ml:354:14>>*/ add_tab
           /*<<format.ml:354:14>>*/ (state[6] - state[9] | 0, tabs[1]);
        return;
       case 1:
         /*<<format.ml:339:4>>*/  /*<<format.ml:339:4>>*/ caml_call1
          /*<<format.ml:339:4>>*/ (Stdlib_Stack[5], state[2]);
         /*<<format.ml:339:4>>*/ return /*<<format.ml:339:4>>*/ ;
       case 2:
         /*<<format.ml:345:4>>*/  /*<<format.ml:345:4>>*/ caml_call1
          /*<<format.ml:345:4>>*/ (Stdlib_Stack[5], state[3]);
         /*<<format.ml:345:4>>*/ return /*<<format.ml:345:4>>*/ ;
       case 3:
        var
         match$4 =
            /*<<format.ml:378:16>>*/  /*<<format.ml:378:16>>*/ caml_call1
             /*<<format.ml:378:16>>*/ (Stdlib_Stack[8], state[2]);
        if(! match$4)
          /*<<format.ml:379:14>>*/ return  /*<<format.ml:379:14>>*/ pp_output_newline
                  /*<<format.ml:379:14>>*/ (state) /*<<format.ml:424:8>>*/ ;
        var width$0 = match$4[1][2];
         /*<<format.ml:281:29>>*/ return  /*<<format.ml:281:29>>*/ break_new_line
                 /*<<format.ml:281:29>>*/ (state, _a_, width$0) /*<<format.ml:424:8>>*/ ;
       case 4:
        var _a8_ = state[10] !== (state[6] - state[9] | 0) ? 1 : 0;
        if(! _a8_) return _a8_;
        var
         match$1 =
            /*<<format.ml:306:8>>*/  /*<<format.ml:306:8>>*/ caml_call1
             /*<<format.ml:306:8>>*/ (Stdlib_Queue[6], state[28]);
        if(! match$1)
          /*<<format.ml:307:12>>*/ return /*<<format.ml:307:12>>*/ ;
        var match$2 = match$1[1], size = match$2[1], length = match$2[3];
        state[12] = state[12] - length | 0;
        state[9] = state[9] + size | 0;
        return;
       default:
        var
         match$5 =
            /*<<format.ml:419:17>>*/  /*<<format.ml:419:17>>*/ caml_call1
             /*<<format.ml:419:17>>*/ (Stdlib_Stack[5], state[5]);
        if(! match$5)
          /*<<format.ml:420:15>>*/ return /*<<format.ml:420:15>>*/ ;
        var
         tag_name = match$5[1],
         marker =
            /*<<format.ml:422:20>>*/  /*<<format.ml:422:20>>*/ caml_call1
             /*<<format.ml:422:20>>*/ (state[25], tag_name);
         /*<<format.ml:423:7>>*/ return  /*<<format.ml:423:7>>*/ pp_output_string
                 /*<<format.ml:423:7>>*/ (state, marker) /*<<format.ml:424:8>>*/ ;
     }
    switch(param[0]){
      case 0:
       var s = param[1];
        /*<<format.ml:323:4>>*/ return  /*<<format.ml:323:4>>*/ format_pp_text
                /*<<format.ml:323:4>>*/ (state, size$0, s) /*<<format.ml:424:8>>*/ ;
      case 1:
       var
        breaks = param[2],
        fits = param[1],
        off =  /*<<format.ml:388:4>>*/ breaks[2],
        before = breaks[1],
        match$6 =
           /*<<format.ml:389:16>>*/  /*<<format.ml:389:16>>*/ caml_call1
            /*<<format.ml:389:16>>*/ (Stdlib_Stack[8], state[2]);
       if(! match$6)
         /*<<format.ml:390:14>>*/ return /*<<format.ml:390:14>>*/ ;
       var
        match$7 = match$6[1],
        width$1 = match$7[2],
        box_type$0 = match$7[1];
        /*<<format.ml:392:6>>*/ switch(box_type$0){
         case 0:
           /*<<format.ml:409:19>>*/ return  /*<<format.ml:409:19>>*/ break_same_line
                   /*<<format.ml:409:19>>*/ (state, fits) /*<<format.ml:424:8>>*/ ;
         case 1:
           /*<<format.ml:408:19>>*/ return  /*<<format.ml:408:19>>*/ break_new_line
                   /*<<format.ml:408:19>>*/ (state, breaks, width$1) /*<<format.ml:424:8>>*/ ;
         case 2:
           /*<<format.ml:406:20>>*/ return  /*<<format.ml:406:20>>*/ break_new_line
                   /*<<format.ml:406:20>>*/ (state, breaks, width$1) /*<<format.ml:424:8>>*/ ;
         case 3:
          return state[9] < (size$0 + caml_ml_string_length(before) | 0)
                  ?  /*<<format.ml:395:13>>*/ break_new_line
                     /*<<format.ml:395:13>>*/ (state, breaks, width$1)
                  :  /*<<format.ml:396:13>>*/ break_same_line
                     /*<<format.ml:396:13>>*/ (state, fits) /*<<format.ml:424:8>>*/ ;
         case 4:
          return state[11]
                  ?  /*<<format.ml:399:37>>*/ break_same_line
                     /*<<format.ml:399:37>>*/ (state, fits)
                  : state
                     [9]
                    < (size$0 + caml_ml_string_length(before) | 0)
                    ?  /*<<format.ml:401:15>>*/ break_new_line
                       /*<<format.ml:401:15>>*/ (state, breaks, width$1)
                    : ((state
                       [6]
                      - width$1
                      | 0)
                      + off
                      | 0)
                      < state[10]
                      ?  /*<<format.ml:404:13>>*/ break_new_line
                         /*<<format.ml:404:13>>*/ (state, breaks, width$1)
                      :  /*<<format.ml:405:13>>*/ break_same_line
                         /*<<format.ml:405:13>>*/ (state, fits) /*<<format.ml:424:8>>*/ ;
         default:
           /*<<format.ml:407:19>>*/ return  /*<<format.ml:407:19>>*/ break_same_line
                   /*<<format.ml:407:19>>*/ (state, fits) /*<<format.ml:424:8>>*/ ;
       }
      case 2:
       var
        off$0 = param[2],
        n = param[1],
        insertion_point = state[6] - state[9] | 0,
        match$8 =
           /*<<format.ml:359:16>>*/  /*<<format.ml:359:16>>*/ caml_call1
            /*<<format.ml:359:16>>*/ (Stdlib_Stack[8], state[3]);
       if(! match$8)
         /*<<format.ml:360:14>>*/ return /*<<format.ml:360:14>>*/ ;
       var
        tabs$0 = match$8[1][1],
        match$9 =  /*<<format.ml:362:6>>*/ tabs$0[1];
       if(match$9){
        var first = match$9[1], param$0 = tabs$0[1];
         /*<<format.ml:366:25>>*/ for(;;){
         if(param$0){
          var tail = param$0[2], head = param$0[1];
          if(insertion_point > head){param$0 = tail; continue;}
          var _a9_ = head;
         }
         else
          var _a9_ = first;
         var tab = _a9_;
         break;
        }
       }
       else
        var tab = insertion_point;
       var offset = tab - insertion_point | 0;
        /*<<format.ml:372:6>>*/ return 0 <= offset
               ?  /*<<format.ml:373:33>>*/ break_same_line
                  /*<<format.ml:373:33>>*/ (state,
                  [0, cst$0, offset + n | 0, cst])
               :  /*<<format.ml:374:32>>*/ break_new_line
                  /*<<format.ml:374:32>>*/ (state,
                  [0, cst$2, tab + off$0 | 0, cst$1],
                  state[6]) /*<<format.ml:424:8>>*/ ;
      case 3:
       var
        ty = param[2],
        off$1 = param[1],
        insertion_point$0 = state[6] - state[9] | 0;
       if(state[8] < insertion_point$0){
        var
         match =
            /*<<format.ml:295:8>>*/  /*<<format.ml:295:8>>*/ caml_call1
             /*<<format.ml:295:8>>*/ (Stdlib_Stack[8], state[2]);
        if(match){
         var match$0 = match[1], width = match$0[2], box_type = match$0[1];
         if(state[9] < width && 3 >= box_type - 1 >>> 0)
           /*<<format.ml:281:29>>*/  /*<<format.ml:281:29>>*/ break_new_line
            /*<<format.ml:281:29>>*/ (state, _a_, width);
        }
        else
          /*<<format.ml:296:12>>*/  /*<<format.ml:296:12>>*/ pp_output_newline
           /*<<format.ml:296:12>>*/ (state);
       }
       var
        width$2 = state[9] - off$1 | 0,
        box_type$1 =
           /*<<format.ml:331:4>>*/ 1 === ty ? 1 : state[9] < size$0 ? ty : 5;
        /*<<format.ml:336:4>>*/ return  /*<<format.ml:336:4>>*/ caml_call2
                /*<<format.ml:336:4>>*/ (Stdlib_Stack[3],
                [0, box_type$1, width$2],
                state[2]) /*<<format.ml:424:8>>*/ ;
      case 4:
       var tbox = param[1];
        /*<<format.ml:342:4>>*/ return  /*<<format.ml:342:4>>*/ caml_call2
                /*<<format.ml:342:4>>*/ (Stdlib_Stack[3], tbox, state[3]) /*<<format.ml:424:8>>*/ ;
      default:
       var
        tag_name$0 = param[1],
        marker$0 =
           /*<<format.ml:414:18>>*/  /*<<format.ml:414:18>>*/ caml_call1
            /*<<format.ml:414:18>>*/ (state[24], tag_name$0);
        /*<<format.ml:415:5>>*/  /*<<format.ml:415:5>>*/ pp_output_string
         /*<<format.ml:415:5>>*/ (state, marker$0);
       return caml_call2(Stdlib_Stack[3], tag_name$0, state[5]) /*<<format.ml:424:8>>*/ ;
    }
    /*<<format.ml:424:8>>*/ }
   function advance_left(state){
     /*<<format.ml:431:2>>*/ for(;;){
     var
      match =
         /*<<format.ml:431:8>>*/  /*<<format.ml:431:8>>*/ caml_call1
          /*<<format.ml:431:8>>*/ (Stdlib_Queue[9], state[28]);
     if(! match)  /*<<format.ml:432:12>>*/ return 0 /*<<format.ml:432:12>>*/ ;
     var
      match$0 = match[1],
      size = match$0[1],
      length = match$0[3],
      token = match$0[2],
      pending_count = state[13] - state[12] | 0,
      _a6_ = 0 <= size ? 1 : 0,
      _a7_ =
         /*<<format.ml:435:7>>*/ _a6_ || (state[9] <= pending_count ? 1 : 0);
     if(! _a7_)  /*<<format.ml:435:7>>*/ return _a7_ /*<<format.ml:435:7>>*/ ;
      /*<<format.ml:436:6>>*/  /*<<format.ml:436:6>>*/ caml_call1
       /*<<format.ml:436:6>>*/ (Stdlib_Queue[5], state[28]);
     var size$0 =  /*<<format.ml:437:20>>*/ 0 <= size ? size : pp_infinity;
      /*<<format.ml:438:6>>*/  /*<<format.ml:438:6>>*/ format_pp_token
       /*<<format.ml:438:6>>*/ (state, size$0, token);
     state[12] = length + state[12] | 0;
    }
    /*<<format.ml:441:7>>*/ }
   function enqueue_advance(state, tok){
     /*<<format.ml:445:32>>*/  /*<<format.ml:445:32>>*/ pp_enqueue
      /*<<format.ml:445:32>>*/ (state, tok);
     /*<<format.ml:445:32>>*/ return  /*<<format.ml:445:32>>*/ advance_left
             /*<<format.ml:445:32>>*/ (state) /*<<format.ml:445:72>>*/ ;
    /*<<format.ml:445:72>>*/ }
   function enqueue_string_as(state, size, s){
     /*<<format.ml:450:2>>*/ return  /*<<format.ml:450:24>>*/ enqueue_advance
             /*<<format.ml:450:24>>*/ (state, [0, size, [0, s], size]) /*<<format.ml:450:78>>*/ ;
    /*<<format.ml:450:78>>*/ }
   function initialize_scan_stack(stack){
     /*<<format.ml:462:2>>*/  /*<<format.ml:462:2>>*/ caml_call1
      /*<<format.ml:462:2>>*/ (Stdlib_Stack[9], stack);
    var queue_elem =  /*<<format.ml:463:19>>*/ [0, unknown, _b_, 0];
     /*<<format.ml:464:2>>*/ return  /*<<format.ml:464:2>>*/ caml_call2
             /*<<format.ml:464:2>>*/ (Stdlib_Stack[3],
             [0, -1, queue_elem],
             stack) /*<<format.ml:464:50>>*/ ;
    /*<<format.ml:464:50>>*/ }
   function set_size(state, ty){
    var
     match =
        /*<<format.ml:476:8>>*/  /*<<format.ml:476:8>>*/ caml_call1
         /*<<format.ml:476:8>>*/ (Stdlib_Stack[8], state[1]);
    if(! match)  /*<<format.ml:477:12>>*/ return /*<<format.ml:477:12>>*/ ;
    var
     match$0 = match[1],
     queue_elem = match$0[2],
     left_total = match$0[1],
     size =  /*<<format.ml:479:4>>*/ queue_elem[1];
    if(left_total < state[12])
      /*<<format.ml:461:26>>*/ return  /*<<format.ml:461:26>>*/ initialize_scan_stack
              /*<<format.ml:461:26>>*/ (state[1]) /*<<format.ml:497:10>>*/ ;
    var _a5_ = queue_elem[2];
    if(typeof _a5_ !== "number")
     switch(_a5_[0]){
       case 3:
        if(1 - ty){
         var x$0 = state[13] + size | 0;
         queue_elem[1] = x$0;
          /*<<format.ml:493:10>>*/  /*<<format.ml:493:10>>*/ caml_call1
           /*<<format.ml:493:10>>*/ (Stdlib_Stack[5], state[1]);
        }
         /*<<format.ml:493:10>>*/ return /*<<format.ml:493:10>>*/ ;
       case 1:
       case 2:
        if(ty){
         var x = state[13] + size | 0;
         queue_elem[1] = x;
          /*<<format.ml:488:10>>*/  /*<<format.ml:488:10>>*/ caml_call1
           /*<<format.ml:488:10>>*/ (Stdlib_Stack[5], state[1]);
        }
         /*<<format.ml:488:10>>*/ return /*<<format.ml:488:10>>*/ ;
     }
    /*<<format.ml:497:10>>*/ }
   function scan_push(state, b, token){
     /*<<format.ml:503:2>>*/  /*<<format.ml:503:2>>*/ pp_enqueue
      /*<<format.ml:503:2>>*/ (state, token);
    if(b)
      /*<<format.ml:504:12>>*/  /*<<format.ml:504:12>>*/ set_size
       /*<<format.ml:504:12>>*/ (state, 1);
    var elem =  /*<<format.ml:505:13>>*/ [0, state[13], token];
     /*<<format.ml:506:2>>*/ return  /*<<format.ml:506:2>>*/ caml_call2
             /*<<format.ml:506:2>>*/ (Stdlib_Stack[3], elem, state[1]) /*<<format.ml:506:37>>*/ ;
    /*<<format.ml:506:37>>*/ }
   function pp_open_box_gen(state, indent, br_ty){
     /*<<format.ml:513:2>>*/ state[14] = state[14] + 1 | 0;
    if(state[14] < state[15]){
     var
      size = - state[13] | 0,
      elem =  /*<<format.ml:516:15>>*/ [0, size, [3, indent, br_ty], 0];
      /*<<format.ml:517:4>>*/ return  /*<<format.ml:517:4>>*/ scan_push
              /*<<format.ml:517:4>>*/ (state, 0, elem) /*<<format.ml:519:45>>*/ ;
    }
    var _a4_ = state[14] === state[15] ? 1 : 0;
    if(! _a4_) return _a4_;
    var s = state[16], x = caml_ml_string_length(s);
     /*<<format.ml:454:2>>*/ return  /*<<format.ml:454:2>>*/ enqueue_string_as
             /*<<format.ml:454:2>>*/ (state, x, s) /*<<format.ml:519:45>>*/ ;
    /*<<format.ml:519:45>>*/ }
   function pp_close_box(state, param){
    var _a2_ = 1 < state[14] ? 1 : 0;
    if(_a2_){
     if(state[14] < state[15]){
       /*<<format.ml:531:6>>*/  /*<<format.ml:531:6>>*/ pp_enqueue
        /*<<format.ml:531:6>>*/ (state, [0, zero, 1, 0]);
       /*<<format.ml:532:6>>*/  /*<<format.ml:532:6>>*/ set_size
        /*<<format.ml:532:6>>*/ (state, 1);
       /*<<format.ml:532:27>>*/  /*<<format.ml:532:27>>*/ set_size
        /*<<format.ml:532:27>>*/ (state, 0);
     }
     state[14] = state[14] - 1 | 0;
     var _a3_ = 0;
    }
    else
     var _a3_ = _a2_;
    return _a3_;
    /*<<format.ml:535:5>>*/ }
   function pp_open_stag(state, tag_name){
     /*<<format.ml:540:2>>*/ if(state[22]){
      /*<<format.ml:542:4>>*/  /*<<format.ml:542:4>>*/ caml_call2
       /*<<format.ml:542:4>>*/ (Stdlib_Stack[3], tag_name, state[4]);
      /*<<format.ml:543:4>>*/  /*<<format.ml:543:4>>*/ caml_call1
       /*<<format.ml:543:4>>*/ (state[26], tag_name);
    }
    var _a1_ = state[23];
    if(! _a1_) return _a1_;
    var token =  /*<<format.ml:546:16>>*/ [5, tag_name];
     /*<<format.ml:547:21>>*/ return  /*<<format.ml:547:21>>*/ pp_enqueue
             /*<<format.ml:547:21>>*/ (state, [0, zero, token, 0]) /*<<format.ml:547:60>>*/ ;
    /*<<format.ml:547:60>>*/ }
   function pp_close_stag(state, param){
     /*<<format.ml:552:2>>*/ if(state[23])
      /*<<format.ml:553:4>>*/  /*<<format.ml:553:4>>*/ pp_enqueue
       /*<<format.ml:553:4>>*/ (state, [0, zero, 5, 0]);
    var _aZ_ = state[22];
    if(_aZ_){
     var
      match =
         /*<<format.ml:555:10>>*/  /*<<format.ml:555:10>>*/ caml_call1
          /*<<format.ml:555:10>>*/ (Stdlib_Stack[5], state[4]);
     if(match){
      var tag_name = match[1];
       /*<<format.ml:558:6>>*/ return  /*<<format.ml:558:6>>*/ caml_call1
               /*<<format.ml:558:6>>*/ (state[27], tag_name) /*<<format.ml:558:39>>*/ ;
     }
     var _a0_ = 0;
    }
    else
     var _a0_ = _aZ_;
     /*<<format.ml:556:14>>*/ return _a0_ /*<<format.ml:556:14>>*/ ;
    /*<<format.ml:558:39>>*/ }
   function pp_set_print_tags(state, b){
     /*<<format.ml:560:32>>*/ state[22] = b;
    return 0;
    /*<<format.ml:560:56>>*/ }
   function pp_set_mark_tags(state, b){
     /*<<format.ml:561:31>>*/ state[23] = b;
    return 0;
    /*<<format.ml:561:54>>*/ }
   function pp_get_print_tags(state, param){
     /*<<format.ml:562:33>>*/ return state[22];
    /*<<format.ml:562:52>>*/ }
   function pp_get_mark_tags(state, param){
     /*<<format.ml:563:32>>*/ return state[23];
    /*<<format.ml:563:50>>*/ }
   function pp_set_tags(state, b){
     /*<<format.ml:565:2>>*/  /*<<format.ml:565:2>>*/ pp_set_print_tags
      /*<<format.ml:565:2>>*/ (state, b);
     /*<<format.ml:565:2>>*/ return  /*<<format.ml:565:2>>*/ pp_set_mark_tags
             /*<<format.ml:565:2>>*/ (state, b) /*<<format.ml:565:53>>*/ ;
    /*<<format.ml:565:53>>*/ }
   function pp_get_formatter_stag_function(state, param){
     /*<<format.ml:569:47>>*/ return [0,
            state[24],
            state[25],
            state[26],
            state[27]] /*<<format.ml:569:47>>*/ ;
    /*<<format.ml:574:1>>*/ }
   function pp_set_formatter_stag_function(state, param){
    var pct = param[4], pot = param[3], mct = param[2], mot = param[1];
    state[24] = mot;
    state[25] = mct;
    state[26] = pot;
    state[27] = pct;
    return 0;
    /*<<format.ml:586:33>>*/ }
   function pp_rinit(state){
     /*<<format.ml:591:2>>*/ state[12] = 1;
    state[13] = 1;
    caml_call1(Stdlib_Queue[11], state[28]);
     /*<<format.ml:592:2>>*/  /*<<format.ml:592:2>>*/ initialize_scan_stack
      /*<<format.ml:592:2>>*/ (state[1]);
     /*<<format.ml:593:2>>*/  /*<<format.ml:593:2>>*/ caml_call1
      /*<<format.ml:593:2>>*/ (Stdlib_Stack[9], state[2]);
     /*<<format.ml:594:2>>*/  /*<<format.ml:594:2>>*/ caml_call1
      /*<<format.ml:594:2>>*/ (Stdlib_Stack[9], state[3]);
     /*<<format.ml:595:2>>*/  /*<<format.ml:595:2>>*/ caml_call1
      /*<<format.ml:595:2>>*/ (Stdlib_Stack[9], state[4]);
     /*<<format.ml:596:2>>*/  /*<<format.ml:596:2>>*/ caml_call1
      /*<<format.ml:596:2>>*/ (Stdlib_Stack[9], state[5]);
    state[10] = 0;
    state[14] = 0;
    state[9] = state[6];
     /*<<format.ml:523:28>>*/ return  /*<<format.ml:523:28>>*/ pp_open_box_gen
             /*<<format.ml:523:28>>*/ (state, 0, 3) /*<<format.ml:600:23>>*/ ;
    /*<<format.ml:600:23>>*/ }
   function pp_flush_queue(state, end_with_newline){
     /*<<format.ml:608:2>>*/  /*<<format.ml:603:13>>*/ caml_call2
      /*<<format.ml:603:13>>*/ (Stdlib_Stack[13],
      function(param){
        /*<<format.ml:603:23>>*/ return  /*<<format.ml:603:23>>*/ pp_close_stag
                /*<<format.ml:603:23>>*/ (state, 0) /*<<format.ml:603:45>>*/ ;
       /*<<format.ml:603:45>>*/ },
      state[4]);
     /*<<format.ml:610:4>>*/ for(;;){
     if(1 >= state[14]){
      state[13] = pp_infinity;
       /*<<format.ml:613:2>>*/  /*<<format.ml:613:2>>*/ advance_left
        /*<<format.ml:613:2>>*/ (state);
      if(end_with_newline)
        /*<<format.ml:614:27>>*/  /*<<format.ml:614:27>>*/ pp_output_newline
         /*<<format.ml:614:27>>*/ (state);
       /*<<format.ml:614:27>>*/ return  /*<<format.ml:614:27>>*/ pp_rinit
               /*<<format.ml:614:27>>*/ (state) /*<<format.ml:615:16>>*/ ;
     }
      /*<<format.ml:610:4>>*/  /*<<format.ml:610:4>>*/ pp_close_box
       /*<<format.ml:610:4>>*/ (state, 0);
    }
    /*<<format.ml:615:16>>*/ }
   function pp_print_as_size(state, size, s){
    var _aY_ = state[14] < state[15] ? 1 : 0;
    return _aY_
            ?  /*<<format.ml:626:7>>*/ enqueue_string_as
               /*<<format.ml:626:7>>*/ (state, size, s)
            : _aY_ /*<<format.ml:626:37>>*/ ;
    /*<<format.ml:626:37>>*/ }
   function pp_print_as(state, isize, s){
     /*<<format.ml:630:2>>*/ return  /*<<format.ml:630:2>>*/ pp_print_as_size
             /*<<format.ml:630:2>>*/ (state, isize, s) /*<<format.ml:630:46>>*/ ;
    /*<<format.ml:630:46>>*/ }
   function pp_print_string(state, s){
    var isize = caml_ml_string_length(s);
     /*<<format.ml:630:2>>*/ return  /*<<format.ml:630:2>>*/ pp_print_as_size
             /*<<format.ml:630:2>>*/ (state, isize, s) /*<<format.ml:634:39>>*/ ;
    /*<<format.ml:634:39>>*/ }
   function pp_print_bytes(state, s){
    var
     s$0 =
        /*<<format.ml:637:37>>*/  /*<<format.ml:637:37>>*/ caml_call1
         /*<<format.ml:637:37>>*/ (Stdlib_Bytes[6], s),
     isize = runtime.caml_ml_bytes_length(s);
     /*<<format.ml:630:2>>*/ return  /*<<format.ml:630:2>>*/ pp_print_as_size
             /*<<format.ml:630:2>>*/ (state, isize, s$0) /*<<format.ml:637:56>>*/ ;
    /*<<format.ml:637:56>>*/ }
   function pp_print_int(state, i){
     /*<<format.ml:640:27>>*/ return  /*<<format.ml:640:49>>*/ pp_print_string
             /*<<format.ml:640:49>>*/ (state,
              /*<<format.ml:640:49>>*/ caml_call1
               /*<<format.ml:640:49>>*/ (Stdlib_Int[12], i)) /*<<format.ml:640:66>>*/ ;
    /*<<format.ml:640:66>>*/ }
   function pp_print_float(state, f){
     /*<<format.ml:643:29>>*/ return  /*<<format.ml:643:51>>*/ pp_print_string
             /*<<format.ml:643:51>>*/ (state,
              /*<<format.ml:643:51>>*/ caml_call1
               /*<<format.ml:643:51>>*/ (Stdlib[35], f)) /*<<format.ml:643:70>>*/ ;
    /*<<format.ml:643:70>>*/ }
   function pp_print_bool(state, b){
     /*<<format.ml:646:28>>*/ return  /*<<format.ml:646:50>>*/ pp_print_string
             /*<<format.ml:646:50>>*/ (state,
              /*<<format.ml:646:50>>*/ caml_call1
               /*<<format.ml:646:50>>*/ (Stdlib[30], b)) /*<<format.ml:646:68>>*/ ;
    /*<<format.ml:646:68>>*/ }
   function pp_print_char(state, c){
    var
     s =
        /*<<format.ml:650:22>>*/  /*<<format.ml:650:22>>*/ caml_call2
         /*<<format.ml:650:22>>*/ (Stdlib_String[1], 1, c);
     /*<<format.ml:630:2>>*/ return  /*<<format.ml:630:2>>*/ pp_print_as_size
             /*<<format.ml:630:2>>*/ (state, 1, s) /*<<format.ml:650:39>>*/ ;
    /*<<format.ml:650:39>>*/ }
   function pp_print_nothing(state, param){
     /*<<format.ml:652:33>>*/ return 0 /*<<format.ml:652:33>>*/ ;
    /*<<format.ml:652:35>>*/ }
   function pp_open_hbox(state, param){
     /*<<format.ml:656:28>>*/ return  /*<<format.ml:656:28>>*/ pp_open_box_gen
             /*<<format.ml:656:28>>*/ (state, 0, 0) /*<<format.ml:656:59>>*/ ;
    /*<<format.ml:656:59>>*/ }
   function pp_open_vbox(state, indent){
     /*<<format.ml:657:32>>*/ return  /*<<format.ml:657:32>>*/ pp_open_box_gen
             /*<<format.ml:657:32>>*/ (state, indent, 1) /*<<format.ml:657:68>>*/ ;
    /*<<format.ml:657:68>>*/ }
   function pp_open_hvbox(state, indent){
     /*<<format.ml:659:33>>*/ return  /*<<format.ml:659:33>>*/ pp_open_box_gen
             /*<<format.ml:659:33>>*/ (state, indent, 2) /*<<format.ml:659:70>>*/ ;
    /*<<format.ml:659:70>>*/ }
   function pp_open_hovbox(state, indent){
     /*<<format.ml:660:34>>*/ return  /*<<format.ml:660:34>>*/ pp_open_box_gen
             /*<<format.ml:660:34>>*/ (state, indent, 3) /*<<format.ml:660:72>>*/ ;
    /*<<format.ml:660:72>>*/ }
   function pp_open_box(state, indent){
     /*<<format.ml:661:31>>*/ return  /*<<format.ml:661:31>>*/ pp_open_box_gen
             /*<<format.ml:661:31>>*/ (state, indent, 4) /*<<format.ml:661:66>>*/ ;
    /*<<format.ml:661:66>>*/ }
   function pp_print_newline(state, param){
     /*<<format.ml:673:2>>*/  /*<<format.ml:673:2>>*/ pp_flush_queue
      /*<<format.ml:673:2>>*/ (state, 1);
     /*<<format.ml:673:2>>*/ return  /*<<format.ml:673:2>>*/ caml_call1
             /*<<format.ml:673:2>>*/ (state[18], 0) /*<<format.ml:673:68>>*/ ;
    /*<<format.ml:673:68>>*/ }
   function pp_print_flush(state, param){
     /*<<format.ml:675:2>>*/  /*<<format.ml:675:2>>*/ pp_flush_queue
      /*<<format.ml:675:2>>*/ (state, 0);
     /*<<format.ml:675:2>>*/ return  /*<<format.ml:675:2>>*/ caml_call1
             /*<<format.ml:675:2>>*/ (state[18], 0) /*<<format.ml:675:69>>*/ ;
    /*<<format.ml:675:69>>*/ }
   function pp_force_newline(state, param){
    var _aX_ = state[14] < state[15] ? 1 : 0;
    return _aX_
            ?  /*<<format.ml:681:26>>*/ enqueue_advance
               /*<<format.ml:681:26>>*/ (state, [0, zero, 3, 0])
            : _aX_ /*<<format.ml:681:78>>*/ ;
    /*<<format.ml:681:78>>*/ }
   function pp_print_if_newline(state, param){
    var _aW_ = state[14] < state[15] ? 1 : 0;
    return _aW_
            ?  /*<<format.ml:688:6>>*/ enqueue_advance
               /*<<format.ml:688:6>>*/ (state, [0, zero, 4, 0])
            : _aW_ /*<<format.ml:688:61>>*/ ;
    /*<<format.ml:688:61>>*/ }
   function pp_print_custom_break(state, fits, breaks){
    var
     after = fits[3],
     width = fits[2],
     before = fits[1],
     _aV_ = state[14] < state[15] ? 1 : 0;
    if(! _aV_) return _aV_;
    var
     size = - state[13] | 0,
     token =  /*<<format.ml:697:25>>*/ [1, fits, breaks],
     length =
       (caml_ml_string_length(before) + width | 0)
       +
         /*<<format.ml:698:4>>*/ caml_ml_string_length
          /*<<format.ml:698:4>>*/ (after)
       | 0,
     elem =  /*<<format.ml:699:15>>*/ [0, size, token, length];
     /*<<format.ml:700:4>>*/ return  /*<<format.ml:700:4>>*/ scan_push
             /*<<format.ml:700:4>>*/ (state, 1, elem) /*<<format.ml:700:29>>*/ ;
    /*<<format.ml:700:29>>*/ }
   function pp_print_break(state, width, offset){
     /*<<format.ml:707:2>>*/ return  /*<<format.ml:708:34>>*/ pp_print_custom_break
             /*<<format.ml:708:34>>*/ (state,
             [0, cst$6, width, cst$5],
             [0, cst$4, offset, cst$3]) /*<<format.ml:708:50>>*/ ;
    /*<<format.ml:708:50>>*/ }
   function pp_print_space(state, param){
     /*<<format.ml:716:30>>*/ return  /*<<format.ml:716:30>>*/ pp_print_break
             /*<<format.ml:716:30>>*/ (state, 1, 0) /*<<format.ml:716:54>>*/ ;
    /*<<format.ml:716:54>>*/ }
   function pp_print_cut(state, param){
     /*<<format.ml:717:28>>*/ return  /*<<format.ml:717:28>>*/ pp_print_break
             /*<<format.ml:717:28>>*/ (state, 0, 0) /*<<format.ml:717:52>>*/ ;
    /*<<format.ml:717:52>>*/ }
   function pp_open_tbox(state, param){
     /*<<format.ml:722:2>>*/ state[14] = state[14] + 1 | 0;
    var _aU_ = state[14] < state[15] ? 1 : 0;
    if(! _aU_) return _aU_;
    var elem =  /*<<format.ml:725:15>>*/ [0, zero, [4, [0, [0, 0]]], 0];
     /*<<format.ml:726:4>>*/ return  /*<<format.ml:726:4>>*/ enqueue_advance
             /*<<format.ml:726:4>>*/ (state, elem) /*<<format.ml:726:30>>*/ ;
    /*<<format.ml:726:30>>*/ }
   function pp_close_tbox(state, param){
    var _aR_ = 1 < state[14] ? 1 : 0;
    if(_aR_){
     var _aS_ = state[14] < state[15] ? 1 : 0;
     if(_aS_){
      var elem =  /*<<format.ml:734:16>>*/ [0, zero, 2, 0];
       /*<<format.ml:735:5>>*/  /*<<format.ml:735:5>>*/ enqueue_advance
        /*<<format.ml:735:5>>*/ (state, elem);
      state[14] = state[14] - 1 | 0;
      var _aT_ = 0;
     }
     else
      var _aT_ = _aS_;
    }
    else
     var _aT_ = _aR_;
    return _aT_;
    /*<<format.ml:737:5>>*/ }
   function pp_print_tbreak(state, width, offset){
    var _aQ_ = state[14] < state[15] ? 1 : 0;
    if(! _aQ_) return _aQ_;
    var
     size = - state[13] | 0,
     elem =  /*<<format.ml:744:15>>*/ [0, size, [2, width, offset], width];
     /*<<format.ml:745:4>>*/ return  /*<<format.ml:745:4>>*/ scan_push
             /*<<format.ml:745:4>>*/ (state, 1, elem) /*<<format.ml:745:29>>*/ ;
    /*<<format.ml:745:29>>*/ }
   function pp_print_tab(state, param){
     /*<<format.ml:748:28>>*/ return  /*<<format.ml:748:28>>*/ pp_print_tbreak
             /*<<format.ml:748:28>>*/ (state, 0, 0) /*<<format.ml:748:53>>*/ ;
    /*<<format.ml:748:53>>*/ }
   function pp_set_tab(state, param){
    var _aP_ = state[14] < state[15] ? 1 : 0;
    if(! _aP_) return _aP_;
    var elem =  /*<<format.ml:752:15>>*/ [0, zero, 0, 0];
     /*<<format.ml:753:4>>*/ return  /*<<format.ml:753:4>>*/ enqueue_advance
             /*<<format.ml:753:4>>*/ (state, elem) /*<<format.ml:753:30>>*/ ;
    /*<<format.ml:753:30>>*/ }
   function pp_set_max_boxes(state, n){
    var _aN_ = 1 < n ? 1 : 0, _aO_ = _aN_ ? (state[15] = n, 0) : _aN_;
    return _aO_;
    /*<<format.ml:763:68>>*/ }
   function pp_get_max_boxes(state, param){
     /*<<format.ml:766:32>>*/ return state[15];
    /*<<format.ml:766:50>>*/ }
   function pp_over_max_boxes(state, param){
     /*<<format.ml:768:33>>*/ return state[14] === state[15] ? 1 : 0;
    /*<<format.ml:768:73>>*/ }
   function pp_set_ellipsis_text(state, s){
     /*<<format.ml:771:35>>*/ state[16] = s;
    return 0;
    /*<<format.ml:771:57>>*/ }
   function pp_get_ellipsis_text(state, param){
     /*<<format.ml:772:36>>*/ return state[16];
    /*<<format.ml:772:53>>*/ }
   function pp_limit(n){
     /*<<format.ml:777:2>>*/ return n < 1000000010 ? n : 1000000009 /*<<format.ml:777:49>>*/ ;
    /*<<format.ml:777:49>>*/ }
   function pp_set_max_indent(state, n$0){
    var _aM_ = 1 < n$0 ? 1 : 0;
    if(! _aM_) return _aM_;
    var n$1 = state[6] - n$0 | 0, _aL_ = 1 <= n$1 ? 1 : 0;
    if(! _aL_) return _aL_;
    var
     n =
        /*<<format.ml:783:12>>*/  /*<<format.ml:783:12>>*/ pp_limit
         /*<<format.ml:783:12>>*/ (n$1);
    state[7] = n;
    state[8] = state[6] - state[7] | 0;
     /*<<format.ml:786:4>>*/ return  /*<<format.ml:786:4>>*/ pp_rinit
             /*<<format.ml:786:4>>*/ (state) /*<<format.ml:794:53>>*/ ;
    /*<<format.ml:794:53>>*/ }
   function pp_get_max_indent(state, param){
     /*<<format.ml:797:33>>*/ return state[8];
    /*<<format.ml:797:52>>*/ }
   function pp_set_margin(state, n){
    var _aJ_ = 1 <= n ? 1 : 0;
    if(! _aJ_) return _aJ_;
    var
     n$0 =
        /*<<format.ml:801:12>>*/  /*<<format.ml:801:12>>*/ pp_limit
         /*<<format.ml:801:12>>*/ (n);
    state[6] = n$0;
    if(state[8] <= state[6])
     var new_max_indent = state[8];
    else
     var
      _aK_ =
         /*<<format.ml:810:15>>*/  /*<<format.ml:810:15>>*/ caml_call2
          /*<<format.ml:810:15>>*/ (Stdlib_Int[11],
          state[6] - state[7] | 0,
          state[6] / 2 | 0),
      new_max_indent =
         /*<<format.ml:810:7>>*/ caml_call2
          /*<<format.ml:810:7>>*/ (Stdlib_Int[11], _aK_, 1);
     /*<<format.ml:813:4>>*/ return  /*<<format.ml:813:4>>*/ pp_set_max_indent
             /*<<format.ml:813:4>>*/ (state, new_max_indent) /*<<format.ml:813:42>>*/ ;
    /*<<format.ml:813:42>>*/ }
   function validate_geometry(param){
    var margin = param[2], max_indent = param[1];
     /*<<format.ml:820:2>>*/ return 2 <= max_indent
            ? margin <= max_indent ? _c_ : 1000000010 <= margin ? _d_ : _e_
            : _f_ /*<<format.ml:826:12>>*/ ;
    /*<<format.ml:826:12>>*/ }
   function check_geometry(geometry){
     /*<<format.ml:829:2>>*/ return 0
            ===
              /*<<format.ml:829:8>>*/ validate_geometry
                /*<<format.ml:829:8>>*/ (geometry)
              [0]
            ? 1
            : 0 /*<<format.ml:831:20>>*/ ;
    /*<<format.ml:831:20>>*/ }
   function pp_get_margin(state, param){
     /*<<format.ml:833:29>>*/ return state[6];
    /*<<format.ml:833:44>>*/ }
   function pp_set_full_geometry(state, param){
    var margin = param[2], max_indent = param[1];
     /*<<format.ml:836:2>>*/  /*<<format.ml:836:2>>*/ pp_set_margin
      /*<<format.ml:836:2>>*/ (state, margin);
     /*<<format.ml:837:2>>*/  /*<<format.ml:837:2>>*/ pp_set_max_indent
      /*<<format.ml:837:2>>*/ (state, max_indent);
     /*<<format.ml:837:2>>*/ return 0 /*<<format.ml:837:2>>*/ ;
    /*<<format.ml:838:4>>*/ }
   function pp_set_geometry(state, max_indent, margin){
    var
     geometry =  /*<<format.ml:841:17>>*/ [0, max_indent, margin],
     match =
        /*<<format.ml:842:8>>*/  /*<<format.ml:842:8>>*/ validate_geometry
         /*<<format.ml:842:8>>*/ (geometry);
    if(0 === match[0])
      /*<<format.ml:846:4>>*/ return  /*<<format.ml:846:4>>*/ pp_set_full_geometry
              /*<<format.ml:846:4>>*/ (state, geometry) /*<<format.ml:846:39>>*/ ;
    var
     msg = match[1],
     _aI_ =
        /*<<format.ml:844:28>>*/  /*<<format.ml:844:28>>*/ caml_call2
         /*<<format.ml:844:28>>*/ (Stdlib[28],
         cst_Format_pp_set_geometry,
         msg);
     /*<<format.ml:844:4>>*/ throw  /*<<format.ml:844:4>>*/ caml_maybe_attach_backtrace
            /*<<format.ml:844:4>>*/ ([0, Stdlib[6], _aI_], 1);
    /*<<format.ml:846:39>>*/ }
   function pp_safe_set_geometry(state, max_indent, margin){
    var geometry =  /*<<format.ml:849:17>>*/ [0, max_indent, margin];
    return 0
            ===
              /*<<format.ml:850:8>>*/ validate_geometry
                /*<<format.ml:850:8>>*/ (geometry)
              [0]
            ?  /*<<format.ml:854:4>>*/ pp_set_full_geometry
               /*<<format.ml:854:4>>*/ (state, geometry)
            : 0 /*<<format.ml:854:39>>*/ ;
    /*<<format.ml:854:39>>*/ }
   function pp_get_geometry(state, param){
     /*<<format.ml:857:2>>*/ return [0, state[8], state[6]] /*<<format.ml:857:2>>*/ ;
    /*<<format.ml:857:78>>*/ }
   function pp_update_geometry(state, update){
    var
     geometry =
        /*<<format.ml:860:17>>*/  /*<<format.ml:860:17>>*/ pp_get_geometry
         /*<<format.ml:860:17>>*/ (state, 0);
     /*<<format.ml:861:29>>*/ return  /*<<format.ml:861:29>>*/ pp_set_full_geometry
             /*<<format.ml:861:29>>*/ (state,
              /*<<format.ml:861:29>>*/ caml_call1
               /*<<format.ml:861:29>>*/ (update, geometry)) /*<<format.ml:861:46>>*/ ;
    /*<<format.ml:861:46>>*/ }
   function pp_set_formatter_out_functions(state, param){
    var j = param[5], i = param[4], h = param[3], g = param[2], f = param[1];
    state[17] = f;
    state[18] = g;
    state[19] = h;
    state[20] = i;
    state[21] = j;
    return 0;
    /*<<format.ml:875:26>>*/ }
   function pp_get_formatter_out_functions(state, param){
     /*<<format.ml:877:46>>*/ return [0,
            state[17],
            state[18],
            state[19],
            state[20],
            state[21]] /*<<format.ml:877:46>>*/ ;
    /*<<format.ml:883:1>>*/ }
   function pp_set_formatter_output_functi(state, f, g){
     /*<<format.ml:888:2>>*/ state[17] = f;
    state[18] = g;
    return 0;
    /*<<format.ml:888:51>>*/ }
   function pp_get_formatter_output_functi(state, param){
     /*<<format.ml:891:2>>*/ return [0, state[17], state[18]] /*<<format.ml:891:2>>*/ ;
    /*<<format.ml:891:43>>*/ }
   function display_newline(state, param){
     /*<<format.ml:895:31>>*/ return  /*<<format.ml:895:31>>*/ caml_call3
             /*<<format.ml:895:31>>*/ (state[17], cst$7, 0, 1) /*<<format.ml:895:60>>*/ ;
    /*<<format.ml:895:60>>*/ }
   var
    blank_line =
       /*<<format.ml:898:17>>*/  /*<<format.ml:898:17>>*/ caml_call2
        /*<<format.ml:898:17>>*/ (Stdlib_String[1], 80, 32),
    _g_ = [3, 0, 3];
   function display_blanks(state, n){
    var n$0 = n;
     /*<<format.ml:900:2>>*/ for(;;){
     var _aH_ = 0 < n$0 ? 1 : 0;
     if(! _aH_) return _aH_;
     if(80 >= n$0)
       /*<<format.ml:901:18>>*/ return  /*<<format.ml:901:18>>*/ caml_call3
               /*<<format.ml:901:18>>*/ (state[17], blank_line, 0, n$0) /*<<format.ml:905:5>>*/ ;
      /*<<format.ml:903:4>>*/  /*<<format.ml:903:4>>*/ caml_call3
       /*<<format.ml:903:4>>*/ (state[17], blank_line, 0, 80);
     var n$1 =  /*<<format.ml:903:4>>*/ n$0 - 80 | 0;
     n$0 = n$1;
    }
    /*<<format.ml:905:5>>*/ }
   function pp_set_formatter_out_channel(state, oc){
     /*<<format.ml:914:2>>*/ state[17] =
      /*<<format.ml:914:25>>*/ caml_call1
       /*<<format.ml:914:25>>*/ (Stdlib[69], oc);
    state[18] =
     function(param){
       /*<<format.ml:915:35>>*/ return  /*<<format.ml:915:2>>*/ caml_call1
               /*<<format.ml:915:2>>*/ (Stdlib[63], oc) /*<<format.ml:915:43>>*/ ;
      /*<<format.ml:915:43>>*/ };
    state[19] =
     function(_aG_){ /*<<?>>*/ return display_newline(state, _aG_);};
    state[20] = function(_aF_){ /*<<?>>*/ return display_blanks(state, _aF_);};
    state[21] = function(_aE_){ /*<<?>>*/ return display_blanks(state, _aE_);};
    return 0;
    /*<<format.ml:918:45>>*/ }
   function default_pp_mark_open_tag(param){
     /*<<format.ml:926:31>>*/ if(param[1] !== String_tag)
      /*<<format.ml:928:9>>*/ return cst$10 /*<<format.ml:928:9>>*/ ;
    var
     s = param[2],
     _aD_ =
        /*<<format.ml:927:26>>*/  /*<<format.ml:927:26>>*/ caml_call2
         /*<<format.ml:927:26>>*/ (Stdlib[28], s, cst$8);
     /*<<format.ml:927:26>>*/ return  /*<<format.ml:927:26>>*/ caml_call2
             /*<<format.ml:927:26>>*/ (Stdlib[28], cst$9, _aD_) /*<<format.ml:928:11>>*/ ;
    /*<<format.ml:928:11>>*/ }
   function default_pp_mark_close_tag(param){
     /*<<format.ml:929:32>>*/ if(param[1] !== String_tag)
      /*<<format.ml:931:9>>*/ return cst$13 /*<<format.ml:931:9>>*/ ;
    var
     s = param[2],
     _aC_ =
        /*<<format.ml:930:27>>*/  /*<<format.ml:930:27>>*/ caml_call2
         /*<<format.ml:930:27>>*/ (Stdlib[28], s, cst$11);
     /*<<format.ml:930:27>>*/ return  /*<<format.ml:930:27>>*/ caml_call2
             /*<<format.ml:930:27>>*/ (Stdlib[28], cst$12, _aC_) /*<<format.ml:931:11>>*/ ;
    /*<<format.ml:931:11>>*/ }
   function default_pp_print_open_tag(_aB_){ /*<<?>>*/ return 0;}
   function default_pp_print_close_tag(_aA_){ /*<<?>>*/ return 0;}
   function pp_make_formatter(f, g, h, i, j){
    var
     pp_queue =
        /*<<format.ml:940:17>>*/  /*<<format.ml:940:17>>*/ caml_call1
         /*<<format.ml:940:17>>*/ (Stdlib_Queue[2], 0),
     sys_tok =  /*<<format.ml:942:4>>*/ [0, unknown, _g_, 0];
     /*<<format.ml:943:2>>*/  /*<<format.ml:943:2>>*/ caml_call2
      /*<<format.ml:943:2>>*/ (Stdlib_Queue[3], sys_tok, pp_queue);
    var
     scan_stack =
        /*<<format.ml:944:19>>*/  /*<<format.ml:944:19>>*/ caml_call1
         /*<<format.ml:944:19>>*/ (Stdlib_Stack[2], 0);
     /*<<format.ml:945:2>>*/  /*<<format.ml:945:2>>*/ initialize_scan_stack
      /*<<format.ml:945:2>>*/ (scan_stack);
     /*<<format.ml:946:2>>*/  /*<<format.ml:946:2>>*/ caml_call2
      /*<<format.ml:946:2>>*/ (Stdlib_Stack[3], [0, 1, sys_tok], scan_stack);
    var
     pp_margin =  /*<<format.ml:946:2>>*/ 78,
     _aw_ = Stdlib[19],
     _ax_ =
        /*<<format.ml:954:20>>*/  /*<<format.ml:954:20>>*/ caml_call1
         /*<<format.ml:954:20>>*/ (Stdlib_Stack[2], 0),
     _ay_ =
        /*<<format.ml:953:19>>*/  /*<<format.ml:953:19>>*/ caml_call1
         /*<<format.ml:953:19>>*/ (Stdlib_Stack[2], 0),
     _az_ =
        /*<<format.ml:952:20>>*/  /*<<format.ml:952:20>>*/ caml_call1
         /*<<format.ml:952:20>>*/ (Stdlib_Stack[2], 0);
     /*<<format.ml:949:2>>*/ return [0,
            scan_stack,
             /*<<format.ml:951:22>>*/ caml_call1
              /*<<format.ml:951:22>>*/ (Stdlib_Stack[2], 0),
            _az_,
            _ay_,
            _ax_,
            pp_margin,
            10,
            68,
            pp_margin,
            0,
            1,
            1,
            1,
            1,
            _aw_,
            cst$14,
            f,
            g,
            h,
            i,
            j,
            0,
            0,
            default_pp_mark_open_tag,
            default_pp_mark_close_tag,
            default_pp_print_open_tag,
            default_pp_print_close_tag,
            pp_queue] /*<<format.ml:949:2>>*/ ;
   }
   function formatter_of_out_functions(out_funs){
     /*<<format.ml:983:2>>*/ return  /*<<format.ml:938:22>>*/ pp_make_formatter
             /*<<format.ml:938:22>>*/ (out_funs[1],
             out_funs[2],
             out_funs[3],
             out_funs[4],
             out_funs[5]) /*<<format.ml:988:23>>*/ ;
    /*<<format.ml:988:23>>*/ }
   function make_formatter(output, flush){
    var
     ppf =
        /*<<format.ml:994:12>>*/  /*<<format.ml:994:12>>*/ pp_make_formatter
         /*<<format.ml:994:12>>*/ (output,
         flush,
         function(_av_){ /*<<?>>*/ return 0;},
         function(_au_){ /*<<?>>*/ return 0;},
         function(_at_){ /*<<?>>*/ return 0;});
    ppf[19] = function(_as_){ /*<<?>>*/ return display_newline(ppf, _as_);};
    ppf[20] = function(_ar_){ /*<<?>>*/ return display_blanks(ppf, _ar_);};
    ppf[21] = function(_aq_){ /*<<?>>*/ return display_blanks(ppf, _aq_);};
     /*<<format.ml:998:2>>*/ return ppf /*<<format.ml:998:2>>*/ ;
    /*<<format.ml:998:5>>*/ }
   function formatter_of_out_channel(oc){
     /*<<format.ml:1003:2>>*/ return  /*<<format.ml:1003:39>>*/ make_formatter
             /*<<format.ml:1003:39>>*/ ( /*<<format.ml:1003:17>>*/ caml_call1
               /*<<format.ml:1003:17>>*/ (Stdlib[69], oc),
             function(param){
               /*<<format.ml:1003:50>>*/ return  /*<<format.ml:1003:2>>*/ caml_call1
                       /*<<format.ml:1003:2>>*/ (Stdlib[63], oc) /*<<format.ml:1003:58>>*/ ;
              /*<<format.ml:1003:58>>*/ }) /*<<format.ml:1003:59>>*/ ;
    /*<<format.ml:1003:59>>*/ }
   function formatter_of_buffer(b){
     /*<<format.ml:1008:2>>*/ return  /*<<format.ml:1008:42>>*/ make_formatter
             /*<<format.ml:1008:42>>*/ ( /*<<format.ml:1008:17>>*/ caml_call1
               /*<<format.ml:1008:17>>*/ (Stdlib_Buffer[18], b),
             function(_ap_){ /*<<?>>*/ return 0;}) /*<<format.ml:1008:48>>*/ ;
    /*<<format.ml:1008:48>>*/ }
   var pp_buffer_size =  /*<<format.ml:1007:24>>*/ 512;
   function pp_make_buffer(param){
     /*<<format.ml:1015:24>>*/ return  /*<<format.ml:1007:24>>*/ caml_call1
             /*<<format.ml:1007:24>>*/ (Stdlib_Buffer[1], pp_buffer_size) /*<<format.ml:1015:52>>*/ ;
    /*<<format.ml:1015:52>>*/ }
   var
    stdbuf =
       /*<<format.ml:1018:13>>*/  /*<<format.ml:1018:13>>*/ pp_make_buffer
        /*<<format.ml:1018:13>>*/ (0),
    std_formatter =
       /*<<format.ml:1022:20>>*/  /*<<format.ml:1022:20>>*/ formatter_of_out_channel
        /*<<format.ml:1022:20>>*/ (Stdlib[39]),
    err_formatter =
       /*<<format.ml:1023:20>>*/  /*<<format.ml:1023:20>>*/ formatter_of_out_channel
        /*<<format.ml:1023:20>>*/ (Stdlib[40]),
    str_formatter =
       /*<<format.ml:1024:20>>*/  /*<<format.ml:1024:20>>*/ formatter_of_buffer
        /*<<format.ml:1024:20>>*/ (stdbuf),
    stdbuf_key =
       /*<<format.ml:1029:17>>*/  /*<<format.ml:1029:17>>*/ caml_call2
        /*<<format.ml:1029:17>>*/ (Stdlib_Domain[10][1], 0, pp_make_buffer);
    /*<<format.ml:1030:8>>*/  /*<<format.ml:1030:8>>*/ caml_call2
     /*<<format.ml:1030:8>>*/ (Stdlib_Domain[10][3], stdbuf_key, stdbuf);
   var
    str_formatter_key =
       /*<<format.ml:1032:24>>*/  /*<<format.ml:1032:24>>*/ caml_call2
        /*<<format.ml:1032:24>>*/ (Stdlib_Domain[10][1],
        0,
        function(param){
          /*<<format.ml:1033:2>>*/ return  /*<<format.ml:1033:22>>*/ formatter_of_buffer
                  /*<<format.ml:1033:22>>*/ ( /*<<format.ml:1033:22>>*/ caml_call1
                    /*<<format.ml:1033:22>>*/ (Stdlib_Domain[10][2],
                    stdbuf_key)) /*<<format.ml:1033:42>>*/ ;
         /*<<format.ml:1033:42>>*/ });
    /*<<format.ml:1034:8>>*/  /*<<format.ml:1034:8>>*/ caml_call2
     /*<<format.ml:1034:8>>*/ (Stdlib_Domain[10][3],
     str_formatter_key,
     str_formatter);
   function buffered_out_string(key, str, ofs, len){
    var
     _ao_ =
        /*<<format.ml:1037:23>>*/  /*<<format.ml:1037:23>>*/ caml_call1
         /*<<format.ml:1037:23>>*/ (Stdlib_Domain[10][2], key);
     /*<<format.ml:1037:2>>*/ return  /*<<format.ml:1037:2>>*/ caml_call4
             /*<<format.ml:1037:2>>*/ (Stdlib_Buffer[18], _ao_, str, ofs, len) /*<<format.ml:1037:55>>*/ ;
    /*<<format.ml:1037:55>>*/ }
   function buffered_out_flush(oc, key, param){
    var
     buf =
        /*<<format.ml:1040:12>>*/  /*<<format.ml:1040:12>>*/ caml_call1
         /*<<format.ml:1040:12>>*/ (Stdlib_Domain[10][2], key),
     len =
        /*<<format.ml:1041:12>>*/  /*<<format.ml:1041:12>>*/ caml_call1
         /*<<format.ml:1041:12>>*/ (Stdlib_Buffer[7], buf),
     str =
        /*<<format.ml:1042:12>>*/  /*<<format.ml:1042:12>>*/ caml_call1
         /*<<format.ml:1042:12>>*/ (Stdlib_Buffer[2], buf);
     /*<<format.ml:1043:2>>*/  /*<<format.ml:1043:2>>*/ caml_call4
      /*<<format.ml:1043:2>>*/ (Stdlib[69], oc, str, 0, len);
     /*<<format.ml:1044:2>>*/  /*<<format.ml:1044:2>>*/ caml_call1
      /*<<format.ml:1044:2>>*/ (Stdlib[63], oc);
     /*<<format.ml:1044:2>>*/ return  /*<<format.ml:1044:2>>*/ caml_call1
             /*<<format.ml:1044:2>>*/ (Stdlib_Buffer[8], buf) /*<<format.ml:1045:18>>*/ ;
    /*<<format.ml:1045:18>>*/ }
   var
    std_buf_key =
       /*<<format.ml:1047:18>>*/  /*<<format.ml:1047:18>>*/ caml_call2
        /*<<format.ml:1047:18>>*/ (Stdlib_Domain[10][1],
        0,
        function(param){
          /*<<format.ml:1047:48>>*/ return  /*<<format.ml:1039:23>>*/ caml_call1
                  /*<<format.ml:1039:23>>*/ (Stdlib_Buffer[1], pp_buffer_size) /*<<format.ml:1047:76>>*/ ;
         /*<<format.ml:1047:76>>*/ }),
    err_buf_key =
       /*<<format.ml:1048:18>>*/  /*<<format.ml:1048:18>>*/ caml_call2
        /*<<format.ml:1048:18>>*/ (Stdlib_Domain[10][1],
        0,
        function(param){
          /*<<format.ml:1048:48>>*/ return  /*<<format.ml:1047:18>>*/ caml_call1
                  /*<<format.ml:1047:18>>*/ (Stdlib_Buffer[1], pp_buffer_size) /*<<format.ml:1048:76>>*/ ;
         /*<<format.ml:1048:76>>*/ }),
    std_formatter_key =
       /*<<format.ml:1050:24>>*/  /*<<format.ml:1050:24>>*/ caml_call2
        /*<<format.ml:1050:24>>*/ (Stdlib_Domain[10][1],
        0,
        function(param){
         var
          _ac_ = Stdlib[39],
          ppf =
             /*<<format.ml:1052:4>>*/  /*<<format.ml:1052:4>>*/ pp_make_formatter
              /*<<format.ml:1052:4>>*/ (function(_al_, _am_, _an_){
                /*<<?>>*/ return buffered_out_string
                       (std_buf_key, _al_, _am_, _an_);
              },
              function(_ak_){
                /*<<?>>*/ return buffered_out_flush(_ac_, std_buf_key, _ak_);
              },
              function(_aj_){ /*<<?>>*/ return 0;},
              function(_ai_){ /*<<?>>*/ return 0;},
              function(_ah_){ /*<<?>>*/ return 0;});
         ppf[19] =
          function(_ag_){ /*<<?>>*/ return display_newline(ppf, _ag_);};
         ppf[20] =
          function(_af_){ /*<<?>>*/ return display_blanks(ppf, _af_);};
         ppf[21] =
          function(_ae_){ /*<<?>>*/ return display_blanks(ppf, _ae_);};
          /*<<format.ml:1058:2>>*/  /*<<format.ml:1058:2>>*/ caml_call1
           /*<<format.ml:1058:2>>*/ (Stdlib_Domain[6],
           function(_ad_){ /*<<?>>*/ return pp_print_flush(ppf, _ad_);});
          /*<<format.ml:1058:2>>*/ return ppf /*<<format.ml:1058:2>>*/ ;
         /*<<format.ml:1059:5>>*/ });
    /*<<format.ml:1060:8>>*/  /*<<format.ml:1060:8>>*/ caml_call2
     /*<<format.ml:1060:8>>*/ (Stdlib_Domain[10][3],
     std_formatter_key,
     std_formatter);
   var
    err_formatter_key =
       /*<<format.ml:1062:24>>*/  /*<<format.ml:1062:24>>*/ caml_call2
        /*<<format.ml:1062:24>>*/ (Stdlib_Domain[10][1],
        0,
        function(param){
         var
          _S_ = Stdlib[40],
          ppf =
             /*<<format.ml:1064:4>>*/  /*<<format.ml:1064:4>>*/ pp_make_formatter
              /*<<format.ml:1064:4>>*/ (function(_$_, _aa_, _ab_){
                /*<<?>>*/ return buffered_out_string
                       (err_buf_key, _$_, _aa_, _ab_);
              },
              function(___){
                /*<<?>>*/ return buffered_out_flush(_S_, err_buf_key, ___);
              },
              function(_Z_){ /*<<?>>*/ return 0;},
              function(_Y_){ /*<<?>>*/ return 0;},
              function(_X_){ /*<<?>>*/ return 0;});
         ppf[19] = function(_W_){ /*<<?>>*/ return display_newline(ppf, _W_);};
         ppf[20] = function(_V_){ /*<<?>>*/ return display_blanks(ppf, _V_);};
         ppf[21] = function(_U_){ /*<<?>>*/ return display_blanks(ppf, _U_);};
          /*<<format.ml:1070:2>>*/  /*<<format.ml:1070:2>>*/ caml_call1
           /*<<format.ml:1070:2>>*/ (Stdlib_Domain[6],
           function(_T_){ /*<<?>>*/ return pp_print_flush(ppf, _T_);});
          /*<<format.ml:1070:2>>*/ return ppf /*<<format.ml:1070:2>>*/ ;
         /*<<format.ml:1071:5>>*/ });
    /*<<format.ml:1072:8>>*/  /*<<format.ml:1072:8>>*/ caml_call2
     /*<<format.ml:1072:8>>*/ (Stdlib_Domain[10][3],
     err_formatter_key,
     err_formatter);
   function get_std_formatter(param){
     /*<<format.ml:1074:27>>*/ return  /*<<format.ml:1072:8>>*/ caml_call1
             /*<<format.ml:1072:8>>*/ (Stdlib_Domain[10][2],
             std_formatter_key) /*<<format.ml:1074:52>>*/ ;
    /*<<format.ml:1074:52>>*/ }
   function get_err_formatter(param){
     /*<<format.ml:1075:27>>*/ return  /*<<format.ml:1074:22>>*/ caml_call1
             /*<<format.ml:1074:22>>*/ (Stdlib_Domain[10][2],
             err_formatter_key) /*<<format.ml:1075:52>>*/ ;
    /*<<format.ml:1075:52>>*/ }
   function get_str_formatter(param){
     /*<<format.ml:1076:27>>*/ return  /*<<format.ml:1075:22>>*/ caml_call1
             /*<<format.ml:1075:22>>*/ (Stdlib_Domain[10][2],
             str_formatter_key) /*<<format.ml:1076:52>>*/ ;
    /*<<format.ml:1076:52>>*/ }
   function get_stdbuf(param){
     /*<<format.ml:1077:20>>*/ return  /*<<format.ml:1076:22>>*/ caml_call1
             /*<<format.ml:1076:22>>*/ (Stdlib_Domain[10][2], stdbuf_key) /*<<format.ml:1077:38>>*/ ;
    /*<<format.ml:1077:38>>*/ }
   function flush_buffer_formatter(buf, ppf){
     /*<<format.ml:1084:2>>*/  /*<<format.ml:1084:2>>*/ pp_flush_queue
      /*<<format.ml:1084:2>>*/ (ppf, 0);
    var
     s =
        /*<<format.ml:1085:10>>*/  /*<<format.ml:1085:10>>*/ caml_call1
         /*<<format.ml:1085:10>>*/ (Stdlib_Buffer[2], buf);
     /*<<format.ml:1086:2>>*/  /*<<format.ml:1086:2>>*/ caml_call1
      /*<<format.ml:1086:2>>*/ (Stdlib_Buffer[9], buf);
     /*<<format.ml:1086:2>>*/ return s /*<<format.ml:1086:2>>*/ ;
    /*<<format.ml:1087:3>>*/ }
   function flush_str_formatter(param){
    var
     stdbuf =
        /*<<format.ml:1091:15>>*/  /*<<format.ml:1091:15>>*/ caml_call1
         /*<<format.ml:1091:15>>*/ (Stdlib_Domain[10][2], stdbuf_key),
     str_formatter =
        /*<<format.ml:1092:22>>*/  /*<<format.ml:1092:22>>*/ caml_call1
         /*<<format.ml:1092:22>>*/ (Stdlib_Domain[10][2], str_formatter_key);
     /*<<format.ml:1093:2>>*/ return  /*<<format.ml:1093:2>>*/ flush_buffer_formatter
             /*<<format.ml:1093:2>>*/ (stdbuf, str_formatter) /*<<format.ml:1093:45>>*/ ;
    /*<<format.ml:1093:45>>*/ }
   function make_synchronized_formatter(output, flush){
     /*<<format.ml:1096:2>>*/ return  /*<<format.ml:1096:14>>*/ caml_call2
             /*<<format.ml:1096:14>>*/ (Stdlib_Domain[10][1],
             0,
             function(param){
              var
               buf =
                  /*<<format.ml:1097:14>>*/  /*<<format.ml:1097:14>>*/ caml_call1
                   /*<<format.ml:1097:14>>*/ (Stdlib_Buffer[1],
                   pp_buffer_size),
               output$0 =
                  /*<<format.ml:1098:18>>*/  /*<<format.ml:1098:18>>*/ caml_call1
                   /*<<format.ml:1098:18>>*/ (Stdlib_Buffer[18], buf);
              function flush$0(param){
               var
                _R_ =
                   /*<<format.ml:1100:37>>*/  /*<<format.ml:1100:37>>*/ caml_call1
                    /*<<format.ml:1100:37>>*/ (Stdlib_Buffer[7], buf);
                /*<<format.ml:1100:6>>*/  /*<<format.ml:1100:6>>*/ caml_call3
                 /*<<format.ml:1100:6>>*/ (output,
                  /*<<format.ml:1100:13>>*/ caml_call1
                   /*<<format.ml:1100:13>>*/ (Stdlib_Buffer[2], buf),
                 0,
                 _R_);
                /*<<format.ml:1101:6>>*/  /*<<format.ml:1101:6>>*/ caml_call1
                 /*<<format.ml:1101:6>>*/ (Stdlib_Buffer[8], buf);
                /*<<format.ml:1101:6>>*/ return  /*<<format.ml:1101:6>>*/ caml_call1
                        /*<<format.ml:1101:6>>*/ (flush, 0) /*<<format.ml:1102:14>>*/ ;
               /*<<format.ml:1102:14>>*/ }
               /*<<format.ml:1104:4>>*/ return  /*<<format.ml:1104:4>>*/ make_formatter
                       /*<<format.ml:1104:4>>*/ (output$0, flush$0) /*<<format.ml:1104:33>>*/ ;
              /*<<format.ml:1104:33>>*/ }) /*<<format.ml:1104:34>>*/ ;
    /*<<format.ml:1104:34>>*/ }
   function synchronized_formatter_of_out_(oc){
     /*<<format.ml:1107:2>>*/ return  /*<<format.ml:1107:52>>*/ make_synchronized_formatter
             /*<<format.ml:1107:52>>*/ ( /*<<format.ml:1107:30>>*/ caml_call1
               /*<<format.ml:1107:30>>*/ (Stdlib[69], oc),
             function(param){
               /*<<format.ml:1107:63>>*/ return  /*<<format.ml:1107:2>>*/ caml_call1
                       /*<<format.ml:1107:2>>*/ (Stdlib[63], oc) /*<<format.ml:1107:71>>*/ ;
              /*<<format.ml:1107:71>>*/ }) /*<<format.ml:1107:72>>*/ ;
    /*<<format.ml:1107:72>>*/ }
   function make_symbolic_output_buffer(param){
     /*<<format.ml:1134:2>>*/ return [0, 0] /*<<format.ml:1134:2>>*/ ;
    /*<<format.ml:1134:35>>*/ }
   function clear_symbolic_output_buffer(sob){
     /*<<format.ml:1137:2>>*/ sob[1] = 0;
    return 0;
    /*<<format.ml:1137:36>>*/ }
   function get_symbolic_output_buffer(sob){
     /*<<format.ml:1140:2>>*/ return caml_call1(Stdlib_List[10], sob[1]) /*<<format.ml:1140:39>>*/ ;
    /*<<format.ml:1140:39>>*/ }
   function flush_symbolic_output_buffer(sob){
    var
     items =
        /*<<format.ml:1143:14>>*/  /*<<format.ml:1143:14>>*/ get_symbolic_output_buffer
         /*<<format.ml:1143:14>>*/ (sob);
     /*<<format.ml:1144:2>>*/  /*<<format.ml:1144:2>>*/ clear_symbolic_output_buffer
      /*<<format.ml:1144:2>>*/ (sob);
     /*<<format.ml:1144:2>>*/ return items /*<<format.ml:1144:2>>*/ ;
    /*<<format.ml:1145:7>>*/ }
   function add_symbolic_output_item(sob, item){
     /*<<format.ml:1148:2>>*/ sob[1] = [0, item, sob[1]];
    return 0;
    /*<<format.ml:1148:70>>*/ }
   function formatter_of_symbolic_output_b(sob){
    function f(s, i, n){
      /*<<format.ml:1156:33>>*/ return  /*<<format.ml:1156:33>>*/ add_symbolic_output_item
              /*<<format.ml:1156:33>>*/ (sob,
              [0,
                /*<<format.ml:1156:48>>*/ caml_call3
                 /*<<format.ml:1156:48>>*/ (Stdlib_String[16], s, i, n)]) /*<<format.ml:1156:33>>*/ ;
    }
    function g(_Q_){
      /*<<format.ml:1152:4>>*/ return  /*<<format.ml:1152:4>>*/ add_symbolic_output_item
              /*<<format.ml:1152:4>>*/ (sob, 0) /*<<format.ml:1152:4>>*/ ;
    }
    function h(_P_){
      /*<<format.ml:1154:4>>*/ return  /*<<format.ml:1154:4>>*/ add_symbolic_output_item
              /*<<format.ml:1154:4>>*/ (sob, 1) /*<<format.ml:1154:4>>*/ ;
    }
    function i(n){
      /*<<format.ml:1158:33>>*/ return  /*<<format.ml:1158:33>>*/ add_symbolic_output_item
              /*<<format.ml:1158:33>>*/ (sob, [1, n]) /*<<format.ml:1158:33>>*/ ;
    }
    function j(n){
      /*<<format.ml:1160:33>>*/ return  /*<<format.ml:1160:33>>*/ add_symbolic_output_item
              /*<<format.ml:1160:33>>*/ (sob, [2, n]) /*<<format.ml:1160:33>>*/ ;
    }
     /*<<format.ml:1167:2>>*/ return  /*<<format.ml:1167:2>>*/ pp_make_formatter
             /*<<format.ml:1167:2>>*/ (f, g, h, i, j) /*<<format.ml:1167:29>>*/ ;
    /*<<format.ml:1167:29>>*/ }
   function open_hbox(v){
     /*<<format.ml:1176:18>>*/ return  /*<<format.ml:1176:18>>*/ pp_open_hbox
             /*<<format.ml:1176:18>>*/ ( /*<<format.ml:1176:31>>*/ caml_call1
               /*<<format.ml:1176:31>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1176:60>>*/ ;
    /*<<format.ml:1176:60>>*/ }
   function open_vbox(v){
     /*<<format.ml:1177:18>>*/ return  /*<<format.ml:1177:18>>*/ pp_open_vbox
             /*<<format.ml:1177:18>>*/ ( /*<<format.ml:1177:31>>*/ caml_call1
               /*<<format.ml:1177:31>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1177:60>>*/ ;
    /*<<format.ml:1177:60>>*/ }
   function open_hvbox(v){
     /*<<format.ml:1178:19>>*/ return  /*<<format.ml:1178:19>>*/ pp_open_hvbox
             /*<<format.ml:1178:19>>*/ ( /*<<format.ml:1178:33>>*/ caml_call1
               /*<<format.ml:1178:33>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1178:62>>*/ ;
    /*<<format.ml:1178:62>>*/ }
   function open_hovbox(v){
     /*<<format.ml:1179:20>>*/ return  /*<<format.ml:1179:20>>*/ pp_open_hovbox
             /*<<format.ml:1179:20>>*/ ( /*<<format.ml:1179:35>>*/ caml_call1
               /*<<format.ml:1179:35>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1179:64>>*/ ;
    /*<<format.ml:1179:64>>*/ }
   function open_box(v){
     /*<<format.ml:1180:17>>*/ return  /*<<format.ml:1180:17>>*/ pp_open_box
             /*<<format.ml:1180:17>>*/ ( /*<<format.ml:1180:29>>*/ caml_call1
               /*<<format.ml:1180:29>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1180:58>>*/ ;
    /*<<format.ml:1180:58>>*/ }
   function close_box(v){
     /*<<format.ml:1181:18>>*/ return  /*<<format.ml:1181:18>>*/ pp_close_box
             /*<<format.ml:1181:18>>*/ ( /*<<format.ml:1181:31>>*/ caml_call1
               /*<<format.ml:1181:31>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1181:60>>*/ ;
    /*<<format.ml:1181:60>>*/ }
   function open_stag(v){
     /*<<format.ml:1182:18>>*/ return  /*<<format.ml:1182:18>>*/ pp_open_stag
             /*<<format.ml:1182:18>>*/ ( /*<<format.ml:1182:31>>*/ caml_call1
               /*<<format.ml:1182:31>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1182:60>>*/ ;
    /*<<format.ml:1182:60>>*/ }
   function close_stag(v){
     /*<<format.ml:1183:19>>*/ return  /*<<format.ml:1183:19>>*/ pp_close_stag
             /*<<format.ml:1183:19>>*/ ( /*<<format.ml:1183:33>>*/ caml_call1
               /*<<format.ml:1183:33>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1183:62>>*/ ;
    /*<<format.ml:1183:62>>*/ }
   function print_as(isize, w){
    var
     state =
        /*<<format.ml:1184:31>>*/  /*<<format.ml:1184:31>>*/ caml_call1
         /*<<format.ml:1184:31>>*/ (Stdlib_Domain[10][2], std_formatter_key);
     /*<<format.ml:630:2>>*/ return  /*<<format.ml:630:2>>*/ pp_print_as_size
             /*<<format.ml:630:2>>*/ (state, isize, w) /*<<format.ml:1184:62>>*/ ;
    /*<<format.ml:1184:62>>*/ }
   function print_string(v){
     /*<<format.ml:1185:21>>*/ return  /*<<format.ml:1185:21>>*/ pp_print_string
             /*<<format.ml:1185:21>>*/ ( /*<<format.ml:1185:37>>*/ caml_call1
               /*<<format.ml:1185:37>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1185:66>>*/ ;
    /*<<format.ml:1185:66>>*/ }
   function print_bytes(v){
     /*<<format.ml:1186:20>>*/ return  /*<<format.ml:1186:20>>*/ pp_print_bytes
             /*<<format.ml:1186:20>>*/ ( /*<<format.ml:1186:35>>*/ caml_call1
               /*<<format.ml:1186:35>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1186:64>>*/ ;
    /*<<format.ml:1186:64>>*/ }
   function print_int(v){
     /*<<format.ml:1187:18>>*/ return  /*<<format.ml:1187:18>>*/ pp_print_int
             /*<<format.ml:1187:18>>*/ ( /*<<format.ml:1187:31>>*/ caml_call1
               /*<<format.ml:1187:31>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1187:60>>*/ ;
    /*<<format.ml:1187:60>>*/ }
   function print_float(v){
     /*<<format.ml:1188:20>>*/ return  /*<<format.ml:1188:20>>*/ pp_print_float
             /*<<format.ml:1188:20>>*/ ( /*<<format.ml:1188:35>>*/ caml_call1
               /*<<format.ml:1188:35>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1188:64>>*/ ;
    /*<<format.ml:1188:64>>*/ }
   function print_char(v){
     /*<<format.ml:1189:19>>*/ return  /*<<format.ml:1189:19>>*/ pp_print_char
             /*<<format.ml:1189:19>>*/ ( /*<<format.ml:1189:33>>*/ caml_call1
               /*<<format.ml:1189:33>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1189:62>>*/ ;
    /*<<format.ml:1189:62>>*/ }
   function print_bool(v){
     /*<<format.ml:1190:19>>*/ return  /*<<format.ml:1190:19>>*/ pp_print_bool
             /*<<format.ml:1190:19>>*/ ( /*<<format.ml:1190:33>>*/ caml_call1
               /*<<format.ml:1190:33>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1190:62>>*/ ;
    /*<<format.ml:1190:62>>*/ }
   function print_break(v, w){
     /*<<format.ml:1191:22>>*/ return  /*<<format.ml:1191:22>>*/ pp_print_break
             /*<<format.ml:1191:22>>*/ ( /*<<format.ml:1191:37>>*/ caml_call1
               /*<<format.ml:1191:37>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v,
             w) /*<<format.ml:1191:68>>*/ ;
    /*<<format.ml:1191:68>>*/ }
   function print_cut(v){
     /*<<format.ml:1192:18>>*/ return  /*<<format.ml:1192:18>>*/ pp_print_cut
             /*<<format.ml:1192:18>>*/ ( /*<<format.ml:1192:31>>*/ caml_call1
               /*<<format.ml:1192:31>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1192:60>>*/ ;
    /*<<format.ml:1192:60>>*/ }
   function print_space(v){
     /*<<format.ml:1193:20>>*/ return  /*<<format.ml:1193:20>>*/ pp_print_space
             /*<<format.ml:1193:20>>*/ ( /*<<format.ml:1193:35>>*/ caml_call1
               /*<<format.ml:1193:35>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1193:64>>*/ ;
    /*<<format.ml:1193:64>>*/ }
   function force_newline(v){
     /*<<format.ml:1194:22>>*/ return  /*<<format.ml:1194:22>>*/ pp_force_newline
             /*<<format.ml:1194:22>>*/ ( /*<<format.ml:1194:39>>*/ caml_call1
               /*<<format.ml:1194:39>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1194:68>>*/ ;
    /*<<format.ml:1194:68>>*/ }
   function print_flush(v){
     /*<<format.ml:1195:20>>*/ return  /*<<format.ml:1195:20>>*/ pp_print_flush
             /*<<format.ml:1195:20>>*/ ( /*<<format.ml:1195:35>>*/ caml_call1
               /*<<format.ml:1195:35>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1195:64>>*/ ;
    /*<<format.ml:1195:64>>*/ }
   function print_newline(v){
     /*<<format.ml:1196:22>>*/ return  /*<<format.ml:1196:22>>*/ pp_print_newline
             /*<<format.ml:1196:22>>*/ ( /*<<format.ml:1196:39>>*/ caml_call1
               /*<<format.ml:1196:39>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1196:68>>*/ ;
    /*<<format.ml:1196:68>>*/ }
   function print_if_newline(v){
     /*<<format.ml:1197:25>>*/ return  /*<<format.ml:1197:25>>*/ pp_print_if_newline
             /*<<format.ml:1197:25>>*/ ( /*<<format.ml:1197:45>>*/ caml_call1
               /*<<format.ml:1197:45>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1197:74>>*/ ;
    /*<<format.ml:1197:74>>*/ }
   function open_tbox(v){
     /*<<format.ml:1199:18>>*/ return  /*<<format.ml:1199:18>>*/ pp_open_tbox
             /*<<format.ml:1199:18>>*/ ( /*<<format.ml:1199:31>>*/ caml_call1
               /*<<format.ml:1199:31>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1199:60>>*/ ;
    /*<<format.ml:1199:60>>*/ }
   function close_tbox(v){
     /*<<format.ml:1200:19>>*/ return  /*<<format.ml:1200:19>>*/ pp_close_tbox
             /*<<format.ml:1200:19>>*/ ( /*<<format.ml:1200:33>>*/ caml_call1
               /*<<format.ml:1200:33>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1200:62>>*/ ;
    /*<<format.ml:1200:62>>*/ }
   function print_tbreak(v, w){
     /*<<format.ml:1201:23>>*/ return  /*<<format.ml:1201:23>>*/ pp_print_tbreak
             /*<<format.ml:1201:23>>*/ ( /*<<format.ml:1201:39>>*/ caml_call1
               /*<<format.ml:1201:39>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v,
             w) /*<<format.ml:1201:70>>*/ ;
    /*<<format.ml:1201:70>>*/ }
   function set_tab(v){
     /*<<format.ml:1203:16>>*/ return  /*<<format.ml:1203:16>>*/ pp_set_tab
             /*<<format.ml:1203:16>>*/ ( /*<<format.ml:1203:27>>*/ caml_call1
               /*<<format.ml:1203:27>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1203:56>>*/ ;
    /*<<format.ml:1203:56>>*/ }
   function print_tab(v){
     /*<<format.ml:1204:18>>*/ return  /*<<format.ml:1204:18>>*/ pp_print_tab
             /*<<format.ml:1204:18>>*/ ( /*<<format.ml:1204:31>>*/ caml_call1
               /*<<format.ml:1204:31>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1204:60>>*/ ;
    /*<<format.ml:1204:60>>*/ }
   function set_margin(v){
     /*<<format.ml:1206:19>>*/ return  /*<<format.ml:1206:19>>*/ pp_set_margin
             /*<<format.ml:1206:19>>*/ ( /*<<format.ml:1206:33>>*/ caml_call1
               /*<<format.ml:1206:33>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1206:62>>*/ ;
    /*<<format.ml:1206:62>>*/ }
   function get_margin(v){
    var
     state =
        /*<<format.ml:1207:33>>*/  /*<<format.ml:1207:33>>*/ caml_call1
         /*<<format.ml:1207:33>>*/ (Stdlib_Domain[10][2], std_formatter_key);
    return state[6];
    /*<<format.ml:1207:62>>*/ }
   function set_max_indent(v){
     /*<<format.ml:1209:23>>*/ return  /*<<format.ml:1209:23>>*/ pp_set_max_indent
             /*<<format.ml:1209:23>>*/ ( /*<<format.ml:1209:41>>*/ caml_call1
               /*<<format.ml:1209:41>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1209:70>>*/ ;
    /*<<format.ml:1209:70>>*/ }
   function get_max_indent(v){
    var
     state =
        /*<<format.ml:1210:41>>*/  /*<<format.ml:1210:41>>*/ caml_call1
         /*<<format.ml:1210:41>>*/ (Stdlib_Domain[10][2], std_formatter_key);
    return state[8];
    /*<<format.ml:1210:70>>*/ }
   function set_geometry(max_indent, margin){
     /*<<format.ml:1213:2>>*/ return  /*<<format.ml:1213:2>>*/ pp_set_geometry
             /*<<format.ml:1213:2>>*/ ( /*<<format.ml:1213:18>>*/ caml_call1
               /*<<format.ml:1213:18>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             max_indent,
             margin) /*<<format.ml:1213:65>>*/ ;
    /*<<format.ml:1213:65>>*/ }
   function safe_set_geometry(max_indent, margin){
     /*<<format.ml:1215:2>>*/ return  /*<<format.ml:1215:2>>*/ pp_safe_set_geometry
             /*<<format.ml:1215:2>>*/ ( /*<<format.ml:1215:23>>*/ caml_call1
               /*<<format.ml:1215:23>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             max_indent,
             margin) /*<<format.ml:1215:70>>*/ ;
    /*<<format.ml:1215:70>>*/ }
   function get_geometry(v){
     /*<<format.ml:1216:21>>*/ return  /*<<format.ml:1216:21>>*/ pp_get_geometry
             /*<<format.ml:1216:21>>*/ ( /*<<format.ml:1216:37>>*/ caml_call1
               /*<<format.ml:1216:37>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1216:66>>*/ ;
    /*<<format.ml:1216:66>>*/ }
   function update_geometry(v){
     /*<<format.ml:1217:24>>*/ return  /*<<format.ml:1217:24>>*/ pp_update_geometry
             /*<<format.ml:1217:24>>*/ ( /*<<format.ml:1217:43>>*/ caml_call1
               /*<<format.ml:1217:43>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1217:72>>*/ ;
    /*<<format.ml:1217:72>>*/ }
   function set_max_boxes(v){
     /*<<format.ml:1219:22>>*/ return  /*<<format.ml:1219:22>>*/ pp_set_max_boxes
             /*<<format.ml:1219:22>>*/ ( /*<<format.ml:1219:39>>*/ caml_call1
               /*<<format.ml:1219:39>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1219:68>>*/ ;
    /*<<format.ml:1219:68>>*/ }
   function get_max_boxes(v){
    var
     state =
        /*<<format.ml:1220:39>>*/  /*<<format.ml:1220:39>>*/ caml_call1
         /*<<format.ml:1220:39>>*/ (Stdlib_Domain[10][2], std_formatter_key);
    return state[15];
    /*<<format.ml:1220:68>>*/ }
   function over_max_boxes(v){
     /*<<format.ml:1221:23>>*/ return  /*<<format.ml:1221:23>>*/ pp_over_max_boxes
             /*<<format.ml:1221:23>>*/ ( /*<<format.ml:1221:41>>*/ caml_call1
               /*<<format.ml:1221:41>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1221:70>>*/ ;
    /*<<format.ml:1221:70>>*/ }
   function set_ellipsis_text(v){
     /*<<format.ml:1223:26>>*/ return  /*<<format.ml:1223:26>>*/ pp_set_ellipsis_text
             /*<<format.ml:1223:26>>*/ ( /*<<format.ml:1223:47>>*/ caml_call1
               /*<<format.ml:1223:47>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1223:76>>*/ ;
    /*<<format.ml:1223:76>>*/ }
   function get_ellipsis_text(v){
    var
     state =
        /*<<format.ml:1224:47>>*/  /*<<format.ml:1224:47>>*/ caml_call1
         /*<<format.ml:1224:47>>*/ (Stdlib_Domain[10][2], std_formatter_key);
    return state[16];
    /*<<format.ml:1224:76>>*/ }
   function set_formatter_out_channel(v){
     /*<<format.ml:1227:2>>*/ return  /*<<format.ml:1227:2>>*/ pp_set_formatter_out_channel
             /*<<format.ml:1227:2>>*/ ( /*<<format.ml:1227:31>>*/ caml_call1
               /*<<format.ml:1227:31>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1227:60>>*/ ;
    /*<<format.ml:1227:60>>*/ }
   function set_formatter_out_functions(v){
     /*<<format.ml:1230:2>>*/ return  /*<<format.ml:1230:2>>*/ pp_set_formatter_out_functions
             /*<<format.ml:1230:2>>*/ ( /*<<format.ml:1230:33>>*/ caml_call1
               /*<<format.ml:1230:33>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1230:62>>*/ ;
    /*<<format.ml:1230:62>>*/ }
   function get_formatter_out_functions(v){
     /*<<format.ml:1232:2>>*/ return  /*<<format.ml:1232:2>>*/ pp_get_formatter_out_functions
             /*<<format.ml:1232:2>>*/ ( /*<<format.ml:1232:33>>*/ caml_call1
               /*<<format.ml:1232:33>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1232:62>>*/ ;
    /*<<format.ml:1232:62>>*/ }
   function set_formatter_output_functions(v, w){
     /*<<format.ml:1235:2>>*/ return  /*<<format.ml:1235:2>>*/ pp_set_formatter_output_functi
             /*<<format.ml:1235:2>>*/ ( /*<<format.ml:1235:36>>*/ caml_call1
               /*<<format.ml:1235:36>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v,
             w) /*<<format.ml:1235:67>>*/ ;
    /*<<format.ml:1235:67>>*/ }
   function get_formatter_output_functions(v){
     /*<<format.ml:1237:2>>*/ return  /*<<format.ml:1237:2>>*/ pp_get_formatter_output_functi
             /*<<format.ml:1237:2>>*/ ( /*<<format.ml:1237:36>>*/ caml_call1
               /*<<format.ml:1237:36>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1237:65>>*/ ;
    /*<<format.ml:1237:65>>*/ }
   function set_formatter_stag_functions(v){
     /*<<format.ml:1240:2>>*/ return  /*<<format.ml:1240:2>>*/ pp_set_formatter_stag_function
             /*<<format.ml:1240:2>>*/ ( /*<<format.ml:1240:34>>*/ caml_call1
               /*<<format.ml:1240:34>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1240:63>>*/ ;
    /*<<format.ml:1240:63>>*/ }
   function get_formatter_stag_functions(v){
     /*<<format.ml:1242:2>>*/ return  /*<<format.ml:1242:2>>*/ pp_get_formatter_stag_function
             /*<<format.ml:1242:2>>*/ ( /*<<format.ml:1242:34>>*/ caml_call1
               /*<<format.ml:1242:34>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1242:63>>*/ ;
    /*<<format.ml:1242:63>>*/ }
   function set_print_tags(v){
     /*<<format.ml:1244:2>>*/ return  /*<<format.ml:1244:2>>*/ pp_set_print_tags
             /*<<format.ml:1244:2>>*/ ( /*<<format.ml:1244:20>>*/ caml_call1
               /*<<format.ml:1244:20>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1244:49>>*/ ;
    /*<<format.ml:1244:49>>*/ }
   function get_print_tags(v){
    var
     state =
        /*<<format.ml:1246:20>>*/  /*<<format.ml:1246:20>>*/ caml_call1
         /*<<format.ml:1246:20>>*/ (Stdlib_Domain[10][2], std_formatter_key);
    return state[22];
    /*<<format.ml:1246:49>>*/ }
   function set_mark_tags(v){
     /*<<format.ml:1248:2>>*/ return  /*<<format.ml:1248:2>>*/ pp_set_mark_tags
             /*<<format.ml:1248:2>>*/ ( /*<<format.ml:1248:19>>*/ caml_call1
               /*<<format.ml:1248:19>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1248:48>>*/ ;
    /*<<format.ml:1248:48>>*/ }
   function get_mark_tags(v){
    var
     state =
        /*<<format.ml:1250:19>>*/  /*<<format.ml:1250:19>>*/ caml_call1
         /*<<format.ml:1250:19>>*/ (Stdlib_Domain[10][2], std_formatter_key);
    return state[23];
    /*<<format.ml:1250:48>>*/ }
   function set_tags(v){
     /*<<format.ml:1252:2>>*/ return  /*<<format.ml:1252:2>>*/ pp_set_tags
             /*<<format.ml:1252:2>>*/ ( /*<<format.ml:1252:14>>*/ caml_call1
               /*<<format.ml:1252:14>>*/ (Stdlib_Domain[10][2],
               std_formatter_key),
             v) /*<<format.ml:1252:43>>*/ ;
    /*<<format.ml:1252:43>>*/ }
   function pp_print_iter(opt, iter, pp_v, ppf, v){
    var
     pp_sep = opt ? opt[1] : pp_print_cut,
     is_first =  /*<<format.ml:1258:17>>*/ [0, 1];
    function pp_v$0(v){
      /*<<format.ml:1260:4>>*/ if(is_first[1])
      is_first[1] = 0;
     else
       /*<<format.ml:1260:45>>*/  /*<<format.ml:1260:45>>*/ caml_call2
        /*<<format.ml:1260:45>>*/ (pp_sep, ppf, 0);
      /*<<format.ml:1260:45>>*/ return  /*<<format.ml:1260:45>>*/ caml_call2
              /*<<format.ml:1260:45>>*/ (pp_v, ppf, v) /*<<format.ml:1261:14>>*/ ;
     /*<<format.ml:1261:14>>*/ }
     /*<<format.ml:1263:2>>*/ return  /*<<format.ml:1263:2>>*/ caml_call2
             /*<<format.ml:1263:2>>*/ (iter, pp_v$0, v) /*<<format.ml:1263:13>>*/ ;
    /*<<format.ml:1263:13>>*/ }
   function pp_print_list(opt, pp_v, ppf, v){
    var pp_sep = opt ? opt[1] : pp_print_cut;
     /*<<format.ml:1267:2>>*/ return  /*<<format.ml:1267:2>>*/ pp_print_iter
             /*<<format.ml:1267:2>>*/ ([0, pp_sep],
             Stdlib_List[18],
             pp_v,
             ppf,
             v) /*<<format.ml:1267:44>>*/ ;
    /*<<format.ml:1267:44>>*/ }
   function pp_print_array(opt, pp_v, ppf, v){
    var pp_sep = opt ? opt[1] : pp_print_cut;
     /*<<format.ml:1271:2>>*/ return  /*<<format.ml:1271:2>>*/ pp_print_iter
             /*<<format.ml:1271:2>>*/ ([0, pp_sep],
             Stdlib_Array[12],
             pp_v,
             ppf,
             v) /*<<format.ml:1271:45>>*/ ;
    /*<<format.ml:1271:45>>*/ }
   function pp_print_seq(opt, pp_v, ppf, seq){
    var pp_sep = opt ? opt[1] : pp_print_cut;
     /*<<format.ml:1275:2>>*/ return  /*<<format.ml:1275:2>>*/ pp_print_iter
             /*<<format.ml:1275:2>>*/ ([0, pp_sep],
             Stdlib_Seq[4],
             pp_v,
             ppf,
             seq) /*<<format.ml:1275:45>>*/ ;
    /*<<format.ml:1275:45>>*/ }
   function pp_print_text(ppf, s){
    var
     len = caml_ml_string_length(s),
     left =  /*<<format.ml:1280:13>>*/ [0, 0],
     right =  /*<<format.ml:1281:14>>*/ [0, 0];
    function flush(param){
      /*<<format.ml:1283:4>>*/  /*<<format.ml:1283:4>>*/ pp_print_string
       /*<<format.ml:1283:4>>*/ (ppf,
        /*<<format.ml:1283:24>>*/ caml_call3
         /*<<format.ml:1283:24>>*/ (Stdlib_String[16],
         s,
         left[1],
         right[1] - left[1] | 0));
     right[1]++;
     left[1] = right[1];
     return 0;
     /*<<format.ml:1284:31>>*/ }
    for(;;){
     if(right[1] === len){
      var _O_ = left[1] !== len ? 1 : 0;
      return _O_
              ?  /*<<format.ml:1297:23>>*/ flush /*<<format.ml:1297:23>>*/ (0)
              : _O_ /*<<format.ml:1297:31>>*/ ;
     }
     var
      match =
         /*<<format.ml:1287:10>>*/  /*<<format.ml:1287:10>>*/ runtime.caml_string_get
          /*<<format.ml:1287:10>>*/ (s, right[1]);
     if(10 === match){
       /*<<format.ml:1289:8>>*/  /*<<format.ml:1289:8>>*/ flush
        /*<<format.ml:1289:8>>*/ (0);
       /*<<format.ml:1290:8>>*/  /*<<format.ml:1290:8>>*/ pp_force_newline
        /*<<format.ml:1290:8>>*/ (ppf, 0);
     }
     else if(32 === match){
       /*<<format.ml:1292:8>>*/  /*<<format.ml:1292:8>>*/ flush
        /*<<format.ml:1292:8>>*/ (0);
       /*<<format.ml:1292:18>>*/  /*<<format.ml:1292:18>>*/ pp_print_space
        /*<<format.ml:1292:18>>*/ (ppf, 0);
     }
     else
      right[1]++;
    }
    /*<<format.ml:1297:31>>*/ }
   function pp_print_option(opt, pp_v, ppf, param){
    var
     none =
       opt
        ? opt[1]
        : function
         (_N_, param){
           /*<<format.ml:1299:41>>*/ return 0 /*<<format.ml:1299:41>>*/ ;
          /*<<format.ml:1299:43>>*/ };
    if(! param)
      /*<<format.ml:1300:10>>*/ return  /*<<format.ml:1300:10>>*/ caml_call2
              /*<<format.ml:1300:10>>*/ (none, ppf, 0) /*<<format.ml:1301:22>>*/ ;
    var v = param[1];
     /*<<format.ml:1301:12>>*/ return  /*<<format.ml:1301:12>>*/ caml_call2
             /*<<format.ml:1301:12>>*/ (pp_v, ppf, v) /*<<format.ml:1301:22>>*/ ;
    /*<<format.ml:1301:22>>*/ }
   function pp_print_result(ok, error, ppf, param){
     /*<<format.ml:1303:20>>*/ if(0 === param[0]){
     var v = param[1];
      /*<<format.ml:1304:10>>*/ return  /*<<format.ml:1304:10>>*/ caml_call2
              /*<<format.ml:1304:10>>*/ (ok, ppf, v) /*<<format.ml:1305:24>>*/ ;
    }
    var e = param[1];
     /*<<format.ml:1305:13>>*/ return  /*<<format.ml:1305:13>>*/ caml_call2
             /*<<format.ml:1305:13>>*/ (error, ppf, e) /*<<format.ml:1305:24>>*/ ;
    /*<<format.ml:1305:24>>*/ }
   function pp_print_either(left, right, ppf, param){
     /*<<format.ml:1307:20>>*/ if(0 === param[0]){
     var l = param[1];
      /*<<format.ml:1308:19>>*/ return  /*<<format.ml:1308:19>>*/ caml_call2
              /*<<format.ml:1308:19>>*/ (left, ppf, l) /*<<format.ml:1309:31>>*/ ;
    }
    var r = param[1];
     /*<<format.ml:1309:20>>*/ return  /*<<format.ml:1309:20>>*/ caml_call2
             /*<<format.ml:1309:20>>*/ (right, ppf, r) /*<<format.ml:1309:31>>*/ ;
    /*<<format.ml:1309:31>>*/ }
   function compute_tag(output, tag_acc){
    var
     buf =
        /*<<format.ml:1314:12>>*/  /*<<format.ml:1314:12>>*/ caml_call1
         /*<<format.ml:1314:12>>*/ (Stdlib_Buffer[1], 16),
     ppf =
        /*<<format.ml:1315:12>>*/  /*<<format.ml:1315:12>>*/ formatter_of_buffer
         /*<<format.ml:1315:12>>*/ (buf);
     /*<<format.ml:1316:2>>*/  /*<<format.ml:1316:2>>*/ caml_call2
      /*<<format.ml:1316:2>>*/ (output, ppf, tag_acc);
     /*<<format.ml:1317:2>>*/  /*<<format.ml:1317:2>>*/ pp_print_flush
      /*<<format.ml:1317:2>>*/ (ppf, 0);
    var
     len =
        /*<<format.ml:1318:12>>*/  /*<<format.ml:1318:12>>*/ caml_call1
         /*<<format.ml:1318:12>>*/ (Stdlib_Buffer[7], buf);
     /*<<format.ml:1319:2>>*/ return 2 <= len
            ?  /*<<format.ml:1320:7>>*/ caml_call3
               /*<<format.ml:1320:7>>*/ (Stdlib_Buffer[4],
               buf,
               1,
               len - 2 | 0)
            :  /*<<format.ml:1319:18>>*/ caml_call1
               /*<<format.ml:1319:18>>*/ (Stdlib_Buffer[2], buf) /*<<format.ml:1320:33>>*/ ;
    /*<<format.ml:1320:33>>*/ }
   function output_formatting_lit(ppf, fmting_lit){
     /*<<format.ml:1333:43>>*/ if(typeof fmting_lit === "number")
     switch(fmting_lit){
       case 0:
         /*<<format.ml:1334:33>>*/ return  /*<<format.ml:1334:33>>*/ pp_close_box
                 /*<<format.ml:1334:33>>*/ (ppf, 0) /*<<format.ml:1343:75>>*/ ;
       case 1:
         /*<<format.ml:1335:33>>*/ return  /*<<format.ml:1335:33>>*/ pp_close_stag
                 /*<<format.ml:1335:33>>*/ (ppf, 0) /*<<format.ml:1343:75>>*/ ;
       case 2:
         /*<<format.ml:1337:33>>*/ return  /*<<format.ml:1337:33>>*/ pp_print_flush
                 /*<<format.ml:1337:33>>*/ (ppf, 0) /*<<format.ml:1343:75>>*/ ;
       case 3:
         /*<<format.ml:1338:33>>*/ return  /*<<format.ml:1338:33>>*/ pp_force_newline
                 /*<<format.ml:1338:33>>*/ (ppf, 0) /*<<format.ml:1343:75>>*/ ;
       case 4:
         /*<<format.ml:1339:33>>*/ return  /*<<format.ml:1339:33>>*/ pp_print_newline
                 /*<<format.ml:1339:33>>*/ (ppf, 0) /*<<format.ml:1343:75>>*/ ;
       case 5:
         /*<<format.ml:1341:33>>*/ return  /*<<format.ml:1341:33>>*/ pp_print_char
                 /*<<format.ml:1341:33>>*/ (ppf, 64) /*<<format.ml:1343:75>>*/ ;
       default:
         /*<<format.ml:1342:33>>*/ return  /*<<format.ml:1342:33>>*/ pp_print_char
                 /*<<format.ml:1342:33>>*/ (ppf, 37) /*<<format.ml:1343:75>>*/ ;
     }
    switch(fmting_lit[0]){
      case 0:
       var offset = fmting_lit[3], width = fmting_lit[2];
        /*<<format.ml:1336:33>>*/ return  /*<<format.ml:1336:33>>*/ pp_print_break
                /*<<format.ml:1336:33>>*/ (ppf, width, offset) /*<<format.ml:1343:75>>*/ ;
      case 1:
        /*<<format.ml:1340:33>>*/ return 0 /*<<format.ml:1340:33>>*/ ;
      default:
       var c = fmting_lit[1];
        /*<<format.ml:1343:33>>*/  /*<<format.ml:1343:33>>*/ pp_print_char
         /*<<format.ml:1343:33>>*/ (ppf, 64);
        /*<<format.ml:1343:33>>*/ return  /*<<format.ml:1343:33>>*/ pp_print_char
                /*<<format.ml:1343:33>>*/ (ppf, c) /*<<format.ml:1343:75>>*/ ;
    }
    /*<<format.ml:1343:75>>*/ }
   function output_acc(ppf, acc){
     /*<<format.ml:1349:29>>*/ if(typeof acc === "number")
      /*<<format.ml:1375:32>>*/ return 0 /*<<format.ml:1375:32>>*/ ;
    a:
    {
     b:
     {
      c:
      {
       switch(acc[0]){
         case 0:
          var f = acc[2], p = acc[1];
           /*<<format.ml:1359:4>>*/  /*<<format.ml:1359:4>>*/ output_acc
            /*<<format.ml:1359:4>>*/ (ppf, p);
           /*<<format.ml:1359:4>>*/ return  /*<<format.ml:1359:4>>*/ output_formatting_lit
                   /*<<format.ml:1359:4>>*/ (ppf, f) /*<<format.ml:1375:34>>*/ ;
         case 1:
          var match = acc[2], p$0 = acc[1];
          if(0 === match[0]){
           var acc$0 = match[1];
            /*<<format.ml:1362:4>>*/  /*<<format.ml:1362:4>>*/ output_acc
             /*<<format.ml:1362:4>>*/ (ppf, p$0);
            /*<<format.ml:1363:21>>*/ return  /*<<format.ml:1363:21>>*/ pp_open_stag
                    /*<<format.ml:1363:21>>*/ (ppf,
                    [0,
                     String_tag,
                      /*<<format.ml:1363:33>>*/ compute_tag
                       /*<<format.ml:1363:33>>*/ (output_acc, acc$0)]) /*<<format.ml:1375:34>>*/ ;
          }
          var acc$1 = match[1];
           /*<<format.ml:1365:4>>*/  /*<<format.ml:1365:4>>*/ output_acc
            /*<<format.ml:1365:4>>*/ (ppf, p$0);
          var
           _E_ =
              /*<<format.ml:1366:43>>*/  /*<<format.ml:1366:43>>*/ compute_tag
               /*<<format.ml:1366:43>>*/ (output_acc, acc$1),
           match$0 =
              /*<<format.ml:1366:24>>*/  /*<<format.ml:1366:24>>*/ caml_call1
               /*<<format.ml:1366:24>>*/ (CamlinternalFormat[20], _E_),
           bty = match$0[2],
           indent = match$0[1];
           /*<<format.ml:1367:4>>*/ return  /*<<format.ml:1367:4>>*/ pp_open_box_gen
                   /*<<format.ml:1367:4>>*/ (ppf, indent, bty) /*<<format.ml:1375:34>>*/ ;
         case 2:
          var _F_ = acc[1];
          if(typeof _F_ !== "number" && 0 === _F_[0]){
           var _G_ = _F_[2];
           if(typeof _G_ !== "number" && 1 === _G_[0]){
            var s$0 = acc[2], size = _G_[2], p$2 = _F_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _F_;
          break a;
         case 3:
          var _H_ = acc[1];
          if(typeof _H_ !== "number" && 0 === _H_[0]){
           var _I_ = _H_[2];
           if(typeof _I_ !== "number" && 1 === _I_[0]){
            var c$0 = acc[2], size$0 = _I_[2], p$4 = _H_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _H_;
          break c;
         case 4:
          var _J_ = acc[1];
          if(typeof _J_ !== "number" && 0 === _J_[0]){
           var _K_ = _J_[2];
           if(typeof _K_ !== "number" && 1 === _K_[0]){
            var s$0 = acc[2], size = _K_[2], p$2 = _J_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _J_;
          break a;
         case 5:
          var _L_ = acc[1];
          if(typeof _L_ !== "number" && 0 === _L_[0]){
           var _M_ = _L_[2];
           if(typeof _M_ !== "number" && 1 === _M_[0]){
            var c$0 = acc[2], size$0 = _M_[2], p$4 = _L_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _L_;
          break c;
         case 6:
          var f$0 = acc[2], p$5 = acc[1];
           /*<<format.ml:1372:32>>*/  /*<<format.ml:1372:32>>*/ output_acc
            /*<<format.ml:1372:32>>*/ (ppf, p$5);
           /*<<format.ml:1372:32>>*/ return  /*<<format.ml:1372:32>>*/ caml_call1
                   /*<<format.ml:1372:32>>*/ (f$0, ppf) /*<<format.ml:1375:34>>*/ ;
         case 7:
          var p$6 = acc[1];
           /*<<format.ml:1373:32>>*/  /*<<format.ml:1373:32>>*/ output_acc
            /*<<format.ml:1373:32>>*/ (ppf, p$6);
           /*<<format.ml:1373:32>>*/ return  /*<<format.ml:1373:32>>*/ pp_print_flush
                   /*<<format.ml:1373:32>>*/ (ppf, 0) /*<<format.ml:1375:34>>*/ ;
         default:
          var msg = acc[2], p$7 = acc[1];
           /*<<format.ml:1374:32>>*/  /*<<format.ml:1374:32>>*/ output_acc
            /*<<format.ml:1374:32>>*/ (ppf, p$7);
           /*<<format.ml:1374:32>>*/ return  /*<<format.ml:1374:32>>*/ caml_call1
                   /*<<format.ml:1374:32>>*/ (Stdlib[1], msg) /*<<format.ml:1375:34>>*/ ;
       }
        /*<<format.ml:1356:4>>*/  /*<<format.ml:1356:4>>*/ output_acc
         /*<<format.ml:1356:4>>*/ (ppf, p$4);
        /*<<format.ml:1357:44>>*/ return  /*<<format.ml:1357:44>>*/ pp_print_as_size
                /*<<format.ml:1357:44>>*/ (ppf,
                size$0,
                 /*<<format.ml:1357:44>>*/ caml_call2
                  /*<<format.ml:1357:44>>*/ (Stdlib_String[1], 1, c$0)) /*<<format.ml:1375:34>>*/ ;
      }
       /*<<format.ml:1371:32>>*/  /*<<format.ml:1371:32>>*/ output_acc
        /*<<format.ml:1371:32>>*/ (ppf, p$3);
       /*<<format.ml:1371:32>>*/ return  /*<<format.ml:1371:32>>*/ pp_print_char
               /*<<format.ml:1371:32>>*/ (ppf, c) /*<<format.ml:1375:34>>*/ ;
     }
      /*<<format.ml:1352:4>>*/  /*<<format.ml:1352:4>>*/ output_acc
       /*<<format.ml:1352:4>>*/ (ppf, p$2);
      /*<<format.ml:1352:4>>*/ return  /*<<format.ml:1352:4>>*/ pp_print_as_size
              /*<<format.ml:1352:4>>*/ (ppf, size, s$0) /*<<format.ml:1375:34>>*/ ;
    }
     /*<<format.ml:1369:32>>*/  /*<<format.ml:1369:32>>*/ output_acc
      /*<<format.ml:1369:32>>*/ (ppf, p$1);
     /*<<format.ml:1369:32>>*/ return  /*<<format.ml:1369:32>>*/ pp_print_string
             /*<<format.ml:1369:32>>*/ (ppf, s) /*<<format.ml:1375:34>>*/ ;
    /*<<format.ml:1375:34>>*/ }
   function strput_acc(ppf, acc){
     /*<<format.ml:1381:29>>*/ if(typeof acc === "number")
      /*<<format.ml:1410:32>>*/ return 0 /*<<format.ml:1410:32>>*/ ;
    a:
    {
     b:
     {
      c:
      {
       switch(acc[0]){
         case 0:
          var f = acc[2], p = acc[1];
           /*<<format.ml:1394:4>>*/  /*<<format.ml:1394:4>>*/ strput_acc
            /*<<format.ml:1394:4>>*/ (ppf, p);
           /*<<format.ml:1394:4>>*/ return  /*<<format.ml:1394:4>>*/ output_formatting_lit
                   /*<<format.ml:1394:4>>*/ (ppf, f) /*<<format.ml:1410:34>>*/ ;
         case 1:
          var match = acc[2], p$0 = acc[1];
          if(0 === match[0]){
           var acc$0 = match[1];
            /*<<format.ml:1397:4>>*/  /*<<format.ml:1397:4>>*/ strput_acc
             /*<<format.ml:1397:4>>*/ (ppf, p$0);
            /*<<format.ml:1398:21>>*/ return  /*<<format.ml:1398:21>>*/ pp_open_stag
                    /*<<format.ml:1398:21>>*/ (ppf,
                    [0,
                     String_tag,
                      /*<<format.ml:1398:33>>*/ compute_tag
                       /*<<format.ml:1398:33>>*/ (strput_acc, acc$0)]) /*<<format.ml:1410:34>>*/ ;
          }
          var acc$1 = match[1];
           /*<<format.ml:1400:4>>*/  /*<<format.ml:1400:4>>*/ strput_acc
            /*<<format.ml:1400:4>>*/ (ppf, p$0);
          var
           _v_ =
              /*<<format.ml:1401:43>>*/  /*<<format.ml:1401:43>>*/ compute_tag
               /*<<format.ml:1401:43>>*/ (strput_acc, acc$1),
           match$0 =
              /*<<format.ml:1401:24>>*/  /*<<format.ml:1401:24>>*/ caml_call1
               /*<<format.ml:1401:24>>*/ (CamlinternalFormat[20], _v_),
           bty = match$0[2],
           indent = match$0[1];
           /*<<format.ml:1402:4>>*/ return  /*<<format.ml:1402:4>>*/ pp_open_box_gen
                   /*<<format.ml:1402:4>>*/ (ppf, indent, bty) /*<<format.ml:1410:34>>*/ ;
         case 2:
          var _w_ = acc[1];
          if(typeof _w_ !== "number" && 0 === _w_[0]){
           var _x_ = _w_[2];
           if(typeof _x_ !== "number" && 1 === _x_[0]){
            var s$0 = acc[2], size = _x_[2], p$2 = _w_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _w_;
          break a;
         case 3:
          var _y_ = acc[1];
          if(typeof _y_ !== "number" && 0 === _y_[0]){
           var _z_ = _y_[2];
           if(typeof _z_ !== "number" && 1 === _z_[0]){
            var c$0 = acc[2], size$0 = _z_[2], p$4 = _y_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _y_;
          break c;
         case 4:
          var _A_ = acc[1];
          if(typeof _A_ !== "number" && 0 === _A_[0]){
           var _B_ = _A_[2];
           if(typeof _B_ !== "number" && 1 === _B_[0]){
            var s$0 = acc[2], size = _B_[2], p$2 = _A_[1];
            break b;
           }
          }
          var s = acc[2], p$1 = _A_;
          break a;
         case 5:
          var _C_ = acc[1];
          if(typeof _C_ !== "number" && 0 === _C_[0]){
           var _D_ = _C_[2];
           if(typeof _D_ !== "number" && 1 === _D_[0]){
            var c$0 = acc[2], size$0 = _D_[2], p$4 = _C_[1];
            break;
           }
          }
          var c = acc[2], p$3 = _C_;
          break c;
         case 6:
          var p$5 = acc[1];
          if(typeof p$5 !== "number" && 0 === p$5[0]){
           var match$1 = p$5[2];
           if(typeof match$1 !== "number" && 1 === match$1[0]){
            var f$1 = acc[2], size$1 = match$1[2], p$6 = p$5[1];
             /*<<format.ml:1391:4>>*/  /*<<format.ml:1391:4>>*/ strput_acc
              /*<<format.ml:1391:4>>*/ (ppf, p$6);
             /*<<format.ml:1392:44>>*/ return  /*<<format.ml:1392:44>>*/ pp_print_as_size
                     /*<<format.ml:1392:44>>*/ (ppf,
                     size$1,
                      /*<<format.ml:1392:44>>*/ caml_call1
                       /*<<format.ml:1392:44>>*/ (f$1, 0)) /*<<format.ml:1410:34>>*/ ;
           }
          }
          var f$0 = acc[2];
           /*<<format.ml:1407:32>>*/  /*<<format.ml:1407:32>>*/ strput_acc
            /*<<format.ml:1407:32>>*/ (ppf, p$5);
           /*<<format.ml:1407:70>>*/ return  /*<<format.ml:1407:70>>*/ pp_print_string
                   /*<<format.ml:1407:70>>*/ (ppf,
                    /*<<format.ml:1407:70>>*/ caml_call1
                     /*<<format.ml:1407:70>>*/ (f$0, 0)) /*<<format.ml:1410:34>>*/ ;
         case 7:
          var p$7 = acc[1];
           /*<<format.ml:1408:32>>*/  /*<<format.ml:1408:32>>*/ strput_acc
            /*<<format.ml:1408:32>>*/ (ppf, p$7);
           /*<<format.ml:1408:32>>*/ return  /*<<format.ml:1408:32>>*/ pp_print_flush
                   /*<<format.ml:1408:32>>*/ (ppf, 0) /*<<format.ml:1410:34>>*/ ;
         default:
          var msg = acc[2], p$8 = acc[1];
           /*<<format.ml:1409:32>>*/  /*<<format.ml:1409:32>>*/ strput_acc
            /*<<format.ml:1409:32>>*/ (ppf, p$8);
           /*<<format.ml:1409:32>>*/ return  /*<<format.ml:1409:32>>*/ caml_call1
                   /*<<format.ml:1409:32>>*/ (Stdlib[1], msg) /*<<format.ml:1410:34>>*/ ;
       }
        /*<<format.ml:1388:4>>*/  /*<<format.ml:1388:4>>*/ strput_acc
         /*<<format.ml:1388:4>>*/ (ppf, p$4);
        /*<<format.ml:1389:44>>*/ return  /*<<format.ml:1389:44>>*/ pp_print_as_size
                /*<<format.ml:1389:44>>*/ (ppf,
                size$0,
                 /*<<format.ml:1389:44>>*/ caml_call2
                  /*<<format.ml:1389:44>>*/ (Stdlib_String[1], 1, c$0)) /*<<format.ml:1410:34>>*/ ;
      }
       /*<<format.ml:1406:32>>*/  /*<<format.ml:1406:32>>*/ strput_acc
        /*<<format.ml:1406:32>>*/ (ppf, p$3);
       /*<<format.ml:1406:32>>*/ return  /*<<format.ml:1406:32>>*/ pp_print_char
               /*<<format.ml:1406:32>>*/ (ppf, c) /*<<format.ml:1410:34>>*/ ;
     }
      /*<<format.ml:1384:4>>*/  /*<<format.ml:1384:4>>*/ strput_acc
       /*<<format.ml:1384:4>>*/ (ppf, p$2);
      /*<<format.ml:1384:4>>*/ return  /*<<format.ml:1384:4>>*/ pp_print_as_size
              /*<<format.ml:1384:4>>*/ (ppf, size, s$0) /*<<format.ml:1410:34>>*/ ;
    }
     /*<<format.ml:1404:32>>*/  /*<<format.ml:1404:32>>*/ strput_acc
      /*<<format.ml:1404:32>>*/ (ppf, p$1);
     /*<<format.ml:1404:32>>*/ return  /*<<format.ml:1404:32>>*/ pp_print_string
             /*<<format.ml:1404:32>>*/ (ppf, s) /*<<format.ml:1410:34>>*/ ;
    /*<<format.ml:1410:34>>*/ }
   function kfprintf(k, ppf, param){
    var fmt = param[1];
     /*<<format.ml:1419:2>>*/ return  /*<<format.ml:1419:2>>*/ caml_call3
             /*<<format.ml:1419:2>>*/ (CamlinternalFormat[7],
             function(acc){
               /*<<format.ml:1420:16>>*/  /*<<format.ml:1420:16>>*/ output_acc
                /*<<format.ml:1420:16>>*/ (ppf, acc);
              return caml_call1(k, ppf) /*<<format.ml:1420:41>>*/ ;
              /*<<format.ml:1420:41>>*/ },
             0,
             fmt) /*<<format.ml:1421:18>>*/ ;
    /*<<format.ml:1421:18>>*/ }
   function ikfprintf(k, ppf, param){
    var fmt = param[1];
     /*<<format.ml:1424:2>>*/ return  /*<<format.ml:1424:2>>*/ caml_call3
             /*<<format.ml:1424:2>>*/ (CamlinternalFormat[8], k, ppf, fmt) /*<<format.ml:1424:24>>*/ ;
    /*<<format.ml:1424:24>>*/ }
   function ifprintf(ppf, param){
    var fmt = param[1];
     /*<<format.ml:1427:2>>*/ return  /*<<format.ml:1427:2>>*/ caml_call3
             /*<<format.ml:1427:2>>*/ (CamlinternalFormat[8],
             function(_u_){ /*<<?>>*/ return 0;},
             0,
             fmt) /*<<format.ml:1427:28>>*/ ;
    /*<<format.ml:1427:28>>*/ }
   function fprintf(ppf){
    function _r_(_t_){ /*<<?>>*/ return 0;}
     /*<<format.ml:1429:18>>*/ return function(_s_){
      /*<<?>>*/ return kfprintf(_r_, ppf, _s_);} /*<<format.ml:1429:18>>*/ ;
    /*<<format.ml:1429:37>>*/ }
   function printf(param){
    var fmt = param[1];
     /*<<format.ml:1432:2>>*/ return  /*<<format.ml:1432:2>>*/ caml_call3
             /*<<format.ml:1432:2>>*/ (CamlinternalFormat[7],
             function(acc){
               /*<<format.ml:1433:16>>*/ return  /*<<format.ml:1433:16>>*/ output_acc
                       /*<<format.ml:1433:16>>*/ ( /*<<format.ml:1433:27>>*/ caml_call1
                         /*<<format.ml:1433:27>>*/ (Stdlib_Domain[10][2],
                         std_formatter_key),
                       acc) /*<<format.ml:1433:58>>*/ ;
              /*<<format.ml:1433:58>>*/ },
             0,
             fmt) /*<<format.ml:1434:18>>*/ ;
    /*<<format.ml:1434:18>>*/ }
   function eprintf(param){
    var fmt = param[1];
     /*<<format.ml:1437:2>>*/ return  /*<<format.ml:1437:2>>*/ caml_call3
             /*<<format.ml:1437:2>>*/ (CamlinternalFormat[7],
             function(acc){
               /*<<format.ml:1438:16>>*/ return  /*<<format.ml:1438:16>>*/ output_acc
                       /*<<format.ml:1438:16>>*/ ( /*<<format.ml:1438:27>>*/ caml_call1
                         /*<<format.ml:1438:27>>*/ (Stdlib_Domain[10][2],
                         err_formatter_key),
                       acc) /*<<format.ml:1438:58>>*/ ;
              /*<<format.ml:1438:58>>*/ },
             0,
             fmt) /*<<format.ml:1439:18>>*/ ;
    /*<<format.ml:1439:18>>*/ }
   function kdprintf(k, param){
    var fmt = param[1];
     /*<<format.ml:1442:2>>*/ return  /*<<format.ml:1442:2>>*/ caml_call3
             /*<<format.ml:1442:2>>*/ (CamlinternalFormat[7],
             function(acc){
               /*<<format.ml:1443:16>>*/ return  /*<<format.ml:1443:18>>*/ caml_call1
                       /*<<format.ml:1443:18>>*/ (k,
                       function(ppf){
                         /*<<format.ml:1443:30>>*/ return  /*<<format.ml:1443:16>>*/ output_acc
                                 /*<<format.ml:1443:16>>*/ (ppf, acc) /*<<format.ml:1443:48>>*/ ;
                        /*<<format.ml:1443:48>>*/ }) /*<<format.ml:1443:49>>*/ ;
              /*<<format.ml:1443:49>>*/ },
             0,
             fmt) /*<<format.ml:1444:18>>*/ ;
    /*<<format.ml:1444:18>>*/ }
   function dprintf(fmt){
     /*<<format.ml:1446:18>>*/ return  /*<<format.ml:1446:18>>*/ kdprintf
             /*<<format.ml:1446:18>>*/ (function(i){
               /*<<format.ml:1446:37>>*/ return i /*<<format.ml:1446:37>>*/ ;
              /*<<format.ml:1446:38>>*/ },
             fmt) /*<<format.ml:1446:43>>*/ ;
    /*<<format.ml:1446:43>>*/ }
   function ksprintf(k, param){
    var
     fmt = param[1],
     b =
        /*<<format.ml:1449:10>>*/  /*<<format.ml:1449:10>>*/ pp_make_buffer
         /*<<format.ml:1449:10>>*/ (0),
     ppf =
        /*<<format.ml:1450:12>>*/  /*<<format.ml:1450:12>>*/ formatter_of_buffer
         /*<<format.ml:1450:12>>*/ (b);
    function k$0(acc){
      /*<<format.ml:1452:4>>*/  /*<<format.ml:1452:4>>*/ strput_acc
       /*<<format.ml:1452:4>>*/ (ppf, acc);
      /*<<format.ml:1453:6>>*/ return  /*<<format.ml:1453:6>>*/ caml_call1
              /*<<format.ml:1453:6>>*/ (k,
               /*<<format.ml:1453:6>>*/ flush_buffer_formatter
                /*<<format.ml:1453:6>>*/ (b, ppf)) /*<<format.ml:1453:36>>*/ ;
     /*<<format.ml:1453:36>>*/ }
     /*<<format.ml:1454:2>>*/ return  /*<<format.ml:1454:2>>*/ caml_call3
             /*<<format.ml:1454:2>>*/ (CamlinternalFormat[7], k$0, 0, fmt) /*<<format.ml:1454:30>>*/ ;
    /*<<format.ml:1454:30>>*/ }
   function sprintf(fmt){
     /*<<format.ml:1457:18>>*/ return  /*<<format.ml:1457:18>>*/ ksprintf
             /*<<format.ml:1457:18>>*/ (id, fmt) /*<<format.ml:1457:33>>*/ ;
    /*<<format.ml:1457:33>>*/ }
   function kasprintf(k, param){
    var
     fmt = param[1],
     b =
        /*<<format.ml:1460:10>>*/  /*<<format.ml:1460:10>>*/ pp_make_buffer
         /*<<format.ml:1460:10>>*/ (0),
     ppf =
        /*<<format.ml:1461:12>>*/  /*<<format.ml:1461:12>>*/ formatter_of_buffer
         /*<<format.ml:1461:12>>*/ (b);
    function k$0(acc){
      /*<<format.ml:1463:4>>*/  /*<<format.ml:1463:4>>*/ output_acc
       /*<<format.ml:1463:4>>*/ (ppf, acc);
      /*<<format.ml:1464:6>>*/ return  /*<<format.ml:1464:6>>*/ caml_call1
              /*<<format.ml:1464:6>>*/ (k,
               /*<<format.ml:1464:6>>*/ flush_buffer_formatter
                /*<<format.ml:1464:6>>*/ (b, ppf)) /*<<format.ml:1464:36>>*/ ;
     /*<<format.ml:1464:36>>*/ }
     /*<<format.ml:1465:2>>*/ return  /*<<format.ml:1465:2>>*/ caml_call3
             /*<<format.ml:1465:2>>*/ (CamlinternalFormat[7], k$0, 0, fmt) /*<<format.ml:1465:30>>*/ ;
    /*<<format.ml:1465:30>>*/ }
   function asprintf(fmt){
     /*<<format.ml:1468:19>>*/ return  /*<<format.ml:1468:19>>*/ kasprintf
             /*<<format.ml:1468:19>>*/ (id, fmt) /*<<format.ml:1468:35>>*/ ;
    /*<<format.ml:1468:35>>*/ }
   function flush_standard_formatters(param){
     /*<<format.ml:1473:2>>*/  /*<<format.ml:1473:2>>*/ pp_print_flush
      /*<<format.ml:1473:2>>*/ ( /*<<format.ml:1473:17>>*/ caml_call1
        /*<<format.ml:1473:17>>*/ (Stdlib_Domain[10][2], std_formatter_key),
      0);
     /*<<format.ml:1473:2>>*/ return  /*<<format.ml:1473:2>>*/ pp_print_flush
             /*<<format.ml:1473:2>>*/ ( /*<<format.ml:1474:17>>*/ caml_call1
               /*<<format.ml:1474:17>>*/ (Stdlib_Domain[10][2],
               err_formatter_key),
             0) /*<<format.ml:1474:47>>*/ ;
    /*<<format.ml:1474:47>>*/ }
    /*<<format.ml:1476:9>>*/  /*<<format.ml:1476:9>>*/ caml_call1
     /*<<format.ml:1476:9>>*/ (Stdlib[100], flush_standard_formatters);
    /*<<format.ml:1478:9>>*/  /*<<format.ml:1478:9>>*/ caml_call1
     /*<<format.ml:1478:9>>*/ (Stdlib_Domain[5],
     function(param){
       /*<<format.ml:1479:2>>*/  /*<<format.ml:1479:2>>*/ flush_standard_formatters
        /*<<format.ml:1479:2>>*/ (0);
      var
       fs =
          /*<<format.ml:1480:11>>*/  /*<<format.ml:1480:11>>*/ pp_get_formatter_out_functions
           /*<<format.ml:1480:11>>*/ (std_formatter, 0),
       _h_ = Stdlib[39];
       /*<<format.ml:1481:2>>*/  /*<<format.ml:1481:2>>*/ pp_set_formatter_out_functions
        /*<<format.ml:1481:2>>*/ (std_formatter,
        [0,
         function(_o_, _p_, _q_){
           /*<<?>>*/ return buffered_out_string(std_buf_key, _o_, _p_, _q_);
         },
         function(_n_){
           /*<<?>>*/ return buffered_out_flush(_h_, std_buf_key, _n_);
         },
         fs[3],
         fs[4],
         fs[5]]);
      var
       fs$0 =
          /*<<format.ml:1485:11>>*/  /*<<format.ml:1485:11>>*/ pp_get_formatter_out_functions
           /*<<format.ml:1485:11>>*/ (err_formatter, 0),
       _i_ = Stdlib[40];
       /*<<format.ml:1487:4>>*/ return  /*<<format.ml:1487:4>>*/ pp_set_formatter_out_functions
               /*<<format.ml:1487:4>>*/ (err_formatter,
               [0,
                function(_k_, _l_, _m_){
                  /*<<?>>*/ return buffered_out_string
                         (err_buf_key, _k_, _l_, _m_);
                },
                function(_j_){
                  /*<<?>>*/ return buffered_out_flush(_i_, err_buf_key, _j_);
                },
                fs$0[3],
                fs$0[4],
                fs$0[5]]) /*<<format.ml:1488:71>>*/ ;
      /*<<format.ml:1488:71>>*/ });
   var
    Stdlib_Format =
      [0,
       pp_open_box,
       open_box,
       pp_close_box,
       close_box,
       pp_open_hbox,
       open_hbox,
       pp_open_vbox,
       open_vbox,
       pp_open_hvbox,
       open_hvbox,
       pp_open_hovbox,
       open_hovbox,
       pp_print_string,
       print_string,
       pp_print_bytes,
       print_bytes,
       pp_print_as,
       print_as,
       pp_print_int,
       print_int,
       pp_print_float,
       print_float,
       pp_print_char,
       print_char,
       pp_print_bool,
       print_bool,
       pp_print_nothing,
       pp_print_space,
       print_space,
       pp_print_cut,
       print_cut,
       pp_print_break,
       print_break,
       pp_print_custom_break,
       pp_force_newline,
       force_newline,
       pp_print_if_newline,
       print_if_newline,
       pp_print_flush,
       print_flush,
       pp_print_newline,
       print_newline,
       pp_infinity,
       pp_set_margin,
       set_margin,
       pp_get_margin,
       get_margin,
       pp_set_max_indent,
       set_max_indent,
       pp_get_max_indent,
       get_max_indent,
       check_geometry,
       pp_set_geometry,
       set_geometry,
       pp_safe_set_geometry,
       safe_set_geometry,
       pp_update_geometry,
       update_geometry,
       pp_get_geometry,
       get_geometry,
       pp_set_max_boxes,
       set_max_boxes,
       pp_get_max_boxes,
       get_max_boxes,
       pp_over_max_boxes,
       over_max_boxes,
       pp_open_tbox,
       open_tbox,
       pp_close_tbox,
       close_tbox,
       pp_set_tab,
       set_tab,
       pp_print_tab,
       print_tab,
       pp_print_tbreak,
       print_tbreak,
       pp_set_ellipsis_text,
       set_ellipsis_text,
       pp_get_ellipsis_text,
       get_ellipsis_text,
       String_tag,
       pp_open_stag,
       open_stag,
       pp_close_stag,
       close_stag,
       pp_set_tags,
       set_tags,
       pp_set_print_tags,
       set_print_tags,
       pp_set_mark_tags,
       set_mark_tags,
       pp_get_print_tags,
       get_print_tags,
       pp_get_mark_tags,
       get_mark_tags,
       pp_set_formatter_out_channel,
       set_formatter_out_channel,
       pp_set_formatter_output_functi,
       set_formatter_output_functions,
       pp_get_formatter_output_functi,
       get_formatter_output_functions,
       pp_set_formatter_out_functions,
       set_formatter_out_functions,
       pp_get_formatter_out_functions,
       get_formatter_out_functions,
       pp_set_formatter_stag_function,
       set_formatter_stag_functions,
       pp_get_formatter_stag_function,
       get_formatter_stag_functions,
       formatter_of_out_channel,
       synchronized_formatter_of_out_,
       std_formatter,
       get_std_formatter,
       err_formatter,
       get_err_formatter,
       formatter_of_buffer,
       stdbuf,
       get_stdbuf,
       str_formatter,
       get_str_formatter,
       flush_str_formatter,
       make_formatter,
       make_synchronized_formatter,
       formatter_of_out_functions,
       make_symbolic_output_buffer,
       clear_symbolic_output_buffer,
       get_symbolic_output_buffer,
       flush_symbolic_output_buffer,
       add_symbolic_output_item,
       formatter_of_symbolic_output_b,
       pp_print_iter,
       pp_print_list,
       pp_print_array,
       pp_print_seq,
       pp_print_text,
       pp_print_option,
       pp_print_result,
       pp_print_either,
       fprintf,
       printf,
       eprintf,
       sprintf,
       asprintf,
       dprintf,
       ifprintf,
       kfprintf,
       kdprintf,
       ikfprintf,
       ksprintf,
       kasprintf];
   runtime.caml_register_global(38, Stdlib_Format, "Stdlib__Format");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Scanf
//# unitInfo: Requires: CamlinternalFormat, CamlinternalFormatBasics, Stdlib, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Int, Stdlib__Printf, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst$5 =  /*<<?>>*/ '"',
    cst$6 =  /*<<?>>*/ "-",
    cst_character =  /*<<?>>*/ "character ",
    cst_scanf_ml =  /*<<?>>*/ "scanf.ml",
    cst_scanf_bad_conversion$3 =  /*<<?>>*/ 'scanf: bad conversion "%*"',
    cst_scanning_of =  /*<<?>>*/ "scanning of ",
    caml_bytes_get =  /*<<?>>*/ runtime.caml_bytes_get,
    caml_int_of_string =  /*<<?>>*/ runtime.caml_int_of_string,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length =  /*<<?>>*/ runtime.caml_ml_string_length,
    caml_string_get =  /*<<?>>*/ runtime.caml_string_get,
    caml_trampoline =  /*<<?>>*/ runtime.caml_trampoline,
    caml_trampoline_return =  /*<<?>>*/ runtime.caml_trampoline_return,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$3 = cst$5,
    cst$4 = cst$5,
    cst$1 = cst$5,
    cst$2 = cst$5,
    cst$0 = cst$5,
    cst_not_a_valid_float_in_hexad =
      "not a valid float in hexadecimal notation",
    cst_no_dot_or_exponent_part_fo =
      "no dot or exponent part found in float token",
    cst = cst$6,
    cst_binary = "binary",
    cst_octal = "octal",
    cst_hexadecimal = "hexadecimal",
    cst_a_Char = "a Char",
    cst_a_String = "a String",
    CamlinternalFormat = global_data.CamlinternalFormat,
    CamlinternalFormatBasics = global_data.CamlinternalFormatBasics,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    null_char = 0,
    cst_unnamed_function = "unnamed function",
    cst_unnamed_character_string = "unnamed character string",
    cst_unnamed_Stdlib_input_chann = "unnamed Stdlib input channel";
   function next_char(ib){
     /*<<scanf.ml:165:4>>*/ try{
     var
      c =
         /*<<scanf.ml:166:14>>*/  /*<<scanf.ml:166:14>>*/ caml_call1
          /*<<scanf.ml:166:14>>*/ (ib[7], 0);
     ib[2] = c;
     ib[3] = 1;
     ib[4] = ib[4] + 1 | 0;
     if(10 === c) ib[5] = ib[5] + 1 | 0;
      /*<<scanf.ml:171:6>>*/ return c /*<<scanf.ml:171:6>>*/ ;
    }
    catch(_aY_){
     var _aX_ = caml_wrap_exception(_aY_);
     if(_aX_ !== Stdlib[12]) throw caml_maybe_attach_backtrace(_aX_, 0);
     ib[2] = null_char;
     ib[3] = 0;
     ib[1] = 1;
      /*<<scanf.ml:177:6>>*/ return null_char /*<<scanf.ml:177:6>>*/ ;
    }
    /*<<scanf.ml:177:7>>*/ }
   function peek_char(ib){
     /*<<scanf.ml:181:4>>*/ return ib[3]
            ? ib[2]
            :  /*<<scanf.ml:183:9>>*/ next_char /*<<scanf.ml:183:9>>*/ (ib) /*<<scanf.ml:183:21>>*/ ;
    /*<<scanf.ml:183:21>>*/ }
   function checked_peek_char(ib){
    var
     c =
        /*<<scanf.ml:192:12>>*/  /*<<scanf.ml:192:12>>*/ peek_char
         /*<<scanf.ml:192:12>>*/ (ib);
    if(ib[1])
      /*<<scanf.ml:193:22>>*/ throw  /*<<scanf.ml:193:22>>*/ caml_maybe_attach_backtrace
             /*<<scanf.ml:193:22>>*/ (Stdlib[12], 1);
     /*<<scanf.ml:194:4>>*/ return c /*<<scanf.ml:194:4>>*/ ;
    /*<<scanf.ml:194:5>>*/ }
   function end_of_input(ib){
     /*<<scanf.ml:198:4>>*/  /*<<scanf.ml:198:11>>*/ peek_char
      /*<<scanf.ml:198:11>>*/ (ib);
    return ib[1];
    /*<<scanf.ml:199:13>>*/ }
   function beginning_of_input(ib){
     /*<<scanf.ml:204:30>>*/ return 0 === ib[4] ? 1 : 0;
    /*<<scanf.ml:204:50>>*/ }
   function name_of_input(ib){
    var match = ib[9];
    if(typeof match === "number")
     return 0 === match ? cst_unnamed_function : cst_unnamed_character_string /*<<scanf.ml:211:47>>*/ ;
    if(0 === match[0])
      /*<<scanf.ml:208:26>>*/ return cst_unnamed_Stdlib_input_chann /*<<scanf.ml:208:26>>*/ ;
    var fname = match[1];
     /*<<scanf.ml:209:32>>*/ return fname /*<<scanf.ml:209:32>>*/ ;
    /*<<scanf.ml:211:47>>*/ }
   function char_count(ib){
     /*<<scanf.ml:215:4>>*/ return ib[3] ? ib[4] - 1 | 0 : ib[4] /*<<scanf.ml:217:25>>*/ ;
    /*<<scanf.ml:217:25>>*/ }
   function invalidate_current_char(ib){
     /*<<scanf.ml:224:35>>*/ ib[3] = 0;
    return 0;
    /*<<scanf.ml:224:71>>*/ }
   function token_string(ib){
    var
     token_buffer = ib[8],
     tok =
        /*<<scanf.ml:228:14>>*/  /*<<scanf.ml:228:14>>*/ caml_call1
         /*<<scanf.ml:228:14>>*/ (Stdlib_Buffer[2], token_buffer);
     /*<<scanf.ml:229:4>>*/  /*<<scanf.ml:229:4>>*/ caml_call1
      /*<<scanf.ml:229:4>>*/ (Stdlib_Buffer[8], token_buffer);
    ib[6] = ib[6] + 1 | 0;
     /*<<scanf.ml:231:4>>*/ return tok /*<<scanf.ml:231:4>>*/ ;
    /*<<scanf.ml:231:7>>*/ }
   function ignore_char(width, ib){
    var width$0 = width - 1 | 0;
     /*<<scanf.ml:237:4>>*/  /*<<scanf.ml:237:4>>*/ invalidate_current_char
      /*<<scanf.ml:237:4>>*/ (ib);
     /*<<scanf.ml:237:4>>*/ return width$0 /*<<scanf.ml:237:4>>*/ ;
    /*<<scanf.ml:241:53>>*/ }
   function store_char(width, ib, c){
     /*<<scanf.ml:244:4>>*/  /*<<scanf.ml:244:4>>*/ caml_call2
      /*<<scanf.ml:244:4>>*/ (Stdlib_Buffer[12], ib[8], c);
     /*<<scanf.ml:244:4>>*/ return  /*<<scanf.ml:244:4>>*/ ignore_char
             /*<<scanf.ml:244:4>>*/ (width, ib) /*<<scanf.ml:245:24>>*/ ;
    /*<<scanf.ml:245:24>>*/ }
   var default_token_buffer_size =  /*<<scanf.ml:243:17>>*/ 1024;
   function create(iname, next){
     /*<<scanf.ml:250:26>>*/ return [0,
            0,
            null_char,
            0,
            0,
            0,
            0,
            next,
             /*<<scanf.ml:258:22>>*/ caml_call1
              /*<<scanf.ml:258:22>>*/ (Stdlib_Buffer[1],
              default_token_buffer_size),
            iname] /*<<scanf.ml:250:26>>*/ ;
    /*<<scanf.ml:260:3>>*/ }
   function from_string(s){
    var
     i =  /*<<scanf.ml:264:12>>*/ [0, 0],
     len =
        /*<<scanf.ml:265:4>>*/  /*<<scanf.ml:265:4>>*/ caml_ml_string_length
         /*<<scanf.ml:265:4>>*/ (s);
    function next(param){
      /*<<scanf.ml:267:6>>*/ if(len <= i[1])
       /*<<scanf.ml:267:24>>*/ throw  /*<<scanf.ml:267:24>>*/ caml_maybe_attach_backtrace
              /*<<scanf.ml:267:24>>*/ (Stdlib[12], 1);
     var
      c =
         /*<<scanf.ml:268:14>>*/  /*<<scanf.ml:268:14>>*/ caml_string_get
          /*<<scanf.ml:268:14>>*/ (s, i[1]);
      /*<<scanf.ml:269:6>>*/ i[1]++;
      /*<<scanf.ml:270:6>>*/ return c /*<<scanf.ml:270:6>>*/ ;
     /*<<scanf.ml:270:7>>*/ }
     /*<<scanf.ml:271:4>>*/ return  /*<<scanf.ml:271:4>>*/ create
             /*<<scanf.ml:271:4>>*/ (1, next) /*<<scanf.ml:271:27>>*/ ;
    /*<<scanf.ml:271:27>>*/ }
   var _a_ =  /*<<scanf.ml:263:18>>*/ 0;
   function from_function(_aW_){ /*<<?>>*/ return create(_a_, _aW_);}
   var len =  /*<<scanf.ml:274:22>>*/ 1024;
   function scan_close_at_end(ic){
     /*<<scanf.ml:320:29>>*/  /*<<scanf.ml:320:29>>*/ caml_call1
      /*<<scanf.ml:320:29>>*/ (Stdlib[93], ic);
     /*<<scanf.ml:320:49>>*/ throw  /*<<scanf.ml:320:49>>*/ caml_maybe_attach_backtrace
            /*<<scanf.ml:320:49>>*/ (Stdlib[12], 1);
    /*<<scanf.ml:320:66>>*/ }
   function scan_raise_at_end(ic){
     /*<<scanf.ml:324:30>>*/ throw  /*<<scanf.ml:324:30>>*/ caml_maybe_attach_backtrace
            /*<<scanf.ml:324:30>>*/ (Stdlib[12], 1);
    /*<<scanf.ml:324:47>>*/ }
   function from_ic(scan_close_ic, iname, ic){
    var
     buf =
        /*<<scanf.ml:328:14>>*/  /*<<scanf.ml:328:14>>*/ runtime.caml_create_bytes
         /*<<scanf.ml:328:14>>*/ (1024),
     i =  /*<<scanf.ml:329:12>>*/ [0, 0],
     lim =  /*<<scanf.ml:330:14>>*/ [0, 0],
     eof =  /*<<scanf.ml:331:14>>*/ [0, 0];
    function next(param){
      /*<<scanf.ml:333:6>>*/ if(i[1] < lim[1]){
      var
       c =
          /*<<scanf.ml:333:38>>*/  /*<<scanf.ml:333:38>>*/ caml_bytes_get
           /*<<scanf.ml:333:38>>*/ (buf, i[1]);
       /*<<scanf.ml:333:58>>*/ i[1]++;
       /*<<scanf.ml:333:66>>*/ return c /*<<scanf.ml:333:66>>*/ ;
     }
     if(eof[1])
       /*<<scanf.ml:334:19>>*/ throw  /*<<scanf.ml:334:19>>*/ caml_maybe_attach_backtrace
              /*<<scanf.ml:334:19>>*/ (Stdlib[12], 1);
     lim[1] =
       /*<<scanf.ml:335:15>>*/ caml_call4
        /*<<scanf.ml:335:15>>*/ (Stdlib[84], ic, buf, 0, len);
     return 0 === lim[1]
             ? (eof[1] = 1, caml_call1(scan_close_ic, ic))
             : (i
                [1]
               = 1,
                /*<<scanf.ml:338:10>>*/ caml_bytes_get
                 /*<<scanf.ml:338:10>>*/ (buf, 0)) /*<<scanf.ml:340:9>>*/ ;
     /*<<scanf.ml:340:9>>*/ }
     /*<<scanf.ml:341:4>>*/ return  /*<<scanf.ml:341:4>>*/ create
             /*<<scanf.ml:341:4>>*/ (iname, next) /*<<scanf.ml:341:21>>*/ ;
    /*<<scanf.ml:341:21>>*/ }
   var
    stdin =
       /*<<scanf.ml:363:4>>*/  /*<<scanf.ml:363:4>>*/ from_ic
        /*<<scanf.ml:363:4>>*/ (scan_raise_at_end,
        [1, cst, Stdlib[38]],
        Stdlib[38]);
   function open_in_file(open_in, fname){
     /*<<scanf.ml:367:4>>*/ if(fname === cst$6)
      /*<<scanf.ml:363:4>>*/ return stdin /*<<scanf.ml:363:4>>*/ ;
    var
     ic =
        /*<<scanf.ml:370:15>>*/  /*<<scanf.ml:370:15>>*/ caml_call1
         /*<<scanf.ml:370:15>>*/ (open_in, fname);
    return from_ic(scan_close_at_end, [1, fname, ic], ic) /*<<scanf.ml:371:53>>*/ ;
    /*<<scanf.ml:371:53>>*/ }
   var _b_ =  /*<<scanf.ml:366:19>>*/ Stdlib[79];
   function open_in(_aV_){ /*<<?>>*/ return open_in_file(_b_, _aV_);}
   var _c_ =  /*<<scanf.ml:374:16>>*/ Stdlib[80];
   function open_in_bin(_aU_){ /*<<?>>*/ return open_in_file(_c_, _aU_);}
   function from_channel(ic){
     /*<<scanf.ml:381:4>>*/ return from_ic(scan_raise_at_end, [0, ic], ic) /*<<scanf.ml:381:45>>*/ ;
    /*<<scanf.ml:381:45>>*/ }
   function close_in(ib){
    var match = ib[9];
    if(typeof match === "number")
      /*<<scanf.ml:389:37>>*/ return 0 /*<<scanf.ml:389:37>>*/ ;
    if(0 === match[0]){
     var ic = match[1];
      /*<<scanf.ml:387:6>>*/ return  /*<<scanf.ml:387:6>>*/ caml_call1
              /*<<scanf.ml:387:6>>*/ (Stdlib[93], ic) /*<<scanf.ml:389:39>>*/ ;
    }
    var ic$0 = match[2];
     /*<<scanf.ml:388:32>>*/ return  /*<<scanf.ml:388:32>>*/ caml_call1
             /*<<scanf.ml:388:32>>*/ (Stdlib[93], ic$0) /*<<scanf.ml:389:39>>*/ ;
    /*<<scanf.ml:389:39>>*/ }
   var
    Scan_failure =
       /*<<scanf.ml:403:0>>*/ [248,
       "Stdlib.Scanf.Scan_failure",
       runtime.caml_fresh_oo_id(0)],
    _d_ =
      [0,
       [11, "illegal escape character ", [1, 0]],
       "illegal escape character %C"],
    _e_ =
      [0,
       [11,
        cst_scanning_of,
        [2,
         0,
         [11, " failed: the specified length was too short for token", 0]]],
       "scanning of %s failed: the specified length was too short for token"],
    _f_ =
      [0,
       [11,
        cst_scanning_of,
        [2,
         0,
         [11,
          " failed: premature end of file occurred before end of token",
          0]]],
       "scanning of %s failed: premature end of file occurred before end of token"],
    _g_ =
      [0,
       [11, "looking for ", [1, [11, ", found ", [1, 0]]]],
       "looking for %C, found %C"],
    _h_ =
      [0,
       [11, "invalid boolean '", [2, 0, [12, 39, 0]]],
       "invalid boolean '%s'"],
    _i_ = [0, cst_scanf_ml, 516, 9],
    cst_0b = "0b",
    cst_0o = "0o",
    cst_0u = "0u",
    cst_0x = "0x",
    cst_decimal_digits = "decimal digits",
    _j_ =
      [0,
       [11, cst_character, [1, [11, " is not a decimal digit", 0]]],
       "character %C is not a decimal digit"],
    cst_digits = "digits",
    _k_ =
      [0,
       [11,
        cst_character,
        [1, [11, " is not a valid ", [2, 0, [11, " digit", 0]]]]],
       "character %C is not a valid %s digit"],
    cst_an = "an",
    cst_nfinity = "nfinity",
    cst_x = "x",
    _l_ =
      [0,
       [11, "bad character decimal encoding \\", [0, [0, [0, 0]]]],
       "bad character decimal encoding \\%c%c%c"],
    _m_ =
      [0,
       [11, "bad character hexadecimal encoding \\", [0, [0, 0]]],
       "bad character hexadecimal encoding \\%c%c"],
    _n_ =
      [0,
       [11, "the character ", [1, [11, " cannot start a boolean", 0]]],
       "the character %C cannot start a boolean"],
    _o_ =
      [0,
       [11,
        "scanf: bad input at char number ",
        [4, 3, 0, 0, [11, ": ", [2, 0, 0]]]],
       "scanf: bad input at char number %i: %s"],
    _p_ = [0, 37, ""],
    _q_ = [0, 123],
    _r_ = [0, 91],
    cst_end_of_input_not_found = "end of input not found",
    cst_scanf_bad_conversion_a = 'scanf: bad conversion "%a"',
    cst_scanf_bad_conversion_t = 'scanf: bad conversion "%t"',
    cst_scanf_missing_reader = "scanf: missing reader",
    _s_ = [0, cst_scanf_ml, 1414, 13],
    cst_scanf_bad_conversion_custo =
      'scanf: bad conversion "%?" (custom converter)',
    cst_scanf_bad_conversion = cst_scanf_bad_conversion$3,
    cst_scanf_bad_conversion$0 = cst_scanf_bad_conversion$3,
    cst_scanf_bad_conversion$1 = 'scanf: bad conversion "%-"',
    cst_scanf_bad_conversion$2 = cst_scanf_bad_conversion$3,
    cst_in_format = ' in format "',
    _t_ = [0, [3, 0, [10, 0]], "%S%!"];
   function bad_input(s){
     /*<<scanf.ml:405:18>>*/ throw  /*<<scanf.ml:405:18>>*/ caml_maybe_attach_backtrace
            /*<<scanf.ml:405:18>>*/ ([0, Scan_failure, s], 1);
    /*<<scanf.ml:405:40>>*/ }
   function bad_input_escape(c){
     /*<<scanf.ml:408:2>>*/ return  /*<<scanf.ml:408:12>>*/ bad_input
             /*<<scanf.ml:408:12>>*/ ( /*<<scanf.ml:408:12>>*/ caml_call2
               /*<<scanf.ml:408:12>>*/ (Stdlib_Printf[4], _d_, c)) /*<<scanf.ml:408:60>>*/ ;
    /*<<scanf.ml:408:60>>*/ }
   function bad_token_length(message){
     /*<<scanf.ml:412:2>>*/ return  /*<<scanf.ml:413:4>>*/ bad_input
             /*<<scanf.ml:413:4>>*/ ( /*<<scanf.ml:413:4>>*/ caml_call2
               /*<<scanf.ml:413:4>>*/ (Stdlib_Printf[4], _e_, message)) /*<<scanf.ml:416:15>>*/ ;
    /*<<scanf.ml:416:15>>*/ }
   function bad_hex_float(param){
     /*<<scanf.ml:432:2>>*/ return  /*<<scanf.ml:432:2>>*/ bad_input
             /*<<scanf.ml:432:2>>*/ (cst_not_a_valid_float_in_hexad) /*<<scanf.ml:432:55>>*/ ;
    /*<<scanf.ml:432:55>>*/ }
   function character_mismatch(c, ci){
     /*<<scanf.ml:440:2>>*/ return  /*<<scanf.ml:440:12>>*/ bad_input
             /*<<scanf.ml:440:12>>*/ ( /*<<scanf.ml:436:2>>*/ caml_call3
               /*<<scanf.ml:436:2>>*/ (Stdlib_Printf[4], _g_, c, ci)) /*<<scanf.ml:440:41>>*/ ;
    /*<<scanf.ml:440:41>>*/ }
   function check_char(ib, c$0){
     /*<<scanf.ml:468:2>>*/ if(10 === c$0){
     var
      ci =
         /*<<scanf.ml:479:11>>*/  /*<<scanf.ml:479:11>>*/ checked_peek_char
          /*<<scanf.ml:479:11>>*/ (ib);
      /*<<scanf.ml:480:2>>*/ return 10 === ci
             ?  /*<<scanf.ml:481:12>>*/ invalidate_current_char
                /*<<scanf.ml:481:12>>*/ (ib)
             : 13
               === ci
               ? ( /*<<scanf.ml:482:12>>*/ invalidate_current_char
                   /*<<scanf.ml:482:12>>*/ (ib),
                  /*<<scanf.ml:482:12>>*/ check_this_char
                   /*<<scanf.ml:482:12>>*/ (ib, 10))
               :  /*<<scanf.ml:483:9>>*/ character_mismatch
                  /*<<scanf.ml:483:9>>*/ (10, ci) /*<<scanf.ml:471:29>>*/ ;
    }
    if(32 !== c$0)
      /*<<scanf.ml:471:9>>*/ return  /*<<scanf.ml:471:9>>*/ check_this_char
              /*<<scanf.ml:471:9>>*/ (ib, c$0) /*<<scanf.ml:471:29>>*/ ;
     /*<<scanf.ml:444:2>>*/ for(;;){
     var
      c =
         /*<<scanf.ml:444:10>>*/  /*<<scanf.ml:444:10>>*/ peek_char
          /*<<scanf.ml:444:10>>*/ (ib),
      _aS_ =  /*<<scanf.ml:445:9>>*/ 1 - ib[1];
     if(! _aS_)  /*<<scanf.ml:445:9>>*/ return _aS_ /*<<scanf.ml:445:9>>*/ ;
     var _aT_ =  /*<<scanf.ml:445:32>>*/ c - 9 | 0;
     a:
     {
      if(4 < _aT_ >>> 0){
       if(23 === _aT_) break a;
      }
      else if(1 < _aT_ - 2 >>> 0) break a;
       /*<<scanf.ml:449:11>>*/ return 0 /*<<scanf.ml:449:11>>*/ ;
     }
      /*<<scanf.ml:448:6>>*/  /*<<scanf.ml:448:6>>*/ invalidate_current_char
       /*<<scanf.ml:448:6>>*/ (ib);
    }
    /*<<scanf.ml:471:29>>*/ }
   function check_this_char(ib, c){
    var
     ci =
        /*<<scanf.ml:474:11>>*/  /*<<scanf.ml:474:11>>*/ checked_peek_char
         /*<<scanf.ml:474:11>>*/ (ib);
    return ci === c
            ?  /*<<scanf.ml:475:17>>*/ invalidate_current_char
               /*<<scanf.ml:475:17>>*/ (ib)
            :  /*<<scanf.ml:476:2>>*/ character_mismatch
               /*<<scanf.ml:476:2>>*/ (c, ci) /*<<scanf.ml:476:25>>*/ ;
    /*<<scanf.ml:476:25>>*/ }
   function token_char(ib){
     /*<<scanf.ml:488:20>>*/ return  /*<<scanf.ml:488:20>>*/ caml_string_get
             /*<<scanf.ml:488:20>>*/ ( /*<<scanf.ml:488:20>>*/ token_string
               /*<<scanf.ml:488:20>>*/ (ib),
             0) /*<<scanf.ml:488:43>>*/ ;
    /*<<scanf.ml:488:43>>*/ }
   function token_bool(ib){
    var
     s =
        /*<<scanf.ml:493:8>>*/  /*<<scanf.ml:493:8>>*/ token_string
         /*<<scanf.ml:493:8>>*/ (ib);
    return s !== "false"
            ? s
              !== "true"
              ?  /*<<scanf.ml:496:19>>*/ bad_input
                 /*<<scanf.ml:496:19>>*/ ( /*<<scanf.ml:496:19>>*/ caml_call2
                   /*<<scanf.ml:496:19>>*/ (Stdlib_Printf[4], _h_, s))
              : 1
            : 0 /*<<scanf.ml:496:60>>*/ ;
    /*<<scanf.ml:496:60>>*/ }
   function integer_conversion_of_char(param){
    var switcher =  /*<<scanf.ml:509:33>>*/ param - 88 | 0;
    if(32 >= switcher >>> 0)
     switch(switcher){
       case 10:
         /*<<scanf.ml:510:11>>*/ return 0 /*<<scanf.ml:510:11>>*/ ;
       case 12:
         /*<<scanf.ml:511:11>>*/ return 1 /*<<scanf.ml:511:11>>*/ ;
       case 17:
         /*<<scanf.ml:512:11>>*/ return 2 /*<<scanf.ml:512:11>>*/ ;
       case 23:
         /*<<scanf.ml:513:11>>*/ return 3 /*<<scanf.ml:513:11>>*/ ;
       case 29:
         /*<<scanf.ml:514:11>>*/ return 4 /*<<scanf.ml:514:11>>*/ ;
       case 0:
       case 32:
         /*<<scanf.ml:515:17>>*/ return 5 /*<<scanf.ml:515:17>>*/ ;
     }
     /*<<scanf.ml:516:9>>*/ throw  /*<<scanf.ml:516:9>>*/ caml_maybe_attach_backtrace
            /*<<scanf.ml:516:9>>*/ ([0, Assert_failure, _i_], 1);
    /*<<scanf.ml:516:21>>*/ }
   function token_int_literal(conv, ib){
     /*<<scanf.ml:523:2>>*/ switch(conv){
      case 0:
       var
        _aO_ =
           /*<<scanf.ml:529:29>>*/  /*<<scanf.ml:529:29>>*/ token_string
            /*<<scanf.ml:529:29>>*/ (ib),
        tok =
           /*<<scanf.ml:529:22>>*/ caml_call2
            /*<<scanf.ml:529:22>>*/ (Stdlib[28], cst_0b, _aO_);
       break;
      case 3:
       var
        _aP_ =
           /*<<scanf.ml:527:29>>*/  /*<<scanf.ml:527:29>>*/ token_string
            /*<<scanf.ml:527:29>>*/ (ib),
        tok =
           /*<<scanf.ml:527:22>>*/ caml_call2
            /*<<scanf.ml:527:22>>*/ (Stdlib[28], cst_0o, _aP_);
       break;
      case 4:
       var
        _aQ_ =
           /*<<scanf.ml:526:29>>*/  /*<<scanf.ml:526:29>>*/ token_string
            /*<<scanf.ml:526:29>>*/ (ib),
        tok =
           /*<<scanf.ml:526:22>>*/ caml_call2
            /*<<scanf.ml:526:22>>*/ (Stdlib[28], cst_0u, _aQ_);
       break;
      case 5:
       var
        _aR_ =
           /*<<scanf.ml:528:29>>*/  /*<<scanf.ml:528:29>>*/ token_string
            /*<<scanf.ml:528:29>>*/ (ib),
        tok =
           /*<<scanf.ml:528:22>>*/ caml_call2
            /*<<scanf.ml:528:22>>*/ (Stdlib[28], cst_0x, _aR_);
       break;
      default:
       var
        tok =
           /*<<scanf.ml:525:37>>*/ token_string /*<<scanf.ml:525:37>>*/ (ib);
    }
    var
     l =
        /*<<scanf.ml:530:2>>*/  /*<<scanf.ml:530:2>>*/ caml_ml_string_length
         /*<<scanf.ml:530:2>>*/ (tok);
     /*<<scanf.ml:531:2>>*/ if
     (0 !== l
      &&
       43
       ===
         /*<<scanf.ml:531:14>>*/ caml_string_get
          /*<<scanf.ml:531:14>>*/ (tok, 0))
      /*<<scanf.ml:531:43>>*/ return  /*<<scanf.ml:531:43>>*/ caml_call3
              /*<<scanf.ml:531:43>>*/ (Stdlib_String[16], tok, 1, l - 1 | 0) /*<<scanf.ml:531:67>>*/ ;
     /*<<scanf.ml:531:34>>*/ return tok /*<<scanf.ml:531:34>>*/ ;
    /*<<scanf.ml:531:67>>*/ }
   function token_float(ib){
     /*<<scanf.ml:539:21>>*/ return  /*<<scanf.ml:539:21>>*/ runtime.caml_float_of_string
             /*<<scanf.ml:539:21>>*/ ( /*<<scanf.ml:539:37>>*/ token_string
               /*<<scanf.ml:539:37>>*/ (ib)) /*<<scanf.ml:539:56>>*/ ;
    /*<<scanf.ml:539:56>>*/ }
   function scan_decimal_digit_star(width, ib){
    var width$0 = width;
     /*<<scanf.ml:575:2>>*/ for(;;){
     if(0 === width$0)
       /*<<scanf.ml:575:20>>*/ return width$0 /*<<scanf.ml:575:20>>*/ ;
     var
      c =
         /*<<scanf.ml:576:10>>*/  /*<<scanf.ml:576:10>>*/ peek_char
          /*<<scanf.ml:576:10>>*/ (ib);
      /*<<scanf.ml:577:5>>*/ if(ib[1])
       /*<<scanf.ml:577:26>>*/ return width$0 /*<<scanf.ml:577:26>>*/ ;
     if(58 <= c){
      if(95 === c){
       var
        width$1 =
           /*<<scanf.ml:583:16>>*/  /*<<scanf.ml:583:16>>*/ ignore_char
            /*<<scanf.ml:583:16>>*/ (width$0, ib);
       width$0 = width$1;
       continue;
      }
     }
     else if(48 <= c){
      var
       width$2 =
          /*<<scanf.ml:580:16>>*/  /*<<scanf.ml:580:16>>*/ store_char
           /*<<scanf.ml:580:16>>*/ (width$0, ib, c);
      width$0 = width$2;
      continue;
     }
      /*<<scanf.ml:585:9>>*/ return width$0 /*<<scanf.ml:585:9>>*/ ;
    }
    /*<<scanf.ml:585:14>>*/ }
   function scan_decimal_digit_plus(width, ib){
     /*<<scanf.ml:589:2>>*/ if(0 === width)
      /*<<scanf.ml:589:20>>*/ return  /*<<scanf.ml:589:20>>*/ bad_token_length
              /*<<scanf.ml:589:20>>*/ (cst_decimal_digits) /*<<scanf.ml:596:70>>*/ ;
    var
     c =
        /*<<scanf.ml:590:10>>*/  /*<<scanf.ml:590:10>>*/ checked_peek_char
         /*<<scanf.ml:590:10>>*/ (ib);
    if(9 < c - 48 >>> 0)
      /*<<scanf.ml:596:14>>*/ return  /*<<scanf.ml:596:14>>*/ bad_input
              /*<<scanf.ml:596:14>>*/ ( /*<<scanf.ml:596:14>>*/ caml_call2
                /*<<scanf.ml:596:14>>*/ (Stdlib_Printf[4], _j_, c)) /*<<scanf.ml:596:70>>*/ ;
    var
     width$0 =
        /*<<scanf.ml:593:16>>*/  /*<<scanf.ml:593:16>>*/ store_char
         /*<<scanf.ml:593:16>>*/ (width, ib, c);
     /*<<scanf.ml:594:4>>*/ return  /*<<scanf.ml:594:4>>*/ scan_decimal_digit_star
             /*<<scanf.ml:594:4>>*/ (width$0, ib) /*<<scanf.ml:596:70>>*/ ;
    /*<<scanf.ml:596:70>>*/ }
   function scan_digit_plus(basis, digitp, width$2, ib){
     /*<<scanf.ml:620:2>>*/ if(0 === width$2)
      /*<<scanf.ml:620:20>>*/ return  /*<<scanf.ml:620:20>>*/ bad_token_length
              /*<<scanf.ml:620:20>>*/ (cst_digits) /*<<scanf.ml:626:77>>*/ ;
    var
     c$0 =
        /*<<scanf.ml:621:10>>*/  /*<<scanf.ml:621:10>>*/ checked_peek_char
         /*<<scanf.ml:621:10>>*/ (ib);
     /*<<scanf.ml:622:5>>*/ if
     (!
       /*<<scanf.ml:622:5>>*/ caml_call1 /*<<scanf.ml:622:5>>*/ (digitp, c$0))
      /*<<scanf.ml:626:14>>*/ return  /*<<scanf.ml:626:14>>*/ bad_input
              /*<<scanf.ml:626:14>>*/ ( /*<<scanf.ml:626:14>>*/ caml_call3
                /*<<scanf.ml:626:14>>*/ (Stdlib_Printf[4], _k_, c$0, basis)) /*<<scanf.ml:626:77>>*/ ;
    var
     width$3 =
        /*<<scanf.ml:623:16>>*/  /*<<scanf.ml:623:16>>*/ store_char
         /*<<scanf.ml:623:16>>*/ (width$2, ib, c$0),
     width = width$3;
     /*<<scanf.ml:603:4>>*/ for(;;){
     if(0 === width)
       /*<<scanf.ml:603:22>>*/ return width /*<<scanf.ml:603:22>>*/ ;
     var
      c =
         /*<<scanf.ml:604:12>>*/  /*<<scanf.ml:604:12>>*/ peek_char
          /*<<scanf.ml:604:12>>*/ (ib);
      /*<<scanf.ml:605:7>>*/ if(ib[1])
       /*<<scanf.ml:605:28>>*/ return width /*<<scanf.ml:605:28>>*/ ;
      /*<<scanf.ml:607:13>>*/ if
      ( /*<<scanf.ml:607:13>>*/ caml_call1 /*<<scanf.ml:607:13>>*/ (digitp, c)){
      var
       width$0 =
          /*<<scanf.ml:608:18>>*/  /*<<scanf.ml:608:18>>*/ store_char
           /*<<scanf.ml:608:18>>*/ (width, ib, c);
      width = width$0;
     }
     else{
      if(95 !== c)
        /*<<scanf.ml:613:11>>*/ return width /*<<scanf.ml:613:11>>*/ ;
      var
       width$1 =
          /*<<scanf.ml:611:18>>*/  /*<<scanf.ml:611:18>>*/ ignore_char
           /*<<scanf.ml:611:18>>*/ (width, ib);
      width = width$1;
     }
    }
    /*<<scanf.ml:626:77>>*/ }
   function is_binary_digit(param){
     /*<<scanf.ml:629:22>>*/ return 1 < param - 48 >>> 0 ? 0 : 1 /*<<scanf.ml:631:14>>*/ ;
    /*<<scanf.ml:631:14>>*/ }
   function is_octal_digit(param){
     /*<<scanf.ml:636:21>>*/ return 7 < param - 48 >>> 0 ? 0 : 1 /*<<scanf.ml:638:14>>*/ ;
    /*<<scanf.ml:638:14>>*/ }
   function is_hexa_digit(param){
    var _aN_ =  /*<<scanf.ml:643:20>>*/ param - 48 | 0;
    a:
    {
     if(22 < _aN_ >>> 0){
      if(5 < _aN_ - 49 >>> 0) break a;
     }
     else if(6 >= _aN_ - 10 >>> 0) break a;
      /*<<scanf.ml:644:44>>*/ return 1 /*<<scanf.ml:644:44>>*/ ;
    }
     /*<<scanf.ml:645:9>>*/ return 0 /*<<scanf.ml:645:9>>*/ ;
    /*<<scanf.ml:645:14>>*/ }
   function scan_sign(width, ib){
    var
     c =
        /*<<scanf.ml:654:10>>*/  /*<<scanf.ml:654:10>>*/ checked_peek_char
         /*<<scanf.ml:654:10>>*/ (ib),
     switcher =  /*<<scanf.ml:654:10>>*/ c - 43 | 0;
    if(2 >= switcher >>> 0)
     switch(switcher){
       case 0:
         /*<<scanf.ml:656:11>>*/ return  /*<<scanf.ml:656:11>>*/ store_char
                 /*<<scanf.ml:656:11>>*/ (width, ib, c) /*<<scanf.ml:658:14>>*/ ;
       case 1: break;
       default:
         /*<<scanf.ml:657:11>>*/ return  /*<<scanf.ml:657:11>>*/ store_char
                 /*<<scanf.ml:657:11>>*/ (width, ib, c) /*<<scanf.ml:658:14>>*/ ;
     }
     /*<<scanf.ml:658:9>>*/ return width /*<<scanf.ml:658:9>>*/ ;
    /*<<scanf.ml:658:14>>*/ }
   function scan_optionally_signed_decimal(width, ib){
    var
     width$0 =
        /*<<scanf.ml:662:14>>*/  /*<<scanf.ml:662:14>>*/ scan_sign
         /*<<scanf.ml:662:14>>*/ (width, ib);
     /*<<scanf.ml:663:2>>*/ return  /*<<scanf.ml:663:2>>*/ scan_decimal_digit_plus
             /*<<scanf.ml:663:2>>*/ (width$0, ib) /*<<scanf.ml:663:36>>*/ ;
    /*<<scanf.ml:663:36>>*/ }
   function scan_int_conversion(conv, width$1, ib){
     /*<<scanf.ml:691:2>>*/ switch(conv){
      case 0:
       return scan_digit_plus(cst_binary, is_binary_digit, width$1, ib) /*<<scanf.ml:697:49>>*/ ;
      case 1:
        /*<<scanf.ml:693:20>>*/ return  /*<<scanf.ml:693:20>>*/ scan_optionally_signed_decimal
                /*<<scanf.ml:693:20>>*/ (width$1, ib) /*<<scanf.ml:697:49>>*/ ;
      case 2:
       var
        width$0 =
           /*<<scanf.ml:686:14>>*/  /*<<scanf.ml:686:14>>*/ scan_sign
            /*<<scanf.ml:686:14>>*/ (width$1, ib),
        c =
           /*<<scanf.ml:671:8>>*/  /*<<scanf.ml:671:8>>*/ checked_peek_char
            /*<<scanf.ml:671:8>>*/ (ib);
       if(48 !== c)
         /*<<scanf.ml:682:9>>*/ return  /*<<scanf.ml:682:9>>*/ scan_decimal_digit_plus
                 /*<<scanf.ml:682:9>>*/ (width$0, ib) /*<<scanf.ml:697:49>>*/ ;
       var
        width =
           /*<<scanf.ml:673:16>>*/  /*<<scanf.ml:673:16>>*/ store_char
            /*<<scanf.ml:673:16>>*/ (width$0, ib, c);
        /*<<scanf.ml:674:4>>*/ if(0 === width)
         /*<<scanf.ml:674:22>>*/ return width /*<<scanf.ml:674:22>>*/ ;
       var
        c$0 =
           /*<<scanf.ml:675:12>>*/  /*<<scanf.ml:675:12>>*/ peek_char
            /*<<scanf.ml:675:12>>*/ (ib);
        /*<<scanf.ml:676:7>>*/ if(ib[1])
         /*<<scanf.ml:676:28>>*/ return width /*<<scanf.ml:676:28>>*/ ;
       a:
       {
        if(99 <= c$0){
         if(111 === c$0)
          return scan_digit_plus
                  (cst_octal,
                   is_octal_digit,
                    /*<<scanf.ml:679:28>>*/ store_char
                     /*<<scanf.ml:679:28>>*/ (width, ib, c$0),
                   ib) /*<<scanf.ml:697:49>>*/ ;
         if(120 === c$0) break a;
        }
        else{
         if(88 === c$0) break a;
         if(98 <= c$0)
          return scan_digit_plus
                  (cst_binary,
                   is_binary_digit,
                    /*<<scanf.ml:680:29>>*/ store_char
                     /*<<scanf.ml:680:29>>*/ (width, ib, c$0),
                   ib) /*<<scanf.ml:697:49>>*/ ;
        }
         /*<<scanf.ml:681:11>>*/ return  /*<<scanf.ml:681:11>>*/ scan_decimal_digit_star
                 /*<<scanf.ml:681:11>>*/ (width, ib) /*<<scanf.ml:697:49>>*/ ;
       }
       return scan_digit_plus
               (cst_hexadecimal,
                is_hexa_digit,
                 /*<<scanf.ml:678:40>>*/ store_char
                  /*<<scanf.ml:678:40>>*/ (width, ib, c$0),
                ib) /*<<scanf.ml:697:49>>*/ ;
      case 3:
       return scan_digit_plus(cst_octal, is_octal_digit, width$1, ib) /*<<scanf.ml:697:49>>*/ ;
      case 4:
        /*<<scanf.ml:696:20>>*/ return  /*<<scanf.ml:696:20>>*/ scan_decimal_digit_plus
                /*<<scanf.ml:696:20>>*/ (width$1, ib) /*<<scanf.ml:697:49>>*/ ;
      default:
       return scan_digit_plus(cst_hexadecimal, is_hexa_digit, width$1, ib) /*<<scanf.ml:697:49>>*/ ;
    }
    /*<<scanf.ml:697:49>>*/ }
   function scan_fractional_part(width, ib){
     /*<<scanf.ml:704:2>>*/ if(0 === width)
      /*<<scanf.ml:704:20>>*/ return width /*<<scanf.ml:704:20>>*/ ;
    var
     c =
        /*<<scanf.ml:705:10>>*/  /*<<scanf.ml:705:10>>*/ peek_char
         /*<<scanf.ml:705:10>>*/ (ib);
     /*<<scanf.ml:706:5>>*/ return ib[1]
            ? width
            : 9
              < c - 48 >>> 0
              ? width
              :  /*<<scanf.ml:709:4>>*/ scan_decimal_digit_star
                 /*<<scanf.ml:709:4>>*/ ( /*<<scanf.ml:709:28>>*/ store_char
                   /*<<scanf.ml:709:28>>*/ (width, ib, c),
                 ib) /*<<scanf.ml:710:14>>*/ ;
    /*<<scanf.ml:710:14>>*/ }
   function scan_exponent_part(width, ib){
     /*<<scanf.ml:715:2>>*/ if(0 === width)
      /*<<scanf.ml:715:20>>*/ return width /*<<scanf.ml:715:20>>*/ ;
    var
     c =
        /*<<scanf.ml:716:10>>*/  /*<<scanf.ml:716:10>>*/ peek_char
         /*<<scanf.ml:716:10>>*/ (ib);
     /*<<scanf.ml:717:5>>*/ if(ib[1])
      /*<<scanf.ml:717:26>>*/ return width /*<<scanf.ml:717:26>>*/ ;
    if(69 !== c && 101 !== c)
      /*<<scanf.ml:721:9>>*/ return width /*<<scanf.ml:721:9>>*/ ;
     /*<<scanf.ml:720:4>>*/ return  /*<<scanf.ml:720:4>>*/ scan_optionally_signed_decimal
             /*<<scanf.ml:720:4>>*/ ( /*<<scanf.ml:720:39>>*/ store_char
               /*<<scanf.ml:720:39>>*/ (width, ib, c),
             ib) /*<<scanf.ml:721:14>>*/ ;
    /*<<scanf.ml:721:14>>*/ }
   function scan_float(width$1, precision, ib){
    var
     width =
        /*<<scanf.ml:729:14>>*/  /*<<scanf.ml:729:14>>*/ scan_sign
         /*<<scanf.ml:729:14>>*/ (width$1, ib),
     width$0 =
        /*<<scanf.ml:730:2>>*/  /*<<scanf.ml:730:2>>*/ scan_decimal_digit_star
         /*<<scanf.ml:730:2>>*/ (width, ib);
     /*<<scanf.ml:766:2>>*/ if(0 === width$0)
      /*<<scanf.ml:766:20>>*/ return [0, width$0, precision] /*<<scanf.ml:766:20>>*/ ;
    var
     c =
        /*<<scanf.ml:767:10>>*/  /*<<scanf.ml:767:10>>*/ peek_char
         /*<<scanf.ml:767:10>>*/ (ib);
     /*<<scanf.ml:768:5>>*/ if(ib[1])
      /*<<scanf.ml:768:26>>*/ return [0, width$0, precision] /*<<scanf.ml:768:26>>*/ ;
    if(46 !== c)
      /*<<scanf.ml:776:4>>*/ return [0,
              /*<<scanf.ml:776:4>>*/ scan_exponent_part
               /*<<scanf.ml:776:4>>*/ (width$0, ib),
             precision] /*<<scanf.ml:776:4>>*/ ;
    var
     width$2 =
        /*<<scanf.ml:771:16>>*/  /*<<scanf.ml:771:16>>*/ store_char
         /*<<scanf.ml:771:16>>*/ (width$0, ib, c),
     precision$0 =
        /*<<scanf.ml:772:20>>*/  /*<<scanf.ml:772:20>>*/ caml_call2
         /*<<scanf.ml:772:20>>*/ (Stdlib_Int[10], width$2, precision),
     width$3 =
       width$2
       -
        (precision$0
        -
          /*<<scanf.ml:773:37>>*/ scan_fractional_part
           /*<<scanf.ml:773:37>>*/ (precision$0, ib)
        | 0)
       | 0;
     /*<<scanf.ml:774:4>>*/ return [0,
             /*<<scanf.ml:774:4>>*/ scan_exponent_part
              /*<<scanf.ml:774:4>>*/ (width$3, ib),
            precision$0] /*<<scanf.ml:774:4>>*/ ;
    /*<<scanf.ml:776:42>>*/ }
   function check_case_insensitive_string(width, ib, error, str){
    function lowercase(c){
      /*<<scanf.ml:781:4>>*/ return 25 < c - 65 >>> 0
             ? c
             : caml_call1(Stdlib[29], (c - 65 | 0) + 97 | 0) /*<<scanf.ml:784:12>>*/ ;
     /*<<scanf.ml:784:12>>*/ }
    var
     len =
        /*<<scanf.ml:785:2>>*/  /*<<scanf.ml:785:2>>*/ caml_ml_string_length
         /*<<scanf.ml:785:2>>*/ (str),
     width$0 =  /*<<scanf.ml:786:14>>*/ [0, width],
     _aK_ =  /*<<scanf.ml:787:2>>*/ len - 1 | 0,
     _aJ_ =  /*<<scanf.ml:786:14>>*/ 0;
    if(_aK_ >= 0){
     var i = _aJ_;
     for(;;){
      var
       c =
          /*<<scanf.ml:788:12>>*/  /*<<scanf.ml:788:12>>*/ peek_char
           /*<<scanf.ml:788:12>>*/ (ib),
       _aL_ =
          /*<<scanf.ml:789:22>>*/  /*<<scanf.ml:789:22>>*/ lowercase
           /*<<scanf.ml:789:22>>*/ ( /*<<scanf.ml:789:32>>*/ caml_string_get
             /*<<scanf.ml:789:32>>*/ (str, i));
      if
       ( /*<<scanf.ml:789:7>>*/ lowercase /*<<scanf.ml:789:7>>*/ (c) !== _aL_)
        /*<<scanf.ml:789:45>>*/  /*<<scanf.ml:789:45>>*/ caml_call1
         /*<<scanf.ml:789:45>>*/ (error, 0);
      if(0 === width$0[1])
        /*<<scanf.ml:790:23>>*/  /*<<scanf.ml:790:23>>*/ caml_call1
         /*<<scanf.ml:790:23>>*/ (error, 0);
      width$0[1] =
        /*<<scanf.ml:791:13>>*/ store_char
         /*<<scanf.ml:791:13>>*/ (width$0[1], ib, c);
      var _aM_ =  /*<<scanf.ml:787:2>>*/ i + 1 | 0;
      if(_aK_ === i) break;
      i = _aM_;
     }
    }
    return width$0[1];
    /*<<scanf.ml:793:8>>*/ }
   function scan_hex_float(width, precision, ib){
    var
     _aw_ = 0 === width ? 1 : 0,
     _ax_ =
       _aw_
       ||  /*<<scanf.ml:797:18>>*/ end_of_input /*<<scanf.ml:797:18>>*/ (ib);
     /*<<scanf.ml:797:18>>*/ if(_ax_)
      /*<<scanf.ml:432:2>>*/  /*<<scanf.ml:432:2>>*/ bad_input
       /*<<scanf.ml:432:2>>*/ (cst_not_a_valid_float_in_hexad);
    var
     width$0 =
        /*<<scanf.ml:798:14>>*/  /*<<scanf.ml:798:14>>*/ scan_sign
         /*<<scanf.ml:798:14>>*/ (width, ib),
     _ay_ = 0 === width$0 ? 1 : 0,
     _az_ =
       _ay_
       ||  /*<<scanf.ml:799:18>>*/ end_of_input /*<<scanf.ml:799:18>>*/ (ib);
     /*<<scanf.ml:799:18>>*/ if(_az_)
      /*<<scanf.ml:432:2>>*/  /*<<scanf.ml:432:2>>*/ bad_input
       /*<<scanf.ml:432:2>>*/ (cst_not_a_valid_float_in_hexad);
    var
     c =
        /*<<scanf.ml:800:8>>*/  /*<<scanf.ml:800:8>>*/ peek_char
         /*<<scanf.ml:800:8>>*/ (ib);
    a:
    {
     if(78 <= c){
      var switcher =  /*<<scanf.ml:800:8>>*/ c - 79 | 0;
      if(30 < switcher >>> 0){
       if(32 <= switcher) break a;
       var
        width$1 =
           /*<<scanf.ml:830:16>>*/  /*<<scanf.ml:830:16>>*/ store_char
            /*<<scanf.ml:830:16>>*/ (width$0, ib, c),
        _aA_ = 0 === width$1 ? 1 : 0,
        _aB_ =
          _aA_
          ||
            /*<<scanf.ml:831:20>>*/ end_of_input /*<<scanf.ml:831:20>>*/ (ib);
        /*<<scanf.ml:831:20>>*/ if(_aB_)
         /*<<scanf.ml:432:2>>*/  /*<<scanf.ml:432:2>>*/ bad_input
          /*<<scanf.ml:432:2>>*/ (cst_not_a_valid_float_in_hexad);
        /*<<scanf.ml:831:50>>*/ return  /*<<scanf.ml:831:50>>*/ check_case_insensitive_string
                /*<<scanf.ml:831:50>>*/ (width$1, ib, bad_hex_float, cst_an) /*<<scanf.ml:837:25>>*/ ;
      }
      if(26 !== switcher) break a;
     }
     else{
      if(48 === c){
       var
        width$3 =
           /*<<scanf.ml:802:16>>*/  /*<<scanf.ml:802:16>>*/ store_char
            /*<<scanf.ml:802:16>>*/ (width$0, ib, c),
        _aE_ = 0 === width$3 ? 1 : 0,
        _aF_ =
          _aE_
          ||
            /*<<scanf.ml:803:20>>*/ end_of_input /*<<scanf.ml:803:20>>*/ (ib);
        /*<<scanf.ml:803:20>>*/ if(_aF_)
         /*<<scanf.ml:432:2>>*/  /*<<scanf.ml:432:2>>*/ bad_input
          /*<<scanf.ml:432:2>>*/ (cst_not_a_valid_float_in_hexad);
       var
        width$4 =
           /*<<scanf.ml:804:16>>*/  /*<<scanf.ml:804:16>>*/ check_case_insensitive_string
            /*<<scanf.ml:804:16>>*/ (width$3, ib, bad_hex_float, cst_x);
        /*<<scanf.ml:805:4>>*/ if
        (0 !== width$4
         &&
          !
           /*<<scanf.ml:805:20>>*/ end_of_input /*<<scanf.ml:805:20>>*/ (ib)){
        var
         _aG_ =
            /*<<scanf.ml:806:24>>*/  /*<<scanf.ml:806:24>>*/ peek_char
             /*<<scanf.ml:806:24>>*/ (ib)
           - 46
           | 0;
        b:
        {
         c:
         {
          if(34 < _aG_ >>> 0){
           if(66 === _aG_) break c;
          }
          else if(32 < _aG_ - 1 >>> 0) break c;
          var
           width$5 =
             scan_digit_plus(cst_hexadecimal, is_hexa_digit, width$4, ib);
          break b;
         }
         var width$5 = width$4;
        }
         /*<<scanf.ml:809:6>>*/ if
         (0 !== width$5
          &&
           !
            /*<<scanf.ml:809:22>>*/ end_of_input /*<<scanf.ml:809:22>>*/ (ib)){
         var
          c$0 =
             /*<<scanf.ml:810:26>>*/  /*<<scanf.ml:810:26>>*/ peek_char
              /*<<scanf.ml:810:26>>*/ (ib);
         if(46 === c$0){
          var
           width$6 =
              /*<<scanf.ml:812:24>>*/  /*<<scanf.ml:812:24>>*/ store_char
               /*<<scanf.ml:812:24>>*/ (width$5, ib, c$0);
          b:
          {
            /*<<scanf.ml:813:12>>*/ if
            (0 !== width$6
             &&
              !
               /*<<scanf.ml:813:28>>*/ end_of_input
                /*<<scanf.ml:813:28>>*/ (ib)){
            var
             match =
                /*<<scanf.ml:814:20>>*/  /*<<scanf.ml:814:20>>*/ peek_char
                 /*<<scanf.ml:814:20>>*/ (ib);
            c:
            {
             if(80 !== match && 112 !== match){
              var
               precision$0 =
                  /*<<scanf.ml:817:32>>*/  /*<<scanf.ml:817:32>>*/ caml_call2
                   /*<<scanf.ml:817:32>>*/ (Stdlib_Int[10],
                   width$6,
                   precision),
               width$10 =
                 width$6
                 -
                  (precision$0
                  -
                   scan_digit_plus
                    (cst_hexadecimal, is_hexa_digit, precision$0, ib)
                  | 0)
                 | 0;
              break c;
             }
             var width$10 = width$6;
            }
            var width$7 = width$10;
            break b;
           }
           var width$7 = width$6;
          }
          var width$8 = width$7;
         }
         else
          var width$8 = width$5;
          /*<<scanf.ml:821:8>>*/ if
          (0 !== width$8
           &&
            !
             /*<<scanf.ml:821:24>>*/ end_of_input /*<<scanf.ml:821:24>>*/ (ib)){
          var
           c$1 =
              /*<<scanf.ml:822:16>>*/  /*<<scanf.ml:822:16>>*/ peek_char
               /*<<scanf.ml:822:16>>*/ (ib);
          if(80 !== c$1 && 112 !== c$1)
            /*<<scanf.ml:827:17>>*/ return width$8 /*<<scanf.ml:827:17>>*/ ;
          var
           width$9 =
              /*<<scanf.ml:824:24>>*/  /*<<scanf.ml:824:24>>*/ store_char
               /*<<scanf.ml:824:24>>*/ (width$8, ib, c$1),
           _aH_ = 0 === width$9 ? 1 : 0,
           _aI_ =
             _aH_
             ||
               /*<<scanf.ml:825:28>>*/ end_of_input
                /*<<scanf.ml:825:28>>*/ (ib);
           /*<<scanf.ml:825:28>>*/ if(_aI_)
            /*<<scanf.ml:432:2>>*/  /*<<scanf.ml:432:2>>*/ bad_input
             /*<<scanf.ml:432:2>>*/ (cst_not_a_valid_float_in_hexad);
           /*<<scanf.ml:825:58>>*/ return  /*<<scanf.ml:825:58>>*/ scan_optionally_signed_decimal
                   /*<<scanf.ml:825:58>>*/ (width$9, ib) /*<<scanf.ml:837:25>>*/ ;
         }
          /*<<scanf.ml:821:54>>*/ return width$8 /*<<scanf.ml:821:54>>*/ ;
        }
         /*<<scanf.ml:809:52>>*/ return width$5 /*<<scanf.ml:809:52>>*/ ;
       }
        /*<<scanf.ml:805:50>>*/ return width$4 /*<<scanf.ml:805:50>>*/ ;
      }
      if(73 !== c) break a;
     }
     var
      width$2 =
         /*<<scanf.ml:834:16>>*/  /*<<scanf.ml:834:16>>*/ store_char
          /*<<scanf.ml:834:16>>*/ (width$0, ib, c),
      _aC_ = 0 === width$2 ? 1 : 0,
      _aD_ =
        _aC_
        ||  /*<<scanf.ml:835:20>>*/ end_of_input /*<<scanf.ml:835:20>>*/ (ib);
      /*<<scanf.ml:835:20>>*/ if(_aD_)
       /*<<scanf.ml:432:2>>*/  /*<<scanf.ml:432:2>>*/ bad_input
        /*<<scanf.ml:432:2>>*/ (cst_not_a_valid_float_in_hexad);
      /*<<scanf.ml:835:50>>*/ return  /*<<scanf.ml:835:50>>*/ check_case_insensitive_string
              /*<<scanf.ml:835:50>>*/ (width$2,
              ib,
              bad_hex_float,
              cst_nfinity) /*<<scanf.ml:837:25>>*/ ;
    }
     /*<<scanf.ml:432:2>>*/ return  /*<<scanf.ml:432:2>>*/ bad_input
             /*<<scanf.ml:432:2>>*/ (cst_not_a_valid_float_in_hexad) /*<<scanf.ml:837:25>>*/ ;
    /*<<scanf.ml:837:25>>*/ }
   function scan_caml_float_rest(width, precision, ib){
    var
     _as_ = 0 === width ? 1 : 0,
     _at_ =
       _as_
       ||  /*<<scanf.ml:841:18>>*/ end_of_input /*<<scanf.ml:841:18>>*/ (ib);
     /*<<scanf.ml:841:18>>*/ if(_at_)
      /*<<scanf.ml:428:2>>*/  /*<<scanf.ml:428:2>>*/ bad_input
       /*<<scanf.ml:428:2>>*/ (cst_no_dot_or_exponent_part_fo);
    var
     width$0 =
        /*<<scanf.ml:842:14>>*/  /*<<scanf.ml:842:14>>*/ scan_decimal_digit_star
         /*<<scanf.ml:842:14>>*/ (width, ib),
     _au_ = 0 === width$0 ? 1 : 0,
     _av_ =
       _au_
       ||  /*<<scanf.ml:843:18>>*/ end_of_input /*<<scanf.ml:843:18>>*/ (ib);
     /*<<scanf.ml:843:18>>*/ if(_av_)
      /*<<scanf.ml:428:2>>*/  /*<<scanf.ml:428:2>>*/ bad_input
       /*<<scanf.ml:428:2>>*/ (cst_no_dot_or_exponent_part_fo);
    var
     c =
        /*<<scanf.ml:844:10>>*/  /*<<scanf.ml:844:10>>*/ peek_char
         /*<<scanf.ml:844:10>>*/ (ib),
     switcher =  /*<<scanf.ml:844:10>>*/ c - 69 | 0;
    if(32 < switcher >>> 0){
     if(-23 === switcher){
      var
       width$1 =
          /*<<scanf.ml:847:16>>*/  /*<<scanf.ml:847:16>>*/ store_char
           /*<<scanf.ml:847:16>>*/ (width$0, ib, c),
       precision$0 =
          /*<<scanf.ml:850:20>>*/  /*<<scanf.ml:850:20>>*/ caml_call2
           /*<<scanf.ml:850:20>>*/ (Stdlib_Int[10], width$1, precision),
       width_precision =
          /*<<scanf.ml:853:26>>*/  /*<<scanf.ml:853:26>>*/ scan_fractional_part
           /*<<scanf.ml:853:26>>*/ (precision$0, ib),
       frac_width = precision$0 - width_precision | 0,
       width$2 = width$1 - frac_width | 0;
       /*<<scanf.ml:859:4>>*/ return  /*<<scanf.ml:859:4>>*/ scan_exponent_part
               /*<<scanf.ml:859:4>>*/ (width$2, ib) /*<<scanf.ml:862:21>>*/ ;
     }
    }
    else if(30 < switcher - 1 >>> 0)
      /*<<scanf.ml:861:4>>*/ return  /*<<scanf.ml:861:4>>*/ scan_exponent_part
              /*<<scanf.ml:861:4>>*/ (width$0, ib) /*<<scanf.ml:862:21>>*/ ;
     /*<<scanf.ml:428:2>>*/ return  /*<<scanf.ml:428:2>>*/ bad_input
             /*<<scanf.ml:428:2>>*/ (cst_no_dot_or_exponent_part_fo) /*<<scanf.ml:862:21>>*/ ;
    /*<<scanf.ml:862:21>>*/ }
   function scan_caml_float(width, precision, ib){
    var
     _ae_ = 0 === width ? 1 : 0,
     _af_ =
       _ae_
       ||  /*<<scanf.ml:866:18>>*/ end_of_input /*<<scanf.ml:866:18>>*/ (ib);
     /*<<scanf.ml:866:18>>*/ if(_af_)
      /*<<scanf.ml:428:2>>*/  /*<<scanf.ml:428:2>>*/ bad_input
       /*<<scanf.ml:428:2>>*/ (cst_no_dot_or_exponent_part_fo);
    var
     width$0 =
        /*<<scanf.ml:867:14>>*/  /*<<scanf.ml:867:14>>*/ scan_sign
         /*<<scanf.ml:867:14>>*/ (width, ib),
     _ag_ = 0 === width$0 ? 1 : 0,
     _ah_ =
       _ag_
       ||  /*<<scanf.ml:868:18>>*/ end_of_input /*<<scanf.ml:868:18>>*/ (ib);
     /*<<scanf.ml:868:18>>*/ if(_ah_)
      /*<<scanf.ml:428:2>>*/  /*<<scanf.ml:428:2>>*/ bad_input
       /*<<scanf.ml:428:2>>*/ (cst_no_dot_or_exponent_part_fo);
    var
     c =
        /*<<scanf.ml:869:8>>*/  /*<<scanf.ml:869:8>>*/ peek_char
         /*<<scanf.ml:869:8>>*/ (ib);
    if(49 <= c){
     if(58 > c){
      var
       width$1 =
          /*<<scanf.ml:903:16>>*/  /*<<scanf.ml:903:16>>*/ store_char
           /*<<scanf.ml:903:16>>*/ (width$0, ib, c),
       _ai_ = 0 === width$1 ? 1 : 0,
       _aj_ =
         _ai_
         ||  /*<<scanf.ml:904:20>>*/ end_of_input /*<<scanf.ml:904:20>>*/ (ib);
       /*<<scanf.ml:904:20>>*/ if(_aj_)
        /*<<scanf.ml:428:2>>*/  /*<<scanf.ml:428:2>>*/ bad_input
         /*<<scanf.ml:428:2>>*/ (cst_no_dot_or_exponent_part_fo);
       /*<<scanf.ml:904:50>>*/ return  /*<<scanf.ml:904:50>>*/ scan_caml_float_rest
               /*<<scanf.ml:904:50>>*/ (width$1, precision, ib) /*<<scanf.ml:910:21>>*/ ;
     }
    }
    else if(48 <= c){
     var
      width$2 =
         /*<<scanf.ml:871:16>>*/  /*<<scanf.ml:871:16>>*/ store_char
          /*<<scanf.ml:871:16>>*/ (width$0, ib, c),
      _ak_ = 0 === width$2 ? 1 : 0,
      _al_ =
        _ak_
        ||  /*<<scanf.ml:872:20>>*/ end_of_input /*<<scanf.ml:872:20>>*/ (ib);
      /*<<scanf.ml:872:20>>*/ if(_al_)
       /*<<scanf.ml:428:2>>*/  /*<<scanf.ml:428:2>>*/ bad_input
        /*<<scanf.ml:428:2>>*/ (cst_no_dot_or_exponent_part_fo);
     var
      c$0 =
         /*<<scanf.ml:873:10>>*/  /*<<scanf.ml:873:10>>*/ peek_char
          /*<<scanf.ml:873:10>>*/ (ib);
     if(88 !== c$0 && 120 !== c$0)
       /*<<scanf.ml:900:6>>*/ return  /*<<scanf.ml:900:6>>*/ scan_caml_float_rest
               /*<<scanf.ml:900:6>>*/ (width$2, precision, ib) /*<<scanf.ml:910:21>>*/ ;
     var
      width$3 =
         /*<<scanf.ml:875:18>>*/  /*<<scanf.ml:875:18>>*/ store_char
          /*<<scanf.ml:875:18>>*/ (width$2, ib, c$0),
      _am_ = 0 === width$3 ? 1 : 0,
      _an_ =
        _am_
        ||  /*<<scanf.ml:876:22>>*/ end_of_input /*<<scanf.ml:876:22>>*/ (ib);
      /*<<scanf.ml:876:22>>*/ if(_an_)
       /*<<scanf.ml:428:2>>*/  /*<<scanf.ml:428:2>>*/ bad_input
        /*<<scanf.ml:428:2>>*/ (cst_no_dot_or_exponent_part_fo);
     var
      width$10 = scan_digit_plus(cst_hexadecimal, is_hexa_digit, width$3, ib),
      _ao_ = 0 === width$10 ? 1 : 0,
      _ap_ =
        _ao_
        ||  /*<<scanf.ml:878:22>>*/ end_of_input /*<<scanf.ml:878:22>>*/ (ib);
      /*<<scanf.ml:878:22>>*/ if(_ap_)
       /*<<scanf.ml:428:2>>*/  /*<<scanf.ml:428:2>>*/ bad_input
        /*<<scanf.ml:428:2>>*/ (cst_no_dot_or_exponent_part_fo);
     var
      c$1 =
         /*<<scanf.ml:879:24>>*/  /*<<scanf.ml:879:24>>*/ peek_char
          /*<<scanf.ml:879:24>>*/ (ib),
      switcher =  /*<<scanf.ml:879:24>>*/ c$1 - 80 | 0;
     a:
     {
      b:
      {
       if(32 < switcher >>> 0){
        if(-34 === switcher){
         var
          width$4 =
             /*<<scanf.ml:881:22>>*/  /*<<scanf.ml:881:22>>*/ store_char
              /*<<scanf.ml:881:22>>*/ (width$10, ib, c$1);
         c:
         {
           /*<<scanf.ml:882:10>>*/ if
           (0 !== width$4
            &&
             !
              /*<<scanf.ml:882:26>>*/ end_of_input
               /*<<scanf.ml:882:26>>*/ (ib)){
           var
            match =
               /*<<scanf.ml:883:18>>*/  /*<<scanf.ml:883:18>>*/ peek_char
                /*<<scanf.ml:883:18>>*/ (ib);
           d:
           {
            if(80 !== match && 112 !== match){
             var
              precision$0 =
                 /*<<scanf.ml:886:30>>*/  /*<<scanf.ml:886:30>>*/ caml_call2
                  /*<<scanf.ml:886:30>>*/ (Stdlib_Int[10], width$4, precision),
              width$9 =
                width$4
                -
                 (precision$0
                 -
                  scan_digit_plus
                   (cst_hexadecimal, is_hexa_digit, precision$0, ib)
                 | 0)
                | 0;
             break d;
            }
            var width$9 = width$4;
           }
           var width$5 = width$9;
           break c;
          }
          var width$5 = width$4;
         }
         var width$6 = width$5;
         break b;
        }
       }
       else if(30 < switcher - 1 >>> 0){var width$6 = width$10; break b;}
       var
        width$7 =
           /*<<scanf.ml:428:2>>*/ bad_input
            /*<<scanf.ml:428:2>>*/ (cst_no_dot_or_exponent_part_fo);
       break a;
      }
      var width$7 = width$6;
     }
      /*<<scanf.ml:891:6>>*/ if
      (0 !== width$7
       && !  /*<<scanf.ml:891:22>>*/ end_of_input /*<<scanf.ml:891:22>>*/ (ib)){
      var
       c$2 =
          /*<<scanf.ml:892:14>>*/  /*<<scanf.ml:892:14>>*/ peek_char
           /*<<scanf.ml:892:14>>*/ (ib);
      if(80 !== c$2 && 112 !== c$2)
        /*<<scanf.ml:897:15>>*/ return width$7 /*<<scanf.ml:897:15>>*/ ;
      var
       width$8 =
          /*<<scanf.ml:894:22>>*/  /*<<scanf.ml:894:22>>*/ store_char
           /*<<scanf.ml:894:22>>*/ (width$7, ib, c$2),
       _aq_ = 0 === width$8 ? 1 : 0,
       _ar_ =
         _aq_
         ||  /*<<scanf.ml:895:26>>*/ end_of_input /*<<scanf.ml:895:26>>*/ (ib);
       /*<<scanf.ml:895:26>>*/ if(_ar_)
        /*<<scanf.ml:432:2>>*/  /*<<scanf.ml:432:2>>*/ bad_input
         /*<<scanf.ml:432:2>>*/ (cst_not_a_valid_float_in_hexad);
       /*<<scanf.ml:895:56>>*/ return  /*<<scanf.ml:895:56>>*/ scan_optionally_signed_decimal
               /*<<scanf.ml:895:56>>*/ (width$8, ib) /*<<scanf.ml:910:21>>*/ ;
     }
      /*<<scanf.ml:891:52>>*/ return width$7 /*<<scanf.ml:891:52>>*/ ;
    }
     /*<<scanf.ml:428:2>>*/ return  /*<<scanf.ml:428:2>>*/ bad_input
             /*<<scanf.ml:428:2>>*/ (cst_no_dot_or_exponent_part_fo) /*<<scanf.ml:910:21>>*/ ;
    /*<<scanf.ml:910:21>>*/ }
   function scan_string(stp, width, ib){
    var width$0 = width;
     /*<<scanf.ml:921:4>>*/ for(;;){
     if(0 === width$0)
       /*<<scanf.ml:921:22>>*/ return width$0 /*<<scanf.ml:921:22>>*/ ;
     var
      c =
         /*<<scanf.ml:922:12>>*/  /*<<scanf.ml:922:12>>*/ peek_char
          /*<<scanf.ml:922:12>>*/ (ib);
      /*<<scanf.ml:923:7>>*/ if(ib[1])
       /*<<scanf.ml:923:28>>*/ return width$0 /*<<scanf.ml:923:28>>*/ ;
     if(! stp){
      var _ad_ =  /*<<scanf.ml:928:8>>*/ c - 9 | 0;
      a:
      {
       if(4 < _ad_ >>> 0){
        if(23 === _ad_) break a;
       }
       else if(1 < _ad_ - 2 >>> 0) break a;
       var
        width$2 =
           /*<<scanf.ml:930:20>>*/  /*<<scanf.ml:930:20>>*/ store_char
            /*<<scanf.ml:930:20>>*/ (width$0, ib, c);
       width$0 = width$2;
       continue;
      }
       /*<<scanf.ml:929:38>>*/ return width$0 /*<<scanf.ml:929:38>>*/ ;
     }
     var c$0 = stp[1];
     if(c === c$0){
       /*<<scanf.ml:237:4>>*/  /*<<scanf.ml:237:4>>*/ invalidate_current_char
        /*<<scanf.ml:237:4>>*/ (ib);
       /*<<scanf.ml:237:4>>*/ return width$0 /*<<scanf.ml:237:4>>*/ ;
     }
     var
      width$1 =
         /*<<scanf.ml:926:23>>*/  /*<<scanf.ml:926:23>>*/ store_char
          /*<<scanf.ml:926:23>>*/ (width$0, ib, c);
     width$0 = width$1;
    }
    /*<<scanf.ml:931:12>>*/ }
   function hexadecimal_value_of_char(c){
     /*<<scanf.ml:969:2>>*/ return 97 <= c
            ? c - 87 | 0
            : 65 <= c ? c - 55 | 0 : c - 48 | 0 /*<<scanf.ml:979:23>>*/ ;
    /*<<scanf.ml:979:23>>*/ }
   function check_next_char(message, width, ib){
     /*<<scanf.ml:995:2>>*/ if(0 === width)
      /*<<scanf.ml:995:20>>*/ return  /*<<scanf.ml:995:20>>*/ bad_token_length
              /*<<scanf.ml:995:20>>*/ (message) /*<<scanf.ml:998:3>>*/ ;
    var
     c =
        /*<<scanf.ml:996:10>>*/  /*<<scanf.ml:996:10>>*/ peek_char
         /*<<scanf.ml:996:10>>*/ (ib);
     /*<<scanf.ml:997:5>>*/ return ib[1]
            ?  /*<<scanf.ml:421:4>>*/ bad_input
               /*<<scanf.ml:421:4>>*/ ( /*<<scanf.ml:421:4>>*/ caml_call2
                 /*<<scanf.ml:421:4>>*/ (Stdlib_Printf[4], _f_, message))
            : c /*<<scanf.ml:998:3>>*/ ;
    /*<<scanf.ml:998:3>>*/ }
   function scan_backslash_char(width, ib){
    var c0 = check_next_char(cst_a_Char, width, ib);
    a:
    {
     if(40 <= c0){
      if(58 > c0){
       if(48 > c0) break a;
       var
        get_digit$0 =
          function(param){
           var
            c =
               /*<<scanf.ml:1010:14>>*/  /*<<scanf.ml:1010:14>>*/ next_char
                /*<<scanf.ml:1010:14>>*/ (ib);
           return 9 < c - 48 >>> 0
                   ?  /*<<scanf.ml:1013:13>>*/ bad_input_escape
                      /*<<scanf.ml:1013:13>>*/ (c)
                   : c /*<<scanf.ml:1013:31>>*/ ;
           /*<<scanf.ml:1013:31>>*/ },
        c1$0 =
           /*<<scanf.ml:1015:13>>*/  /*<<scanf.ml:1015:13>>*/ get_digit$0
            /*<<scanf.ml:1015:13>>*/ (0),
        c2$0 =
           /*<<scanf.ml:1016:13>>*/  /*<<scanf.ml:1016:13>>*/ get_digit$0
            /*<<scanf.ml:1016:13>>*/ (0),
        c =
          ((100 * (c0 - 48 | 0) | 0) + (10 * (c1$0 - 48 | 0) | 0) | 0)
          + (c2$0 - 48 | 0)
          | 0;
       b:
       {
         /*<<scanf.ml:959:2>>*/ if(0 <= c && 255 >= c){
         var
          _ab_ =
             /*<<scanf.ml:963:2>>*/ caml_call1
              /*<<scanf.ml:963:2>>*/ (Stdlib[29], c);
         break b;
        }
        var
         _ab_ =
            /*<<scanf.ml:961:6>>*/ bad_input
             /*<<scanf.ml:961:6>>*/ ( /*<<scanf.ml:961:6>>*/ caml_call4
               /*<<scanf.ml:961:6>>*/ (Stdlib_Printf[4], _l_, c0, c1$0, c2$0));
       }
        /*<<scanf.ml:1017:39>>*/ return  /*<<scanf.ml:1017:39>>*/ store_char
                /*<<scanf.ml:1017:39>>*/ (width - 2 | 0, ib, _ab_) /*<<scanf.ml:1028:22>>*/ ;
      }
      var switcher =  /*<<scanf.ml:1005:8>>*/ c0 - 92 | 0;
      if(28 < switcher >>> 0) break a;
      switch(switcher){
        case 28:
         var
          get_digit =
            function(param){
             var
              c =
                 /*<<scanf.ml:1020:14>>*/  /*<<scanf.ml:1020:14>>*/ next_char
                  /*<<scanf.ml:1020:14>>*/ (ib),
              _ac_ =  /*<<scanf.ml:1020:14>>*/ c - 48 | 0;
             a:
             {
              if(22 < _ac_ >>> 0){
               if(5 < _ac_ - 49 >>> 0) break a;
              }
              else if(6 >= _ac_ - 10 >>> 0) break a;
               /*<<scanf.ml:1022:53>>*/ return c /*<<scanf.ml:1022:53>>*/ ;
             }
              /*<<scanf.ml:1023:13>>*/ return  /*<<scanf.ml:1023:13>>*/ bad_input_escape
                      /*<<scanf.ml:1023:13>>*/ (c) /*<<scanf.ml:1023:31>>*/ ;
             /*<<scanf.ml:1023:31>>*/ },
          c1 =
             /*<<scanf.ml:1024:13>>*/  /*<<scanf.ml:1024:13>>*/ get_digit
              /*<<scanf.ml:1024:13>>*/ (0),
          c2 =
             /*<<scanf.ml:1025:13>>*/  /*<<scanf.ml:1025:13>>*/ get_digit
              /*<<scanf.ml:1025:13>>*/ (0),
          ___ =
             /*<<scanf.ml:985:9>>*/  /*<<scanf.ml:985:9>>*/ hexadecimal_value_of_char
              /*<<scanf.ml:985:9>>*/ (c2),
          c$0 =
            (16
            *
              /*<<scanf.ml:984:9>>*/ hexadecimal_value_of_char
               /*<<scanf.ml:984:9>>*/ (c1)
            | 0)
            + ___
            | 0;
         b:
         {
           /*<<scanf.ml:986:2>>*/ if(0 <= c$0 && 255 >= c$0){
           var
            _aa_ =
               /*<<scanf.ml:989:2>>*/ caml_call1
                /*<<scanf.ml:989:2>>*/ (Stdlib[29], c$0);
           break b;
          }
          var
           _aa_ =
              /*<<scanf.ml:988:6>>*/ bad_input
               /*<<scanf.ml:988:6>>*/ ( /*<<scanf.ml:988:6>>*/ caml_call3
                 /*<<scanf.ml:988:6>>*/ (Stdlib_Printf[4], _m_, c1, c2));
         }
          /*<<scanf.ml:1026:39>>*/ return  /*<<scanf.ml:1026:39>>*/ store_char
                  /*<<scanf.ml:1026:39>>*/ (width - 2 | 0, ib, _aa_) /*<<scanf.ml:1028:22>>*/ ;
        case 0:
        case 6:
        case 18:
        case 22:
        case 24: break;
        default: break a;
      }
     }
     else if(34 !== c0 && 39 > c0) break a;
     b:
     {
      if(110 <= c0){
       if(117 > c0)
        switch(c0 - 110 | 0){
          case 0:
           var _$_ = 10; break b;
          case 4:
           var _$_ = 13; break b;
          case 6:
           var _$_ = 9; break b;
        }
      }
      else if(98 === c0){var _$_ = 8; break b;}
      var _$_ = c0;
     }
      /*<<scanf.ml:1007:33>>*/ return  /*<<scanf.ml:1007:33>>*/ store_char
              /*<<scanf.ml:1007:33>>*/ (width, ib, _$_) /*<<scanf.ml:1028:22>>*/ ;
    }
     /*<<scanf.ml:1028:4>>*/ return  /*<<scanf.ml:1028:4>>*/ bad_input_escape
             /*<<scanf.ml:1028:4>>*/ (c0) /*<<scanf.ml:1028:22>>*/ ;
    /*<<scanf.ml:1028:22>>*/ }
   function scan_caml_string(width, ib){
    function find_stop$0(counter, width){
     var width$0 = width;
      /*<<scanf.ml:1063:4>>*/ for(;;){
      var c = check_next_char(cst_a_String, width$0, ib);
      if(34 === c)
        /*<<scanf.ml:1057:2>>*/ return  /*<<scanf.ml:1057:2>>*/ ignore_char
                /*<<scanf.ml:1057:2>>*/ (width$0, ib) /*<<scanf.ml:1066:53>>*/ ;
      if(92 === c){
       var
        width$1 =
           /*<<scanf.ml:1065:29>>*/  /*<<scanf.ml:1065:29>>*/ ignore_char
            /*<<scanf.ml:1065:29>>*/ (width$0, ib),
        match = check_next_char(cst_a_String, width$1, ib);
       if(10 === match){
        var
         _Y_ =
            /*<<scanf.ml:1071:26>>*/  /*<<scanf.ml:1071:26>>*/ ignore_char
             /*<<scanf.ml:1071:26>>*/ (width$1, ib);
         /*<<scanf.ml:1071:26>>*/ if(counter >= 50)
          /*<<scanf.ml:1071:26>>*/ return  /*<<scanf.ml:1071:26>>*/ caml_trampoline_return
                  /*<<scanf.ml:1071:26>>*/ (skip_spaces, [0, _Y_]) /*<<scanf.ml:1066:53>>*/ ;
        var counter$0 = counter + 1 | 0;
         /*<<scanf.ml:1071:26>>*/ return  /*<<scanf.ml:1071:26>>*/ skip_spaces
                 /*<<scanf.ml:1071:26>>*/ (counter$0, _Y_) /*<<scanf.ml:1066:53>>*/ ;
       }
       if(13 === match){
        var
         width$3 =
            /*<<scanf.ml:1070:27>>*/  /*<<scanf.ml:1070:27>>*/ ignore_char
             /*<<scanf.ml:1070:27>>*/ (width$1, ib);
        if(10 === check_next_char(cst_a_String, width$3, ib)){
         var
          _Z_ =
             /*<<scanf.ml:1076:26>>*/  /*<<scanf.ml:1076:26>>*/ ignore_char
              /*<<scanf.ml:1076:26>>*/ (width$3, ib);
          /*<<scanf.ml:1076:26>>*/ if(counter >= 50)
           /*<<scanf.ml:1076:26>>*/ return  /*<<scanf.ml:1076:26>>*/ caml_trampoline_return
                   /*<<scanf.ml:1076:26>>*/ (skip_spaces, [0, _Z_]) /*<<scanf.ml:1066:53>>*/ ;
         var counter$1 = counter + 1 | 0;
          /*<<scanf.ml:1076:26>>*/ return  /*<<scanf.ml:1076:26>>*/ skip_spaces
                  /*<<scanf.ml:1076:26>>*/ (counter$1, _Z_) /*<<scanf.ml:1066:53>>*/ ;
        }
        var
         width$5 =
            /*<<scanf.ml:1077:21>>*/  /*<<scanf.ml:1077:21>>*/ store_char
             /*<<scanf.ml:1077:21>>*/ (width$3, ib, 13);
        width$0 = width$5;
       }
       else{
        var
         width$4 =
            /*<<scanf.ml:1072:21>>*/  /*<<scanf.ml:1072:21>>*/ scan_backslash_char
             /*<<scanf.ml:1072:21>>*/ (width$1, ib);
        width$0 = width$4;
       }
      }
      else{
       var
        width$2 =
           /*<<scanf.ml:1066:21>>*/  /*<<scanf.ml:1066:21>>*/ store_char
            /*<<scanf.ml:1066:21>>*/ (width$0, ib, c);
       width$0 = width$2;
      }
     }
     /*<<scanf.ml:1066:53>>*/ }
    function find_stop(width){
      /*<<?>>*/ return caml_trampoline(find_stop$0(0, width));
    }
    function skip_spaces(counter, width){
     var width$0 = width;
      /*<<scanf.ml:1080:4>>*/ for(;;){
      if(32 !== check_next_char(cst_a_String, width$0, ib)){
        /*<<scanf.ml:1082:11>>*/ if(counter >= 50)
         /*<<scanf.ml:1082:11>>*/ return  /*<<scanf.ml:1082:11>>*/ caml_trampoline_return
                 /*<<scanf.ml:1082:11>>*/ (find_stop$0, [0, width$0]) /*<<scanf.ml:1082:26>>*/ ;
       var counter$0 = counter + 1 | 0;
        /*<<scanf.ml:1082:11>>*/ return  /*<<scanf.ml:1082:11>>*/ find_stop$0
                /*<<scanf.ml:1082:11>>*/ (counter$0, width$0) /*<<scanf.ml:1082:26>>*/ ;
      }
      var
       width$1 =
          /*<<scanf.ml:1081:25>>*/  /*<<scanf.ml:1081:25>>*/ ignore_char
           /*<<scanf.ml:1081:25>>*/ (width$0, ib);
      width$0 = width$1;
     }
     /*<<scanf.ml:1082:26>>*/ }
    var
     c =
        /*<<scanf.ml:1058:10>>*/  /*<<scanf.ml:1058:10>>*/ checked_peek_char
         /*<<scanf.ml:1058:10>>*/ (ib);
    return 34 === c
            ?  /*<<scanf.ml:1059:24>>*/ find_stop
               /*<<scanf.ml:1059:24>>*/ ( /*<<scanf.ml:1059:24>>*/ ignore_char
                 /*<<scanf.ml:1059:24>>*/ (width, ib))
            :  /*<<scanf.ml:1060:11>>*/ character_mismatch
               /*<<scanf.ml:1060:11>>*/ (34, c) /*<<scanf.ml:1084:18>>*/ ;
    /*<<scanf.ml:1084:18>>*/ }
   function scan_chars_in_char_set(char_set, scan_indic, width, ib){
    function scan_chars(i, stp){
     var i$0 = i;
      /*<<scanf.ml:1104:4>>*/ for(;;){
      var
       c =
          /*<<scanf.ml:1104:12>>*/  /*<<scanf.ml:1104:12>>*/ peek_char
           /*<<scanf.ml:1104:12>>*/ (ib),
       _U_ = 0 < i$0 ? 1 : 0;
      if(_U_){
       var _V_ =  /*<<scanf.ml:1105:20>>*/ 1 - ib[1];
       if(_V_)
        var
         _W_ =
            /*<<scanf.ml:1106:7>>*/  /*<<scanf.ml:1106:7>>*/ caml_call2
             /*<<scanf.ml:1106:7>>*/ (CamlinternalFormat[1], char_set, c),
         _X_ =  /*<<scanf.ml:1106:7>>*/ _W_ ? c !== stp ? 1 : 0 : _W_;
       else
        var _X_ = _V_;
      }
      else
       var _X_ = _U_;
      if(! _X_) return _X_;
       /*<<scanf.ml:1108:14>>*/  /*<<scanf.ml:1108:14>>*/ store_char
        /*<<scanf.ml:1108:14>>*/ (Stdlib[19], ib, c);
      var i$1 = i$0 - 1 | 0;
      i$0 = i$1;
     }
     /*<<scanf.ml:1109:28>>*/ }
    if(! scan_indic)
      /*<<scanf.ml:1111:12>>*/ return  /*<<scanf.ml:1111:12>>*/ scan_chars
              /*<<scanf.ml:1111:12>>*/ (width, -1) /*<<scanf.ml:1118:34>>*/ ;
    var c = scan_indic[1];
     /*<<scanf.ml:1113:4>>*/  /*<<scanf.ml:1113:4>>*/ scan_chars
      /*<<scanf.ml:1113:4>>*/ (width, c);
    var _T_ =  /*<<scanf.ml:1114:11>>*/ 1 - ib[1];
    if(! _T_)  /*<<scanf.ml:1114:11>>*/ return _T_ /*<<scanf.ml:1114:11>>*/ ;
    var
     ci =
        /*<<scanf.ml:1115:15>>*/  /*<<scanf.ml:1115:15>>*/ peek_char
         /*<<scanf.ml:1115:15>>*/ (ib);
    return c === ci
            ?  /*<<scanf.ml:1117:11>>*/ invalidate_current_char
               /*<<scanf.ml:1117:11>>*/ (ib)
            :  /*<<scanf.ml:1118:11>>*/ character_mismatch
               /*<<scanf.ml:1118:11>>*/ (c, ci) /*<<scanf.ml:1118:34>>*/ ;
    /*<<scanf.ml:1118:34>>*/ }
   function scanf_bad_input(ib, x){
     /*<<scanf.ml:1122:20>>*/ if(x[1] === Scan_failure)
     var s = x[2];
    else{
     if(x[1] !== Stdlib[7])
       /*<<scanf.ml:1126:9>>*/ throw  /*<<scanf.ml:1126:9>>*/ caml_maybe_attach_backtrace
              /*<<scanf.ml:1126:9>>*/ (x, 1);
     var s = x[2];
    }
    var
     i =
        /*<<scanf.ml:1124:12>>*/  /*<<scanf.ml:1124:12>>*/ char_count
         /*<<scanf.ml:1124:12>>*/ (ib);
     /*<<scanf.ml:1125:14>>*/ return  /*<<scanf.ml:1125:14>>*/ bad_input
             /*<<scanf.ml:1125:14>>*/ ( /*<<scanf.ml:1125:14>>*/ caml_call3
               /*<<scanf.ml:1125:14>>*/ (Stdlib_Printf[4], _o_, i, s)) /*<<scanf.ml:1126:16>>*/ ;
    /*<<scanf.ml:1126:16>>*/ }
   function width_of_pad_opt(pad_opt){
     /*<<scanf.ml:1138:31>>*/ if(! pad_opt)
      /*<<scanf.ml:1139:12>>*/ return Stdlib[19] /*<<scanf.ml:1139:12>>*/ ;
    var width = pad_opt[1];
     /*<<scanf.ml:1140:18>>*/ return width /*<<scanf.ml:1140:18>>*/ ;
    /*<<scanf.ml:1140:23>>*/ }
   function stopper_of_formatting_lit(fmting){
     /*<<scanf.ml:1144:2>>*/ if(6 === fmting)
      /*<<scanf.ml:1144:35>>*/ return _p_ /*<<scanf.ml:1144:35>>*/ ;
    var
     str =
        /*<<scanf.ml:1145:14>>*/  /*<<scanf.ml:1145:14>>*/ caml_call1
         /*<<scanf.ml:1145:14>>*/ (CamlinternalFormat[17], fmting),
     stp =
        /*<<scanf.ml:1146:14>>*/  /*<<scanf.ml:1146:14>>*/ caml_string_get
         /*<<scanf.ml:1146:14>>*/ (str, 1),
     sub_str =
        /*<<scanf.ml:1147:18>>*/  /*<<scanf.ml:1147:18>>*/ caml_call3
         /*<<scanf.ml:1147:18>>*/ (Stdlib_String[16],
         str,
         2,
          /*<<scanf.ml:1147:4>>*/ caml_ml_string_length
           /*<<scanf.ml:1147:4>>*/ (str)
         - 2
         | 0);
     /*<<scanf.ml:1148:4>>*/ return [0, stp, sub_str] /*<<scanf.ml:1148:4>>*/ ;
    /*<<scanf.ml:1148:16>>*/ }
   function take_format_readers$0(counter, k, fmt){
    var fmt$0 = fmt;
     /*<<scanf.ml:1161:13>>*/ for(;;){
     if(typeof fmt$0 === "number")
       /*<<scanf.ml:1198:40>>*/ return  /*<<scanf.ml:1198:40>>*/ caml_call1
               /*<<scanf.ml:1198:40>>*/ (k, 0) /*<<scanf.ml:1198:45>>*/ ;
     switch(fmt$0[0]){
       case 0:
        var rest = fmt$0[1]; fmt$0 = rest; break;
       case 1:
        var rest$0 = fmt$0[1]; fmt$0 = rest$0; break;
       case 2:
        var rest$1 = fmt$0[2]; fmt$0 = rest$1; break;
       case 3:
        var rest$2 = fmt$0[2]; fmt$0 = rest$2; break;
       case 4:
        var rest$3 = fmt$0[4]; fmt$0 = rest$3; break;
       case 5:
        var rest$4 = fmt$0[4]; fmt$0 = rest$4; break;
       case 6:
        var rest$5 = fmt$0[4]; fmt$0 = rest$5; break;
       case 7:
        var rest$6 = fmt$0[4]; fmt$0 = rest$6; break;
       case 8:
        var rest$7 = fmt$0[4]; fmt$0 = rest$7; break;
       case 9:
        var rest$8 = fmt$0[2]; fmt$0 = rest$8; break;
       case 10:
        var rest$9 = fmt$0[1]; fmt$0 = rest$9; break;
       case 11:
        var rest$10 = fmt$0[2]; fmt$0 = rest$10; break;
       case 12:
        var rest$11 = fmt$0[2]; fmt$0 = rest$11; break;
       case 13:
        var rest$12 = fmt$0[3]; fmt$0 = rest$12; break;
       case 14:
        var
         rest$13 = fmt$0[3],
         fmtty = fmt$0[2],
         _Q_ =
            /*<<scanf.ml:1195:44>>*/  /*<<scanf.ml:1195:44>>*/ caml_call1
             /*<<scanf.ml:1195:44>>*/ (CamlinternalFormat[21], fmtty),
         _R_ =
            /*<<scanf.ml:1195:33>>*/  /*<<scanf.ml:1195:33>>*/ caml_call1
             /*<<scanf.ml:1195:33>>*/ (CamlinternalFormatBasics[2], _Q_);
         /*<<scanf.ml:1195:5>>*/ if(counter >= 50)
          /*<<scanf.ml:1195:5>>*/ return  /*<<scanf.ml:1195:5>>*/ caml_trampoline_return
                  /*<<scanf.ml:1195:5>>*/ (take_fmtty_format_readers$0,
                  [0, k, _R_, rest$13]) /*<<scanf.ml:1198:45>>*/ ;
        var counter$0 = counter + 1 | 0;
         /*<<scanf.ml:1195:5>>*/ return  /*<<scanf.ml:1195:5>>*/ take_fmtty_format_readers$0
                 /*<<scanf.ml:1195:5>>*/ (counter$0, k, _R_, rest$13) /*<<scanf.ml:1198:45>>*/ ;
       case 15:
        var rest$14 = fmt$0[1]; fmt$0 = rest$14; break;
       case 16:
        var rest$15 = fmt$0[1]; fmt$0 = rest$15; break;
       case 17:
        var rest$16 = fmt$0[2]; fmt$0 = rest$16; break;
       case 18:
        var _S_ = fmt$0[1];
        if(0 === _S_[0]){
         var
          rest$17 = fmt$0[2],
          fmt$1 = _S_[1][1],
          fmt$2 =
             /*<<scanf.ml:1189:28>>*/  /*<<scanf.ml:1189:28>>*/ caml_call2
              /*<<scanf.ml:1189:28>>*/ (CamlinternalFormatBasics[3],
              fmt$1,
              rest$17);
         fmt$0 = fmt$2;
        }
        else{
         var
          rest$18 = fmt$0[2],
          fmt$3 = _S_[1][1],
          fmt$4 =
             /*<<scanf.ml:1191:28>>*/  /*<<scanf.ml:1191:28>>*/ caml_call2
              /*<<scanf.ml:1191:28>>*/ (CamlinternalFormatBasics[3],
              fmt$3,
              rest$18);
         fmt$0 = fmt$4;
        }
        break;
       case 19:
        var fmt_rest = fmt$0[1];
         /*<<scanf.ml:1163:4>>*/ return function(reader){
         function new_k(readers_rest){
           /*<<scanf.ml:1164:31>>*/ return  /*<<scanf.ml:1164:33>>*/ caml_call1
                   /*<<scanf.ml:1164:33>>*/ (k, [0, reader, readers_rest]) /*<<scanf.ml:1164:62>>*/ ;
          /*<<scanf.ml:1164:62>>*/ }
          /*<<scanf.ml:1165:6>>*/ return  /*<<scanf.ml:1165:6>>*/ take_format_readers
                  /*<<scanf.ml:1165:6>>*/ (new_k, fmt_rest) /*<<scanf.ml:1165:40>>*/ ; /*<<scanf.ml:1165:40>>*/ } /*<<scanf.ml:1163:4>>*/ ;
       case 20:
        var rest$19 = fmt$0[3]; fmt$0 = rest$19; break;
       case 21:
        var rest$20 = fmt$0[2]; fmt$0 = rest$20; break;
       case 22:
        var rest$21 = fmt$0[1]; fmt$0 = rest$21; break;
       case 23:
        var rest$22 = fmt$0[2], ign = fmt$0[1];
        if(typeof ign === "number")
         switch(ign){
           case 0:
            fmt$0 = rest$22; break;
           case 1:
            fmt$0 = rest$22; break;
           case 2:
             /*<<scanf.ml:1236:4>>*/ return function(reader){
             function new_k(readers_rest){
               /*<<scanf.ml:1237:31>>*/ return  /*<<scanf.ml:1237:33>>*/ caml_call1
                       /*<<scanf.ml:1237:33>>*/ (k, [0, reader, readers_rest]) /*<<scanf.ml:1237:62>>*/ ;
              /*<<scanf.ml:1237:62>>*/ }
              /*<<scanf.ml:1238:6>>*/ return  /*<<scanf.ml:1238:6>>*/ take_format_readers
                      /*<<scanf.ml:1238:6>>*/ (new_k, rest$22) /*<<scanf.ml:1238:35>>*/ ; /*<<scanf.ml:1238:35>>*/ } /*<<scanf.ml:1236:4>>*/ ;
           default: fmt$0 = rest$22;
         }
        else
         switch(ign[0]){
           case 0:
            fmt$0 = rest$22; break;
           case 1:
            fmt$0 = rest$22; break;
           case 2:
            fmt$0 = rest$22; break;
           case 3:
            fmt$0 = rest$22; break;
           case 4:
            fmt$0 = rest$22; break;
           case 5:
            fmt$0 = rest$22; break;
           case 6:
            fmt$0 = rest$22; break;
           case 7:
            fmt$0 = rest$22; break;
           case 8:
            fmt$0 = rest$22; break;
           case 9:
            var fmtty$0 = ign[2];
             /*<<scanf.ml:1250:39>>*/ if(counter >= 50)
              /*<<scanf.ml:1250:39>>*/ return  /*<<scanf.ml:1250:39>>*/ caml_trampoline_return
                      /*<<scanf.ml:1250:39>>*/ (take_fmtty_format_readers$0,
                      [0, k, fmtty$0, rest$22]) /*<<scanf.ml:1198:45>>*/ ;
            var counter$1 = counter + 1 | 0;
             /*<<scanf.ml:1250:39>>*/ return  /*<<scanf.ml:1250:39>>*/ take_fmtty_format_readers$0
                     /*<<scanf.ml:1250:39>>*/ (counter$1, k, fmtty$0, rest$22) /*<<scanf.ml:1198:45>>*/ ;
           case 10:
            fmt$0 = rest$22; break;
           default: fmt$0 = rest$22;
         }
        break;
       default: var rest$23 = fmt$0[3]; fmt$0 = rest$23;
     }
    }
    /*<<scanf.ml:1198:45>>*/ }
   function take_format_readers(k, fmt){
     /*<<?>>*/ return caml_trampoline(take_format_readers$0(0, k, fmt));
   }
   function take_fmtty_format_readers$0(counter, k, fmtty, fmt){
    var fmtty$0 = fmtty;
     /*<<scanf.ml:1204:19>>*/ for(;;){
     if(typeof fmtty$0 === "number"){
       /*<<scanf.ml:1225:35>>*/ if(counter >= 50)
        /*<<scanf.ml:1225:35>>*/ return  /*<<scanf.ml:1225:35>>*/ caml_trampoline_return
                /*<<scanf.ml:1225:35>>*/ (take_format_readers$0, [0, k, fmt]) /*<<scanf.ml:1228:58>>*/ ;
      var counter$0 = counter + 1 | 0;
       /*<<scanf.ml:1225:35>>*/ return  /*<<scanf.ml:1225:35>>*/ take_format_readers$0
               /*<<scanf.ml:1225:35>>*/ (counter$0, k, fmt) /*<<scanf.ml:1228:58>>*/ ;
     }
     switch(fmtty$0[0]){
       case 0:
        var fmtty$1 = fmtty$0[1]; fmtty$0 = fmtty$1; break;
       case 1:
        var fmtty$2 = fmtty$0[1]; fmtty$0 = fmtty$2; break;
       case 2:
        var fmtty$3 = fmtty$0[1]; fmtty$0 = fmtty$3; break;
       case 3:
        var fmtty$4 = fmtty$0[1]; fmtty$0 = fmtty$4; break;
       case 4:
        var fmtty$5 = fmtty$0[1]; fmtty$0 = fmtty$5; break;
       case 5:
        var fmtty$6 = fmtty$0[1]; fmtty$0 = fmtty$6; break;
       case 6:
        var fmtty$7 = fmtty$0[1]; fmtty$0 = fmtty$7; break;
       case 7:
        var fmtty$8 = fmtty$0[1]; fmtty$0 = fmtty$8; break;
       case 8:
        var fmtty$9 = fmtty$0[2]; fmtty$0 = fmtty$9; break;
       case 9:
        var
         rest = fmtty$0[3],
         ty2 = fmtty$0[2],
         ty1 = fmtty$0[1],
         _P_ =
            /*<<scanf.ml:1227:19>>*/  /*<<scanf.ml:1227:19>>*/ caml_call1
             /*<<scanf.ml:1227:19>>*/ (CamlinternalFormat[21], ty1),
         ty =
            /*<<scanf.ml:1227:13>>*/  /*<<scanf.ml:1227:13>>*/ caml_call2
             /*<<scanf.ml:1227:13>>*/ (CamlinternalFormat[22], _P_, ty2),
         fmtty$10 =
            /*<<scanf.ml:1228:32>>*/  /*<<scanf.ml:1228:32>>*/ caml_call2
             /*<<scanf.ml:1228:32>>*/ (CamlinternalFormatBasics[1], ty, rest);
        fmtty$0 = fmtty$10;
        break;
       case 10:
        var fmtty$11 = fmtty$0[1]; fmtty$0 = fmtty$11; break;
       case 11:
        var fmtty$12 = fmtty$0[1]; fmtty$0 = fmtty$12; break;
       case 12:
        var fmtty$13 = fmtty$0[1]; fmtty$0 = fmtty$13; break;
       case 13:
        var fmt_rest = fmtty$0[1];
         /*<<scanf.ml:1206:4>>*/ return function(reader){
         function new_k(readers_rest){
           /*<<scanf.ml:1207:31>>*/ return  /*<<scanf.ml:1207:33>>*/ caml_call1
                   /*<<scanf.ml:1207:33>>*/ (k, [0, reader, readers_rest]) /*<<scanf.ml:1207:62>>*/ ;
          /*<<scanf.ml:1207:62>>*/ }
          /*<<scanf.ml:1208:6>>*/ return  /*<<scanf.ml:1208:6>>*/ take_fmtty_format_readers
                  /*<<scanf.ml:1208:6>>*/ (new_k, fmt_rest, fmt) /*<<scanf.ml:1208:50>>*/ ; /*<<scanf.ml:1208:50>>*/ } /*<<scanf.ml:1206:4>>*/ ;
       default:
        var fmt_rest$0 = fmtty$0[1];
         /*<<scanf.ml:1210:4>>*/ return function(reader){
         function new_k(readers_rest){
           /*<<scanf.ml:1211:31>>*/ return  /*<<scanf.ml:1211:33>>*/ caml_call1
                   /*<<scanf.ml:1211:33>>*/ (k, [0, reader, readers_rest]) /*<<scanf.ml:1211:62>>*/ ;
          /*<<scanf.ml:1211:62>>*/ }
          /*<<scanf.ml:1212:6>>*/ return  /*<<scanf.ml:1212:6>>*/ take_fmtty_format_readers
                  /*<<scanf.ml:1212:6>>*/ (new_k, fmt_rest$0, fmt) /*<<scanf.ml:1212:50>>*/ ; /*<<scanf.ml:1212:50>>*/ } /*<<scanf.ml:1210:4>>*/ ;
     }
    }
    /*<<scanf.ml:1228:58>>*/ }
   function take_fmtty_format_readers(k, fmtty, fmt){
     /*<<?>>*/ return caml_trampoline
            (take_fmtty_format_readers$0(0, k, fmtty, fmt));
   }
   function make_scanf(ib, fmt, readers){
    var fmt$0 = fmt;
     /*<<scanf.ml:1266:22>>*/ for(;;){
     if(typeof fmt$0 === "number")
       /*<<scanf.ml:1418:4>>*/ return 0 /*<<scanf.ml:1418:4>>*/ ;
     switch(fmt$0[0]){
       case 0:
        var rest = fmt$0[1];
         /*<<scanf.ml:939:31>>*/  /*<<scanf.ml:939:31>>*/ store_char
          /*<<scanf.ml:939:31>>*/ (0,
          ib,
           /*<<scanf.ml:939:31>>*/ checked_peek_char
            /*<<scanf.ml:939:31>>*/ (ib));
        var
         c$0 =
            /*<<scanf.ml:1269:12>>*/  /*<<scanf.ml:1269:12>>*/ token_char
             /*<<scanf.ml:1269:12>>*/ (ib);
         /*<<scanf.ml:1270:4>>*/ return [0,
                c$0,
                 /*<<scanf.ml:1270:13>>*/ make_scanf
                  /*<<scanf.ml:1270:13>>*/ (ib, rest, readers)] /*<<scanf.ml:1270:4>>*/ ;
       case 1:
        var
         rest$0 = fmt$0[1],
         find_stop =
           function(width){
            var c = check_next_char(cst_a_Char, width, ib);
            return 39 === c
                    ?  /*<<scanf.ml:1034:2>>*/ ignore_char
                       /*<<scanf.ml:1034:2>>*/ (width, ib)
                    :  /*<<scanf.ml:1049:11>>*/ character_mismatch
                       /*<<scanf.ml:1049:11>>*/ (39, c) /*<<scanf.ml:1049:36>>*/ ;
            /*<<scanf.ml:1049:36>>*/ },
         c =
            /*<<scanf.ml:1035:10>>*/  /*<<scanf.ml:1035:10>>*/ checked_peek_char
             /*<<scanf.ml:1035:10>>*/ (ib),
         width$0 =  /*<<scanf.ml:1272:4>>*/ 0;
        if(39 === c){
         var
          width =
             /*<<scanf.ml:1036:24>>*/  /*<<scanf.ml:1036:24>>*/ ignore_char
              /*<<scanf.ml:1036:24>>*/ (width$0, ib),
          c$3 = check_next_char(cst_a_Char, width, ib);
         if(92 === c$3)
           /*<<scanf.ml:1042:16>>*/  /*<<scanf.ml:1042:16>>*/ find_stop
            /*<<scanf.ml:1042:16>>*/ ( /*<<scanf.ml:1042:16>>*/ scan_backslash_char
              /*<<scanf.ml:1042:16>>*/ ( /*<<scanf.ml:1042:37>>*/ ignore_char
                /*<<scanf.ml:1042:37>>*/ (width, ib),
              ib));
         else
           /*<<scanf.ml:1044:16>>*/  /*<<scanf.ml:1044:16>>*/ find_stop
            /*<<scanf.ml:1044:16>>*/ ( /*<<scanf.ml:1044:16>>*/ store_char
              /*<<scanf.ml:1044:16>>*/ (width, ib, c$3));
        }
        else
          /*<<scanf.ml:1037:11>>*/  /*<<scanf.ml:1037:11>>*/ character_mismatch
           /*<<scanf.ml:1037:11>>*/ (39, c);
        var
         c$1 =
            /*<<scanf.ml:1273:12>>*/  /*<<scanf.ml:1273:12>>*/ token_char
             /*<<scanf.ml:1273:12>>*/ (ib);
         /*<<scanf.ml:1274:4>>*/ return [0,
                c$1,
                 /*<<scanf.ml:1274:13>>*/ make_scanf
                  /*<<scanf.ml:1274:13>>*/ (ib, rest$0, readers)] /*<<scanf.ml:1274:4>>*/ ;
       case 2:
        var pad = fmt$0[1], match = fmt$0[2];
        if(typeof match !== "number")
         switch(match[0]){
           case 17:
            var
             rest$2 = match[2],
             fmting_lit = match[1],
             match$0 =
                /*<<scanf.ml:1277:19>>*/  /*<<scanf.ml:1277:19>>*/ stopper_of_formatting_lit
                 /*<<scanf.ml:1277:19>>*/ (fmting_lit),
             str = match$0[2],
             stp = match$0[1],
             scan$0 =
               function(width, param, ib){
                 /*<<scanf.ml:1278:26>>*/ return  /*<<scanf.ml:1278:26>>*/ scan_string
                         /*<<scanf.ml:1278:26>>*/ ([0, stp], width, ib) /*<<scanf.ml:1278:57>>*/ ;
                /*<<scanf.ml:1278:57>>*/ },
             str_rest =  /*<<scanf.ml:1279:19>>*/ [11, str, rest$2];
             /*<<scanf.ml:1280:4>>*/ return  /*<<scanf.ml:1280:4>>*/ pad_prec_scanf
                     /*<<scanf.ml:1280:4>>*/ (ib,
                     str_rest,
                     readers,
                     pad,
                     0,
                     scan$0,
                     token_string) /*<<scanf.ml:1418:7>>*/ ;
           case 18:
            var _D_ = match[1];
            if(0 === _D_[0]){
             var
              rest$3 = match[2],
              fmt$1 = _D_[1][1],
              scan$1 =
                 /*<<scanf.ml:1282:4>>*/ function(width, param, ib){
                  /*<<scanf.ml:1282:26>>*/ return  /*<<scanf.ml:1282:26>>*/ scan_string
                          /*<<scanf.ml:1282:26>>*/ (_q_, width, ib) /*<<scanf.ml:1282:57>>*/ ;
                 /*<<scanf.ml:1282:57>>*/ };
              /*<<scanf.ml:1283:4>>*/ return  /*<<scanf.ml:1283:4>>*/ pad_prec_scanf
                      /*<<scanf.ml:1283:4>>*/ (ib,
                       /*<<scanf.ml:1283:22>>*/ caml_call2
                        /*<<scanf.ml:1283:22>>*/ (CamlinternalFormatBasics[3],
                        fmt$1,
                        rest$3),
                      readers,
                      pad,
                      0,
                      scan$1,
                      token_string) /*<<scanf.ml:1418:7>>*/ ;
            }
            var
             rest$4 = match[2],
             fmt$2 = _D_[1][1],
             scan$2 =
                /*<<scanf.ml:1286:4>>*/ function(width, param, ib){
                 /*<<scanf.ml:1286:26>>*/ return  /*<<scanf.ml:1286:26>>*/ scan_string
                         /*<<scanf.ml:1286:26>>*/ (_r_, width, ib) /*<<scanf.ml:1286:57>>*/ ;
                /*<<scanf.ml:1286:57>>*/ };
             /*<<scanf.ml:1287:4>>*/ return  /*<<scanf.ml:1287:4>>*/ pad_prec_scanf
                     /*<<scanf.ml:1287:4>>*/ (ib,
                      /*<<scanf.ml:1287:22>>*/ caml_call2
                       /*<<scanf.ml:1287:22>>*/ (CamlinternalFormatBasics[3],
                       fmt$2,
                       rest$4),
                     readers,
                     pad,
                     0,
                     scan$2,
                     token_string) /*<<scanf.ml:1418:7>>*/ ;
         }
        var
         rest$1 = fmt$0[2],
         scan =
            /*<<scanf.ml:1290:4>>*/ function(width, param, ib){
             /*<<scanf.ml:1290:26>>*/ return  /*<<scanf.ml:1290:26>>*/ scan_string
                     /*<<scanf.ml:1290:26>>*/ (0, width, ib) /*<<scanf.ml:1290:51>>*/ ;
            /*<<scanf.ml:1290:51>>*/ };
         /*<<scanf.ml:1291:4>>*/ return  /*<<scanf.ml:1291:4>>*/ pad_prec_scanf
                 /*<<scanf.ml:1291:4>>*/ (ib,
                 rest$1,
                 readers,
                 pad,
                 0,
                 scan,
                 token_string) /*<<scanf.ml:1418:7>>*/ ;
       case 3:
        var
         rest$5 = fmt$0[2],
         pad$0 = fmt$0[1],
         scan$3 =
            /*<<scanf.ml:1294:4>>*/ function(width, param, ib){
             /*<<scanf.ml:1294:26>>*/ return  /*<<scanf.ml:1294:26>>*/ scan_caml_string
                     /*<<scanf.ml:1294:26>>*/ (width, ib) /*<<scanf.ml:1294:51>>*/ ;
            /*<<scanf.ml:1294:51>>*/ };
         /*<<scanf.ml:1295:4>>*/ return  /*<<scanf.ml:1295:4>>*/ pad_prec_scanf
                 /*<<scanf.ml:1295:4>>*/ (ib,
                 rest$5,
                 readers,
                 pad$0,
                 0,
                 scan$3,
                 token_string) /*<<scanf.ml:1418:7>>*/ ;
       case 4:
        var
         rest$6 = fmt$0[4],
         prec = fmt$0[3],
         pad$1 = fmt$0[2],
         iconv = fmt$0[1],
         conv =
            /*<<scanf.ml:1297:12>>*/  /*<<scanf.ml:1297:12>>*/ integer_conversion_of_char
             /*<<scanf.ml:1297:12>>*/ ( /*<<scanf.ml:1297:39>>*/ caml_call1
               /*<<scanf.ml:1297:39>>*/ (CamlinternalFormat[16], iconv)),
         scan$4 =
           function(width, param, ib){
             /*<<scanf.ml:1298:26>>*/ return  /*<<scanf.ml:1298:26>>*/ scan_int_conversion
                     /*<<scanf.ml:1298:26>>*/ (conv, width, ib) /*<<scanf.ml:1298:56>>*/ ;
            /*<<scanf.ml:1298:56>>*/ };
         /*<<scanf.ml:1299:49>>*/ return  /*<<scanf.ml:1299:49>>*/ pad_prec_scanf
                 /*<<scanf.ml:1299:49>>*/ (ib,
                 rest$6,
                 readers,
                 pad$1,
                 prec,
                 scan$4,
                 function(ib){
                   /*<<scanf.ml:537:24>>*/ return  /*<<scanf.ml:537:24>>*/ caml_int_of_string
                           /*<<scanf.ml:537:24>>*/ ( /*<<scanf.ml:537:38>>*/ token_int_literal
                             /*<<scanf.ml:537:38>>*/ (conv, ib)) /*<<scanf.ml:537:24>>*/ ;
                 }) /*<<scanf.ml:1418:7>>*/ ;
       case 5:
        var
         rest$7 = fmt$0[4],
         prec$0 = fmt$0[3],
         pad$2 = fmt$0[2],
         iconv$0 = fmt$0[1],
         conv$0 =
            /*<<scanf.ml:1301:12>>*/  /*<<scanf.ml:1301:12>>*/ integer_conversion_of_char
             /*<<scanf.ml:1301:12>>*/ ( /*<<scanf.ml:1301:39>>*/ caml_call1
               /*<<scanf.ml:1301:39>>*/ (CamlinternalFormat[16], iconv$0)),
         scan$5 =
           function(width, param, ib){
             /*<<scanf.ml:1302:26>>*/ return  /*<<scanf.ml:1302:26>>*/ scan_int_conversion
                     /*<<scanf.ml:1302:26>>*/ (conv$0, width, ib) /*<<scanf.ml:1302:56>>*/ ;
            /*<<scanf.ml:1302:56>>*/ };
         /*<<scanf.ml:1303:49>>*/ return  /*<<scanf.ml:1303:49>>*/ pad_prec_scanf
                 /*<<scanf.ml:1303:49>>*/ (ib,
                 rest$7,
                 readers,
                 pad$2,
                 prec$0,
                 scan$5,
                 function(ib){
                   /*<<scanf.ml:558:26>>*/ return  /*<<scanf.ml:558:26>>*/ caml_int_of_string
                           /*<<scanf.ml:558:26>>*/ ( /*<<scanf.ml:558:42>>*/ token_int_literal
                             /*<<scanf.ml:558:42>>*/ (conv$0, ib)) /*<<scanf.ml:558:26>>*/ ;
                 }) /*<<scanf.ml:1418:7>>*/ ;
       case 6:
        var
         rest$8 = fmt$0[4],
         prec$1 = fmt$0[3],
         pad$3 = fmt$0[2],
         iconv$1 = fmt$0[1],
         conv$1 =
            /*<<scanf.ml:1305:12>>*/  /*<<scanf.ml:1305:12>>*/ integer_conversion_of_char
             /*<<scanf.ml:1305:12>>*/ ( /*<<scanf.ml:1305:39>>*/ caml_call1
               /*<<scanf.ml:1305:39>>*/ (CamlinternalFormat[16], iconv$1)),
         scan$6 =
           function(width, param, ib){
             /*<<scanf.ml:1306:26>>*/ return  /*<<scanf.ml:1306:26>>*/ scan_int_conversion
                     /*<<scanf.ml:1306:26>>*/ (conv$1, width, ib) /*<<scanf.ml:1306:56>>*/ ;
            /*<<scanf.ml:1306:56>>*/ };
         /*<<scanf.ml:1307:49>>*/ return  /*<<scanf.ml:1307:49>>*/ pad_prec_scanf
                 /*<<scanf.ml:1307:49>>*/ (ib,
                 rest$8,
                 readers,
                 pad$3,
                 prec$1,
                 scan$6,
                 function(ib){
                   /*<<scanf.ml:557:30>>*/ return  /*<<scanf.ml:557:30>>*/ caml_int_of_string
                           /*<<scanf.ml:557:30>>*/ ( /*<<scanf.ml:557:50>>*/ token_int_literal
                             /*<<scanf.ml:557:50>>*/ (conv$1, ib)) /*<<scanf.ml:557:30>>*/ ;
                 }) /*<<scanf.ml:1418:7>>*/ ;
       case 7:
        var
         rest$9 = fmt$0[4],
         prec$2 = fmt$0[3],
         pad$4 = fmt$0[2],
         iconv$2 = fmt$0[1],
         conv$2 =
            /*<<scanf.ml:1309:12>>*/  /*<<scanf.ml:1309:12>>*/ integer_conversion_of_char
             /*<<scanf.ml:1309:12>>*/ ( /*<<scanf.ml:1309:39>>*/ caml_call1
               /*<<scanf.ml:1309:39>>*/ (CamlinternalFormat[16], iconv$2)),
         scan$7 =
           function(width, param, ib){
             /*<<scanf.ml:1310:26>>*/ return  /*<<scanf.ml:1310:26>>*/ scan_int_conversion
                     /*<<scanf.ml:1310:26>>*/ (conv$2, width, ib) /*<<scanf.ml:1310:56>>*/ ;
            /*<<scanf.ml:1310:56>>*/ };
         /*<<scanf.ml:1311:49>>*/ return  /*<<scanf.ml:1311:49>>*/ pad_prec_scanf
                 /*<<scanf.ml:1311:49>>*/ (ib,
                 rest$9,
                 readers,
                 pad$4,
                 prec$2,
                 scan$7,
                 function(ib){
                   /*<<scanf.ml:559:26>>*/ return  /*<<scanf.ml:559:26>>*/ runtime.caml_int64_of_string
                           /*<<scanf.ml:559:26>>*/ ( /*<<scanf.ml:559:42>>*/ token_int_literal
                             /*<<scanf.ml:559:42>>*/ (conv$2, ib)) /*<<scanf.ml:559:26>>*/ ;
                 }) /*<<scanf.ml:1418:7>>*/ ;
       case 8:
        switch(fmt$0[1][2]){
          case 5:
          case 8:
           var rest$11 = fmt$0[4], prec$4 = fmt$0[3], pad$6 = fmt$0[2];
            /*<<scanf.ml:1313:4>>*/ return  /*<<scanf.ml:1313:4>>*/ pad_prec_scanf
                    /*<<scanf.ml:1313:4>>*/ (ib,
                    rest$11,
                    readers,
                    pad$6,
                    prec$4,
                    scan_caml_float,
                    token_float) /*<<scanf.ml:1418:7>>*/ ;
          case 6:
          case 7:
           var rest$12 = fmt$0[4], prec$5 = fmt$0[3], pad$7 = fmt$0[2];
            /*<<scanf.ml:1318:4>>*/ return  /*<<scanf.ml:1318:4>>*/ pad_prec_scanf
                    /*<<scanf.ml:1318:4>>*/ (ib,
                    rest$12,
                    readers,
                    pad$7,
                    prec$5,
                    scan_hex_float,
                    token_float) /*<<scanf.ml:1418:7>>*/ ;
          default:
           var rest$10 = fmt$0[4], prec$3 = fmt$0[3], pad$5 = fmt$0[2];
            /*<<scanf.ml:1316:4>>*/ return  /*<<scanf.ml:1316:4>>*/ pad_prec_scanf
                    /*<<scanf.ml:1316:4>>*/ (ib,
                    rest$10,
                    readers,
                    pad$5,
                    prec$3,
                    scan_float,
                    token_float) /*<<scanf.ml:1418:7>>*/ ;
        }
       case 9:
        var
         rest$13 = fmt$0[2],
         pad$8 = fmt$0[1],
         scan$8 =
            /*<<scanf.ml:1320:4>>*/ function(_O_, param, ib){
            var
             c =
                /*<<scanf.ml:1089:10>>*/  /*<<scanf.ml:1089:10>>*/ checked_peek_char
                 /*<<scanf.ml:1089:10>>*/ (ib),
             m =
                /*<<scanf.ml:1090:2>>*/ 102 === c
                ? 5
                : 116
                  === c
                  ? 4
                  :  /*<<scanf.ml:1095:6>>*/ bad_input
                     /*<<scanf.ml:1095:6>>*/ ( /*<<scanf.ml:1096:8>>*/ caml_call2
                       /*<<scanf.ml:1096:8>>*/ (Stdlib_Printf[4], _n_, c));
             /*<<scanf.ml:1097:2>>*/ return  /*<<scanf.ml:1097:2>>*/ scan_string
                     /*<<scanf.ml:1097:2>>*/ (0, m, ib) /*<<scanf.ml:1320:34>>*/ ;
            /*<<scanf.ml:1320:34>>*/ };
         /*<<scanf.ml:1321:4>>*/ return  /*<<scanf.ml:1321:4>>*/ pad_prec_scanf
                 /*<<scanf.ml:1321:4>>*/ (ib,
                 rest$13,
                 readers,
                 pad$8,
                 0,
                 scan$8,
                 token_bool) /*<<scanf.ml:1418:7>>*/ ;
       case 10:
        var rest$14 = fmt$0[1];
         /*<<scanf.ml:1337:7>>*/ if
         (!
           /*<<scanf.ml:1337:7>>*/ end_of_input /*<<scanf.ml:1337:7>>*/ (ib))
          /*<<scanf.ml:1338:9>>*/ return  /*<<scanf.ml:1338:9>>*/ bad_input
                  /*<<scanf.ml:1338:9>>*/ (cst_end_of_input_not_found) /*<<scanf.ml:1418:7>>*/ ;
        fmt$0 = rest$14;
        break;
       case 11:
        var rest$15 = fmt$0[2], str$0 = fmt$0[1];
         /*<<scanf.ml:1341:4>>*/  /*<<scanf.ml:1341:4>>*/ caml_call2
          /*<<scanf.ml:1341:4>>*/ (Stdlib_String[30],
          function(_N_){ /*<<?>>*/ return check_char(ib, _N_);},
          str$0);
        fmt$0 = rest$15;
        break;
       case 12:
        var rest$16 = fmt$0[2], chr = fmt$0[1];
         /*<<scanf.ml:1344:4>>*/  /*<<scanf.ml:1344:4>>*/ check_char
          /*<<scanf.ml:1344:4>>*/ (ib, chr);
        fmt$0 = rest$16;
        break;
       case 13:
        var rest$17 = fmt$0[3], fmtty = fmt$0[2], pad_opt = fmt$0[1];
         /*<<scanf.ml:1348:12>>*/  /*<<scanf.ml:1348:12>>*/ scan_caml_string
          /*<<scanf.ml:1348:12>>*/ ( /*<<scanf.ml:1348:29>>*/ width_of_pad_opt
            /*<<scanf.ml:1348:29>>*/ (pad_opt),
          ib);
        var
         s =
            /*<<scanf.ml:1349:12>>*/  /*<<scanf.ml:1349:12>>*/ token_string
             /*<<scanf.ml:1349:12>>*/ (ib);
         /*<<scanf.ml:1350:4>>*/ try{
         var
          _E_ =
             /*<<scanf.ml:1351:10>>*/  /*<<scanf.ml:1351:10>>*/ caml_call2
              /*<<scanf.ml:1351:10>>*/ (CamlinternalFormat[14], s, fmtty),
          fmt$3 = _E_;
        }
        catch(exn$0){
         var exn = caml_wrap_exception(exn$0);
         if(exn[1] !== Stdlib[7]) throw caml_maybe_attach_backtrace(exn, 0);
         var
          msg = exn[2],
          fmt$3 =
             /*<<scanf.ml:1352:26>>*/ bad_input /*<<scanf.ml:1352:26>>*/ (msg);
        }
         /*<<scanf.ml:1354:4>>*/ return [0,
                fmt$3,
                 /*<<scanf.ml:1354:15>>*/ make_scanf
                  /*<<scanf.ml:1354:15>>*/ (ib, rest$17, readers)] /*<<scanf.ml:1354:4>>*/ ;
       case 14:
        var rest$18 = fmt$0[3], fmtty$0 = fmt$0[2], pad_opt$0 = fmt$0[1];
         /*<<scanf.ml:1356:12>>*/  /*<<scanf.ml:1356:12>>*/ scan_caml_string
          /*<<scanf.ml:1356:12>>*/ ( /*<<scanf.ml:1356:29>>*/ width_of_pad_opt
            /*<<scanf.ml:1356:29>>*/ (pad_opt$0),
          ib);
        var
         s$0 =
            /*<<scanf.ml:1357:12>>*/  /*<<scanf.ml:1357:12>>*/ token_string
             /*<<scanf.ml:1357:12>>*/ (ib);
        try{
         var
          fmt$6 =
             /*<<scanf.ml:1360:26>>*/ caml_call2
               /*<<scanf.ml:1360:26>>*/ (CamlinternalFormat[13], 0, s$0)
             [1],
          fmt$7 =
             /*<<scanf.ml:1361:27>>*/ caml_call2
               /*<<scanf.ml:1361:27>>*/ (CamlinternalFormat[13], 0, s$0)
             [1],
          _G_ =
             /*<<scanf.ml:1375:36>>*/  /*<<scanf.ml:1375:36>>*/ caml_call1
              /*<<scanf.ml:1375:36>>*/ (CamlinternalFormat[21], fmtty$0),
          _H_ =
             /*<<scanf.ml:1375:25>>*/  /*<<scanf.ml:1375:25>>*/ caml_call1
              /*<<scanf.ml:1375:25>>*/ (CamlinternalFormatBasics[2], _G_),
          fmt$8 =
             /*<<scanf.ml:1375:8>>*/  /*<<scanf.ml:1375:8>>*/ caml_call2
              /*<<scanf.ml:1375:8>>*/ (CamlinternalFormat[12], fmt$7, _H_),
          _I_ =
             /*<<scanf.ml:1374:24>>*/  /*<<scanf.ml:1374:24>>*/ caml_call1
              /*<<scanf.ml:1374:24>>*/ (CamlinternalFormatBasics[2], fmtty$0),
          _J_ =
             /*<<scanf.ml:1374:8>>*/  /*<<scanf.ml:1374:8>>*/ caml_call2
              /*<<scanf.ml:1374:8>>*/ (CamlinternalFormat[12], fmt$6, _I_),
          fmt$5 = fmt$8,
          fmt$4 = _J_;
        }
        catch(exn){
         var exn$0 = caml_wrap_exception(exn);
         if(exn$0[1] !== Stdlib[7])
          throw caml_maybe_attach_backtrace(exn$0, 0);
         var
          msg$0 = exn$0[2],
          _F_ = bad_input(msg$0),
          fmt$5 = _F_[2],
          fmt$4 = _F_[1];
        }
         /*<<scanf.ml:1378:4>>*/ return [0,
                [0, fmt$4, s$0],
                 /*<<scanf.ml:1379:10>>*/ make_scanf
                  /*<<scanf.ml:1379:10>>*/ (ib,
                   /*<<scanf.ml:1379:24>>*/ caml_call2
                    /*<<scanf.ml:1379:24>>*/ (CamlinternalFormatBasics[3],
                    fmt$5,
                    rest$18),
                  readers)] /*<<scanf.ml:1378:4>>*/ ;
       case 15:
         /*<<scanf.ml:1323:4>>*/ return  /*<<scanf.ml:1323:4>>*/ caml_call1
                 /*<<scanf.ml:1323:4>>*/ (Stdlib[1],
                 cst_scanf_bad_conversion_a) /*<<scanf.ml:1418:7>>*/ ;
       case 16:
         /*<<scanf.ml:1325:4>>*/ return  /*<<scanf.ml:1325:4>>*/ caml_call1
                 /*<<scanf.ml:1325:4>>*/ (Stdlib[1],
                 cst_scanf_bad_conversion_t) /*<<scanf.ml:1418:7>>*/ ;
       case 17:
        var
         rest$19 = fmt$0[2],
         formatting_lit = fmt$0[1],
         _K_ =
            /*<<scanf.ml:1401:32>>*/  /*<<scanf.ml:1401:32>>*/ caml_call1
             /*<<scanf.ml:1401:32>>*/ (CamlinternalFormat[17], formatting_lit);
         /*<<scanf.ml:1401:4>>*/  /*<<scanf.ml:1401:4>>*/ caml_call2
          /*<<scanf.ml:1401:4>>*/ (Stdlib_String[30],
          function(_M_){ /*<<?>>*/ return check_char(ib, _M_);},
          _K_);
        fmt$0 = rest$19;
        break;
       case 18:
        var _L_ = fmt$0[1];
        if(0 === _L_[0]){
         var rest$20 = fmt$0[2], fmt$9 = _L_[1][1];
          /*<<scanf.ml:1404:4>>*/  /*<<scanf.ml:1404:4>>*/ check_char
           /*<<scanf.ml:1404:4>>*/ (ib, 64);
          /*<<scanf.ml:1404:23>>*/  /*<<scanf.ml:1404:23>>*/ check_char
           /*<<scanf.ml:1404:23>>*/ (ib, 123);
         var
          fmt$10 =
             /*<<scanf.ml:1405:18>>*/  /*<<scanf.ml:1405:18>>*/ caml_call2
              /*<<scanf.ml:1405:18>>*/ (CamlinternalFormatBasics[3],
              fmt$9,
              rest$20);
         fmt$0 = fmt$10;
        }
        else{
         var rest$21 = fmt$0[2], fmt$11 = _L_[1][1];
          /*<<scanf.ml:1407:4>>*/  /*<<scanf.ml:1407:4>>*/ check_char
           /*<<scanf.ml:1407:4>>*/ (ib, 64);
          /*<<scanf.ml:1407:23>>*/  /*<<scanf.ml:1407:23>>*/ check_char
           /*<<scanf.ml:1407:23>>*/ (ib, 91);
         var
          fmt$12 =
             /*<<scanf.ml:1408:18>>*/  /*<<scanf.ml:1408:18>>*/ caml_call2
              /*<<scanf.ml:1408:18>>*/ (CamlinternalFormatBasics[3],
              fmt$11,
              rest$21);
         fmt$0 = fmt$12;
        }
        break;
       case 19:
        var fmt_rest = fmt$0[1];
         /*<<scanf.ml:1329:4>>*/ if(! readers)
          /*<<scanf.ml:1334:8>>*/ return  /*<<scanf.ml:1334:8>>*/ caml_call1
                  /*<<scanf.ml:1334:8>>*/ (Stdlib[1],
                  cst_scanf_missing_reader) /*<<scanf.ml:1418:7>>*/ ;
        var
         readers_rest = readers[2],
         reader = readers[1],
         x =
            /*<<scanf.ml:1331:16>>*/  /*<<scanf.ml:1331:16>>*/ caml_call1
             /*<<scanf.ml:1331:16>>*/ (reader, ib);
         /*<<scanf.ml:1332:8>>*/ return [0,
                x,
                 /*<<scanf.ml:1332:17>>*/ make_scanf
                  /*<<scanf.ml:1332:17>>*/ (ib, fmt_rest, readers_rest)] /*<<scanf.ml:1332:8>>*/ ;
       case 20:
        var width_opt = fmt$0[1], match$1 = fmt$0[3];
        if(typeof match$1 !== "number" && 17 === match$1[0]){
         var
          rest$23 = match$1[2],
          fmting_lit$0 = match$1[1],
          char_set$0 = fmt$0[2],
          match$2 =
             /*<<scanf.ml:1382:19>>*/  /*<<scanf.ml:1382:19>>*/ stopper_of_formatting_lit
              /*<<scanf.ml:1382:19>>*/ (fmting_lit$0),
          str$1 = match$2[2],
          stp$0 = match$2[1],
          width$2 =
             /*<<scanf.ml:1383:16>>*/  /*<<scanf.ml:1383:16>>*/ width_of_pad_opt
              /*<<scanf.ml:1383:16>>*/ (width_opt);
          /*<<scanf.ml:1384:4>>*/  /*<<scanf.ml:1384:4>>*/ scan_chars_in_char_set
           /*<<scanf.ml:1384:4>>*/ (char_set$0, [0, stp$0], width$2, ib);
         var
          s$2 =
             /*<<scanf.ml:1385:12>>*/  /*<<scanf.ml:1385:12>>*/ token_string
              /*<<scanf.ml:1385:12>>*/ (ib),
          str_rest$0 =  /*<<scanf.ml:1386:19>>*/ [11, str$1, rest$23];
          /*<<scanf.ml:1387:4>>*/ return [0,
                 s$2,
                  /*<<scanf.ml:1387:13>>*/ make_scanf
                   /*<<scanf.ml:1387:13>>*/ (ib, str_rest$0, readers)] /*<<scanf.ml:1387:4>>*/ ;
        }
        var
         rest$22 = fmt$0[3],
         char_set = fmt$0[2],
         width$1 =
            /*<<scanf.ml:1389:16>>*/  /*<<scanf.ml:1389:16>>*/ width_of_pad_opt
             /*<<scanf.ml:1389:16>>*/ (width_opt);
         /*<<scanf.ml:1390:4>>*/  /*<<scanf.ml:1390:4>>*/ scan_chars_in_char_set
          /*<<scanf.ml:1390:4>>*/ (char_set, 0, width$1, ib);
        var
         s$1 =
            /*<<scanf.ml:1391:12>>*/  /*<<scanf.ml:1391:12>>*/ token_string
             /*<<scanf.ml:1391:12>>*/ (ib);
         /*<<scanf.ml:1392:4>>*/ return [0,
                s$1,
                 /*<<scanf.ml:1392:13>>*/ make_scanf
                  /*<<scanf.ml:1392:13>>*/ (ib, rest$22, readers)] /*<<scanf.ml:1392:4>>*/ ;
       case 21:
        var rest$24 = fmt$0[2], counter = fmt$0[1];
        switch(counter){
          case 0:
           var count = ib[5]; break;
          case 1:
           var
            count =
               /*<<scanf.ml:1133:20>>*/ char_count
                /*<<scanf.ml:1133:20>>*/ (ib);
           break;
          default: var count = ib[6];
        }
         /*<<scanf.ml:1395:4>>*/ return [0,
                count,
                 /*<<scanf.ml:1395:17>>*/ make_scanf
                  /*<<scanf.ml:1395:17>>*/ (ib, rest$24, readers)] /*<<scanf.ml:1395:4>>*/ ;
       case 22:
        var
         rest$25 = fmt$0[1],
         c$2 =
            /*<<scanf.ml:1397:12>>*/  /*<<scanf.ml:1397:12>>*/ checked_peek_char
             /*<<scanf.ml:1397:12>>*/ (ib);
         /*<<scanf.ml:1398:4>>*/ return [0,
                c$2,
                 /*<<scanf.ml:1398:13>>*/ make_scanf
                  /*<<scanf.ml:1398:13>>*/ (ib, rest$25, readers)] /*<<scanf.ml:1398:4>>*/ ;
       case 23:
        var
         rest$26 = fmt$0[2],
         ign = fmt$0[1],
         fmt$13 =
            /*<<scanf.ml:1411:32>>*/ caml_call2
              /*<<scanf.ml:1411:32>>*/ (CamlinternalFormat[6], ign, rest$26)
            [1],
         match$3 =
            /*<<scanf.ml:1412:16>>*/  /*<<scanf.ml:1412:16>>*/ make_scanf
             /*<<scanf.ml:1412:16>>*/ (ib, fmt$13, readers);
        if(! match$3)
          /*<<scanf.ml:1414:13>>*/ throw  /*<<scanf.ml:1414:13>>*/ caml_maybe_attach_backtrace
                 /*<<scanf.ml:1414:13>>*/ ([0, Assert_failure, _s_], 1);
        var arg_rest = match$3[2];
         /*<<scanf.ml:1413:28>>*/ return arg_rest /*<<scanf.ml:1413:28>>*/ ;
       default:
         /*<<scanf.ml:1327:4>>*/ return  /*<<scanf.ml:1327:4>>*/ caml_call1
                 /*<<scanf.ml:1327:4>>*/ (Stdlib[1],
                 cst_scanf_bad_conversion_custo) /*<<scanf.ml:1418:7>>*/ ;
     }
    }
    /*<<scanf.ml:1418:7>>*/ }
   function pad_prec_scanf(ib, fmt, readers, pad, prec, scan, token){
     /*<<scanf.ml:1429:42>>*/ if(typeof pad === "number"){
     if(typeof prec !== "number"){
      var p = prec[1];
       /*<<scanf.ml:1435:12>>*/  /*<<scanf.ml:1435:12>>*/ caml_call3
        /*<<scanf.ml:1435:12>>*/ (scan, Stdlib[19], p, ib);
      var
       x$0 =
          /*<<scanf.ml:1436:12>>*/  /*<<scanf.ml:1436:12>>*/ caml_call1
           /*<<scanf.ml:1436:12>>*/ (token, ib);
       /*<<scanf.ml:1437:4>>*/ return [0,
              x$0,
               /*<<scanf.ml:1437:13>>*/ make_scanf
                /*<<scanf.ml:1437:13>>*/ (ib, fmt, readers)] /*<<scanf.ml:1437:4>>*/ ;
     }
     if(prec)
       /*<<scanf.ml:1453:4>>*/ return  /*<<scanf.ml:1453:4>>*/ caml_call1
               /*<<scanf.ml:1453:4>>*/ (Stdlib[1], cst_scanf_bad_conversion) /*<<scanf.ml:1453:46>>*/ ;
      /*<<scanf.ml:1431:12>>*/  /*<<scanf.ml:1431:12>>*/ caml_call3
       /*<<scanf.ml:1431:12>>*/ (scan, Stdlib[19], Stdlib[19], ib);
     var
      x =
         /*<<scanf.ml:1432:12>>*/  /*<<scanf.ml:1432:12>>*/ caml_call1
          /*<<scanf.ml:1432:12>>*/ (token, ib);
      /*<<scanf.ml:1433:4>>*/ return [0,
             x,
              /*<<scanf.ml:1433:13>>*/ make_scanf
               /*<<scanf.ml:1433:13>>*/ (ib, fmt, readers)] /*<<scanf.ml:1433:4>>*/ ;
    }
    if(0 !== pad[0])
      /*<<scanf.ml:1451:4>>*/ return  /*<<scanf.ml:1451:4>>*/ caml_call1
              /*<<scanf.ml:1451:4>>*/ (Stdlib[1], cst_scanf_bad_conversion$2) /*<<scanf.ml:1453:46>>*/ ;
    if(! pad[1])
      /*<<scanf.ml:1447:4>>*/ return  /*<<scanf.ml:1447:4>>*/ caml_call1
              /*<<scanf.ml:1447:4>>*/ (Stdlib[1], cst_scanf_bad_conversion$1) /*<<scanf.ml:1453:46>>*/ ;
    var w = pad[2];
    if(typeof prec !== "number"){
     var p$0 = prec[1];
      /*<<scanf.ml:1443:12>>*/  /*<<scanf.ml:1443:12>>*/ caml_call3
       /*<<scanf.ml:1443:12>>*/ (scan, w, p$0, ib);
     var
      x$2 =
         /*<<scanf.ml:1444:12>>*/  /*<<scanf.ml:1444:12>>*/ caml_call1
          /*<<scanf.ml:1444:12>>*/ (token, ib);
      /*<<scanf.ml:1445:4>>*/ return [0,
             x$2,
              /*<<scanf.ml:1445:13>>*/ make_scanf
               /*<<scanf.ml:1445:13>>*/ (ib, fmt, readers)] /*<<scanf.ml:1445:4>>*/ ;
    }
    if(prec)
      /*<<scanf.ml:1449:4>>*/ return  /*<<scanf.ml:1449:4>>*/ caml_call1
              /*<<scanf.ml:1449:4>>*/ (Stdlib[1], cst_scanf_bad_conversion$0) /*<<scanf.ml:1453:46>>*/ ;
     /*<<scanf.ml:1439:12>>*/  /*<<scanf.ml:1439:12>>*/ caml_call3
      /*<<scanf.ml:1439:12>>*/ (scan, w, Stdlib[19], ib);
    var
     x$1 =
        /*<<scanf.ml:1440:12>>*/  /*<<scanf.ml:1440:12>>*/ caml_call1
         /*<<scanf.ml:1440:12>>*/ (token, ib);
     /*<<scanf.ml:1441:4>>*/ return [0,
            x$1,
             /*<<scanf.ml:1441:13>>*/ make_scanf
              /*<<scanf.ml:1441:13>>*/ (ib, fmt, readers)] /*<<scanf.ml:1441:4>>*/ ;
    /*<<scanf.ml:1453:46>>*/ }
   function kscanf_gen(ib, ef, af, param){
    var str = param[2], fmt = param[1];
    function k(readers, f$1){
      /*<<scanf.ml:1465:4>>*/ caml_call1(Stdlib_Buffer[9], ib[8]);
      /*<<scanf.ml:1465:4>>*/ try{
      var
       args$1 =
          /*<<scanf.ml:1466:10>>*/  /*<<scanf.ml:1466:10>>*/ make_scanf
           /*<<scanf.ml:1466:10>>*/ (ib, fmt, readers);
     }
     catch(exc$0){
      var exc = caml_wrap_exception(exc$0);
      if
       (exc[1] !== Scan_failure && exc[1] !== Stdlib[7] && exc !== Stdlib[12]){
       if(exc[1] !== Stdlib[6]) throw caml_maybe_attach_backtrace(exc, 0);
       var
        msg = exc[2],
        _z_ =
           /*<<scanf.ml:1470:45>>*/  /*<<scanf.ml:1470:45>>*/ caml_call1
            /*<<scanf.ml:1470:45>>*/ (Stdlib_String[25], str),
        _A_ =
           /*<<scanf.ml:1470:45>>*/  /*<<scanf.ml:1470:45>>*/ caml_call2
            /*<<scanf.ml:1470:45>>*/ (Stdlib[28], _z_, cst$0),
        _B_ =
           /*<<scanf.ml:1470:27>>*/  /*<<scanf.ml:1470:27>>*/ caml_call2
            /*<<scanf.ml:1470:27>>*/ (Stdlib[28], cst_in_format, _A_),
        _C_ =
           /*<<scanf.ml:1470:20>>*/  /*<<scanf.ml:1470:20>>*/ caml_call2
            /*<<scanf.ml:1470:20>>*/ (Stdlib[28], msg, _B_);
        /*<<scanf.ml:1470:20>>*/ return  /*<<scanf.ml:1470:20>>*/ caml_call1
                /*<<scanf.ml:1470:20>>*/ (Stdlib[1], _C_) /*<<scanf.ml:1472:25>>*/ ;
      }
       /*<<scanf.ml:1468:8>>*/ return  /*<<scanf.ml:1468:8>>*/ caml_call2
               /*<<scanf.ml:1468:8>>*/ (ef, ib, exc) /*<<scanf.ml:1472:25>>*/ ;
     }
     var f = f$1, args = args$1;
      /*<<scanf.ml:1460:18>>*/ for(;;){
      if(! args)
        /*<<scanf.ml:1472:11>>*/ return  /*<<scanf.ml:1472:11>>*/ caml_call1
                /*<<scanf.ml:1472:11>>*/ (af, f) /*<<scanf.ml:1472:25>>*/ ;
      var
       args$0 = args[2],
       x = args[1],
       f$0 =
          /*<<scanf.ml:1461:27>>*/  /*<<scanf.ml:1461:27>>*/ caml_call1
           /*<<scanf.ml:1461:27>>*/ (f, x);
      f = f$0;
      args = args$0;
     }
     /*<<scanf.ml:1472:25>>*/ }
     /*<<scanf.ml:1474:2>>*/ return  /*<<scanf.ml:1474:2>>*/ take_format_readers
             /*<<scanf.ml:1474:2>>*/ (k, fmt) /*<<scanf.ml:1474:27>>*/ ;
    /*<<scanf.ml:1474:27>>*/ }
   function kscanf(ib, ef, fmt){
     /*<<scanf.ml:1477:2>>*/ return  /*<<scanf.ml:1477:2>>*/ kscanf_gen
             /*<<scanf.ml:1477:2>>*/ (ib,
             ef,
             function(x){
               /*<<scanf.ml:1477:29>>*/ return x /*<<scanf.ml:1477:29>>*/ ;
              /*<<scanf.ml:1477:30>>*/ },
             fmt) /*<<scanf.ml:1477:35>>*/ ;
    /*<<scanf.ml:1477:35>>*/ }
   function kscanf_opt(ib, fmt){
     /*<<scanf.ml:1480:2>>*/ return  /*<<scanf.ml:1480:2>>*/ kscanf_gen
             /*<<scanf.ml:1480:2>>*/ (ib,
             function(_y_, param){
               /*<<scanf.ml:1480:28>>*/ return 0 /*<<scanf.ml:1480:28>>*/ ;
              /*<<scanf.ml:1480:32>>*/ },
             function(x){
               /*<<scanf.ml:1480:44>>*/ return [0, x] /*<<scanf.ml:1480:44>>*/ ;
              /*<<scanf.ml:1480:50>>*/ },
             fmt) /*<<scanf.ml:1480:55>>*/ ;
    /*<<scanf.ml:1480:55>>*/ }
   function bscanf(ib, fmt){
     /*<<scanf.ml:1485:20>>*/ return  /*<<scanf.ml:1485:20>>*/ kscanf
             /*<<scanf.ml:1485:20>>*/ (ib, scanf_bad_input, fmt) /*<<scanf.ml:1485:50>>*/ ;
    /*<<scanf.ml:1485:50>>*/ }
   function bscanf_opt(ib, fmt){
     /*<<scanf.ml:1486:24>>*/ return  /*<<scanf.ml:1486:24>>*/ kscanf_opt
             /*<<scanf.ml:1486:24>>*/ (ib, fmt) /*<<scanf.ml:1486:41>>*/ ;
    /*<<scanf.ml:1486:41>>*/ }
   function ksscanf(s, ef, fmt){
     /*<<scanf.ml:1488:23>>*/ return  /*<<scanf.ml:1488:23>>*/ kscanf
             /*<<scanf.ml:1488:23>>*/ ( /*<<scanf.ml:1488:31>>*/ from_string
               /*<<scanf.ml:1488:31>>*/ (s),
             ef,
             fmt) /*<<scanf.ml:1488:62>>*/ ;
    /*<<scanf.ml:1488:62>>*/ }
   function sscanf(s, fmt){
     /*<<scanf.ml:1489:19>>*/ return  /*<<scanf.ml:1489:19>>*/ kscanf
             /*<<scanf.ml:1489:19>>*/ ( /*<<scanf.ml:1489:27>>*/ from_string
               /*<<scanf.ml:1489:27>>*/ (s),
             scanf_bad_input,
             fmt) /*<<scanf.ml:1489:71>>*/ ;
    /*<<scanf.ml:1489:71>>*/ }
   function sscanf_opt(s, fmt){
     /*<<scanf.ml:1490:23>>*/ return  /*<<scanf.ml:1490:23>>*/ kscanf_opt
             /*<<scanf.ml:1490:23>>*/ ( /*<<scanf.ml:1490:34>>*/ from_string
               /*<<scanf.ml:1490:34>>*/ (s),
             fmt) /*<<scanf.ml:1490:62>>*/ ;
    /*<<scanf.ml:1490:62>>*/ }
   function scanf(fmt){
     /*<<scanf.ml:1492:16>>*/ return  /*<<scanf.ml:1492:16>>*/ kscanf
             /*<<scanf.ml:1492:16>>*/ (stdin, scanf_bad_input, fmt) /*<<scanf.ml:1492:57>>*/ ;
    /*<<scanf.ml:1492:57>>*/ }
   function scanf_opt(fmt){
     /*<<scanf.ml:1493:20>>*/ return  /*<<scanf.ml:1493:20>>*/ kscanf_opt
             /*<<scanf.ml:1493:20>>*/ (stdin, fmt) /*<<scanf.ml:1493:49>>*/ ;
    /*<<scanf.ml:1493:49>>*/ }
   function bscanf_format(ib, format, f){
     /*<<scanf.ml:1502:4>>*/  /*<<scanf.ml:1502:12>>*/ scan_caml_string
      /*<<scanf.ml:1502:12>>*/ (Stdlib[19], ib);
    var
     str =
        /*<<scanf.ml:1503:14>>*/  /*<<scanf.ml:1503:14>>*/ token_string
         /*<<scanf.ml:1503:14>>*/ (ib);
     /*<<scanf.ml:1504:4>>*/ try{
     var
      _x_ =
         /*<<scanf.ml:1505:10>>*/  /*<<scanf.ml:1505:10>>*/ caml_call2
          /*<<scanf.ml:1505:10>>*/ (CamlinternalFormat[15], str, format),
      fmt = _x_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Stdlib[7]) throw caml_maybe_attach_backtrace(exn, 0);
     var
      msg = exn[2],
      fmt =  /*<<scanf.ml:1506:26>>*/ bad_input /*<<scanf.ml:1506:26>>*/ (msg);
    }
     /*<<scanf.ml:1507:4>>*/ return  /*<<scanf.ml:1507:4>>*/ caml_call1
             /*<<scanf.ml:1507:4>>*/ (f, fmt) /*<<scanf.ml:1507:10>>*/ ;
    /*<<scanf.ml:1507:10>>*/ }
   function sscanf_format(s, format, f){
     /*<<scanf.ml:1513:20>>*/ return  /*<<scanf.ml:1513:20>>*/ bscanf_format
             /*<<scanf.ml:1513:20>>*/ ( /*<<scanf.ml:1513:34>>*/ from_string
               /*<<scanf.ml:1513:34>>*/ (s),
             format,
             f) /*<<scanf.ml:1513:67>>*/ ;
    /*<<scanf.ml:1513:67>>*/ }
   function format_from_string(s, fmt){
    var
     _v_ =
        /*<<scanf.ml:1517:24>>*/  /*<<scanf.ml:1517:24>>*/ caml_call1
         /*<<scanf.ml:1517:24>>*/ (Stdlib_String[25], s),
     _w_ =
        /*<<scanf.ml:1517:24>>*/  /*<<scanf.ml:1517:24>>*/ caml_call2
         /*<<scanf.ml:1517:24>>*/ (Stdlib[28], _v_, cst$1);
     /*<<scanf.ml:1517:53>>*/ return  /*<<scanf.ml:1517:53>>*/ sscanf_format
             /*<<scanf.ml:1517:53>>*/ ( /*<<scanf.ml:1517:16>>*/ caml_call2
               /*<<scanf.ml:1517:16>>*/ (Stdlib[28], cst$2, _w_),
             fmt,
             function(x){
               /*<<scanf.ml:1517:63>>*/ return x /*<<scanf.ml:1517:63>>*/ ;
              /*<<scanf.ml:1517:64>>*/ }) /*<<scanf.ml:1517:65>>*/ ;
    /*<<scanf.ml:1517:65>>*/ }
   function unescaped(s){
    var
     _u_ =
        /*<<scanf.ml:1521:17>>*/  /*<<scanf.ml:1521:17>>*/ caml_call2
         /*<<scanf.ml:1521:17>>*/ (Stdlib[28], s, cst$3);
     /*<<scanf.ml:1521:34>>*/ return  /*<<scanf.ml:1521:34>>*/ caml_call1
             /*<<scanf.ml:1521:34>>*/ ( /*<<scanf.ml:1521:34>>*/ sscanf
               /*<<scanf.ml:1521:34>>*/ ( /*<<scanf.ml:1521:9>>*/ caml_call2
                 /*<<scanf.ml:1521:9>>*/ (Stdlib[28], cst$4, _u_),
               _t_),
             function(x){
               /*<<scanf.ml:1521:44>>*/ return x /*<<scanf.ml:1521:44>>*/ ;
              /*<<scanf.ml:1521:45>>*/ }) /*<<scanf.ml:1521:46>>*/ ;
    /*<<scanf.ml:1521:46>>*/ }
   var
    Stdlib_Scanf =
      [0,
       [0,
        stdin,
        open_in,
        open_in_bin,
        close_in,
        open_in,
        open_in_bin,
        from_string,
        from_function,
        from_channel,
        end_of_input,
        beginning_of_input,
        name_of_input],
       Scan_failure,
       bscanf,
       bscanf_opt,
       sscanf,
       sscanf_opt,
       scanf,
       scanf_opt,
       kscanf,
       ksscanf,
       bscanf_format,
       sscanf_format,
       format_from_string,
       unescaped];
   runtime.caml_register_global(64, Stdlib_Scanf, "Stdlib__Scanf");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Callback
//# unitInfo: Requires: Stdlib, Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_register_named_value =  /*<<?>>*/ runtime.caml_register_named_value,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Obj = global_data.Stdlib__Obj,
    register = caml_register_named_value;
   function register_exception(name, exn){
    var
     _a_ = Stdlib_Obj[10],
     slot =
        /*<<callback.ml:26:16>>*/ runtime.caml_obj_tag
          /*<<callback.ml:26:16>>*/ (exn)
        === _a_
        ? exn
        : exn[1];
     /*<<callback.ml:27:2>>*/ return  /*<<callback.ml:27:2>>*/ caml_register_named_value
             /*<<callback.ml:27:2>>*/ (name, slot) /*<<callback.ml:27:32>>*/ ;
    /*<<callback.ml:27:32>>*/ }
   var Stdlib_Callback = [0, register, register_exception];
   runtime.caml_register_global(1, Stdlib_Callback, "Stdlib__Callback");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: CamlinternalOO
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__List, Stdlib__Map, Stdlib__Obj, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst_camlinternalOO_ml =  /*<<?>>*/ "camlinternalOO.ml",
    caml_check_bound =  /*<<?>>*/ runtime.caml_check_bound,
    caml_div =  /*<<?>>*/ runtime.caml_div,
    caml_get_public_method =  /*<<?>>*/ runtime.caml_get_public_method,
    caml_make_vect =  /*<<?>>*/ runtime.caml_make_vect,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_obj_block =  /*<<?>>*/ runtime.caml_obj_block,
    caml_set_oo_id =  /*<<?>>*/ runtime.caml_set_oo_id,
    caml_string_compare =  /*<<?>>*/ runtime.caml_string_compare,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) === 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Map = global_data.Stdlib__Map;
   function copy(o){
    var
     o$0 =
        /*<<camlinternalOO.ml:23:19>>*/  /*<<camlinternalOO.ml:23:19>>*/ o.slice
         /*<<camlinternalOO.ml:23:19>>*/ ();
     /*<<camlinternalOO.ml:24:2>>*/ return  /*<<camlinternalOO.ml:24:2>>*/ caml_set_oo_id
             /*<<camlinternalOO.ml:24:2>>*/ (o$0) /*<<camlinternalOO.ml:24:10>>*/ ;
    /*<<camlinternalOO.ml:24:10>>*/ }
   var params =  /*<<camlinternalOO.ml:36:13>>*/ [0, 1, 1, 1, 3, 16];
   function public_method_label(s){
    var
     accu =  /*<<camlinternalOO.ml:69:13>>*/ [0, 0],
     _al_ = runtime.caml_ml_string_length(s) - 1 | 0,
     _ak_ =  /*<<camlinternalOO.ml:69:13>>*/ 0;
    if(_al_ >= 0){
     var i = _ak_;
     for(;;){
      var
       _am_ =
          /*<<camlinternalOO.ml:71:36>>*/  /*<<camlinternalOO.ml:71:36>>*/ runtime.caml_string_get
           /*<<camlinternalOO.ml:71:36>>*/ (s, i);
      accu[1] = (223 * accu[1] | 0) + _am_ | 0;
      var _an_ =  /*<<camlinternalOO.ml:70:2>>*/ i + 1 | 0;
      if(_al_ === i) break;
      i = _an_;
     }
    }
    accu[1] = accu[1] & 2147483647;
    var tag = 1073741823 < accu[1] ? accu[1] + 2147483648 | 0 : accu[1];
     /*<<camlinternalOO.ml:78:2>>*/ return tag /*<<camlinternalOO.ml:78:2>>*/ ;
    /*<<camlinternalOO.ml:78:15>>*/ }
   var
    compare = caml_string_compare,
    Vars = caml_call1(Stdlib_Map[1], [0, compare]),
    compare$0 = caml_string_compare,
    Meths = caml_call1(Stdlib_Map[1], [0, compare$0]),
    compare$1 = runtime.caml_int_compare,
    Labs = caml_call1(Stdlib_Map[1], [0, compare$1]),
    dummy_table =
       /*<<camlinternalOO.ml:107:2>>*/ [0,
       0,
       [0, 0],
       Meths[1],
       Labs[1],
       0,
       0,
       Vars[1],
       0],
    table_count =  /*<<camlinternalOO.ml:116:18>>*/ [0, 0],
    dummy_met =
       /*<<camlinternalOO.ml:119:31>>*/  /*<<camlinternalOO.ml:119:31>>*/ caml_obj_block
        /*<<camlinternalOO.ml:119:31>>*/ (0, 0),
    initial_object_size =  /*<<camlinternalOO.ml:36:13>>*/ 2;
   function fit_size(n){
     /*<<camlinternalOO.ml:124:2>>*/ return 2 < n
            ?  /*<<camlinternalOO.ml:125:2>>*/ fit_size
               /*<<camlinternalOO.ml:125:2>>*/ ((n + 1 | 0) / 2 | 0)
             * 2
             | 0
            : n /*<<camlinternalOO.ml:125:24>>*/ ;
    /*<<camlinternalOO.ml:125:24>>*/ }
   function new_table(pub_labels){
     /*<<camlinternalOO.ml:128:2>>*/ table_count[1]++;
    var
     len = pub_labels.length - 1,
     methods =
        /*<<camlinternalOO.ml:130:16>>*/  /*<<camlinternalOO.ml:130:16>>*/ caml_make_vect
         /*<<camlinternalOO.ml:130:16>>*/ ((len * 2 | 0) + 2 | 0, dummy_met);
     /*<<camlinternalOO.ml:131:2>>*/ caml_check_bound(methods, 0)[1] = len;
    var
     _ad_ = Stdlib_Sys[9],
     _ae_ =
       ( /*<<camlinternalOO.ml:132:28>>*/ runtime.caml_mul
         /*<<camlinternalOO.ml:132:28>>*/ ( /*<<camlinternalOO.ml:132:28>>*/ fit_size
           /*<<camlinternalOO.ml:132:28>>*/ (len),
         _ad_)
       / 8
       | 0)
       - 1
       | 0;
     /*<<camlinternalOO.ml:132:2>>*/ caml_check_bound(methods, 1)[2] = _ae_;
    var _ag_ = len - 1 | 0, _af_ =  /*<<camlinternalOO.ml:132:2>>*/ 0;
    if(_ag_ >= 0){
     var i = _af_;
     for(;;){
      var
       _ai_ = (i * 2 | 0) + 3 | 0,
       _ah_ =
          /*<<camlinternalOO.ml:133:55>>*/ caml_check_bound(pub_labels, i)
          [1 + i];
       /*<<camlinternalOO.ml:133:26>>*/ caml_check_bound(methods, _ai_)
       [1 + _ai_]
      = _ah_;
      var _aj_ =  /*<<camlinternalOO.ml:133:26>>*/ i + 1 | 0;
      if(_ag_ === i) break;
      i = _aj_;
     }
    }
     /*<<camlinternalOO.ml:134:2>>*/ return [0,
            initial_object_size,
            methods,
            Meths[1],
            Labs[1],
            0,
            0,
            Vars[1],
            0] /*<<camlinternalOO.ml:134:2>>*/ ;
    /*<<camlinternalOO.ml:141:32>>*/ }
   function resize(array, new_size){
    var old_size = array[2].length - 1, _ab_ = old_size < new_size ? 1 : 0;
    if(_ab_){
     var
      new_buck =
         /*<<camlinternalOO.ml:146:19>>*/  /*<<camlinternalOO.ml:146:19>>*/ caml_make_vect
          /*<<camlinternalOO.ml:146:19>>*/ (new_size, dummy_met);
      /*<<camlinternalOO.ml:147:4>>*/  /*<<camlinternalOO.ml:147:4>>*/ caml_call5
       /*<<camlinternalOO.ml:147:4>>*/ (Stdlib_Array[9],
       array[2],
       0,
       new_buck,
       0,
       old_size);
     array[2] = new_buck;
     var _ac_ = 0;
    }
    else
     var _ac_ = _ab_;
    return _ac_;
    /*<<camlinternalOO.ml:149:4>>*/ }
   var
    method_count =  /*<<camlinternalOO.ml:157:19>>*/ [0, 0],
    inst_var_count =  /*<<camlinternalOO.ml:158:21>>*/ [0, 0],
    _a_ = [0, cst_camlinternalOO_ml, 279, 50],
    _b_ = [0, cst_camlinternalOO_ml, 407, 13],
    _c_ = [0, cst_camlinternalOO_ml, 410, 13],
    _d_ = [0, cst_camlinternalOO_ml, 413, 13],
    _e_ = [0, cst_camlinternalOO_ml, 416, 13],
    _f_ = [0, cst_camlinternalOO_ml, 419, 13],
    _g_ = [0, cst_camlinternalOO_ml, 437, 17];
   function new_method(table){
    var index = table[2].length - 1;
     /*<<camlinternalOO.ml:165:2>>*/  /*<<camlinternalOO.ml:165:2>>*/ resize
      /*<<camlinternalOO.ml:165:2>>*/ (table, index + 1 | 0);
     /*<<camlinternalOO.ml:165:2>>*/ return index /*<<camlinternalOO.ml:165:2>>*/ ;
    /*<<camlinternalOO.ml:166:7>>*/ }
   function get_method_label(table, name){
     /*<<camlinternalOO.ml:169:2>>*/ try{
     var
      _$_ =
         /*<<camlinternalOO.ml:170:4>>*/  /*<<camlinternalOO.ml:170:4>>*/ caml_call2
          /*<<camlinternalOO.ml:170:4>>*/ (Meths[17], name, table[3]);
      /*<<camlinternalOO.ml:170:4>>*/ return _$_ /*<<camlinternalOO.ml:170:4>>*/ ;
    }
    catch(_aa_){
     var ___ = caml_wrap_exception(_aa_);
     if(___ !== Stdlib[8]) throw caml_maybe_attach_backtrace(___, 0);
     var
      label =
         /*<<camlinternalOO.ml:172:16>>*/  /*<<camlinternalOO.ml:172:16>>*/ new_method
          /*<<camlinternalOO.ml:172:16>>*/ (table);
     table[3] =
       /*<<camlinternalOO.ml:173:29>>*/ caml_call3
        /*<<camlinternalOO.ml:173:29>>*/ (Meths[2], name, label, table[3]);
     table[4] =
       /*<<camlinternalOO.ml:174:30>>*/ caml_call3
        /*<<camlinternalOO.ml:174:30>>*/ (Labs[2], label, 1, table[4]);
      /*<<camlinternalOO.ml:175:4>>*/ return label /*<<camlinternalOO.ml:175:4>>*/ ;
    }
    /*<<camlinternalOO.ml:175:9>>*/ }
   function get_method_labels(table, names){
     /*<<camlinternalOO.ml:178:2>>*/ return  /*<<camlinternalOO.ml:178:2>>*/ caml_call2
             /*<<camlinternalOO.ml:178:2>>*/ (Stdlib_Array[14],
             function(_Z_){ /*<<?>>*/ return get_method_label(table, _Z_);},
             names) /*<<camlinternalOO.ml:178:42>>*/ ;
    /*<<camlinternalOO.ml:178:42>>*/ }
   function set_method(table, label, element){
     /*<<camlinternalOO.ml:181:2>>*/ method_count[1]++;
     /*<<camlinternalOO.ml:182:5>>*/ return  /*<<camlinternalOO.ml:182:5>>*/ caml_call2
              /*<<camlinternalOO.ml:182:5>>*/ (Labs[17], label, table[4])
            ? ( /*<<camlinternalOO.ml:152:2>>*/ resize
                /*<<camlinternalOO.ml:152:2>>*/ (table, label + 1 | 0),
              caml_check_bound(table[2], label)[1 + label] = element,
              0)
            : (table[6] = [0, [0, label, element], table[6]], 0) /*<<camlinternalOO.ml:185:64>>*/ ;
    /*<<camlinternalOO.ml:185:64>>*/ }
   function get_method(table, label){
     /*<<camlinternalOO.ml:188:2>>*/ try{
     var
      _X_ =
         /*<<camlinternalOO.ml:188:6>>*/  /*<<camlinternalOO.ml:188:6>>*/ caml_call2
          /*<<camlinternalOO.ml:188:6>>*/ (Stdlib_List[49], label, table[6]);
      /*<<camlinternalOO.ml:188:6>>*/ return _X_ /*<<camlinternalOO.ml:188:6>>*/ ;
    }
    catch(_Y_){
     var _W_ = caml_wrap_exception(_Y_);
     if(_W_ === Stdlib[8])
       /*<<camlinternalOO.ml:189:20>>*/ return caml_check_bound
               (table[2], label)
              [1 + label] /*<<camlinternalOO.ml:189:20>>*/ ;
     throw caml_maybe_attach_backtrace(_W_, 0);
    }
    /*<<camlinternalOO.ml:189:41>>*/ }
   function to_list(arr){
     /*<<camlinternalOO.ml:192:2>>*/ return 0 === arr
            ? 0
            :  /*<<camlinternalOO.ml:192:37>>*/ caml_call1
               /*<<camlinternalOO.ml:192:37>>*/ (Stdlib_Array[10], arr) /*<<camlinternalOO.ml:192:54>>*/ ;
    /*<<camlinternalOO.ml:192:54>>*/ }
   function narrow(table, vars, virt_meths, concr_meths){
    var
     vars$0 =
        /*<<camlinternalOO.ml:195:13>>*/  /*<<camlinternalOO.ml:195:13>>*/ to_list
         /*<<camlinternalOO.ml:195:13>>*/ (vars),
     virt_meths$0 =
        /*<<camlinternalOO.ml:196:19>>*/  /*<<camlinternalOO.ml:196:19>>*/ to_list
         /*<<camlinternalOO.ml:196:19>>*/ (virt_meths),
     concr_meths$0 =
        /*<<camlinternalOO.ml:197:20>>*/  /*<<camlinternalOO.ml:197:20>>*/ to_list
         /*<<camlinternalOO.ml:197:20>>*/ (concr_meths),
     virt_meth_labs =
        /*<<camlinternalOO.ml:198:23>>*/  /*<<camlinternalOO.ml:198:23>>*/ caml_call2
         /*<<camlinternalOO.ml:198:23>>*/ (Stdlib_List[20],
         function(_V_){ /*<<?>>*/ return get_method_label(table, _V_);},
         virt_meths$0),
     concr_meth_labs =
        /*<<camlinternalOO.ml:199:24>>*/  /*<<camlinternalOO.ml:199:24>>*/ caml_call2
         /*<<camlinternalOO.ml:199:24>>*/ (Stdlib_List[20],
         function(_U_){ /*<<?>>*/ return get_method_label(table, _U_);},
         concr_meths$0);
    table[5] =
     [0,
      [0, table[3], table[4], table[6], table[7], virt_meth_labs, vars$0],
      table[5]];
    table[7] =
      /*<<camlinternalOO.ml:205:4>>*/ caml_call3
       /*<<camlinternalOO.ml:205:4>>*/ (Vars[24],
       function(lab, info, tvars){
         /*<<camlinternalOO.ml:207:8>>*/ return  /*<<camlinternalOO.ml:207:11>>*/ caml_call2
                  /*<<camlinternalOO.ml:207:11>>*/ (Stdlib_List[37],
                  lab,
                  vars$0)
                ?  /*<<camlinternalOO.ml:207:34>>*/ caml_call3
                   /*<<camlinternalOO.ml:207:34>>*/ (Vars[2],
                   lab,
                   info,
                   tvars)
                : tvars /*<<camlinternalOO.ml:207:68>>*/ ;
        /*<<camlinternalOO.ml:207:68>>*/ },
       table[7],
       Vars[1]);
    var
     by_name =  /*<<camlinternalOO.ml:209:16>>*/ [0, Meths[1]],
     by_label =  /*<<camlinternalOO.ml:210:17>>*/ [0, Labs[1]];
     /*<<camlinternalOO.ml:211:2>>*/  /*<<camlinternalOO.ml:211:2>>*/ caml_call3
      /*<<camlinternalOO.ml:211:2>>*/ (Stdlib_List[28],
      function(met, label){
        /*<<camlinternalOO.ml:213:7>>*/ by_name[1] =
         /*<<camlinternalOO.ml:213:18>>*/ caml_call3
          /*<<camlinternalOO.ml:213:18>>*/ (Meths[2], met, label, by_name[1]);
       var _P_ = by_label[1];
       try{
        var
         _S_ =
            /*<<camlinternalOO.ml:216:17>>*/  /*<<camlinternalOO.ml:216:17>>*/ caml_call2
             /*<<camlinternalOO.ml:216:17>>*/ (Labs[17], label, table[4]),
         _R_ = _S_;
       }
       catch(_T_){
        var _Q_ = caml_wrap_exception(_T_);
        if(_Q_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_Q_, 0);
        var _R_ = 1;
       }
       by_label[1] =
         /*<<camlinternalOO.ml:215:10>>*/ caml_call3
          /*<<camlinternalOO.ml:215:10>>*/ (Labs[2], label, _R_, _P_);
       return 0;
       /*<<camlinternalOO.ml:217:21>>*/ },
      concr_meths$0,
      concr_meth_labs);
     /*<<camlinternalOO.ml:219:2>>*/  /*<<camlinternalOO.ml:219:2>>*/ caml_call3
      /*<<camlinternalOO.ml:219:2>>*/ (Stdlib_List[28],
      function(met, label){
        /*<<camlinternalOO.ml:221:7>>*/ by_name[1] =
         /*<<camlinternalOO.ml:221:18>>*/ caml_call3
          /*<<camlinternalOO.ml:221:18>>*/ (Meths[2], met, label, by_name[1]);
       by_label[1] =
         /*<<camlinternalOO.ml:222:19>>*/ caml_call3
          /*<<camlinternalOO.ml:222:19>>*/ (Labs[2], label, 0, by_label[1]);
       return 0;
       /*<<camlinternalOO.ml:222:49>>*/ },
      virt_meths$0,
      virt_meth_labs);
    table[3] = by_name[1];
    table[4] = by_label[1];
    table[6] =
      /*<<camlinternalOO.ml:227:5>>*/ caml_call3
       /*<<camlinternalOO.ml:227:5>>*/ (Stdlib_List[27],
       function(met, hm){
        var lab = met[1];
         /*<<camlinternalOO.ml:229:13>>*/ return  /*<<camlinternalOO.ml:229:13>>*/ caml_call2
                  /*<<camlinternalOO.ml:229:13>>*/ (Stdlib_List[37],
                  lab,
                  virt_meth_labs)
                ? hm
                : [0, met, hm] /*<<camlinternalOO.ml:229:62>>*/ ;
        /*<<camlinternalOO.ml:229:62>>*/ },
       table[6],
       0);
    return 0;
    /*<<camlinternalOO.ml:231:9>>*/ }
   function widen(table){
    var
     match =
        /*<<camlinternalOO.ml:235:4>>*/  /*<<camlinternalOO.ml:235:4>>*/ caml_call1
         /*<<camlinternalOO.ml:235:4>>*/ (Stdlib_List[6], table[5]),
     vars = match[6],
     virt_meths = match[5],
     saved_vars = match[4],
     saved_hidden_meths = match[3],
     by_label = match[2],
     by_name = match[1];
    table[5] =
      /*<<camlinternalOO.ml:237:27>>*/ caml_call1
       /*<<camlinternalOO.ml:237:27>>*/ (Stdlib_List[7], table[5]);
    table[7] =
      /*<<camlinternalOO.ml:239:5>>*/ caml_call3
       /*<<camlinternalOO.ml:239:5>>*/ (Stdlib_List[26],
       function(s, v){
        var
         _O_ =
            /*<<camlinternalOO.ml:240:30>>*/  /*<<camlinternalOO.ml:240:30>>*/ caml_call2
             /*<<camlinternalOO.ml:240:30>>*/ (Vars[17], v, table[7]);
         /*<<camlinternalOO.ml:240:19>>*/ return  /*<<camlinternalOO.ml:240:19>>*/ caml_call3
                 /*<<camlinternalOO.ml:240:19>>*/ (Vars[2], v, _O_, s) /*<<camlinternalOO.ml:240:56>>*/ ;
        /*<<camlinternalOO.ml:240:56>>*/ },
       saved_vars,
       vars);
    table[3] = by_name;
    table[4] = by_label;
    table[6] =
      /*<<camlinternalOO.ml:245:5>>*/ caml_call3
       /*<<camlinternalOO.ml:245:5>>*/ (Stdlib_List[27],
       function(met, hm){
        var lab = met[1];
         /*<<camlinternalOO.ml:247:13>>*/ return  /*<<camlinternalOO.ml:247:13>>*/ caml_call2
                  /*<<camlinternalOO.ml:247:13>>*/ (Stdlib_List[37],
                  lab,
                  virt_meths)
                ? hm
                : [0, met, hm] /*<<camlinternalOO.ml:247:58>>*/ ;
        /*<<camlinternalOO.ml:247:58>>*/ },
       table[6],
       saved_hidden_meths);
    return 0;
    /*<<camlinternalOO.ml:249:25>>*/ }
   function new_variable(table, name){
     /*<<camlinternalOO.ml:257:2>>*/ try{
     var
      _M_ =
         /*<<camlinternalOO.ml:257:6>>*/  /*<<camlinternalOO.ml:257:6>>*/ caml_call2
          /*<<camlinternalOO.ml:257:6>>*/ (Vars[17], name, table[7]);
      /*<<camlinternalOO.ml:257:6>>*/ return _M_ /*<<camlinternalOO.ml:257:6>>*/ ;
    }
    catch(_N_){
     var _L_ = caml_wrap_exception(_N_);
     if(_L_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_L_, 0);
     var index = table[1];
     table[1] = index + 1 | 0;
      /*<<camlinternalOO.ml:260:7>>*/ if(name !== "")
      table[7] =
        /*<<camlinternalOO.ml:260:37>>*/ caml_call3
         /*<<camlinternalOO.ml:260:37>>*/ (Vars[2], name, index, table[7]);
      /*<<camlinternalOO.ml:261:4>>*/ return index /*<<camlinternalOO.ml:261:4>>*/ ;
    }
    /*<<camlinternalOO.ml:261:9>>*/ }
   function to_array(arr){
     /*<<camlinternalOO.ml:264:2>>*/ return  /*<<camlinternalOO.ml:264:5>>*/ runtime.caml_equal
              /*<<camlinternalOO.ml:264:5>>*/ (arr, 0)
            ? [0]
            : arr /*<<camlinternalOO.ml:264:41>>*/ ;
    /*<<camlinternalOO.ml:264:41>>*/ }
   function new_methods_variables(table, meths, vals){
    var
     meths$0 =
        /*<<camlinternalOO.ml:267:14>>*/  /*<<camlinternalOO.ml:267:14>>*/ to_array
         /*<<camlinternalOO.ml:267:14>>*/ (meths),
     nmeths =  /*<<camlinternalOO.ml:268:2>>*/ meths$0.length - 1,
     nvals = vals.length - 1,
     res =
        /*<<camlinternalOO.ml:269:12>>*/  /*<<camlinternalOO.ml:269:12>>*/ caml_make_vect
         /*<<camlinternalOO.ml:269:12>>*/ (nmeths + nvals | 0, 0),
     _D_ =  /*<<camlinternalOO.ml:270:2>>*/ nmeths - 1 | 0,
     _C_ =  /*<<camlinternalOO.ml:269:12>>*/ 0;
    if(_D_ >= 0){
     var i$0 = _C_;
     for(;;){
      var
       _J_ =
          /*<<camlinternalOO.ml:271:15>>*/  /*<<camlinternalOO.ml:271:15>>*/ get_method_label
           /*<<camlinternalOO.ml:271:15>>*/ (table,
           caml_check_bound(meths$0, i$0)[1 + i$0]);
       /*<<camlinternalOO.ml:271:4>>*/ caml_check_bound(res, i$0)[1 + i$0] = _J_;
      var _K_ =  /*<<camlinternalOO.ml:271:4>>*/ i$0 + 1 | 0;
      if(_D_ === i$0) break;
      i$0 = _K_;
     }
    }
    var _F_ = nvals - 1 | 0, _E_ =  /*<<camlinternalOO.ml:273:2>>*/ 0;
    if(_F_ >= 0){
     var i = _E_;
     for(;;){
      var
       _H_ = i + nmeths | 0,
       _G_ =
          /*<<camlinternalOO.ml:274:22>>*/  /*<<camlinternalOO.ml:274:22>>*/ new_variable
           /*<<camlinternalOO.ml:274:22>>*/ (table,
           caml_check_bound(vals, i)[1 + i]);
       /*<<camlinternalOO.ml:274:4>>*/ caml_check_bound(res, _H_)[1 + _H_] = _G_;
      var _I_ =  /*<<camlinternalOO.ml:274:4>>*/ i + 1 | 0;
      if(_F_ === i) break;
      i = _I_;
     }
    }
     /*<<camlinternalOO.ml:276:2>>*/ return res /*<<camlinternalOO.ml:276:2>>*/ ;
    /*<<camlinternalOO.ml:276:5>>*/ }
   function get_variable(table, name){
     /*<<camlinternalOO.ml:279:2>>*/ try{
     var
      _A_ =
         /*<<camlinternalOO.ml:279:6>>*/  /*<<camlinternalOO.ml:279:6>>*/ caml_call2
          /*<<camlinternalOO.ml:279:6>>*/ (Vars[17], name, table[7]);
      /*<<camlinternalOO.ml:279:6>>*/ return _A_ /*<<camlinternalOO.ml:279:6>>*/ ;
    }
    catch(_B_){
     var _z_ = caml_wrap_exception(_B_);
     if(_z_ === Stdlib[8])
       /*<<camlinternalOO.ml:279:50>>*/ throw  /*<<camlinternalOO.ml:279:50>>*/ caml_maybe_attach_backtrace
              /*<<camlinternalOO.ml:279:50>>*/ ([0, Assert_failure, _a_], 1);
     throw caml_maybe_attach_backtrace(_z_, 0);
    }
    /*<<camlinternalOO.ml:279:62>>*/ }
   function get_variables(table, names){
     /*<<camlinternalOO.ml:282:2>>*/ return  /*<<camlinternalOO.ml:282:2>>*/ caml_call2
             /*<<camlinternalOO.ml:282:2>>*/ (Stdlib_Array[14],
             function(_y_){ /*<<?>>*/ return get_variable(table, _y_);},
             names) /*<<camlinternalOO.ml:282:38>>*/ ;
    /*<<camlinternalOO.ml:282:38>>*/ }
   function add_initializer(table, f){
     /*<<camlinternalOO.ml:285:2>>*/ table[8] = [0, f, table[8]];
    return 0;
    /*<<camlinternalOO.ml:285:45>>*/ }
   function create_table(public_methods){
     /*<<camlinternalOO.ml:299:2>>*/ if(0 === public_methods)
      /*<<camlinternalOO.ml:299:50>>*/ return  /*<<camlinternalOO.ml:299:50>>*/ new_table
              /*<<camlinternalOO.ml:299:50>>*/ ([0]) /*<<camlinternalOO.ml:309:7>>*/ ;
    var
     tags =
        /*<<camlinternalOO.ml:301:13>>*/  /*<<camlinternalOO.ml:301:13>>*/ caml_call2
         /*<<camlinternalOO.ml:301:13>>*/ (Stdlib_Array[14],
         public_method_label,
         public_methods),
     table =
        /*<<camlinternalOO.ml:302:14>>*/  /*<<camlinternalOO.ml:302:14>>*/ new_table
         /*<<camlinternalOO.ml:302:14>>*/ (tags);
     /*<<camlinternalOO.ml:303:2>>*/  /*<<camlinternalOO.ml:303:2>>*/ caml_call2
      /*<<camlinternalOO.ml:303:2>>*/ (Stdlib_Array[13],
      function(i, met){
       var lab = (i * 2 | 0) + 2 | 0;
       table[3] =
         /*<<camlinternalOO.ml:306:32>>*/ caml_call3
          /*<<camlinternalOO.ml:306:32>>*/ (Meths[2], met, lab, table[3]);
       table[4] =
         /*<<camlinternalOO.ml:307:32>>*/ caml_call3
          /*<<camlinternalOO.ml:307:32>>*/ (Labs[2], lab, 1, table[4]);
       return 0;
       /*<<camlinternalOO.ml:307:72>>*/ },
      public_methods);
     /*<<camlinternalOO.ml:303:2>>*/ return table /*<<camlinternalOO.ml:303:2>>*/ ;
    /*<<camlinternalOO.ml:309:7>>*/ }
   function init_class(table){
     /*<<camlinternalOO.ml:312:2>>*/ inst_var_count[1] =
     (inst_var_count[1] + table[1] | 0) - 1 | 0;
    table[8] =
      /*<<camlinternalOO.ml:313:24>>*/ caml_call1
       /*<<camlinternalOO.ml:313:24>>*/ (Stdlib_List[10], table[8]);
    var _x_ =  /*<<camlinternalOO.ml:314:2>>*/ Stdlib_Sys[9];
     /*<<camlinternalOO.ml:143:11>>*/ return  /*<<camlinternalOO.ml:143:11>>*/ resize
             /*<<camlinternalOO.ml:143:11>>*/ (table,
             3 + caml_div(caml_check_bound(table[2], 1)[2] * 16 | 0, _x_) | 0) /*<<camlinternalOO.ml:314:69>>*/ ;
    /*<<camlinternalOO.ml:314:69>>*/ }
   function inherits(cla, vals, virt_meths, concr_meths, param, top){
    var env = param[4], super$0 = param[2];
     /*<<camlinternalOO.ml:317:2>>*/  /*<<camlinternalOO.ml:317:2>>*/ narrow
      /*<<camlinternalOO.ml:317:2>>*/ (cla, vals, virt_meths, concr_meths);
    var
     init =
       top
        ?  /*<<camlinternalOO.ml:319:16>>*/ caml_call2
           /*<<camlinternalOO.ml:319:16>>*/ (super$0, cla, env)
        :  /*<<camlinternalOO.ml:319:44>>*/ caml_call1
           /*<<camlinternalOO.ml:319:44>>*/ (super$0, cla);
     /*<<camlinternalOO.ml:320:2>>*/  /*<<camlinternalOO.ml:320:2>>*/ widen
      /*<<camlinternalOO.ml:320:2>>*/ (cla);
    var
     _s_ =
        /*<<camlinternalOO.ml:326:7>>*/  /*<<camlinternalOO.ml:326:7>>*/ to_array
         /*<<camlinternalOO.ml:326:7>>*/ (concr_meths),
     _t_ =
        /*<<camlinternalOO.ml:324:5>>*/ [0,
         /*<<camlinternalOO.ml:324:5>>*/ caml_call2
          /*<<camlinternalOO.ml:324:5>>*/ (Stdlib_Array[14],
          function(nm){
            /*<<camlinternalOO.ml:325:18>>*/ return  /*<<camlinternalOO.ml:325:43>>*/ get_method
                    /*<<camlinternalOO.ml:325:43>>*/ (cla,
                     /*<<camlinternalOO.ml:325:43>>*/ get_method_label
                      /*<<camlinternalOO.ml:325:43>>*/ (cla, nm)) /*<<camlinternalOO.ml:325:79>>*/ ;
           /*<<camlinternalOO.ml:325:79>>*/ },
          _s_),
        0],
     _u_ =
        /*<<camlinternalOO.ml:323:45>>*/  /*<<camlinternalOO.ml:323:45>>*/ to_array
         /*<<camlinternalOO.ml:323:45>>*/ (vals),
     _v_ =
        /*<<camlinternalOO.ml:322:4>>*/ [0,
        [0, init],
        [0,
          /*<<camlinternalOO.ml:323:16>>*/ caml_call2
           /*<<camlinternalOO.ml:323:16>>*/ (Stdlib_Array[14],
           function(_w_){ /*<<?>>*/ return get_variable(cla, _w_);},
           _u_),
         _t_]];
     /*<<camlinternalOO.ml:322:4>>*/ return  /*<<camlinternalOO.ml:322:4>>*/ caml_call1
             /*<<camlinternalOO.ml:322:4>>*/ (Stdlib_Array[5], _v_) /*<<camlinternalOO.ml:326:31>>*/ ;
    /*<<camlinternalOO.ml:326:31>>*/ }
   function make_class(pub_meths, class_init){
    var
     table =
        /*<<camlinternalOO.ml:329:14>>*/  /*<<camlinternalOO.ml:329:14>>*/ create_table
         /*<<camlinternalOO.ml:329:14>>*/ (pub_meths),
     env_init =
        /*<<camlinternalOO.ml:330:17>>*/  /*<<camlinternalOO.ml:330:17>>*/ caml_call1
         /*<<camlinternalOO.ml:330:17>>*/ (class_init, table);
     /*<<camlinternalOO.ml:331:2>>*/  /*<<camlinternalOO.ml:331:2>>*/ init_class
      /*<<camlinternalOO.ml:331:2>>*/ (table);
     /*<<camlinternalOO.ml:332:2>>*/ return [0,
             /*<<camlinternalOO.ml:332:3>>*/ caml_call1
              /*<<camlinternalOO.ml:332:3>>*/ (env_init, 0),
            class_init,
            env_init,
            0] /*<<camlinternalOO.ml:332:2>>*/ ;
    /*<<camlinternalOO.ml:332:59>>*/ }
   function make_class_store(pub_meths, class_init, init_table){
    var
     table =
        /*<<camlinternalOO.ml:338:14>>*/  /*<<camlinternalOO.ml:338:14>>*/ create_table
         /*<<camlinternalOO.ml:338:14>>*/ (pub_meths),
     env_init =
        /*<<camlinternalOO.ml:339:17>>*/  /*<<camlinternalOO.ml:339:17>>*/ caml_call1
         /*<<camlinternalOO.ml:339:17>>*/ (class_init, table);
     /*<<camlinternalOO.ml:340:2>>*/  /*<<camlinternalOO.ml:340:2>>*/ init_class
      /*<<camlinternalOO.ml:340:2>>*/ (table);
    init_table[2] = class_init;
    init_table[1] = env_init;
    return 0;
    /*<<camlinternalOO.ml:342:33>>*/ }
   function dummy_class(loc){
    function undef(param){
      /*<<camlinternalOO.ml:345:23>>*/ throw  /*<<camlinternalOO.ml:345:23>>*/ caml_maybe_attach_backtrace
             /*<<camlinternalOO.ml:345:23>>*/ ([0, Stdlib[15], loc], 1);
     /*<<camlinternalOO.ml:345:61>>*/ }
     /*<<camlinternalOO.ml:346:2>>*/ return [0, undef, undef, undef, 0] /*<<camlinternalOO.ml:346:2>>*/ ;
    /*<<camlinternalOO.ml:346:45>>*/ }
   function create_object(table){
    var
     obj =
        /*<<camlinternalOO.ml:352:12>>*/  /*<<camlinternalOO.ml:352:12>>*/ caml_obj_block
         /*<<camlinternalOO.ml:352:12>>*/ (Stdlib_Obj[10], table[1]);
     /*<<camlinternalOO.ml:354:2>>*/ obj[1] = table[2];
     /*<<camlinternalOO.ml:355:10>>*/ return  /*<<camlinternalOO.ml:355:10>>*/ caml_set_oo_id
             /*<<camlinternalOO.ml:355:10>>*/ (obj) /*<<camlinternalOO.ml:355:22>>*/ ;
    /*<<camlinternalOO.ml:355:22>>*/ }
   function create_object_opt(obj_0, table){
     /*<<camlinternalOO.ml:358:2>>*/ if(obj_0)
      /*<<camlinternalOO.ml:358:35>>*/ return obj_0 /*<<camlinternalOO.ml:358:35>>*/ ;
    var
     obj =
        /*<<camlinternalOO.ml:360:14>>*/  /*<<camlinternalOO.ml:360:14>>*/ caml_obj_block
         /*<<camlinternalOO.ml:360:14>>*/ (Stdlib_Obj[10], table[1]);
     /*<<camlinternalOO.ml:362:4>>*/ obj[1] = table[2];
     /*<<camlinternalOO.ml:363:12>>*/ return  /*<<camlinternalOO.ml:363:12>>*/ caml_set_oo_id
             /*<<camlinternalOO.ml:363:12>>*/ (obj) /*<<camlinternalOO.ml:364:5>>*/ ;
    /*<<camlinternalOO.ml:364:5>>*/ }
   function iter_f(obj, param){
    var param$0 = param;
     /*<<camlinternalOO.ml:366:15>>*/ for(;;){
     if(! param$0)
       /*<<camlinternalOO.ml:368:12>>*/ return 0 /*<<camlinternalOO.ml:368:12>>*/ ;
     var l = param$0[2], f = param$0[1];
      /*<<camlinternalOO.ml:369:12>>*/  /*<<camlinternalOO.ml:369:12>>*/ caml_call1
       /*<<camlinternalOO.ml:369:12>>*/ (f, obj);
     param$0 = l;
    }
    /*<<camlinternalOO.ml:369:31>>*/ }
   function run_initializers(obj, table){
    var inits = table[8], _r_ = 0 !== inits ? 1 : 0;
    return _r_
            ?  /*<<camlinternalOO.ml:374:4>>*/ iter_f
               /*<<camlinternalOO.ml:374:4>>*/ (obj, inits)
            : _r_ /*<<camlinternalOO.ml:374:20>>*/ ;
    /*<<camlinternalOO.ml:374:20>>*/ }
   function run_initializers_opt(obj_0, obj, table){
     /*<<camlinternalOO.ml:377:2>>*/ if(obj_0)
      /*<<camlinternalOO.ml:377:35>>*/ return obj /*<<camlinternalOO.ml:377:35>>*/ ;
    var inits = table[8];
    if(0 !== inits)
      /*<<camlinternalOO.ml:379:24>>*/  /*<<camlinternalOO.ml:379:24>>*/ iter_f
       /*<<camlinternalOO.ml:379:24>>*/ (obj, inits);
     /*<<camlinternalOO.ml:379:24>>*/ return obj /*<<camlinternalOO.ml:379:24>>*/ ;
    /*<<camlinternalOO.ml:381:5>>*/ }
   function create_object_and_run_initiali(obj_0, table){
     /*<<camlinternalOO.ml:384:2>>*/ if(obj_0)
      /*<<camlinternalOO.ml:384:35>>*/ return obj_0 /*<<camlinternalOO.ml:384:35>>*/ ;
    var
     obj =
        /*<<camlinternalOO.ml:385:14>>*/  /*<<camlinternalOO.ml:385:14>>*/ create_object
         /*<<camlinternalOO.ml:385:14>>*/ (table);
     /*<<camlinternalOO.ml:386:4>>*/  /*<<camlinternalOO.ml:386:4>>*/ run_initializers
      /*<<camlinternalOO.ml:386:4>>*/ (obj, table);
     /*<<camlinternalOO.ml:386:4>>*/ return obj /*<<camlinternalOO.ml:386:4>>*/ ;
    /*<<camlinternalOO.ml:388:5>>*/ }
   function get_data(param){
     /*<<camlinternalOO.ml:415:15>>*/ if(param)
      /*<<camlinternalOO.ml:417:19>>*/ return param[2] /*<<camlinternalOO.ml:417:19>>*/ ;
     /*<<camlinternalOO.ml:416:13>>*/ throw  /*<<camlinternalOO.ml:416:13>>*/ caml_maybe_attach_backtrace
            /*<<camlinternalOO.ml:416:13>>*/ ([0, Assert_failure, _e_], 1);
    /*<<camlinternalOO.ml:417:30>>*/ }
   function build_path(n, keys, tables){
    var
     res =  /*<<camlinternalOO.ml:423:17>>*/ [0, 0, 0, 0],
     r =  /*<<camlinternalOO.ml:424:10>>*/ [0, res],
     _o_ =  /*<<camlinternalOO.ml:424:10>>*/ 0;
    if(n >= 0){
     var i = _o_;
     for(;;){
      var _p_ = r[1];
      r[1] = [0, caml_check_bound(keys, i)[1 + i], _p_, 0];
      var _q_ =  /*<<camlinternalOO.ml:425:2>>*/ i + 1 | 0;
      if(n === i) break;
      i = _q_;
     }
    }
    var v = r[1];
    if(! tables)
      /*<<camlinternalOO.ml:407:13>>*/ throw  /*<<camlinternalOO.ml:407:13>>*/ caml_maybe_attach_backtrace
             /*<<camlinternalOO.ml:407:13>>*/ ([0, Assert_failure, _b_], 1);
    tables[2] = v;
     /*<<camlinternalOO.ml:428:2>>*/ return res /*<<camlinternalOO.ml:428:2>>*/ ;
    /*<<camlinternalOO.ml:429:5>>*/ }
   function lookup_tables(root, keys){
    var
     root_data =
        /*<<camlinternalOO.ml:451:8>>*/  /*<<camlinternalOO.ml:451:8>>*/ get_data
         /*<<camlinternalOO.ml:451:8>>*/ (root);
    if(! root_data)
      /*<<camlinternalOO.ml:455:4>>*/ return  /*<<camlinternalOO.ml:455:4>>*/ build_path
              /*<<camlinternalOO.ml:455:4>>*/ (keys.length - 2 | 0,
              keys,
              root) /*<<camlinternalOO.ml:455:48>>*/ ;
    var i$1 = keys.length - 2 | 0, i = i$1, tables$0 = root_data;
     /*<<camlinternalOO.ml:432:2>>*/ for(;;){
     if(0 > i)
       /*<<camlinternalOO.ml:432:16>>*/ return tables$0 /*<<camlinternalOO.ml:432:16>>*/ ;
     var
      key =  /*<<camlinternalOO.ml:433:12>>*/ caml_check_bound(keys, i)[1 + i],
      tables$1 = tables$0;
      /*<<camlinternalOO.ml:435:4>>*/ for(;;){
      if(! tables$1)
        /*<<camlinternalOO.ml:413:13>>*/ throw  /*<<camlinternalOO.ml:413:13>>*/ caml_maybe_attach_backtrace
               /*<<camlinternalOO.ml:413:13>>*/ ([0, Assert_failure, _d_], 1);
      if(tables$1[1] === key) break;
      if(! tables$1)
        /*<<camlinternalOO.ml:419:13>>*/ throw  /*<<camlinternalOO.ml:419:13>>*/ caml_maybe_attach_backtrace
               /*<<camlinternalOO.ml:419:13>>*/ ([0, Assert_failure, _f_], 1);
      var tables =  /*<<camlinternalOO.ml:420:19>>*/ tables$1[3];
      if(! tables){
       var next =  /*<<camlinternalOO.ml:444:35>>*/ [0, key, 0, 0];
       if(! tables$1)
         /*<<camlinternalOO.ml:410:13>>*/ throw  /*<<camlinternalOO.ml:410:13>>*/ caml_maybe_attach_backtrace
                /*<<camlinternalOO.ml:410:13>>*/ ([0, Assert_failure, _c_], 1);
       tables$1[3] = next;
        /*<<camlinternalOO.ml:445:10>>*/ return  /*<<camlinternalOO.ml:445:10>>*/ build_path
                /*<<camlinternalOO.ml:445:10>>*/ (i - 1 | 0, keys, next) /*<<camlinternalOO.ml:455:48>>*/ ;
      }
      tables$1 = tables;
     }
     var
      tables_data =
         /*<<camlinternalOO.ml:436:12>>*/  /*<<camlinternalOO.ml:436:12>>*/ get_data
          /*<<camlinternalOO.ml:436:12>>*/ (tables$1);
     if(! tables_data)
       /*<<camlinternalOO.ml:437:17>>*/ throw  /*<<camlinternalOO.ml:437:17>>*/ caml_maybe_attach_backtrace
              /*<<camlinternalOO.ml:437:17>>*/ ([0, Assert_failure, _g_], 1);
     var i$0 = i - 1 | 0;
     i = i$0;
     tables$0 = tables_data;
    }
    /*<<camlinternalOO.ml:455:48>>*/ }
   function new_cache(table){
    var
     n =
        /*<<camlinternalOO.ml:507:10>>*/  /*<<camlinternalOO.ml:507:10>>*/ new_method
         /*<<camlinternalOO.ml:507:10>>*/ (table);
    a:
    {
     if(0 !== (n % 2 | 0)){
      var _n_ = Stdlib_Sys[9];
      if
       ((2 + caml_div(caml_check_bound(table[2], 1)[2] * 16 | 0, _n_) | 0)
        >= n){
       var
        n$0 =
           /*<<camlinternalOO.ml:510:16>>*/ new_method
            /*<<camlinternalOO.ml:510:16>>*/ (table);
       break a;
      }
     }
     var n$0 = n;
    }
     /*<<camlinternalOO.ml:512:2>>*/ caml_check_bound(table[2], n$0)[1 + n$0]
    = 0;
     /*<<camlinternalOO.ml:512:2>>*/ return n$0 /*<<camlinternalOO.ml:512:2>>*/ ;
    /*<<camlinternalOO.ml:513:3>>*/ }
   function set_methods(table, methods){
    var
     len = methods.length - 1,
     i =  /*<<camlinternalOO.ml:598:44>>*/ [0, 0];
    for(;;){
     if(i[1] >= len) return 0;
     var
      _h_ = i[1],
      label =
         /*<<camlinternalOO.ml:600:16>>*/ caml_check_bound(methods, _h_)
         [1 + _h_],
      next =
        function(param){
          /*<<camlinternalOO.ml:543:16>>*/ i[1]++;
         var _m_ = i[1];
          /*<<camlinternalOO.ml:543:34>>*/ return caml_check_bound
                  (methods, _m_)
                 [1 + _m_] /*<<camlinternalOO.ml:543:34>>*/ ;
         /*<<camlinternalOO.ml:543:42>>*/ },
      clo =
         /*<<camlinternalOO.ml:544:8>>*/  /*<<camlinternalOO.ml:544:8>>*/ next
          /*<<camlinternalOO.ml:544:8>>*/ (0);
     if(typeof clo === "number")
      switch(clo){
        case 0:
         var
          x =
             /*<<camlinternalOO.ml:545:28>>*/  /*<<camlinternalOO.ml:545:28>>*/ next
              /*<<camlinternalOO.ml:545:28>>*/ (0);
         let x$20 = x;
         var
          clo$0 =
            function(obj){
              /*<<camlinternalOO.ml:459:35>>*/ return x$20 /*<<camlinternalOO.ml:459:18>>*/ ;
             /*<<camlinternalOO.ml:459:36>>*/ };
         break;
        case 1:
         var
          n =
             /*<<camlinternalOO.ml:546:24>>*/  /*<<camlinternalOO.ml:546:24>>*/ next
              /*<<camlinternalOO.ml:546:24>>*/ (0);
         let n$38 = n;
         var
          clo$0 =
            function(obj){
              /*<<camlinternalOO.ml:460:34>>*/ return obj[1 + n$38];
             /*<<camlinternalOO.ml:460:56>>*/ };
         break;
        case 2:
         var
          e =
             /*<<camlinternalOO.ml:547:24>>*/  /*<<camlinternalOO.ml:547:24>>*/ next
              /*<<camlinternalOO.ml:547:24>>*/ (0),
          n$0 =
             /*<<camlinternalOO.ml:547:42>>*/  /*<<camlinternalOO.ml:547:42>>*/ next
              /*<<camlinternalOO.ml:547:42>>*/ (0);
         let e$10 = e, n$37 = n$0;
         var
          clo$0 =
            function(obj){
              /*<<camlinternalOO.ml:463:4>>*/ return obj[1 + e$10][1 + n$37];
             /*<<camlinternalOO.ml:463:65>>*/ };
         break;
        case 3:
         var
          n$1 =
             /*<<camlinternalOO.ml:548:24>>*/  /*<<camlinternalOO.ml:548:24>>*/ next
              /*<<camlinternalOO.ml:548:24>>*/ (0);
         let n$36 = n$1;
         var
          clo$0 =
            function(obj){
              /*<<camlinternalOO.ml:464:34>>*/ return  /*<<camlinternalOO.ml:464:34>>*/ caml_call1
                      /*<<camlinternalOO.ml:464:34>>*/ (obj[1][1 + n$36], obj) /*<<camlinternalOO.ml:464:48>>*/ ;
             /*<<camlinternalOO.ml:464:48>>*/ };
         break;
        case 4:
         var
          n$2 =
             /*<<camlinternalOO.ml:549:24>>*/  /*<<camlinternalOO.ml:549:24>>*/ next
              /*<<camlinternalOO.ml:549:24>>*/ (0);
         let n$35 = n$2;
         var
          clo$0 =
            function(obj, x){
              /*<<camlinternalOO.ml:465:36>>*/ obj[1 + n$35] = x;
             return 0;
             /*<<camlinternalOO.ml:465:60>>*/ };
         break;
        case 5:
         var
          f =
             /*<<camlinternalOO.ml:550:24>>*/  /*<<camlinternalOO.ml:550:24>>*/ next
              /*<<camlinternalOO.ml:550:24>>*/ (0),
          x$0 =
             /*<<camlinternalOO.ml:550:42>>*/  /*<<camlinternalOO.ml:550:42>>*/ next
              /*<<camlinternalOO.ml:550:42>>*/ (0);
         let f$20 = f, x$19 = x$0;
         var
          clo$0 =
            function(obj){
              /*<<camlinternalOO.ml:466:37>>*/ return  /*<<camlinternalOO.ml:466:20>>*/ caml_call1
                      /*<<camlinternalOO.ml:466:20>>*/ (f$20, x$19) /*<<camlinternalOO.ml:466:40>>*/ ;
             /*<<camlinternalOO.ml:466:40>>*/ };
         break;
        case 6:
         var
          f$0 =
             /*<<camlinternalOO.ml:551:24>>*/  /*<<camlinternalOO.ml:551:24>>*/ next
              /*<<camlinternalOO.ml:551:24>>*/ (0),
          n$3 =
             /*<<camlinternalOO.ml:551:42>>*/  /*<<camlinternalOO.ml:551:42>>*/ next
              /*<<camlinternalOO.ml:551:42>>*/ (0);
         let f$19 = f$0, n$34 = n$3;
         var
          clo$0 =
            function(obj){
              /*<<camlinternalOO.ml:467:36>>*/ return caml_call1
                     (f$19, obj[1 + n$34]) /*<<camlinternalOO.ml:467:62>>*/ ;
             /*<<camlinternalOO.ml:467:62>>*/ };
         break;
        case 7:
         var
          f$1 =
             /*<<camlinternalOO.ml:553:14>>*/  /*<<camlinternalOO.ml:553:14>>*/ next
              /*<<camlinternalOO.ml:553:14>>*/ (0),
          e$0 =
             /*<<camlinternalOO.ml:553:33>>*/  /*<<camlinternalOO.ml:553:33>>*/ next
              /*<<camlinternalOO.ml:553:33>>*/ (0),
          n$4 =
             /*<<camlinternalOO.ml:553:51>>*/  /*<<camlinternalOO.ml:553:51>>*/ next
              /*<<camlinternalOO.ml:553:51>>*/ (0);
         let f$18 = f$1, e$9 = e$0, n$33 = n$4;
         var
          clo$0 =
            function(obj){
              /*<<camlinternalOO.ml:470:4>>*/ return caml_call1
                     (f$18, obj[1 + e$9][1 + n$33]) /*<<camlinternalOO.ml:470:69>>*/ ;
             /*<<camlinternalOO.ml:470:69>>*/ };
         break;
        case 8:
         var
          f$2 =
             /*<<camlinternalOO.ml:555:24>>*/  /*<<camlinternalOO.ml:555:24>>*/ next
              /*<<camlinternalOO.ml:555:24>>*/ (0),
          n$5 =
             /*<<camlinternalOO.ml:555:42>>*/  /*<<camlinternalOO.ml:555:42>>*/ next
              /*<<camlinternalOO.ml:555:42>>*/ (0);
         let f$17 = f$2, n$32 = n$5;
         var
          clo$0 =
            function(obj){
              /*<<camlinternalOO.ml:471:36>>*/ return  /*<<camlinternalOO.ml:471:38>>*/ caml_call1
                      /*<<camlinternalOO.ml:471:38>>*/ (f$17,
                       /*<<camlinternalOO.ml:471:38>>*/ caml_call1
                        /*<<camlinternalOO.ml:471:38>>*/ (obj[1][1 + n$32], obj)) /*<<camlinternalOO.ml:471:54>>*/ ;
             /*<<camlinternalOO.ml:471:54>>*/ };
         break;
        case 9:
         var
          f$3 =
             /*<<camlinternalOO.ml:557:14>>*/  /*<<camlinternalOO.ml:557:14>>*/ next
              /*<<camlinternalOO.ml:557:14>>*/ (0),
          x$1 =
             /*<<camlinternalOO.ml:557:32>>*/  /*<<camlinternalOO.ml:557:32>>*/ next
              /*<<camlinternalOO.ml:557:32>>*/ (0),
          y =
             /*<<camlinternalOO.ml:557:50>>*/  /*<<camlinternalOO.ml:557:50>>*/ next
              /*<<camlinternalOO.ml:557:50>>*/ (0);
         let f$16 = f$3, x$18 = x$1, y$0 = y;
         var
          clo$0 =
            function(obj){
              /*<<camlinternalOO.ml:472:45>>*/ return  /*<<camlinternalOO.ml:472:28>>*/ caml_call2
                      /*<<camlinternalOO.ml:472:28>>*/ (f$16, x$18, y$0) /*<<camlinternalOO.ml:472:50>>*/ ;
             /*<<camlinternalOO.ml:472:50>>*/ };
         break;
        case 10:
         var
          f$4 =
             /*<<camlinternalOO.ml:560:14>>*/  /*<<camlinternalOO.ml:560:14>>*/ next
              /*<<camlinternalOO.ml:560:14>>*/ (0),
          x$2 =
             /*<<camlinternalOO.ml:560:32>>*/  /*<<camlinternalOO.ml:560:32>>*/ next
              /*<<camlinternalOO.ml:560:32>>*/ (0),
          n$6 =
             /*<<camlinternalOO.ml:560:50>>*/  /*<<camlinternalOO.ml:560:50>>*/ next
              /*<<camlinternalOO.ml:560:50>>*/ (0);
         let f$15 = f$4, x$17 = x$2, n$31 = n$6;
         var
          clo$0 =
            function(obj){
              /*<<camlinternalOO.ml:473:44>>*/ return caml_call2
                     (f$15, x$17, obj[1 + n$31]) /*<<camlinternalOO.ml:473:72>>*/ ;
             /*<<camlinternalOO.ml:473:72>>*/ };
         break;
        case 11:
         var
          f$5 =
             /*<<camlinternalOO.ml:563:14>>*/  /*<<camlinternalOO.ml:563:14>>*/ next
              /*<<camlinternalOO.ml:563:14>>*/ (0),
          x$3 =
             /*<<camlinternalOO.ml:563:32>>*/  /*<<camlinternalOO.ml:563:32>>*/ next
              /*<<camlinternalOO.ml:563:32>>*/ (0),
          e$1 =
             /*<<camlinternalOO.ml:563:50>>*/  /*<<camlinternalOO.ml:563:50>>*/ next
              /*<<camlinternalOO.ml:563:50>>*/ (0),
          n$7 =
             /*<<camlinternalOO.ml:563:69>>*/  /*<<camlinternalOO.ml:563:69>>*/ next
              /*<<camlinternalOO.ml:563:69>>*/ (0);
         let f$14 = f$5, x$16 = x$3, e$8 = e$1, n$30 = n$7;
         var
          clo$0 =
            function(obj){
              /*<<camlinternalOO.ml:479:4>>*/ return caml_call2
                     (f$14, x$16, obj[1 + e$8][1 + n$30]) /*<<camlinternalOO.ml:479:71>>*/ ;
             /*<<camlinternalOO.ml:479:71>>*/ };
         break;
        case 12:
         var
          f$6 =
             /*<<camlinternalOO.ml:566:14>>*/  /*<<camlinternalOO.ml:566:14>>*/ next
              /*<<camlinternalOO.ml:566:14>>*/ (0),
          x$4 =
             /*<<camlinternalOO.ml:566:32>>*/  /*<<camlinternalOO.ml:566:32>>*/ next
              /*<<camlinternalOO.ml:566:32>>*/ (0),
          n$8 =
             /*<<camlinternalOO.ml:566:50>>*/  /*<<camlinternalOO.ml:566:50>>*/ next
              /*<<camlinternalOO.ml:566:50>>*/ (0);
         let f$13 = f$6, x$15 = x$4, n$29 = n$8;
         var
          clo$0 =
            function(obj){
              /*<<camlinternalOO.ml:474:43>>*/ return  /*<<camlinternalOO.ml:474:47>>*/ caml_call2
                      /*<<camlinternalOO.ml:474:47>>*/ (f$13,
                      x$15,
                       /*<<camlinternalOO.ml:474:47>>*/ caml_call1
                        /*<<camlinternalOO.ml:474:47>>*/ (obj[1][1 + n$29], obj)) /*<<camlinternalOO.ml:474:63>>*/ ;
             /*<<camlinternalOO.ml:474:63>>*/ };
         break;
        case 13:
         var
          f$7 =
             /*<<camlinternalOO.ml:569:14>>*/  /*<<camlinternalOO.ml:569:14>>*/ next
              /*<<camlinternalOO.ml:569:14>>*/ (0),
          n$9 =
             /*<<camlinternalOO.ml:569:32>>*/  /*<<camlinternalOO.ml:569:32>>*/ next
              /*<<camlinternalOO.ml:569:32>>*/ (0),
          x$5 =
             /*<<camlinternalOO.ml:569:50>>*/  /*<<camlinternalOO.ml:569:50>>*/ next
              /*<<camlinternalOO.ml:569:50>>*/ (0);
         let f$12 = f$7, n$28 = n$9, x$14 = x$5;
         var
          clo$0 =
            function(obj){
              /*<<camlinternalOO.ml:475:42>>*/ return  /*<<camlinternalOO.ml:475:26>>*/ caml_call2
                      /*<<camlinternalOO.ml:475:26>>*/ (f$12,
                      obj[1 + n$28],
                      x$14) /*<<camlinternalOO.ml:475:70>>*/ ;
             /*<<camlinternalOO.ml:475:70>>*/ };
         break;
        case 14:
         var
          f$8 =
             /*<<camlinternalOO.ml:572:14>>*/  /*<<camlinternalOO.ml:572:14>>*/ next
              /*<<camlinternalOO.ml:572:14>>*/ (0),
          e$2 =
             /*<<camlinternalOO.ml:572:32>>*/  /*<<camlinternalOO.ml:572:32>>*/ next
              /*<<camlinternalOO.ml:572:32>>*/ (0),
          n$10 =
             /*<<camlinternalOO.ml:572:51>>*/  /*<<camlinternalOO.ml:572:51>>*/ next
              /*<<camlinternalOO.ml:572:51>>*/ (0),
          x$6 =
             /*<<camlinternalOO.ml:572:69>>*/  /*<<camlinternalOO.ml:572:69>>*/ next
              /*<<camlinternalOO.ml:572:69>>*/ (0);
         let f$11 = f$8, e$7 = e$2, n$27 = n$10, x$13 = x$6;
         var
          clo$0 =
            function(obj){
              /*<<camlinternalOO.ml:482:4>>*/ return  /*<<camlinternalOO.ml:481:2>>*/ caml_call2
                      /*<<camlinternalOO.ml:481:2>>*/ (f$11,
                      obj[1 + e$7][1 + n$27],
                      x$13) /*<<camlinternalOO.ml:482:71>>*/ ;
             /*<<camlinternalOO.ml:482:71>>*/ };
         break;
        case 15:
         var
          f$9 =
             /*<<camlinternalOO.ml:575:14>>*/  /*<<camlinternalOO.ml:575:14>>*/ next
              /*<<camlinternalOO.ml:575:14>>*/ (0),
          n$11 =
             /*<<camlinternalOO.ml:575:32>>*/  /*<<camlinternalOO.ml:575:32>>*/ next
              /*<<camlinternalOO.ml:575:32>>*/ (0),
          x$7 =
             /*<<camlinternalOO.ml:575:50>>*/  /*<<camlinternalOO.ml:575:50>>*/ next
              /*<<camlinternalOO.ml:575:50>>*/ (0);
         let f$10 = f$9, n$26 = n$11, x$12 = x$7;
         var
          clo$0 =
            function(obj){
              /*<<camlinternalOO.ml:476:43>>*/ return  /*<<camlinternalOO.ml:476:27>>*/ caml_call2
                      /*<<camlinternalOO.ml:476:27>>*/ (f$10,
                       /*<<camlinternalOO.ml:476:45>>*/ caml_call1
                        /*<<camlinternalOO.ml:476:45>>*/ (obj[1][1 + n$26], obj),
                      x$12) /*<<camlinternalOO.ml:476:63>>*/ ;
             /*<<camlinternalOO.ml:476:63>>*/ };
         break;
        case 16:
         var
          n$12 =
             /*<<camlinternalOO.ml:578:14>>*/  /*<<camlinternalOO.ml:578:14>>*/ next
              /*<<camlinternalOO.ml:578:14>>*/ (0),
          x$8 =
             /*<<camlinternalOO.ml:578:32>>*/  /*<<camlinternalOO.ml:578:32>>*/ next
              /*<<camlinternalOO.ml:578:32>>*/ (0);
         let n$25 = n$12, x$11 = x$8;
         var
          clo$0 =
            function(obj){
              /*<<camlinternalOO.ml:483:41>>*/ return  /*<<camlinternalOO.ml:483:25>>*/ caml_call2
                      /*<<camlinternalOO.ml:483:25>>*/ (obj[1][1 + n$25],
                      obj,
                      x$11) /*<<camlinternalOO.ml:483:68>>*/ ;
             /*<<camlinternalOO.ml:483:68>>*/ };
         break;
        case 17:
         var
          n$13 =
             /*<<camlinternalOO.ml:580:14>>*/  /*<<camlinternalOO.ml:580:14>>*/ next
              /*<<camlinternalOO.ml:580:14>>*/ (0),
          m =
             /*<<camlinternalOO.ml:580:32>>*/  /*<<camlinternalOO.ml:580:32>>*/ next
              /*<<camlinternalOO.ml:580:32>>*/ (0);
         let n$24 = n$13, m$12 = m;
         var
          clo$0 =
            function(obj){
              /*<<camlinternalOO.ml:485:18>>*/ return caml_call2
                     (obj[1][1 + n$24], obj, obj[1 + m$12]) /*<<camlinternalOO.ml:485:68>>*/ ;
             /*<<camlinternalOO.ml:485:68>>*/ };
         break;
        case 18:
         var
          n$14 =
             /*<<camlinternalOO.ml:582:14>>*/  /*<<camlinternalOO.ml:582:14>>*/ next
              /*<<camlinternalOO.ml:582:14>>*/ (0),
          e$3 =
             /*<<camlinternalOO.ml:582:32>>*/  /*<<camlinternalOO.ml:582:32>>*/ next
              /*<<camlinternalOO.ml:582:32>>*/ (0),
          m$0 =
             /*<<camlinternalOO.ml:582:50>>*/  /*<<camlinternalOO.ml:582:50>>*/ next
              /*<<camlinternalOO.ml:582:50>>*/ (0);
         let n$23 = n$14, e$6 = e$3, m$11 = m$0;
         var
          clo$0 =
            function(obj){
              /*<<camlinternalOO.ml:487:18>>*/ return caml_call2
                     (obj[1][1 + n$23], obj, obj[1 + e$6][1 + m$11]) /*<<camlinternalOO.ml:488:69>>*/ ;
             /*<<camlinternalOO.ml:488:69>>*/ };
         break;
        case 19:
         var
          n$15 =
             /*<<camlinternalOO.ml:585:14>>*/  /*<<camlinternalOO.ml:585:14>>*/ next
              /*<<camlinternalOO.ml:585:14>>*/ (0),
          m$1 =
             /*<<camlinternalOO.ml:585:32>>*/  /*<<camlinternalOO.ml:585:32>>*/ next
              /*<<camlinternalOO.ml:585:32>>*/ (0);
         let n$22 = n$15, m$10 = m$1;
         var
          clo$0 =
            function(obj){
             var
              _l_ =
                 /*<<camlinternalOO.ml:490:44>>*/  /*<<camlinternalOO.ml:490:44>>*/ caml_call1
                  /*<<camlinternalOO.ml:490:44>>*/ (obj[1][1 + m$10], obj);
              /*<<camlinternalOO.ml:490:44>>*/ return  /*<<camlinternalOO.ml:490:44>>*/ caml_call2
                      /*<<camlinternalOO.ml:490:44>>*/ (obj[1][1 + n$22],
                      obj,
                      _l_) /*<<camlinternalOO.ml:490:60>>*/ ;
             /*<<camlinternalOO.ml:490:60>>*/ };
         break;
        case 20:
         var
          m$2 =
             /*<<camlinternalOO.ml:587:14>>*/  /*<<camlinternalOO.ml:587:14>>*/ next
              /*<<camlinternalOO.ml:587:14>>*/ (0),
          x$9 =
             /*<<camlinternalOO.ml:587:32>>*/  /*<<camlinternalOO.ml:587:32>>*/ next
              /*<<camlinternalOO.ml:587:32>>*/ (0);
          /*<<camlinternalOO.ml:587:57>>*/  /*<<camlinternalOO.ml:587:57>>*/ new_cache
           /*<<camlinternalOO.ml:587:57>>*/ (table);
         let m$9 = m$2, x$10 = x$9;
         var
          clo$0 =
            function(obj){
              /*<<camlinternalOO.ml:492:18>>*/ return  /*<<camlinternalOO.ml:492:2>>*/ caml_call1
                      /*<<camlinternalOO.ml:492:2>>*/ (caml_get_public_method
                       (x$10, m$9, 0),
                      x$10) /*<<camlinternalOO.ml:492:58>>*/ ;
             /*<<camlinternalOO.ml:492:58>>*/ };
         break;
        case 21:
         var
          m$3 =
             /*<<camlinternalOO.ml:589:14>>*/  /*<<camlinternalOO.ml:589:14>>*/ next
              /*<<camlinternalOO.ml:589:14>>*/ (0),
          n$16 =
             /*<<camlinternalOO.ml:589:32>>*/  /*<<camlinternalOO.ml:589:32>>*/ next
              /*<<camlinternalOO.ml:589:32>>*/ (0);
          /*<<camlinternalOO.ml:589:56>>*/  /*<<camlinternalOO.ml:589:56>>*/ new_cache
           /*<<camlinternalOO.ml:589:56>>*/ (table);
         let m$8 = m$3, n$21 = n$16;
         var
          clo$0 =
            function(obj){
             var _k_ = obj[1 + n$21];
             return caml_call1(caml_get_public_method(_k_, m$8, 0), _k_) /*<<camlinternalOO.ml:496:32>>*/ ;
             /*<<camlinternalOO.ml:496:32>>*/ };
         break;
        case 22:
         var
          m$4 =
             /*<<camlinternalOO.ml:591:14>>*/  /*<<camlinternalOO.ml:591:14>>*/ next
              /*<<camlinternalOO.ml:591:14>>*/ (0),
          e$4 =
             /*<<camlinternalOO.ml:591:32>>*/  /*<<camlinternalOO.ml:591:32>>*/ next
              /*<<camlinternalOO.ml:591:32>>*/ (0),
          n$17 =
             /*<<camlinternalOO.ml:591:50>>*/  /*<<camlinternalOO.ml:591:50>>*/ next
              /*<<camlinternalOO.ml:591:50>>*/ (0);
          /*<<camlinternalOO.ml:592:21>>*/  /*<<camlinternalOO.ml:592:21>>*/ new_cache
           /*<<camlinternalOO.ml:592:21>>*/ (table);
         let m$7 = m$4, e$5 = e$4, n$20 = n$17;
         var
          clo$0 =
            function(obj){
             var _j_ = obj[1 + e$5][1 + n$20];
             return caml_call1(caml_get_public_method(_j_, m$7, 0), _j_) /*<<camlinternalOO.ml:502:34>>*/ ;
             /*<<camlinternalOO.ml:502:34>>*/ };
         break;
        default:
         var
          m$5 =
             /*<<camlinternalOO.ml:594:14>>*/  /*<<camlinternalOO.ml:594:14>>*/ next
              /*<<camlinternalOO.ml:594:14>>*/ (0),
          n$18 =
             /*<<camlinternalOO.ml:594:32>>*/  /*<<camlinternalOO.ml:594:32>>*/ next
              /*<<camlinternalOO.ml:594:32>>*/ (0);
          /*<<camlinternalOO.ml:594:57>>*/  /*<<camlinternalOO.ml:594:57>>*/ new_cache
           /*<<camlinternalOO.ml:594:57>>*/ (table);
         let m$6 = m$5, n$19 = n$18;
         var
          clo$0 =
            function(obj){
             var
              _i_ =
                 /*<<camlinternalOO.ml:505:14>>*/  /*<<camlinternalOO.ml:505:14>>*/ caml_call1
                  /*<<camlinternalOO.ml:505:14>>*/ (obj[1][1 + n$19], obj);
              /*<<camlinternalOO.ml:505:14>>*/ return  /*<<camlinternalOO.ml:505:14>>*/ caml_call1
                      /*<<camlinternalOO.ml:505:14>>*/ (caml_get_public_method
                       (_i_, m$6, 0),
                      _i_) /*<<camlinternalOO.ml:505:59>>*/ ;
             /*<<camlinternalOO.ml:505:59>>*/ };
      }
     else
      var clo$0 = clo;
      /*<<camlinternalOO.ml:601:4>>*/  /*<<camlinternalOO.ml:601:4>>*/ set_method
       /*<<camlinternalOO.ml:601:4>>*/ (table, label, clo$0);
     i[1]++;
    }
    /*<<camlinternalOO.ml:603:6>>*/ }
   function stats(param){
     /*<<camlinternalOO.ml:611:2>>*/ return [0,
            table_count[1],
            method_count[1],
            inst_var_count[1]] /*<<camlinternalOO.ml:611:2>>*/ ;
    /*<<camlinternalOO.ml:612:59>>*/ }
   var
    CamlinternalOO =
      [0,
       public_method_label,
       new_method,
       new_variable,
       new_methods_variables,
       get_variable,
       get_variables,
       get_method_label,
       get_method_labels,
       get_method,
       set_method,
       set_methods,
       narrow,
       widen,
       add_initializer,
       dummy_table,
       create_table,
       init_class,
       inherits,
       make_class,
       make_class_store,
       dummy_class,
       copy,
       create_object,
       create_object_opt,
       run_initializers,
       run_initializers_opt,
       create_object_and_run_initiali,
       lookup_tables,
       params,
       stats];
   runtime.caml_register_global(17, CamlinternalOO, "CamlinternalOO");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Oo
//# unitInfo: Requires: CamlinternalOO
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    CamlinternalOO = global_data.CamlinternalOO,
    copy = CamlinternalOO[22],
    new_method = CamlinternalOO[1],
    public_method_label = CamlinternalOO[1],
    Stdlib_Oo = [0, copy, new_method, public_method_label];
   runtime.caml_register_global(1, Stdlib_Oo, "Stdlib__Oo");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: CamlinternalMod
//# unitInfo: Requires: CamlinternalLazy, CamlinternalOO, Stdlib, Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst_camlinternalMod_ml =  /*<<?>>*/ "camlinternalMod.ml",
    caml_check_bound =  /*<<?>>*/ runtime.caml_check_bound,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_obj_tag =  /*<<?>>*/ runtime.caml_obj_tag;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    CamlinternalLazy = global_data.CamlinternalLazy,
    CamlinternalOO = global_data.CamlinternalOO,
    Assert_failure = global_data.Assert_failure,
    cst_CamlinternalMod_init_mod_n = "CamlinternalMod.init_mod: not a module",
    _a_ = [0, cst_camlinternalMod_ml, 72, 5],
    _b_ = [0, cst_camlinternalMod_ml, 81, 2],
    cst_CamlinternalMod_update_mod =
      "CamlinternalMod.update_mod: not a module";
   function init_mod_block(loc, comps$0){
    var
     length = comps$0.length - 1,
     modu =
        /*<<camlinternalMod.ml:53:13>>*/  /*<<camlinternalMod.ml:53:13>>*/ runtime.caml_obj_block
         /*<<camlinternalMod.ml:53:13>>*/ (0, length),
     _h_ =  /*<<camlinternalMod.ml:54:2>>*/ length - 1 | 0,
     _g_ =  /*<<camlinternalMod.ml:53:13>>*/ 0;
    if(_h_ >= 0){
     var i = _g_;
     for(;;){
      var
       shape =
          /*<<camlinternalMod.ml:55:30>>*/ caml_check_bound(comps$0, i)[1 + i];
      if(typeof shape === "number")
       switch(shape){
         case 0:
          let i$1 = i;
          var
           fn =
             function(x){
              var fn =  /*<<camlinternalMod.ml:28:38>>*/ modu[1 + i$1];
              if(fn$0 === fn)
                /*<<camlinternalMod.ml:30:11>>*/ throw  /*<<camlinternalMod.ml:30:11>>*/ caml_maybe_attach_backtrace
                       /*<<camlinternalMod.ml:30:11>>*/ ([0, Stdlib[15], loc], 1);
               /*<<camlinternalMod.ml:32:11>>*/ return  /*<<camlinternalMod.ml:32:11>>*/ caml_call1
                       /*<<camlinternalMod.ml:32:11>>*/ (fn, x) /*<<camlinternalMod.ml:32:16>>*/ ;
              /*<<camlinternalMod.ml:32:16>>*/ };
          let fn$0 = fn;
          var init = fn;
          break;
         case 1:
          var l = [];
          let l$0 = l, i$0 = i;
          runtime.caml_update_dummy
           (l,
            [246,
             function(param){
              var l =  /*<<camlinternalMod.ml:37:28>>*/ modu[1 + i$0];
              if(l$0 === l)
                /*<<camlinternalMod.ml:39:13>>*/ throw  /*<<camlinternalMod.ml:39:13>>*/ caml_maybe_attach_backtrace
                       /*<<camlinternalMod.ml:39:13>>*/ ([0, Stdlib[15], loc], 1);
              var _j_ = caml_obj_tag(l);
              if(250 === _j_) return l[1];
              if(246 !== _j_ && 244 !== _j_)
                /*<<camlinternalMod.ml:41:13>>*/ return l /*<<camlinternalMod.ml:41:13>>*/ ;
               /*<<camlinternalMod.ml:41:13>>*/ return  /*<<camlinternalMod.ml:41:13>>*/ caml_call1
                       /*<<camlinternalMod.ml:41:13>>*/ (CamlinternalLazy[2], l) /*<<camlinternalMod.ml:41:13>>*/ ;
             }]);
          var init = l;
          break;
         default:
          var
           init =
              /*<<camlinternalMod.ml:44:16>>*/ caml_call1
               /*<<camlinternalMod.ml:44:16>>*/ (CamlinternalOO[21], loc);
       }
      else if(0 === shape[0])
       var
        comps = shape[1],
        init =
           /*<<camlinternalMod.ml:46:16>>*/ init_mod_block
            /*<<camlinternalMod.ml:46:16>>*/ (loc, comps);
      else
       var v = shape[1], init = v;
       /*<<camlinternalMod.ml:49:2>>*/ modu[1 + i] = init;
      var _i_ =  /*<<camlinternalMod.ml:55:4>>*/ i + 1 | 0;
      if(_h_ === i) break;
      i = _i_;
     }
    }
     /*<<camlinternalMod.ml:57:2>>*/ return modu /*<<camlinternalMod.ml:57:2>>*/ ;
    /*<<camlinternalMod.ml:57:6>>*/ }
   function init_mod(loc, shape){
     /*<<camlinternalMod.ml:60:2>>*/ if
     (typeof shape !== "number" && 0 === shape[0]){
     var comps = shape[1];
      /*<<camlinternalMod.ml:62:5>>*/ return  /*<<camlinternalMod.ml:62:5>>*/ init_mod_block
              /*<<camlinternalMod.ml:62:5>>*/ (loc, comps) /*<<camlinternalMod.ml:63:58>>*/ ;
    }
     /*<<camlinternalMod.ml:63:9>>*/ return  /*<<camlinternalMod.ml:63:9>>*/ caml_call1
             /*<<camlinternalMod.ml:63:9>>*/ (Stdlib[2],
             cst_CamlinternalMod_init_mod_n) /*<<camlinternalMod.ml:63:58>>*/ ;
    /*<<camlinternalMod.ml:63:58>>*/ }
   function update_mod_block(comps$0, modu, n){
     /*<<camlinternalMod.ml:81:2>>*/ if
     (0
      ===
        /*<<camlinternalMod.ml:81:10>>*/ caml_obj_tag
         /*<<camlinternalMod.ml:81:10>>*/ (n)
      && comps$0.length - 1 <= n.length - 1){
     var
      _e_ = comps$0.length - 2 | 0,
      _d_ =  /*<<camlinternalMod.ml:82:2>>*/ 0;
     if(_e_ >= 0){
      var i = _d_;
      for(;;){
       var
        n$0 =  /*<<camlinternalMod.ml:83:35>>*/ n[1 + i],
        shape =
           /*<<camlinternalMod.ml:83:25>>*/ caml_check_bound(comps$0, i)
           [1 + i];
       a:
       if(typeof shape === "number"){
        if(2 === shape){
          /*<<camlinternalMod.ml:72:13>>*/ if
          (0
           ===
             /*<<camlinternalMod.ml:72:13>>*/ caml_obj_tag
              /*<<camlinternalMod.ml:72:13>>*/ (n$0)
           && 4 === n$0.length - 1){
          var cl =  /*<<camlinternalMod.ml:73:14>>*/ modu[1 + i], j = 0;
          for(;;){
            /*<<camlinternalMod.ml:75:7>>*/ cl[1 + j] = n$0[1 + j];
           var _c_ =  /*<<camlinternalMod.ml:75:7>>*/ j + 1 | 0;
           if(3 === j) break;
           j = _c_;
          }
          break a;
         }
          /*<<camlinternalMod.ml:72:5>>*/ throw  /*<<camlinternalMod.ml:72:5>>*/ caml_maybe_attach_backtrace
                 /*<<camlinternalMod.ml:72:5>>*/ ([0, Assert_failure, _a_], 1);
        }
         /*<<camlinternalMod.ml:68:5>>*/ modu[1 + i] = n$0;
       }
       else if(0 === shape[0]){
        var comps = shape[1];
         /*<<camlinternalMod.ml:78:5>>*/  /*<<camlinternalMod.ml:78:5>>*/ update_mod_block
          /*<<camlinternalMod.ml:78:5>>*/ (comps, modu[1 + i], n$0);
       }
       var _f_ =  /*<<camlinternalMod.ml:83:4>>*/ i + 1 | 0;
       if(_e_ === i) break;
       i = _f_;
      }
     }
     return 0;
    }
     /*<<camlinternalMod.ml:81:2>>*/ throw  /*<<camlinternalMod.ml:81:2>>*/ caml_maybe_attach_backtrace
            /*<<camlinternalMod.ml:81:2>>*/ ([0, Assert_failure, _b_], 1);
    /*<<camlinternalMod.ml:84:6>>*/ }
   function update_mod(shape, o, n){
     /*<<camlinternalMod.ml:87:2>>*/ if
     (typeof shape !== "number" && 0 === shape[0]){
     var comps = shape[1];
      /*<<camlinternalMod.ml:89:5>>*/ return  /*<<camlinternalMod.ml:89:5>>*/ update_mod_block
              /*<<camlinternalMod.ml:89:5>>*/ (comps, o, n) /*<<camlinternalMod.ml:90:60>>*/ ;
    }
     /*<<camlinternalMod.ml:90:9>>*/ return  /*<<camlinternalMod.ml:90:9>>*/ caml_call1
             /*<<camlinternalMod.ml:90:9>>*/ (Stdlib[2],
             cst_CamlinternalMod_update_mod) /*<<camlinternalMod.ml:90:60>>*/ ;
    /*<<camlinternalMod.ml:90:60>>*/ }
   var CamlinternalMod = [0, init_mod, update_mod];
   runtime.caml_register_global(8, CamlinternalMod, "CamlinternalMod");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Ephemeron
//# unitInfo: Requires: CamlinternalLazy, Stdlib, Stdlib__Array, Stdlib__Hashtbl, Stdlib__Int, Stdlib__List, Stdlib__Obj, Stdlib__Random, Stdlib__Seq, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_check_bound =  /*<<?>>*/ runtime.caml_check_bound,
    caml_make_vect =  /*<<?>>*/ runtime.caml_make_vect,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    dummy = 0,
    global_data = runtime.caml_get_global_data(),
    _c_ = [0, 0],
    _b_ = [0, 0],
    _a_ = [0, 0],
    Stdlib_List = global_data.Stdlib__List,
    Stdlib = global_data.Stdlib,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Random = global_data.Stdlib__Random;
   function MakeSeeded(H){
    var
     prng =
        /*<<ephemeron.ml:105:20>>*/ [246,
        function(_at_){ /*<<?>>*/ return caml_call1(Stdlib_Random[19][2], 0);}];
    function create(opt, initial_size){
     var
      random =
        opt
         ? opt[1]
         :  /*<<ephemeron.ml:107:26>>*/ caml_call1
            /*<<ephemeron.ml:107:26>>*/ (Stdlib_Hashtbl[17], 0);
     a:
     b:
     {
      var x = 16;
       /*<<ephemeron.ml:101:6>>*/ for(;;){
       if(initial_size <= x) break b;
       if(Stdlib_Sys[13] < (x * 2 | 0)) break;
       var x$0 = x * 2 | 0;
       x = x$0;
      }
      break a;
     }
      /*<<ephemeron.ml:109:6>>*/ if(random){
      var _ar_ = runtime.caml_obj_tag(prng);
      a:
      if(250 === _ar_)
       var _as_ = prng[1];
      else{
       if(246 !== _ar_ && 244 !== _ar_){var _as_ = prng; break a;}
       var _as_ = caml_call1(CamlinternalLazy[2], prng);
      }
      var
       seed =
          /*<<ephemeron.ml:109:32>>*/ caml_call1
           /*<<ephemeron.ml:109:32>>*/ (Stdlib_Random[19][4], _as_);
     }
     else
      var seed = 0;
      /*<<ephemeron.ml:110:6>>*/ return [0,
             0,
              /*<<ephemeron.ml:110:56>>*/ caml_make_vect
               /*<<ephemeron.ml:110:56>>*/ (x, 0),
             seed,
             x] /*<<ephemeron.ml:110:6>>*/ ;
     /*<<ephemeron.ml:110:76>>*/ }
    function clear(h){
      /*<<ephemeron.ml:113:6>>*/ h[1] = 0;
     var
      len = h[2].length - 1,
      _ap_ =  /*<<ephemeron.ml:115:6>>*/ len - 1 | 0,
      _ao_ = 0;
     if(_ap_ >= 0){
      var i = _ao_;
      for(;;){
        /*<<ephemeron.ml:116:8>>*/ caml_check_bound(h[2], i)[1 + i] = 0;
       var _aq_ =  /*<<ephemeron.ml:116:8>>*/ i + 1 | 0;
       if(_ap_ === i) break;
       i = _aq_;
      }
     }
     return 0;
     /*<<ephemeron.ml:117:10>>*/ }
    function reset(h){
     var len = h[2].length - 1;
     return len === h[4]
             ?  /*<<ephemeron.ml:122:8>>*/ clear
                /*<<ephemeron.ml:122:8>>*/ (h)
             : (h
                [1]
               = 0,
               h[2] =
                 /*<<ephemeron.ml:125:18>>*/ caml_make_vect
                  /*<<ephemeron.ml:125:18>>*/ (h[4], 0),
               0) /*<<ephemeron.ml:126:9>>*/ ;
     /*<<ephemeron.ml:126:9>>*/ }
    function copy(h){
     var
      _al_ = h[4],
      _am_ = h[3],
      _an_ =
         /*<<ephemeron.ml:128:33>>*/  /*<<ephemeron.ml:128:33>>*/ caml_call1
          /*<<ephemeron.ml:128:33>>*/ (Stdlib_Array[7], h[2]);
      /*<<ephemeron.ml:128:17>>*/ return [0, h[1], _an_, _am_, _al_] /*<<ephemeron.ml:128:17>>*/ ;
     /*<<ephemeron.ml:128:52>>*/ }
    function key_index(h, hkey){
      /*<<ephemeron.ml:131:6>>*/ return hkey & (h[2].length - 2 | 0);
     /*<<ephemeron.ml:131:41>>*/ }
    function clean(h){
     function do_bucket(param){
      var param$0 = param;
       /*<<ephemeron.ml:134:26>>*/ for(;;){
       if(! param$0)
         /*<<ephemeron.ml:136:12>>*/ return 0 /*<<ephemeron.ml:136:12>>*/ ;
       var hkey = param$0[1], rest = param$0[3], c = param$0[2];
        /*<<ephemeron.ml:137:36>>*/ if
        ( /*<<ephemeron.ml:137:36>>*/ caml_call1
           /*<<ephemeron.ml:137:36>>*/ (H[6], c)){
        var rest$0 = param$0[3], c$0 = param$0[2];
         /*<<ephemeron.ml:141:12>>*/ return [0,
                hkey,
                c$0,
                 /*<<ephemeron.ml:141:26>>*/ do_bucket
                  /*<<ephemeron.ml:141:26>>*/ (rest$0)] /*<<ephemeron.ml:141:12>>*/ ;
       }
       h[1] = h[1] - 1 | 0;
       param$0 = rest;
      }
      /*<<ephemeron.ml:141:41>>*/ }
     var d = h[2], _aj_ = d.length - 2 | 0, _ai_ = 0;
     if(_aj_ >= 0){
      var i = _ai_;
      for(;;){
        /*<<ephemeron.ml:145:8>>*/ d[1 + i] =
         /*<<ephemeron.ml:145:17>>*/ do_bucket
          /*<<ephemeron.ml:145:17>>*/ (caml_check_bound(d, i)[1 + i]);
       var _ak_ =  /*<<ephemeron.ml:145:8>>*/ i + 1 | 0;
       if(_aj_ === i) break;
       i = _ak_;
      }
     }
     return 0;
     /*<<ephemeron.ml:146:10>>*/ }
    function resize(h){
     var
      odata = h[2],
      osize =  /*<<ephemeron.ml:170:6>>*/ odata.length - 1,
      nsize = osize * 2 | 0;
      /*<<ephemeron.ml:172:6>>*/  /*<<ephemeron.ml:172:6>>*/ clean
       /*<<ephemeron.ml:172:6>>*/ (h);
     var
      _ac_ = nsize < Stdlib_Sys[13] ? 1 : 0,
      _ad_ = _ac_ ? (osize >>> 1 | 0) <= h[1] ? 1 : 0 : _ac_;
     if(_ad_){
      var
       ndata =
          /*<<ephemeron.ml:174:20>>*/  /*<<ephemeron.ml:174:20>>*/ caml_make_vect
           /*<<ephemeron.ml:174:20>>*/ (nsize, 0);
      h[2] = ndata;
      var
       insert_bucket =
         function(param){
           /*<<ephemeron.ml:176:32>>*/ if(! param)
            /*<<ephemeron.ml:177:21>>*/ return /*<<ephemeron.ml:177:21>>*/ ;
          var rest = param[3], data = param[2], hkey = param[1];
           /*<<ephemeron.ml:179:14>>*/  /*<<ephemeron.ml:179:14>>*/ insert_bucket
            /*<<ephemeron.ml:179:14>>*/ (rest);
          var
           nidx =
              /*<<ephemeron.ml:180:25>>*/  /*<<ephemeron.ml:180:25>>*/ key_index
               /*<<ephemeron.ml:180:25>>*/ (h, hkey);
           /*<<ephemeron.ml:181:14>>*/ ndata[1 + nidx] =
           [0, hkey, data, caml_check_bound(ndata, nidx)[1 + nidx]];
          /*<<ephemeron.ml:181:60>>*/ },
       _af_ =  /*<<ephemeron.ml:170:6>>*/ osize - 1 | 0,
       _ae_ =  /*<<ephemeron.ml:182:8>>*/ 0;
      if(_af_ >= 0){
       var i = _ae_;
       for(;;){
         /*<<ephemeron.ml:183:10>>*/  /*<<ephemeron.ml:183:10>>*/ insert_bucket
          /*<<ephemeron.ml:183:10>>*/ (caml_check_bound(odata, i)[1 + i]);
        var _ah_ =  /*<<ephemeron.ml:183:10>>*/ i + 1 | 0;
        if(_af_ === i) break;
        i = _ah_;
       }
      }
      var _ag_ = 0;
     }
     else
      var _ag_ = _ad_;
     return _ag_;
     /*<<ephemeron.ml:185:9>>*/ }
    function add(h, key, info){
     var
      hkey =
         /*<<ephemeron.ml:188:17>>*/  /*<<ephemeron.ml:188:17>>*/ caml_call2
          /*<<ephemeron.ml:188:17>>*/ (H[2], h[3], key),
      i =
         /*<<ephemeron.ml:189:14>>*/  /*<<ephemeron.ml:189:14>>*/ key_index
          /*<<ephemeron.ml:189:14>>*/ (h, hkey),
      container =
         /*<<ephemeron.ml:190:22>>*/  /*<<ephemeron.ml:190:22>>*/ caml_call2
          /*<<ephemeron.ml:190:22>>*/ (H[1], key, info),
      bucket =
         /*<<ephemeron.ml:191:19>>*/ [0,
         hkey,
         container,
         caml_check_bound(h[2], i)[1 + i]];
      /*<<ephemeron.ml:192:6>>*/ caml_check_bound(h[2], i)[1 + i] = bucket;
     h[1] = h[1] + 1 | 0;
     var _ab_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
     return _ab_
             ?  /*<<ephemeron.ml:194:49>>*/ resize
                /*<<ephemeron.ml:194:49>>*/ (h)
             : _ab_ /*<<ephemeron.ml:194:57>>*/ ;
     /*<<ephemeron.ml:194:57>>*/ }
    function remove(h, key){
     var
      hkey =
         /*<<ephemeron.ml:197:17>>*/  /*<<ephemeron.ml:197:17>>*/ caml_call2
          /*<<ephemeron.ml:197:17>>*/ (H[2], h[3], key);
     function remove_bucket(param){
      var param$0 = param;
       /*<<ephemeron.ml:198:30>>*/ for(;;){
       if(! param$0)
         /*<<ephemeron.ml:199:19>>*/ return 0 /*<<ephemeron.ml:199:19>>*/ ;
       var hk = param$0[1], next = param$0[3], c = param$0[2];
       if(hkey !== hk){
        var next$0 = param$0[3], c$0 = param$0[2];
         /*<<ephemeron.ml:210:29>>*/ return [0,
                hk,
                c$0,
                 /*<<ephemeron.ml:210:41>>*/ remove_bucket
                  /*<<ephemeron.ml:210:41>>*/ (next$0)] /*<<ephemeron.ml:210:29>>*/ ;
       }
       switch
        ( /*<<ephemeron.ml:201:24>>*/ caml_call2
           /*<<ephemeron.ml:201:24>>*/ (H[3], c, key)){
         case 0:
          h[1] = h[1] - 1 | 0;
           /*<<ephemeron.ml:202:45>>*/ return next /*<<ephemeron.ml:202:45>>*/ ;
         case 1:
           /*<<ephemeron.ml:203:24>>*/ return [0,
                  hk,
                  c,
                   /*<<ephemeron.ml:203:36>>*/ remove_bucket
                    /*<<ephemeron.ml:203:36>>*/ (next)] /*<<ephemeron.ml:203:24>>*/ ;
         default: h[1] = h[1] - 1 | 0; param$0 = next;
       }
      }
      /*<<ephemeron.ml:210:60>>*/ }
     var
      i =
         /*<<ephemeron.ml:211:14>>*/  /*<<ephemeron.ml:211:14>>*/ key_index
          /*<<ephemeron.ml:211:14>>*/ (h, hkey),
      _aa_ =
         /*<<ephemeron.ml:212:20>>*/  /*<<ephemeron.ml:212:20>>*/ remove_bucket
          /*<<ephemeron.ml:212:20>>*/ (caml_check_bound(h[2], i)[1 + i]);
      /*<<ephemeron.ml:212:6>>*/ caml_check_bound(h[2], i)[1 + i] = _aa_;
      /*<<ephemeron.ml:212:6>>*/ return 0 /*<<ephemeron.ml:212:6>>*/ ;
     /*<<ephemeron.ml:212:44>>*/ }
    function find(h, key){
     var
      hkey =
         /*<<ephemeron.ml:239:17>>*/  /*<<ephemeron.ml:239:17>>*/ caml_call2
          /*<<ephemeron.ml:239:17>>*/ (H[2], h[3], key),
      _$_ =
         /*<<ephemeron.ml:241:33>>*/  /*<<ephemeron.ml:241:33>>*/ key_index
          /*<<ephemeron.ml:241:33>>*/ (h, hkey),
      param = caml_check_bound(h[2], _$_)[1 + _$_];
      /*<<ephemeron.ml:218:21>>*/ for(;;){
      if(! param)
        /*<<ephemeron.ml:220:10>>*/ throw  /*<<ephemeron.ml:220:10>>*/ caml_maybe_attach_backtrace
               /*<<ephemeron.ml:220:10>>*/ (Stdlib[8], 1);
      var hk = param[1], rest = param[3], c = param[2];
      if(hkey === hk)
       switch
        ( /*<<ephemeron.ml:222:22>>*/ caml_call2
           /*<<ephemeron.ml:222:22>>*/ (H[3], c, key)){
         case 0:
          var
           match =
              /*<<ephemeron.ml:224:26>>*/  /*<<ephemeron.ml:224:26>>*/ caml_call1
               /*<<ephemeron.ml:224:26>>*/ (H[4], c);
          if(match){
           var d = match[1];
            /*<<ephemeron.ml:229:26>>*/ return d /*<<ephemeron.ml:229:26>>*/ ;
          }
          param = rest;
          break;
         case 1:
          param = rest; break;
         default: param = rest;
       }
      else{var rest$0 = param[3]; param = rest$0;}
     }
     /*<<ephemeron.ml:241:51>>*/ }
    function find_opt(h, key){
     var
      hkey =
         /*<<ephemeron.ml:264:17>>*/  /*<<ephemeron.ml:264:17>>*/ caml_call2
          /*<<ephemeron.ml:264:17>>*/ (H[2], h[3], key),
      ___ =
         /*<<ephemeron.ml:266:37>>*/  /*<<ephemeron.ml:266:37>>*/ key_index
          /*<<ephemeron.ml:266:37>>*/ (h, hkey),
      param = caml_check_bound(h[2], ___)[1 + ___];
      /*<<ephemeron.ml:243:25>>*/ for(;;){
      if(! param)
        /*<<ephemeron.ml:245:10>>*/ return 0 /*<<ephemeron.ml:245:10>>*/ ;
      var hk = param[1], rest = param[3], c = param[2];
      if(hkey === hk)
       switch
        ( /*<<ephemeron.ml:247:22>>*/ caml_call2
           /*<<ephemeron.ml:247:22>>*/ (H[3], c, key)){
         case 0:
          var
           d =
              /*<<ephemeron.ml:249:26>>*/  /*<<ephemeron.ml:249:26>>*/ caml_call1
               /*<<ephemeron.ml:249:26>>*/ (H[4], c);
          if(d)
            /*<<ephemeron.ml:254:31>>*/ return d /*<<ephemeron.ml:254:31>>*/ ;
          param = rest;
          break;
         case 1:
          param = rest; break;
         default: param = rest;
       }
      else{var rest$0 = param[3]; param = rest$0;}
     }
     /*<<ephemeron.ml:266:55>>*/ }
    function find_all(h, key){
     var
      hkey =
         /*<<ephemeron.ml:269:17>>*/  /*<<ephemeron.ml:269:17>>*/ caml_call2
          /*<<ephemeron.ml:269:17>>*/ (H[2], h[3], key);
     function find_in_bucket(param){
      var param$0 = param;
       /*<<ephemeron.ml:270:31>>*/ for(;;){
       if(! param$0)
         /*<<ephemeron.ml:271:17>>*/ return 0 /*<<ephemeron.ml:271:17>>*/ ;
       var hk = param$0[1], rest = param$0[3], c = param$0[2];
       if(hkey === hk)
        switch
         ( /*<<ephemeron.ml:273:22>>*/ caml_call2
            /*<<ephemeron.ml:273:22>>*/ (H[3], c, key)){
          case 0:
           var
            match =
               /*<<ephemeron.ml:274:33>>*/  /*<<ephemeron.ml:274:33>>*/ caml_call1
                /*<<ephemeron.ml:274:33>>*/ (H[4], c);
           if(match){
            var d = match[1];
             /*<<ephemeron.ml:277:26>>*/ return [0,
                    d,
                     /*<<ephemeron.ml:277:29>>*/ find_in_bucket
                      /*<<ephemeron.ml:277:29>>*/ (rest)] /*<<ephemeron.ml:277:26>>*/ ;
           }
           param$0 = rest;
           break;
          case 1:
           param$0 = rest; break;
          default: param$0 = rest;
        }
       else{var rest$0 = param$0[3]; param$0 = rest$0;}
      }
      /*<<ephemeron.ml:284:29>>*/ }
     var
      _Z_ =
         /*<<ephemeron.ml:285:29>>*/  /*<<ephemeron.ml:285:29>>*/ key_index
          /*<<ephemeron.ml:285:29>>*/ (h, hkey);
      /*<<ephemeron.ml:285:21>>*/ return  /*<<ephemeron.ml:285:21>>*/ find_in_bucket
              /*<<ephemeron.ml:285:21>>*/ (caml_check_bound(h[2], _Z_)
               [1 + _Z_]) /*<<ephemeron.ml:285:46>>*/ ;
     /*<<ephemeron.ml:285:46>>*/ }
    function replace(h, key, info){
     var
      hkey =
         /*<<ephemeron.ml:289:17>>*/  /*<<ephemeron.ml:289:17>>*/ caml_call2
          /*<<ephemeron.ml:289:17>>*/ (H[2], h[3], key),
      i =
         /*<<ephemeron.ml:299:14>>*/  /*<<ephemeron.ml:299:14>>*/ key_index
          /*<<ephemeron.ml:299:14>>*/ (h, hkey),
      l =  /*<<ephemeron.ml:300:14>>*/ caml_check_bound(h[2], i)[1 + i];
      /*<<ephemeron.ml:301:6>>*/ try{
      var param = l;
       /*<<ephemeron.ml:290:31>>*/ for(;;){
       if(! param)
         /*<<ephemeron.ml:291:19>>*/ throw  /*<<ephemeron.ml:291:19>>*/ caml_maybe_attach_backtrace
                /*<<ephemeron.ml:291:19>>*/ (Stdlib[8], 1);
       var hk = param[1], next = param[3], c = param[2];
       if(hkey === hk){
        if
         (!
           /*<<ephemeron.ml:293:24>>*/ caml_call2
            /*<<ephemeron.ml:293:24>>*/ (H[3], c, key)){
         var
          _V_ =
             /*<<ephemeron.ml:290:6>>*/  /*<<ephemeron.ml:290:6>>*/ caml_call3
              /*<<ephemeron.ml:290:6>>*/ (H[5], c, key, info);
          /*<<ephemeron.ml:302:8>>*/ return _V_ /*<<ephemeron.ml:302:8>>*/ ;
        }
        param = next;
       }
       else{var next$0 = param[3]; param = next$0;}
      }
     }
     catch(_Y_){
      var _W_ = caml_wrap_exception(_Y_);
      if(_W_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_W_, 0);
      var
       container =
          /*<<ephemeron.ml:304:24>>*/  /*<<ephemeron.ml:304:24>>*/ caml_call2
           /*<<ephemeron.ml:304:24>>*/ (H[1], key, info);
       /*<<ephemeron.ml:305:8>>*/ caml_check_bound(h[2], i)[1 + i] = [0, hkey, container, l];
      h[1] = h[1] + 1 | 0;
      var _X_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
      return _X_
              ?  /*<<ephemeron.ml:307:51>>*/ resize
                 /*<<ephemeron.ml:307:51>>*/ (h)
              : _X_ /*<<ephemeron.ml:307:59>>*/ ;
     }
     /*<<ephemeron.ml:307:59>>*/ }
    function mem(h, key){
     var
      hkey =
         /*<<ephemeron.ml:310:17>>*/  /*<<ephemeron.ml:310:17>>*/ caml_call2
          /*<<ephemeron.ml:310:17>>*/ (H[2], h[3], key),
      _U_ =
         /*<<ephemeron.ml:320:28>>*/  /*<<ephemeron.ml:320:28>>*/ key_index
          /*<<ephemeron.ml:320:28>>*/ (h, hkey),
      param = caml_check_bound(h[2], _U_)[1 + _U_];
      /*<<ephemeron.ml:311:30>>*/ for(;;){
      if(! param)
        /*<<ephemeron.ml:313:10>>*/ return 0 /*<<ephemeron.ml:313:10>>*/ ;
      var hk = param[1], rest = param[3], c = param[2];
      if(hk === hkey){
       if
        (!
          /*<<ephemeron.ml:315:22>>*/ caml_call2
           /*<<ephemeron.ml:315:22>>*/ (H[3], c, key))
         /*<<ephemeron.ml:316:21>>*/ return 1 /*<<ephemeron.ml:316:21>>*/ ;
       param = rest;
      }
      else{var rest$0 = param[3]; param = rest$0;}
     }
     /*<<ephemeron.ml:320:45>>*/ }
    function length(h){
      /*<<ephemeron.ml:322:19>>*/ return h[1];
     /*<<ephemeron.ml:322:25>>*/ }
    function bucket_length(accu, param){
     var accu$0 = accu, param$0 = param;
      /*<<ephemeron.ml:324:26>>*/ for(;;){
      if(! param$0)
        /*<<ephemeron.ml:325:17>>*/ return accu$0 /*<<ephemeron.ml:325:17>>*/ ;
      var
       rest = param$0[3],
       accu$1 =  /*<<ephemeron.ml:326:28>>*/ accu$0 + 1 | 0;
      accu$0 = accu$1;
      param$0 = rest;
     }
     /*<<ephemeron.ml:326:57>>*/ }
    function stats(h){
     var
      mbl =
         /*<<ephemeron.ml:330:8>>*/  /*<<ephemeron.ml:330:8>>*/ caml_call3
          /*<<ephemeron.ml:330:8>>*/ (Stdlib_Array[18],
          function(m, b){
           var
            _T_ =
               /*<<ephemeron.ml:330:46>>*/  /*<<ephemeron.ml:330:46>>*/ bucket_length
                /*<<ephemeron.ml:330:46>>*/ (0, b);
            /*<<ephemeron.ml:330:46>>*/ return  /*<<ephemeron.ml:330:46>>*/ caml_call2
                    /*<<ephemeron.ml:330:46>>*/ (Stdlib_Int[11], m, _T_) /*<<ephemeron.ml:330:65>>*/ ;
           /*<<ephemeron.ml:330:65>>*/ },
          0,
          h[2]),
      histo =
         /*<<ephemeron.ml:331:18>>*/  /*<<ephemeron.ml:331:18>>*/ caml_make_vect
          /*<<ephemeron.ml:331:18>>*/ (mbl + 1 | 0, 0);
      /*<<ephemeron.ml:332:6>>*/  /*<<ephemeron.ml:332:6>>*/ caml_call2
       /*<<ephemeron.ml:332:6>>*/ (Stdlib_Array[12],
       function(b){
        var
         l =
            /*<<ephemeron.ml:334:19>>*/  /*<<ephemeron.ml:334:19>>*/ bucket_length
             /*<<ephemeron.ml:334:19>>*/ (0, b);
         /*<<ephemeron.ml:335:11>>*/ histo[1 + l] =
         caml_check_bound(histo, l)[1 + l] + 1 | 0;
         /*<<ephemeron.ml:335:11>>*/ return 0 /*<<ephemeron.ml:335:11>>*/ ;
        /*<<ephemeron.ml:335:37>>*/ },
       h[2]);
      /*<<ephemeron.ml:337:6>>*/ return [0, h[1], h[2].length - 1, mbl, histo] /*<<ephemeron.ml:337:6>>*/ ;
     /*<<ephemeron.ml:340:34>>*/ }
    function bucket_length_alive(accu, param){
     var accu$0 = accu, param$0 = param;
      /*<<ephemeron.ml:342:32>>*/ for(;;){
      if(! param$0)
        /*<<ephemeron.ml:343:17>>*/ return accu$0 /*<<ephemeron.ml:343:17>>*/ ;
      var rest = param$0[3], c = param$0[2];
       /*<<ephemeron.ml:344:30>>*/ if
       ( /*<<ephemeron.ml:344:30>>*/ caml_call1
          /*<<ephemeron.ml:344:30>>*/ (H[6], c)){
       var accu$1 = accu$0 + 1 | 0;
       accu$0 = accu$1;
       param$0 = rest;
      }
      else{var rest$0 = param$0[3]; param$0 = rest$0;}
     }
     /*<<ephemeron.ml:346:57>>*/ }
    function stats_alive(h){
     var
      size =  /*<<ephemeron.ml:349:17>>*/ [0, 0],
      mbl =
         /*<<ephemeron.ml:351:8>>*/  /*<<ephemeron.ml:351:8>>*/ caml_call3
          /*<<ephemeron.ml:351:8>>*/ (Stdlib_Array[18],
          function(m, b){
           var
            _S_ =
               /*<<ephemeron.ml:352:32>>*/  /*<<ephemeron.ml:352:32>>*/ bucket_length_alive
                /*<<ephemeron.ml:352:32>>*/ (0, b);
            /*<<ephemeron.ml:352:32>>*/ return  /*<<ephemeron.ml:352:32>>*/ caml_call2
                    /*<<ephemeron.ml:352:32>>*/ (Stdlib_Int[11], m, _S_) /*<<ephemeron.ml:352:57>>*/ ;
           /*<<ephemeron.ml:352:57>>*/ },
          0,
          h[2]),
      histo =
         /*<<ephemeron.ml:354:18>>*/  /*<<ephemeron.ml:354:18>>*/ caml_make_vect
          /*<<ephemeron.ml:354:18>>*/ (mbl + 1 | 0, 0);
      /*<<ephemeron.ml:355:6>>*/  /*<<ephemeron.ml:355:6>>*/ caml_call2
       /*<<ephemeron.ml:355:6>>*/ (Stdlib_Array[12],
       function(b){
        var
         l =
            /*<<ephemeron.ml:357:19>>*/  /*<<ephemeron.ml:357:19>>*/ bucket_length_alive
             /*<<ephemeron.ml:357:19>>*/ (0, b);
        size[1] = size[1] + l | 0;
         /*<<ephemeron.ml:359:11>>*/ histo[1 + l] =
         caml_check_bound(histo, l)[1 + l] + 1 | 0;
         /*<<ephemeron.ml:359:11>>*/ return 0 /*<<ephemeron.ml:359:11>>*/ ;
        /*<<ephemeron.ml:359:37>>*/ },
       h[2]);
      /*<<ephemeron.ml:361:6>>*/ return [0,
             size[1],
             h[2].length - 1,
             mbl,
             histo] /*<<ephemeron.ml:361:6>>*/ ;
     /*<<ephemeron.ml:364:34>>*/ }
    function add_seq(tbl, i){
      /*<<ephemeron.ml:367:6>>*/ return  /*<<ephemeron.ml:367:6>>*/ caml_call2
              /*<<ephemeron.ml:367:6>>*/ (Stdlib_Seq[4],
              function(param){
               var v = param[2], k = param[1];
                /*<<ephemeron.ml:367:29>>*/ return  /*<<ephemeron.ml:367:29>>*/ add
                        /*<<ephemeron.ml:367:29>>*/ (tbl, k, v) /*<<ephemeron.ml:367:41>>*/ ;
               /*<<ephemeron.ml:367:41>>*/ },
              i) /*<<ephemeron.ml:367:43>>*/ ;
     /*<<ephemeron.ml:367:43>>*/ }
    function replace_seq(tbl, i){
      /*<<ephemeron.ml:370:6>>*/ return  /*<<ephemeron.ml:370:6>>*/ caml_call2
              /*<<ephemeron.ml:370:6>>*/ (Stdlib_Seq[4],
              function(param){
               var v = param[2], k = param[1];
                /*<<ephemeron.ml:370:29>>*/ return  /*<<ephemeron.ml:370:29>>*/ replace
                        /*<<ephemeron.ml:370:29>>*/ (tbl, k, v) /*<<ephemeron.ml:370:45>>*/ ;
               /*<<ephemeron.ml:370:45>>*/ },
              i) /*<<ephemeron.ml:370:47>>*/ ;
     /*<<ephemeron.ml:370:47>>*/ }
    function of_seq(i){
     var
      tbl =
         /*<<ephemeron.ml:373:16>>*/  /*<<ephemeron.ml:373:16>>*/ create
          /*<<ephemeron.ml:373:16>>*/ (0, 16);
      /*<<ephemeron.ml:374:6>>*/  /*<<ephemeron.ml:374:6>>*/ replace_seq
       /*<<ephemeron.ml:374:6>>*/ (tbl, i);
      /*<<ephemeron.ml:374:6>>*/ return tbl /*<<ephemeron.ml:374:6>>*/ ;
     /*<<ephemeron.ml:375:9>>*/ }
     /*<<ephemeron.ml:82:4>>*/ return [0,
            create,
            clear,
            reset,
            copy,
            add,
            remove,
            find,
            find_opt,
            find_all,
            replace,
            mem,
            length,
            stats,
            add_seq,
            replace_seq,
            of_seq,
            clean,
            stats_alive] /*<<ephemeron.ml:82:4>>*/ ;
   }
   function create(param){
     /*<<ephemeron.ml:394:30>>*/ return  /*<<ephemeron.ml:394:30>>*/ caml_call1
             /*<<ephemeron.ml:394:30>>*/ (Stdlib_Obj[23][1], 1) /*<<ephemeron.ml:394:45>>*/ ;
    /*<<ephemeron.ml:394:45>>*/ }
   function get_key(t){
    var
     x =
        /*<<ephemeron.ml:396:50>>*/  /*<<ephemeron.ml:396:50>>*/ caml_call2
         /*<<ephemeron.ml:396:50>>*/ (Stdlib_Obj[23][3], t, 0);
     /*<<ephemeron.ml:388:51>>*/ return x /*<<ephemeron.ml:388:51>>*/ ;
    /*<<ephemeron.ml:396:70>>*/ }
   function set_key(t, k){
     /*<<ephemeron.ml:397:44>>*/ return  /*<<ephemeron.ml:397:44>>*/ caml_call3
             /*<<ephemeron.ml:397:44>>*/ (Stdlib_Obj[23][5], t, 0, k) /*<<ephemeron.ml:397:75>>*/ ;
    /*<<ephemeron.ml:397:75>>*/ }
   function check_key(t){
     /*<<ephemeron.ml:398:39>>*/ return  /*<<ephemeron.ml:398:39>>*/ caml_call2
             /*<<ephemeron.ml:398:39>>*/ (Stdlib_Obj[23][7], t, 0) /*<<ephemeron.ml:398:59>>*/ ;
    /*<<ephemeron.ml:398:59>>*/ }
   function get_data(t){
    var
     x =
        /*<<ephemeron.ml:400:51>>*/  /*<<ephemeron.ml:400:51>>*/ caml_call1
         /*<<ephemeron.ml:400:51>>*/ (Stdlib_Obj[23][9], t);
     /*<<ephemeron.ml:388:51>>*/ return x /*<<ephemeron.ml:388:51>>*/ ;
    /*<<ephemeron.ml:400:70>>*/ }
   function set_data(t, d){
     /*<<ephemeron.ml:401:45>>*/ return  /*<<ephemeron.ml:401:45>>*/ caml_call2
             /*<<ephemeron.ml:401:45>>*/ (Stdlib_Obj[23][11], t, d) /*<<ephemeron.ml:401:75>>*/ ;
    /*<<ephemeron.ml:401:75>>*/ }
   function make(key, data){
    var
     eph =
        /*<<ephemeron.ml:405:14>>*/  /*<<ephemeron.ml:405:14>>*/ create
         /*<<ephemeron.ml:405:14>>*/ (0);
     /*<<ephemeron.ml:406:4>>*/  /*<<ephemeron.ml:406:4>>*/ set_data
      /*<<ephemeron.ml:406:4>>*/ (eph, data);
     /*<<ephemeron.ml:407:4>>*/  /*<<ephemeron.ml:407:4>>*/ set_key
      /*<<ephemeron.ml:407:4>>*/ (eph, key);
     /*<<ephemeron.ml:407:4>>*/ return eph /*<<ephemeron.ml:407:4>>*/ ;
    /*<<ephemeron.ml:408:7>>*/ }
   function query(eph, key){
    var
     match =
        /*<<ephemeron.ml:411:10>>*/  /*<<ephemeron.ml:411:10>>*/ get_key
         /*<<ephemeron.ml:411:10>>*/ (eph);
    if(! match)
      /*<<ephemeron.ml:412:14>>*/ return 0 /*<<ephemeron.ml:412:14>>*/ ;
    var k = match[1];
    return k === key
            ?  /*<<ephemeron.ml:413:30>>*/ get_data
               /*<<ephemeron.ml:413:30>>*/ (eph)
            : 0 /*<<ephemeron.ml:414:20>>*/ ;
    /*<<ephemeron.ml:414:20>>*/ }
   function MakeSeeded$0(H){
    function create$0(k, d){
     var
      c =
         /*<<ephemeron.ml:421:16>>*/  /*<<ephemeron.ml:421:16>>*/ create
          /*<<ephemeron.ml:421:16>>*/ (0);
      /*<<ephemeron.ml:422:8>>*/  /*<<ephemeron.ml:422:8>>*/ set_data
       /*<<ephemeron.ml:422:8>>*/ (c, d);
      /*<<ephemeron.ml:423:8>>*/  /*<<ephemeron.ml:423:8>>*/ set_key
       /*<<ephemeron.ml:423:8>>*/ (c, k);
      /*<<ephemeron.ml:423:8>>*/ return c /*<<ephemeron.ml:423:8>>*/ ;
     /*<<ephemeron.ml:424:9>>*/ }
    var seeded_hash = H[2];
    function equal(c, k){
     var
      match =
         /*<<ephemeron.ml:429:14>>*/  /*<<ephemeron.ml:429:14>>*/ get_key
          /*<<ephemeron.ml:429:14>>*/ (c);
     if(! match)
       /*<<ephemeron.ml:430:18>>*/ return 2 /*<<ephemeron.ml:430:18>>*/ ;
     var k$0 = match[1];
      /*<<ephemeron.ml:432:15>>*/ return  /*<<ephemeron.ml:432:15>>*/ caml_call2
               /*<<ephemeron.ml:432:15>>*/ (H[1], k, k$0)
             ? 0
             : 1 /*<<ephemeron.ml:432:76>>*/ ;
     /*<<ephemeron.ml:432:76>>*/ }
    function set_key_data(c, k, d){
      /*<<ephemeron.ml:435:8>>*/  /*<<ephemeron.ml:402:40>>*/ caml_call1
       /*<<ephemeron.ml:402:40>>*/ (Stdlib_Obj[23][12], c);
      /*<<ephemeron.ml:436:8>>*/  /*<<ephemeron.ml:436:8>>*/ set_key
       /*<<ephemeron.ml:436:8>>*/ (c, k);
      /*<<ephemeron.ml:436:8>>*/ return  /*<<ephemeron.ml:436:8>>*/ set_data
              /*<<ephemeron.ml:436:8>>*/ (c, d) /*<<ephemeron.ml:437:20>>*/ ;
     /*<<ephemeron.ml:437:20>>*/ }
     /*<<ephemeron.ml:417:28>>*/ return  /*<<ephemeron.ml:417:28>>*/ MakeSeeded
             /*<<ephemeron.ml:417:28>>*/ ([0,
              create$0,
              seeded_hash,
              equal,
              get_data,
              set_key_data,
              check_key]) /*<<ephemeron.ml:417:28>>*/ ;
   }
   function Make(H){
    var equal = H[1];
    function seeded_hash(seed, x){
      /*<<ephemeron.ml:446:41>>*/ return  /*<<ephemeron.ml:446:41>>*/ caml_call1
              /*<<ephemeron.ml:446:41>>*/ (H[2], x) /*<<ephemeron.ml:446:49>>*/ ;
     /*<<ephemeron.ml:446:49>>*/ }
    var
     include = MakeSeeded$0([0, equal, seeded_hash]),
     _R_ = include[1],
     clear = include[2],
     reset = include[3],
     copy = include[4],
     add = include[5],
     remove = include[6],
     find = include[7],
     find_opt = include[8],
     find_all = include[9],
     replace = include[10],
     mem = include[11],
     length = include[12],
     stats = include[13],
     add_seq = include[14],
     replace_seq = include[15],
     clean = include[17],
     stats_alive = include[18];
    function create(sz){
      /*<<ephemeron.ml:448:20>>*/ return  /*<<ephemeron.ml:448:20>>*/ caml_call2
              /*<<ephemeron.ml:448:20>>*/ (_R_, _a_, sz) /*<<ephemeron.ml:448:43>>*/ ;
     /*<<ephemeron.ml:448:43>>*/ }
    function of_seq(i){
     var
      tbl =
         /*<<ephemeron.ml:448:20>>*/  /*<<ephemeron.ml:448:20>>*/ caml_call2
          /*<<ephemeron.ml:448:20>>*/ (_R_, _a_, 16);
      /*<<ephemeron.ml:451:6>>*/  /*<<ephemeron.ml:451:6>>*/ caml_call2
       /*<<ephemeron.ml:451:6>>*/ (replace_seq, tbl, i);
      /*<<ephemeron.ml:451:6>>*/ return tbl /*<<ephemeron.ml:451:6>>*/ ;
     /*<<ephemeron.ml:452:9>>*/ }
     /*<<ephemeron.ml:442:2>>*/ return [0,
            create,
            clear,
            reset,
            copy,
            add,
            remove,
            find,
            find_opt,
            find_all,
            replace,
            mem,
            length,
            stats,
            add_seq,
            replace_seq,
            of_seq,
            clean,
            stats_alive] /*<<ephemeron.ml:442:2>>*/ ;
   }
   function make$0(param){
     /*<<ephemeron.ml:459:18>>*/ return [0, 0] /*<<ephemeron.ml:459:18>>*/ ;
    /*<<ephemeron.ml:459:24>>*/ }
   function add(b, k, d){
    var _Q_ = b[1];
    b[1] =
     [0,
       /*<<ephemeron.ml:460:25>>*/ make /*<<ephemeron.ml:460:25>>*/ (k, d),
      _Q_];
    return 0;
    /*<<ephemeron.ml:460:42>>*/ }
   function test_key(k, e){
    var
     match =
        /*<<ephemeron.ml:463:12>>*/  /*<<ephemeron.ml:463:12>>*/ get_key
         /*<<ephemeron.ml:463:12>>*/ (e);
    if(match){
     var x = match[1];
     if(x === k)
       /*<<ephemeron.ml:464:30>>*/ return 1 /*<<ephemeron.ml:464:30>>*/ ;
    }
     /*<<ephemeron.ml:465:13>>*/ return 0 /*<<ephemeron.ml:465:13>>*/ ;
    /*<<ephemeron.ml:465:18>>*/ }
   function remove(b, k){
    var l$0 = b[1], l = l$0, acc = 0;
     /*<<ephemeron.ml:469:8>>*/ for(;;){
     if(! l)
       /*<<ephemeron.ml:470:16>>*/ return 0 /*<<ephemeron.ml:470:16>>*/ ;
     var h = l[1], t = l[2];
      /*<<ephemeron.ml:471:22>>*/ if
      ( /*<<ephemeron.ml:471:22>>*/ test_key
         /*<<ephemeron.ml:471:22>>*/ (k, h)){
      b[1] =
        /*<<ephemeron.ml:471:43>>*/ caml_call2
         /*<<ephemeron.ml:471:43>>*/ (Stdlib_List[13], acc, t);
      return 0;
     }
     var t$0 = l[2], acc$0 =  /*<<ephemeron.ml:472:27>>*/ [0, h, acc];
     l = t$0;
     acc = acc$0;
    }
    /*<<ephemeron.ml:474:16>>*/ }
   function find(b, k){
    var
     match =
        /*<<ephemeron.ml:477:12>>*/  /*<<ephemeron.ml:477:12>>*/ caml_call2
         /*<<ephemeron.ml:477:12>>*/ (Stdlib_List[40],
         function(_P_){ /*<<?>>*/ return test_key(k, _P_);},
         b[1]);
    if(! match)
      /*<<ephemeron.ml:479:16>>*/ return 0 /*<<ephemeron.ml:479:16>>*/ ;
    var e = match[1];
     /*<<ephemeron.ml:478:18>>*/ return  /*<<ephemeron.ml:478:18>>*/ get_data
             /*<<ephemeron.ml:478:18>>*/ (e) /*<<ephemeron.ml:479:20>>*/ ;
    /*<<ephemeron.ml:479:20>>*/ }
   function length(b){
     /*<<ephemeron.ml:481:19>>*/ return caml_call1(Stdlib_List[1], b[1]) /*<<ephemeron.ml:481:33>>*/ ;
    /*<<ephemeron.ml:481:33>>*/ }
   function clear(b){
     /*<<ephemeron.ml:482:18>>*/ b[1] = 0;
    return 0;
    /*<<ephemeron.ml:482:25>>*/ }
   function create$0(param){
     /*<<ephemeron.ml:491:35>>*/ return  /*<<ephemeron.ml:491:35>>*/ caml_call1
             /*<<ephemeron.ml:491:35>>*/ (Stdlib_Obj[23][1], 2) /*<<ephemeron.ml:491:50>>*/ ;
    /*<<ephemeron.ml:491:50>>*/ }
   function get_key1(t){
    var
     x =
        /*<<ephemeron.ml:493:57>>*/  /*<<ephemeron.ml:493:57>>*/ caml_call2
         /*<<ephemeron.ml:493:57>>*/ (Stdlib_Obj[23][3], t, 0);
     /*<<ephemeron.ml:388:51>>*/ return x /*<<ephemeron.ml:388:51>>*/ ;
    /*<<ephemeron.ml:493:77>>*/ }
   function set_key1(t, k){
     /*<<ephemeron.ml:495:4>>*/ return  /*<<ephemeron.ml:495:4>>*/ caml_call3
             /*<<ephemeron.ml:495:4>>*/ (Stdlib_Obj[23][5], t, 0, k) /*<<ephemeron.ml:495:35>>*/ ;
    /*<<ephemeron.ml:495:35>>*/ }
   function get_key2(t){
    var
     x =
        /*<<ephemeron.ml:498:57>>*/  /*<<ephemeron.ml:498:57>>*/ caml_call2
         /*<<ephemeron.ml:498:57>>*/ (Stdlib_Obj[23][3], t, 1);
     /*<<ephemeron.ml:388:51>>*/ return x /*<<ephemeron.ml:388:51>>*/ ;
    /*<<ephemeron.ml:498:77>>*/ }
   function set_key2(t, k){
     /*<<ephemeron.ml:500:4>>*/ return  /*<<ephemeron.ml:500:4>>*/ caml_call3
             /*<<ephemeron.ml:500:4>>*/ (Stdlib_Obj[23][5], t, 1, k) /*<<ephemeron.ml:500:35>>*/ ;
    /*<<ephemeron.ml:500:35>>*/ }
   function get_data$0(t){
    var
     x =
        /*<<ephemeron.ml:503:56>>*/  /*<<ephemeron.ml:503:56>>*/ caml_call1
         /*<<ephemeron.ml:503:56>>*/ (Stdlib_Obj[23][9], t);
     /*<<ephemeron.ml:388:51>>*/ return x /*<<ephemeron.ml:388:51>>*/ ;
    /*<<ephemeron.ml:503:75>>*/ }
   function set_data$0(t, d){
     /*<<ephemeron.ml:505:4>>*/ return  /*<<ephemeron.ml:505:4>>*/ caml_call2
             /*<<ephemeron.ml:505:4>>*/ (Stdlib_Obj[23][11], t, d) /*<<ephemeron.ml:505:34>>*/ ;
    /*<<ephemeron.ml:505:34>>*/ }
   function make$1(key1, key2, data){
    var
     eph =
        /*<<ephemeron.ml:509:14>>*/  /*<<ephemeron.ml:509:14>>*/ create$0
         /*<<ephemeron.ml:509:14>>*/ (0);
     /*<<ephemeron.ml:510:4>>*/  /*<<ephemeron.ml:510:4>>*/ set_data$0
      /*<<ephemeron.ml:510:4>>*/ (eph, data);
     /*<<ephemeron.ml:511:4>>*/  /*<<ephemeron.ml:511:4>>*/ set_key1
      /*<<ephemeron.ml:511:4>>*/ (eph, key1);
     /*<<ephemeron.ml:512:4>>*/  /*<<ephemeron.ml:512:4>>*/ set_key2
      /*<<ephemeron.ml:512:4>>*/ (eph, key2);
     /*<<ephemeron.ml:514:4>>*/ return eph /*<<ephemeron.ml:514:4>>*/ ;
    /*<<ephemeron.ml:514:7>>*/ }
   function query$0(eph, key1, key2){
    var
     match =
        /*<<ephemeron.ml:517:10>>*/  /*<<ephemeron.ml:517:10>>*/ get_key1
         /*<<ephemeron.ml:517:10>>*/ (eph);
    if(! match)
      /*<<ephemeron.ml:518:14>>*/ return 0 /*<<ephemeron.ml:518:14>>*/ ;
    var k = match[1];
    if(k !== key1)
      /*<<ephemeron.ml:525:16>>*/ return 0 /*<<ephemeron.ml:525:16>>*/ ;
    var
     match$0 =
        /*<<ephemeron.ml:520:20>>*/  /*<<ephemeron.ml:520:20>>*/ get_key2
         /*<<ephemeron.ml:520:20>>*/ (eph);
    if(! match$0)
      /*<<ephemeron.ml:521:18>>*/ return 0 /*<<ephemeron.ml:521:18>>*/ ;
    var k$0 = match$0[1];
    return k$0 === key2
            ?  /*<<ephemeron.ml:522:35>>*/ get_data$0
               /*<<ephemeron.ml:522:35>>*/ (eph)
            : 0 /*<<ephemeron.ml:525:20>>*/ ;
    /*<<ephemeron.ml:525:20>>*/ }
   function MakeSeeded$1(H1, H2){
    function create(param, d){
     var
      k2 = param[2],
      k1 = param[1],
      c =
         /*<<ephemeron.ml:534:16>>*/  /*<<ephemeron.ml:534:16>>*/ create$0
          /*<<ephemeron.ml:534:16>>*/ (0);
      /*<<ephemeron.ml:535:8>>*/  /*<<ephemeron.ml:535:8>>*/ set_data$0
       /*<<ephemeron.ml:535:8>>*/ (c, d);
      /*<<ephemeron.ml:536:8>>*/  /*<<ephemeron.ml:536:8>>*/ set_key1
       /*<<ephemeron.ml:536:8>>*/ (c, k1);
      /*<<ephemeron.ml:536:23>>*/  /*<<ephemeron.ml:536:23>>*/ set_key2
       /*<<ephemeron.ml:536:23>>*/ (c, k2);
      /*<<ephemeron.ml:536:23>>*/ return c /*<<ephemeron.ml:536:23>>*/ ;
     /*<<ephemeron.ml:537:9>>*/ }
    function seeded_hash(seed, param){
     var
      k2 = param[2],
      k1 = param[1],
      _O_ =
         /*<<ephemeron.ml:539:33>>*/  /*<<ephemeron.ml:539:33>>*/ caml_call2
          /*<<ephemeron.ml:539:33>>*/ (H2[2], seed, k2)
        * 65599
        | 0;
      /*<<ephemeron.ml:539:8>>*/ return  /*<<ephemeron.ml:539:8>>*/ caml_call2
              /*<<ephemeron.ml:539:8>>*/ (H1[2], seed, k1)
            + _O_
            | 0 /*<<ephemeron.ml:539:8>>*/ ;
     /*<<ephemeron.ml:539:63>>*/ }
    function equal(c, param){
     var
      k2 = param[2],
      k1 = param[1],
      match =
         /*<<ephemeron.ml:541:14>>*/  /*<<ephemeron.ml:541:14>>*/ get_key1
          /*<<ephemeron.ml:541:14>>*/ (c),
      match$0 =
         /*<<ephemeron.ml:541:26>>*/  /*<<ephemeron.ml:541:26>>*/ get_key2
          /*<<ephemeron.ml:541:26>>*/ (c);
     if(match && match$0){
      var k2$0 = match$0[1], k1$0 = match[1];
       /*<<ephemeron.ml:544:15>>*/ if
       ( /*<<ephemeron.ml:544:15>>*/ caml_call2
          /*<<ephemeron.ml:544:15>>*/ (H1[1], k1, k1$0)
        &&
          /*<<ephemeron.ml:544:34>>*/ caml_call2
           /*<<ephemeron.ml:544:34>>*/ (H2[1], k2, k2$0))
        /*<<ephemeron.ml:545:17>>*/ return 0 /*<<ephemeron.ml:545:17>>*/ ;
       /*<<ephemeron.ml:545:41>>*/ return 1 /*<<ephemeron.ml:545:41>>*/ ;
     }
      /*<<ephemeron.ml:542:32>>*/ return 2 /*<<ephemeron.ml:542:32>>*/ ;
     /*<<ephemeron.ml:545:60>>*/ }
    function set_key_data(c, param, d){
     var k2 = param[2], k1 = param[1];
      /*<<ephemeron.ml:506:45>>*/  /*<<ephemeron.ml:506:45>>*/ caml_call1
       /*<<ephemeron.ml:506:45>>*/ (Stdlib_Obj[23][12], c);
      /*<<ephemeron.ml:549:8>>*/  /*<<ephemeron.ml:549:8>>*/ set_key1
       /*<<ephemeron.ml:549:8>>*/ (c, k1);
      /*<<ephemeron.ml:549:23>>*/  /*<<ephemeron.ml:549:23>>*/ set_key2
       /*<<ephemeron.ml:549:23>>*/ (c, k2);
      /*<<ephemeron.ml:549:23>>*/ return  /*<<ephemeron.ml:549:23>>*/ set_data$0
              /*<<ephemeron.ml:549:23>>*/ (c, d) /*<<ephemeron.ml:550:20>>*/ ;
     /*<<ephemeron.ml:550:20>>*/ }
    function check_key(c){
     var
      _N_ =
         /*<<ephemeron.ml:496:45>>*/  /*<<ephemeron.ml:496:45>>*/ caml_call2
          /*<<ephemeron.ml:496:45>>*/ (Stdlib_Obj[23][7], c, 0);
      /*<<ephemeron.ml:551:24>>*/ return _N_
             ?  /*<<ephemeron.ml:501:45>>*/ caml_call2
                /*<<ephemeron.ml:501:45>>*/ (Stdlib_Obj[23][7], c, 1)
             : _N_ /*<<ephemeron.ml:551:52>>*/ ;
     /*<<ephemeron.ml:551:52>>*/ }
     /*<<ephemeron.ml:530:28>>*/ return  /*<<ephemeron.ml:530:28>>*/ MakeSeeded
             /*<<ephemeron.ml:530:28>>*/ ([0,
              create,
              seeded_hash,
              equal,
              get_data$0,
              set_key_data,
              check_key]) /*<<ephemeron.ml:530:28>>*/ ;
   }
   function Make$0(H1, H2){
    var equal = H2[1];
    function seeded_hash(seed, x){
      /*<<ephemeron.ml:566:43>>*/ return  /*<<ephemeron.ml:566:43>>*/ caml_call1
              /*<<ephemeron.ml:566:43>>*/ (H2[2], x) /*<<ephemeron.ml:566:52>>*/ ;
     /*<<ephemeron.ml:566:52>>*/ }
    var equal$0 = H1[1];
    function seeded_hash$0(seed, x){
      /*<<ephemeron.ml:561:43>>*/ return  /*<<ephemeron.ml:561:43>>*/ caml_call1
              /*<<ephemeron.ml:561:43>>*/ (H1[2], x) /*<<ephemeron.ml:561:52>>*/ ;
     /*<<ephemeron.ml:561:52>>*/ }
    var
     include =
       MakeSeeded$1([0, equal$0, seeded_hash$0], [0, equal, seeded_hash]),
     _M_ = include[1],
     clear = include[2],
     reset = include[3],
     copy = include[4],
     add = include[5],
     remove = include[6],
     find = include[7],
     find_opt = include[8],
     find_all = include[9],
     replace = include[10],
     mem = include[11],
     length = include[12],
     stats = include[13],
     add_seq = include[14],
     replace_seq = include[15],
     clean = include[17],
     stats_alive = include[18];
    function create(sz){
      /*<<ephemeron.ml:568:20>>*/ return  /*<<ephemeron.ml:568:20>>*/ caml_call2
              /*<<ephemeron.ml:568:20>>*/ (_M_, _b_, sz) /*<<ephemeron.ml:568:43>>*/ ;
     /*<<ephemeron.ml:568:43>>*/ }
    function of_seq(i){
     var
      tbl =
         /*<<ephemeron.ml:568:20>>*/  /*<<ephemeron.ml:568:20>>*/ caml_call2
          /*<<ephemeron.ml:568:20>>*/ (_M_, _b_, 16);
      /*<<ephemeron.ml:571:6>>*/  /*<<ephemeron.ml:571:6>>*/ caml_call2
       /*<<ephemeron.ml:571:6>>*/ (replace_seq, tbl, i);
      /*<<ephemeron.ml:571:6>>*/ return tbl /*<<ephemeron.ml:571:6>>*/ ;
     /*<<ephemeron.ml:572:9>>*/ }
     /*<<ephemeron.ml:556:2>>*/ return [0,
            create,
            clear,
            reset,
            copy,
            add,
            remove,
            find,
            find_opt,
            find_all,
            replace,
            mem,
            length,
            stats,
            add_seq,
            replace_seq,
            of_seq,
            clean,
            stats_alive] /*<<ephemeron.ml:556:2>>*/ ;
   }
   function make$2(param){
     /*<<ephemeron.ml:579:18>>*/ return [0, 0] /*<<ephemeron.ml:579:18>>*/ ;
    /*<<ephemeron.ml:579:24>>*/ }
   function add$0(b, k1, k2, d){
    var _L_ = b[1];
    b[1] =
     [0,
       /*<<ephemeron.ml:580:29>>*/ make$1
        /*<<ephemeron.ml:580:29>>*/ (k1, k2, d),
      _L_];
    return 0;
    /*<<ephemeron.ml:580:50>>*/ }
   function test_keys(k1, k2, e){
    var
     match =
        /*<<ephemeron.ml:583:12>>*/  /*<<ephemeron.ml:583:12>>*/ get_key1
         /*<<ephemeron.ml:583:12>>*/ (e),
     match$0 =
        /*<<ephemeron.ml:583:24>>*/  /*<<ephemeron.ml:583:24>>*/ get_key2
         /*<<ephemeron.ml:583:24>>*/ (e);
    if(match && match$0){
     var x2 = match$0[1], x1 = match[1];
     if(x1 === k1 && x2 === k2)
       /*<<ephemeron.ml:584:54>>*/ return 1 /*<<ephemeron.ml:584:54>>*/ ;
    }
     /*<<ephemeron.ml:585:13>>*/ return 0 /*<<ephemeron.ml:585:13>>*/ ;
    /*<<ephemeron.ml:585:18>>*/ }
   function remove$0(b, k1, k2){
    var l$0 = b[1], l = l$0, acc = 0;
     /*<<ephemeron.ml:589:8>>*/ for(;;){
     if(! l)
       /*<<ephemeron.ml:590:16>>*/ return 0 /*<<ephemeron.ml:590:16>>*/ ;
     var h = l[1], t = l[2];
      /*<<ephemeron.ml:591:22>>*/ if
      ( /*<<ephemeron.ml:591:22>>*/ test_keys
         /*<<ephemeron.ml:591:22>>*/ (k1, k2, h)){
      b[1] =
        /*<<ephemeron.ml:591:48>>*/ caml_call2
         /*<<ephemeron.ml:591:48>>*/ (Stdlib_List[13], acc, t);
      return 0;
     }
     var t$0 = l[2], acc$0 =  /*<<ephemeron.ml:592:27>>*/ [0, h, acc];
     l = t$0;
     acc = acc$0;
    }
    /*<<ephemeron.ml:594:16>>*/ }
   function find$0(b, k1, k2){
    var
     match =
        /*<<ephemeron.ml:597:12>>*/  /*<<ephemeron.ml:597:12>>*/ caml_call2
         /*<<ephemeron.ml:597:12>>*/ (Stdlib_List[40],
         function(_K_){ /*<<?>>*/ return test_keys(k1, k2, _K_);},
         b[1]);
    if(! match)
      /*<<ephemeron.ml:599:16>>*/ return 0 /*<<ephemeron.ml:599:16>>*/ ;
    var e = match[1];
     /*<<ephemeron.ml:598:18>>*/ return  /*<<ephemeron.ml:598:18>>*/ get_data$0
             /*<<ephemeron.ml:598:18>>*/ (e) /*<<ephemeron.ml:599:20>>*/ ;
    /*<<ephemeron.ml:599:20>>*/ }
   function length$0(b){
     /*<<ephemeron.ml:601:19>>*/ return caml_call1(Stdlib_List[1], b[1]) /*<<ephemeron.ml:601:33>>*/ ;
    /*<<ephemeron.ml:601:33>>*/ }
   function clear$0(b){
     /*<<ephemeron.ml:602:18>>*/ b[1] = 0;
    return 0;
    /*<<ephemeron.ml:602:25>>*/ }
   function create$1(n){
     /*<<ephemeron.ml:611:29>>*/ return  /*<<ephemeron.ml:611:29>>*/ caml_call1
             /*<<ephemeron.ml:611:29>>*/ (Stdlib_Obj[23][1], n) /*<<ephemeron.ml:611:44>>*/ ;
    /*<<ephemeron.ml:611:44>>*/ }
   function length$1(k){
     /*<<ephemeron.ml:612:35>>*/ return  /*<<ephemeron.ml:612:35>>*/ caml_call1
             /*<<ephemeron.ml:612:35>>*/ (Stdlib_Obj[23][2], k) /*<<ephemeron.ml:612:50>>*/ ;
    /*<<ephemeron.ml:612:50>>*/ }
   function get_key$0(t, n){
    var
     x =
        /*<<ephemeron.ml:614:58>>*/  /*<<ephemeron.ml:614:58>>*/ caml_call2
         /*<<ephemeron.ml:614:58>>*/ (Stdlib_Obj[23][3], t, n);
     /*<<ephemeron.ml:388:51>>*/ return x /*<<ephemeron.ml:388:51>>*/ ;
    /*<<ephemeron.ml:614:78>>*/ }
   function set_key$0(t, n, k){
     /*<<ephemeron.ml:616:4>>*/ return  /*<<ephemeron.ml:616:4>>*/ caml_call3
             /*<<ephemeron.ml:616:4>>*/ (Stdlib_Obj[23][5], t, n, k) /*<<ephemeron.ml:616:35>>*/ ;
    /*<<ephemeron.ml:616:35>>*/ }
   function get_data$1(t){
    var
     x =
        /*<<ephemeron.ml:619:51>>*/  /*<<ephemeron.ml:619:51>>*/ caml_call1
         /*<<ephemeron.ml:619:51>>*/ (Stdlib_Obj[23][9], t);
     /*<<ephemeron.ml:388:51>>*/ return x /*<<ephemeron.ml:388:51>>*/ ;
    /*<<ephemeron.ml:619:70>>*/ }
   function set_data$1(t, d){
     /*<<ephemeron.ml:620:45>>*/ return  /*<<ephemeron.ml:620:45>>*/ caml_call2
             /*<<ephemeron.ml:620:45>>*/ (Stdlib_Obj[23][11], t, d) /*<<ephemeron.ml:620:75>>*/ ;
    /*<<ephemeron.ml:620:75>>*/ }
   function make$3(keys, data){
    var
     l = keys.length - 1,
     eph =
        /*<<ephemeron.ml:625:14>>*/  /*<<ephemeron.ml:625:14>>*/ create$1
         /*<<ephemeron.ml:625:14>>*/ (l);
     /*<<ephemeron.ml:626:4>>*/  /*<<ephemeron.ml:626:4>>*/ set_data$1
      /*<<ephemeron.ml:626:4>>*/ (eph, data);
    var _I_ = l - 1 | 0, _H_ =  /*<<ephemeron.ml:626:4>>*/ 0;
    if(_I_ >= 0){
     var i = _H_;
     for(;;){
       /*<<ephemeron.ml:627:26>>*/  /*<<ephemeron.ml:627:26>>*/ set_key$0
        /*<<ephemeron.ml:627:26>>*/ (eph, i, caml_check_bound(keys, i)[1 + i]);
      var _J_ =  /*<<ephemeron.ml:627:26>>*/ i + 1 | 0;
      if(_I_ === i) break;
      i = _J_;
     }
    }
     /*<<ephemeron.ml:628:4>>*/ return eph /*<<ephemeron.ml:628:4>>*/ ;
    /*<<ephemeron.ml:628:7>>*/ }
   function query$1(eph, keys){
    var
     l =
        /*<<ephemeron.ml:631:12>>*/  /*<<ephemeron.ml:631:12>>*/ length$1
         /*<<ephemeron.ml:631:12>>*/ (eph);
     /*<<ephemeron.ml:632:4>>*/ try{
     if(l !== keys.length - 1)
       /*<<ephemeron.ml:633:37>>*/ throw  /*<<ephemeron.ml:633:37>>*/ caml_maybe_attach_backtrace
              /*<<ephemeron.ml:633:37>>*/ (Stdlib[3], 1);
     var
      _D_ =  /*<<ephemeron.ml:631:12>>*/ l - 1 | 0,
      _C_ =  /*<<ephemeron.ml:634:6>>*/ 0;
     if(_D_ >= 0){
      var i = _C_;
      for(;;){
       var
        match =
           /*<<ephemeron.ml:635:14>>*/  /*<<ephemeron.ml:635:14>>*/ get_key$0
            /*<<ephemeron.ml:635:14>>*/ (eph, i);
       if(! match)
         /*<<ephemeron.ml:636:18>>*/ throw  /*<<ephemeron.ml:636:18>>*/ caml_maybe_attach_backtrace
                /*<<ephemeron.ml:636:18>>*/ (Stdlib[3], 1);
       var k = match[1];
       if(k !== caml_check_bound(keys, i)[1 + i])
         /*<<ephemeron.ml:638:20>>*/ throw  /*<<ephemeron.ml:638:20>>*/ caml_maybe_attach_backtrace
                /*<<ephemeron.ml:638:20>>*/ (Stdlib[3], 1);
       var _F_ =  /*<<ephemeron.ml:634:6>>*/ i + 1 | 0;
       if(_D_ === i) break;
       i = _F_;
      }
     }
     var
      _E_ =
         /*<<ephemeron.ml:640:6>>*/  /*<<ephemeron.ml:640:6>>*/ get_data$1
          /*<<ephemeron.ml:640:6>>*/ (eph);
      /*<<ephemeron.ml:640:6>>*/ return _E_ /*<<ephemeron.ml:640:6>>*/ ;
    }
    catch(_G_){
     var _B_ = caml_wrap_exception(_G_);
     if(_B_ === Stdlib[3])
       /*<<ephemeron.ml:641:17>>*/ return 0 /*<<ephemeron.ml:641:17>>*/ ;
     throw caml_maybe_attach_backtrace(_B_, 0);
    }
    /*<<ephemeron.ml:641:21>>*/ }
   function MakeSeeded$2(H){
    function create(k, d){
     var
      c =
         /*<<ephemeron.ml:648:16>>*/  /*<<ephemeron.ml:648:16>>*/ create$1
          /*<<ephemeron.ml:648:16>>*/ (k.length - 1);
      /*<<ephemeron.ml:649:8>>*/  /*<<ephemeron.ml:649:8>>*/ set_data$1
       /*<<ephemeron.ml:649:8>>*/ (c, d);
     var _z_ = k.length - 2 | 0, _y_ =  /*<<ephemeron.ml:649:8>>*/ 0;
     if(_z_ >= 0){
      var i = _y_;
      for(;;){
        /*<<ephemeron.ml:651:10>>*/  /*<<ephemeron.ml:651:10>>*/ set_key$0
         /*<<ephemeron.ml:651:10>>*/ (c, i, caml_check_bound(k, i)[1 + i]);
       var _A_ =  /*<<ephemeron.ml:651:10>>*/ i + 1 | 0;
       if(_z_ === i) break;
       i = _A_;
      }
     }
      /*<<ephemeron.ml:653:8>>*/ return c /*<<ephemeron.ml:653:8>>*/ ;
     /*<<ephemeron.ml:653:9>>*/ }
    function seeded_hash(seed, k){
     var
      h =  /*<<ephemeron.ml:655:16>>*/ [0, 0],
      _u_ = k.length - 2 | 0,
      _t_ =  /*<<ephemeron.ml:655:16>>*/ 0;
     if(_u_ >= 0){
      var i = _t_;
      for(;;){
       var
        _v_ = h[1],
        _w_ =  /*<<ephemeron.ml:657:34>>*/ caml_check_bound(k, i)[1 + i];
       h[1] =
        ( /*<<ephemeron.ml:657:15>>*/ caml_call2
          /*<<ephemeron.ml:657:15>>*/ (H[2], seed, _w_)
        * 65599
        | 0)
        + _v_
        | 0;
       var _x_ =  /*<<ephemeron.ml:656:8>>*/ i + 1 | 0;
       if(_u_ === i) break;
       i = _x_;
      }
     }
     return h[1];
     /*<<ephemeron.ml:659:10>>*/ }
    function equal(c, k){
     var
      len = k.length - 1,
      len$0 =
         /*<<ephemeron.ml:662:19>>*/  /*<<ephemeron.ml:662:19>>*/ length$1
          /*<<ephemeron.ml:662:19>>*/ (c);
     if(len !== len$0)
       /*<<ephemeron.ml:663:28>>*/ return 1 /*<<ephemeron.ml:663:28>>*/ ;
     var i$1 =  /*<<ephemeron.ml:675:10>>*/ len - 1 | 0, i = i$1;
      /*<<ephemeron.ml:666:12>>*/ for(;;){
      if(0 > i)
        /*<<ephemeron.ml:666:26>>*/ return 0 /*<<ephemeron.ml:666:26>>*/ ;
      var
       match =
          /*<<ephemeron.ml:668:20>>*/  /*<<ephemeron.ml:668:20>>*/ get_key$0
           /*<<ephemeron.ml:668:20>>*/ (c, i);
      if(! match)
        /*<<ephemeron.ml:669:24>>*/ return 2 /*<<ephemeron.ml:669:24>>*/ ;
      var
       ki = match[1],
       _s_ =  /*<<ephemeron.ml:671:29>>*/ caml_check_bound(k, i)[1 + i];
       /*<<ephemeron.ml:671:21>>*/ if
       (!
         /*<<ephemeron.ml:671:21>>*/ caml_call2
          /*<<ephemeron.ml:671:21>>*/ (H[1], _s_, ki))
        /*<<ephemeron.ml:673:23>>*/ return 1 /*<<ephemeron.ml:673:23>>*/ ;
      var i$0 =  /*<<ephemeron.ml:672:23>>*/ i - 1 | 0;
      i = i$0;
     }
     /*<<ephemeron.ml:675:33>>*/ }
    function set_key_data(c, k, d){
      /*<<ephemeron.ml:678:8>>*/  /*<<ephemeron.ml:621:40>>*/ caml_call1
       /*<<ephemeron.ml:621:40>>*/ (Stdlib_Obj[23][12], c);
     var _q_ = k.length - 2 | 0, _p_ =  /*<<ephemeron.ml:678:8>>*/ 0;
     if(_q_ >= 0){
      var i = _p_;
      for(;;){
        /*<<ephemeron.ml:680:10>>*/  /*<<ephemeron.ml:680:10>>*/ set_key$0
         /*<<ephemeron.ml:680:10>>*/ (c, i, caml_check_bound(k, i)[1 + i]);
       var _r_ =  /*<<ephemeron.ml:680:10>>*/ i + 1 | 0;
       if(_q_ === i) break;
       i = _r_;
      }
     }
      /*<<ephemeron.ml:682:8>>*/ return  /*<<ephemeron.ml:682:8>>*/ set_data$1
              /*<<ephemeron.ml:682:8>>*/ (c, d) /*<<ephemeron.ml:682:20>>*/ ;
     /*<<ephemeron.ml:682:20>>*/ }
    function check_key(c){
     var
      i$1 =
         /*<<ephemeron.ml:686:17>>*/  /*<<ephemeron.ml:686:17>>*/ length$1
          /*<<ephemeron.ml:686:17>>*/ (c)
        - 1
        | 0,
      i = i$1;
      /*<<ephemeron.ml:685:10>>*/ for(;;){
      var _n_ = i < 0 ? 1 : 0;
      if(_n_)
       var _o_ = _n_;
      else{
       var
        _m_ =
           /*<<ephemeron.ml:617:47>>*/  /*<<ephemeron.ml:617:47>>*/ caml_call2
            /*<<ephemeron.ml:617:47>>*/ (Stdlib_Obj[23][7], c, i);
        /*<<ephemeron.ml:685:20>>*/ if(_m_){
        var i$0 = i - 1 | 0;
        i = i$0;
        continue;
       }
       var _o_ = _m_;
      }
      return _o_;
     }
     /*<<ephemeron.ml:686:30>>*/ }
     /*<<ephemeron.ml:644:28>>*/ return  /*<<ephemeron.ml:644:28>>*/ MakeSeeded
             /*<<ephemeron.ml:644:28>>*/ ([0,
              create,
              seeded_hash,
              equal,
              get_data$1,
              set_key_data,
              check_key]) /*<<ephemeron.ml:644:28>>*/ ;
   }
   function Make$1(H){
    var equal = H[1];
    function seeded_hash(seed, x){
      /*<<ephemeron.ml:694:41>>*/ return  /*<<ephemeron.ml:694:41>>*/ caml_call1
              /*<<ephemeron.ml:694:41>>*/ (H[2], x) /*<<ephemeron.ml:694:49>>*/ ;
     /*<<ephemeron.ml:694:49>>*/ }
    var
     include = MakeSeeded$2([0, equal, seeded_hash]),
     _l_ = include[1],
     clear = include[2],
     reset = include[3],
     copy = include[4],
     add = include[5],
     remove = include[6],
     find = include[7],
     find_opt = include[8],
     find_all = include[9],
     replace = include[10],
     mem = include[11],
     length = include[12],
     stats = include[13],
     add_seq = include[14],
     replace_seq = include[15],
     clean = include[17],
     stats_alive = include[18];
    function create(sz){
      /*<<ephemeron.ml:696:20>>*/ return  /*<<ephemeron.ml:696:20>>*/ caml_call2
              /*<<ephemeron.ml:696:20>>*/ (_l_, _c_, sz) /*<<ephemeron.ml:696:43>>*/ ;
     /*<<ephemeron.ml:696:43>>*/ }
    function of_seq(i){
     var
      tbl =
         /*<<ephemeron.ml:696:20>>*/  /*<<ephemeron.ml:696:20>>*/ caml_call2
          /*<<ephemeron.ml:696:20>>*/ (_l_, _c_, 16);
      /*<<ephemeron.ml:699:6>>*/  /*<<ephemeron.ml:699:6>>*/ caml_call2
       /*<<ephemeron.ml:699:6>>*/ (replace_seq, tbl, i);
      /*<<ephemeron.ml:699:6>>*/ return tbl /*<<ephemeron.ml:699:6>>*/ ;
     /*<<ephemeron.ml:700:9>>*/ }
     /*<<ephemeron.ml:690:2>>*/ return [0,
            create,
            clear,
            reset,
            copy,
            add,
            remove,
            find,
            find_opt,
            find_all,
            replace,
            mem,
            length,
            stats,
            add_seq,
            replace_seq,
            of_seq,
            clean,
            stats_alive] /*<<ephemeron.ml:690:2>>*/ ;
   }
   function make$4(param){
     /*<<ephemeron.ml:707:18>>*/ return [0, 0] /*<<ephemeron.ml:707:18>>*/ ;
    /*<<ephemeron.ml:707:24>>*/ }
   function add$1(b, k, d){
    var _k_ = b[1];
    b[1] =
     [0,
       /*<<ephemeron.ml:708:25>>*/ make$3 /*<<ephemeron.ml:708:25>>*/ (k, d),
      _k_];
    return 0;
    /*<<ephemeron.ml:708:42>>*/ }
   function test_keys$0(k, e){
     /*<<ephemeron.ml:711:6>>*/ try{
     if
      ( /*<<ephemeron.ml:712:11>>*/ length$1 /*<<ephemeron.ml:712:11>>*/ (e)
       !== k.length - 1)
       /*<<ephemeron.ml:712:43>>*/ throw  /*<<ephemeron.ml:712:43>>*/ caml_maybe_attach_backtrace
              /*<<ephemeron.ml:712:43>>*/ (Stdlib[3], 1);
     var _g_ = k.length - 2 | 0, _f_ =  /*<<ephemeron.ml:713:8>>*/ 0;
     if(_g_ >= 0){
      var i = _f_;
      for(;;){
       var
        match =
           /*<<ephemeron.ml:714:16>>*/  /*<<ephemeron.ml:714:16>>*/ get_key$0
            /*<<ephemeron.ml:714:16>>*/ (e, i);
       if(match){
        var x = match[1];
        if(x === caml_check_bound(k, i)[1 + i]){
         var _i_ =  /*<<ephemeron.ml:713:8>>*/ i + 1 | 0;
         if(_g_ === i) break;
         i = _i_;
         continue;
        }
       }
        /*<<ephemeron.ml:716:17>>*/ throw  /*<<ephemeron.ml:716:17>>*/ caml_maybe_attach_backtrace
               /*<<ephemeron.ml:716:17>>*/ (Stdlib[3], 1);
      }
     }
     var _h_ =  /*<<ephemeron.ml:718:8>>*/ 1;
      /*<<ephemeron.ml:718:8>>*/ return _h_ /*<<ephemeron.ml:718:8>>*/ ;
    }
    catch(_j_){
     var _e_ = caml_wrap_exception(_j_);
     if(_e_ === Stdlib[3])
       /*<<ephemeron.ml:719:19>>*/ return 0 /*<<ephemeron.ml:719:19>>*/ ;
     throw caml_maybe_attach_backtrace(_e_, 0);
    }
    /*<<ephemeron.ml:719:24>>*/ }
   function remove$1(b, k){
    var l$0 = b[1], l = l$0, acc = 0;
     /*<<ephemeron.ml:723:8>>*/ for(;;){
     if(! l)
       /*<<ephemeron.ml:724:16>>*/ return 0 /*<<ephemeron.ml:724:16>>*/ ;
     var h = l[1], t = l[2];
      /*<<ephemeron.ml:725:22>>*/ if
      ( /*<<ephemeron.ml:725:22>>*/ test_keys$0
         /*<<ephemeron.ml:725:22>>*/ (k, h)){
      b[1] =
        /*<<ephemeron.ml:725:44>>*/ caml_call2
         /*<<ephemeron.ml:725:44>>*/ (Stdlib_List[13], acc, t);
      return 0;
     }
     var t$0 = l[2], acc$0 =  /*<<ephemeron.ml:726:27>>*/ [0, h, acc];
     l = t$0;
     acc = acc$0;
    }
    /*<<ephemeron.ml:728:16>>*/ }
   function find$1(b, k){
    var
     match =
        /*<<ephemeron.ml:731:12>>*/  /*<<ephemeron.ml:731:12>>*/ caml_call2
         /*<<ephemeron.ml:731:12>>*/ (Stdlib_List[40],
         function(_d_){ /*<<?>>*/ return test_keys$0(k, _d_);},
         b[1]);
    if(! match)
      /*<<ephemeron.ml:733:16>>*/ return 0 /*<<ephemeron.ml:733:16>>*/ ;
    var e = match[1];
     /*<<ephemeron.ml:732:18>>*/ return  /*<<ephemeron.ml:732:18>>*/ get_data$1
             /*<<ephemeron.ml:732:18>>*/ (e) /*<<ephemeron.ml:733:20>>*/ ;
    /*<<ephemeron.ml:733:20>>*/ }
   function length$2(b){
     /*<<ephemeron.ml:735:19>>*/ return caml_call1(Stdlib_List[1], b[1]) /*<<ephemeron.ml:735:33>>*/ ;
    /*<<ephemeron.ml:735:33>>*/ }
   function clear$1(b){
     /*<<ephemeron.ml:736:18>>*/ b[1] = 0;
    return 0;
    /*<<ephemeron.ml:736:25>>*/ }
   var
    Stdlib_Ephemeron =
      [0,
       [0,
        make,
        query,
        Make,
        MakeSeeded$0,
        [0, make$0, add, remove, find, length, clear]],
       [0,
        make$1,
        query$0,
        Make$0,
        MakeSeeded$1,
        [0, make$2, add$0, remove$0, find$0, length$0, clear$0]],
       [0,
        make$3,
        query$1,
        Make$1,
        MakeSeeded$2,
        [0, make$4, add$1, remove$1, find$1, length$2, clear$1]]];
   runtime.caml_register_global(13, Stdlib_Ephemeron, "Stdlib__Ephemeron");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Filename
//# unitInfo: Requires: Stdlib, Stdlib__Buffer, Stdlib__Domain, Stdlib__List, Stdlib__Printf, Stdlib__Random, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    cst$19 =  /*<<?>>*/ "",
    cst$23 =  /*<<?>>*/ " ",
    cst_2$1 =  /*<<?>>*/ " 2>",
    cst_2_1$1 =  /*<<?>>*/ " 2>&1",
    cst$22 =  /*<<?>>*/ " <",
    cst$21 =  /*<<?>>*/ " >",
    cst$20 =  /*<<?>>*/ '"',
    cst$24 =  /*<<?>>*/ ".",
    cst$25 =  /*<<?>>*/ "..",
    cst$28 =  /*<<?>>*/ "../",
    cst$27 =  /*<<?>>*/ "./",
    cst$26 =  /*<<?>>*/ "/",
    cst_dev_null =  /*<<?>>*/ "/dev/null",
    caml_equal =  /*<<?>>*/ runtime.caml_equal,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length =  /*<<?>>*/ runtime.caml_ml_string_length,
    caml_string_get =  /*<<?>>*/ runtime.caml_string_get,
    caml_sys_getenv =  /*<<?>>*/ runtime.caml_sys_getenv,
    caml_trampoline =  /*<<?>>*/ runtime.caml_trampoline,
    caml_trampoline_return =  /*<<?>>*/ runtime.caml_trampoline_return,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) === 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) === 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$18 = cst$19,
    cst$17 = cst$19,
    cst$16 = cst$19,
    cst$8 = cst$21,
    cst$15 = cst$19,
    cst$9 = cst$22,
    cst$14 = cst$19,
    cst$10 = cst$23,
    cst$11 = cst$23,
    cst$12 = cst$20,
    cst$13 = cst$19,
    cst$6 = cst$20,
    cst$7 = cst$19,
    cst$4 = cst$19,
    cst = cst$21,
    cst$3 = cst$19,
    cst$0 = cst$22,
    cst$2 = cst$19,
    cst$1 = cst$23,
    null$0 = cst_dev_null,
    current_dir_name = cst$24,
    parent_dir_name = cst$25,
    dir_sep = cst$26,
    quotequote = "'\\''",
    null$1 = "NUL",
    current_dir_name$0 = cst$24,
    parent_dir_name$0 = cst$25,
    dir_sep$0 = "\\",
    cst$5 = cst$24,
    null$2 = cst_dev_null,
    current_dir_name$1 = cst$24,
    parent_dir_name$1 = cst$25,
    dir_sep$1 = cst$26,
    Stdlib = global_data.Stdlib,
    Stdlib_Domain = global_data.Stdlib__Domain,
    Stdlib_Random = global_data.Stdlib__Random,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Sys = global_data.Stdlib__Sys;
   function generic_basename(is_dir_sep, current_dir_name, name){
     /*<<filename.ml:37:2>>*/ if(name === cst$19)
      /*<<filename.ml:47:7>>*/ return current_dir_name /*<<filename.ml:47:7>>*/ ;
    var n$3 = caml_ml_string_length(name) - 1 | 0, n = n$3;
     /*<<filename.ml:38:4>>*/ for(;;){
     if(0 > n)
       /*<<filename.ml:38:18>>*/ return  /*<<filename.ml:38:18>>*/ caml_call3
               /*<<filename.ml:38:18>>*/ (Stdlib_String[16], name, 0, 1) /*<<filename.ml:48:40>>*/ ;
      /*<<filename.ml:39:12>>*/ if
      (!
        /*<<filename.ml:39:12>>*/ caml_call2
         /*<<filename.ml:39:12>>*/ (is_dir_sep, name, n))
      break;
     var n$0 =  /*<<filename.ml:39:35>>*/ n - 1 | 0;
     n = n$0;
    }
    var p =  /*<<filename.ml:40:9>>*/ n + 1 | 0, n$1 = n;
     /*<<filename.ml:42:4>>*/ for(;;){
     if(0 > n$1)
       /*<<filename.ml:42:18>>*/ return  /*<<filename.ml:42:18>>*/ caml_call3
               /*<<filename.ml:42:18>>*/ (Stdlib_String[16], name, 0, p) /*<<filename.ml:48:40>>*/ ;
      /*<<filename.ml:43:12>>*/ if
      ( /*<<filename.ml:43:12>>*/ caml_call2
         /*<<filename.ml:43:12>>*/ (is_dir_sep, name, n$1))
       /*<<filename.ml:37:2>>*/ return  /*<<filename.ml:37:2>>*/ caml_call3
               /*<<filename.ml:37:2>>*/ (Stdlib_String[16],
               name,
               n$1 + 1 | 0,
               (p - n$1 | 0) - 1 | 0) /*<<filename.ml:48:40>>*/ ;
     var n$2 = n$1 - 1 | 0;
     n$1 = n$2;
    }
    /*<<filename.ml:48:40>>*/ }
   function generic_dirname(is_dir_sep, current_dir_name, name){
     /*<<filename.ml:55:2>>*/ if(name === cst$19)
      /*<<filename.ml:69:7>>*/ return current_dir_name /*<<filename.ml:69:7>>*/ ;
    var n$5 = caml_ml_string_length(name) - 1 | 0, n = n$5;
     /*<<filename.ml:56:4>>*/ for(;;){
     if(0 > n)
       /*<<filename.ml:56:18>>*/ return  /*<<filename.ml:56:18>>*/ caml_call3
               /*<<filename.ml:56:18>>*/ (Stdlib_String[16], name, 0, 1) /*<<filename.ml:70:44>>*/ ;
      /*<<filename.ml:57:12>>*/ if
      (!
        /*<<filename.ml:57:12>>*/ caml_call2
         /*<<filename.ml:57:12>>*/ (is_dir_sep, name, n))
      break;
     var n$0 =  /*<<filename.ml:57:35>>*/ n - 1 | 0;
     n = n$0;
    }
    var n$1 = n;
     /*<<filename.ml:60:4>>*/ for(;;){
     if(0 > n$1) return current_dir_name;
      /*<<filename.ml:61:12>>*/ if
      ( /*<<filename.ml:61:12>>*/ caml_call2
         /*<<filename.ml:61:12>>*/ (is_dir_sep, name, n$1))
      break;
     var n$2 =  /*<<filename.ml:62:9>>*/ n$1 - 1 | 0;
     n$1 = n$2;
    }
    var n$3 = n$1;
     /*<<filename.ml:64:4>>*/ for(;;){
     if(0 > n$3)
       /*<<filename.ml:64:18>>*/ return  /*<<filename.ml:64:18>>*/ caml_call3
               /*<<filename.ml:64:18>>*/ (Stdlib_String[16], name, 0, 1) /*<<filename.ml:70:44>>*/ ;
      /*<<filename.ml:65:12>>*/ if
      (!
        /*<<filename.ml:65:12>>*/ caml_call2
         /*<<filename.ml:65:12>>*/ (is_dir_sep, name, n$3))
       /*<<filename.ml:66:9>>*/ return  /*<<filename.ml:66:9>>*/ caml_call3
               /*<<filename.ml:66:9>>*/ (Stdlib_String[16],
               name,
               0,
               n$3 + 1 | 0) /*<<filename.ml:70:44>>*/ ;
     var n$4 =  /*<<filename.ml:65:35>>*/ n$3 - 1 | 0;
     n$3 = n$4;
    }
    /*<<filename.ml:70:44>>*/ }
   function is_dir_sep(s, i){
     /*<<filename.ml:96:23>>*/ return 47
            ===
              /*<<filename.ml:96:23>>*/ caml_string_get
               /*<<filename.ml:96:23>>*/ (s, i)
            ? 1
            : 0;
    /*<<filename.ml:96:34>>*/ }
   function is_relative(n){
    var
     _aH_ = caml_ml_string_length(n) < 1 ? 1 : 0,
     _aI_ =
       _aH_
       ||
        (47
          !==
            /*<<filename.ml:97:45>>*/ caml_string_get
             /*<<filename.ml:97:45>>*/ (n, 0)
          ? 1
          : 0);
    return _aI_;
    /*<<filename.ml:97:57>>*/ }
   function is_implicit(n){
    var
     _aC_ =
        /*<<filename.ml:99:4>>*/  /*<<filename.ml:99:4>>*/ is_relative
         /*<<filename.ml:99:4>>*/ (n);
     /*<<filename.ml:99:4>>*/ if(_aC_){
     var
      _aD_ = caml_ml_string_length(n) < 2 ? 1 : 0,
      _aE_ =
        _aD_
        ||
         ( /*<<filename.ml:100:31>>*/ caml_call3
             /*<<filename.ml:100:31>>*/ (Stdlib_String[16], n, 0, 2)
           !== cst$27
           ? 1
           : 0);
      /*<<filename.ml:100:31>>*/ if(_aE_)
      var
       _aF_ = caml_ml_string_length(n) < 3 ? 1 : 0,
       _aG_ =
         _aF_
         ||
          ( /*<<filename.ml:101:31>>*/ caml_call3
              /*<<filename.ml:101:31>>*/ (Stdlib_String[16], n, 0, 3)
            !== cst$28
            ? 1
            : 0);
     else
      var _aG_ = _aE_;
    }
    else
     var _aG_ = _aC_;
     /*<<filename.ml:101:31>>*/ return _aG_ /*<<filename.ml:101:31>>*/ ;
    /*<<filename.ml:101:57>>*/ }
   function check_suffix(name, suff){
     /*<<filename.ml:103:4>>*/ return  /*<<filename.ml:103:4>>*/ caml_call2
             /*<<filename.ml:103:4>>*/ (Stdlib_String[12], suff, name) /*<<filename.ml:103:38>>*/ ;
    /*<<filename.ml:103:38>>*/ }
   function chop_suffix_opt(suffix, filename){
    var
     len_s = caml_ml_string_length(suffix),
     len_f = caml_ml_string_length(filename);
    if(len_s > len_f)
      /*<<filename.ml:114:6>>*/ return 0 /*<<filename.ml:114:6>>*/ ;
    var
     r =
        /*<<filename.ml:108:14>>*/  /*<<filename.ml:108:14>>*/ caml_call3
         /*<<filename.ml:108:14>>*/ (Stdlib_String[16],
         filename,
         len_f - len_s | 0,
         len_s);
     /*<<filename.ml:109:9>>*/ return r === suffix
            ? [0,
               /*<<filename.ml:110:13>>*/ caml_call3
                /*<<filename.ml:110:13>>*/ (Stdlib_String[16],
                filename,
                0,
                len_f - len_s | 0)]
            : 0 /*<<filename.ml:114:10>>*/ ;
    /*<<filename.ml:114:10>>*/ }
   var
    dummy = 0,
    _h_ = [0, 7, 0],
    _g_ = [0, 1, [0, 3, [0, 5, 0]]],
    _f_ = [0, [2, 0, [4, 6, [0, 2, 6], 0, [2, 0, 0]]], "%s%06x%s"],
    cst_Filename_chop_extension = "Filename.chop_extension",
    cst_Filename_chop_suffix = "Filename.chop_suffix",
    _d_ = [0, cst$20, 0],
    cst_2_1$0 = cst_2_1$1,
    cst_2$0 = cst_2$1,
    cst_Filename_quote_command_bad = "Filename.quote_command: bad file name ",
    _c_ = [0, cst$20, 0],
    cst_2_1 = cst_2_1$1,
    cst_2 = cst_2$1,
    cst_tmp = "/tmp";
   try{
    var
     _j_ =
        /*<<filename.ml:117:8>>*/  /*<<filename.ml:117:8>>*/ caml_sys_getenv
         /*<<filename.ml:117:8>>*/ ("TMPDIR"),
     temp_dir_name = _j_;
   }
   catch(_aB_){
    var _a_ = caml_wrap_exception(_aB_);
    if(_a_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_a_, 0);
    var temp_dir_name = cst_tmp;
   }
   function quote(s){
    var
     l = caml_ml_string_length(s),
     b =
        /*<<filename.ml:18:10>>*/  /*<<filename.ml:18:10>>*/ caml_call1
         /*<<filename.ml:18:10>>*/ (Stdlib_Buffer[1], l + 20 | 0);
     /*<<filename.ml:19:2>>*/  /*<<filename.ml:19:2>>*/ caml_call2
      /*<<filename.ml:19:2>>*/ (Stdlib_Buffer[12], b, 39);
    var _ay_ = l - 1 | 0, _ax_ =  /*<<filename.ml:19:2>>*/ 0;
    if(_ay_ >= 0){
     var i = _ax_;
     for(;;){
       /*<<filename.ml:21:7>>*/ if
       (39
        ===
          /*<<filename.ml:21:7>>*/ caml_string_get
           /*<<filename.ml:21:7>>*/ (s, i))
        /*<<filename.ml:22:9>>*/  /*<<filename.ml:22:9>>*/ caml_call2
         /*<<filename.ml:22:9>>*/ (Stdlib_Buffer[16], b, quotequote);
      else{
       var
        _aA_ =
           /*<<filename.ml:23:28>>*/  /*<<filename.ml:23:28>>*/ caml_string_get
            /*<<filename.ml:23:28>>*/ (s, i);
        /*<<filename.ml:23:9>>*/  /*<<filename.ml:23:9>>*/ caml_call2
         /*<<filename.ml:23:9>>*/ (Stdlib_Buffer[12], b, _aA_);
      }
      var _az_ =  /*<<filename.ml:23:9>>*/ i + 1 | 0;
      if(_ay_ === i) break;
      i = _az_;
     }
    }
     /*<<filename.ml:25:2>>*/  /*<<filename.ml:25:2>>*/ caml_call2
      /*<<filename.ml:25:2>>*/ (Stdlib_Buffer[12], b, 39);
     /*<<filename.ml:25:2>>*/ return  /*<<filename.ml:25:2>>*/ caml_call1
             /*<<filename.ml:25:2>>*/ (Stdlib_Buffer[2], b) /*<<filename.ml:25:2>>*/ ;
   }
   function quote_command(cmd, stdin, stdout, stderr, args){
     /*<<filename.ml:120:4>>*/ if(stderr){
     var f = stderr[1];
      /*<<filename.ml:123:51>>*/ if
      ( /*<<filename.ml:123:51>>*/ caml_equal
         /*<<filename.ml:123:51>>*/ (stderr, stdout))
      var _am_ = cst_2_1;
     else
      var
       _aw_ =
          /*<<filename.ml:125:61>>*/  /*<<filename.ml:125:61>>*/ quote
           /*<<filename.ml:125:61>>*/ (f),
       _am_ =
          /*<<filename.ml:125:53>>*/ caml_call2
           /*<<filename.ml:125:53>>*/ (Stdlib[28], cst_2, _aw_);
     var _an_ = _am_;
    }
    else
     var _an_ = cst$4;
    if(stdout)
     var
      f$0 = stdout[1],
      _ao_ =
         /*<<filename.ml:122:55>>*/  /*<<filename.ml:122:55>>*/ quote
          /*<<filename.ml:122:55>>*/ (f$0),
      _ap_ =
         /*<<filename.ml:122:48>>*/ caml_call2
          /*<<filename.ml:122:48>>*/ (Stdlib[28], cst, _ao_);
    else
     var _ap_ = cst$3;
    var
     _aq_ =
        /*<<filename.ml:122:6>>*/  /*<<filename.ml:122:6>>*/ caml_call2
         /*<<filename.ml:122:6>>*/ (Stdlib[28], _ap_, _an_);
    if(stdin)
     var
      f$1 = stdin[1],
      _ar_ =
         /*<<filename.ml:121:55>>*/  /*<<filename.ml:121:55>>*/ quote
          /*<<filename.ml:121:55>>*/ (f$1),
      _as_ =
         /*<<filename.ml:121:48>>*/ caml_call2
          /*<<filename.ml:121:48>>*/ (Stdlib[28], cst$0, _ar_);
    else
     var _as_ = cst$2;
    var
     _at_ =
        /*<<filename.ml:121:6>>*/  /*<<filename.ml:121:6>>*/ caml_call2
         /*<<filename.ml:121:6>>*/ (Stdlib[28], _as_, _aq_),
     _au_ =
        /*<<filename.ml:120:22>>*/  /*<<filename.ml:120:22>>*/ caml_call2
         /*<<filename.ml:120:22>>*/ (Stdlib_List[20], quote, [0, cmd, args]),
     _av_ =
        /*<<filename.ml:120:4>>*/  /*<<filename.ml:120:4>>*/ caml_call2
         /*<<filename.ml:120:4>>*/ (Stdlib_String[7], cst$1, _au_);
     /*<<filename.ml:121:6>>*/ return  /*<<filename.ml:121:6>>*/ caml_call2
             /*<<filename.ml:121:6>>*/ (Stdlib[28], _av_, _at_) /*<<filename.ml:125:69>>*/ ;
    /*<<filename.ml:125:69>>*/ }
   function basename(_al_){
     /*<<?>>*/ return generic_basename(is_dir_sep, current_dir_name, _al_);
   }
   function dirname(_ak_){
     /*<<?>>*/ return generic_dirname(is_dir_sep, current_dir_name, _ak_);
   }
   var
    Unix =
       /*<<filename.ml:91:24>>*/ [0,
       null$0,
       current_dir_name,
       parent_dir_name,
       dir_sep,
       is_dir_sep,
       is_relative,
       is_implicit,
       check_suffix,
       chop_suffix_opt,
       temp_dir_name,
       quote,
       quote_command,
       basename,
       dirname];
   function is_dir_sep$0(s, i){
    var
     c =
        /*<<filename.ml:135:31>>*/  /*<<filename.ml:135:31>>*/ caml_string_get
         /*<<filename.ml:135:31>>*/ (s, i),
     _ah_ = 47 === c ? 1 : 0;
    if(_ah_)
     var _ai_ = _ah_;
    else
     var _aj_ = 92 === c ? 1 : 0, _ai_ = _aj_ || (58 === c ? 1 : 0);
    return _ai_;
    /*<<filename.ml:135:70>>*/ }
   function is_relative$0(n){
    var
     _ab_ = caml_ml_string_length(n) < 1 ? 1 : 0,
     _ac_ =
       _ab_
       ||
        (47
          !==
            /*<<filename.ml:137:28>>*/ caml_string_get
             /*<<filename.ml:137:28>>*/ (n, 0)
          ? 1
          : 0);
    if(_ac_){
     var
      _ad_ = caml_ml_string_length(n) < 1 ? 1 : 0,
      _ae_ =
        _ad_
        ||
         (92
           !==
             /*<<filename.ml:138:31>>*/ caml_string_get
              /*<<filename.ml:138:31>>*/ (n, 0)
           ? 1
           : 0);
     if(_ae_)
      var
       _af_ = caml_ml_string_length(n) < 2 ? 1 : 0,
       _ag_ =
         _af_
         ||
          (58
            !==
              /*<<filename.ml:139:31>>*/ caml_string_get
               /*<<filename.ml:139:31>>*/ (n, 1)
            ? 1
            : 0);
     else
      var _ag_ = _ae_;
    }
    else
     var _ag_ = _ac_;
    return _ag_;
    /*<<filename.ml:139:44>>*/ }
   function is_implicit$0(n){
    var
     _U_ =
        /*<<filename.ml:141:4>>*/  /*<<filename.ml:141:4>>*/ is_relative$0
         /*<<filename.ml:141:4>>*/ (n);
     /*<<filename.ml:141:4>>*/ if(_U_){
     var
      _V_ = caml_ml_string_length(n) < 2 ? 1 : 0,
      _W_ =
        _V_
        ||
         ( /*<<filename.ml:142:31>>*/ caml_call3
             /*<<filename.ml:142:31>>*/ (Stdlib_String[16], n, 0, 2)
           !== cst$27
           ? 1
           : 0);
      /*<<filename.ml:142:31>>*/ if(_W_){
      var
       _X_ = caml_ml_string_length(n) < 2 ? 1 : 0,
       _Y_ =
         _X_
         ||
          ( /*<<filename.ml:143:31>>*/ caml_call3
              /*<<filename.ml:143:31>>*/ (Stdlib_String[16], n, 0, 2)
            !== ".\\"
            ? 1
            : 0);
       /*<<filename.ml:143:31>>*/ if(_Y_){
       var
        _Z_ = caml_ml_string_length(n) < 3 ? 1 : 0,
        ___ =
          _Z_
          ||
           ( /*<<filename.ml:144:31>>*/ caml_call3
               /*<<filename.ml:144:31>>*/ (Stdlib_String[16], n, 0, 3)
             !== cst$28
             ? 1
             : 0);
        /*<<filename.ml:144:31>>*/ if(___)
        var
         _$_ = caml_ml_string_length(n) < 3 ? 1 : 0,
         _aa_ =
           _$_
           ||
            ( /*<<filename.ml:145:31>>*/ caml_call3
                /*<<filename.ml:145:31>>*/ (Stdlib_String[16], n, 0, 3)
              !== "..\\"
              ? 1
              : 0);
       else
        var _aa_ = ___;
      }
      else
       var _aa_ = _Y_;
     }
     else
      var _aa_ = _W_;
    }
    else
     var _aa_ = _U_;
     /*<<filename.ml:145:31>>*/ return _aa_ /*<<filename.ml:145:31>>*/ ;
    /*<<filename.ml:145:58>>*/ }
   function check_suffix$0(name, suff){
    var
     _R_ = caml_ml_string_length(suff) <= caml_ml_string_length(name) ? 1 : 0;
    if(_R_)
     var
      s =
         /*<<filename.ml:148:12>>*/  /*<<filename.ml:148:12>>*/ caml_call3
          /*<<filename.ml:148:12>>*/ (Stdlib_String[16],
          name,
          caml_ml_string_length(name) - caml_ml_string_length(suff) | 0,
          caml_ml_string_length(suff)),
      _S_ =
         /*<<filename.ml:150:31>>*/  /*<<filename.ml:150:31>>*/ caml_call1
          /*<<filename.ml:150:31>>*/ (Stdlib_String[27], suff),
      _T_ =
         /*<<filename.ml:150:4>>*/ caml_call1
           /*<<filename.ml:150:4>>*/ (Stdlib_String[27], s)
         === _S_
         ? 1
         : 0;
    else
     var _T_ = _R_;
     /*<<filename.ml:150:4>>*/ return _T_ /*<<filename.ml:150:4>>*/ ;
    /*<<filename.ml:150:59>>*/ }
   function chop_suffix_opt$0(suffix, filename){
    var
     len_s = caml_ml_string_length(suffix),
     len_f = caml_ml_string_length(filename);
    if(len_s > len_f)
      /*<<filename.ml:161:6>>*/ return 0 /*<<filename.ml:161:6>>*/ ;
    var
     r =
        /*<<filename.ml:155:14>>*/  /*<<filename.ml:155:14>>*/ caml_call3
         /*<<filename.ml:155:14>>*/ (Stdlib_String[16],
         filename,
         len_f - len_s | 0,
         len_s),
     _Q_ =
        /*<<filename.ml:156:36>>*/  /*<<filename.ml:156:36>>*/ caml_call1
         /*<<filename.ml:156:36>>*/ (Stdlib_String[27], suffix);
     /*<<filename.ml:156:9>>*/ return  /*<<filename.ml:156:9>>*/ caml_call1
              /*<<filename.ml:156:9>>*/ (Stdlib_String[27], r)
            === _Q_
            ? [0,
               /*<<filename.ml:157:13>>*/ caml_call3
                /*<<filename.ml:157:13>>*/ (Stdlib_String[16],
                filename,
                0,
                len_f - len_s | 0)]
            : 0 /*<<filename.ml:161:10>>*/ ;
    /*<<filename.ml:161:10>>*/ }
   try{
    var
     _i_ =
        /*<<filename.ml:165:8>>*/  /*<<filename.ml:165:8>>*/ caml_sys_getenv
         /*<<filename.ml:165:8>>*/ ("TEMP"),
     temp_dir_name$0 = _i_;
   }
   catch(_P_){
    var _b_ = caml_wrap_exception(_P_);
    if(_b_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_b_, 0);
    var temp_dir_name$0 = cst$5;
   }
   function quote$0(s){
    var
     l = caml_ml_string_length(s),
     b =
        /*<<filename.ml:168:12>>*/  /*<<filename.ml:168:12>>*/ caml_call1
         /*<<filename.ml:168:12>>*/ (Stdlib_Buffer[1], l + 20 | 0);
     /*<<filename.ml:169:4>>*/  /*<<filename.ml:169:4>>*/ caml_call2
      /*<<filename.ml:169:4>>*/ (Stdlib_Buffer[12], b, 34);
    function loop$0(counter, i){
     var i$0 = i;
      /*<<filename.ml:171:6>>*/ for(;;){
      if(i$0 === l)
        /*<<filename.ml:171:20>>*/ return  /*<<filename.ml:171:20>>*/ caml_call2
                /*<<filename.ml:171:20>>*/ (Stdlib_Buffer[12], b, 34) /*<<filename.ml:175:48>>*/ ;
      var
       c =
          /*<<filename.ml:172:12>>*/  /*<<filename.ml:172:12>>*/ caml_string_get
           /*<<filename.ml:172:12>>*/ (s, i$0);
      if(34 === c){
       var _N_ = 0;
        /*<<filename.ml:173:16>>*/ if(counter >= 50)
         /*<<filename.ml:173:16>>*/ return  /*<<filename.ml:173:16>>*/ caml_trampoline_return
                 /*<<filename.ml:173:16>>*/ (loop_bs, [0, _N_, i$0]) /*<<filename.ml:175:48>>*/ ;
       var counter$1 = counter + 1 | 0;
        /*<<filename.ml:173:16>>*/ return  /*<<filename.ml:173:16>>*/ loop_bs
                /*<<filename.ml:173:16>>*/ (counter$1, _N_, i$0) /*<<filename.ml:175:48>>*/ ;
      }
      if(92 === c){
       var _O_ = 0;
        /*<<filename.ml:174:16>>*/ if(counter >= 50)
         /*<<filename.ml:174:16>>*/ return  /*<<filename.ml:174:16>>*/ caml_trampoline_return
                 /*<<filename.ml:174:16>>*/ (loop_bs, [0, _O_, i$0]) /*<<filename.ml:175:48>>*/ ;
       var counter$0 = counter + 1 | 0;
        /*<<filename.ml:174:16>>*/ return  /*<<filename.ml:174:16>>*/ loop_bs
                /*<<filename.ml:174:16>>*/ (counter$0, _O_, i$0) /*<<filename.ml:175:48>>*/ ;
      }
       /*<<filename.ml:175:16>>*/  /*<<filename.ml:175:16>>*/ caml_call2
        /*<<filename.ml:175:16>>*/ (Stdlib_Buffer[12], b, c);
      var i$1 =  /*<<filename.ml:175:16>>*/ i$0 + 1 | 0;
      i$0 = i$1;
     }
     /*<<filename.ml:175:48>>*/ }
    function loop(i){ /*<<?>>*/ return caml_trampoline(loop$0(0, i));}
    function loop_bs(counter, n, i){
     var n$0 = n, i$0 = i;
      /*<<filename.ml:177:6>>*/ for(;;){
      if(i$0 === l){
        /*<<filename.ml:178:8>>*/  /*<<filename.ml:178:8>>*/ caml_call2
         /*<<filename.ml:178:8>>*/ (Stdlib_Buffer[12], b, 34);
        /*<<filename.ml:178:8>>*/ return  /*<<filename.ml:178:8>>*/ add_bs
                /*<<filename.ml:178:8>>*/ (n$0) /*<<filename.ml:185:9>>*/ ;
      }
      var
       match =
          /*<<filename.ml:181:14>>*/  /*<<filename.ml:181:14>>*/ caml_string_get
           /*<<filename.ml:181:14>>*/ (s, i$0);
      if(34 === match){
        /*<<filename.ml:182:18>>*/  /*<<filename.ml:182:18>>*/ add_bs
         /*<<filename.ml:182:18>>*/ ((2 * n$0 | 0) + 1 | 0);
        /*<<filename.ml:182:34>>*/  /*<<filename.ml:182:34>>*/ caml_call2
         /*<<filename.ml:182:34>>*/ (Stdlib_Buffer[12], b, 34);
       var _M_ =  /*<<filename.ml:182:34>>*/ i$0 + 1 | 0;
        /*<<filename.ml:182:34>>*/ if(counter >= 50)
         /*<<filename.ml:182:34>>*/ return  /*<<filename.ml:182:34>>*/ caml_trampoline_return
                 /*<<filename.ml:182:34>>*/ (loop$0, [0, _M_]) /*<<filename.ml:185:9>>*/ ;
       var counter$1 = counter + 1 | 0;
        /*<<filename.ml:182:34>>*/ return  /*<<filename.ml:182:34>>*/ loop$0
                /*<<filename.ml:182:34>>*/ (counter$1, _M_) /*<<filename.ml:185:9>>*/ ;
      }
      if(92 !== match){
        /*<<filename.ml:184:18>>*/  /*<<filename.ml:184:18>>*/ add_bs
         /*<<filename.ml:184:18>>*/ (n$0);
        /*<<filename.ml:184:18>>*/ if(counter >= 50)
         /*<<filename.ml:184:18>>*/ return  /*<<filename.ml:184:18>>*/ caml_trampoline_return
                 /*<<filename.ml:184:18>>*/ (loop$0, [0, i$0]) /*<<filename.ml:185:9>>*/ ;
       var counter$0 = counter + 1 | 0;
        /*<<filename.ml:184:18>>*/ return  /*<<filename.ml:184:18>>*/ loop$0
                /*<<filename.ml:184:18>>*/ (counter$0, i$0) /*<<filename.ml:185:9>>*/ ;
      }
      var i$1 =  /*<<filename.ml:183:18>>*/ i$0 + 1 | 0, n$1 = n$0 + 1 | 0;
      n$0 = n$1;
      i$0 = i$1;
     }
     /*<<filename.ml:185:9>>*/ }
    function add_bs(n){
     var _K_ =  /*<<filename.ml:186:19>>*/ 1;
     if(n >= 1){
      var j = _K_;
      for(;;){
        /*<<filename.ml:186:38>>*/  /*<<filename.ml:186:38>>*/ caml_call2
         /*<<filename.ml:186:38>>*/ (Stdlib_Buffer[12], b, 92);
       var _L_ =  /*<<filename.ml:186:38>>*/ j + 1 | 0;
       if(n === j) break;
       j = _L_;
      }
     }
     /*<<filename.ml:186:66>>*/ }
     /*<<filename.ml:188:4>>*/  /*<<filename.ml:188:4>>*/ loop
      /*<<filename.ml:188:4>>*/ (0);
     /*<<filename.ml:188:4>>*/ return  /*<<filename.ml:188:4>>*/ caml_call1
             /*<<filename.ml:188:4>>*/ (Stdlib_Buffer[2], b) /*<<filename.ml:189:21>>*/ ;
    /*<<filename.ml:189:21>>*/ }
   function quote_cmd_filename(f){
     /*<<filename.ml:222:4>>*/ if
     (!
       /*<<filename.ml:222:7>>*/ caml_call2
        /*<<filename.ml:222:7>>*/ (Stdlib_String[23],
        function(param){
          /*<<filename.ml:222:21>>*/ if(34 !== param && 37 !== param)
           /*<<filename.ml:222:57>>*/ return 0 /*<<filename.ml:222:57>>*/ ;
          /*<<filename.ml:222:45>>*/ return 1 /*<<filename.ml:222:45>>*/ ;
         /*<<filename.ml:222:63>>*/ },
        f))
      /*<<filename.ml:224:12>>*/ return  /*<<filename.ml:224:12>>*/ caml_call2
               /*<<filename.ml:224:12>>*/ (Stdlib_String[15], f, 32)
             ?  /*<<filename.ml:225:23>>*/ caml_call2
                /*<<filename.ml:225:23>>*/ (Stdlib_String[7],
                cst$7,
                [0, cst$6, [0, f, _c_]])
             : f /*<<filename.ml:227:7>>*/ ;
    var
     _J_ =
        /*<<filename.ml:223:15>>*/  /*<<filename.ml:223:15>>*/ caml_call2
         /*<<filename.ml:223:15>>*/ (Stdlib[28],
         cst_Filename_quote_command_bad,
         f);
     /*<<filename.ml:223:15>>*/ return  /*<<filename.ml:223:15>>*/ caml_call1
             /*<<filename.ml:223:15>>*/ (Stdlib[2], _J_) /*<<filename.ml:227:7>>*/ ;
    /*<<filename.ml:227:7>>*/ }
   function quote_command$0(cmd, stdin, stdout, stderr, args){
     /*<<filename.ml:232:4>>*/ if(stderr){
     var f = stderr[1];
      /*<<filename.ml:240:43>>*/ if
      ( /*<<filename.ml:240:43>>*/ caml_equal
         /*<<filename.ml:240:43>>*/ (stderr, stdout))
      var _w_ = cst_2_1$0;
     else
      var
       _H_ =
          /*<<filename.ml:242:53>>*/  /*<<filename.ml:242:53>>*/ quote_cmd_filename
           /*<<filename.ml:242:53>>*/ (f),
       _w_ =
          /*<<filename.ml:242:45>>*/ caml_call2
           /*<<filename.ml:242:45>>*/ (Stdlib[28], cst_2$0, _H_);
     var _x_ = _w_;
    }
    else
     var _x_ = cst$16;
    var _y_ =  /*<<filename.ml:239:6>>*/ [0, _x_, _d_];
    if(stdout)
     var
      f$0 = stdout[1],
      _z_ =
         /*<<filename.ml:238:55>>*/  /*<<filename.ml:238:55>>*/ quote_cmd_filename
          /*<<filename.ml:238:55>>*/ (f$0),
      _A_ =
         /*<<filename.ml:238:48>>*/ caml_call2
          /*<<filename.ml:238:48>>*/ (Stdlib[28], cst$8, _z_);
    else
     var _A_ = cst$15;
    var _B_ =  /*<<filename.ml:238:6>>*/ [0, _A_, _y_];
    if(stdin)
     var
      f$1 = stdin[1],
      _C_ =
         /*<<filename.ml:237:55>>*/  /*<<filename.ml:237:55>>*/ quote_cmd_filename
          /*<<filename.ml:237:55>>*/ (f$1),
      _D_ =
         /*<<filename.ml:237:48>>*/ caml_call2
          /*<<filename.ml:237:48>>*/ (Stdlib[28], cst$9, _C_);
    else
     var _D_ = cst$14;
    var
     _E_ =
        /*<<filename.ml:236:35>>*/  /*<<filename.ml:236:35>>*/ caml_call2
         /*<<filename.ml:236:35>>*/ (Stdlib_List[20], quote$0, args),
     s =
        /*<<filename.ml:236:16>>*/  /*<<filename.ml:236:16>>*/ caml_call2
         /*<<filename.ml:236:16>>*/ (Stdlib_String[7], cst$10, _E_),
     b =
        /*<<filename.ml:211:12>>*/  /*<<filename.ml:211:12>>*/ caml_call1
         /*<<filename.ml:211:12>>*/ (Stdlib_Buffer[1],
         caml_ml_string_length(s) + 20 | 0);
     /*<<filename.ml:212:4>>*/  /*<<filename.ml:212:4>>*/ caml_call2
      /*<<filename.ml:212:4>>*/ (Stdlib_String[30],
      function(c){
       a:
       {
        if(62 <= c){
         var _I_ = c - 63 | 0;
         if(60 < _I_ >>> 0){
          if(62 <= _I_) break a;
         }
         else if(31 !== _I_) break a;
        }
        else
         if(42 <= c){
          if(60 !== c) break a;
         }
         else{
          if(33 > c) break a;
          switch(c - 33 | 0){case 2:case 3:case 6: break a;
          }
         }
         /*<<filename.ml:216:12>>*/  /*<<filename.ml:216:12>>*/ caml_call2
          /*<<filename.ml:216:12>>*/ (Stdlib_Buffer[12], b, 94);
         /*<<filename.ml:216:12>>*/ return  /*<<filename.ml:216:12>>*/ caml_call2
                 /*<<filename.ml:216:12>>*/ (Stdlib_Buffer[12], b, c) /*<<filename.ml:218:31>>*/ ;
       }
        /*<<filename.ml:218:12>>*/ return  /*<<filename.ml:218:12>>*/ caml_call2
                /*<<filename.ml:218:12>>*/ (Stdlib_Buffer[12], b, c) /*<<filename.ml:218:31>>*/ ;
       /*<<filename.ml:218:31>>*/ },
      s);
    var
     _F_ =
        /*<<filename.ml:235:6>>*/ [0,
        cst$11,
        [0,
          /*<<filename.ml:212:4>>*/ caml_call1
           /*<<filename.ml:212:4>>*/ (Stdlib_Buffer[2], b),
         [0, _D_, _B_]]],
     _G_ =
        /*<<filename.ml:232:21>>*/ [0,
        cst$12,
        [0,
          /*<<filename.ml:234:6>>*/ quote_cmd_filename
           /*<<filename.ml:234:6>>*/ (cmd),
         _F_]];
     /*<<filename.ml:232:21>>*/ return  /*<<filename.ml:232:21>>*/ caml_call2
             /*<<filename.ml:232:21>>*/ (Stdlib_String[7], cst$13, _G_) /*<<filename.ml:244:5>>*/ ;
    /*<<filename.ml:244:5>>*/ }
   function drive_and_path(s){
    var
     _s_ =
       2
        <=
          /*<<filename.ml:250:4>>*/ caml_ml_string_length
           /*<<filename.ml:250:4>>*/ (s)
        ? 1
        : 0;
    if(_s_){
     var
      param =
         /*<<filename.ml:250:38>>*/  /*<<filename.ml:250:38>>*/ caml_string_get
          /*<<filename.ml:250:38>>*/ (s, 0);
     a:
     {
      b:
      {
       if(91 <= param){
        if(25 < param - 97 >>> 0) break b;
       }
       else if(65 > param) break b;
       var _t_ = 1;
       break a;
      }
      var _t_ = 0;
     }
     var
      _u_ =
         /*<<filename.ml:250:28>>*/ _t_
         ? 58
           ===
             /*<<filename.ml:250:47>>*/ caml_string_get
              /*<<filename.ml:250:47>>*/ (s, 1)
           ? 1
           : 0
         : _t_;
    }
    else
     var _u_ = _s_;
     /*<<filename.ml:252:7>>*/ if(! _u_)
      /*<<filename.ml:254:9>>*/ return [0, cst$17, s] /*<<filename.ml:254:9>>*/ ;
    var
     _v_ =
        /*<<filename.ml:253:28>>*/  /*<<filename.ml:253:28>>*/ caml_call3
         /*<<filename.ml:253:28>>*/ (Stdlib_String[16],
         s,
         2,
         caml_ml_string_length(s) - 2 | 0);
     /*<<filename.ml:253:9>>*/ return [0,
             /*<<filename.ml:253:10>>*/ caml_call3
              /*<<filename.ml:253:10>>*/ (Stdlib_String[16], s, 0, 2),
            _v_] /*<<filename.ml:253:9>>*/ ;
    /*<<filename.ml:254:16>>*/ }
   function dirname$0(s){
    var
     match =
        /*<<filename.ml:256:24>>*/  /*<<filename.ml:256:24>>*/ drive_and_path
         /*<<filename.ml:256:24>>*/ (s),
     path = match[2],
     drive = match[1],
     dir =
        /*<<filename.ml:257:14>>*/  /*<<filename.ml:257:14>>*/ generic_dirname
         /*<<filename.ml:257:14>>*/ (is_dir_sep$0, current_dir_name$0, path);
     /*<<filename.ml:258:4>>*/ return  /*<<filename.ml:258:4>>*/ caml_call2
             /*<<filename.ml:258:4>>*/ (Stdlib[28], drive, dir) /*<<filename.ml:258:15>>*/ ;
    /*<<filename.ml:258:15>>*/ }
   function basename$0(s){
    var
     path =
        /*<<filename.ml:260:25>>*/ drive_and_path
          /*<<filename.ml:260:25>>*/ (s)
        [2];
     /*<<filename.ml:261:4>>*/ return  /*<<filename.ml:261:4>>*/ generic_basename
             /*<<filename.ml:261:4>>*/ (is_dir_sep$0,
             current_dir_name$0,
             path) /*<<filename.ml:261:53>>*/ ;
    /*<<filename.ml:261:53>>*/ }
   var
    Win32 =
       /*<<filename.ml:130:25>>*/ [0,
       null$1,
       current_dir_name$0,
       parent_dir_name$0,
       dir_sep$0,
       is_dir_sep$0,
       is_relative$0,
       is_implicit$0,
       check_suffix$0,
       chop_suffix_opt$0,
       temp_dir_name$0,
       quote$0,
       quote_command$0,
       basename$0,
       dirname$0];
   function basename$1(_r_){
     /*<<?>>*/ return generic_basename(is_dir_sep$0, current_dir_name$1, _r_);
   }
   function dirname$1(_q_){
     /*<<?>>*/ return generic_dirname(is_dir_sep$0, current_dir_name$1, _q_);
   }
   var
    Cygwin =
       /*<<filename.ml:264:26>>*/ [0,
       null$2,
       current_dir_name$1,
       parent_dir_name$1,
       dir_sep$1,
       is_dir_sep$0,
       is_relative$0,
       is_implicit$0,
       check_suffix$0,
       chop_suffix_opt$0,
       temp_dir_name,
       quote,
       quote_command,
       basename$1,
       dirname$1],
    _e_ = Stdlib_Sys[4],
    Sysdeps = _e_ !== "Cygwin" ? _e_ !== "Win32" ? Unix : Win32 : Cygwin,
    null$3 = Sysdeps[1],
    current_dir_name$2 = Sysdeps[2],
    parent_dir_name$2 = Sysdeps[3],
    dir_sep$2 = Sysdeps[4],
    is_dir_sep$1 = Sysdeps[5],
    is_relative$1 = Sysdeps[6],
    is_implicit$1 = Sysdeps[7],
    check_suffix$1 = Sysdeps[8],
    chop_suffix_opt$1 = Sysdeps[9],
    temp_dir_name$1 = Sysdeps[10],
    quote$1 = Sysdeps[11],
    quote_command$1 = Sysdeps[12],
    basename$2 = Sysdeps[13],
    dirname$2 = Sysdeps[14];
   function concat(dirname, filename){
    var l = caml_ml_string_length(dirname);
     /*<<filename.ml:291:2>>*/ if
     (0 !== l
      &&
       !
        /*<<filename.ml:291:14>>*/ is_dir_sep$1
         /*<<filename.ml:291:14>>*/ (dirname, l - 1 | 0)){
     var
      _p_ =
         /*<<filename.ml:293:17>>*/  /*<<filename.ml:293:17>>*/ caml_call2
          /*<<filename.ml:293:17>>*/ (Stdlib[28], dir_sep$2, filename);
      /*<<filename.ml:293:17>>*/ return  /*<<filename.ml:293:17>>*/ caml_call2
              /*<<filename.ml:293:17>>*/ (Stdlib[28], dirname, _p_) /*<<filename.ml:293:35>>*/ ;
    }
     /*<<filename.ml:292:7>>*/ return  /*<<filename.ml:292:7>>*/ caml_call2
             /*<<filename.ml:292:7>>*/ (Stdlib[28], dirname, filename) /*<<filename.ml:293:35>>*/ ;
    /*<<filename.ml:293:35>>*/ }
   function chop_suffix(name, suff){
     /*<<filename.ml:296:2>>*/ return  /*<<filename.ml:296:5>>*/ check_suffix$1
              /*<<filename.ml:296:5>>*/ (name, suff)
            ? caml_call3
              (Stdlib_String[16],
               name,
               0,
               caml_ml_string_length(name) - caml_ml_string_length(suff) | 0)
            :  /*<<filename.ml:298:7>>*/ caml_call1
               /*<<filename.ml:298:7>>*/ (Stdlib[1], cst_Filename_chop_suffix) /*<<filename.ml:298:41>>*/ ;
    /*<<filename.ml:298:41>>*/ }
   function extension_len(name){
    var i$3 = caml_ml_string_length(name) - 1 | 0, i0 = i$3;
     /*<<filename.ml:307:4>>*/ for(;;){
     if
      (0 <= i0
       &&
        !
         /*<<filename.ml:307:16>>*/ is_dir_sep$1
          /*<<filename.ml:307:16>>*/ (name, i0)){
       /*<<filename.ml:308:12>>*/ if
       (46
        ===
          /*<<filename.ml:308:12>>*/ caml_string_get
           /*<<filename.ml:308:12>>*/ (name, i0))
       break;
      var i$2 =  /*<<filename.ml:309:9>>*/ i0 - 1 | 0;
      i0 = i$2;
      continue;
     }
      /*<<filename.ml:307:39>>*/ return 0 /*<<filename.ml:307:39>>*/ ;
    }
    var i$1 =  /*<<filename.ml:308:32>>*/ i0 - 1 | 0, i = i$1;
     /*<<filename.ml:302:4>>*/ for(;;){
     if
      (0 <= i
       &&
        !
         /*<<filename.ml:302:16>>*/ is_dir_sep$1
          /*<<filename.ml:302:16>>*/ (name, i)){
       /*<<filename.ml:303:12>>*/ if
       (46
        !==
          /*<<filename.ml:303:12>>*/ caml_string_get
           /*<<filename.ml:303:12>>*/ (name, i))
       return caml_ml_string_length(name) - i0 | 0;
      var i$0 =  /*<<filename.ml:303:32>>*/ i - 1 | 0;
      i = i$0;
      continue;
     }
      /*<<filename.ml:302:39>>*/ return 0 /*<<filename.ml:302:39>>*/ ;
    }
    /*<<filename.ml:311:37>>*/ }
   function extension(name){
    var
     l =
        /*<<filename.ml:314:10>>*/  /*<<filename.ml:314:10>>*/ extension_len
         /*<<filename.ml:314:10>>*/ (name);
     /*<<filename.ml:315:2>>*/ return 0 === l
            ? cst$18
            :  /*<<filename.ml:315:24>>*/ caml_call3
               /*<<filename.ml:315:24>>*/ (Stdlib_String[16],
               name,
               caml_ml_string_length(name) - l | 0,
               l) /*<<filename.ml:315:66>>*/ ;
    /*<<filename.ml:315:66>>*/ }
   function chop_extension(name){
    var
     l =
        /*<<filename.ml:318:10>>*/  /*<<filename.ml:318:10>>*/ extension_len
         /*<<filename.ml:318:10>>*/ (name);
     /*<<filename.ml:319:2>>*/ return 0 === l
            ?  /*<<filename.ml:319:16>>*/ caml_call1
               /*<<filename.ml:319:16>>*/ (Stdlib[1],
               cst_Filename_chop_extension)
            : caml_call3
              (Stdlib_String[16],
               name,
               0,
               caml_ml_string_length(name) - l | 0) /*<<filename.ml:320:49>>*/ ;
    /*<<filename.ml:320:49>>*/ }
   function remove_extension(name){
    var
     l =
        /*<<filename.ml:323:10>>*/  /*<<filename.ml:323:10>>*/ extension_len
         /*<<filename.ml:323:10>>*/ (name);
     /*<<filename.ml:324:2>>*/ return 0 === l
            ? name
            : caml_call3
              (Stdlib_String[16],
               name,
               0,
               caml_ml_string_length(name) - l | 0) /*<<filename.ml:324:68>>*/ ;
    /*<<filename.ml:324:68>>*/ }
   var
    prng_key =
       /*<<filename.ml:330:2>>*/  /*<<filename.ml:330:2>>*/ caml_call2
        /*<<filename.ml:330:2>>*/ (Stdlib_Domain[10][1],
        0,
        Stdlib_Random[19][2]);
   function temp_file_name(temp_dir, prefix, suffix){
    var
     random_state =
        /*<<filename.ml:333:21>>*/  /*<<filename.ml:333:21>>*/ caml_call1
         /*<<filename.ml:333:21>>*/ (Stdlib_Domain[10][2], prng_key),
     rnd =
        /*<<filename.ml:334:12>>*/  /*<<filename.ml:334:12>>*/ caml_call1
         /*<<filename.ml:334:12>>*/ (Stdlib_Random[19][4], random_state)
       & 16777215;
     /*<<filename.ml:335:18>>*/ return  /*<<filename.ml:335:18>>*/ concat
             /*<<filename.ml:335:18>>*/ (temp_dir,
              /*<<filename.ml:335:18>>*/ caml_call4
               /*<<filename.ml:335:18>>*/ (Stdlib_Printf[4],
               _f_,
               prefix,
               rnd,
               suffix)) /*<<filename.ml:335:63>>*/ ;
    /*<<filename.ml:335:63>>*/ }
   var
    current_temp_dir_name =
       /*<<filename.ml:338:2>>*/  /*<<filename.ml:338:2>>*/ caml_call2
        /*<<filename.ml:338:2>>*/ (Stdlib_Domain[10][1],
        [0, function(_o_){ /*<<?>>*/ return _o_;}],
        function(param){
          /*<<filename.ml:338:58>>*/ return temp_dir_name$1 /*<<filename.ml:332:19>>*/ ;
         /*<<filename.ml:338:71>>*/ });
   function set_temp_dir_name(s){
     /*<<filename.ml:340:26>>*/ return  /*<<filename.ml:340:26>>*/ caml_call2
             /*<<filename.ml:340:26>>*/ (Stdlib_Domain[10][3],
             current_temp_dir_name,
             s) /*<<filename.ml:340:64>>*/ ;
    /*<<filename.ml:340:64>>*/ }
   function get_temp_dir_name(param){
     /*<<filename.ml:341:27>>*/ return  /*<<filename.ml:340:22>>*/ caml_call1
             /*<<filename.ml:340:22>>*/ (Stdlib_Domain[10][2],
             current_temp_dir_name) /*<<filename.ml:341:63>>*/ ;
    /*<<filename.ml:341:63>>*/ }
   function temp_file(opt, prefix, suffix){
    var
     temp_dir =
       opt
        ? opt[1]
        :  /*<<filename.ml:343:27>>*/ caml_call1
           /*<<filename.ml:343:27>>*/ (Stdlib_Domain[10][2],
           current_temp_dir_name),
     counter = 0;
     /*<<filename.ml:345:4>>*/ for(;;){
     var
      name =
         /*<<filename.ml:345:15>>*/  /*<<filename.ml:345:15>>*/ temp_file_name
          /*<<filename.ml:345:15>>*/ (temp_dir, prefix, suffix);
      /*<<filename.ml:346:4>>*/ try{
       /*<<filename.ml:347:6>>*/  /*<<filename.ml:347:6>>*/ runtime.caml_sys_close
        /*<<filename.ml:347:6>>*/ ( /*<<filename.ml:347:16>>*/ runtime.caml_sys_open
          /*<<filename.ml:347:16>>*/ (name, _g_, 384));
       /*<<filename.ml:347:6>>*/ return name /*<<filename.ml:347:6>>*/ ;
     }
     catch(e$0){
      var e = caml_wrap_exception(e$0);
      if(e[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(e, 0);
      if(20 <= counter)
        /*<<filename.ml:350:28>>*/ throw  /*<<filename.ml:350:28>>*/ caml_maybe_attach_backtrace
               /*<<filename.ml:350:28>>*/ (e, 0);
      var counter$0 =  /*<<filename.ml:350:41>>*/ counter + 1 | 0;
      counter = counter$0;
     }
    }
    /*<<filename.ml:351:15>>*/ }
   function open_temp_file(_m_, _l_, opt, prefix, suffix){
    var
     mode = _m_ ? _m_[1] : _h_,
     perms = _l_ ? _l_[1] : 384,
     temp_dir =
       opt
        ? opt[1]
        :  /*<<filename.ml:354:17>>*/ caml_call1
           /*<<filename.ml:354:17>>*/ (Stdlib_Domain[10][2],
           current_temp_dir_name),
     counter = 0;
     /*<<filename.ml:357:4>>*/ for(;;){
     var
      name =
         /*<<filename.ml:357:15>>*/  /*<<filename.ml:357:15>>*/ temp_file_name
          /*<<filename.ml:357:15>>*/ (temp_dir, prefix, suffix);
      /*<<filename.ml:358:4>>*/ try{
      var
       _n_ =
          /*<<filename.ml:359:6>>*/ [0,
          name,
           /*<<filename.ml:360:7>>*/ caml_call3
            /*<<filename.ml:360:7>>*/ (Stdlib[62],
            [0, 1, [0, 3, [0, 5, mode]]],
            perms,
            name)];
       /*<<filename.ml:359:6>>*/ return _n_ /*<<filename.ml:359:6>>*/ ;
     }
     catch(e$0){
      var e = caml_wrap_exception(e$0);
      if(e[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(e, 0);
      if(20 <= counter)
        /*<<filename.ml:362:28>>*/ throw  /*<<filename.ml:362:28>>*/ caml_maybe_attach_backtrace
               /*<<filename.ml:362:28>>*/ (e, 0);
      var counter$0 =  /*<<filename.ml:362:41>>*/ counter + 1 | 0;
      counter = counter$0;
     }
    }
    /*<<filename.ml:363:15>>*/ }
   function temp_dir(_k_, opt, prefix, suffix){
    var
     temp_dir =
       _k_
        ? _k_[1]
        :  /*<<filename.ml:365:26>>*/ caml_call1
           /*<<filename.ml:365:26>>*/ (Stdlib_Domain[10][2],
           current_temp_dir_name),
     perms = opt ? opt[1] : 448,
     counter = 0;
     /*<<filename.ml:368:4>>*/ for(;;){
     var
      name =
         /*<<filename.ml:368:15>>*/  /*<<filename.ml:368:15>>*/ temp_file_name
          /*<<filename.ml:368:15>>*/ (temp_dir, prefix, suffix);
      /*<<filename.ml:369:4>>*/ try{
       /*<<filename.ml:370:6>>*/  /*<<filename.ml:370:6>>*/ runtime.caml_sys_mkdir
        /*<<filename.ml:370:6>>*/ (name, perms);
       /*<<filename.ml:370:6>>*/ return name /*<<filename.ml:370:6>>*/ ;
     }
     catch(e$0){
      var e = caml_wrap_exception(e$0);
      if(e[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(e, 0);
      if(20 <= counter)
        /*<<filename.ml:373:28>>*/ throw  /*<<filename.ml:373:28>>*/ caml_maybe_attach_backtrace
               /*<<filename.ml:373:28>>*/ (e, 0);
      var counter$0 =  /*<<filename.ml:373:41>>*/ counter + 1 | 0;
      counter = counter$0;
     }
    }
    /*<<filename.ml:374:15>>*/ }
   var
    Stdlib_Filename =
      [0,
       current_dir_name$2,
       parent_dir_name$2,
       dir_sep$2,
       concat,
       is_relative$1,
       is_implicit$1,
       check_suffix$1,
       chop_suffix,
       chop_suffix_opt$1,
       extension,
       remove_extension,
       chop_extension,
       basename$2,
       dirname$2,
       null$3,
       temp_file,
       open_temp_file,
       temp_dir,
       get_temp_dir_name,
       set_temp_dir_name,
       quote$1,
       quote_command$1];
   runtime.caml_register_global(66, Stdlib_Filename, "Stdlib__Filename");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Complex
//# unitInfo: Requires: Stdlib, Stdlib__Float
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    zero = [254, 0., 0.],
    one = [254, 1., 0.],
    i = [254, 0., 1.],
    _a_ = [254, 0., 0.];
   function add(x, y){
     /*<<complex.ml:24:14>>*/ return [254, x[1] + y[1], x[2] + y[2]] /*<<complex.ml:24:14>>*/ ;
    /*<<complex.ml:24:54>>*/ }
   function sub(x, y){
     /*<<complex.ml:26:14>>*/ return [254, x[1] - y[1], x[2] - y[2]] /*<<complex.ml:26:14>>*/ ;
    /*<<complex.ml:26:54>>*/ }
   function neg(x){
     /*<<complex.ml:28:12>>*/ return [254, - x[1], - x[2]] /*<<complex.ml:28:12>>*/ ;
    /*<<complex.ml:28:42>>*/ }
   function conj(x){
     /*<<complex.ml:30:13>>*/ return [254, x[1], - x[2]] /*<<complex.ml:30:13>>*/ ;
    /*<<complex.ml:30:40>>*/ }
   function mul(x, y){
     /*<<complex.ml:32:14>>*/ return [254,
            x[1] * y[1] - x[2] * y[2],
            x[1] * y[2] + x[2] * y[1]] /*<<complex.ml:32:14>>*/ ;
    /*<<complex.ml:33:51>>*/ }
   function div(x, y){
     /*<<complex.ml:36:2>>*/ if
     ( /*<<complex.ml:36:23>>*/ Math.abs /*<<complex.ml:36:23>>*/ (y[2])
      <=  /*<<complex.ml:36:5>>*/ Math.abs /*<<complex.ml:36:5>>*/ (y[1])){
     var
      r =  /*<<complex.ml:37:12>>*/ y[2] / y[1],
      d =  /*<<complex.ml:38:12>>*/ y[1] + r * y[2];
      /*<<complex.ml:39:4>>*/ return [254,
             (x[1] + r * x[2]) / d,
             (x[2] - r * x[1]) / d] /*<<complex.ml:39:4>>*/ ;
    }
    var
     r$0 =  /*<<complex.ml:42:12>>*/ y[1] / y[2],
     d$0 =  /*<<complex.ml:43:12>>*/ y[2] + r$0 * y[1];
     /*<<complex.ml:44:4>>*/ return [254,
            (r$0 * x[1] + x[2]) / d$0,
            (r$0 * x[2] - x[1]) / d$0] /*<<complex.ml:44:4>>*/ ;
    /*<<complex.ml:45:37>>*/ }
   function inv(x){
     /*<<complex.ml:47:12>>*/ return  /*<<complex.ml:47:12>>*/ div
             /*<<complex.ml:47:12>>*/ (one, x) /*<<complex.ml:47:21>>*/ ;
    /*<<complex.ml:47:21>>*/ }
   function norm2(x){
     /*<<complex.ml:49:14>>*/ return x[1] * x[1] + x[2] * x[2] /*<<complex.ml:49:14>>*/ ;
    /*<<complex.ml:49:42>>*/ }
   function norm(x){
     /*<<complex.ml:51:13>>*/ return  /*<<complex.ml:51:13>>*/ runtime.caml_hypot_float
             /*<<complex.ml:51:13>>*/ (x[1], x[2]) /*<<complex.ml:51:34>>*/ ;
    /*<<complex.ml:51:34>>*/ }
   function arg(x){
     /*<<complex.ml:53:12>>*/ return  /*<<complex.ml:53:12>>*/ Math.atan2
             /*<<complex.ml:53:12>>*/ (x[2], x[1]) /*<<complex.ml:53:27>>*/ ;
    /*<<complex.ml:53:27>>*/ }
   function polar(n, a){
     /*<<complex.ml:55:16>>*/ return [254,
             /*<<complex.ml:55:23>>*/ Math.cos /*<<complex.ml:55:23>>*/ (a)
            * n,
             /*<<complex.ml:55:40>>*/ Math.sin /*<<complex.ml:55:40>>*/ (a)
            * n] /*<<complex.ml:55:16>>*/ ;
    /*<<complex.ml:55:52>>*/ }
   function sqrt(x){
     /*<<complex.ml:58:2>>*/ if(x[1] === 0. && x[2] === 0.)
      /*<<complex.ml:58:35>>*/ return _a_ /*<<complex.ml:58:35>>*/ ;
    var
     r =
        /*<<complex.ml:60:12>>*/  /*<<complex.ml:60:12>>*/ Math.abs
         /*<<complex.ml:60:12>>*/ (x[1]),
     i =
        /*<<complex.ml:60:35>>*/  /*<<complex.ml:60:35>>*/ Math.abs
         /*<<complex.ml:60:35>>*/ (x[2]);
    if(i <= r)
     var
      q =  /*<<complex.ml:63:16>>*/ i / r,
      w =
         /*<<complex.ml:64:8>>*/ Math.sqrt /*<<complex.ml:64:8>>*/ (r)
        *
          /*<<complex.ml:64:19>>*/ Math.sqrt
           /*<<complex.ml:64:19>>*/ (0.5
           *
            (1.
            +
              /*<<complex.ml:64:39>>*/ Math.sqrt
               /*<<complex.ml:64:39>>*/ (1. + q * q)));
    else
     var
      q$0 =  /*<<complex.ml:66:16>>*/ r / i,
      w =
         /*<<complex.ml:67:8>>*/ Math.sqrt /*<<complex.ml:67:8>>*/ (i)
        *
          /*<<complex.ml:67:19>>*/ Math.sqrt
           /*<<complex.ml:67:19>>*/ (0.5
           *
            (q$0
            +
              /*<<complex.ml:67:37>>*/ Math.sqrt
               /*<<complex.ml:67:37>>*/ (1. + q$0 * q$0)));
    if(0. <= x[1])
      /*<<complex.ml:70:9>>*/ return [254, w, 0.5 * x[2] / w] /*<<complex.ml:70:9>>*/ ;
    var w$0 = 0. <= x[2] ? w : - w;
     /*<<complex.ml:71:9>>*/ return [254, 0.5 * i / w, w$0] /*<<complex.ml:71:9>>*/ ;
    /*<<complex.ml:72:5>>*/ }
   function exp(x){
    var
     e =
        /*<<complex.ml:75:10>>*/  /*<<complex.ml:75:10>>*/ Math.exp
         /*<<complex.ml:75:10>>*/ (x[1]);
     /*<<complex.ml:75:22>>*/ return [254,
            e
            *
              /*<<complex.ml:75:34>>*/ Math.cos
               /*<<complex.ml:75:34>>*/ (x[2]),
            e
            *
              /*<<complex.ml:75:54>>*/ Math.sin
               /*<<complex.ml:75:54>>*/ (x[2])] /*<<complex.ml:75:22>>*/ ;
    /*<<complex.ml:75:64>>*/ }
   function log(x){
    var
     _b_ =
        /*<<complex.ml:77:38>>*/  /*<<complex.ml:77:38>>*/ Math.atan2
         /*<<complex.ml:77:38>>*/ (x[2], x[1]);
     /*<<complex.ml:77:12>>*/ return [254,
             /*<<complex.ml:77:19>>*/ Math.log
              /*<<complex.ml:77:19>>*/ ( /*<<complex.ml:77:23>>*/ norm
                /*<<complex.ml:77:23>>*/ (x)),
            _b_] /*<<complex.ml:77:12>>*/ ;
    /*<<complex.ml:77:55>>*/ }
   function pow(x, y){
     /*<<complex.ml:79:14>>*/ return  /*<<complex.ml:79:18>>*/ exp
             /*<<complex.ml:79:18>>*/ ( /*<<complex.ml:79:18>>*/ mul
               /*<<complex.ml:79:18>>*/ (y,
                /*<<complex.ml:79:25>>*/ log /*<<complex.ml:79:25>>*/ (x))) /*<<complex.ml:79:33>>*/ ;
    /*<<complex.ml:79:33>>*/ }
   var
    Stdlib_Complex =
      [0,
       zero,
       one,
       i,
       neg,
       conj,
       add,
       sub,
       mul,
       inv,
       div,
       sqrt,
       norm2,
       norm,
       arg,
       polar,
       exp,
       log,
       pow];
   runtime.caml_register_global(15, Stdlib_Complex, "Stdlib__Complex");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__ArrayLabels
//# unitInfo: Requires: Stdlib__Array
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Array = global_data.Stdlib__Array,
    init = Stdlib_Array[1],
    make_matrix = Stdlib_Array[2],
    init_matrix = Stdlib_Array[3],
    append = Stdlib_Array[4],
    concat = Stdlib_Array[5],
    sub = Stdlib_Array[6],
    copy = Stdlib_Array[7],
    fill = Stdlib_Array[8],
    blit = Stdlib_Array[9],
    to_list = Stdlib_Array[10],
    of_list = Stdlib_Array[11],
    iter = Stdlib_Array[12],
    iteri = Stdlib_Array[13],
    map = Stdlib_Array[14],
    map_inplace = Stdlib_Array[15],
    mapi = Stdlib_Array[16],
    mapi_inplace = Stdlib_Array[17],
    fold_left = Stdlib_Array[18],
    fold_left_map = Stdlib_Array[19],
    fold_right = Stdlib_Array[20],
    iter2 = Stdlib_Array[21],
    map2 = Stdlib_Array[22],
    for_all = Stdlib_Array[23],
    exists = Stdlib_Array[24],
    for_all2 = Stdlib_Array[25],
    exists2 = Stdlib_Array[26],
    mem = Stdlib_Array[27],
    memq = Stdlib_Array[28],
    find_opt = Stdlib_Array[29],
    find_index = Stdlib_Array[30],
    find_map = Stdlib_Array[31],
    find_mapi = Stdlib_Array[32],
    split = Stdlib_Array[33],
    combine = Stdlib_Array[34],
    sort = Stdlib_Array[35],
    stable_sort = Stdlib_Array[36],
    fast_sort = Stdlib_Array[37],
    shuffle = Stdlib_Array[38],
    to_seq = Stdlib_Array[39],
    to_seqi = Stdlib_Array[40],
    of_seq = Stdlib_Array[41],
    Floatarray = Stdlib_Array[42],
    Stdlib_ArrayLabels =
      [0,
       init,
       make_matrix,
       init_matrix,
       append,
       concat,
       sub,
       copy,
       fill,
       blit,
       to_list,
       of_list,
       iter,
       iteri,
       map,
       map_inplace,
       mapi,
       mapi_inplace,
       fold_left,
       fold_left_map,
       fold_right,
       iter2,
       map2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find_opt,
       find_index,
       find_map,
       find_mapi,
       split,
       combine,
       sort,
       stable_sort,
       fast_sort,
       shuffle,
       to_seq,
       to_seqi,
       of_seq,
       Floatarray];
   runtime.caml_register_global(1, Stdlib_ArrayLabels, "Stdlib__ArrayLabels");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__ListLabels
//# unitInfo: Requires: Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    length = Stdlib_List[1],
    compare_lengths = Stdlib_List[2],
    compare_length_with = Stdlib_List[3],
    is_empty = Stdlib_List[4],
    cons = Stdlib_List[5],
    hd = Stdlib_List[6],
    tl = Stdlib_List[7],
    nth = Stdlib_List[8],
    nth_opt = Stdlib_List[9],
    rev = Stdlib_List[10],
    init = Stdlib_List[11],
    append = Stdlib_List[12],
    rev_append = Stdlib_List[13],
    concat = Stdlib_List[14],
    flatten = Stdlib_List[15],
    equal = Stdlib_List[16],
    compare = Stdlib_List[17],
    iter = Stdlib_List[18],
    iteri = Stdlib_List[19],
    map = Stdlib_List[20],
    mapi = Stdlib_List[21],
    rev_map = Stdlib_List[22],
    filter_map = Stdlib_List[23],
    concat_map = Stdlib_List[24],
    fold_left_map = Stdlib_List[25],
    fold_left = Stdlib_List[26],
    fold_right = Stdlib_List[27],
    iter2 = Stdlib_List[28],
    map2 = Stdlib_List[29],
    rev_map2 = Stdlib_List[30],
    fold_left2 = Stdlib_List[31],
    fold_right2 = Stdlib_List[32],
    for_all = Stdlib_List[33],
    exists = Stdlib_List[34],
    for_all2 = Stdlib_List[35],
    exists2 = Stdlib_List[36],
    mem = Stdlib_List[37],
    memq = Stdlib_List[38],
    find = Stdlib_List[39],
    find_opt = Stdlib_List[40],
    find_index = Stdlib_List[41],
    find_map = Stdlib_List[42],
    find_mapi = Stdlib_List[43],
    filter = Stdlib_List[44],
    find_all = Stdlib_List[45],
    filteri = Stdlib_List[46],
    partition = Stdlib_List[47],
    partition_map = Stdlib_List[48],
    assoc = Stdlib_List[49],
    assoc_opt = Stdlib_List[50],
    assq = Stdlib_List[51],
    assq_opt = Stdlib_List[52],
    mem_assoc = Stdlib_List[53],
    mem_assq = Stdlib_List[54],
    remove_assoc = Stdlib_List[55],
    remove_assq = Stdlib_List[56],
    split = Stdlib_List[57],
    combine = Stdlib_List[58],
    sort = Stdlib_List[59],
    stable_sort = Stdlib_List[60],
    fast_sort = Stdlib_List[61],
    sort_uniq = Stdlib_List[62],
    merge = Stdlib_List[63],
    to_seq = Stdlib_List[64],
    of_seq = Stdlib_List[65],
    Stdlib_ListLabels =
      [0,
       length,
       compare_lengths,
       compare_length_with,
       is_empty,
       cons,
       hd,
       tl,
       nth,
       nth_opt,
       rev,
       init,
       append,
       rev_append,
       concat,
       flatten,
       equal,
       compare,
       iter,
       iteri,
       map,
       mapi,
       rev_map,
       filter_map,
       concat_map,
       fold_left_map,
       fold_left,
       fold_right,
       iter2,
       map2,
       rev_map2,
       fold_left2,
       fold_right2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find,
       find_opt,
       find_index,
       find_map,
       find_mapi,
       filter,
       find_all,
       filteri,
       partition,
       partition_map,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       sort,
       stable_sort,
       fast_sort,
       sort_uniq,
       merge,
       to_seq,
       of_seq];
   runtime.caml_register_global(1, Stdlib_ListLabels, "Stdlib__ListLabels");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__BytesLabels
//# unitInfo: Requires: Stdlib__Bytes
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    make = Stdlib_Bytes[1],
    init = Stdlib_Bytes[2],
    empty = Stdlib_Bytes[3],
    copy = Stdlib_Bytes[4],
    of_string = Stdlib_Bytes[5],
    to_string = Stdlib_Bytes[6],
    sub = Stdlib_Bytes[7],
    sub_string = Stdlib_Bytes[8],
    extend = Stdlib_Bytes[9],
    fill = Stdlib_Bytes[10],
    blit = Stdlib_Bytes[11],
    blit_string = Stdlib_Bytes[12],
    concat = Stdlib_Bytes[13],
    cat = Stdlib_Bytes[14],
    iter = Stdlib_Bytes[15],
    iteri = Stdlib_Bytes[16],
    map = Stdlib_Bytes[17],
    mapi = Stdlib_Bytes[18],
    fold_left = Stdlib_Bytes[19],
    fold_right = Stdlib_Bytes[20],
    for_all = Stdlib_Bytes[21],
    exists = Stdlib_Bytes[22],
    trim = Stdlib_Bytes[23],
    escaped = Stdlib_Bytes[24],
    index = Stdlib_Bytes[25],
    index_opt = Stdlib_Bytes[26],
    rindex = Stdlib_Bytes[27],
    rindex_opt = Stdlib_Bytes[28],
    index_from = Stdlib_Bytes[29],
    index_from_opt = Stdlib_Bytes[30],
    rindex_from = Stdlib_Bytes[31],
    rindex_from_opt = Stdlib_Bytes[32],
    contains = Stdlib_Bytes[33],
    contains_from = Stdlib_Bytes[34],
    rcontains_from = Stdlib_Bytes[35],
    uppercase_ascii = Stdlib_Bytes[36],
    lowercase_ascii = Stdlib_Bytes[37],
    capitalize_ascii = Stdlib_Bytes[38],
    uncapitalize_ascii = Stdlib_Bytes[39],
    compare = Stdlib_Bytes[40],
    equal = Stdlib_Bytes[41],
    starts_with = Stdlib_Bytes[42],
    ends_with = Stdlib_Bytes[43],
    unsafe_to_string = Stdlib_Bytes[44],
    unsafe_of_string = Stdlib_Bytes[45],
    split_on_char = Stdlib_Bytes[46],
    to_seq = Stdlib_Bytes[47],
    to_seqi = Stdlib_Bytes[48],
    of_seq = Stdlib_Bytes[49],
    get_utf_8_uchar = Stdlib_Bytes[50],
    set_utf_8_uchar = Stdlib_Bytes[51],
    is_valid_utf_8 = Stdlib_Bytes[52],
    get_utf_16be_uchar = Stdlib_Bytes[53],
    set_utf_16be_uchar = Stdlib_Bytes[54],
    is_valid_utf_16be = Stdlib_Bytes[55],
    get_utf_16le_uchar = Stdlib_Bytes[56],
    set_utf_16le_uchar = Stdlib_Bytes[57],
    is_valid_utf_16le = Stdlib_Bytes[58],
    get_uint8 = Stdlib_Bytes[59],
    get_int8 = Stdlib_Bytes[60],
    get_uint16_ne = Stdlib_Bytes[61],
    get_uint16_be = Stdlib_Bytes[62],
    get_uint16_le = Stdlib_Bytes[63],
    get_int16_ne = Stdlib_Bytes[64],
    get_int16_be = Stdlib_Bytes[65],
    get_int16_le = Stdlib_Bytes[66],
    get_int32_ne = Stdlib_Bytes[67],
    get_int32_be = Stdlib_Bytes[68],
    get_int32_le = Stdlib_Bytes[69],
    get_int64_ne = Stdlib_Bytes[70],
    get_int64_be = Stdlib_Bytes[71],
    get_int64_le = Stdlib_Bytes[72],
    set_uint8 = Stdlib_Bytes[73],
    set_int8 = Stdlib_Bytes[74],
    set_uint16_ne = Stdlib_Bytes[75],
    set_uint16_be = Stdlib_Bytes[76],
    set_uint16_le = Stdlib_Bytes[77],
    set_int16_ne = Stdlib_Bytes[78],
    set_int16_be = Stdlib_Bytes[79],
    set_int16_le = Stdlib_Bytes[80],
    set_int32_ne = Stdlib_Bytes[81],
    set_int32_be = Stdlib_Bytes[82],
    set_int32_le = Stdlib_Bytes[83],
    set_int64_ne = Stdlib_Bytes[84],
    set_int64_be = Stdlib_Bytes[85],
    set_int64_le = Stdlib_Bytes[86],
    unsafe_escape = Stdlib_Bytes[87],
    Stdlib_BytesLabels =
      [0,
       make,
       init,
       empty,
       copy,
       of_string,
       to_string,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit_string,
       concat,
       cat,
       iter,
       iteri,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       compare,
       equal,
       starts_with,
       ends_with,
       unsafe_to_string,
       unsafe_of_string,
       split_on_char,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       set_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       set_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       set_utf_16le_uchar,
       is_valid_utf_16le,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       set_uint8,
       set_int8,
       set_uint16_ne,
       set_uint16_be,
       set_uint16_le,
       set_int16_ne,
       set_int16_be,
       set_int16_le,
       set_int32_ne,
       set_int32_be,
       set_int32_le,
       set_int64_ne,
       set_int64_be,
       set_int64_le,
       unsafe_escape];
   runtime.caml_register_global(1, Stdlib_BytesLabels, "Stdlib__BytesLabels");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__StringLabels
//# unitInfo: Requires: Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_String = global_data.Stdlib__String,
    make = Stdlib_String[1],
    init = Stdlib_String[2],
    empty = Stdlib_String[3],
    of_bytes = Stdlib_String[4],
    to_bytes = Stdlib_String[5],
    blit = Stdlib_String[6],
    concat = Stdlib_String[7],
    cat = Stdlib_String[8],
    equal = Stdlib_String[9],
    compare = Stdlib_String[10],
    starts_with = Stdlib_String[11],
    ends_with = Stdlib_String[12],
    contains_from = Stdlib_String[13],
    rcontains_from = Stdlib_String[14],
    contains = Stdlib_String[15],
    sub = Stdlib_String[16],
    split_on_char = Stdlib_String[17],
    map = Stdlib_String[18],
    mapi = Stdlib_String[19],
    fold_left = Stdlib_String[20],
    fold_right = Stdlib_String[21],
    for_all = Stdlib_String[22],
    exists = Stdlib_String[23],
    trim = Stdlib_String[24],
    escaped = Stdlib_String[25],
    uppercase_ascii = Stdlib_String[26],
    lowercase_ascii = Stdlib_String[27],
    capitalize_ascii = Stdlib_String[28],
    uncapitalize_ascii = Stdlib_String[29],
    iter = Stdlib_String[30],
    iteri = Stdlib_String[31],
    index_from = Stdlib_String[32],
    index_from_opt = Stdlib_String[33],
    rindex_from = Stdlib_String[34],
    rindex_from_opt = Stdlib_String[35],
    index = Stdlib_String[36],
    index_opt = Stdlib_String[37],
    rindex = Stdlib_String[38],
    rindex_opt = Stdlib_String[39],
    to_seq = Stdlib_String[40],
    to_seqi = Stdlib_String[41],
    of_seq = Stdlib_String[42],
    get_utf_8_uchar = Stdlib_String[43],
    is_valid_utf_8 = Stdlib_String[44],
    get_utf_16be_uchar = Stdlib_String[45],
    is_valid_utf_16be = Stdlib_String[46],
    get_utf_16le_uchar = Stdlib_String[47],
    is_valid_utf_16le = Stdlib_String[48],
    get_uint8 = Stdlib_String[49],
    get_int8 = Stdlib_String[50],
    get_uint16_ne = Stdlib_String[51],
    get_uint16_be = Stdlib_String[52],
    get_uint16_le = Stdlib_String[53],
    get_int16_ne = Stdlib_String[54],
    get_int16_be = Stdlib_String[55],
    get_int16_le = Stdlib_String[56],
    get_int32_ne = Stdlib_String[57],
    hash = Stdlib_String[58],
    seeded_hash = Stdlib_String[59],
    get_int32_be = Stdlib_String[60],
    get_int32_le = Stdlib_String[61],
    get_int64_ne = Stdlib_String[62],
    get_int64_be = Stdlib_String[63],
    get_int64_le = Stdlib_String[64],
    Stdlib_StringLabels =
      [0,
       make,
       init,
       empty,
       of_bytes,
       to_bytes,
       blit,
       concat,
       cat,
       equal,
       compare,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       is_valid_utf_16le,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       hash,
       seeded_hash,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le];
   runtime.caml_register_global
    (1, Stdlib_StringLabels, "Stdlib__StringLabels");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__MoreLabels
//# unitInfo: Requires: Stdlib__Hashtbl, Stdlib__Map, Stdlib__Set
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Set = global_data.Stdlib__Set,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_MoreLabels = [0, Stdlib_Hashtbl, Stdlib_Map, Stdlib_Set];
   runtime.caml_register_global(3, Stdlib_MoreLabels, "Stdlib__MoreLabels");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__StdLabels
(function(globalThis){
   "use strict";
   var runtime =  /*<<?>>*/ globalThis.jsoo_runtime, Stdlib_StdLabels = [0];
   runtime.caml_register_global(0, Stdlib_StdLabels, "Stdlib__StdLabels");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Effect
//# unitInfo: Requires: Stdlib, Stdlib__Callback, Stdlib__Printexc, Stdlib__Printf
//# unitInfo: Effects_without_cps: true
(function
  (globalThis){
   "use strict";
   var
    runtime =  /*<<?>>*/ globalThis.jsoo_runtime,
    caml_alloc_stack =  /*<<?>>*/ runtime.caml_alloc_stack,
    caml_continuation_use_noexc =
       /*<<?>>*/ runtime.caml_continuation_use_noexc,
    caml_fresh_oo_id =  /*<<?>>*/ runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace =
       /*<<?>>*/ runtime.caml_maybe_attach_backtrace,
    caml_restore_raw_backtrace =  /*<<?>>*/ runtime.caml_restore_raw_backtrace,
    caml_wrap_exception =  /*<<?>>*/ runtime.caml_wrap_exception,
    jsoo_effect_not_supported =  /*<<?>>*/ runtime.jsoo_effect_not_supported;
   function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) === 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) === 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Printexc = global_data.Stdlib__Printexc,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Callback = global_data.Stdlib__Callback,
    Unhandled =
       /*<<effect.ml:18:12>>*/ [248,
       "Stdlib.Effect.Unhandled",
       caml_fresh_oo_id(0)],
    Continuation_already_resumed =
       /*<<effect.ml:19:0>>*/ [248,
       "Stdlib.Effect.Continuation_already_resumed",
       caml_fresh_oo_id(0)],
    _a_ =
      [0,
       [11, "Stdlib.Effect.Unhandled(", [2, 0, [12, 41, 0]]],
       "Stdlib.Effect.Unhandled(%s)"];
   function printer(param){
     /*<<effect.ml:22:16>>*/ if(param[1] !== Unhandled)
      /*<<effect.ml:28:11>>*/ return 0 /*<<effect.ml:28:11>>*/ ;
    var
     x = param[2],
     _i_ =
        /*<<effect.ml:25:12>>*/  /*<<effect.ml:25:12>>*/ caml_call1
         /*<<effect.ml:25:12>>*/ (Stdlib_Printexc[26], x),
     msg =
        /*<<effect.ml:24:18>>*/  /*<<effect.ml:24:18>>*/ caml_call2
         /*<<effect.ml:24:18>>*/ (Stdlib_Printf[4], _a_, _i_);
     /*<<effect.ml:27:8>>*/ return [0, msg] /*<<effect.ml:27:8>>*/ ;
    /*<<effect.ml:28:15>>*/ }
    /*<<effect.ml:30:2>>*/  /*<<effect.ml:30:2>>*/ caml_call1
     /*<<effect.ml:30:2>>*/ (Stdlib_Printexc[9], printer);
   var
    Should_not_see_this =
       /*<<effect.ml:33:12>>*/ [248,
       "Stdlib.Effect.Should_not_see_this__",
       caml_fresh_oo_id(0)];
    /*<<effect.ml:34:8>>*/  /*<<effect.ml:34:8>>*/ caml_call2
     /*<<effect.ml:34:8>>*/ (Stdlib_Callback[2],
     "Effect.Unhandled",
     [0, Unhandled, Should_not_see_this]);
    /*<<effect.ml:36:8>>*/  /*<<effect.ml:36:8>>*/ caml_call2
     /*<<effect.ml:36:8>>*/ (Stdlib_Callback[2],
     "Effect.Continuation_already_resumed",
     Continuation_already_resumed);
   function continue$0(k, v){
    var
     _h_ =
        /*<<effect.ml:62:11>>*/  /*<<effect.ml:62:11>>*/ caml_continuation_use_noexc
         /*<<effect.ml:62:11>>*/ (k);
    function _g_(x){
      /*<<effect.ml:62:41>>*/ return x /*<<effect.ml:62:41>>*/ ;
     /*<<effect.ml:62:42>>*/ }
     /*<<effect.ml:62:11>>*/ return  /*<<effect.ml:62:11>>*/ jsoo_effect_not_supported
             /*<<effect.ml:62:11>>*/ () /*<<effect.ml:62:65>>*/ ;
    /*<<effect.ml:62:65>>*/ }
   function discontinue(k, e){
    var
     _f_ =
        /*<<effect.ml:65:11>>*/  /*<<effect.ml:65:11>>*/ caml_continuation_use_noexc
         /*<<effect.ml:65:11>>*/ (k);
    function _e_(e){
      /*<<effect.ml:65:41>>*/ throw  /*<<effect.ml:65:41>>*/ caml_maybe_attach_backtrace
             /*<<effect.ml:65:41>>*/ (e, 1);
     /*<<effect.ml:65:48>>*/ }
     /*<<effect.ml:65:11>>*/ return  /*<<effect.ml:65:11>>*/ jsoo_effect_not_supported
             /*<<effect.ml:65:11>>*/ () /*<<effect.ml:65:71>>*/ ;
    /*<<effect.ml:65:71>>*/ }
   function discontinue_with_backtrace(k, e, bt){
    var
     _d_ =
        /*<<effect.ml:68:11>>*/  /*<<effect.ml:68:11>>*/ caml_continuation_use_noexc
         /*<<effect.ml:68:11>>*/ (k);
    function _c_(e){
      /*<<effect.ml:68:41>>*/ caml_restore_raw_backtrace(e, bt);
      /*<<effect.ml:68:41>>*/ throw  /*<<effect.ml:68:41>>*/ caml_maybe_attach_backtrace
             /*<<effect.ml:68:41>>*/ (e, 0);
     /*<<effect.ml:68:75>>*/ }
     /*<<effect.ml:68:11>>*/ return  /*<<effect.ml:68:11>>*/ jsoo_effect_not_supported
             /*<<effect.ml:68:11>>*/ () /*<<effect.ml:69:27>>*/ ;
    /*<<effect.ml:69:27>>*/ }
   function match_with(comp, arg, handler){
    function effc(eff, k, last_fiber){
     var
      match =
         /*<<effect.ml:81:12>>*/  /*<<effect.ml:81:12>>*/ caml_call1
          /*<<effect.ml:81:12>>*/ (handler[3], eff);
     if(! match)
       /*<<effect.ml:85:16>>*/ return  /*<<effect.ml:85:16>>*/ jsoo_effect_not_supported
               /*<<effect.ml:85:16>>*/ () /*<<effect.ml:85:42>>*/ ;
     var f = match[1];
     k[2] = last_fiber;
      /*<<effect.ml:84:10>>*/ return  /*<<effect.ml:84:10>>*/ caml_call1
              /*<<effect.ml:84:10>>*/ (f, k) /*<<effect.ml:85:42>>*/ ;
     /*<<effect.ml:85:42>>*/ }
    var
     s =
        /*<<effect.ml:87:12>>*/  /*<<effect.ml:87:12>>*/ caml_alloc_stack
         /*<<effect.ml:87:12>>*/ (handler[1], handler[2], effc);
     /*<<effect.ml:88:4>>*/ return  /*<<effect.ml:88:4>>*/ jsoo_effect_not_supported
             /*<<effect.ml:88:4>>*/ () /*<<effect.ml:88:23>>*/ ;
    /*<<effect.ml:88:23>>*/ }
   function try_with(comp, arg, handler){
    function effc(eff, k, last_fiber){
     var
      match =
         /*<<effect.ml:95:12>>*/  /*<<effect.ml:95:12>>*/ caml_call1
          /*<<effect.ml:95:12>>*/ (handler[1], eff);
     if(! match)
       /*<<effect.ml:99:16>>*/ return  /*<<effect.ml:99:16>>*/ jsoo_effect_not_supported
               /*<<effect.ml:99:16>>*/ () /*<<effect.ml:99:42>>*/ ;
     var f = match[1];
     k[2] = last_fiber;
      /*<<effect.ml:98:10>>*/ return  /*<<effect.ml:98:10>>*/ caml_call1
              /*<<effect.ml:98:10>>*/ (f, k) /*<<effect.ml:99:42>>*/ ;
     /*<<effect.ml:99:42>>*/ }
    var
     s =
        /*<<effect.ml:101:12>>*/  /*<<effect.ml:101:12>>*/ caml_alloc_stack
         /*<<effect.ml:101:12>>*/ (function(x){
           /*<<effect.ml:101:34>>*/ return x /*<<effect.ml:101:34>>*/ ;
          /*<<effect.ml:101:35>>*/ },
         function(e){
           /*<<effect.ml:101:47>>*/ throw  /*<<effect.ml:101:47>>*/ caml_maybe_attach_backtrace
                  /*<<effect.ml:101:47>>*/ (e, 1);
          /*<<effect.ml:101:54>>*/ },
         effc);
     /*<<effect.ml:102:4>>*/ return  /*<<effect.ml:102:4>>*/ jsoo_effect_not_supported
             /*<<effect.ml:102:4>>*/ () /*<<effect.ml:102:23>>*/ ;
    /*<<effect.ml:102:23>>*/ }
   var
    Deep =
       /*<<effect.ml:46:14>>*/ [0,
       continue$0,
       discontinue,
       discontinue_with_backtrace,
       match_with,
       try_with],
    cst_Initial_setup = "Initial_setup__",
    cst_E = "E",
    cst_impossible = "impossible";
   function fiber(f){
    var
     Initial_setup =
        /*<<effect.ml:124:38>>*/ [248, cst_Initial_setup, caml_fresh_oo_id(0)],
     E =  /*<<effect.ml:125:18>>*/ [248, cst_E, caml_fresh_oo_id(0)];
    function f$0(param){
      /*<<effect.ml:126:16>>*/ return  /*<<effect.ml:126:18>>*/ caml_call1
              /*<<effect.ml:126:18>>*/ (f,
               /*<<effect.ml:126:18>>*/ jsoo_effect_not_supported
                /*<<effect.ml:126:18>>*/ ()) /*<<effect.ml:126:45>>*/ ;
     /*<<effect.ml:126:45>>*/ }
    function error(param){
      /*<<effect.ml:127:18>>*/ return  /*<<effect.ml:127:18>>*/ caml_call1
              /*<<effect.ml:127:18>>*/ (Stdlib[2], cst_impossible) /*<<effect.ml:127:39>>*/ ;
     /*<<effect.ml:127:39>>*/ }
    function effc(eff, k, last_fiber){
      /*<<effect.ml:129:6>>*/ if(eff !== Initial_setup)
       /*<<effect.ml:133:13>>*/ return  /*<<effect.ml:133:13>>*/ error
               /*<<effect.ml:133:13>>*/ (0) /*<<effect.ml:133:21>>*/ ;
     k[2] = last_fiber;
      /*<<effect.ml:132:10>>*/ throw [0, E, k];
     /*<<effect.ml:133:21>>*/ }
    var
     s =
        /*<<effect.ml:135:12>>*/  /*<<effect.ml:135:12>>*/ caml_alloc_stack
         /*<<effect.ml:135:12>>*/ (error, error, effc);
     /*<<effect.ml:136:4>>*/ try{
      /*<<effect.ml:136:10>>*/  /*<<effect.ml:136:10>>*/ jsoo_effect_not_supported
       /*<<effect.ml:136:10>>*/ ();
     var _b_ = 0;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== E) throw caml_maybe_attach_backtrace(exn, 0);
     var k = exn[2];
      /*<<effect.ml:137:23>>*/ return k /*<<effect.ml:137:23>>*/ ;
    }
     /*<<effect.ml:138:11>>*/ return  /*<<effect.ml:138:11>>*/ error
             /*<<effect.ml:138:11>>*/ (0) /*<<effect.ml:138:19>>*/ ;
    /*<<effect.ml:138:19>>*/ }
   function continue_gen(k, resume_fun, v, handler){
    function effc(eff, k, last_fiber){
     var
      match =
         /*<<effect.ml:157:12>>*/  /*<<effect.ml:157:12>>*/ caml_call1
          /*<<effect.ml:157:12>>*/ (handler[3], eff);
     if(! match)
       /*<<effect.ml:161:16>>*/ return  /*<<effect.ml:161:16>>*/ jsoo_effect_not_supported
               /*<<effect.ml:161:16>>*/ () /*<<effect.ml:161:42>>*/ ;
     var f = match[1];
     k[2] = last_fiber;
      /*<<effect.ml:160:10>>*/ return  /*<<effect.ml:160:10>>*/ caml_call1
              /*<<effect.ml:160:10>>*/ (f, k) /*<<effect.ml:161:42>>*/ ;
     /*<<effect.ml:161:42>>*/ }
    var
     stack =
        /*<<effect.ml:164:16>>*/  /*<<effect.ml:164:16>>*/ runtime.caml_continuation_use_and_update_handler_noexc
         /*<<effect.ml:164:16>>*/ (k, handler[1], handler[2], effc);
     /*<<effect.ml:165:4>>*/ return  /*<<effect.ml:165:4>>*/ jsoo_effect_not_supported
             /*<<effect.ml:165:4>>*/ () /*<<effect.ml:165:40>>*/ ;
    /*<<effect.ml:165:40>>*/ }
   function continue_with(k, v, handler){
     /*<<effect.ml:168:4>>*/ return  /*<<effect.ml:168:4>>*/ continue_gen
             /*<<effect.ml:168:4>>*/ (k,
             function(x){
               /*<<effect.ml:168:29>>*/ return x /*<<effect.ml:168:29>>*/ ;
              /*<<effect.ml:168:30>>*/ },
             v,
             handler) /*<<effect.ml:168:41>>*/ ;
    /*<<effect.ml:168:41>>*/ }
   function discontinue_with(k, v, handler){
     /*<<effect.ml:171:4>>*/ return  /*<<effect.ml:171:4>>*/ continue_gen
             /*<<effect.ml:171:4>>*/ (k,
             function(e){
               /*<<effect.ml:171:29>>*/ throw  /*<<effect.ml:171:29>>*/ caml_maybe_attach_backtrace
                      /*<<effect.ml:171:29>>*/ (e, 1);
              /*<<effect.ml:171:36>>*/ },
             v,
             handler) /*<<effect.ml:171:47>>*/ ;
    /*<<effect.ml:171:47>>*/ }
   function discontinue_with_backtrace$0(k, v, bt, handler){
     /*<<effect.ml:174:4>>*/ return  /*<<effect.ml:174:4>>*/ continue_gen
             /*<<effect.ml:174:4>>*/ (k,
             function(e){
               /*<<effect.ml:174:29>>*/ caml_restore_raw_backtrace(e, bt);
               /*<<effect.ml:174:29>>*/ throw  /*<<effect.ml:174:29>>*/ caml_maybe_attach_backtrace
                      /*<<effect.ml:174:29>>*/ (e, 0);
              /*<<effect.ml:174:63>>*/ },
             v,
             handler) /*<<effect.ml:174:74>>*/ ;
    /*<<effect.ml:174:74>>*/ }
   var
    Stdlib_Effect =
      [0,
       Unhandled,
       Continuation_already_resumed,
       Deep,
       [0,
        fiber,
        continue_with,
        discontinue_with,
        discontinue_with_backtrace$0]];
   runtime.caml_register_global(13, Stdlib_Effect, "Stdlib__Effect");
   return;
   /*<<?>>*/ }
  (globalThis));
