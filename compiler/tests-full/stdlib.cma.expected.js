
//# unitInfo: Provides: CamlinternalFormatBasics
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
   function erase_rel(param){
     /*<<camlinternalFormatBasics.ml:528:8>>*/ if(typeof param === "number")
      /*<<camlinternalFormatBasics.ml:562:20>>*/ return 0;
     /*<<camlinternalFormatBasics.ml:528:8>>*/ switch(param[0]){
      case 0:
        /*<<camlinternalFormatBasics.ml:533:4>>*/  /*<<camlinternalFormatBasics.ml:533:4>>*/ var
        rest = param[1];
        /*<<camlinternalFormatBasics.ml:533:12>>*/ return [0, erase_rel(rest)];
      case 1:
        /*<<camlinternalFormatBasics.ml:535:4>>*/  /*<<camlinternalFormatBasics.ml:535:4>>*/ var
        rest$0 = param[1];
        /*<<camlinternalFormatBasics.ml:535:14>>*/ return [1,
               erase_rel(rest$0)];
      case 2:
        /*<<camlinternalFormatBasics.ml:537:4>>*/  /*<<camlinternalFormatBasics.ml:537:4>>*/ var
        rest$1 = param[1];
        /*<<camlinternalFormatBasics.ml:537:11>>*/ return [2,
               erase_rel(rest$1)];
      case 3:
        /*<<camlinternalFormatBasics.ml:539:4>>*/  /*<<camlinternalFormatBasics.ml:539:4>>*/ var
        rest$2 = param[1];
        /*<<camlinternalFormatBasics.ml:539:13>>*/ return [3,
               erase_rel(rest$2)];
      case 4:
        /*<<camlinternalFormatBasics.ml:543:4>>*/  /*<<camlinternalFormatBasics.ml:543:4>>*/ var
        rest$3 = param[1];
        /*<<camlinternalFormatBasics.ml:543:17>>*/ return [4,
               erase_rel(rest$3)];
      case 5:
        /*<<camlinternalFormatBasics.ml:541:4>>*/  /*<<camlinternalFormatBasics.ml:541:4>>*/ var
        rest$4 = param[1];
        /*<<camlinternalFormatBasics.ml:541:13>>*/ return [5,
               erase_rel(rest$4)];
      case 6:
        /*<<camlinternalFormatBasics.ml:545:4>>*/  /*<<camlinternalFormatBasics.ml:545:4>>*/ var
        rest$5 = param[1];
        /*<<camlinternalFormatBasics.ml:545:13>>*/ return [6,
               erase_rel(rest$5)];
      case 7:
        /*<<camlinternalFormatBasics.ml:547:4>>*/  /*<<camlinternalFormatBasics.ml:547:4>>*/ var
        rest$6 = param[1];
        /*<<camlinternalFormatBasics.ml:547:12>>*/ return [7,
               erase_rel(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1];
        /*<<camlinternalFormatBasics.ml:549:23>>*/ return [8,
               ty,
               erase_rel(rest$7)];
      case 9:
       var rest$8 = param[3], ty1 = param[1];
        /*<<camlinternalFormatBasics.ml:551:31>>*/ return [9,
               ty1,
               ty1,
               erase_rel(rest$8)];
      case 10:
        /*<<camlinternalFormatBasics.ml:553:4>>*/  /*<<camlinternalFormatBasics.ml:553:4>>*/ var
        rest$9 = param[1];
        /*<<camlinternalFormatBasics.ml:553:13>>*/ return [10,
               erase_rel(rest$9)];
      case 11:
        /*<<camlinternalFormatBasics.ml:555:4>>*/  /*<<camlinternalFormatBasics.ml:555:4>>*/ var
        rest$10 = param[1];
        /*<<camlinternalFormatBasics.ml:555:13>>*/ return [11,
               erase_rel(rest$10)];
      case 12:
        /*<<camlinternalFormatBasics.ml:557:4>>*/  /*<<camlinternalFormatBasics.ml:557:4>>*/ var
        rest$11 = param[1];
        /*<<camlinternalFormatBasics.ml:557:11>>*/ return [12,
               erase_rel(rest$11)];
      case 13:
        /*<<camlinternalFormatBasics.ml:559:4>>*/  /*<<camlinternalFormatBasics.ml:559:4>>*/ var
        rest$12 = param[1];
        /*<<camlinternalFormatBasics.ml:559:14>>*/ return [13,
               erase_rel(rest$12)];
      default:
        /*<<camlinternalFormatBasics.ml:561:4>>*/  /*<<camlinternalFormatBasics.ml:561:4>>*/ var
        rest$13 = param[1];
        /*<<camlinternalFormatBasics.ml:561:22>>*/ return [14,
               erase_rel(rest$13)];
    }
    /*<<camlinternalFormatBasics.ml:562:32>>*/ }
   function concat_fmtty(fmtty1, fmtty2){
     /*<<camlinternalFormatBasics.ml:590:21>>*/ if(typeof fmtty1 === "number")
      /*<<camlinternalFormatBasics.ml:621:20>>*/ return fmtty2;
     /*<<camlinternalFormatBasics.ml:590:21>>*/ switch(fmtty1[0]){
      case 0:
        /*<<camlinternalFormatBasics.ml:592:4>>*/  /*<<camlinternalFormatBasics.ml:592:4>>*/ var
        rest = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:592:12>>*/ return [0,
               concat_fmtty(rest, fmtty2)];
      case 1:
        /*<<camlinternalFormatBasics.ml:594:4>>*/  /*<<camlinternalFormatBasics.ml:594:4>>*/ var
        rest$0 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:594:14>>*/ return [1,
               concat_fmtty(rest$0, fmtty2)];
      case 2:
        /*<<camlinternalFormatBasics.ml:596:4>>*/  /*<<camlinternalFormatBasics.ml:596:4>>*/ var
        rest$1 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:596:11>>*/ return [2,
               concat_fmtty(rest$1, fmtty2)];
      case 3:
        /*<<camlinternalFormatBasics.ml:598:4>>*/  /*<<camlinternalFormatBasics.ml:598:4>>*/ var
        rest$2 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:598:13>>*/ return [3,
               concat_fmtty(rest$2, fmtty2)];
      case 4:
        /*<<camlinternalFormatBasics.ml:600:4>>*/  /*<<camlinternalFormatBasics.ml:600:4>>*/ var
        rest$3 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:600:17>>*/ return [4,
               concat_fmtty(rest$3, fmtty2)];
      case 5:
        /*<<camlinternalFormatBasics.ml:602:4>>*/  /*<<camlinternalFormatBasics.ml:602:4>>*/ var
        rest$4 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:602:13>>*/ return [5,
               concat_fmtty(rest$4, fmtty2)];
      case 6:
        /*<<camlinternalFormatBasics.ml:604:4>>*/  /*<<camlinternalFormatBasics.ml:604:4>>*/ var
        rest$5 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:604:13>>*/ return [6,
               concat_fmtty(rest$5, fmtty2)];
      case 7:
        /*<<camlinternalFormatBasics.ml:606:4>>*/  /*<<camlinternalFormatBasics.ml:606:4>>*/ var
        rest$6 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:606:12>>*/ return [7,
               concat_fmtty(rest$6, fmtty2)];
      case 8:
       var rest$7 = fmtty1[2], ty = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:618:23>>*/ return [8,
               ty,
               concat_fmtty(rest$7, fmtty2)];
      case 9:
       var rest$8 = fmtty1[3], ty2 = fmtty1[2], ty1 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:620:31>>*/ return [9,
               ty1,
               ty2,
               concat_fmtty(rest$8, fmtty2)];
      case 10:
        /*<<camlinternalFormatBasics.ml:608:4>>*/  /*<<camlinternalFormatBasics.ml:608:4>>*/ var
        rest$9 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:608:13>>*/ return [10,
               concat_fmtty(rest$9, fmtty2)];
      case 11:
        /*<<camlinternalFormatBasics.ml:610:4>>*/  /*<<camlinternalFormatBasics.ml:610:4>>*/ var
        rest$10 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:610:13>>*/ return [11,
               concat_fmtty(rest$10, fmtty2)];
      case 12:
        /*<<camlinternalFormatBasics.ml:612:4>>*/  /*<<camlinternalFormatBasics.ml:612:4>>*/ var
        rest$11 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:612:11>>*/ return [12,
               concat_fmtty(rest$11, fmtty2)];
      case 13:
        /*<<camlinternalFormatBasics.ml:614:4>>*/  /*<<camlinternalFormatBasics.ml:614:4>>*/ var
        rest$12 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:614:14>>*/ return [13,
               concat_fmtty(rest$12, fmtty2)];
      default:
        /*<<camlinternalFormatBasics.ml:616:4>>*/  /*<<camlinternalFormatBasics.ml:616:4>>*/ var
        rest$13 = fmtty1[1];
        /*<<camlinternalFormatBasics.ml:616:22>>*/ return [14,
               concat_fmtty(rest$13, fmtty2)];
    }
    /*<<camlinternalFormatBasics.ml:621:26>>*/ }
   function concat_fmt(fmt1, fmt2){
     /*<<camlinternalFormatBasics.ml:631:17>>*/ if(typeof fmt1 === "number")
      /*<<camlinternalFormatBasics.ml:690:4>>*/ return fmt2;
     /*<<camlinternalFormatBasics.ml:631:17>>*/ switch(fmt1[0]){
      case 0:
        /*<<camlinternalFormatBasics.ml:649:4>>*/  /*<<camlinternalFormatBasics.ml:649:4>>*/ var
        rest = fmt1[1];
        /*<<camlinternalFormatBasics.ml:649:9>>*/ return [0,
               concat_fmt(rest, fmt2)];
      case 1:
        /*<<camlinternalFormatBasics.ml:651:4>>*/  /*<<camlinternalFormatBasics.ml:651:4>>*/ var
        rest$0 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:651:14>>*/ return [1,
               concat_fmt(rest$0, fmt2)];
      case 2:
       var rest$1 = fmt1[2], pad = fmt1[1];
        /*<<camlinternalFormatBasics.ml:633:17>>*/ return [2,
               pad,
               concat_fmt(rest$1, fmt2)];
      case 3:
       var rest$2 = fmt1[2], pad$0 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:635:22>>*/ return [3,
               pad$0,
               concat_fmt(rest$2, fmt2)];
      case 4:
       var rest$3 = fmt1[4], prec = fmt1[3], pad$1 = fmt1[2], iconv = fmt1[1];
        /*<<camlinternalFormatBasics.ml:638:27>>*/ return [4,
               iconv,
               pad$1,
               prec,
               concat_fmt(rest$3, fmt2)];
      case 5:
       var
        rest$4 = fmt1[4],
        prec$0 = fmt1[3],
        pad$2 = fmt1[2],
        iconv$0 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:640:29>>*/ return [5,
               iconv$0,
               pad$2,
               prec$0,
               concat_fmt(rest$4, fmt2)];
      case 6:
       var
        rest$5 = fmt1[4],
        prec$1 = fmt1[3],
        pad$3 = fmt1[2],
        iconv$1 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:642:33>>*/ return [6,
               iconv$1,
               pad$3,
               prec$1,
               concat_fmt(rest$5, fmt2)];
      case 7:
       var
        rest$6 = fmt1[4],
        prec$2 = fmt1[3],
        pad$4 = fmt1[2],
        iconv$2 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:644:29>>*/ return [7,
               iconv$2,
               pad$4,
               prec$2,
               concat_fmt(rest$6, fmt2)];
      case 8:
       var
        rest$7 = fmt1[4],
        prec$3 = fmt1[3],
        pad$5 = fmt1[2],
        fconv = fmt1[1];
        /*<<camlinternalFormatBasics.ml:646:29>>*/ return [8,
               fconv,
               pad$5,
               prec$3,
               concat_fmt(rest$7, fmt2)];
      case 9:
       var rest$8 = fmt1[2], pad$6 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:653:15>>*/ return [9,
               pad$6,
               concat_fmt(rest$8, fmt2)];
      case 10:
        /*<<camlinternalFormatBasics.ml:663:4>>*/  /*<<camlinternalFormatBasics.ml:663:4>>*/ var
        rest$9 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:663:10>>*/ return [10,
               concat_fmt(rest$9, fmt2)];
      case 11:
       var rest$10 = fmt1[2], str = fmt1[1];
        /*<<camlinternalFormatBasics.ml:666:25>>*/ return [11,
               str,
               concat_fmt(rest$10, fmt2)];
      case 12:
       var rest$11 = fmt1[2], chr = fmt1[1];
        /*<<camlinternalFormatBasics.ml:668:25>>*/ return [12,
               chr,
               concat_fmt(rest$11, fmt2)];
      case 13:
       var rest$12 = fmt1[3], fmtty = fmt1[2], pad$7 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:671:30>>*/ return [13,
               pad$7,
               fmtty,
               concat_fmt(rest$12, fmt2)];
      case 14:
       var rest$13 = fmt1[3], fmtty$0 = fmt1[2], pad$8 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:673:30>>*/ return [14,
               pad$8,
               fmtty$0,
               concat_fmt(rest$13, fmt2)];
      case 15:
        /*<<camlinternalFormatBasics.ml:655:4>>*/  /*<<camlinternalFormatBasics.ml:655:4>>*/ var
        rest$14 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:655:10>>*/ return [15,
               concat_fmt(rest$14, fmt2)];
      case 16:
        /*<<camlinternalFormatBasics.ml:657:4>>*/  /*<<camlinternalFormatBasics.ml:657:4>>*/ var
        rest$15 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:657:10>>*/ return [16,
               concat_fmt(rest$15, fmt2)];
      case 17:
       var rest$16 = fmt1[2], fmting_lit = fmt1[1];
        /*<<camlinternalFormatBasics.ml:685:32>>*/ return [17,
               fmting_lit,
               concat_fmt(rest$16, fmt2)];
      case 18:
       var rest$17 = fmt1[2], fmting_gen = fmt1[1];
        /*<<camlinternalFormatBasics.ml:687:32>>*/ return [18,
               fmting_gen,
               concat_fmt(rest$17, fmt2)];
      case 19:
        /*<<camlinternalFormatBasics.ml:661:4>>*/  /*<<camlinternalFormatBasics.ml:661:4>>*/ var
        rest$18 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:661:11>>*/ return [19,
               concat_fmt(rest$18, fmt2)];
      case 20:
       var rest$19 = fmt1[3], char_set = fmt1[2], width_opt = fmt1[1];
        /*<<camlinternalFormatBasics.ml:676:40>>*/ return [20,
               width_opt,
               char_set,
               concat_fmt(rest$19, fmt2)];
      case 21:
       var rest$20 = fmt1[2], counter = fmt1[1];
        /*<<camlinternalFormatBasics.ml:678:31>>*/ return [21,
               counter,
               concat_fmt(rest$20, fmt2)];
      case 22:
        /*<<camlinternalFormatBasics.ml:680:4>>*/  /*<<camlinternalFormatBasics.ml:680:4>>*/ var
        rest$21 = fmt1[1];
        /*<<camlinternalFormatBasics.ml:680:19>>*/ return [22,
               concat_fmt(rest$21, fmt2)];
      case 23:
       var rest$22 = fmt1[2], ign = fmt1[1];
        /*<<camlinternalFormatBasics.ml:682:24>>*/ return [23,
               ign,
               concat_fmt(rest$22, fmt2)];
      default:
       var rest$23 = fmt1[3], f = fmt1[2], arity = fmt1[1];
        /*<<camlinternalFormatBasics.ml:659:22>>*/ return [24,
               arity,
               f,
               concat_fmt(rest$23, fmt2)];
    }
    /*<<camlinternalFormatBasics.ml:690:8>>*/ }
   var CamlinternalFormatBasics = [0, concat_fmtty, erase_rel, concat_fmt];
   runtime.caml_register_global
    (0, CamlinternalFormatBasics, "CamlinternalFormatBasics");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib
//# unitInfo: Requires: Assert_failure, CamlinternalFormatBasics, Division_by_zero, End_of_file, Failure, Invalid_argument, Match_failure, Not_found, Out_of_memory, Stack_overflow, Sys_blocked_io, Sys_error, Undefined_recursive_module
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_false$0 = "false",
    cst_true$0 = "true",
    caml_atomic_cas = runtime.caml_atomic_cas,
    caml_atomic_load = runtime.caml_atomic_load,
    caml_blit_string = runtime.caml_blit_string,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_float_of_string = runtime.caml_float_of_string,
    caml_int64_float_of_bits = runtime.caml_int64_float_of_bits,
    caml_int_of_string = runtime.caml_int_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_channel_size = runtime.caml_ml_channel_size,
    caml_ml_channel_size_64 = runtime.caml_ml_channel_size_64,
    caml_ml_close_channel = runtime.caml_ml_close_channel,
    caml_ml_flush = runtime.caml_ml_flush,
    caml_ml_input = runtime.caml_ml_input,
    caml_ml_input_char = runtime.caml_ml_input_char,
    caml_ml_open_descriptor_in = runtime.caml_ml_open_descriptor_in,
    caml_ml_open_descriptor_out = runtime.caml_ml_open_descriptor_out,
    caml_ml_output = runtime.caml_ml_output,
    caml_ml_output_bytes = runtime.caml_ml_output_bytes,
    caml_ml_output_char = runtime.caml_ml_output_char,
    caml_ml_set_binary_mode = runtime.caml_ml_set_binary_mode,
    caml_ml_set_channel_name = runtime.caml_ml_set_channel_name,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_string_of_bytes = runtime.caml_string_of_bytes,
    caml_sys_open = runtime.caml_sys_open,
    caml_wrap_exception = runtime.caml_wrap_exception;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$0 = "%,",
    cst = ".",
    CamlinternalFormatBasics = global_data.CamlinternalFormatBasics,
    Invalid_argument = global_data.Invalid_argument,
    Failure = global_data.Failure,
    Match_failure = global_data.Match_failure,
    Assert_failure = global_data.Assert_failure,
    Not_found = global_data.Not_found,
    Out_of_memory = global_data.Out_of_memory,
    Stack_overflow = global_data.Stack_overflow,
    Sys_error = global_data.Sys_error,
    End_of_file = global_data.End_of_file,
    Division_by_zero = global_data.Division_by_zero,
    Sys_blocked_io = global_data.Sys_blocked_io,
    Undefined_recursive_module = global_data.Undefined_recursive_module,
    cst_really_input = "really_input",
    cst_input = "input",
    _l_ = [0, 0, [0, 6, 0]],
    _k_ = [0, 0, [0, 7, 0]],
    cst_output_substring = "output_substring",
    cst_output = "output",
    _j_ = [0, 1, [0, 3, [0, 4, [0, 6, 0]]]],
    _i_ = [0, 1, [0, 3, [0, 4, [0, 7, 0]]]],
    _g_ = [0, 1],
    _h_ = [0, 0],
    cst_bool_of_string = "bool_of_string",
    cst_true = cst_true$0,
    cst_false = cst_false$0,
    cst_char_of_int = "char_of_int",
    cst_Stdlib_Exit = "Stdlib.Exit",
    _a_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 32752),
    _b_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 65520),
    _c_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 32752),
    _d_ = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 32751),
    _e_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 16),
    _f_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 15536);
    /*<<stdlib.ml:23:2>>*/ function failwith(s){
     /*<<stdlib.ml:29:17>>*/ throw  /*<<stdlib.ml:29:17>>*/ caml_maybe_attach_backtrace
           ([0, Failure, s], 1);
    /*<<stdlib.ml:29:33>>*/ }
    /*<<stdlib.ml:23:2>>*/ function invalid_arg(s){
     /*<<stdlib.ml:30:20>>*/ throw  /*<<stdlib.ml:30:20>>*/ caml_maybe_attach_backtrace
           ([0, Invalid_argument, s], 1);
    /*<<stdlib.ml:30:45>>*/ }
    /*<<stdlib.ml:23:2>>*/  /*<<stdlib.ml:23:2>>*/ var
    Exit =
      [248,
       cst_Stdlib_Exit,
        /*<<stdlib.ml:23:2>>*/ runtime.caml_fresh_oo_id(0)];
    /*<<stdlib.ml:23:2>>*/ function min(x, y){
     /*<<stdlib.ml:74:17>>*/ return  /*<<stdlib.ml:74:17>>*/ runtime.caml_lessequal
             (x, y)
            ? x
            : y;
    /*<<stdlib.ml:74:37>>*/ }
    /*<<stdlib.ml:23:2>>*/ function max(x, y){
     /*<<stdlib.ml:75:17>>*/ return  /*<<stdlib.ml:75:17>>*/ runtime.caml_greaterequal
             (x, y)
            ? x
            : y;
    /*<<stdlib.ml:75:37>>*/ }
    /*<<stdlib.ml:23:2>>*/ function abs(x){
     /*<<stdlib.ml:98:12>>*/ return 0 <= x ? x : - x | 0;
    /*<<stdlib.ml:98:36>>*/ }
    /*<<stdlib.ml:23:2>>*/ function lnot(x){
     /*<<stdlib.ml:104:13>>*/ return x ^ -1;
    /*<<stdlib.ml:104:24>>*/ }
    /*<<stdlib.ml:180:2>>*/ var
     /*<<stdlib.ml:180:2>>*/ infinity =
       /*<<stdlib.ml:180:2>>*/ caml_int64_float_of_bits(_a_),
     /*<<stdlib.ml:182:2>>*/ neg_infinity =
       /*<<stdlib.ml:182:2>>*/ caml_int64_float_of_bits(_b_),
     /*<<stdlib.ml:184:2>>*/ nan =
       /*<<stdlib.ml:184:2>>*/ caml_int64_float_of_bits(_c_),
     /*<<stdlib.ml:186:2>>*/ max_float =
       /*<<stdlib.ml:186:2>>*/ caml_int64_float_of_bits(_d_),
     /*<<stdlib.ml:188:2>>*/ min_float =
       /*<<stdlib.ml:188:2>>*/ caml_int64_float_of_bits(_e_),
     /*<<stdlib.ml:190:2>>*/ epsilon_float =
       /*<<stdlib.ml:190:2>>*/ caml_int64_float_of_bits(_f_),
     /*<<stdlib.ml:23:2>>*/ max_int = 2147483647,
     /*<<stdlib.ml:23:2>>*/ min_int = -2147483648;
    /*<<stdlib.ml:190:2>>*/ function symbol(s1, s2){
     /*<<stdlib.ml:213:2>>*/ var
      /*<<stdlib.ml:213:2>>*/ l1 =
        /*<<stdlib.ml:213:2>>*/ caml_ml_string_length(s1),
      /*<<stdlib.ml:213:2>>*/ l2 =
        /*<<stdlib.ml:213:2>>*/ caml_ml_string_length(s2),
      /*<<stdlib.ml:214:10>>*/ s =
        /*<<stdlib.ml:214:10>>*/ caml_create_bytes(l1 + l2 | 0);
     /*<<stdlib.ml:215:2>>*/  /*<<stdlib.ml:215:2>>*/ caml_blit_string
     (s1, 0, s, 0, l1);
     /*<<stdlib.ml:216:2>>*/  /*<<stdlib.ml:216:2>>*/ caml_blit_string
     (s2, 0, s, l1, l2);
     /*<<stdlib.ml:216:2>>*/ return  /*<<stdlib.ml:216:2>>*/ caml_string_of_bytes
            (s);
    /*<<stdlib.ml:217:26>>*/ }
    /*<<stdlib.ml:190:2>>*/ function char_of_int(n){
     /*<<?>>*/ if(0 <= n && 255 >= n)  /*<<stdlib.ml:224:58>>*/ return n;
     /*<<stdlib.ml:224:27>>*/ return invalid_arg(cst_char_of_int);
    /*<<stdlib.ml:224:78>>*/ }
    /*<<stdlib.ml:190:2>>*/ function string_of_bool(b){
     /*<<stdlib.ml:254:2>>*/ return b ? cst_true : cst_false;
    /*<<stdlib.ml:254:31>>*/ }
    /*<<stdlib.ml:190:2>>*/ function bool_of_string(param){
     /*<<stdlib.ml:255:21>>*/ return  /*<<stdlib.ml:255:21>>*/ caml_string_notequal
             (param, cst_false$0)
            ? caml_string_notequal
               (param, cst_true$0)
              ? invalid_arg(cst_bool_of_string)
              : 1
            : 0;
    /*<<stdlib.ml:258:37>>*/ }
    /*<<stdlib.ml:190:2>>*/ function bool_of_string_opt(param){
     /*<<stdlib.ml:260:25>>*/ return  /*<<stdlib.ml:260:25>>*/ caml_string_notequal
             (param, cst_false$0)
            ? caml_string_notequal(param, cst_true$0) ? 0 : _g_
            : _h_;
    /*<<stdlib.ml:263:13>>*/ }
    /*<<stdlib.ml:190:2>>*/ function string_of_int(n){
     /*<<stdlib.ml:266:2>>*/ return "" + n;
    /*<<stdlib.ml:266:19>>*/ }
    /*<<stdlib.ml:190:2>>*/ function int_of_string_opt(s){
     /*<<?>>*/ try{
      /*<<stdlib.ml:272:11>>*/  /*<<stdlib.ml:272:11>>*/ var
      _B_ = [0,  /*<<stdlib.ml:272:11>>*/ caml_int_of_string(s)];
     return _B_;
    }
    catch(_C_){
     var _A_ = caml_wrap_exception(_C_);
     if(_A_[1] === Failure)  /*<<stdlib.ml:273:20>>*/ return 0;
      /*<<stdlib.ml:266:2>>*/ throw  /*<<stdlib.ml:266:2>>*/ caml_maybe_attach_backtrace
            (_A_, 0);
    }
    /*<<stdlib.ml:273:24>>*/ }
    /*<<stdlib.ml:190:2>>*/ function valid_float_lexem(s){
     /*<<stdlib.ml:278:2>>*/ var
      /*<<stdlib.ml:278:2>>*/ l =
        /*<<stdlib.ml:278:2>>*/ caml_ml_string_length(s),
     i = 0;
     /*<<stdlib.ml:280:4>>*/ for(;;){
      /*<<stdlib.ml:280:4>>*/ if(l <= i)
       /*<<stdlib.ml:280:19>>*/ return symbol(s, cst);
      /*<<stdlib.ml:281:10>>*/ var
       /*<<stdlib.ml:281:10>>*/ match =
         /*<<stdlib.ml:281:10>>*/ runtime.caml_string_get(s, i),
      switch$0 = 0;
      /*<<stdlib.ml:281:10>>*/ if(48 <= match){
      if(58 > match) switch$0 = 1;
     }
     else if(45 === match) switch$0 = 1;
     if(! switch$0)  /*<<stdlib.ml:283:11>>*/ return s;
      /*<<stdlib.ml:282:26>>*/ var
       /*<<stdlib.ml:282:26>>*/ i$0 = i + 1 | 0,
      i = i$0;
    }
    /*<<stdlib.ml:285:8>>*/ }
    /*<<stdlib.ml:190:2>>*/ function string_of_float(f){
     /*<<stdlib.ml:287:42>>*/ return valid_float_lexem
            ( /*<<stdlib.ml:287:42>>*/ runtime.caml_format_float("%.12g", f));
    /*<<stdlib.ml:287:66>>*/ }
    /*<<stdlib.ml:190:2>>*/ function float_of_string_opt(s){
     /*<<?>>*/ try{
      /*<<stdlib.ml:293:11>>*/  /*<<stdlib.ml:293:11>>*/ var
      _y_ = [0,  /*<<stdlib.ml:293:11>>*/ caml_float_of_string(s)];
     return _y_;
    }
    catch(_z_){
     var _x_ = caml_wrap_exception(_z_);
     if(_x_[1] === Failure)  /*<<stdlib.ml:294:20>>*/ return 0;
      /*<<stdlib.ml:287:24>>*/ throw  /*<<stdlib.ml:287:24>>*/ caml_maybe_attach_backtrace
            (_x_, 0);
    }
    /*<<stdlib.ml:294:24>>*/ }
    /*<<stdlib.ml:190:2>>*/ function symbol$0(l1, l2){
     /*<<stdlib.ml:299:2>>*/ if(! l1)  /*<<stdlib.ml:300:10>>*/ return l2;
    var tl = l1[2], hd = l1[1];
     /*<<stdlib.ml:301:22>>*/ return [0, hd, symbol$0(tl, l2)];
    /*<<stdlib.ml:301:31>>*/ }
    /*<<stdlib.ml:312:12>>*/ var
     /*<<stdlib.ml:312:12>>*/ stdin =
       /*<<stdlib.ml:312:12>>*/ caml_ml_open_descriptor_in(0),
     /*<<stdlib.ml:313:13>>*/ stdout =
       /*<<stdlib.ml:313:13>>*/ caml_ml_open_descriptor_out(1),
     /*<<stdlib.ml:314:13>>*/ stderr =
       /*<<stdlib.ml:314:13>>*/ caml_ml_open_descriptor_out(2);
    /*<<stdlib.ml:314:13>>*/ function open_out_gen(mode, perm, name){
     /*<<stdlib.ml:329:55>>*/  /*<<stdlib.ml:329:55>>*/ var
     c =
        /*<<stdlib.ml:329:55>>*/ caml_ml_open_descriptor_out
        ( /*<<stdlib.ml:329:29>>*/ caml_sys_open(name, mode, perm));
     /*<<stdlib.ml:330:2>>*/  /*<<stdlib.ml:330:2>>*/ caml_ml_set_channel_name
     (c, name);
     /*<<stdlib.ml:330:2>>*/ return c;
    /*<<stdlib.ml:331:3>>*/ }
    /*<<stdlib.ml:314:13>>*/ function open_out(name){
     /*<<stdlib.ml:334:2>>*/ return open_out_gen(_i_, 438, name);
    /*<<stdlib.ml:334:74>>*/ }
    /*<<stdlib.ml:314:13>>*/ function open_out_bin(name){
     /*<<stdlib.ml:337:2>>*/ return open_out_gen(_j_, 438, name);
    /*<<stdlib.ml:337:76>>*/ }
    /*<<stdlib.ml:314:13>>*/ function flush_all(param){
    var
     param$0 =  /*<<stdlib.ml:354:10>>*/ runtime.caml_ml_out_channels_list(0);
     /*<<stdlib.ml:345:17>>*/ for(;;){
      /*<<stdlib.ml:345:17>>*/ if(! param$0)
       /*<<stdlib.ml:346:12>>*/ return 0;
     var l = param$0[2], a = param$0[1];
     try{ /*<<stdlib.ml:349:12>>*/  /*<<stdlib.ml:349:12>>*/ caml_ml_flush(a);
     }
     catch(_w_){
      var _v_ = caml_wrap_exception(_w_);
      if(_v_[1] !== Sys_error) throw caml_maybe_attach_backtrace(_v_, 0);
     }
     var param$0 = l;
    }
    /*<<stdlib.ml:354:32>>*/ }
    /*<<stdlib.ml:314:13>>*/ function output_bytes(oc, s){
     /*<<stdlib.ml:364:2>>*/ return  /*<<stdlib.ml:364:2>>*/ caml_ml_output_bytes
            (oc, s, 0,  /*<<stdlib.ml:364:2>>*/ caml_ml_bytes_length(s));
    /*<<stdlib.ml:364:39>>*/ }
    /*<<stdlib.ml:314:13>>*/ function output_string(oc, s){
     /*<<stdlib.ml:367:2>>*/ return  /*<<stdlib.ml:367:2>>*/ caml_ml_output
            (oc, s, 0,  /*<<stdlib.ml:367:2>>*/ caml_ml_string_length(s));
    /*<<stdlib.ml:367:47>>*/ }
    /*<<stdlib.ml:314:13>>*/ function output(oc, s, ofs, len){
     /*<<?>>*/ if
     (0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
      /*<<stdlib.ml:372:7>>*/ return  /*<<stdlib.ml:372:7>>*/ caml_ml_output_bytes
             (oc, s, ofs, len);
     /*<<stdlib.ml:371:7>>*/ return invalid_arg(cst_output);
    /*<<stdlib.ml:372:33>>*/ }
    /*<<stdlib.ml:314:13>>*/ function output_substring(oc, s, ofs, len){
     /*<<?>>*/ if
     (0 <= ofs && 0 <= len && (caml_ml_string_length(s) - len | 0) >= ofs)
      /*<<stdlib.ml:377:7>>*/ return  /*<<stdlib.ml:377:7>>*/ caml_ml_output
             (oc, s, ofs, len);
     /*<<stdlib.ml:376:7>>*/ return invalid_arg(cst_output_substring);
    /*<<stdlib.ml:377:40>>*/ }
    /*<<stdlib.ml:314:13>>*/ function output_value(chan, v){
     /*<<stdlib.ml:384:26>>*/ return  /*<<stdlib.ml:384:26>>*/ runtime.caml_output_value
            (chan, v, 0);
    /*<<stdlib.ml:384:54>>*/ }
    /*<<stdlib.ml:314:13>>*/ function close_out(oc){
     /*<<stdlib.ml:390:19>>*/  /*<<stdlib.ml:390:19>>*/ caml_ml_flush(oc);
     /*<<stdlib.ml:390:29>>*/ return  /*<<stdlib.ml:390:29>>*/ caml_ml_close_channel
            (oc);
    /*<<stdlib.ml:390:49>>*/ }
    /*<<stdlib.ml:314:13>>*/ function close_out_noerr(oc){
     /*<<?>>*/ try{
      /*<<stdlib.ml:392:7>>*/  /*<<stdlib.ml:392:7>>*/ caml_ml_flush(oc);
    }
    catch(_u_){}
    try{
      /*<<stdlib.ml:393:7>>*/  /*<<stdlib.ml:393:7>>*/ var
      _s_ =  /*<<stdlib.ml:393:7>>*/ caml_ml_close_channel(oc);
      /*<<stdlib.ml:393:38>>*/ return _s_;
    }
    catch(_t_){ /*<<stdlib.ml:393:38>>*/ return 0;}
    /*<<stdlib.ml:393:41>>*/ }
    /*<<stdlib.ml:314:13>>*/ function open_in_gen(mode, perm, name){
     /*<<stdlib.ml:403:54>>*/  /*<<stdlib.ml:403:54>>*/ var
     c =
        /*<<stdlib.ml:403:54>>*/ caml_ml_open_descriptor_in
        ( /*<<stdlib.ml:403:28>>*/ caml_sys_open(name, mode, perm));
     /*<<stdlib.ml:404:2>>*/  /*<<stdlib.ml:404:2>>*/ caml_ml_set_channel_name
     (c, name);
     /*<<stdlib.ml:404:2>>*/ return c;
    /*<<stdlib.ml:405:3>>*/ }
    /*<<stdlib.ml:314:13>>*/ function open_in(name){
     /*<<stdlib.ml:408:2>>*/ return open_in_gen(_k_, 0, name);
    /*<<stdlib.ml:408:45>>*/ }
    /*<<stdlib.ml:314:13>>*/ function open_in_bin(name){
     /*<<stdlib.ml:411:2>>*/ return open_in_gen(_l_, 0, name);
    /*<<stdlib.ml:411:47>>*/ }
    /*<<stdlib.ml:314:13>>*/ function input(ic, s, ofs, len){
     /*<<?>>*/ if
     (0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
      /*<<stdlib.ml:421:7>>*/ return  /*<<stdlib.ml:421:7>>*/ caml_ml_input
             (ic, s, ofs, len);
     /*<<stdlib.ml:420:7>>*/ return invalid_arg(cst_input);
    /*<<stdlib.ml:421:32>>*/ }
    /*<<stdlib.ml:314:13>>*/ function unsafe_really_input(ic, s, ofs, len){
    var ofs$0 = ofs, len$0 = len;
     /*<<stdlib.ml:424:2>>*/ for(;;){
      /*<<stdlib.ml:424:2>>*/ if(0 >= len$0)
       /*<<stdlib.ml:424:19>>*/ return 0;
      /*<<stdlib.ml:425:12>>*/  /*<<stdlib.ml:425:12>>*/ var
      r =  /*<<stdlib.ml:425:12>>*/ caml_ml_input(ic, s, ofs$0, len$0);
      /*<<stdlib.ml:425:12>>*/ if(0 === r)
       /*<<stdlib.ml:427:9>>*/ throw  /*<<stdlib.ml:427:9>>*/ caml_maybe_attach_backtrace
             (End_of_file, 1);
      /*<<stdlib.ml:428:9>>*/ var
       /*<<stdlib.ml:428:9>>*/ len$1 = len$0 - r | 0,
       /*<<stdlib.ml:428:9>>*/ ofs$1 = ofs$0 + r | 0,
      ofs$0 = ofs$1,
      len$0 = len$1;
    }
    /*<<stdlib.ml:429:5>>*/ }
    /*<<stdlib.ml:314:13>>*/ function really_input(ic, s, ofs, len){
     /*<<?>>*/ if
     (0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
      /*<<stdlib.ml:434:7>>*/ return unsafe_really_input(ic, s, ofs, len);
     /*<<stdlib.ml:433:7>>*/ return invalid_arg(cst_really_input);
    /*<<stdlib.ml:434:39>>*/ }
    /*<<stdlib.ml:314:13>>*/ function really_input_string(ic, len){
     /*<<stdlib.ml:437:10>>*/  /*<<stdlib.ml:437:10>>*/ var
     s =  /*<<stdlib.ml:437:10>>*/ caml_create_bytes(len);
     /*<<stdlib.ml:438:2>>*/ really_input(ic, s, 0, len);
     /*<<stdlib.ml:438:2>>*/ return  /*<<stdlib.ml:438:2>>*/ caml_string_of_bytes
            (s);
    /*<<stdlib.ml:439:26>>*/ }
    /*<<stdlib.ml:314:13>>*/ function input_line(chan){
     /*<<stdlib.ml:444:2>>*/ function build_result(buf, pos, param){
     var pos$0 = pos, param$0 = param;
     for(;;){
      if(! param$0)  /*<<stdlib.ml:445:10>>*/ return buf;
      var tl = param$0[2], hd = param$0[1], len = caml_ml_bytes_length(hd);
       /*<<stdlib.ml:448:6>>*/  /*<<stdlib.ml:448:6>>*/ runtime.caml_blit_bytes
       (hd, 0, buf, pos$0 - len | 0, len);
       /*<<stdlib.ml:448:6>>*/ var
        /*<<stdlib.ml:448:6>>*/ pos$1 = pos$0 - len | 0,
       pos$0 = pos$1,
       param$0 = tl;
     }
    }
    var accu = 0, len = 0;
     /*<<stdlib.ml:451:4>>*/ for(;;){
      /*<<stdlib.ml:451:12>>*/  /*<<stdlib.ml:451:12>>*/ var
      n =  /*<<stdlib.ml:451:12>>*/ runtime.caml_ml_input_scan_line(chan);
      /*<<stdlib.ml:451:12>>*/ if(0 === n){
       /*<<stdlib.ml:452:18>>*/ if(! accu)
        /*<<stdlib.ml:454:14>>*/ throw  /*<<stdlib.ml:454:14>>*/ caml_maybe_attach_backtrace
              (End_of_file, 1);
      var
       _r_ =
         build_result
          ( /*<<stdlib.ml:455:27>>*/ caml_create_bytes(len), len, accu);
     }
     else{
       /*<<stdlib.ml:456:13>>*/ if(0 >= n){
        /*<<stdlib.ml:465:16>>*/  /*<<stdlib.ml:465:16>>*/ var
        beg =  /*<<stdlib.ml:465:16>>*/ caml_create_bytes(- n | 0);
        /*<<stdlib.ml:466:12>>*/  /*<<stdlib.ml:466:12>>*/ caml_ml_input
        (chan, beg, 0, - n | 0);
        /*<<stdlib.ml:466:12>>*/ var
         /*<<stdlib.ml:466:12>>*/ len$1 = len - n | 0,
         /*<<stdlib.ml:466:12>>*/ accu$0 = [0, beg, accu],
        accu = accu$0,
        len = len$1;
       continue;
      }
       /*<<stdlib.ml:457:16>>*/  /*<<stdlib.ml:457:16>>*/ var
       res =  /*<<stdlib.ml:457:16>>*/ caml_create_bytes(n - 1 | 0);
       /*<<stdlib.ml:458:13>>*/  /*<<stdlib.ml:458:13>>*/ caml_ml_input
       (chan, res, 0, n - 1 | 0);
       /*<<stdlib.ml:459:13>>*/  /*<<stdlib.ml:459:13>>*/ caml_ml_input_char
       (chan);
       /*<<stdlib.ml:459:13>>*/ if(accu)
        /*<<stdlib.ml:462:14>>*/ var
         /*<<stdlib.ml:462:14>>*/ len$0 = (len + n | 0) - 1 | 0,
        _r_ =
          build_result
           ( /*<<stdlib.ml:463:27>>*/ caml_create_bytes(len$0),
            len$0,
            [0, res, accu]);
      else
       var _r_ = res;
     }
     return caml_string_of_bytes(_r_);
    }
    /*<<stdlib.ml:469:39>>*/ }
    /*<<stdlib.ml:314:13>>*/ function close_in_noerr(ic){
     /*<<?>>*/ try{
      /*<<stdlib.ml:478:29>>*/  /*<<stdlib.ml:478:29>>*/ var
      _p_ =  /*<<stdlib.ml:478:29>>*/ caml_ml_close_channel(ic);
      /*<<stdlib.ml:478:51>>*/ return _p_;
    }
    catch(_q_){ /*<<stdlib.ml:478:51>>*/ return 0;}
    /*<<stdlib.ml:478:54>>*/ }
    /*<<stdlib.ml:314:13>>*/ function print_char(c){
     /*<<stdlib.ml:484:19>>*/ return  /*<<stdlib.ml:484:19>>*/ caml_ml_output_char
            (stdout, c);
    /*<<stdlib.ml:484:39>>*/ }
    /*<<stdlib.ml:314:13>>*/ function print_string(s){
     /*<<stdlib.ml:485:21>>*/ return output_string(stdout, s);
    /*<<stdlib.ml:485:43>>*/ }
    /*<<stdlib.ml:314:13>>*/ function print_bytes(s){
     /*<<stdlib.ml:486:20>>*/ return output_bytes(stdout, s);
    /*<<stdlib.ml:486:41>>*/ }
    /*<<stdlib.ml:314:13>>*/ function print_int(i){
     /*<<stdlib.ml:487:39>>*/ return output_string(stdout, "" + i);
    /*<<stdlib.ml:487:56>>*/ }
    /*<<stdlib.ml:314:13>>*/ function print_float(f){
     /*<<stdlib.ml:488:41>>*/ return output_string(stdout, string_of_float(f));
    /*<<stdlib.ml:488:60>>*/ }
    /*<<stdlib.ml:314:13>>*/ function print_endline(s){
     /*<<stdlib.ml:490:2>>*/ output_string(stdout, s);
     /*<<stdlib.ml:490:26>>*/  /*<<stdlib.ml:490:26>>*/ caml_ml_output_char
     (stdout, 10);
     /*<<stdlib.ml:490:51>>*/ return  /*<<stdlib.ml:490:51>>*/ caml_ml_flush
            (stdout);
    /*<<stdlib.ml:490:63>>*/ }
    /*<<stdlib.ml:314:13>>*/ function print_newline(param){
     /*<<stdlib.ml:491:23>>*/  /*<<stdlib.ml:491:23>>*/ caml_ml_output_char
     (stdout, 10);
     /*<<stdlib.ml:491:48>>*/ return  /*<<stdlib.ml:491:48>>*/ caml_ml_flush
            (stdout);
    /*<<stdlib.ml:491:60>>*/ }
    /*<<stdlib.ml:314:13>>*/ function prerr_char(c){
     /*<<stdlib.ml:495:19>>*/ return  /*<<stdlib.ml:495:19>>*/ caml_ml_output_char
            (stderr, c);
    /*<<stdlib.ml:495:39>>*/ }
    /*<<stdlib.ml:314:13>>*/ function prerr_string(s){
     /*<<stdlib.ml:496:21>>*/ return output_string(stderr, s);
    /*<<stdlib.ml:496:43>>*/ }
    /*<<stdlib.ml:314:13>>*/ function prerr_bytes(s){
     /*<<stdlib.ml:497:20>>*/ return output_bytes(stderr, s);
    /*<<stdlib.ml:497:41>>*/ }
    /*<<stdlib.ml:314:13>>*/ function prerr_int(i){
     /*<<stdlib.ml:498:39>>*/ return output_string(stderr, "" + i);
    /*<<stdlib.ml:498:56>>*/ }
    /*<<stdlib.ml:314:13>>*/ function prerr_float(f){
     /*<<stdlib.ml:499:41>>*/ return output_string(stderr, string_of_float(f));
    /*<<stdlib.ml:499:60>>*/ }
    /*<<stdlib.ml:314:13>>*/ function prerr_endline(s){
     /*<<stdlib.ml:501:2>>*/ output_string(stderr, s);
     /*<<stdlib.ml:501:26>>*/  /*<<stdlib.ml:501:26>>*/ caml_ml_output_char
     (stderr, 10);
     /*<<stdlib.ml:501:51>>*/ return  /*<<stdlib.ml:501:51>>*/ caml_ml_flush
            (stderr);
    /*<<stdlib.ml:501:63>>*/ }
    /*<<stdlib.ml:314:13>>*/ function prerr_newline(param){
     /*<<stdlib.ml:502:23>>*/  /*<<stdlib.ml:502:23>>*/ caml_ml_output_char
     (stderr, 10);
     /*<<stdlib.ml:502:48>>*/ return  /*<<stdlib.ml:502:48>>*/ caml_ml_flush
            (stderr);
    /*<<stdlib.ml:502:60>>*/ }
    /*<<stdlib.ml:314:13>>*/ function read_line(param){
     /*<<stdlib.ml:506:19>>*/  /*<<stdlib.ml:506:19>>*/ caml_ml_flush(stdout);
     /*<<stdlib.ml:506:19>>*/ return input_line(stdin);
    /*<<stdlib.ml:506:49>>*/ }
    /*<<stdlib.ml:314:13>>*/ function read_int(param){
     /*<<stdlib.ml:507:44>>*/ return  /*<<stdlib.ml:507:44>>*/ caml_int_of_string
            (read_line(0));
    /*<<stdlib.ml:507:44>>*/ }
    /*<<stdlib.ml:314:13>>*/ function read_int_opt(param){
     /*<<stdlib.ml:508:39>>*/ return int_of_string_opt(read_line(0));
    /*<<stdlib.ml:508:52>>*/ }
    /*<<stdlib.ml:314:13>>*/ function read_float(param){
     /*<<stdlib.ml:509:48>>*/ return  /*<<stdlib.ml:509:48>>*/ caml_float_of_string
            (read_line(0));
    /*<<stdlib.ml:509:48>>*/ }
    /*<<stdlib.ml:314:13>>*/ function read_float_opt(param){
     /*<<stdlib.ml:510:43>>*/ return float_of_string_opt(read_line(0));
    /*<<stdlib.ml:510:56>>*/ }
    /*<<stdlib.ml:314:13>>*/ function string_of_format(param){var str = param[2]; return str;
   }
    /*<<stdlib.ml:314:13>>*/ function symbol$1(param, _n_){
     /*<<stdlib.ml:544:10>>*/ var
     str2 = _n_[2],
     fmt2 = _n_[1],
     str1 = param[2],
     fmt1 = param[1],
      /*<<stdlib.ml:544:10>>*/ _o_ = symbol(str1, symbol(cst$0, str2));
     /*<<stdlib.ml:543:10>>*/ return [0,
             /*<<stdlib.ml:543:10>>*/ caml_call2
             (CamlinternalFormatBasics[3], fmt1, fmt2),
            _o_];
   }
    /*<<stdlib.ml:314:13>>*/  /*<<stdlib.ml:314:13>>*/ var
    exit_function = [0, flush_all];
    /*<<stdlib.ml:314:13>>*/ function at_exit(f){
     /*<<stdlib.ml:561:2>>*/ for(;;){
      /*<<stdlib.ml:561:2>>*/ var
       /*<<stdlib.ml:561:2>>*/ f_yet_to_run = [0, 1],
       /*<<stdlib.ml:561:2>>*/ old_exit =
         /*<<stdlib.ml:561:2>>*/ caml_atomic_load(exit_function),
       /*<<stdlib.ml:561:2>>*/ new_exit$0 =
        function(f_yet_to_run, old_exit){
         function new_exit(param){
           /*<<stdlib.ml:564:4>>*/ if
           ( /*<<stdlib.ml:564:4>>*/ caml_atomic_cas(f_yet_to_run, 1, 0))
            /*<<stdlib.ml:564:59>>*/  /*<<stdlib.ml:564:59>>*/ caml_call1
            (f, 0);
           /*<<stdlib.ml:564:63>>*/ return  /*<<stdlib.ml:564:63>>*/ caml_call1
                  (old_exit, 0);
          /*<<stdlib.ml:565:15>>*/ }
         return new_exit;
        },
       /*<<stdlib.ml:561:2>>*/ new_exit = new_exit$0(f_yet_to_run, old_exit),
       /*<<stdlib.ml:561:2>>*/ success =
         /*<<stdlib.ml:561:2>>*/ caml_atomic_cas
         (exit_function, old_exit, new_exit),
       /*<<stdlib.ml:561:2>>*/ _m_ = 1 - success;
      /*<<stdlib.ml:561:2>>*/ if(_m_) continue;
     return _m_;
    }
    /*<<stdlib.ml:568:31>>*/ }
    /*<<stdlib.ml:314:13>>*/  /*<<stdlib.ml:314:13>>*/ var
    do_domain_local_at_exit =
      [0,
       function(param){
         /*<<stdlib.ml:570:45>>*/ return 0;
        /*<<stdlib.ml:570:47>>*/ }];
    /*<<stdlib.ml:314:13>>*/ function do_at_exit(param){
     /*<<stdlib.ml:573:2>>*/  /*<<stdlib.ml:573:2>>*/ caml_call1
     (do_domain_local_at_exit[1], 0);
     /*<<stdlib.ml:573:2>>*/ return  /*<<stdlib.ml:573:2>>*/ caml_call1
            ( /*<<stdlib.ml:573:2>>*/ caml_atomic_load(exit_function), 0);
    /*<<stdlib.ml:574:31>>*/ }
    /*<<stdlib.ml:314:13>>*/ function exit(retcode){
     /*<<stdlib.ml:577:2>>*/ do_at_exit(0);
     /*<<stdlib.ml:578:2>>*/ return  /*<<stdlib.ml:578:2>>*/ runtime.caml_sys_exit
            (retcode);
    /*<<stdlib.ml:578:18>>*/ }
    /*<<stdlib.ml:580:8>>*/  /*<<stdlib.ml:580:8>>*/ runtime.caml_register_named_value
    ("Pervasives.do_at_exit", do_at_exit);
    /*<<stdlib.ml:580:8>>*/  /*<<stdlib.ml:580:8>>*/ var
    Stdlib =
      [0,
       invalid_arg,
       failwith,
       Exit,
       Match_failure,
       Assert_failure,
       Invalid_argument,
       Failure,
       Not_found,
       Out_of_memory,
       Stack_overflow,
       Sys_error,
       End_of_file,
       Division_by_zero,
       Sys_blocked_io,
       Undefined_recursive_module,
       min,
       max,
       abs,
       max_int,
       min_int,
       lnot,
       infinity,
       neg_infinity,
       nan,
       max_float,
       min_float,
       epsilon_float,
       symbol,
       char_of_int,
       string_of_bool,
       bool_of_string_opt,
       bool_of_string,
       string_of_int,
       int_of_string_opt,
       string_of_float,
       float_of_string_opt,
       symbol$0,
       stdin,
       stdout,
       stderr,
       print_char,
       print_string,
       print_bytes,
       print_int,
       print_float,
       print_endline,
       print_newline,
       prerr_char,
       prerr_string,
       prerr_bytes,
       prerr_int,
       prerr_float,
       prerr_endline,
       prerr_newline,
       read_line,
       read_int_opt,
       read_int,
       read_float_opt,
       read_float,
       open_out,
       open_out_bin,
       open_out_gen,
       caml_ml_flush,
       flush_all,
       caml_ml_output_char,
       output_string,
       output_bytes,
       output,
       output_substring,
       caml_ml_output_char,
       runtime.caml_ml_output_int,
       output_value,
       runtime.caml_ml_seek_out,
       runtime.caml_ml_pos_out,
       caml_ml_channel_size,
       close_out,
       close_out_noerr,
       caml_ml_set_binary_mode,
       open_in,
       open_in_bin,
       open_in_gen,
       caml_ml_input_char,
       input_line,
       input,
       really_input,
       really_input_string,
       caml_ml_input_char,
       runtime.caml_ml_input_int,
       runtime.caml_input_value,
       runtime.caml_ml_seek_in,
       runtime.caml_ml_pos_in,
       caml_ml_channel_size,
       caml_ml_close_channel,
       close_in_noerr,
       caml_ml_set_binary_mode,
       [0,
        runtime.caml_ml_seek_out_64,
        runtime.caml_ml_pos_out_64,
        caml_ml_channel_size_64,
        runtime.caml_ml_seek_in_64,
        runtime.caml_ml_pos_in_64,
        caml_ml_channel_size_64],
       string_of_format,
       symbol$1,
       exit,
       at_exit,
       valid_float_lexem,
       unsafe_really_input,
       do_at_exit,
       do_domain_local_at_exit];
    /*<<stdlib.ml:580:8>>*/  /*<<stdlib.ml:580:8>>*/ runtime.caml_register_global
    (45, Stdlib, "Stdlib");
    /*<<stdlib.ml:580:8>>*/ return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Either
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   function left(v){
     /*<<either.ml:18:13>>*/ return [0, v];
    /*<<either.ml:18:19>>*/ }
   function right(v){
     /*<<either.ml:19:14>>*/ return [1, v];
    /*<<either.ml:19:21>>*/ }
   function is_left(param){
     /*<<either.ml:21:14>>*/ return 0 === param[0] ? 1 : 0;
    /*<<either.ml:23:18>>*/ }
   function is_right(param){
     /*<<either.ml:25:15>>*/ return 0 === param[0] ? 0 : 1;
    /*<<either.ml:27:17>>*/ }
   function find_left(param){
     /*<<either.ml:29:16>>*/ if(0 !== param[0])
      /*<<either.ml:31:13>>*/ return 0;
     /*<<either.ml:30:12>>*/  /*<<either.ml:30:12>>*/ var v = param[1];
     /*<<either.ml:30:12>>*/ return [0, v];
    /*<<either.ml:31:17>>*/ }
   function find_right(param){
     /*<<either.ml:33:17>>*/ if(0 === param[0])
      /*<<either.ml:34:12>>*/ return 0;
     /*<<either.ml:35:13>>*/  /*<<either.ml:35:13>>*/ var v = param[1];
     /*<<either.ml:35:13>>*/ return [0, v];
    /*<<either.ml:35:19>>*/ }
   function map_left(f, e){
     /*<<?>>*/ if(0 !== e[0])  /*<<either.ml:39:18>>*/ return e;
     /*<<either.ml:38:12>>*/  /*<<either.ml:38:12>>*/ var v = e[1];
     /*<<either.ml:38:17>>*/ return [0,
             /*<<either.ml:38:17>>*/ caml_call1(f, v)];
   }
   function map_right(f, e){
     /*<<?>>*/ if(0 === e[0])  /*<<either.ml:42:17>>*/ return e;
     /*<<either.ml:43:13>>*/  /*<<either.ml:43:13>>*/ var v = e[1];
     /*<<either.ml:43:19>>*/ return [1,
             /*<<either.ml:43:19>>*/ caml_call1(f, v)];
   }
   function map(left, right, param){
     /*<<?>>*/ if(0 === param[0]){
      /*<<either.ml:46:12>>*/  /*<<either.ml:46:12>>*/ var v = param[1];
      /*<<either.ml:46:17>>*/ return [0,
              /*<<either.ml:46:17>>*/ caml_call1(left, v)];
    }
     /*<<either.ml:47:13>>*/  /*<<either.ml:47:13>>*/ var v$0 = param[1];
     /*<<either.ml:47:19>>*/ return [1,
             /*<<either.ml:47:19>>*/ caml_call1(right, v$0)];
   }
   function fold(left, right, param){
     /*<<?>>*/ if(0 === param[0]){
      /*<<either.ml:50:12>>*/  /*<<either.ml:50:12>>*/ var v = param[1];
      /*<<either.ml:50:12>>*/ return  /*<<either.ml:50:12>>*/ caml_call1
             (left, v);
    }
     /*<<either.ml:51:13>>*/  /*<<either.ml:51:13>>*/ var v$0 = param[1];
     /*<<either.ml:51:13>>*/ return  /*<<either.ml:51:13>>*/ caml_call1
            (right, v$0);
   }
   function equal(left, right, e1, e2){
     /*<<either.ml:57:31>>*/ if(0 === e1[0]){
     var v1 = e1[1];
     if(0 === e2[0]){
       /*<<either.ml:58:22>>*/  /*<<either.ml:58:22>>*/ var v2 = e2[1];
       /*<<either.ml:58:22>>*/ return  /*<<either.ml:58:22>>*/ caml_call2
              (left, v1, v2);
     }
    }
    else{
     var v1$0 = e1[1];
     if(0 !== e2[0]){
       /*<<either.ml:59:24>>*/  /*<<either.ml:59:24>>*/ var v2$0 = e2[1];
       /*<<either.ml:59:24>>*/ return  /*<<either.ml:59:24>>*/ caml_call2
              (right, v1$0, v2$0);
     }
    }
     /*<<either.ml:60:39>>*/ return 0;
    /*<<either.ml:60:44>>*/ }
   function compare(left, right, e1, e2){
     /*<<either.ml:62:33>>*/ if(0 === e1[0]){
     var v1 = e1[1];
     if(0 !== e2[0])  /*<<either.ml:65:21>>*/ return -1;
      /*<<either.ml:63:22>>*/  /*<<either.ml:63:22>>*/ var v2 = e2[1];
      /*<<either.ml:63:22>>*/ return  /*<<either.ml:63:22>>*/ caml_call2
             (left, v1, v2);
    }
    var v1$0 = e1[1];
    if(0 === e2[0])  /*<<either.ml:66:21>>*/ return 1;
     /*<<either.ml:64:24>>*/  /*<<either.ml:64:24>>*/ var v2$0 = e2[1];
     /*<<either.ml:64:24>>*/ return  /*<<either.ml:64:24>>*/ caml_call2
            (right, v1$0, v2$0);
    /*<<either.ml:66:22>>*/ }
   var
    Stdlib_Either =
      [0,
       left,
       right,
       is_left,
       is_right,
       find_left,
       find_right,
       map_left,
       map_right,
       map,
       fold,
       fold,
       fold,
       equal,
       compare];
   runtime.caml_register_global(0, Stdlib_Either, "Stdlib__Either");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Sys
//# unitInfo: Requires: Stdlib
(function
  (globalThis){
   "use strict";
    /*<<sys.ml.in:36:22>>*/ var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    ocaml_version = "5.0.0",
    ocaml_release = [0, 5, 0, 0, 0],
    Stdlib = global_data.Stdlib,
     /*<<sys.ml.in:36:22>>*/ executable_name =
       /*<<sys.ml.in:36:22>>*/ runtime.caml_sys_executable_name(0),
     /*<<sys.ml.in:37:22>>*/ os_type =
       /*<<sys.ml.in:37:22>>*/ runtime.caml_sys_get_config(0)[1],
     /*<<sys.ml.in:37:22>>*/ backend_type = [0, "js_of_ocaml"],
     /*<<sys.ml.in:37:22>>*/ unix =
       /*<<sys.ml.in:37:22>>*/ runtime.caml_sys_const_ostype_unix(0),
     /*<<sys.ml.in:37:22>>*/ win32 =
       /*<<sys.ml.in:37:22>>*/ runtime.caml_sys_const_ostype_win32(0),
     /*<<sys.ml.in:37:22>>*/ cygwin =
       /*<<sys.ml.in:37:22>>*/ runtime.caml_sys_const_ostype_cygwin(0),
     /*<<sys.ml.in:37:22>>*/ max_array_length =
       /*<<sys.ml.in:37:22>>*/ runtime.caml_sys_const_max_wosize(0),
     /*<<sys.ml.in:37:22>>*/ max_floatarray_length = max_array_length / 2 | 0,
     /*<<sys.ml.in:37:22>>*/ max_string_length =
      (4 * max_array_length | 0) - 1 | 0,
    cst_Stdlib_Sys_Break = "Stdlib.Sys.Break",
     /*<<sys.ml.in:37:22>>*/ big_endian = 0,
     /*<<sys.ml.in:37:22>>*/ word_size = 32,
     /*<<sys.ml.in:37:22>>*/ int_size = 32;
    /*<<sys.ml.in:37:22>>*/ function getenv_opt(s){
     /*<<?>>*/ try{
      /*<<sys.ml.in:59:11>>*/  /*<<sys.ml.in:59:11>>*/ var
      _d_ = [0,  /*<<sys.ml.in:59:11>>*/ runtime.caml_sys_getenv(s)];
     return _d_;
    }
    catch(_e_){
     var _c_ = caml_wrap_exception(_e_);
     if(_c_ === Stdlib[8])  /*<<sys.ml.in:60:20>>*/ return 0;
     throw caml_maybe_attach_backtrace(_c_, 0);
    }
    /*<<sys.ml.in:60:24>>*/ }
    /*<<sys.ml.in:37:22>>*/  /*<<sys.ml.in:37:22>>*/ var interactive = [0, 0];
    /*<<sys.ml.in:37:22>>*/ function set_signal(sig_num, sig_beh){ /*<<sys.ml.in:81:39>>*/ return 0;
    /*<<sys.ml.in:81:63>>*/ }
    /*<<sys.ml.in:37:22>>*/ var
     /*<<sys.ml.in:37:22>>*/ Break =
      [248,
       cst_Stdlib_Sys_Break,
        /*<<sys.ml.in:37:22>>*/ runtime.caml_fresh_oo_id(0)],
     /*<<sys.ml.in:37:22>>*/ sigabrt = -1,
     /*<<sys.ml.in:37:22>>*/ sigalrm = -2,
     /*<<sys.ml.in:37:22>>*/ sigfpe = -3,
     /*<<sys.ml.in:37:22>>*/ sighup = -4,
     /*<<sys.ml.in:37:22>>*/ sigill = -5,
     /*<<sys.ml.in:37:22>>*/ sigint = -6,
     /*<<sys.ml.in:37:22>>*/ sigkill = -7,
     /*<<sys.ml.in:37:22>>*/ sigpipe = -8,
     /*<<sys.ml.in:37:22>>*/ sigquit = -9,
     /*<<sys.ml.in:37:22>>*/ sigsegv = -10,
     /*<<sys.ml.in:37:22>>*/ sigterm = -11,
     /*<<sys.ml.in:37:22>>*/ sigusr1 = -12,
     /*<<sys.ml.in:37:22>>*/ sigusr2 = -13,
     /*<<sys.ml.in:37:22>>*/ sigchld = -14,
     /*<<sys.ml.in:37:22>>*/ sigcont = -15,
     /*<<sys.ml.in:37:22>>*/ sigstop = -16,
     /*<<sys.ml.in:37:22>>*/ sigtstp = -17,
     /*<<sys.ml.in:37:22>>*/ sigttin = -18,
     /*<<sys.ml.in:37:22>>*/ sigttou = -19,
     /*<<sys.ml.in:37:22>>*/ sigvtalrm = -20,
     /*<<sys.ml.in:37:22>>*/ sigprof = -21,
     /*<<sys.ml.in:37:22>>*/ sigbus = -22,
     /*<<sys.ml.in:37:22>>*/ sigpoll = -23,
     /*<<sys.ml.in:37:22>>*/ sigsys = -24,
     /*<<sys.ml.in:37:22>>*/ sigtrap = -25,
     /*<<sys.ml.in:37:22>>*/ sigurg = -26,
     /*<<sys.ml.in:37:22>>*/ sigxcpu = -27,
     /*<<sys.ml.in:37:22>>*/ sigxfsz = -28;
    /*<<sys.ml.in:37:22>>*/ function catch_break(on){
     /*<<sys.ml.in:115:2>>*/ return on ? 0 : 0;
    /*<<sys.ml.in:118:36>>*/ }
    /*<<sys.ml.in:37:22>>*/  /*<<sys.ml.in:37:22>>*/ var
    development_version = 0;
    /*<<sys.ml.in:37:22>>*/ function Make(_b_, _a_){
     /*<<sys.ml.in:162:70>>*/ return [0, 1];
   }
    /*<<sys.ml.in:37:22>>*/ var
     /*<<sys.ml.in:37:22>>*/ Immediate64 = [0, Make],
     /*<<sys.ml.in:37:22>>*/ Stdlib_Sys =
      [0,
       executable_name,
       getenv_opt,
       interactive,
       os_type,
       backend_type,
       unix,
       win32,
       cygwin,
       word_size,
       int_size,
       big_endian,
       max_string_length,
       max_array_length,
       max_floatarray_length,
       set_signal,
       sigabrt,
       sigalrm,
       sigfpe,
       sighup,
       sigill,
       sigint,
       sigkill,
       sigpipe,
       sigquit,
       sigsegv,
       sigterm,
       sigusr1,
       sigusr2,
       sigchld,
       sigcont,
       sigstop,
       sigtstp,
       sigttin,
       sigttou,
       sigvtalrm,
       sigprof,
       sigbus,
       sigpoll,
       sigsys,
       sigtrap,
       sigurg,
       sigxcpu,
       sigxfsz,
       Break,
       catch_break,
       ocaml_version,
       development_version,
       ocaml_release,
       runtime.caml_ml_enable_runtime_warnings,
       runtime.caml_ml_runtime_warnings_enabled,
       Immediate64];
    /*<<sys.ml.in:37:22>>*/  /*<<sys.ml.in:37:22>>*/ runtime.caml_register_global
    (4, Stdlib_Sys, "Stdlib__Sys");
    /*<<sys.ml.in:37:22>>*/ return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Obj
//# unitInfo: Requires: Assert_failure, Stdlib, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Obj_extension_constructor$1 = "Obj.extension_constructor",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Sys = global_data.Stdlib__Sys,
    cst_Obj_Ephemeron_blit_key = "Obj.Ephemeron.blit_key",
    cst_Obj_Ephemeron_check_key = "Obj.Ephemeron.check_key",
    cst_Obj_Ephemeron_unset_key = "Obj.Ephemeron.unset_key",
    cst_Obj_Ephemeron_set_key = "Obj.Ephemeron.set_key",
    cst_Obj_Ephemeron_get_key_copy = "Obj.Ephemeron.get_key_copy",
    cst_Obj_Ephemeron_get_key = "Obj.Ephemeron.get_key",
    cst_Obj_Ephemeron_create = "Obj.Ephemeron.create",
    cst_Obj_extension_constructor$0 = cst_Obj_extension_constructor$1,
    cst_Obj_extension_constructor = cst_Obj_extension_constructor$1,
    _a_ = [0, "obj.ml", 97, 4];
   function is_block(a){
     /*<<obj.ml:26:34>>*/ return 1 - (typeof a === "number" ? 1 : 0);
    /*<<obj.ml:26:48>>*/ }
   function double_field(x, i){
     /*<<obj.ml:38:40>>*/ return  /*<<obj.ml:38:40>>*/ runtime.caml_array_get
            (x, i);
    /*<<obj.ml:38:77>>*/ }
   function set_double_field(x, i, v){
     /*<<obj.ml:40:2>>*/ return  /*<<obj.ml:40:2>>*/ runtime.caml_array_set
            (x, i, v);
    /*<<obj.ml:40:41>>*/ }
   var
    first_non_constant_constructor = 0,
    last_non_constant_constructor_ = 243,
    forcing_tag = 244,
    cont_tag = 245,
    lazy_tag = 246,
    closure_tag = 247,
    object_tag = 248,
    infix_tag = 249,
    forward_tag = 250,
    no_scan_tag = 251,
    abstract_tag = 251,
    string_tag = 252,
    double_tag = 253,
    double_array_tag = 254,
    custom_tag = 255,
    int_tag = 1000,
    out_of_heap_tag = 1001,
    unaligned_tag = 1002;
   function info(obj){
     /*<<obj.ml:97:12>>*/ if( /*<<obj.ml:97:12>>*/ caml_obj_tag(obj) !== 247)
     throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
     /*<<obj.ml:98:16>>*/ var
      /*<<obj.ml:98:16>>*/ info =
        /*<<obj.ml:98:16>>*/ runtime.caml_obj_raw_field(obj, 1),
      /*<<obj.ml:81:4>>*/ arity =
       64 === Stdlib_Sys[9] ? info >> 56 : info >> 24,
      /*<<obj.ml:92:53>>*/ start_env = info << 8 >>> 9 | 0;
     /*<<obj.ml:92:53>>*/ return [0, arity, start_env];
    /*<<obj.ml:98:33>>*/ }
   function of_val(x){
    var switch$0 = 0;
    if
     (is_block(x)
      &&  /*<<obj.ml:107:25>>*/ caml_obj_tag(x) !== 248 && 1 <= x.length - 1){var slot = x[1]; switch$0 = 1;}
    if(! switch$0) var slot = x;
    var switch$1 = 0;
     /*<<obj.ml:111:28>>*/ if
     (is_block(slot) &&  /*<<obj.ml:111:28>>*/ caml_obj_tag(slot) === 248){var name = slot[1]; switch$1 = 1;}
    if(! switch$1)
     var
      name =
         /*<<obj.ml:112:11>>*/ caml_call1
         (Stdlib[1], cst_Obj_extension_constructor$0);
     /*<<obj.ml:114:9>>*/ return  /*<<obj.ml:114:9>>*/ caml_obj_tag(name)
            === 252
            ? slot
            :  /*<<obj.ml:115:11>>*/ caml_call1
              (Stdlib[1], cst_Obj_extension_constructor);
    /*<<obj.ml:115:50>>*/ }
   function name(slot){
     /*<<obj.ml:118:9>>*/ return slot[1];
    /*<<obj.ml:118:30>>*/ }
   function id(slot){
     /*<<obj.ml:121:9>>*/ return slot[2];
    /*<<obj.ml:121:30>>*/ }
   var
    Extension_constructor = [0, of_val, name, id],
    max_ephe_length = Stdlib_Sys[13] - 2 | 0;
   function create(l){
     /*<<obj.ml:135:4>>*/ var
      /*<<obj.ml:135:4>>*/ _g_ = 0 <= l ? 1 : 0,
      /*<<obj.ml:135:4>>*/ _h_ = _g_ ? l <= max_ephe_length ? 1 : 0 : _g_;
     /*<<obj.ml:136:6>>*/ if(1 - _h_)
      /*<<obj.ml:136:6>>*/  /*<<obj.ml:136:6>>*/ caml_call1
      (Stdlib[1], cst_Obj_Ephemeron_create);
     /*<<obj.ml:137:4>>*/ return  /*<<obj.ml:137:4>>*/ runtime.caml_ephe_create
            (l);
    /*<<obj.ml:137:12>>*/ }
   function length(x){
     /*<<obj.ml:139:17>>*/ return x.length - 1 - 2 | 0;
    /*<<obj.ml:139:49>>*/ }
   function raise_if_invalid_offset(e, o, msg){
     /*<<obj.ml:142:4>>*/ var
      /*<<obj.ml:142:4>>*/ _d_ = 0 <= o ? 1 : 0,
      /*<<obj.ml:142:4>>*/ _e_ = _d_ ? o < length(e) ? 1 : 0 : _d_,
      /*<<obj.ml:143:6>>*/ _f_ = 1 - _e_;
     /*<<obj.ml:143:6>>*/ return _f_
            ?  /*<<obj.ml:143:6>>*/ caml_call1(Stdlib[1], msg)
            : _f_;
    /*<<obj.ml:143:21>>*/ }
   function get_key(e, o){
     /*<<obj.ml:147:4>>*/ raise_if_invalid_offset
     (e, o, cst_Obj_Ephemeron_get_key);
     /*<<obj.ml:148:4>>*/ return  /*<<obj.ml:148:4>>*/ runtime.caml_ephe_get_key
            (e, o);
    /*<<obj.ml:148:15>>*/ }
   function get_key_copy(e, o){
     /*<<obj.ml:152:4>>*/ raise_if_invalid_offset
     (e, o, cst_Obj_Ephemeron_get_key_copy);
     /*<<obj.ml:153:4>>*/ return  /*<<obj.ml:153:4>>*/ runtime.caml_ephe_get_key_copy
            (e, o);
    /*<<obj.ml:153:20>>*/ }
   function set_key(e, o, x){
     /*<<obj.ml:157:4>>*/ raise_if_invalid_offset
     (e, o, cst_Obj_Ephemeron_set_key);
     /*<<obj.ml:158:4>>*/ return  /*<<obj.ml:158:4>>*/ runtime.caml_ephe_set_key
            (e, o, x);
    /*<<obj.ml:158:17>>*/ }
   function unset_key(e, o){
     /*<<obj.ml:162:4>>*/ raise_if_invalid_offset
     (e, o, cst_Obj_Ephemeron_unset_key);
     /*<<obj.ml:163:4>>*/ return  /*<<obj.ml:163:4>>*/ runtime.caml_ephe_unset_key
            (e, o);
    /*<<obj.ml:163:17>>*/ }
   function check_key(e, o){
     /*<<obj.ml:167:4>>*/ raise_if_invalid_offset
     (e, o, cst_Obj_Ephemeron_check_key);
     /*<<obj.ml:168:4>>*/ return  /*<<obj.ml:168:4>>*/ runtime.caml_ephe_check_key
            (e, o);
    /*<<obj.ml:168:17>>*/ }
   function blit_key(e1, o1, e2, o2, l){
     /*<<obj.ml:175:25>>*/ if
     (0 <= l
      &&
       0 <= o1
       && (length(e1) - l | 0) >= o1 && 0 <= o2 && (length(e2) - l | 0) >= o2){
      /*<<obj.ml:177:9>>*/ var
       /*<<obj.ml:177:9>>*/ _b_ = 0 !== l ? 1 : 0,
       /*<<obj.ml:177:9>>*/ _c_ =
        _b_
         ?  /*<<obj.ml:177:24>>*/ runtime.caml_ephe_blit_key
           (e1, o1, e2, o2, l)
         : _b_;
      /*<<obj.ml:177:46>>*/ return _c_;
    }
     /*<<obj.ml:176:9>>*/ return  /*<<obj.ml:176:9>>*/ caml_call1
            (Stdlib[1], cst_Obj_Ephemeron_blit_key);
    /*<<obj.ml:177:46>>*/ }
   var
    Stdlib_Obj =
      [0,
       is_block,
       double_field,
       set_double_field,
       first_non_constant_constructor,
       last_non_constant_constructor_,
       forcing_tag,
       cont_tag,
       lazy_tag,
       closure_tag,
       object_tag,
       infix_tag,
       forward_tag,
       no_scan_tag,
       abstract_tag,
       string_tag,
       double_tag,
       double_array_tag,
       custom_tag,
       int_tag,
       out_of_heap_tag,
       unaligned_tag,
       [0, info],
       Extension_constructor,
       [0,
        create,
        length,
        get_key,
        get_key_copy,
        set_key,
        unset_key,
        check_key,
        blit_key,
        runtime.caml_ephe_get_data,
        runtime.caml_ephe_get_data_copy,
        runtime.caml_ephe_set_data,
        runtime.caml_ephe_unset_data,
        runtime.caml_ephe_check_data,
        runtime.caml_ephe_blit_data,
        max_ephe_length]];
   runtime.caml_register_global(13, Stdlib_Obj, "Stdlib__Obj");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Atomic
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_atomic_exchange = runtime.caml_atomic_exchange,
    caml_atomic_fetch_add = runtime.caml_atomic_fetch_add;
   function set(r, x){
     /*<<atomic.ml:24:14>>*/  /*<<atomic.ml:24:14>>*/ caml_atomic_exchange
     (r, x);
     /*<<atomic.ml:24:14>>*/ return 0;
    /*<<atomic.ml:24:35>>*/ }
   function incr(r){
     /*<<atomic.ml:25:13>>*/  /*<<atomic.ml:25:13>>*/ caml_atomic_fetch_add
     (r, 1);
     /*<<atomic.ml:25:13>>*/ return 0;
    /*<<atomic.ml:25:39>>*/ }
   function decr(r){
     /*<<atomic.ml:26:13>>*/  /*<<atomic.ml:26:13>>*/ caml_atomic_fetch_add
     (r, -1);
     /*<<atomic.ml:26:13>>*/ return 0;
    /*<<atomic.ml:26:42>>*/ }
   var
    _a_ = caml_atomic_fetch_add,
    _b_ = runtime.caml_atomic_cas,
    _c_ = caml_atomic_exchange,
    _d_ = runtime.caml_atomic_load,
    Stdlib_Atomic =
      [0,
       function(_e_){
         /*<<atomic.ml:17:0>>*/ return [0, _e_];
        /*<<atomic.ml:17:43>>*/ },
       _d_,
       set,
       _c_,
       _b_,
       _a_,
       incr,
       decr];
   runtime.caml_register_global(0, Stdlib_Atomic, "Stdlib__Atomic");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: CamlinternalLazy
//# unitInfo: Requires: Stdlib, Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_lazy_update_to_forward = runtime.caml_lazy_update_to_forward,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Obj = global_data.Stdlib__Obj,
    Undefined =
      [248, "CamlinternalLazy.Undefined", runtime.caml_fresh_oo_id(0)];
   function force_gen_lazy_block(only_val, blk){
     /*<<camlinternalLazy.ml:72:8>>*/ if
     (0
      !==
        /*<<camlinternalLazy.ml:72:8>>*/ runtime.caml_lazy_update_to_forcing
        (blk))
      /*<<camlinternalLazy.ml:75:9>>*/ throw  /*<<camlinternalLazy.ml:75:9>>*/ caml_maybe_attach_backtrace
            (Undefined, 1);
     /*<<camlinternalLazy.ml:73:11>>*/ if(only_val){
      /*<<camlinternalLazy.ml:61:25>>*/  /*<<camlinternalLazy.ml:61:25>>*/ var
      closure$0 = blk[1];
      /*<<camlinternalLazy.ml:62:2>>*/ blk[1] = 0;
      /*<<camlinternalLazy.ml:63:15>>*/  /*<<camlinternalLazy.ml:63:15>>*/ var
      result$0 =  /*<<camlinternalLazy.ml:63:15>>*/ caml_call1(closure$0, 0);
      /*<<camlinternalLazy.ml:64:2>>*/ blk[1] = result$0;
      /*<<camlinternalLazy.ml:65:2>>*/  /*<<camlinternalLazy.ml:65:2>>*/ caml_lazy_update_to_forward
      (blk);
      /*<<camlinternalLazy.ml:65:2>>*/ return result$0;
    }
     /*<<camlinternalLazy.ml:46:25>>*/  /*<<camlinternalLazy.ml:46:25>>*/ var
     closure = blk[1];
     /*<<camlinternalLazy.ml:47:2>>*/ blk[1] = 0;
    try{
      /*<<camlinternalLazy.ml:49:17>>*/  /*<<camlinternalLazy.ml:49:17>>*/ var
      result =  /*<<camlinternalLazy.ml:49:17>>*/ caml_call1(closure, 0);
      /*<<camlinternalLazy.ml:50:4>>*/ blk[1] = result;
      /*<<camlinternalLazy.ml:51:4>>*/  /*<<camlinternalLazy.ml:51:4>>*/ caml_lazy_update_to_forward
      (blk);
      /*<<camlinternalLazy.ml:54:4>>*/ return result;
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
      /*<<camlinternalLazy.ml:54:4>>*/ blk[1] =
      function(param){
        /*<<camlinternalLazy.ml:54:43>>*/ throw  /*<<camlinternalLazy.ml:54:43>>*/ caml_maybe_attach_backtrace
              (e, 0);
       /*<<camlinternalLazy.ml:54:50>>*/ };
      /*<<camlinternalLazy.ml:55:4>>*/  /*<<camlinternalLazy.ml:55:4>>*/ runtime.caml_lazy_reset_to_lazy
      (blk);
      /*<<camlinternalLazy.ml:55:4>>*/ throw  /*<<camlinternalLazy.ml:55:4>>*/ caml_maybe_attach_backtrace
            (e, 0);
    }
    /*<<camlinternalLazy.ml:75:24>>*/ }
   function force_lazy_block(blk){
     /*<<camlinternalLazy.ml:78:27>>*/ return force_gen_lazy_block(0, blk);
    /*<<camlinternalLazy.ml:78:67>>*/ }
   function force_gen(only_val, lzv){
     /*<<camlinternalLazy.ml:99:2>>*/  /*<<camlinternalLazy.ml:99:2>>*/ var
     t =  /*<<camlinternalLazy.ml:99:2>>*/ runtime.caml_obj_tag(lzv);
     /*<<camlinternalLazy.ml:99:2>>*/ if(t === Stdlib_Obj[12])
      /*<<camlinternalLazy.ml:101:13>>*/ return lzv[1];
     /*<<camlinternalLazy.ml:103:7>>*/ if(t === Stdlib_Obj[6])
      /*<<camlinternalLazy.ml:103:35>>*/ throw  /*<<camlinternalLazy.ml:103:35>>*/ caml_maybe_attach_backtrace
            (Undefined, 1);
     /*<<camlinternalLazy.ml:104:7>>*/ return t !== Stdlib_Obj[8]
            ? lzv
            : force_gen_lazy_block(only_val, lzv);
    /*<<camlinternalLazy.ml:105:41>>*/ }
   var CamlinternalLazy = [0, Undefined, force_lazy_block, force_gen];
   runtime.caml_register_global(2, CamlinternalLazy, "CamlinternalLazy");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Lazy
//# unitInfo: Requires: CamlinternalLazy, Stdlib, Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, caml_obj_tag = runtime.caml_obj_tag;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib_Obj = global_data.Stdlib__Obj,
    Undefined = CamlinternalLazy[1];
   function force_val(l){
     /*<<lazy.ml:56:18>>*/ return  /*<<lazy.ml:56:18>>*/ caml_call2
            (CamlinternalLazy[3], 1, l);
    /*<<lazy.ml:56:61>>*/ }
   function from_fun(f){
     /*<<lazy.ml:59:10>>*/  /*<<lazy.ml:59:10>>*/ var
     x =  /*<<lazy.ml:59:10>>*/ runtime.caml_obj_block(Stdlib_Obj[8], 1);
     /*<<lazy.ml:60:2>>*/ x[1] = f;
     /*<<lazy.ml:60:2>>*/ return x;
    /*<<lazy.ml:61:22>>*/ }
   function from_val(v){
     /*<<lazy.ml:64:10>>*/  /*<<lazy.ml:64:10>>*/ var
     t =  /*<<lazy.ml:64:10>>*/ caml_obj_tag(v);
    if
     (t !== Stdlib_Obj[12]
      && t !== Stdlib_Obj[8] && t !== Stdlib_Obj[6] && t !== Stdlib_Obj[16])
      /*<<lazy.ml:69:5>>*/ return v;
     /*<<lazy.ml:66:52>>*/ return  /*<<lazy.ml:66:52>>*/ runtime.caml_lazy_make_forward
            (v);
    /*<<lazy.ml:70:5>>*/ }
   function is_val(l){
     /*<<lazy.ml:72:26>>*/  /*<<lazy.ml:72:26>>*/ var _i_ = Stdlib_Obj[8];
     /*<<lazy.ml:72:26>>*/ return  /*<<lazy.ml:72:26>>*/ caml_obj_tag(l)
            !== _i_
            ? 1
            : 0;
    /*<<lazy.ml:72:62>>*/ }
   function map(f, x){
     /*<<lazy.ml:75:2>>*/ return [246,
            function(_f_){
             var _g_ = caml_obj_tag(x);
             if(250 === _g_)
              var _h_ = x[1];
             else{
              var switch$0 = 0;
              if(246 !== _g_ && 244 !== _g_){var _h_ = x; switch$0 = 1;}
              if(! switch$0) var _h_ = caml_call1(CamlinternalLazy[2], x);
             }
              /*<<lazy.ml:75:10>>*/ return  /*<<lazy.ml:75:10>>*/ caml_call1
                     (f, _h_);
            }];
    /*<<lazy.ml:75:20>>*/ }
   function map_val(f, x){
     /*<<lazy.ml:78:5>>*/ if(! is_val(x))
      /*<<lazy.ml:80:7>>*/ return [246,
             function(_c_){
              var _d_ = caml_obj_tag(x);
              if(250 === _d_)
               var _e_ = x[1];
              else{
               var switch$0 = 0;
               if(246 !== _d_ && 244 !== _d_){var _e_ = x; switch$0 = 1;}
               if(! switch$0) var _e_ = caml_call1(CamlinternalLazy[2], x);
              }
               /*<<lazy.ml:80:15>>*/ return  /*<<lazy.ml:80:15>>*/ caml_call1
                      (f, _e_);
             }];
     /*<<lazy.ml:79:7>>*/  /*<<lazy.ml:79:7>>*/ var
     _a_ =  /*<<lazy.ml:79:7>>*/ caml_obj_tag(x);
     /*<<lazy.ml:79:7>>*/ if(250 === _a_)
     var _b_ = x[1];
    else{
     var switch$0 = 0;
     if(246 !== _a_ && 244 !== _a_){var _b_ = x; switch$0 = 1;}
     if(! switch$0) var _b_ = caml_call1(CamlinternalLazy[2], x);
    }
     /*<<lazy.ml:79:16>>*/ return from_val
            ( /*<<lazy.ml:79:16>>*/ caml_call1(f, _b_));
    /*<<lazy.ml:80:25>>*/ }
   var
    Stdlib_Lazy =
      [0, Undefined, map, is_val, from_val, map_val, from_fun, force_val];
   runtime.caml_register_global(2, Stdlib_Lazy, "Stdlib__Lazy");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Seq
//# unitInfo: Requires: Assert_failure, CamlinternalLazy, Stdlib, Stdlib__Atomic, Stdlib__Lazy
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Assert_failure = global_data.Assert_failure,
    Stdlib_Atomic = global_data.Stdlib__Atomic,
    CamlinternalLazy = global_data.CamlinternalLazy,
    Stdlib = global_data.Stdlib,
    Stdlib_Lazy = global_data.Stdlib__Lazy,
    _a_ = [0, "seq.ml", 596, 4],
    cst_Seq_drop = "Seq.drop",
    cst_Seq_take = "Seq.take",
    cst_Seq_init = "Seq.init",
    cst_Stdlib_Seq_Forced_twice = "Stdlib.Seq.Forced_twice";
   function empty(param){
     /*<<seq.ml:24:15>>*/ return 0;
    /*<<seq.ml:24:18>>*/ }
   function return$0(x, param){
     /*<<seq.ml:26:18>>*/ return [0, x, empty];
    /*<<seq.ml:26:33>>*/ }
   function cons(x, next, param){
     /*<<seq.ml:28:21>>*/ return [0, x, next];
    /*<<seq.ml:28:35>>*/ }
   function append(seq1, seq2, param){
     /*<<seq.ml:31:8>>*/  /*<<seq.ml:31:8>>*/ var
     match =  /*<<seq.ml:31:8>>*/ caml_call1(seq1, 0);
     /*<<seq.ml:31:8>>*/ if(! match)
      /*<<seq.ml:32:11>>*/ return  /*<<seq.ml:32:11>>*/ caml_call1(seq2, 0);
    var next = match[2], x = match[1];
     /*<<seq.ml:33:31>>*/ return [0,
            x,
            function(_aM_){ /*<<?>>*/ return append(next, seq2, _aM_);}];
    /*<<seq.ml:33:48>>*/ }
   function map(f, seq, param){
     /*<<seq.ml:35:29>>*/  /*<<seq.ml:35:29>>*/ var
     match =  /*<<seq.ml:35:29>>*/ caml_call1(seq, 0);
     /*<<seq.ml:35:29>>*/ if(! match)  /*<<seq.ml:36:11>>*/ return 0;
    var next = match[2], x = match[1];
     /*<<seq.ml:37:33>>*/ function _aK_(_aL_){
      /*<<?>>*/ return map(f, next, _aL_);
    }
     /*<<seq.ml:37:28>>*/ return [0,
             /*<<seq.ml:37:28>>*/ caml_call1(f, x),
            _aK_];
    /*<<seq.ml:37:44>>*/ }
   function filter_map(f, seq, param){
    var seq$0 = seq;
     /*<<seq.ml:39:30>>*/ for(;;){
      /*<<seq.ml:39:36>>*/  /*<<seq.ml:39:36>>*/ var
      match =  /*<<seq.ml:39:36>>*/ caml_call1(seq$0, 0);
      /*<<seq.ml:39:36>>*/ if(! match)  /*<<seq.ml:40:11>>*/ return 0;
      /*<<seq.ml:42:12>>*/ var
      next = match[2],
      x = match[1],
       /*<<seq.ml:42:12>>*/ match$0 =  /*<<seq.ml:42:12>>*/ caml_call1(f, x);
      /*<<seq.ml:42:12>>*/ if(match$0){
       /*<<seq.ml:44:20>>*/  /*<<seq.ml:44:20>>*/ var y = match$0[1];
       /*<<seq.ml:44:29>>*/ return [0,
              y,
              function(_aJ_){ /*<<?>>*/ return filter_map(f, next, _aJ_);}];
     }
     var seq$0 = next;
    }
    /*<<seq.ml:44:47>>*/ }
   function filter(f, seq, param){
    var seq$0 = seq;
     /*<<seq.ml:46:26>>*/ for(;;){
      /*<<seq.ml:46:32>>*/  /*<<seq.ml:46:32>>*/ var
      match =  /*<<seq.ml:46:32>>*/ caml_call1(seq$0, 0);
      /*<<seq.ml:46:32>>*/ if(! match)  /*<<seq.ml:47:11>>*/ return 0;
     var next = match[2], x = match[1];
      /*<<seq.ml:49:9>>*/ if( /*<<seq.ml:49:9>>*/ caml_call1(f, x))
       /*<<seq.ml:50:20>>*/ return [0,
              x,
              function(_aI_){ /*<<?>>*/ return filter(f, next, _aI_);}];
     var seq$0 = next;
    }
    /*<<seq.ml:51:27>>*/ }
   function concat(seq, param){
     /*<<seq.ml:53:30>>*/  /*<<seq.ml:53:30>>*/ var
     match =  /*<<seq.ml:53:30>>*/ caml_call1(seq, 0);
     /*<<seq.ml:53:30>>*/ if(! match)  /*<<seq.ml:54:11>>*/ return 0;
    var next = match[2], x = match[1], _aG_ = 0;
     /*<<seq.ml:56:14>>*/ return append
            (x, function(_aH_){ /*<<?>>*/ return concat(next, _aH_);}, _aG_);
    /*<<seq.ml:56:30>>*/ }
   function flat_map(f, seq, param){
     /*<<seq.ml:58:34>>*/  /*<<seq.ml:58:34>>*/ var
     match =  /*<<seq.ml:58:34>>*/ caml_call1(seq, 0);
     /*<<seq.ml:58:34>>*/ if(! match)  /*<<seq.ml:59:11>>*/ return 0;
    var next = match[2], x = match[1], _aD_ = 0;
     /*<<seq.ml:61:17>>*/ function _aE_(_aF_){
      /*<<?>>*/ return flat_map(f, next, _aF_);
    }
     /*<<seq.ml:61:11>>*/ return append
            ( /*<<seq.ml:61:11>>*/ caml_call1(f, x), _aE_, _aD_);
    /*<<seq.ml:61:37>>*/ }
   function fold_left(f, acc, seq){
    var acc$0 = acc, seq$0 = seq;
     /*<<seq.ml:66:2>>*/ for(;;){
      /*<<seq.ml:66:8>>*/  /*<<seq.ml:66:8>>*/ var
      match =  /*<<seq.ml:66:8>>*/ caml_call1(seq$0, 0);
      /*<<seq.ml:66:8>>*/ if(! match)  /*<<seq.ml:67:13>>*/ return acc$0;
      /*<<seq.ml:69:18>>*/ var
      next = match[2],
      x = match[1],
       /*<<seq.ml:69:18>>*/ acc$1 =
         /*<<seq.ml:69:18>>*/ caml_call2(f, acc$0, x),
      acc$0 = acc$1,
      seq$0 = next;
    }
    /*<<seq.ml:70:28>>*/ }
   function iter(f, seq){
    var seq$0 = seq;
     /*<<seq.ml:73:2>>*/ for(;;){
      /*<<seq.ml:73:8>>*/  /*<<seq.ml:73:8>>*/ var
      match =  /*<<seq.ml:73:8>>*/ caml_call1(seq$0, 0);
      /*<<seq.ml:73:8>>*/ if(! match)  /*<<seq.ml:74:13>>*/ return 0;
     var next = match[2], x = match[1];
      /*<<seq.ml:76:8>>*/  /*<<seq.ml:76:8>>*/ caml_call1(f, x);
     var seq$0 = next;
    }
    /*<<seq.ml:77:19>>*/ }
   function unfold(f, u, param){
     /*<<seq.ml:80:8>>*/  /*<<seq.ml:80:8>>*/ var
     match =  /*<<seq.ml:80:8>>*/ caml_call1(f, u);
     /*<<seq.ml:80:8>>*/ if(! match)  /*<<seq.ml:81:12>>*/ return 0;
    var match$0 = match[1], u$0 = match$0[2], x = match$0[1];
     /*<<seq.ml:82:29>>*/ return [0,
            x,
            function(_aC_){ /*<<?>>*/ return unfold(f, u$0, _aC_);}];
    /*<<seq.ml:82:41>>*/ }
   function is_empty(xs){
     /*<<seq.ml:85:8>>*/ return  /*<<seq.ml:85:8>>*/ caml_call1(xs, 0) ? 0 : 1;
    /*<<seq.ml:89:11>>*/ }
   function uncons(xs){
     /*<<seq.ml:92:8>>*/  /*<<seq.ml:92:8>>*/ var
     match =  /*<<seq.ml:92:8>>*/ caml_call1(xs, 0);
     /*<<seq.ml:92:8>>*/ if(! match)  /*<<seq.ml:96:6>>*/ return 0;
    var xs$0 = match[2], x = match[1];
    return [0, [0, x, xs$0]];
    /*<<seq.ml:96:10>>*/ }
   function length(xs$1){
    var accu = 0, xs = xs$1;
     /*<<seq.ml:101:2>>*/ for(;;){
      /*<<seq.ml:101:8>>*/  /*<<seq.ml:101:8>>*/ var
      match =  /*<<seq.ml:101:8>>*/ caml_call1(xs, 0);
      /*<<seq.ml:101:8>>*/ if(! match)  /*<<seq.ml:103:6>>*/ return accu;
      /*<<seq.ml:105:6>>*/ var
       /*<<seq.ml:105:6>>*/ xs$0 = match[2],
       /*<<seq.ml:105:6>>*/ accu$0 = accu + 1 | 0,
      accu = accu$0,
      xs = xs$0;
    }
    /*<<seq.ml:108:17>>*/ }
   function iteri(f, xs$1){
    var i = 0, xs = xs$1;
     /*<<seq.ml:111:2>>*/ for(;;){
      /*<<seq.ml:111:8>>*/  /*<<seq.ml:111:8>>*/ var
      match =  /*<<seq.ml:111:8>>*/ caml_call1(xs, 0);
      /*<<seq.ml:111:8>>*/ if(! match)  /*<<seq.ml:113:6>>*/ return 0;
     var xs$0 = match[2], x = match[1];
      /*<<seq.ml:115:6>>*/  /*<<seq.ml:115:6>>*/ caml_call2(f, i, x);
      /*<<seq.ml:115:6>>*/ var
       /*<<seq.ml:115:6>>*/ i$0 = i + 1 | 0,
      i = i$0,
      xs = xs$0;
    }
    /*<<seq.ml:119:18>>*/ }
   function fold_lefti(f, accu$1, xs$1){
    var accu = accu$1, i = 0, xs = xs$1;
     /*<<seq.ml:122:2>>*/ for(;;){
      /*<<seq.ml:122:8>>*/  /*<<seq.ml:122:8>>*/ var
      match =  /*<<seq.ml:122:8>>*/ caml_call1(xs, 0);
      /*<<seq.ml:122:8>>*/ if(! match)  /*<<seq.ml:124:6>>*/ return accu;
      /*<<seq.ml:126:17>>*/ var
      xs$0 = match[2],
      x = match[1],
       /*<<seq.ml:126:17>>*/ accu$0 =
         /*<<seq.ml:126:17>>*/ caml_call3(f, accu, i, x),
       /*<<seq.ml:126:17>>*/ i$0 = i + 1 | 0,
      accu = accu$0,
      i = i$0,
      xs = xs$0;
    }
    /*<<seq.ml:130:28>>*/ }
   function for_all(p, xs){
    var xs$0 = xs;
     /*<<seq.ml:133:2>>*/ for(;;){
      /*<<seq.ml:133:8>>*/  /*<<seq.ml:133:8>>*/ var
      match =  /*<<seq.ml:133:8>>*/ caml_call1(xs$0, 0);
      /*<<seq.ml:133:8>>*/ if(! match)  /*<<seq.ml:135:6>>*/ return 1;
      /*<<seq.ml:137:6>>*/ var
      xs$1 = match[2],
      x = match[1],
       /*<<seq.ml:137:6>>*/ _aB_ =  /*<<seq.ml:137:6>>*/ caml_call1(p, x);
      /*<<seq.ml:137:6>>*/ if(! _aB_)  /*<<seq.ml:135:6>>*/ return _aB_;
     var xs$0 = xs$1;
    }
    /*<<seq.ml:137:25>>*/ }
   function exists(p, xs){
    var xs$0 = xs;
     /*<<seq.ml:140:2>>*/ for(;;){
      /*<<seq.ml:140:8>>*/  /*<<seq.ml:140:8>>*/ var
      match =  /*<<seq.ml:140:8>>*/ caml_call1(xs$0, 0);
      /*<<seq.ml:140:8>>*/ if(! match)  /*<<seq.ml:142:6>>*/ return 0;
      /*<<seq.ml:144:6>>*/ var
      xs$1 = match[2],
      x = match[1],
       /*<<seq.ml:144:6>>*/ _aA_ =  /*<<seq.ml:144:6>>*/ caml_call1(p, x);
      /*<<seq.ml:144:6>>*/ if(_aA_)  /*<<seq.ml:142:6>>*/ return _aA_;
     var xs$0 = xs$1;
    }
    /*<<seq.ml:144:24>>*/ }
   function find(p, xs){
    var xs$0 = xs;
     /*<<seq.ml:147:2>>*/ for(;;){
      /*<<seq.ml:147:8>>*/  /*<<seq.ml:147:8>>*/ var
      match =  /*<<seq.ml:147:8>>*/ caml_call1(xs$0, 0);
      /*<<seq.ml:147:8>>*/ if(! match)  /*<<seq.ml:149:6>>*/ return 0;
     var xs$1 = match[2], x = match[1];
      /*<<seq.ml:151:9>>*/ if( /*<<seq.ml:151:9>>*/ caml_call1(p, x))
       /*<<seq.ml:151:18>>*/ return [0, x];
     var xs$0 = xs$1;
    }
    /*<<seq.ml:151:39>>*/ }
   function find_map(f, xs){
    var xs$0 = xs;
     /*<<seq.ml:154:2>>*/ for(;;){
      /*<<seq.ml:154:8>>*/  /*<<seq.ml:154:8>>*/ var
      match =  /*<<seq.ml:154:8>>*/ caml_call1(xs$0, 0);
      /*<<seq.ml:154:8>>*/ if(! match)  /*<<seq.ml:156:6>>*/ return 0;
      /*<<seq.ml:158:12>>*/ var
      xs$1 = match[2],
      x = match[1],
       /*<<seq.ml:158:12>>*/ result =  /*<<seq.ml:158:12>>*/ caml_call1(f, x);
      /*<<seq.ml:158:12>>*/ if(result)  /*<<seq.ml:162:10>>*/ return result;
     var xs$0 = xs$1;
    }
    /*<<seq.ml:162:16>>*/ }
   function iter2(f, xs, ys){
    var xs$0 = xs, ys$0 = ys;
     /*<<seq.ml:172:2>>*/ for(;;){
      /*<<seq.ml:172:8>>*/  /*<<seq.ml:172:8>>*/ var
      match =  /*<<seq.ml:172:8>>*/ caml_call1(xs$0, 0);
      /*<<seq.ml:172:8>>*/ if(! match)  /*<<seq.ml:174:6>>*/ return 0;
      /*<<seq.ml:176:12>>*/ var
      xs$1 = match[2],
      x = match[1],
       /*<<seq.ml:176:12>>*/ match$0 =
         /*<<seq.ml:176:12>>*/ caml_call1(ys$0, 0);
      /*<<seq.ml:176:12>>*/ if(! match$0)  /*<<seq.ml:178:10>>*/ return 0;
     var ys$1 = match$0[2], y = match$0[1];
      /*<<seq.ml:180:10>>*/  /*<<seq.ml:180:10>>*/ caml_call2(f, x, y);
     var xs$0 = xs$1, ys$0 = ys$1;
    }
    /*<<seq.ml:181:23>>*/ }
   function fold_left2(f, accu, xs, ys){
    var accu$0 = accu, xs$0 = xs, ys$0 = ys;
     /*<<seq.ml:184:2>>*/ for(;;){
      /*<<seq.ml:184:8>>*/  /*<<seq.ml:184:8>>*/ var
      match =  /*<<seq.ml:184:8>>*/ caml_call1(xs$0, 0);
      /*<<seq.ml:184:8>>*/ if(! match)  /*<<seq.ml:186:6>>*/ return accu$0;
      /*<<seq.ml:188:12>>*/ var
      xs$1 = match[2],
      x = match[1],
       /*<<seq.ml:188:12>>*/ match$0 =
         /*<<seq.ml:188:12>>*/ caml_call1(ys$0, 0);
      /*<<seq.ml:188:12>>*/ if(! match$0)
       /*<<seq.ml:190:10>>*/ return accu$0;
      /*<<seq.ml:192:21>>*/ var
      ys$1 = match$0[2],
      y = match$0[1],
       /*<<seq.ml:192:21>>*/ accu$1 =
         /*<<seq.ml:192:21>>*/ caml_call3(f, accu$0, x, y),
      accu$0 = accu$1,
      xs$0 = xs$1,
      ys$0 = ys$1;
    }
    /*<<seq.ml:193:33>>*/ }
   function for_all2(f, xs, ys){
    var xs$0 = xs, ys$0 = ys;
     /*<<seq.ml:196:2>>*/ for(;;){
      /*<<seq.ml:196:8>>*/  /*<<seq.ml:196:8>>*/ var
      match =  /*<<seq.ml:196:8>>*/ caml_call1(xs$0, 0);
      /*<<seq.ml:196:8>>*/ if(! match)  /*<<seq.ml:198:6>>*/ return 1;
      /*<<seq.ml:200:12>>*/ var
      xs$1 = match[2],
      x = match[1],
       /*<<seq.ml:200:12>>*/ match$0 =
         /*<<seq.ml:200:12>>*/ caml_call1(ys$0, 0);
      /*<<seq.ml:200:12>>*/ if(! match$0)  /*<<seq.ml:202:10>>*/ return 1;
      /*<<seq.ml:204:10>>*/ var
      ys$1 = match$0[2],
      y = match$0[1],
       /*<<seq.ml:204:10>>*/ _az_ =  /*<<seq.ml:204:10>>*/ caml_call2(f, x, y);
      /*<<seq.ml:204:10>>*/ if(! _az_)  /*<<seq.ml:202:10>>*/ return _az_;
     var xs$0 = xs$1, ys$0 = ys$1;
    }
    /*<<seq.ml:204:35>>*/ }
   function exists2(f, xs, ys){
    var xs$0 = xs, ys$0 = ys;
     /*<<seq.ml:207:2>>*/ for(;;){
      /*<<seq.ml:207:8>>*/  /*<<seq.ml:207:8>>*/ var
      match =  /*<<seq.ml:207:8>>*/ caml_call1(xs$0, 0);
      /*<<seq.ml:207:8>>*/ if(! match)  /*<<seq.ml:209:6>>*/ return 0;
      /*<<seq.ml:211:12>>*/ var
      xs$1 = match[2],
      x = match[1],
       /*<<seq.ml:211:12>>*/ match$0 =
         /*<<seq.ml:211:12>>*/ caml_call1(ys$0, 0);
      /*<<seq.ml:211:12>>*/ if(! match$0)  /*<<seq.ml:213:10>>*/ return 0;
      /*<<seq.ml:215:10>>*/ var
      ys$1 = match$0[2],
      y = match$0[1],
       /*<<seq.ml:215:10>>*/ _ay_ =  /*<<seq.ml:215:10>>*/ caml_call2(f, x, y);
      /*<<seq.ml:215:10>>*/ if(_ay_)  /*<<seq.ml:213:10>>*/ return _ay_;
     var xs$0 = xs$1, ys$0 = ys$1;
    }
    /*<<seq.ml:215:34>>*/ }
   function equal(eq, xs, ys){
    var xs$0 = xs, ys$0 = ys;
     /*<<seq.ml:218:2>>*/ for(;;){
      /*<<seq.ml:218:8>>*/ var
       /*<<seq.ml:218:8>>*/ match =  /*<<seq.ml:218:8>>*/ caml_call1(xs$0, 0),
       /*<<seq.ml:218:14>>*/ match$0 =
         /*<<seq.ml:218:14>>*/ caml_call1(ys$0, 0);
      /*<<seq.ml:218:14>>*/ if(match){
      if(match$0){
        /*<<seq.ml:222:6>>*/ var
        ys$1 = match$0[2],
        y = match$0[1],
        xs$1 = match[2],
        x = match[1],
         /*<<seq.ml:222:6>>*/ _ax_ =
           /*<<seq.ml:222:6>>*/ caml_call2(eq, x, y);
        /*<<seq.ml:222:6>>*/ if(! _ax_) return _ax_;
       var xs$0 = xs$1, ys$0 = ys$1;
       continue;
      }
     }
     else if(! match$0)  /*<<seq.ml:220:6>>*/ return 1;
      /*<<seq.ml:225:6>>*/ return 0;
    }
    /*<<seq.ml:225:11>>*/ }
   function compare(cmp, xs, ys){
    var xs$0 = xs, ys$0 = ys;
     /*<<seq.ml:228:2>>*/ for(;;){
      /*<<seq.ml:228:8>>*/ var
       /*<<seq.ml:228:8>>*/ match =  /*<<seq.ml:228:8>>*/ caml_call1(xs$0, 0),
       /*<<seq.ml:228:14>>*/ match$0 =
         /*<<seq.ml:228:14>>*/ caml_call1(ys$0, 0);
      /*<<seq.ml:228:14>>*/ if(! match)
       /*<<seq.ml:235:6>>*/ return match$0 ? -1 : 0;
     var xs$1 = match[2], x = match[1];
     if(! match$0)  /*<<seq.ml:237:6>>*/ return 1;
      /*<<seq.ml:232:14>>*/ var
      ys$1 = match$0[2],
      y = match$0[1],
       /*<<seq.ml:232:14>>*/ c =  /*<<seq.ml:232:14>>*/ caml_call2(cmp, x, y);
      /*<<seq.ml:232:14>>*/ if(0 !== c)  /*<<seq.ml:233:21>>*/ return c;
     var xs$0 = xs$1, ys$0 = ys$1;
    }
    /*<<seq.ml:237:8>>*/ }
   function init_aux(f, i, j, param){
     /*<<seq.ml:244:2>>*/ if(i >= j)  /*<<seq.ml:248:4>>*/ return 0;
     /*<<seq.ml:244:16>>*/  /*<<seq.ml:244:16>>*/ var _au_ = i + 1 | 0;
     /*<<seq.ml:245:15>>*/ function _av_(_aw_){
      /*<<?>>*/ return init_aux(f, _au_, j, _aw_);
    }
     /*<<seq.ml:245:10>>*/ return [0,
             /*<<seq.ml:245:10>>*/ caml_call1(f, i),
            _av_];
    /*<<seq.ml:248:7>>*/ }
   function init(n, f){
     /*<<seq.ml:251:2>>*/ if(0 > n)
      /*<<seq.ml:252:4>>*/ return  /*<<seq.ml:252:4>>*/ caml_call1
             (Stdlib[1], cst_Seq_init);
     /*<<seq.ml:254:4>>*/  /*<<seq.ml:254:4>>*/ var _as_ = 0;
     /*<<seq.ml:254:4>>*/ return function(_at_){
      /*<<?>>*/ return init_aux(f, _as_, n, _at_);};
    /*<<seq.ml:254:18>>*/ }
   function repeat(x, param){
     /*<<seq.ml:257:11>>*/ return [0,
            x,
            function(_ar_){ /*<<?>>*/ return repeat(x, _ar_);}];
    /*<<seq.ml:257:20>>*/ }
   function forever(f, param){
     /*<<seq.ml:260:13>>*/ function _ap_(_aq_){
      /*<<?>>*/ return forever(f, _aq_);
    }
     /*<<seq.ml:260:8>>*/ return [0,
             /*<<seq.ml:260:8>>*/ caml_call1(f, 0),
            _ap_];
    /*<<seq.ml:260:23>>*/ }
   function cycle_nonempty(xs, param){
     /*<<seq.ml:267:2>>*/  /*<<seq.ml:267:2>>*/ var _an_ = 0;
     /*<<seq.ml:267:12>>*/ return append
            (xs,
             function(_ao_){ /*<<?>>*/ return cycle_nonempty(xs, _ao_);},
             _an_);
    /*<<seq.ml:267:34>>*/ }
   function cycle(xs, param){
     /*<<seq.ml:275:8>>*/  /*<<seq.ml:275:8>>*/ var
     match =  /*<<seq.ml:275:8>>*/ caml_call1(xs, 0);
     /*<<seq.ml:275:8>>*/ if(! match)  /*<<seq.ml:277:6>>*/ return 0;
    var xs$0 = match[2], x = match[1];
     /*<<seq.ml:279:26>>*/ function _ak_(_am_){
      /*<<?>>*/ return cycle_nonempty(xs, _am_);
    }
     /*<<seq.ml:279:15>>*/ return [0,
            x,
            function(_al_){ /*<<?>>*/ return append(xs$0, _ak_, _al_);}];
    /*<<seq.ml:279:46>>*/ }
   function iterate1(f, x, param){
     /*<<seq.ml:286:10>>*/  /*<<seq.ml:286:10>>*/ var
     y =  /*<<seq.ml:286:10>>*/ caml_call1(f, x);
     /*<<seq.ml:287:11>>*/ return [0,
            y,
            function(_aj_){ /*<<?>>*/ return iterate1(f, y, _aj_);}];
    /*<<seq.ml:287:24>>*/ }
   function iterate(f, x){
     /*<<seq.ml:299:9>>*/ function _ag_(_ai_){
      /*<<?>>*/ return iterate1(f, x, _ai_);
    }
     /*<<seq.ml:299:9>>*/ return function(_ah_){
      /*<<?>>*/ return [0, x, _ag_];};
    /*<<seq.ml:299:23>>*/ }
   function mapi_aux(f, i, xs, param){
     /*<<seq.ml:304:8>>*/  /*<<seq.ml:304:8>>*/ var
     match =  /*<<seq.ml:304:8>>*/ caml_call1(xs, 0);
     /*<<seq.ml:304:8>>*/ if(! match)  /*<<seq.ml:306:6>>*/ return 0;
    var xs$0 = match[2], x = match[1], _ad_ = i + 1 | 0;
     /*<<seq.ml:308:19>>*/ function _ae_(_af_){
      /*<<?>>*/ return mapi_aux(f, _ad_, xs$0, _af_);
    }
     /*<<seq.ml:308:12>>*/ return [0,
             /*<<seq.ml:308:12>>*/ caml_call2(f, i, x),
            _ae_];
    /*<<seq.ml:308:39>>*/ }
   function mapi(f, xs){
     /*<<seq.ml:311:2>>*/  /*<<seq.ml:311:2>>*/ var _ab_ = 0;
     /*<<seq.ml:311:2>>*/ return function(_ac_){
      /*<<?>>*/ return mapi_aux(f, _ab_, xs, _ac_);};
    /*<<seq.ml:311:17>>*/ }
   function tail_scan(f, s, xs, param){
     /*<<seq.ml:320:8>>*/  /*<<seq.ml:320:8>>*/ var
     match =  /*<<seq.ml:320:8>>*/ caml_call1(xs, 0);
     /*<<seq.ml:320:8>>*/ if(! match)  /*<<seq.ml:322:6>>*/ return 0;
     /*<<seq.ml:324:14>>*/ var
     xs$0 = match[2],
     x = match[1],
      /*<<seq.ml:324:14>>*/ s$0 =  /*<<seq.ml:324:14>>*/ caml_call2(f, s, x);
     /*<<seq.ml:325:15>>*/ return [0,
            s$0,
            function(_aa_){ /*<<?>>*/ return tail_scan(f, s$0, xs$0, _aa_);}];
    /*<<seq.ml:325:32>>*/ }
   function scan(f, s, xs){
     /*<<seq.ml:328:9>>*/ function _Z_(_$_){
      /*<<?>>*/ return tail_scan(f, s, xs, _$_);
    }
     /*<<seq.ml:328:9>>*/ return function(___){
      /*<<?>>*/ return [0, s, _Z_];};
    /*<<seq.ml:328:27>>*/ }
   function take_aux(n, xs){
     /*<<seq.ml:334:2>>*/ return 0 === n
            ? empty
            : function
             (param){
               /*<<seq.ml:338:12>>*/  /*<<seq.ml:338:12>>*/ var
               match =  /*<<seq.ml:338:12>>*/ caml_call1(xs, 0);
               /*<<seq.ml:338:12>>*/ if(! match)
                /*<<seq.ml:340:10>>*/ return 0;
              var xs$0 = match[2], x = match[1];
               /*<<seq.ml:342:19>>*/ return [0, x, take_aux(n - 1 | 0, xs$0)];
              /*<<seq.ml:342:37>>*/ };
    /*<<seq.ml:342:37>>*/ }
   function take(n, xs){
     /*<<seq.ml:345:2>>*/ if(n < 0)
      /*<<seq.ml:345:16>>*/  /*<<seq.ml:345:16>>*/ caml_call1
      (Stdlib[1], cst_Seq_take);
     /*<<seq.ml:345:38>>*/ return take_aux(n, xs);
    /*<<seq.ml:346:15>>*/ }
   function drop(n, xs){
     /*<<seq.ml:367:2>>*/ return 0 <= n
            ? 0
              === n
              ? xs
              : function
               (param){
                var n$0 = n, xs$0 = xs;
                 /*<<seq.ml:353:2>>*/ for(;;){
                  /*<<seq.ml:353:8>>*/  /*<<seq.ml:353:8>>*/ var
                  match =  /*<<seq.ml:353:8>>*/ caml_call1(xs$0, 0);
                  /*<<seq.ml:353:8>>*/ if(! match)
                   /*<<seq.ml:355:6>>*/ return 0;
                  /*<<seq.ml:357:6>>*/ var
                   /*<<seq.ml:357:6>>*/ xs$1 = match[2],
                   /*<<seq.ml:357:6>>*/ n$1 = n$0 - 1 | 0;
                  /*<<seq.ml:357:6>>*/ if(0 === n$1)
                   /*<<seq.ml:359:8>>*/ return  /*<<seq.ml:359:8>>*/ caml_call1
                          (xs$1, 0);
                 var n$0 = n$1, xs$0 = xs$1;
                }
                /*<<seq.ml:372:21>>*/ }
            :  /*<<seq.ml:367:16>>*/ caml_call1(Stdlib[1], cst_Seq_drop);
    /*<<seq.ml:372:21>>*/ }
   function take_while(p, xs, param){
     /*<<seq.ml:375:8>>*/  /*<<seq.ml:375:8>>*/ var
     match =  /*<<seq.ml:375:8>>*/ caml_call1(xs, 0);
     /*<<seq.ml:375:8>>*/ if(! match)  /*<<seq.ml:377:6>>*/ return 0;
    var xs$0 = match[2], x = match[1];
     /*<<seq.ml:379:9>>*/ return  /*<<seq.ml:379:9>>*/ caml_call1(p, x)
            ? [0,
              x,
              function(_Y_){ /*<<?>>*/ return take_while(p, xs$0, _Y_);}]
            : 0;
    /*<<seq.ml:379:52>>*/ }
   function drop_while(p, xs, param){
    var xs$0 = xs;
     /*<<seq.ml:382:2>>*/ for(;;){
      /*<<seq.ml:382:8>>*/  /*<<seq.ml:382:8>>*/ var
      node =  /*<<seq.ml:382:8>>*/ caml_call1(xs$0, 0);
      /*<<seq.ml:382:8>>*/ if(! node)  /*<<seq.ml:384:6>>*/ return 0;
     var xs$1 = node[2], x = node[1];
      /*<<seq.ml:386:9>>*/ if(!  /*<<seq.ml:386:9>>*/ caml_call1(p, x))
       /*<<seq.ml:386:42>>*/ return node;
     var xs$0 = xs$1;
    }
    /*<<seq.ml:386:46>>*/ }
   function group(eq, xs, param){
     /*<<seq.ml:389:8>>*/  /*<<seq.ml:389:8>>*/ var
     match =  /*<<seq.ml:389:8>>*/ caml_call1(xs, 0);
     /*<<seq.ml:389:8>>*/ if(! match)  /*<<seq.ml:391:6>>*/ return 0;
     /*<<seq.ml:393:64>>*/ var
     xs$0 = match[2],
     x = match[1],
      /*<<seq.ml:393:64>>*/ _P_ =  /*<<seq.ml:393:64>>*/ caml_call1(eq, x);
     /*<<seq.ml:393:52>>*/ function _Q_(_X_){
      /*<<?>>*/ return drop_while(_P_, xs$0, _X_);
    }
     /*<<seq.ml:393:43>>*/ function _R_(_W_){
      /*<<?>>*/ return group(eq, _Q_, _W_);
    }
     /*<<seq.ml:393:31>>*/  /*<<seq.ml:393:31>>*/ var
     _S_ =  /*<<seq.ml:393:31>>*/ caml_call1(eq, x);
     /*<<seq.ml:393:19>>*/ function _T_(_V_){
      /*<<?>>*/ return take_while(_S_, xs$0, _V_);
    }
     /*<<seq.ml:393:12>>*/ return [0,
            function(_U_){ /*<<?>>*/ return [0, x, _T_];},
            _R_];
    /*<<seq.ml:393:75>>*/ }
   var
    Forced_twice =
      [248, cst_Stdlib_Seq_Forced_twice, runtime.caml_fresh_oo_id(0)],
    to_lazy = Stdlib_Lazy[6];
   function failure(param){
     /*<<seq.ml:421:6>>*/ throw  /*<<seq.ml:421:6>>*/ caml_maybe_attach_backtrace
           (Forced_twice, 1);
    /*<<seq.ml:421:24>>*/ }
   function memoize(xs){
     /*<<seq.ml:439:2>>*/ function s$0(param){
      /*<<seq.ml:440:10>>*/  /*<<seq.ml:440:10>>*/ var
      match =  /*<<seq.ml:440:10>>*/ caml_call1(xs, 0);
      /*<<seq.ml:440:10>>*/ if(! match)  /*<<seq.ml:442:8>>*/ return 0;
     var xs$0 = match[2], x = match[1];
      /*<<seq.ml:444:17>>*/ return [0, x, memoize(xs$0)];
     /*<<seq.ml:444:28>>*/ }
     /*<<seq.ml:414:14>>*/  /*<<seq.ml:414:14>>*/ var
     s =  /*<<seq.ml:414:14>>*/ caml_call1(to_lazy, s$0);
     /*<<seq.ml:414:14>>*/ return function(_O_){
      /*<<seq.ml:409:14>>*/  /*<<seq.ml:409:14>>*/ var
      _N_ =  /*<<seq.ml:409:14>>*/ runtime.caml_obj_tag(s);
      /*<<seq.ml:409:14>>*/ if(250 === _N_) return s[1];
     if(246 !== _N_ && 244 !== _N_)  /*<<seq.ml:372:6>>*/ return s;
     return caml_call1(CamlinternalLazy[2], s);};
    /*<<seq.ml:445:3>>*/ }
   function once(xs){
     /*<<seq.ml:448:2>>*/ function f(param){
      /*<<seq.ml:449:10>>*/  /*<<seq.ml:449:10>>*/ var
      match =  /*<<seq.ml:449:10>>*/ caml_call1(xs, 0);
      /*<<seq.ml:449:10>>*/ if(! match)  /*<<seq.ml:451:8>>*/ return 0;
     var xs$0 = match[2], x = match[1];
      /*<<seq.ml:453:17>>*/ return [0, x, once(xs$0)];
     /*<<seq.ml:453:25>>*/ }
     /*<<seq.ml:428:17>>*/  /*<<seq.ml:428:17>>*/ var
     action =  /*<<seq.ml:428:17>>*/ caml_call1(Stdlib_Atomic[1], f);
     /*<<seq.ml:428:17>>*/ return function(param){
      /*<<seq.ml:433:14>>*/  /*<<seq.ml:433:14>>*/ var
      f =  /*<<seq.ml:433:14>>*/ caml_call2(Stdlib_Atomic[4], action, failure);
      /*<<seq.ml:433:14>>*/ return  /*<<seq.ml:433:14>>*/ caml_call1(f, 0); /*<<seq.ml:434:9>>*/ };
    /*<<seq.ml:454:3>>*/ }
   function zip(xs, ys, param){
     /*<<seq.ml:458:8>>*/  /*<<seq.ml:458:8>>*/ var
     match =  /*<<seq.ml:458:8>>*/ caml_call1(xs, 0);
     /*<<seq.ml:458:8>>*/ if(! match)  /*<<seq.ml:460:6>>*/ return 0;
     /*<<seq.ml:462:12>>*/ var
     xs$0 = match[2],
     x = match[1],
      /*<<seq.ml:462:12>>*/ match$0 =  /*<<seq.ml:462:12>>*/ caml_call1(ys, 0);
     /*<<seq.ml:462:12>>*/ if(! match$0)  /*<<seq.ml:464:10>>*/ return 0;
    var ys$0 = match$0[2], y = match$0[1];
     /*<<seq.ml:466:24>>*/ return [0,
            [0, x, y],
            function(_M_){ /*<<?>>*/ return zip(xs$0, ys$0, _M_);}];
    /*<<seq.ml:466:34>>*/ }
   function map2(f, xs, ys, param){
     /*<<seq.ml:469:8>>*/  /*<<seq.ml:469:8>>*/ var
     match =  /*<<seq.ml:469:8>>*/ caml_call1(xs, 0);
     /*<<seq.ml:469:8>>*/ if(! match)  /*<<seq.ml:471:6>>*/ return 0;
     /*<<seq.ml:473:12>>*/ var
     xs$0 = match[2],
     x = match[1],
      /*<<seq.ml:473:12>>*/ match$0 =  /*<<seq.ml:473:12>>*/ caml_call1(ys, 0);
     /*<<seq.ml:473:12>>*/ if(! match$0)  /*<<seq.ml:475:10>>*/ return 0;
    var ys$0 = match$0[2], y = match$0[1];
     /*<<seq.ml:477:23>>*/ function _K_(_L_){
      /*<<?>>*/ return map2(f, xs$0, ys$0, _L_);
    }
     /*<<seq.ml:477:16>>*/ return [0,
             /*<<seq.ml:477:16>>*/ caml_call2(f, x, y),
            _K_];
    /*<<seq.ml:477:36>>*/ }
   function interleave(xs, ys, param){
     /*<<seq.ml:480:8>>*/  /*<<seq.ml:480:8>>*/ var
     match =  /*<<seq.ml:480:8>>*/ caml_call1(xs, 0);
     /*<<seq.ml:480:8>>*/ if(! match)
      /*<<seq.ml:482:6>>*/ return  /*<<seq.ml:482:6>>*/ caml_call1(ys, 0);
    var xs$0 = match[2], x = match[1];
     /*<<seq.ml:484:15>>*/ return [0,
            x,
            function(_J_){ /*<<?>>*/ return interleave(ys, xs$0, _J_);}];
    /*<<seq.ml:484:32>>*/ }
   function sorted_merge1(cmp, x, xs, y, ys){
     /*<<seq.ml:513:5>>*/ return 0
            <  /*<<seq.ml:513:5>>*/ caml_call2(cmp, x, y)
            ? [0,
              y,
              function(_H_){
                /*<<seq.ml:499:8>>*/  /*<<seq.ml:499:8>>*/ var
                match =  /*<<seq.ml:499:8>>*/ caml_call1(ys, 0);
                /*<<seq.ml:499:8>>*/ if(! match)
                 /*<<seq.ml:501:6>>*/ return [0, x, xs];
               var ys$0 = match[2], y = match[1];
               return sorted_merge1(cmp, x, xs, y, ys$0);
              }]
            : [0,
              x,
              function(_I_){
                /*<<seq.ml:506:8>>*/  /*<<seq.ml:506:8>>*/ var
                match =  /*<<seq.ml:506:8>>*/ caml_call1(xs, 0);
                /*<<seq.ml:506:8>>*/ if(! match)
                 /*<<seq.ml:508:6>>*/ return [0, y, ys];
               var xs$0 = match[2], x = match[1];
               return sorted_merge1(cmp, x, xs$0, y, ys);
              }];
    /*<<seq.ml:516:40>>*/ }
   function sorted_merge(cmp, xs, ys, param){
     /*<<seq.ml:519:8>>*/ var
      /*<<seq.ml:519:8>>*/ match =  /*<<seq.ml:519:8>>*/ caml_call1(xs, 0),
      /*<<seq.ml:519:14>>*/ match$0 =  /*<<seq.ml:519:14>>*/ caml_call1(ys, 0);
     /*<<seq.ml:519:14>>*/ if(match){
     if(match$0){
      var ys$0 = match$0[2], y = match$0[1], xs$0 = match[2], x = match[1];
      return sorted_merge1(cmp, x, xs$0, y, ys$0);
     }
     var c = match;
    }
    else{if(! match$0)  /*<<seq.ml:521:8>>*/ return 0; var c = match$0;}
     /*<<seq.ml:524:8>>*/ return c;
    /*<<seq.ml:526:35>>*/ }
   function map_fst(xys, param){
     /*<<seq.ml:530:8>>*/  /*<<seq.ml:530:8>>*/ var
     match =  /*<<seq.ml:530:8>>*/ caml_call1(xys, 0);
     /*<<seq.ml:530:8>>*/ if(! match)  /*<<seq.ml:532:6>>*/ return 0;
    var xys$0 = match[2], x = match[1][1];
     /*<<seq.ml:534:15>>*/ return [0,
            x,
            function(_G_){ /*<<?>>*/ return map_fst(xys$0, _G_);}];
    /*<<seq.ml:534:27>>*/ }
   function map_snd(xys, param){
     /*<<seq.ml:537:8>>*/  /*<<seq.ml:537:8>>*/ var
     match =  /*<<seq.ml:537:8>>*/ caml_call1(xys, 0);
     /*<<seq.ml:537:8>>*/ if(! match)  /*<<seq.ml:539:6>>*/ return 0;
    var xys$0 = match[2], y = match[1][2];
     /*<<seq.ml:541:15>>*/ return [0,
            y,
            function(_F_){ /*<<?>>*/ return map_snd(xys$0, _F_);}];
    /*<<seq.ml:541:27>>*/ }
   function unzip(xys){
     /*<<seq.ml:544:15>>*/ function _C_(_E_){
      /*<<?>>*/ return map_snd(xys, _E_);
    }
     /*<<seq.ml:544:2>>*/ return [0,
            function(_D_){ /*<<?>>*/ return map_fst(xys, _D_);},
            _C_];
    /*<<seq.ml:544:26>>*/ }
   function filter_map_find_left_map(f, xs, param){
    var xs$0 = xs;
     /*<<seq.ml:553:2>>*/ for(;;){
      /*<<seq.ml:553:8>>*/  /*<<seq.ml:553:8>>*/ var
      match =  /*<<seq.ml:553:8>>*/ caml_call1(xs$0, 0);
      /*<<seq.ml:553:8>>*/ if(! match)  /*<<seq.ml:555:6>>*/ return 0;
      /*<<seq.ml:557:12>>*/ var
      xs$1 = match[2],
      x = match[1],
       /*<<seq.ml:557:12>>*/ match$0 =  /*<<seq.ml:557:12>>*/ caml_call1(f, x);
      /*<<seq.ml:557:12>>*/ if(0 === match$0[0]){
       /*<<seq.ml:559:10>>*/  /*<<seq.ml:559:10>>*/ var y = match$0[1];
       /*<<seq.ml:559:19>>*/ return [0,
              y,
              function(_B_){
                /*<<?>>*/ return filter_map_find_left_map(f, xs$1, _B_);
              }];
     }
     var xs$0 = xs$1;
    }
    /*<<seq.ml:561:42>>*/ }
   function filter_map_find_right_map(f, xs, param){
    var xs$0 = xs;
     /*<<seq.ml:564:2>>*/ for(;;){
      /*<<seq.ml:564:8>>*/  /*<<seq.ml:564:8>>*/ var
      match =  /*<<seq.ml:564:8>>*/ caml_call1(xs$0, 0);
      /*<<seq.ml:564:8>>*/ if(! match)  /*<<seq.ml:566:6>>*/ return 0;
      /*<<seq.ml:568:12>>*/ var
      xs$1 = match[2],
      x = match[1],
       /*<<seq.ml:568:12>>*/ match$0 =  /*<<seq.ml:568:12>>*/ caml_call1(f, x);
      /*<<seq.ml:568:12>>*/ if(0 === match$0[0]){var xs$0 = xs$1; continue;}
      /*<<seq.ml:572:10>>*/  /*<<seq.ml:572:10>>*/ var z = match$0[1];
      /*<<seq.ml:572:19>>*/ return [0,
             z,
             function(_A_){
               /*<<?>>*/ return filter_map_find_right_map(f, xs$1, _A_);
             }];
    }
    /*<<seq.ml:572:50>>*/ }
   function partition_map(f, xs){
     /*<<seq.ml:576:2>>*/ function _x_(_z_){
      /*<<?>>*/ return filter_map_find_right_map(f, xs, _z_);
    }
     /*<<seq.ml:575:2>>*/ return [0,
            function(_y_){
              /*<<?>>*/ return filter_map_find_left_map(f, xs, _y_);
            },
            _x_];
    /*<<seq.ml:576:32>>*/ }
   function partition(p, xs){
     /*<<seq.ml:579:2>>*/ function _t_(x){
      /*<<seq.ml:579:36>>*/ return 1 -  /*<<seq.ml:579:36>>*/ caml_call1(p, x);
     /*<<seq.ml:579:41>>*/ }
     /*<<seq.ml:579:15>>*/ function _u_(_w_){
      /*<<?>>*/ return filter(_t_, xs, _w_);
    }
     /*<<seq.ml:579:2>>*/ return [0,
            function(_v_){ /*<<?>>*/ return filter(p, xs, _v_);},
            _u_];
    /*<<seq.ml:579:45>>*/ }
   function peel(xss){
     /*<<seq.ml:591:8>>*/ return unzip
            (function(_s_){ /*<<?>>*/ return filter_map(uncons, xss, _s_);});
    /*<<seq.ml:591:31>>*/ }
   function transpose(xss, param){
     /*<<seq.ml:594:21>>*/ var
      /*<<seq.ml:594:21>>*/ match = peel(xss),
      /*<<seq.ml:594:21>>*/ tails = match[2],
      /*<<seq.ml:594:21>>*/ heads = match[1];
     /*<<seq.ml:595:5>>*/ if(! is_empty(heads))
      /*<<seq.ml:600:17>>*/ return [0,
             heads,
             function(_r_){ /*<<?>>*/ return transpose(tails, _r_);}];
     /*<<seq.ml:596:11>>*/ if(is_empty(tails))  /*<<seq.ml:597:4>>*/ return 0;
    throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
    /*<<seq.ml:600:33>>*/ }
   function _b_(remainders, xss, param){
     /*<<seq.ml:607:8>>*/  /*<<seq.ml:607:8>>*/ var
     match =  /*<<seq.ml:607:8>>*/ caml_call1(xss, 0);
     /*<<seq.ml:607:8>>*/ if(! match)
      /*<<seq.ml:629:6>>*/ return transpose(remainders, 0);
     /*<<seq.ml:609:18>>*/ var
     xss$0 = match[2],
     xs = match[1],
      /*<<seq.ml:609:18>>*/ match$0 =  /*<<seq.ml:609:18>>*/ caml_call1(xs, 0);
     /*<<seq.ml:609:18>>*/ if(match$0){
      /*<<seq.ml:617:29>>*/ var
      xs$0 = match$0[2],
      x = match$0[1],
       /*<<seq.ml:617:29>>*/ match$1 = peel(remainders),
       /*<<seq.ml:617:29>>*/ tails = match$1[2],
       /*<<seq.ml:617:29>>*/ heads = match$1[1],
       /*<<seq.ml:618:40>>*/ _l_ =
        function(_q_){ /*<<?>>*/ return [0, xs$0, tails];},
       /*<<seq.ml:618:30>>*/ _m_ =
        function(_p_){ /*<<?>>*/ return _b_(_l_, xss$0, _p_);};
      /*<<seq.ml:618:16>>*/ return [0,
             function(_o_){ /*<<?>>*/ return [0, x, heads];},
             _m_];
    }
     /*<<seq.ml:623:29>>*/ var
      /*<<seq.ml:623:29>>*/ match$2 = peel(remainders),
      /*<<seq.ml:623:29>>*/ tails$0 = match$2[2],
      /*<<seq.ml:623:29>>*/ heads$0 = match$2[1];
     /*<<seq.ml:624:23>>*/ return [0,
            heads$0,
            function(_n_){ /*<<?>>*/ return _b_(tails$0, xss$0, _n_);}];
    /*<<seq.ml:629:29>>*/ }
   function map_product(f, xs, ys){
     /*<<seq.ml:648:2>>*/ function _f_(x){
      /*<<seq.ml:650:6>>*/ function _j_(y){
       /*<<seq.ml:651:8>>*/ return  /*<<seq.ml:651:8>>*/ caml_call2(f, x, y);
      /*<<seq.ml:651:13>>*/ }
      /*<<seq.ml:650:6>>*/ return function(_k_){
       /*<<?>>*/ return map(_j_, ys, _k_);};
     /*<<seq.ml:652:10>>*/ }
     /*<<seq.ml:648:20>>*/ function xss(_i_){
      /*<<?>>*/ return map(_f_, xs, _i_);
    }
     /*<<seq.ml:645:2>>*/ function _e_(_h_){
      /*<<?>>*/ return _b_(empty, xss, _h_);
    }
    return function(_g_){ /*<<?>>*/ return concat(_e_, _g_);};
    /*<<seq.ml:654:4>>*/ }
   function product(xs, ys){
     /*<<seq.ml:657:2>>*/ return map_product
            (function(x, y){
               /*<<seq.ml:657:26>>*/ return [0, x, y];
              /*<<seq.ml:657:32>>*/ },
             xs,
             ys);
    /*<<seq.ml:657:39>>*/ }
   function of_dispenser(it){
     /*<<seq.ml:660:2>>*/ function c(param){
      /*<<seq.ml:661:10>>*/  /*<<seq.ml:661:10>>*/ var
      match =  /*<<seq.ml:661:10>>*/ caml_call1(it, 0);
      /*<<seq.ml:661:10>>*/ if(! match)  /*<<seq.ml:663:8>>*/ return 0;
      /*<<seq.ml:665:8>>*/  /*<<seq.ml:665:8>>*/ var x = match[1];
      /*<<seq.ml:665:8>>*/ return [0, x, c];
     /*<<seq.ml:665:19>>*/ }
     /*<<seq.ml:660:2>>*/ return c;
    /*<<seq.ml:667:3>>*/ }
   function to_dispenser(xs){
     /*<<seq.ml:670:2>>*/  /*<<seq.ml:670:2>>*/ var s = [0, xs];
     /*<<seq.ml:670:2>>*/ return function(param){
      /*<<seq.ml:672:10>>*/  /*<<seq.ml:672:10>>*/ var
      match =  /*<<seq.ml:672:10>>*/ caml_call1(s[1], 0);
      /*<<seq.ml:672:10>>*/ if(! match)  /*<<seq.ml:674:8>>*/ return 0;
     var xs = match[2], x = match[1];
     s[1] = xs;
     return [0, x]; /*<<seq.ml:677:14>>*/ };
    /*<<seq.ml:677:14>>*/ }
   function ints(i, param){
     /*<<seq.ml:682:2>>*/  /*<<seq.ml:682:2>>*/ var _c_ = i + 1 | 0;
     /*<<seq.ml:682:11>>*/ return [0,
            i,
            function(_d_){ /*<<?>>*/ return ints(_c_, _d_);}];
    /*<<seq.ml:682:24>>*/ }
   var
    Stdlib_Seq =
      [0,
       is_empty,
       uncons,
       length,
       iter,
       fold_left,
       iteri,
       fold_lefti,
       for_all,
       exists,
       find,
       find_map,
       iter2,
       fold_left2,
       for_all2,
       exists2,
       equal,
       compare,
       empty,
       return$0,
       cons,
       init,
       unfold,
       repeat,
       forever,
       cycle,
       iterate,
       map,
       mapi,
       filter,
       filter_map,
       scan,
       take,
       drop,
       take_while,
       drop_while,
       group,
       memoize,
       Forced_twice,
       once,
       transpose,
       append,
       concat,
       flat_map,
       flat_map,
       zip,
       map2,
       interleave,
       sorted_merge,
       product,
       map_product,
       unzip,
       unzip,
       partition_map,
       partition,
       of_dispenser,
       to_dispenser,
       ints];
   runtime.caml_register_global(10, Stdlib_Seq, "Stdlib__Seq");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Option
//# unitInfo: Requires: Stdlib, Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<option.ml:43:13>>*/ var
     /*<<option.ml:43:13>>*/ global_data =
       /*<<option.ml:43:13>>*/ runtime.caml_get_global_data(),
     /*<<option.ml:43:13>>*/ Stdlib_Seq = global_data.Stdlib__Seq,
     /*<<option.ml:43:13>>*/ Stdlib = global_data.Stdlib,
     /*<<option.ml:43:13>>*/ cst_option_is_None = "option is None",
    none = 0;
   function some(v){
     /*<<option.ml:19:13>>*/ return [0, v];
    /*<<option.ml:19:19>>*/ }
   function value(o, default$0){
     /*<<option.ml:20:23>>*/ if(! o)
      /*<<option.ml:20:58>>*/ return default$0;
     /*<<option.ml:20:46>>*/  /*<<option.ml:20:46>>*/ var v = o[1];
     /*<<option.ml:20:46>>*/ return v;
    /*<<option.ml:20:65>>*/ }
   function get(param){
     /*<<option.ml:21:10>>*/ if(! param)
      /*<<option.ml:21:41>>*/ return  /*<<option.ml:21:41>>*/ caml_call1
             (Stdlib[1], cst_option_is_None);
     /*<<option.ml:21:29>>*/  /*<<option.ml:21:29>>*/ var v = param[1];
     /*<<option.ml:21:29>>*/ return v;
    /*<<option.ml:21:69>>*/ }
   function bind(o, f){
     /*<<option.ml:22:15>>*/ if(! o)  /*<<option.ml:22:36>>*/ return 0;
     /*<<option.ml:22:53>>*/  /*<<option.ml:22:53>>*/ var v = o[1];
     /*<<option.ml:22:53>>*/ return  /*<<option.ml:22:53>>*/ caml_call1(f, v);
    /*<<option.ml:22:56>>*/ }
   function join(param){
     /*<<option.ml:23:11>>*/ if(! param)  /*<<option.ml:23:42>>*/ return 0;
     /*<<option.ml:23:30>>*/  /*<<option.ml:23:30>>*/ var o = param[1];
     /*<<option.ml:23:30>>*/ return o;
    /*<<option.ml:23:46>>*/ }
   function map(f, o){
     /*<<option.ml:24:14>>*/ if(! o)  /*<<option.ml:24:35>>*/ return 0;
     /*<<option.ml:24:52>>*/  /*<<option.ml:24:52>>*/ var v = o[1];
     /*<<option.ml:24:57>>*/ return [0,
             /*<<option.ml:24:57>>*/ caml_call1(f, v)];
    /*<<option.ml:24:62>>*/ }
   function fold(none, some, param){
     /*<<?>>*/ if(! param)  /*<<option.ml:25:59>>*/ return none;
     /*<<option.ml:25:42>>*/  /*<<option.ml:25:42>>*/ var v = param[1];
     /*<<option.ml:25:42>>*/ return  /*<<option.ml:25:42>>*/ caml_call1
            (some, v);
   }
   function iter(f, param){
     /*<<?>>*/ if(! param)  /*<<option.ml:26:46>>*/ return 0;
     /*<<option.ml:26:32>>*/  /*<<option.ml:26:32>>*/ var v = param[1];
     /*<<option.ml:26:32>>*/ return  /*<<option.ml:26:32>>*/ caml_call1(f, v);
   }
   function is_none(param){
     /*<<option.ml:27:14>>*/ return param ? 0 : 1;
    /*<<option.ml:27:53>>*/ }
   function is_some(param){
     /*<<option.ml:28:14>>*/ return param ? 1 : 0;
    /*<<option.ml:28:53>>*/ }
   function equal(eq, o0, o1){
     /*<<option.ml:30:21>>*/ if(o0){
     if(o1){var v1 = o1[1], v0 = o0[1]; return caml_call2(eq, v0, v1);}
    }
    else if(! o1)  /*<<option.ml:32:16>>*/ return 1;
     /*<<option.ml:33:7>>*/ return 0;
    /*<<option.ml:33:12>>*/ }
   function compare(cmp, o0, o1){
     /*<<option.ml:35:24>>*/ if(! o0)
      /*<<option.ml:38:18>>*/ return o1 ? -1 : 0;
    var v0 = o0[1];
    if(! o1)  /*<<option.ml:39:18>>*/ return 1;
     /*<<option.ml:36:22>>*/  /*<<option.ml:36:22>>*/ var v1 = o1[1];
     /*<<option.ml:36:22>>*/ return  /*<<option.ml:36:22>>*/ caml_call2
            (cmp, v0, v1);
    /*<<option.ml:39:19>>*/ }
   function to_result(none, param){
     /*<<?>>*/ if(! param)  /*<<option.ml:41:39>>*/ return [1, none];
     /*<<option.ml:41:62>>*/  /*<<option.ml:41:62>>*/ var v = param[1];
     /*<<option.ml:41:62>>*/ return [0, v];
   }
   function to_list(param){
     /*<<option.ml:42:14>>*/ if(! param)  /*<<option.ml:42:31>>*/ return 0;
     /*<<option.ml:42:46>>*/  /*<<option.ml:42:46>>*/ var v = param[1];
     /*<<option.ml:42:46>>*/ return [0, v, 0];
    /*<<option.ml:42:49>>*/ }
   function to_seq(param){
     /*<<option.ml:43:13>>*/ if(! param)
      /*<<option.ml:43:30>>*/ return Stdlib_Seq[18];
     /*<<option.ml:43:52>>*/  /*<<option.ml:43:52>>*/ var v = param[1];
     /*<<option.ml:43:52>>*/ return  /*<<option.ml:43:52>>*/ caml_call1
            (Stdlib_Seq[19], v);
    /*<<option.ml:43:64>>*/ }
   var
    Stdlib_Option =
      [0,
       none,
       some,
       value,
       get,
       bind,
       join,
       map,
       fold,
       iter,
       is_none,
       is_some,
       equal,
       compare,
       to_result,
       to_list,
       to_seq];
   runtime.caml_register_global(3, Stdlib_Option, "Stdlib__Option");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Result
//# unitInfo: Requires: Stdlib, Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<result.ml:46:13>>*/ var
     /*<<result.ml:46:13>>*/ global_data =
       /*<<result.ml:46:13>>*/ runtime.caml_get_global_data(),
     /*<<result.ml:46:13>>*/ Stdlib_Seq = global_data.Stdlib__Seq,
     /*<<result.ml:46:13>>*/ Stdlib = global_data.Stdlib,
     /*<<result.ml:46:13>>*/ cst_result_is_Ok = "result is Ok _",
     /*<<result.ml:46:13>>*/ cst_result_is_Error = "result is Error _";
   function ok(v){
     /*<<result.ml:18:11>>*/ return [0, v];
    /*<<result.ml:18:15>>*/ }
   function error(e){
     /*<<result.ml:19:14>>*/ return [1, e];
    /*<<result.ml:19:21>>*/ }
   function value(r, default$0){
     /*<<result.ml:20:23>>*/ if(0 !== r[0])
      /*<<result.ml:20:59>>*/ return default$0;
     /*<<result.ml:20:44>>*/  /*<<result.ml:20:44>>*/ var v = r[1];
     /*<<result.ml:20:44>>*/ return v;
    /*<<result.ml:20:66>>*/ }
   function get_ok(param){
     /*<<result.ml:21:13>>*/ if(0 !== param[0])
      /*<<result.ml:21:45>>*/ return  /*<<result.ml:21:45>>*/ caml_call1
             (Stdlib[1], cst_result_is_Error);
     /*<<result.ml:21:30>>*/  /*<<result.ml:21:30>>*/ var v = param[1];
     /*<<result.ml:21:30>>*/ return v;
    /*<<result.ml:21:76>>*/ }
   function get_error(param){
     /*<<result.ml:22:16>>*/ if(0 === param[0])
      /*<<result.ml:22:48>>*/ return  /*<<result.ml:22:48>>*/ caml_call1
             (Stdlib[1], cst_result_is_Ok);
     /*<<result.ml:22:36>>*/  /*<<result.ml:22:36>>*/ var e = param[1];
     /*<<result.ml:22:36>>*/ return e;
    /*<<result.ml:22:76>>*/ }
   function bind(r, f){
     /*<<result.ml:23:15>>*/ if(0 !== r[0])  /*<<result.ml:23:58>>*/ return r;
     /*<<result.ml:23:36>>*/  /*<<result.ml:23:36>>*/ var v = r[1];
     /*<<result.ml:23:36>>*/ return  /*<<result.ml:23:36>>*/ caml_call1(f, v);
    /*<<result.ml:23:59>>*/ }
   function join(e){
     /*<<result.ml:24:11>>*/ if(0 !== e[0])  /*<<result.ml:24:48>>*/ return e;
     /*<<result.ml:24:28>>*/  /*<<result.ml:24:28>>*/ var r = e[1];
     /*<<result.ml:24:28>>*/ return r;
    /*<<result.ml:24:49>>*/ }
   function map(f, e){
     /*<<?>>*/ if(0 !== e[0])  /*<<result.ml:25:56>>*/ return e;
     /*<<result.ml:25:29>>*/  /*<<result.ml:25:29>>*/ var v = e[1];
     /*<<result.ml:25:32>>*/ return [0,
             /*<<result.ml:25:32>>*/ caml_call1(f, v)];
   }
   function map_error(f, v){
     /*<<?>>*/ if(0 === v[0])  /*<<result.ml:26:65>>*/ return v;
     /*<<result.ml:26:38>>*/  /*<<result.ml:26:38>>*/ var e = v[1];
     /*<<result.ml:26:44>>*/ return [1,
             /*<<result.ml:26:44>>*/ caml_call1(f, e)];
   }
   function fold(ok, error, param){
     /*<<?>>*/ if(0 === param[0]){
      /*<<result.ml:27:39>>*/  /*<<result.ml:27:39>>*/ var v = param[1];
      /*<<result.ml:27:39>>*/ return  /*<<result.ml:27:39>>*/ caml_call1
             (ok, v);
    }
     /*<<result.ml:27:57>>*/  /*<<result.ml:27:57>>*/ var e = param[1];
     /*<<result.ml:27:57>>*/ return  /*<<result.ml:27:57>>*/ caml_call1
            (error, e);
   }
   function iter(f, param){
     /*<<?>>*/ if(0 !== param[0])  /*<<result.ml:28:47>>*/ return 0;
     /*<<result.ml:28:30>>*/  /*<<result.ml:28:30>>*/ var v = param[1];
     /*<<result.ml:28:30>>*/ return  /*<<result.ml:28:30>>*/ caml_call1(f, v);
   }
   function iter_error(f, param){
     /*<<?>>*/ if(0 === param[0])  /*<<result.ml:29:53>>*/ return 0;
     /*<<result.ml:29:39>>*/  /*<<result.ml:29:39>>*/ var e = param[1];
     /*<<result.ml:29:39>>*/ return  /*<<result.ml:29:39>>*/ caml_call1(f, e);
   }
   function is_ok(param){
     /*<<result.ml:30:12>>*/ return 0 === param[0] ? 1 : 0;
    /*<<result.ml:30:52>>*/ }
   function is_error(param){
     /*<<result.ml:31:15>>*/ return 0 === param[0] ? 0 : 1;
    /*<<result.ml:31:55>>*/ }
   function equal(ok, error, r0, r1){
     /*<<result.ml:33:29>>*/ if(0 === r0[0]){
     var v0 = r0[1];
     if(0 === r1[0]){
       /*<<result.ml:34:18>>*/  /*<<result.ml:34:18>>*/ var v1 = r1[1];
       /*<<result.ml:34:18>>*/ return  /*<<result.ml:34:18>>*/ caml_call2
              (ok, v0, v1);
     }
    }
    else{
     var e0 = r0[1];
     if(0 !== r1[0]){
       /*<<result.ml:35:24>>*/  /*<<result.ml:35:24>>*/ var e1 = r1[1];
       /*<<result.ml:35:24>>*/ return  /*<<result.ml:35:24>>*/ caml_call2
              (error, e0, e1);
     }
    }
     /*<<result.ml:36:10>>*/ return 0;
    /*<<result.ml:36:15>>*/ }
   function compare(ok, error, r0, r1){
     /*<<result.ml:38:31>>*/ if(0 === r0[0]){
     var v0 = r0[1];
     if(0 !== r1[0])  /*<<result.ml:41:19>>*/ return -1;
      /*<<result.ml:39:18>>*/  /*<<result.ml:39:18>>*/ var v1 = r1[1];
      /*<<result.ml:39:18>>*/ return  /*<<result.ml:39:18>>*/ caml_call2
             (ok, v0, v1);
    }
    var e0 = r0[1];
    if(0 === r1[0])  /*<<result.ml:42:19>>*/ return 1;
     /*<<result.ml:40:24>>*/  /*<<result.ml:40:24>>*/ var e1 = r1[1];
     /*<<result.ml:40:24>>*/ return  /*<<result.ml:40:24>>*/ caml_call2
            (error, e0, e1);
    /*<<result.ml:42:20>>*/ }
   function to_option(param){
     /*<<result.ml:44:16>>*/ if(0 !== param[0])
      /*<<result.ml:44:53>>*/ return 0;
     /*<<result.ml:44:33>>*/  /*<<result.ml:44:33>>*/ var v = param[1];
     /*<<result.ml:44:33>>*/ return [0, v];
    /*<<result.ml:44:57>>*/ }
   function to_list(param){
     /*<<result.ml:45:14>>*/ if(0 !== param[0])
      /*<<result.ml:45:48>>*/ return 0;
     /*<<result.ml:45:31>>*/  /*<<result.ml:45:31>>*/ var v = param[1];
     /*<<result.ml:45:31>>*/ return [0, v, 0];
    /*<<result.ml:45:50>>*/ }
   function to_seq(param){
     /*<<result.ml:46:13>>*/ if(0 !== param[0])
      /*<<result.ml:46:56>>*/ return Stdlib_Seq[18];
     /*<<result.ml:46:30>>*/  /*<<result.ml:46:30>>*/ var v = param[1];
     /*<<result.ml:46:30>>*/ return  /*<<result.ml:46:30>>*/ caml_call1
            (Stdlib_Seq[19], v);
    /*<<result.ml:46:65>>*/ }
   var
    Stdlib_Result =
      [0,
       ok,
       error,
       value,
       get_ok,
       get_error,
       bind,
       join,
       map,
       map_error,
       fold,
       iter,
       iter_error,
       is_ok,
       is_error,
       equal,
       compare,
       to_option,
       to_list,
       to_seq];
   runtime.caml_register_global(4, Stdlib_Result, "Stdlib__Result");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Bool
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_true = "true",
    cst_false = "false";
    /*<<bool.ml:21:35>>*/ function equal(_e_, _d_){
     /*<<?>>*/ return _e_ === _d_ ? 1 : 0;
   }
    /*<<bool.ml:21:35>>*/  /*<<bool.ml:21:35>>*/ var
    compare = runtime.caml_int_compare;
    /*<<bool.ml:21:35>>*/ function to_float(param){
     /*<<bool.ml:24:15>>*/ return param ? 1. : 0.;
    /*<<bool.ml:24:48>>*/ }
    /*<<bool.ml:21:35>>*/ function to_string(param){
     /*<<bool.ml:33:16>>*/ return param ? cst_true : cst_false;
    /*<<bool.ml:33:58>>*/ }
    /*<<bool.ml:21:35>>*/ function _a_(_c_){
     /*<<bool.ml:33:16>>*/ return _c_;
    /*<<bool.ml:33:58>>*/ }
    /*<<bool.ml:21:35>>*/  /*<<bool.ml:21:35>>*/ var
    Stdlib_Bool =
      [0,
       function(_b_){ /*<<?>>*/ return 1 - _b_;},
       equal,
       compare,
       _a_,
       to_float,
       to_string];
    /*<<bool.ml:21:35>>*/  /*<<bool.ml:21:35>>*/ runtime.caml_register_global
    (4, Stdlib_Bool, "Stdlib__Bool");
    /*<<bool.ml:21:35>>*/ return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Char
//# unitInfo: Requires: Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_string_of_bytes = runtime.caml_string_of_bytes;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "\\\\",
    cst$0 = "\\'",
    Stdlib = global_data.Stdlib,
    cst_b = "\\b",
    cst_t = "\\t",
    cst_n = "\\n",
    cst_r = "\\r",
    cst_Char_chr = "Char.chr";
   function chr(n){
     /*<<?>>*/ if(0 <= n && 255 >= n)  /*<<char.ml:22:55>>*/ return n;
     /*<<char.ml:22:27>>*/ return  /*<<char.ml:22:27>>*/ caml_call1
            (Stdlib[1], cst_Char_chr);
    /*<<char.ml:22:67>>*/ }
   function escaped(c){
    var switch$0 = 0;
     /*<<char.ml:29:14>>*/ if(40 <= c){
     if(92 === c)  /*<<char.ml:31:12>>*/ return cst;
     if(127 > c) switch$0 = 1;
    }
    else if(32 <= c){
     if(39 <= c)  /*<<char.ml:30:12>>*/ return cst$0;
     switch$0 = 1;
    }
    else if(14 > c)
     switch(c){
       case 8:
         /*<<char.ml:35:12>>*/ return cst_b;
       case 9:
         /*<<char.ml:33:12>>*/ return cst_t;
       case 10:
         /*<<char.ml:32:12>>*/ return cst_n;
       case 13:
         /*<<char.ml:34:12>>*/ return cst_r;
     }
    if(switch$0){
      /*<<char.ml:37:14>>*/  /*<<char.ml:37:14>>*/ var
      s$0 =  /*<<char.ml:37:14>>*/ caml_create_bytes(1);
      /*<<char.ml:37:14>>*/  /*<<char.ml:37:14>>*/ caml_bytes_unsafe_set
      (s$0, 0, c);
      /*<<char.ml:37:14>>*/ return  /*<<char.ml:37:14>>*/ caml_string_of_bytes
             (s$0);
    }
     /*<<char.ml:42:6>>*/  /*<<char.ml:42:6>>*/ var
     s =  /*<<char.ml:42:6>>*/ caml_create_bytes(4);
     /*<<char.ml:42:6>>*/  /*<<char.ml:42:6>>*/ caml_bytes_unsafe_set
     (s, 0, 92);
     /*<<char.ml:42:6>>*/  /*<<char.ml:42:6>>*/ caml_bytes_unsafe_set
     (s, 1, 48 + (c / 100 | 0) | 0);
     /*<<char.ml:42:6>>*/  /*<<char.ml:42:6>>*/ caml_bytes_unsafe_set
     (s, 2, 48 + ((c / 10 | 0) % 10 | 0) | 0);
     /*<<char.ml:42:6>>*/  /*<<char.ml:42:6>>*/ caml_bytes_unsafe_set
     (s, 3, 48 + (c % 10 | 0) | 0);
     /*<<char.ml:42:6>>*/ return  /*<<char.ml:42:6>>*/ caml_string_of_bytes(s);
    /*<<char.ml:47:24>>*/ }
   function lowercase_ascii(c){
     /*<<char.ml:49:22>>*/ return 25 < c - 65 >>> 0 ? c : c + 32 | 0;
    /*<<char.ml:51:10>>*/ }
   function uppercase_ascii(c){
     /*<<char.ml:53:22>>*/ return 25 < c - 97 >>> 0 ? c : c - 32 | 0;
    /*<<char.ml:55:10>>*/ }
   function compare(c1, c2){
     /*<<char.ml:59:20>>*/ return c1 - c2 | 0;
    /*<<char.ml:59:37>>*/ }
   function equal(c1, c2){
     /*<<char.ml:60:28>>*/ return 0 === (c1 - c2 | 0) ? 1 : 0;
    /*<<char.ml:60:45>>*/ }
   var
    Stdlib_Char =
      [0, chr, escaped, lowercase_ascii, uppercase_ascii, compare, equal];
   runtime.caml_register_global(8, Stdlib_Char, "Stdlib__Char");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Uchar
//# unitInfo: Requires: Assert_failure, Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_uchar_ml = "uchar.ml",
    caml_format_int = runtime.caml_format_int,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    err_no_pred = "U+0000 has no predecessor",
    err_no_succ = "U+10FFFF has no successor",
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    _d_ = [0, cst_uchar_ml, 88, 18],
    _c_ = [0, cst_uchar_ml, 91, 7],
    _b_ = [0, cst_uchar_ml, 80, 18],
    _a_ = [0, cst_uchar_ml, 85, 7],
    cst_is_not_a_latin1_character = " is not a latin1 character",
    cst_U = "U+",
    cst_is_not_an_Unicode_scalar_v = " is not an Unicode scalar value",
    min = 0,
    max = 1114111,
    lo_bound = 55295,
    hi_bound = 57344,
    bom = 65279,
    rep = 65533;
   function succ(u){
     /*<<uchar.ml:34:2>>*/ return u === 55295
            ? hi_bound
            : u
              === 1114111
              ?  /*<<uchar.ml:35:18>>*/ caml_call1(Stdlib[1], err_no_succ)
              : u + 1 | 0;
    /*<<uchar.ml:36:7>>*/ }
   function pred(u){
     /*<<uchar.ml:39:2>>*/ return u === 57344
            ? lo_bound
            : u
              === 0
              ?  /*<<uchar.ml:40:18>>*/ caml_call1(Stdlib[1], err_no_pred)
              : u - 1 | 0;
    /*<<uchar.ml:41:7>>*/ }
   function is_valid(i){
     /*<<uchar.ml:43:17>>*/ var
      /*<<uchar.ml:43:17>>*/ _o_ = 0 <= i ? 1 : 0,
      /*<<uchar.ml:43:17>>*/ _p_ = _o_ ? i <= 55295 ? 1 : 0 : _o_;
    if(_p_)
     var _q_ = _p_;
    else
     var _r_ = 57344 <= i ? 1 : 0, _q_ = _r_ ? i <= 1114111 ? 1 : 0 : _r_;
     /*<<uchar.ml:39:2>>*/ return _q_;
    /*<<uchar.ml:43:75>>*/ }
   function of_int(i){
     /*<<uchar.ml:44:18>>*/ if(is_valid(i))  /*<<uchar.ml:44:34>>*/ return i;
     /*<<uchar.ml:20:19>>*/  /*<<uchar.ml:20:19>>*/ var
     _n_ =
        /*<<uchar.ml:20:19>>*/ caml_call2
        (Stdlib[28],
          /*<<uchar.ml:20:19>>*/ caml_format_int("%X", i),
         cst_is_not_an_Unicode_scalar_v);
    return caml_call1(Stdlib[1], _n_);
    /*<<uchar.ml:44:67>>*/ }
   function is_char(u){
     /*<<uchar.ml:48:16>>*/ return u < 256 ? 1 : 0;
    /*<<uchar.ml:48:23>>*/ }
   function of_char(c){
     /*<<uchar.ml:49:16>>*/ return c;
    /*<<uchar.ml:49:27>>*/ }
   function to_char(u){
     /*<<uchar.ml:51:2>>*/ if(255 >= u)  /*<<uchar.ml:52:2>>*/ return u;
     /*<<uchar.ml:21:30>>*/ var
      /*<<uchar.ml:21:30>>*/ _l_ =
        /*<<uchar.ml:21:30>>*/ caml_call2
        (Stdlib[28],
          /*<<uchar.ml:21:30>>*/ caml_format_int("%04X", u),
         cst_is_not_a_latin1_character),
      /*<<uchar.ml:21:30>>*/ _m_ =
        /*<<uchar.ml:21:30>>*/ caml_call2(Stdlib[28], cst_U, _l_);
    return caml_call1(Stdlib[1], _m_);
    /*<<uchar.ml:52:19>>*/ }
   function unsafe_to_char(_k_){
     /*<<uchar.ml:51:2>>*/ return _k_;
    /*<<uchar.ml:52:19>>*/ }
   function equal(_j_, _i_){ /*<<?>>*/ return _j_ === _i_ ? 1 : 0;}
   var compare = runtime.caml_int_compare;
   function hash(_h_){ /*<<?>>*/ return _h_;}
   function utf_decode_is_valid(d){
     /*<<uchar.ml:73:37>>*/ return 1 === (d >>> 27 | 0) ? 1 : 0;
    /*<<uchar.ml:73:58>>*/ }
   function utf_decode_length(d){
     /*<<uchar.ml:74:35>>*/ return (d >>> 24 | 0) & 7;
    /*<<uchar.ml:74:65>>*/ }
   function utf_decode_uchar(d){
     /*<<uchar.ml:75:34>>*/ return d & 16777215;
    /*<<uchar.ml:75:65>>*/ }
   function utf_decode(n, u){
     /*<<uchar.ml:76:30>>*/ return (8 | n) << 24 | u;
    /*<<uchar.ml:76:72>>*/ }
   function utf_decode_invalid(n){
     /*<<uchar.ml:77:36>>*/ return n << 24 | 65533;
    /*<<uchar.ml:77:63>>*/ }
   function utf_8_byte_length(u){
     /*<<uchar.ml:79:26>>*/ if(0 > u)
      /*<<uchar.ml:80:18>>*/ throw  /*<<uchar.ml:80:18>>*/ caml_maybe_attach_backtrace
            ([0, Assert_failure, _b_], 1);
     /*<<uchar.ml:81:9>>*/ if(127 >= u)  /*<<uchar.ml:81:24>>*/ return 1;
     /*<<uchar.ml:82:9>>*/ if(2047 >= u)  /*<<uchar.ml:82:24>>*/ return 2;
     /*<<uchar.ml:83:9>>*/ if(65535 >= u)  /*<<uchar.ml:83:24>>*/ return 3;
     /*<<uchar.ml:84:9>>*/ if(1114111 < u)
      /*<<uchar.ml:85:7>>*/ throw  /*<<uchar.ml:85:7>>*/ caml_maybe_attach_backtrace
            ([0, Assert_failure, _a_], 1);
     /*<<uchar.ml:84:26>>*/ return 4;
    /*<<uchar.ml:85:19>>*/ }
   function utf_16_byte_length(u){
     /*<<uchar.ml:87:27>>*/ if(0 > u)
      /*<<uchar.ml:88:18>>*/ throw  /*<<uchar.ml:88:18>>*/ caml_maybe_attach_backtrace
            ([0, Assert_failure, _d_], 1);
     /*<<uchar.ml:89:9>>*/ if(65535 >= u)  /*<<uchar.ml:89:24>>*/ return 2;
     /*<<uchar.ml:90:9>>*/ if(1114111 < u)
      /*<<uchar.ml:91:7>>*/ throw  /*<<uchar.ml:91:7>>*/ caml_maybe_attach_backtrace
            ([0, Assert_failure, _c_], 1);
     /*<<uchar.ml:90:26>>*/ return 4;
    /*<<uchar.ml:91:19>>*/ }
   function _e_(_g_){
     /*<<uchar.ml:87:27>>*/ return _g_;
    /*<<uchar.ml:91:19>>*/ }
   var
    Stdlib_Uchar =
      [0,
       min,
       max,
       bom,
       rep,
       succ,
       pred,
       is_valid,
       of_int,
       function(_f_){ /*<<?>>*/ return _f_;},
       _e_,
       is_char,
       of_char,
       to_char,
       unsafe_to_char,
       equal,
       compare,
       hash,
       utf_decode_is_valid,
       utf_decode_uchar,
       utf_decode_length,
       utf_decode,
       utf_decode_invalid,
       utf_8_byte_length,
       utf_16_byte_length];
   runtime.caml_register_global(13, Stdlib_Uchar, "Stdlib__Uchar");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__List
//# unitInfo: Requires: Stdlib, Stdlib__Seq, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_List_nth$1 = "List.nth",
    caml_compare = runtime.caml_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Sys = global_data.Stdlib__Sys,
    cst_List_map2 = "List.map2",
    cst_List_iter2 = "List.iter2",
    cst_List_fold_left2 = "List.fold_left2",
    cst_List_fold_right2 = "List.fold_right2",
    cst_List_for_all2 = "List.for_all2",
    cst_List_exists2 = "List.exists2",
    _b_ = [0, 0, 0],
    cst_List_combine = "List.combine",
    cst_List_rev_map2 = "List.rev_map2",
    cst_List_init = "List.init",
    cst_List_nth$0 = cst_List_nth$1,
    cst_nth = "nth",
    cst_List_nth = cst_List_nth$1,
    cst_tl = "tl",
    cst_hd = "hd";
   function length(l$0){
    var len = 0, param = l$0;
    for(;;){
     if(! param)  /*<<list.ml:22:10>>*/ return len;
      /*<<list.ml:23:12>>*/ var
       /*<<list.ml:23:12>>*/ l = param[2],
       /*<<list.ml:23:12>>*/ len$0 = len + 1 | 0,
      len = len$0,
      param = l;
    }
    /*<<list.ml:25:29>>*/ }
   function cons(a, l){
     /*<<list.ml:27:15>>*/ return [0, a, l];
    /*<<list.ml:27:19>>*/ }
   function hd(param){
     /*<<list.ml:29:9>>*/ if(! param)
      /*<<list.ml:30:10>>*/ return  /*<<list.ml:30:10>>*/ caml_call1
             (Stdlib[2], cst_hd);
     /*<<list.ml:31:12>>*/  /*<<list.ml:31:12>>*/ var a = param[1];
     /*<<list.ml:31:12>>*/ return a;
    /*<<list.ml:31:13>>*/ }
   function tl(param){
     /*<<list.ml:33:9>>*/ if(! param)
      /*<<list.ml:34:10>>*/ return  /*<<list.ml:34:10>>*/ caml_call1
             (Stdlib[2], cst_tl);
     /*<<list.ml:35:12>>*/  /*<<list.ml:35:12>>*/ var l = param[2];
     /*<<list.ml:35:12>>*/ return l;
    /*<<list.ml:35:13>>*/ }
   function nth(l, n){
     /*<<list.ml:38:2>>*/ if(0 > n)
      /*<<list.ml:38:16>>*/ return  /*<<list.ml:38:16>>*/ caml_call1
             (Stdlib[1], cst_List_nth);
    var l$0 = l, n$0 = n;
     /*<<list.ml:40:4>>*/ for(;;){
      /*<<list.ml:40:4>>*/ if(! l$0)
       /*<<list.ml:41:12>>*/ return  /*<<list.ml:41:12>>*/ caml_call1
              (Stdlib[2], cst_nth);
     var l$1 = l$0[2], a = l$0[1];
     if(0 === n$0)  /*<<list.ml:42:28>>*/ return a;
      /*<<list.ml:42:35>>*/ var
       /*<<list.ml:42:35>>*/ n$1 = n$0 - 1 | 0,
      l$0 = l$1,
      n$0 = n$1;
    }
    /*<<list.ml:43:16>>*/ }
   function nth_opt(l, n){
     /*<<list.ml:46:2>>*/ if(0 > n)
      /*<<list.ml:46:16>>*/ return  /*<<list.ml:46:16>>*/ caml_call1
             (Stdlib[1], cst_List_nth$0);
    var l$0 = l, n$0 = n;
     /*<<list.ml:48:4>>*/ for(;;){
      /*<<list.ml:48:4>>*/ if(! l$0)  /*<<list.ml:49:12>>*/ return 0;
     var l$1 = l$0[2], a = l$0[1];
     if(0 === n$0)  /*<<list.ml:50:28>>*/ return [0, a];
      /*<<list.ml:50:40>>*/ var
       /*<<list.ml:50:40>>*/ n$1 = n$0 - 1 | 0,
      l$0 = l$1,
      n$0 = n$1;
    }
    /*<<list.ml:51:16>>*/ }
   var append = Stdlib[37];
   function rev_append(l1, l2){
    var l1$0 = l1, l2$0 = l2;
     /*<<list.ml:56:2>>*/ for(;;){
      /*<<list.ml:56:2>>*/ if(! l1$0)  /*<<list.ml:57:10>>*/ return l2$0;
     var
      l1$1 = l1$0[2],
      a = l1$0[1],
      l2$1 = [0, a, l2$0],
      l1$0 = l1$1,
      l2$0 = l2$1;
    }
    /*<<list.ml:58:36>>*/ }
   function rev(l){
     /*<<list.ml:60:12>>*/ return rev_append(l, 0);
    /*<<list.ml:60:27>>*/ }
   function init_aux(i, n, f){
     /*<<list.ml:67:2>>*/ if(n <= i)  /*<<list.ml:67:17>>*/ return 0;
     /*<<list.ml:69:12>>*/  /*<<list.ml:69:12>>*/ var
     r =  /*<<list.ml:69:12>>*/ caml_call1(f, i);
     /*<<list.ml:70:9>>*/ return [0, r, init_aux(i + 1 | 0, n, f)];
    /*<<list.ml:70:27>>*/ }
   var rev_init_threshold = typeof Stdlib_Sys[5] === "number" ? 10000 : 50;
   function init(len, f){
     /*<<list.ml:80:2>>*/ if(0 > len)
      /*<<list.ml:80:18>>*/ return  /*<<list.ml:80:18>>*/ caml_call1
             (Stdlib[1], cst_List_init);
     /*<<list.ml:81:2>>*/ if(rev_init_threshold >= len)
      /*<<list.ml:82:7>>*/ return init_aux(0, len, f);
    var acc = 0, i = 0;
     /*<<list.ml:63:2>>*/ for(;;){
      /*<<list.ml:63:2>>*/ if(len <= i) return rev(acc);
      /*<<list.ml:64:7>>*/ var
       /*<<list.ml:64:7>>*/ i$0 = i + 1 | 0,
       /*<<list.ml:64:25>>*/ acc$0 =
        [0,  /*<<list.ml:64:25>>*/ caml_call1(f, i), acc],
      acc = acc$0,
      i = i$0;
    }
    /*<<list.ml:82:23>>*/ }
   function flatten(param){
     /*<<list.ml:84:18>>*/ if(! param)  /*<<list.ml:85:10>>*/ return 0;
     /*<<list.ml:86:16>>*/ var
     r = param[2],
     l = param[1],
      /*<<list.ml:86:16>>*/ _J_ = flatten(r);
     /*<<list.ml:86:16>>*/ return  /*<<list.ml:86:16>>*/ caml_call2
            (Stdlib[37], l, _J_);
    /*<<list.ml:86:25>>*/ }
   function map(f, param){
     /*<<?>>*/ if(! param)  /*<<list.ml:91:10>>*/ return 0;
     /*<<list.ml:92:20>>*/ var
     l = param[2],
     a = param[1],
      /*<<list.ml:92:20>>*/ r =  /*<<list.ml:92:20>>*/ caml_call1(f, a);
     /*<<list.ml:92:32>>*/ return [0, r, map(f, l)];
   }
   function _a_(i, f, param){
     /*<<?>>*/ if(! param)  /*<<list.ml:95:10>>*/ return 0;
     /*<<list.ml:96:20>>*/ var
     l = param[2],
     a = param[1],
      /*<<list.ml:96:20>>*/ r =  /*<<list.ml:96:20>>*/ caml_call2(f, i, a);
     /*<<list.ml:96:34>>*/ return [0, r, _a_(i + 1 | 0, f, l)];
   }
   function mapi(f, l){
     /*<<list.ml:98:15>>*/ return _a_(0, f, l);
    /*<<list.ml:98:25>>*/ }
   function rev_map(f, l){
    var accu = 0, param = l;
    for(;;){
     if(! param)  /*<<list.ml:102:12>>*/ return accu;
      /*<<list.ml:103:22>>*/ var
      l$0 = param[2],
      a = param[1],
       /*<<list.ml:103:22>>*/ accu$0 =
        [0,  /*<<list.ml:103:22>>*/ caml_call1(f, a), accu],
      accu = accu$0,
      param = l$0;
    }
    /*<<list.ml:105:13>>*/ }
   function iter(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0)  /*<<list.ml:109:10>>*/ return 0;
     var l = param$0[2], a = param$0[1];
      /*<<list.ml:110:12>>*/  /*<<list.ml:110:12>>*/ caml_call1(f, a);
     var param$0 = l;
    }
   }
   function iteri(f, l$0){
    var i = 0, param = l$0;
    for(;;){
     if(! param)  /*<<list.ml:113:10>>*/ return 0;
     var l = param[2], a = param[1];
      /*<<list.ml:114:12>>*/  /*<<list.ml:114:12>>*/ caml_call2(f, i, a);
      /*<<list.ml:114:12>>*/ var
       /*<<list.ml:114:12>>*/ i$0 = i + 1 | 0,
      i = i$0,
      param = l;
    }
    /*<<list.ml:116:27>>*/ }
   function fold_left(f, accu, l){
    var accu$0 = accu, l$0 = l;
     /*<<list.ml:119:2>>*/ for(;;){
      /*<<list.ml:119:2>>*/ if(! l$0)  /*<<list.ml:120:10>>*/ return accu$0;
      /*<<list.ml:121:24>>*/ var
      l$1 = l$0[2],
      a = l$0[1],
       /*<<list.ml:121:24>>*/ accu$1 =
         /*<<list.ml:121:24>>*/ caml_call2(f, accu$0, a),
      accu$0 = accu$1,
      l$0 = l$1;
    }
    /*<<list.ml:121:36>>*/ }
   function fold_right(f, l, accu){
     /*<<list.ml:124:2>>*/ if(! l)  /*<<list.ml:125:10>>*/ return accu;
    var l$0 = l[2], a = l[1];
     /*<<list.ml:126:16>>*/ return  /*<<list.ml:126:16>>*/ caml_call2
            (f, a, fold_right(f, l$0, accu));
    /*<<list.ml:126:37>>*/ }
   function map2(f, l1, l2){
     /*<<list.ml:129:2>>*/ if(l1){
     if(l2){
       /*<<list.ml:131:32>>*/ var
       l2$0 = l2[2],
       a2 = l2[1],
       l1$0 = l1[2],
       a1 = l1[1],
        /*<<list.ml:131:32>>*/ r =
          /*<<list.ml:131:32>>*/ caml_call2(f, a1, a2);
       /*<<list.ml:131:48>>*/ return [0, r, map2(f, l1$0, l2$0)];
     }
    }
    else if(! l2)  /*<<list.ml:130:16>>*/ return 0;
     /*<<list.ml:132:14>>*/ return  /*<<list.ml:132:14>>*/ caml_call1
            (Stdlib[1], cst_List_map2);
    /*<<list.ml:132:37>>*/ }
   function rev_map2(f, l1, l2){
    var accu = 0, l1$0 = l1, l2$0 = l2;
     /*<<list.ml:136:4>>*/ for(;;){
      /*<<list.ml:136:4>>*/ if(l1$0){
      if(l2$0){
        /*<<list.ml:138:35>>*/ var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
         /*<<list.ml:138:35>>*/ accu$0 =
          [0,  /*<<list.ml:138:35>>*/ caml_call2(f, a1, a2), accu],
        accu = accu$0,
        l1$0 = l1$1,
        l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0)  /*<<list.ml:137:18>>*/ return accu;
      /*<<list.ml:139:16>>*/ return  /*<<list.ml:139:16>>*/ caml_call1
             (Stdlib[1], cst_List_rev_map2);
    }
    /*<<list.ml:141:18>>*/ }
   function iter2(f, l1, l2){
    var l1$0 = l1, l2$0 = l2;
     /*<<list.ml:145:2>>*/ for(;;){
      /*<<list.ml:145:2>>*/ if(l1$0){
      if(l2$0){
       var l2$1 = l2$0[2], a2 = l2$0[1], l1$1 = l1$0[2], a1 = l1$0[1];
        /*<<list.ml:147:24>>*/  /*<<list.ml:147:24>>*/ caml_call2(f, a1, a2);
       var l1$0 = l1$1, l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0)  /*<<list.ml:146:16>>*/ return 0;
      /*<<list.ml:148:14>>*/ return  /*<<list.ml:148:14>>*/ caml_call1
             (Stdlib[1], cst_List_iter2);
    }
    /*<<list.ml:148:38>>*/ }
   function fold_left2(f, accu, l1, l2){
    var accu$0 = accu, l1$0 = l1, l2$0 = l2;
     /*<<list.ml:151:2>>*/ for(;;){
      /*<<list.ml:151:2>>*/ if(l1$0){
      if(l2$0){
        /*<<list.ml:153:37>>*/ var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
         /*<<list.ml:153:37>>*/ accu$1 =
           /*<<list.ml:153:37>>*/ caml_call3(f, accu$0, a1, a2),
        accu$0 = accu$1,
        l1$0 = l1$1,
        l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0)  /*<<list.ml:152:16>>*/ return accu$0;
      /*<<list.ml:154:14>>*/ return  /*<<list.ml:154:14>>*/ caml_call1
             (Stdlib[1], cst_List_fold_left2);
    }
    /*<<list.ml:154:43>>*/ }
   function fold_right2(f, l1, l2, accu){
     /*<<list.ml:157:2>>*/ if(l1){
     if(l2){
      var l2$0 = l2[2], a2 = l2[1], l1$0 = l1[2], a1 = l1[1];
       /*<<list.ml:159:32>>*/ return  /*<<list.ml:159:32>>*/ caml_call3
              (f, a1, a2, fold_right2(f, l1$0, l2$0, accu));
     }
    }
    else if(! l2)  /*<<list.ml:158:16>>*/ return accu;
     /*<<list.ml:160:14>>*/ return  /*<<list.ml:160:14>>*/ caml_call1
            (Stdlib[1], cst_List_fold_right2);
    /*<<list.ml:160:44>>*/ }
   function for_all(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0)  /*<<list.ml:163:10>>*/ return 1;
      /*<<list.ml:164:12>>*/ var
      l = param$0[2],
      a = param$0[1],
       /*<<list.ml:164:12>>*/ _I_ =  /*<<list.ml:164:12>>*/ caml_call1(p, a);
      /*<<list.ml:164:12>>*/ if(! _I_)  /*<<list.ml:163:10>>*/ return _I_;
     var param$0 = l;
    }
   }
   function exists(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0)  /*<<list.ml:167:10>>*/ return 0;
      /*<<list.ml:168:12>>*/ var
      l = param$0[2],
      a = param$0[1],
       /*<<list.ml:168:12>>*/ _H_ =  /*<<list.ml:168:12>>*/ caml_call1(p, a);
      /*<<list.ml:168:12>>*/ if(_H_)  /*<<list.ml:167:10>>*/ return _H_;
     var param$0 = l;
    }
   }
   function for_all2(p, l1, l2){
    var l1$0 = l1, l2$0 = l2;
     /*<<list.ml:171:2>>*/ for(;;){
      /*<<list.ml:171:2>>*/ if(l1$0){
      if(l2$0){
        /*<<list.ml:173:24>>*/ var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
         /*<<list.ml:173:24>>*/ _G_ =
           /*<<list.ml:173:24>>*/ caml_call2(p, a1, a2);
        /*<<list.ml:173:24>>*/ if(! _G_) return _G_;
       var l1$0 = l1$1, l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0)  /*<<list.ml:172:16>>*/ return 1;
      /*<<list.ml:174:14>>*/ return  /*<<list.ml:174:14>>*/ caml_call1
             (Stdlib[1], cst_List_for_all2);
    }
    /*<<list.ml:174:41>>*/ }
   function exists2(p, l1, l2){
    var l1$0 = l1, l2$0 = l2;
     /*<<list.ml:177:2>>*/ for(;;){
      /*<<list.ml:177:2>>*/ if(l1$0){
      if(l2$0){
        /*<<list.ml:179:24>>*/ var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
         /*<<list.ml:179:24>>*/ _F_ =
           /*<<list.ml:179:24>>*/ caml_call2(p, a1, a2);
        /*<<list.ml:179:24>>*/ if(_F_) return _F_;
       var l1$0 = l1$1, l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0)  /*<<list.ml:178:16>>*/ return 0;
      /*<<list.ml:180:14>>*/ return  /*<<list.ml:180:14>>*/ caml_call1
             (Stdlib[1], cst_List_exists2);
    }
    /*<<list.ml:180:40>>*/ }
   function mem(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0)  /*<<list.ml:183:10>>*/ return 0;
      /*<<list.ml:184:12>>*/ var
      l = param$0[2],
      a = param$0[1],
       /*<<list.ml:184:12>>*/ _E_ =
        0 ===  /*<<list.ml:184:12>>*/ caml_compare(a, x) ? 1 : 0;
      /*<<list.ml:184:12>>*/ if(_E_)  /*<<list.ml:183:10>>*/ return _E_;
     var param$0 = l;
    }
   }
   function memq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0)  /*<<list.ml:187:10>>*/ return 0;
     var l = param$0[2], a = param$0[1], _D_ = a === x ? 1 : 0;
     if(_D_)  /*<<list.ml:187:10>>*/ return _D_;
     var param$0 = l;
    }
   }
   function assoc(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0)
       /*<<list.ml:191:10>>*/ throw  /*<<list.ml:191:10>>*/ caml_maybe_attach_backtrace
             (Stdlib[8], 1);
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
      /*<<list.ml:192:19>>*/ if
      (0 ===  /*<<list.ml:192:19>>*/ caml_compare(a, x))
       /*<<list.ml:192:40>>*/ return b;
     var param$0 = l;
    }
   }
   function assoc_opt(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0)  /*<<list.ml:195:10>>*/ return 0;
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
      /*<<list.ml:196:19>>*/ if
      (0 ===  /*<<list.ml:196:19>>*/ caml_compare(a, x))
       /*<<list.ml:196:40>>*/ return [0, b];
     var param$0 = l;
    }
   }
   function assq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0)
       /*<<list.ml:199:10>>*/ throw  /*<<list.ml:199:10>>*/ caml_maybe_attach_backtrace
             (Stdlib[8], 1);
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(a === x)  /*<<list.ml:200:31>>*/ return b;
     var param$0 = l;
    }
   }
   function assq_opt(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0)  /*<<list.ml:203:10>>*/ return 0;
     var l = param$0[2], match = param$0[1], b = match[2], a = match[1];
     if(a === x)  /*<<list.ml:204:31>>*/ return [0, b];
     var param$0 = l;
    }
   }
   function mem_assoc(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0)  /*<<list.ml:207:10>>*/ return 0;
      /*<<list.ml:208:19>>*/ var
      l = param$0[2],
      a = param$0[1][1],
       /*<<list.ml:208:19>>*/ _C_ =
        0 ===  /*<<list.ml:208:19>>*/ caml_compare(a, x) ? 1 : 0;
      /*<<list.ml:208:19>>*/ if(_C_)  /*<<list.ml:207:10>>*/ return _C_;
     var param$0 = l;
    }
   }
   function mem_assq(x, param){
    var param$0 = param;
    for(;;){
     if(! param$0)  /*<<list.ml:211:10>>*/ return 0;
     var l = param$0[2], a = param$0[1][1], _B_ = a === x ? 1 : 0;
     if(_B_)  /*<<list.ml:211:10>>*/ return _B_;
     var param$0 = l;
    }
   }
   function remove_assoc(x, param){
     /*<<?>>*/ if(! param)  /*<<list.ml:215:10>>*/ return 0;
    var l = param[2], pair = param[1], a = pair[1];
     /*<<list.ml:217:9>>*/ return 0
            ===  /*<<list.ml:217:9>>*/ caml_compare(a, x)
            ? l
            : [0, pair, remove_assoc(x, l)];
   }
   function remove_assq(x, param){
     /*<<?>>*/ if(! param)  /*<<list.ml:220:10>>*/ return 0;
    var l = param[2], pair = param[1], a = pair[1];
    return a === x ? l : [0, pair, remove_assq(x, l)];
   }
   function find(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0)
       /*<<list.ml:224:10>>*/ throw  /*<<list.ml:224:10>>*/ caml_maybe_attach_backtrace
             (Stdlib[8], 1);
     var l = param$0[2], x = param$0[1];
      /*<<list.ml:225:17>>*/ if( /*<<list.ml:225:17>>*/ caml_call1(p, x))
       /*<<list.ml:225:26>>*/ return x;
     var param$0 = l;
    }
   }
   function find_opt(p, param){
    var param$0 = param;
    for(;;){
     if(! param$0)  /*<<list.ml:228:10>>*/ return 0;
     var l = param$0[2], x = param$0[1];
      /*<<list.ml:229:17>>*/ if( /*<<list.ml:229:17>>*/ caml_call1(p, x))
       /*<<list.ml:229:26>>*/ return [0, x];
     var param$0 = l;
    }
   }
   function find_map(f, param){
    var param$0 = param;
    for(;;){
     if(! param$0)  /*<<list.ml:232:10>>*/ return 0;
      /*<<list.ml:234:17>>*/ var
      l = param$0[2],
      x = param$0[1],
       /*<<list.ml:234:17>>*/ result =
         /*<<list.ml:234:17>>*/ caml_call1(f, x);
      /*<<list.ml:234:17>>*/ if(result)  /*<<list.ml:235:29>>*/ return result;
     var param$0 = l;
    }
   }
   function find_all(p){
     /*<<list.ml:240:2>>*/  /*<<list.ml:240:2>>*/ var accu = 0;
     /*<<list.ml:240:2>>*/ return function(param$0){
     var accu$0 = accu, param = param$0;
     for(;;){
      if(! param)  /*<<list.ml:241:10>>*/ return rev(accu$0);
      var l = param[2], x = param[1];
       /*<<list.ml:242:17>>*/ if( /*<<list.ml:242:17>>*/ caml_call1(p, x)){
        /*<<list.ml:242:26>>*/ var
         /*<<list.ml:242:26>>*/ accu$1 = [0, x, accu$0],
        accu$0 = accu$1,
        param = l;
       continue;
      }
      var param = l;
     }};
    /*<<list.ml:243:9>>*/ }
   function filteri(p, l){
    var i = 0, acc = 0, param = l;
    for(;;){
     if(! param)  /*<<list.ml:249:10>>*/ return rev(acc);
      /*<<list.ml:250:28>>*/ var
      l$0 = param[2],
      x = param[1],
       /*<<list.ml:250:28>>*/ acc$0 =
         /*<<list.ml:250:28>>*/ caml_call2(p, i, x) ? [0, x, acc] : acc,
      i$0 = i + 1 | 0,
      i = i$0,
      acc = acc$0,
      param = l$0;
    }
    /*<<list.ml:252:12>>*/ }
   function filter_map(f){
     /*<<list.ml:255:2>>*/  /*<<list.ml:255:2>>*/ var accu = 0;
     /*<<list.ml:255:2>>*/ return function(param$0){
     var accu$0 = accu, param = param$0;
     for(;;){
      if(! param)  /*<<list.ml:256:12>>*/ return rev(accu$0);
       /*<<list.ml:258:14>>*/ var
       l = param[2],
       x = param[1],
        /*<<list.ml:258:14>>*/ match =
          /*<<list.ml:258:14>>*/ caml_call1(f, x);
       /*<<list.ml:258:14>>*/ if(match){
        /*<<list.ml:260:20>>*/ var
         /*<<list.ml:260:20>>*/ v = match[1],
         /*<<list.ml:260:20>>*/ accu$1 = [0, v, accu$0],
        accu$0 = accu$1,
        param = l;
       continue;
      }
      var param = l;
     }};
    /*<<list.ml:262:8>>*/ }
   function concat_map(f, l){
    var acc = 0, param = l;
    for(;;){
     if(! param)  /*<<list.ml:266:12>>*/ return rev(acc);
      /*<<list.ml:268:16>>*/ var
      l$0 = param[2],
      x = param[1],
       /*<<list.ml:268:16>>*/ xs =  /*<<list.ml:268:16>>*/ caml_call1(f, x),
       /*<<list.ml:269:13>>*/ acc$0 = rev_append(xs, acc),
      acc = acc$0,
      param = l$0;
    }
    /*<<list.ml:270:15>>*/ }
   function fold_left_map(f, accu, l){
    var accu$0 = accu, l_accu = 0, param = l;
    for(;;){
     if(! param)  /*<<list.ml:274:18>>*/ return [0, accu$0, rev(l_accu)];
      /*<<list.ml:276:22>>*/ var
      l$0 = param[2],
      x = param[1],
       /*<<list.ml:276:22>>*/ match =
         /*<<list.ml:276:22>>*/ caml_call2(f, accu$0, x),
       /*<<list.ml:276:22>>*/ x$0 = match[2],
       /*<<list.ml:276:22>>*/ accu$1 = match[1],
       /*<<list.ml:276:22>>*/ l_accu$0 = [0, x$0, l_accu],
      accu$0 = accu$1,
      l_accu = l_accu$0,
      param = l$0;
    }
    /*<<list.ml:278:15>>*/ }
   function partition(p, l){
    var yes = 0, no = 0, param = l;
    for(;;){
     if(! param){
       /*<<list.ml:282:20>>*/  /*<<list.ml:282:20>>*/ var _A_ = rev(no);
       /*<<list.ml:282:11>>*/ return [0, rev(yes), _A_];
     }
     var l$0 = param[2], x = param[1];
      /*<<list.ml:283:17>>*/ if( /*<<list.ml:283:17>>*/ caml_call1(p, x)){
       /*<<list.ml:283:26>>*/ var
        /*<<list.ml:283:26>>*/ yes$0 = [0, x, yes],
       yes = yes$0,
       param = l$0;
      continue;
     }
      /*<<list.ml:283:52>>*/ var
       /*<<list.ml:283:52>>*/ no$0 = [0, x, no],
      no = no$0,
      param = l$0;
    }
    /*<<list.ml:284:14>>*/ }
   function partition_map(p, l){
    var left = 0, right = 0, param = l;
    for(;;){
     if(! param){
       /*<<list.ml:288:21>>*/  /*<<list.ml:288:21>>*/ var _z_ = rev(right);
       /*<<list.ml:288:11>>*/ return [0, rev(left), _z_];
     }
      /*<<list.ml:290:17>>*/ var
      l$0 = param[2],
      x = param[1],
       /*<<list.ml:290:17>>*/ match =  /*<<list.ml:290:17>>*/ caml_call1(p, x);
      /*<<list.ml:290:17>>*/ if(0 === match[0]){
       /*<<list.ml:291:26>>*/ var
        /*<<list.ml:291:26>>*/ v = match[1],
        /*<<list.ml:291:26>>*/ left$0 = [0, v, left],
       left = left$0,
       param = l$0;
      continue;
     }
      /*<<list.ml:292:27>>*/ var
       /*<<list.ml:292:27>>*/ v$0 = match[1],
       /*<<list.ml:292:27>>*/ right$0 = [0, v$0, right],
      right = right$0,
      param = l$0;
    }
    /*<<list.ml:295:14>>*/ }
   function split(param){
     /*<<list.ml:297:16>>*/ if(! param)  /*<<list.ml:298:10>>*/ return _b_;
     /*<<list.ml:300:21>>*/ var
     l = param[2],
     match = param[1],
     y = match[2],
     x = match[1],
      /*<<list.ml:300:21>>*/ match$0 = split(l),
      /*<<list.ml:300:21>>*/ ry = match$0[2],
      /*<<list.ml:300:21>>*/ rx = match$0[1];
     /*<<list.ml:300:21>>*/ return [0, [0, x, rx], [0, y, ry]];
    /*<<list.ml:300:46>>*/ }
   function combine(l1, l2){
     /*<<list.ml:303:2>>*/ if(l1){
     if(l2){
      var l2$0 = l2[2], a2 = l2[1], l1$0 = l1[2], a1 = l1[1];
       /*<<list.ml:305:36>>*/ return [0, [0, a1, a2], combine(l1$0, l2$0)];
     }
    }
    else if(! l2)  /*<<list.ml:304:16>>*/ return 0;
     /*<<list.ml:306:14>>*/ return  /*<<list.ml:306:14>>*/ caml_call1
            (Stdlib[1], cst_List_combine);
    /*<<list.ml:306:40>>*/ }
   function merge(cmp, l1, l2){
     /*<<list.ml:311:2>>*/ if(! l1)  /*<<list.ml:312:14>>*/ return l2;
    if(! l2)  /*<<list.ml:313:14>>*/ return l1;
    var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
     /*<<list.ml:315:9>>*/ return 0
            <  /*<<list.ml:315:9>>*/ caml_call2(cmp, h1, h2)
            ? [0, h2, merge(cmp, l1, t2)]
            : [0, h1, merge(cmp, t1, l2)];
    /*<<list.ml:317:32>>*/ }
   function stable_sort(cmp, l){
     /*<<list.ml:321:2>>*/ function sort(n, l){
      /*<<list.ml:340:4>>*/ if(2 === n){
      if(l){
       var match = l[2];
       if(match){
         /*<<list.ml:342:19>>*/ var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
          /*<<list.ml:342:19>>*/ s =
           0 <  /*<<list.ml:342:19>>*/ caml_call2(cmp, x1, x2)
            ? [0, x2, [0, x1, 0]]
            : [0, x1, [0, x2, 0]];
         /*<<list.ml:342:53>>*/ return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _y_ = l[2];
      if(_y_){
       var match$2 = _y_[2];
       if(match$2){
         /*<<list.ml:346:13>>*/ var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _y_[1],
         x1$0 = l[1],
          /*<<list.ml:346:13>>*/ s$0 =
           0 <  /*<<list.ml:346:13>>*/ caml_call2(cmp, x1$0, x2$0)
            ? 0
              <  /*<<list.ml:350:18>>*/ caml_call2(cmp, x1$0, x3)
              ? 0
                <  /*<<list.ml:351:18>>*/ caml_call2(cmp, x2$0, x3)
                ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                : [0, x2$0, [0, x3, [0, x1$0, 0]]]
              : [0, x2$0, [0, x1$0, [0, x3, 0]]]
            : 0
              <  /*<<list.ml:347:15>>*/ caml_call2(cmp, x2$0, x3)
              ? 0
                <  /*<<list.ml:348:20>>*/ caml_call2(cmp, x1$0, x3)
                ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                : [0, x1$0, [0, x3, [0, x2$0, 0]]]
              : [0, x1$0, [0, x2$0, [0, x3, 0]]];
         /*<<list.ml:352:15>>*/ return [0, s$0, tl$1];
       }
      }
     }
      /*<<list.ml:356:8>>*/ var
       /*<<list.ml:356:8>>*/ n1 = n >> 1,
       /*<<list.ml:356:8>>*/ n2 = n - n1 | 0,
       /*<<list.ml:358:21>>*/ match$0 = rev_sort(n1, l),
       /*<<list.ml:358:21>>*/ l2$0 = match$0[2],
       /*<<list.ml:358:21>>*/ s1 = match$0[1],
       /*<<list.ml:359:21>>*/ match$1 = rev_sort(n2, l2$0),
       /*<<list.ml:359:21>>*/ tl$0 = match$1[2],
       /*<<list.ml:359:21>>*/ s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
      /*<<list.ml:331:4>>*/ for(;;){
       /*<<list.ml:331:4>>*/ if(l1){
       if(l2){
        var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
         /*<<list.ml:335:11>>*/ if
         (0 <  /*<<list.ml:335:11>>*/ caml_call2(cmp, h1, h2)){
          /*<<list.ml:336:13>>*/ var
           /*<<list.ml:336:13>>*/ accu$0 = [0, h1, accu],
          l1 = t1,
          accu = accu$0;
         continue;
        }
         /*<<list.ml:337:13>>*/ var
          /*<<list.ml:337:13>>*/ accu$1 = [0, h2, accu],
         l2 = t2,
         accu = accu$1;
        continue;
       }
       var _x_ = rev_append(l1, accu);
      }
      else
       var _x_ = rev_append(l2, accu);
      return [0, _x_, tl$0];
     }
     /*<<list.ml:360:36>>*/ }
     /*<<list.ml:321:2>>*/ function rev_sort(n, l){
      /*<<list.ml:362:4>>*/ if(2 === n){
      if(l){
       var match = l[2];
       if(match){
         /*<<list.ml:364:19>>*/ var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
          /*<<list.ml:364:19>>*/ s =
           0 <  /*<<list.ml:364:19>>*/ caml_call2(cmp, x1, x2)
            ? [0, x1, [0, x2, 0]]
            : [0, x2, [0, x1, 0]];
         /*<<list.ml:364:52>>*/ return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _w_ = l[2];
      if(_w_){
       var match$2 = _w_[2];
       if(match$2){
         /*<<list.ml:368:13>>*/ var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _w_[1],
         x1$0 = l[1],
          /*<<list.ml:368:13>>*/ s$0 =
           0 <  /*<<list.ml:368:13>>*/ caml_call2(cmp, x1$0, x2$0)
            ? 0
              <  /*<<list.ml:369:15>>*/ caml_call2(cmp, x2$0, x3)
              ? [0, x1$0, [0, x2$0, [0, x3, 0]]]
              : 0
                <  /*<<list.ml:370:20>>*/ caml_call2(cmp, x1$0, x3)
                ? [0, x1$0, [0, x3, [0, x2$0, 0]]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]]
            : 0
              <  /*<<list.ml:372:18>>*/ caml_call2(cmp, x1$0, x3)
              ? [0, x2$0, [0, x1$0, [0, x3, 0]]]
              : 0
                <  /*<<list.ml:373:18>>*/ caml_call2(cmp, x2$0, x3)
                ? [0, x2$0, [0, x3, [0, x1$0, 0]]]
                : [0, x3, [0, x2$0, [0, x1$0, 0]]];
         /*<<list.ml:374:15>>*/ return [0, s$0, tl$1];
       }
      }
     }
      /*<<list.ml:378:8>>*/ var
       /*<<list.ml:378:8>>*/ n1 = n >> 1,
       /*<<list.ml:378:8>>*/ n2 = n - n1 | 0,
       /*<<list.ml:380:21>>*/ match$0 = sort(n1, l),
       /*<<list.ml:380:21>>*/ l2$0 = match$0[2],
       /*<<list.ml:380:21>>*/ s1 = match$0[1],
       /*<<list.ml:381:21>>*/ match$1 = sort(n2, l2$0),
       /*<<list.ml:381:21>>*/ tl$0 = match$1[2],
       /*<<list.ml:381:21>>*/ s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
      /*<<list.ml:322:4>>*/ for(;;){
       /*<<list.ml:322:4>>*/ if(l1){
       if(l2){
        var t2 = l2[2], h2 = l2[1], t1 = l1[2], h1 = l1[1];
         /*<<list.ml:326:11>>*/ if
         (0 <  /*<<list.ml:326:11>>*/ caml_call2(cmp, h1, h2)){
          /*<<list.ml:328:13>>*/ var
           /*<<list.ml:328:13>>*/ accu$0 = [0, h2, accu],
          l2 = t2,
          accu = accu$0;
         continue;
        }
         /*<<list.ml:327:13>>*/ var
          /*<<list.ml:327:13>>*/ accu$1 = [0, h1, accu],
         l1 = t1,
         accu = accu$1;
        continue;
       }
       var _v_ = rev_append(l1, accu);
      }
      else
       var _v_ = rev_append(l2, accu);
      return [0, _v_, tl$0];
     }
     /*<<list.ml:382:32>>*/ }
     /*<<list.ml:384:12>>*/  /*<<list.ml:384:12>>*/ var len = length(l);
     /*<<list.ml:384:12>>*/ return 2 <= len ? sort(len, l)[1] : l;
    /*<<list.ml:385:41>>*/ }
   function sort_uniq(cmp, l){
     /*<<list.ml:427:2>>*/ function sort(n, l){
      /*<<list.ml:450:4>>*/ if(2 === n){
      if(l){
       var match = l[2];
       if(match){
         /*<<list.ml:453:18>>*/ var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
          /*<<list.ml:453:18>>*/ c$0 =
            /*<<list.ml:453:18>>*/ caml_call2(cmp, x1, x2),
          /*<<list.ml:453:18>>*/ s =
           0 === c$0
            ? [0, x1, 0]
            : 0 <= c$0 ? [0, x2, [0, x1, 0]] : [0, x1, [0, x2, 0]];
         /*<<list.ml:454:62>>*/ return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _p_ = l[2];
      if(_p_){
       var match$2 = _p_[2];
       if(match$2){
         /*<<list.ml:459:18>>*/ var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _p_[1],
         x1$0 = l[1],
          /*<<list.ml:459:18>>*/ c$1 =
            /*<<list.ml:459:18>>*/ caml_call2(cmp, x1$0, x2$0);
         /*<<list.ml:459:18>>*/ if(0 === c$1)
          /*<<list.ml:461:20>>*/ var
           /*<<list.ml:461:20>>*/ c$2 =
             /*<<list.ml:461:20>>*/ caml_call2(cmp, x2$0, x3),
           /*<<list.ml:461:20>>*/ _q_ =
            0 === c$2
             ? [0, x2$0, 0]
             : 0 <= c$2 ? [0, x3, [0, x2$0, 0]] : [0, x2$0, [0, x3, 0]],
          s$0 = _q_;
        else if(0 <= c$1){
          /*<<list.ml:473:20>>*/  /*<<list.ml:473:20>>*/ var
          c$3 =  /*<<list.ml:473:20>>*/ caml_call2(cmp, x1$0, x3);
          /*<<list.ml:473:20>>*/ if(0 === c$3)
          var _r_ = [0, x2$0, [0, x1$0, 0]];
         else if(0 <= c$3)
           /*<<list.ml:477:22>>*/ var
            /*<<list.ml:477:22>>*/ c$4 =
              /*<<list.ml:477:22>>*/ caml_call2(cmp, x2$0, x3),
            /*<<list.ml:477:22>>*/ _s_ =
             0 === c$4
              ? [0, x2$0, [0, x1$0, 0]]
              : 0
                <= c$4
                ? [0, x3, [0, x2$0, [0, x1$0, 0]]]
                : [0, x2$0, [0, x3, [0, x1$0, 0]]],
           _r_ = _s_;
         else
          var _r_ = [0, x2$0, [0, x1$0, [0, x3, 0]]];
         var s$0 = _r_;
        }
        else{
          /*<<list.ml:464:20>>*/  /*<<list.ml:464:20>>*/ var
          c$5 =  /*<<list.ml:464:20>>*/ caml_call2(cmp, x2$0, x3);
          /*<<list.ml:464:20>>*/ if(0 === c$5)
          var _t_ = [0, x1$0, [0, x2$0, 0]];
         else if(0 <= c$5)
           /*<<list.ml:468:22>>*/ var
            /*<<list.ml:468:22>>*/ c$6 =
              /*<<list.ml:468:22>>*/ caml_call2(cmp, x1$0, x3),
            /*<<list.ml:468:22>>*/ _u_ =
             0 === c$6
              ? [0, x1$0, [0, x2$0, 0]]
              : 0
                <= c$6
                ? [0, x3, [0, x1$0, [0, x2$0, 0]]]
                : [0, x1$0, [0, x3, [0, x2$0, 0]]],
           _t_ = _u_;
         else
          var _t_ = [0, x1$0, [0, x2$0, [0, x3, 0]]];
         var s$0 = _t_;
        }
         /*<<list.ml:482:8>>*/ return [0, s$0, tl$1];
       }
      }
     }
      /*<<list.ml:484:8>>*/ var
       /*<<list.ml:484:8>>*/ n1 = n >> 1,
       /*<<list.ml:484:8>>*/ n2 = n - n1 | 0,
       /*<<list.ml:486:21>>*/ match$0 = rev_sort(n1, l),
       /*<<list.ml:486:21>>*/ l2$0 = match$0[2],
       /*<<list.ml:486:21>>*/ s1 = match$0[1],
       /*<<list.ml:487:21>>*/ match$1 = rev_sort(n2, l2$0),
       /*<<list.ml:487:21>>*/ tl$0 = match$1[2],
       /*<<list.ml:487:21>>*/ s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
      /*<<list.ml:439:4>>*/ for(;;){
       /*<<list.ml:439:4>>*/ if(l1){
       if(l2){
         /*<<list.ml:443:16>>*/ var
         t2 = l2[2],
         h2 = l2[1],
         t1 = l1[2],
         h1 = l1[1],
          /*<<list.ml:443:16>>*/ c =
            /*<<list.ml:443:16>>*/ caml_call2(cmp, h1, h2);
         /*<<list.ml:443:16>>*/ if(0 === c){
          /*<<list.ml:444:22>>*/ var
           /*<<list.ml:444:22>>*/ accu$0 = [0, h1, accu],
          l1 = t1,
          l2 = t2,
          accu = accu$0;
         continue;
        }
         /*<<list.ml:445:13>>*/ if(0 < c){
          /*<<list.ml:446:13>>*/ var
           /*<<list.ml:446:13>>*/ accu$1 = [0, h1, accu],
          l1 = t1,
          accu = accu$1;
         continue;
        }
         /*<<list.ml:447:13>>*/ var
          /*<<list.ml:447:13>>*/ accu$2 = [0, h2, accu],
         l2 = t2,
         accu = accu$2;
        continue;
       }
       var _o_ = rev_append(l1, accu);
      }
      else
       var _o_ = rev_append(l2, accu);
      return [0, _o_, tl$0];
     }
     /*<<list.ml:488:36>>*/ }
     /*<<list.ml:427:2>>*/ function rev_sort(n, l){
      /*<<list.ml:490:4>>*/ if(2 === n){
      if(l){
       var match = l[2];
       if(match){
         /*<<list.ml:493:18>>*/ var
         tl = match[2],
         x2 = match[1],
         x1 = l[1],
          /*<<list.ml:493:18>>*/ c$0 =
            /*<<list.ml:493:18>>*/ caml_call2(cmp, x1, x2),
          /*<<list.ml:493:18>>*/ s =
           0 === c$0
            ? [0, x1, 0]
            : 0 < c$0 ? [0, x1, [0, x2, 0]] : [0, x2, [0, x1, 0]];
         /*<<list.ml:494:62>>*/ return [0, s, tl];
       }
      }
     }
     else if(3 === n && l){
      var _i_ = l[2];
      if(_i_){
       var match$2 = _i_[2];
       if(match$2){
         /*<<list.ml:499:18>>*/ var
         tl$1 = match$2[2],
         x3 = match$2[1],
         x2$0 = _i_[1],
         x1$0 = l[1],
          /*<<list.ml:499:18>>*/ c$1 =
            /*<<list.ml:499:18>>*/ caml_call2(cmp, x1$0, x2$0);
         /*<<list.ml:499:18>>*/ if(0 === c$1)
          /*<<list.ml:501:20>>*/ var
           /*<<list.ml:501:20>>*/ c$2 =
             /*<<list.ml:501:20>>*/ caml_call2(cmp, x2$0, x3),
           /*<<list.ml:501:20>>*/ _j_ =
            0 === c$2
             ? [0, x2$0, 0]
             : 0 < c$2 ? [0, x2$0, [0, x3, 0]] : [0, x3, [0, x2$0, 0]],
          s$0 = _j_;
        else if(0 < c$1){
          /*<<list.ml:504:20>>*/  /*<<list.ml:504:20>>*/ var
          c$3 =  /*<<list.ml:504:20>>*/ caml_call2(cmp, x2$0, x3);
          /*<<list.ml:504:20>>*/ if(0 === c$3)
          var _k_ = [0, x1$0, [0, x2$0, 0]];
         else if(0 < c$3)
          var _k_ = [0, x1$0, [0, x2$0, [0, x3, 0]]];
         else
           /*<<list.ml:508:22>>*/ var
            /*<<list.ml:508:22>>*/ c$4 =
              /*<<list.ml:508:22>>*/ caml_call2(cmp, x1$0, x3),
            /*<<list.ml:508:22>>*/ _l_ =
             0 === c$4
              ? [0, x1$0, [0, x2$0, 0]]
              : 0
                < c$4
                ? [0, x1$0, [0, x3, [0, x2$0, 0]]]
                : [0, x3, [0, x1$0, [0, x2$0, 0]]],
           _k_ = _l_;
         var s$0 = _k_;
        }
        else{
          /*<<list.ml:513:20>>*/  /*<<list.ml:513:20>>*/ var
          c$5 =  /*<<list.ml:513:20>>*/ caml_call2(cmp, x1$0, x3);
          /*<<list.ml:513:20>>*/ if(0 === c$5)
          var _m_ = [0, x2$0, [0, x1$0, 0]];
         else if(0 < c$5)
          var _m_ = [0, x2$0, [0, x1$0, [0, x3, 0]]];
         else
           /*<<list.ml:517:22>>*/ var
            /*<<list.ml:517:22>>*/ c$6 =
              /*<<list.ml:517:22>>*/ caml_call2(cmp, x2$0, x3),
            /*<<list.ml:517:22>>*/ _n_ =
             0 === c$6
              ? [0, x2$0, [0, x1$0, 0]]
              : 0
                < c$6
                ? [0, x2$0, [0, x3, [0, x1$0, 0]]]
                : [0, x3, [0, x2$0, [0, x1$0, 0]]],
           _m_ = _n_;
         var s$0 = _m_;
        }
         /*<<list.ml:522:8>>*/ return [0, s$0, tl$1];
       }
      }
     }
      /*<<list.ml:524:8>>*/ var
       /*<<list.ml:524:8>>*/ n1 = n >> 1,
       /*<<list.ml:524:8>>*/ n2 = n - n1 | 0,
       /*<<list.ml:526:21>>*/ match$0 = sort(n1, l),
       /*<<list.ml:526:21>>*/ l2$0 = match$0[2],
       /*<<list.ml:526:21>>*/ s1 = match$0[1],
       /*<<list.ml:527:21>>*/ match$1 = sort(n2, l2$0),
       /*<<list.ml:527:21>>*/ tl$0 = match$1[2],
       /*<<list.ml:527:21>>*/ s2 = match$1[1],
      l1 = s1,
      l2 = s2,
      accu = 0;
      /*<<list.ml:428:4>>*/ for(;;){
       /*<<list.ml:428:4>>*/ if(l1){
       if(l2){
         /*<<list.ml:432:16>>*/ var
         t2 = l2[2],
         h2 = l2[1],
         t1 = l1[2],
         h1 = l1[1],
          /*<<list.ml:432:16>>*/ c =
            /*<<list.ml:432:16>>*/ caml_call2(cmp, h1, h2);
         /*<<list.ml:432:16>>*/ if(0 === c){
          /*<<list.ml:433:22>>*/ var
           /*<<list.ml:433:22>>*/ accu$0 = [0, h1, accu],
          l1 = t1,
          l2 = t2,
          accu = accu$0;
         continue;
        }
         /*<<list.ml:434:13>>*/ if(0 <= c){
          /*<<list.ml:436:13>>*/ var
           /*<<list.ml:436:13>>*/ accu$1 = [0, h2, accu],
          l2 = t2,
          accu = accu$1;
         continue;
        }
         /*<<list.ml:435:13>>*/ var
          /*<<list.ml:435:13>>*/ accu$2 = [0, h1, accu],
         l1 = t1,
         accu = accu$2;
        continue;
       }
       var _h_ = rev_append(l1, accu);
      }
      else
       var _h_ = rev_append(l2, accu);
      return [0, _h_, tl$0];
     }
     /*<<list.ml:528:32>>*/ }
     /*<<list.ml:530:12>>*/  /*<<list.ml:530:12>>*/ var len = length(l);
     /*<<list.ml:530:12>>*/ return 2 <= len ? sort(len, l)[1] : l;
    /*<<list.ml:531:41>>*/ }
   function compare_lengths(l1, l2){
    var l1$0 = l1, l2$0 = l2;
     /*<<list.ml:535:2>>*/ for(;;){
      /*<<list.ml:535:2>>*/ if(! l1$0)
       /*<<list.ml:537:13>>*/ return l2$0 ? -1 : 0;
     if(! l2$0)  /*<<list.ml:538:13>>*/ return 1;
     var l2$1 = l2$0[2], l1$1 = l1$0[2], l1$0 = l1$1, l2$0 = l2$1;
    }
    /*<<list.ml:539:45>>*/ }
   function compare_length_with(l, n){
    var l$0 = l, n$0 = n;
     /*<<list.ml:542:2>>*/ for(;;){
      /*<<list.ml:542:2>>*/ if(! l$0)
       /*<<list.ml:544:4>>*/ return 0 === n$0 ? 0 : 0 < n$0 ? -1 : 1;
      /*<<list.ml:547:4>>*/  /*<<list.ml:547:4>>*/ var l$1 = l$0[2];
      /*<<list.ml:547:4>>*/ if(0 >= n$0)  /*<<list.ml:547:19>>*/ return 1;
      /*<<list.ml:548:6>>*/ var
       /*<<list.ml:548:6>>*/ n$1 = n$0 - 1 | 0,
      l$0 = l$1,
      n$0 = n$1;
    }
    /*<<list.ml:548:33>>*/ }
   function equal(eq, l1, l2){
    var l1$0 = l1, l2$0 = l2;
     /*<<list.ml:558:2>>*/ for(;;){
      /*<<list.ml:558:2>>*/ if(l1$0){
      if(l2$0){
        /*<<list.ml:561:22>>*/ var
        l2$1 = l2$0[2],
        a2 = l2$0[1],
        l1$1 = l1$0[2],
        a1 = l1$0[1],
         /*<<list.ml:561:22>>*/ _g_ =
           /*<<list.ml:561:22>>*/ caml_call2(eq, a1, a2);
        /*<<list.ml:561:22>>*/ if(! _g_) return _g_;
       var l1$0 = l1$1, l2$0 = l2$1;
       continue;
      }
     }
     else if(! l2$0)  /*<<list.ml:559:14>>*/ return 1;
      /*<<list.ml:560:27>>*/ return 0;
    }
    /*<<list.ml:561:48>>*/ }
   function compare(cmp, l1, l2){
    var l1$0 = l1, l2$0 = l2;
     /*<<list.ml:564:2>>*/ for(;;){
      /*<<list.ml:564:2>>*/ if(! l1$0)
       /*<<list.ml:566:16>>*/ return l2$0 ? -1 : 0;
     var l1$1 = l1$0[2], a1 = l1$0[1];
     if(! l2$0)  /*<<list.ml:567:16>>*/ return 1;
      /*<<list.ml:569:12>>*/ var
      l2$1 = l2$0[2],
      a2 = l2$0[1],
       /*<<list.ml:569:12>>*/ c =
         /*<<list.ml:569:12>>*/ caml_call2(cmp, a1, a2);
      /*<<list.ml:569:12>>*/ if(0 !== c)  /*<<list.ml:570:19>>*/ return c;
     var l1$0 = l1$1, l2$0 = l2$1;
    }
    /*<<list.ml:571:26>>*/ }
   function to_seq(l){
     /*<<list.ml:576:2>>*/ function aux(l, param){
      /*<<list.ml:576:21>>*/ if(! l)  /*<<list.ml:577:12>>*/ return 0;
     var tail = l[2], x = l[1];
      /*<<list.ml:578:32>>*/ return [0,
             x,
             function(_f_){ /*<<?>>*/ return aux(tail, _f_);}];
     /*<<list.ml:578:41>>*/ }
     /*<<list.ml:576:2>>*/ return function(_e_){
      /*<<?>>*/ return aux(l, _e_);};
    /*<<list.ml:580:7>>*/ }
   function of_seq(seq){
     /*<<list.ml:583:2>>*/ function direct(depth, seq){
      /*<<list.ml:584:4>>*/ if(0 === depth){
       /*<<list.ml:586:6>>*/ var
        /*<<list.ml:586:6>>*/ _c_ = 0,
        /*<<list.ml:586:6>>*/ _d_ =
         function(acc, x){
           /*<<list.ml:586:34>>*/ return [0, x, acc];
          /*<<list.ml:586:40>>*/ };
       /*<<list.ml:586:6>>*/ return rev
              ( /*<<list.ml:586:6>>*/ caml_call3(Stdlib_Seq[5], _d_, _c_, seq));
     }
      /*<<list.ml:588:15>>*/  /*<<list.ml:588:15>>*/ var
      match =  /*<<list.ml:588:15>>*/ caml_call1(seq, 0);
      /*<<list.ml:588:15>>*/ if(! match)  /*<<list.ml:589:19>>*/ return 0;
     var next = match[2], x = match[1];
      /*<<list.ml:590:35>>*/ return [0, x, direct(depth - 1 | 0, next)];
     /*<<list.ml:590:56>>*/ }
     /*<<list.ml:583:2>>*/ return direct(500, seq);
    /*<<list.ml:592:16>>*/ }
   var
    Stdlib_List =
      [0,
       length,
       compare_lengths,
       compare_length_with,
       cons,
       hd,
       tl,
       nth,
       nth_opt,
       rev,
       init,
       append,
       rev_append,
       flatten,
       flatten,
       equal,
       compare,
       iter,
       iteri,
       map,
       mapi,
       rev_map,
       filter_map,
       concat_map,
       fold_left_map,
       fold_left,
       fold_right,
       iter2,
       map2,
       rev_map2,
       fold_left2,
       fold_right2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find,
       find_opt,
       find_map,
       find_all,
       find_all,
       filteri,
       partition,
       partition_map,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       stable_sort,
       stable_sort,
       stable_sort,
       sort_uniq,
       merge,
       to_seq,
       of_seq];
   runtime.caml_register_global(18, Stdlib_List, "Stdlib__List");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Int
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, zero = 0, one = 1, minus_one = -1;
   function abs(x){
     /*<<int.ml:29:12>>*/ return 0 <= x ? x : - x | 0;
    /*<<int.ml:29:36>>*/ }
   var max_int = 2147483647, min_int = -2147483648;
   function lognot(x){
     /*<<int.ml:35:15>>*/ return x ^ -1;
    /*<<int.ml:35:28>>*/ }
   function equal(_b_, _a_){ /*<<?>>*/ return _b_ === _a_ ? 1 : 0;}
   var compare = runtime.caml_int_compare;
   function min(x, y){
     /*<<int.ml:41:18>>*/ return x <= y ? x : y;
    /*<<int.ml:41:41>>*/ }
   function max(x, y){
     /*<<int.ml:42:18>>*/ return y <= x ? x : y;
    /*<<int.ml:42:41>>*/ }
   function to_string(x){
     /*<<int.ml:52:18>>*/ return "" + x;
    /*<<int.ml:52:35>>*/ }
   var
    Stdlib_Int =
      [0,
       zero,
       one,
       minus_one,
       abs,
       max_int,
       min_int,
       lognot,
       equal,
       compare,
       min,
       max,
       to_string];
   runtime.caml_register_global(1, Stdlib_Int, "Stdlib__Int");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Bytes
//# unitInfo: Requires: Assert_failure, Stdlib, Stdlib__Char, Stdlib__Int, Stdlib__Seq, Stdlib__Sys, Stdlib__Uchar
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_bytes_ml = "bytes.ml",
    cst_index_out_of_bounds$3 = "index out of bounds",
    caml_blit_bytes = runtime.caml_blit_bytes,
    caml_bswap16 = runtime.caml_bswap16,
    caml_bytes_get = runtime.caml_bytes_get,
    caml_bytes_get16 = runtime.caml_bytes_get16,
    caml_bytes_get32 = runtime.caml_bytes_get32,
    caml_bytes_get64 = runtime.caml_bytes_get64,
    caml_bytes_of_string = runtime.caml_bytes_of_string,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_bytes_set16 = runtime.caml_bytes_set16,
    caml_bytes_set32 = runtime.caml_bytes_set32,
    caml_bytes_set64 = runtime.caml_bytes_set64,
    caml_bytes_unsafe_get = runtime.caml_bytes_unsafe_get,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_fill_bytes = runtime.caml_fill_bytes,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_string_of_bytes = runtime.caml_string_of_bytes,
    caml_wrap_exception = runtime.caml_wrap_exception;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Uchar = global_data.Stdlib__Uchar,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Char = global_data.Stdlib__Char,
    cst_index_out_of_bounds$2 = cst_index_out_of_bounds$3,
    _f_ = [0, cst_bytes_ml, 820, 20],
    _e_ = [0, cst_bytes_ml, 831, 9],
    cst_index_out_of_bounds$1 = cst_index_out_of_bounds$3,
    cst_index_out_of_bounds$0 = cst_index_out_of_bounds$3,
    _d_ = [0, cst_bytes_ml, 766, 20],
    _c_ = [0, cst_bytes_ml, 777, 9],
    cst_index_out_of_bounds = cst_index_out_of_bounds$3,
    _b_ = [0, cst_bytes_ml, 654, 20],
    _a_ = [0, cst_bytes_ml, 679, 9],
    cst_Bytes_of_seq_cannot_grow_b = "Bytes.of_seq: cannot grow bytes",
    cst_String_rcontains_from_Byte =
      "String.rcontains_from / Bytes.rcontains_from",
    cst_String_contains_from_Bytes =
      "String.contains_from / Bytes.contains_from",
    cst_String_rindex_from_opt_Byt =
      "String.rindex_from_opt / Bytes.rindex_from_opt",
    cst_String_rindex_from_Bytes_r = "String.rindex_from / Bytes.rindex_from",
    cst_String_index_from_opt_Byte =
      "String.index_from_opt / Bytes.index_from_opt",
    cst_String_index_from_Bytes_in = "String.index_from / Bytes.index_from",
    cst_Bytes_concat = "Bytes.concat",
    cst_String_blit_Bytes_blit_str = "String.blit / Bytes.blit_string",
    cst_Bytes_blit = "Bytes.blit",
    cst_String_fill_Bytes_fill = "String.fill / Bytes.fill",
    cst_Bytes_extend = "Bytes.extend",
    cst_String_sub_Bytes_sub = "String.sub / Bytes.sub";
   function make(n, c){
     /*<<bytes.ml:42:10>>*/  /*<<bytes.ml:42:10>>*/ var
     s =  /*<<bytes.ml:42:10>>*/ caml_create_bytes(n);
     /*<<bytes.ml:43:2>>*/  /*<<bytes.ml:43:2>>*/ caml_fill_bytes(s, 0, n, c);
     /*<<bytes.ml:43:2>>*/ return s;
    /*<<bytes.ml:44:3>>*/ }
   function init(n, f){
     /*<<bytes.ml:47:10>>*/ var
      /*<<bytes.ml:47:10>>*/ s =  /*<<bytes.ml:47:10>>*/ caml_create_bytes(n),
      /*<<bytes.ml:47:10>>*/ _aq_ = n - 1 | 0,
      /*<<bytes.ml:47:10>>*/ _ap_ = 0;
     /*<<bytes.ml:47:10>>*/ if(_aq_ >= 0){
     var i = _ap_;
      /*<<bytes.ml:49:4>>*/ for(;;){
       /*<<bytes.ml:49:19>>*/  /*<<bytes.ml:49:19>>*/ caml_bytes_unsafe_set
       (s, i,  /*<<bytes.ml:49:19>>*/ caml_call1(f, i));
       /*<<bytes.ml:49:19>>*/  /*<<bytes.ml:49:19>>*/ var _ar_ = i + 1 | 0;
       /*<<bytes.ml:49:19>>*/ if(_aq_ !== i){var i = _ar_; continue;}
      break;
     }
    }
     /*<<bytes.ml:51:2>>*/ return s;
    /*<<bytes.ml:51:3>>*/ }
    /*<<bytes.ml:53:12>>*/  /*<<bytes.ml:53:12>>*/ var
    empty =  /*<<bytes.ml:53:12>>*/ caml_create_bytes(0);
    /*<<bytes.ml:53:12>>*/ function copy(s){
     /*<<bytes.ml:56:2>>*/ var
      /*<<bytes.ml:56:2>>*/ len =
        /*<<bytes.ml:56:2>>*/ caml_ml_bytes_length(s),
      /*<<bytes.ml:57:2>>*/ r =  /*<<bytes.ml:57:2>>*/ caml_create_bytes(len);
     /*<<bytes.ml:58:2>>*/  /*<<bytes.ml:58:2>>*/ caml_blit_bytes
     (s, 0, r, 0, len);
     /*<<bytes.ml:58:2>>*/ return r;
    /*<<bytes.ml:59:3>>*/ }
    /*<<bytes.ml:53:12>>*/ function to_string(b){
     /*<<bytes.ml:61:35>>*/ return  /*<<bytes.ml:61:35>>*/ caml_string_of_bytes
            (copy(b));
    /*<<bytes.ml:61:43>>*/ }
    /*<<bytes.ml:53:12>>*/ function of_string(s){
     /*<<bytes.ml:62:18>>*/ return copy
            ( /*<<bytes.ml:62:18>>*/ caml_bytes_of_string(s));
    /*<<bytes.ml:62:43>>*/ }
    /*<<bytes.ml:53:12>>*/ function sub(s, ofs, len){
     /*<<?>>*/ if
     (0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs){
      /*<<bytes.ml:68:12>>*/  /*<<bytes.ml:68:12>>*/ var
      r =  /*<<bytes.ml:68:12>>*/ caml_create_bytes(len);
      /*<<bytes.ml:69:4>>*/  /*<<bytes.ml:69:4>>*/ caml_blit_bytes
      (s, ofs, r, 0, len);
      /*<<bytes.ml:69:4>>*/ return r;
    }
     /*<<bytes.ml:66:7>>*/ return  /*<<bytes.ml:66:7>>*/ caml_call1
            (Stdlib[1], cst_String_sub_Bytes_sub);
    /*<<bytes.ml:71:5>>*/ }
    /*<<bytes.ml:53:12>>*/ function sub_string(b, ofs, len){
     /*<<bytes.ml:73:44>>*/ return  /*<<bytes.ml:73:44>>*/ caml_string_of_bytes
            (sub(b, ofs, len));
    /*<<bytes.ml:73:59>>*/ }
    /*<<bytes.ml:53:12>>*/ function symbol(a, b){
     /*<<bytes.ml:77:2>>*/ var
      /*<<bytes.ml:77:2>>*/ c = a + b | 0,
      /*<<bytes.ml:77:2>>*/ _ao_ = b < 0 ? 1 : 0,
      /*<<bytes.ml:77:2>>*/ match = c < 0 ? 1 : 0,
     switch$0 = 0;
     /*<<bytes.ml:77:2>>*/ if(a < 0){
     if(_ao_ && ! match) switch$0 = 1;
    }
    else if(! _ao_ && match) switch$0 = 1;
    return switch$0
            ?  /*<<bytes.ml:80:27>>*/ caml_call1(Stdlib[1], cst_Bytes_extend)
            : c;
    /*<<bytes.ml:81:10>>*/ }
    /*<<bytes.ml:53:12>>*/ function extend(s, left, right){
     /*<<bytes.ml:84:12>>*/ var
      /*<<bytes.ml:84:12>>*/ len =
       symbol
        (symbol( /*<<bytes.ml:84:2>>*/ caml_ml_bytes_length(s), left), right),
      /*<<bytes.ml:85:2>>*/ r =  /*<<bytes.ml:85:2>>*/ caml_create_bytes(len);
     /*<<bytes.ml:85:2>>*/ if(0 <= left)
     var dstoff = left, srcoff = 0;
    else
     var dstoff = 0, srcoff = - left | 0;
     /*<<bytes.ml:87:15>>*/  /*<<bytes.ml:87:15>>*/ var
     cpylen =
        /*<<bytes.ml:87:15>>*/ caml_call2
        (Stdlib_Int[10],
          /*<<bytes.ml:87:2>>*/ caml_ml_bytes_length(s) - srcoff | 0,
         len - dstoff | 0);
     /*<<bytes.ml:87:15>>*/ if(0 < cpylen)
      /*<<bytes.ml:88:21>>*/  /*<<bytes.ml:88:21>>*/ caml_blit_bytes
      (s, srcoff, r, dstoff, cpylen);
     /*<<bytes.ml:88:57>>*/ return r;
    /*<<bytes.ml:89:3>>*/ }
    /*<<bytes.ml:53:12>>*/ function fill(s, ofs, len, c){
     /*<<?>>*/ if
     (0 <= ofs && 0 <= len && (caml_ml_bytes_length(s) - len | 0) >= ofs)
      /*<<bytes.ml:94:7>>*/ return  /*<<bytes.ml:94:7>>*/ caml_fill_bytes
             (s, ofs, len, c);
     /*<<bytes.ml:93:7>>*/ return  /*<<bytes.ml:93:7>>*/ caml_call1
            (Stdlib[1], cst_String_fill_Bytes_fill);
    /*<<bytes.ml:94:30>>*/ }
    /*<<bytes.ml:53:12>>*/ function blit(s1, ofs1, s2, ofs2, len){
     /*<<?>>*/ if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (caml_ml_bytes_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2)
      /*<<bytes.ml:100:7>>*/ return  /*<<bytes.ml:100:7>>*/ caml_blit_bytes
             (s1, ofs1, s2, ofs2, len);
     /*<<bytes.ml:99:7>>*/ return  /*<<bytes.ml:99:7>>*/ caml_call1
            (Stdlib[1], cst_Bytes_blit);
    /*<<bytes.ml:100:38>>*/ }
    /*<<bytes.ml:53:12>>*/ function blit_string(s1, ofs1, s2, ofs2, len){
     /*<<?>>*/ if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (runtime.caml_ml_string_length(s1) - len | 0) >= ofs1
        && 0 <= ofs2 && (caml_ml_bytes_length(s2) - len | 0) >= ofs2)
      /*<<bytes.ml:106:7>>*/ return  /*<<bytes.ml:106:7>>*/ runtime.caml_blit_string
             (s1, ofs1, s2, ofs2, len);
     /*<<bytes.ml:105:7>>*/ return  /*<<bytes.ml:105:7>>*/ caml_call1
            (Stdlib[1], cst_String_blit_Bytes_blit_str);
    /*<<bytes.ml:106:45>>*/ }
    /*<<bytes.ml:53:12>>*/ function iter(f, a){
     /*<<bytes.ml:110:2>>*/ var
      /*<<bytes.ml:110:2>>*/ _am_ =
        /*<<bytes.ml:110:2>>*/ caml_ml_bytes_length(a) - 1 | 0,
      /*<<bytes.ml:110:2>>*/ _al_ = 0;
     /*<<bytes.ml:110:2>>*/ if(_am_ >= 0){
     var i = _al_;
      /*<<bytes.ml:110:31>>*/ for(;;){
       /*<<bytes.ml:110:31>>*/  /*<<bytes.ml:110:31>>*/ caml_call1
       (f,  /*<<bytes.ml:110:31>>*/ caml_bytes_unsafe_get(a, i));
       /*<<bytes.ml:110:31>>*/  /*<<bytes.ml:110:31>>*/ var _an_ = i + 1 | 0;
       /*<<bytes.ml:110:31>>*/ if(_am_ !== i){var i = _an_; continue;}
      break;
     }
    }
    return 0;
    /*<<bytes.ml:110:53>>*/ }
    /*<<bytes.ml:53:12>>*/ function iteri(f, a){
     /*<<bytes.ml:114:2>>*/ var
      /*<<bytes.ml:114:2>>*/ _aj_ =
        /*<<bytes.ml:114:2>>*/ caml_ml_bytes_length(a) - 1 | 0,
      /*<<bytes.ml:114:2>>*/ _ai_ = 0;
     /*<<bytes.ml:114:2>>*/ if(_aj_ >= 0){
     var i = _ai_;
      /*<<bytes.ml:114:31>>*/ for(;;){
       /*<<bytes.ml:114:31>>*/  /*<<bytes.ml:114:31>>*/ caml_call2
       (f, i,  /*<<bytes.ml:114:31>>*/ caml_bytes_unsafe_get(a, i));
       /*<<bytes.ml:114:31>>*/  /*<<bytes.ml:114:31>>*/ var _ak_ = i + 1 | 0;
       /*<<bytes.ml:114:31>>*/ if(_aj_ !== i){var i = _ak_; continue;}
      break;
     }
    }
    return 0;
    /*<<bytes.ml:114:56>>*/ }
    /*<<bytes.ml:53:12>>*/ function concat(sep, l){
     /*<<?>>*/ if(! l)  /*<<bytes.ml:133:10>>*/ return empty;
     /*<<bytes.ml:134:9>>*/ var
      /*<<bytes.ml:134:9>>*/ seplen =
        /*<<bytes.ml:134:9>>*/ caml_ml_bytes_length(sep),
     acc = 0,
     param = l,
      /*<<bytes.ml:134:9>>*/ pos$1 = 0;
    for(;;){
     if(param){
      var hd = param[1];
      if(param[2]){
        /*<<bytes.ml:116:26>>*/ var
        tl = param[2],
        x = (caml_ml_bytes_length(hd) + seplen | 0) + acc | 0,
         /*<<bytes.ml:116:26>>*/ acc$0 =
          acc <= x
           ? x
           :  /*<<bytes.ml:116:48>>*/ caml_call1(Stdlib[1], cst_Bytes_concat),
        acc = acc$0,
        param = tl;
       continue;
      }
      var _ah_ =  /*<<bytes.ml:120:16>>*/ caml_ml_bytes_length(hd) + acc | 0;
     }
     else
      var _ah_ = acc;
      /*<<bytes.ml:136:44>>*/ var
       /*<<bytes.ml:136:44>>*/ dst =
         /*<<bytes.ml:136:44>>*/ caml_create_bytes(_ah_),
      pos = pos$1,
      param$0 = l;
     for(;;){
      if(! param$0)  /*<<bytes.ml:124:10>>*/ return dst;
      var hd$0 = param$0[1];
      if(param$0[2]){
       var tl$0 = param$0[2];
        /*<<bytes.ml:128:4>>*/  /*<<bytes.ml:128:4>>*/ caml_blit_bytes
        (hd$0, 0, dst, pos, caml_ml_bytes_length(hd$0));
        /*<<bytes.ml:129:4>>*/  /*<<bytes.ml:129:4>>*/ caml_blit_bytes
        (sep,
         0,
         dst,
         pos +  /*<<bytes.ml:128:4>>*/ caml_ml_bytes_length(hd$0) | 0,
         seplen);
        /*<<bytes.ml:129:4>>*/ var
         /*<<bytes.ml:129:4>>*/ pos$0 =
          (pos +  /*<<bytes.ml:129:4>>*/ caml_ml_bytes_length(hd$0) | 0)
          + seplen
          | 0,
        pos = pos$0,
        param$0 = tl$0;
       continue;
      }
       /*<<bytes.ml:126:4>>*/  /*<<bytes.ml:126:4>>*/ caml_blit_bytes
       (hd$0, 0, dst, pos,  /*<<bytes.ml:126:4>>*/ caml_ml_bytes_length(hd$0));
       /*<<bytes.ml:126:4>>*/ return dst;
     }
    }
   }
    /*<<bytes.ml:53:12>>*/ function cat(s1, s2){
     /*<<bytes.ml:140:2>>*/ var
      /*<<bytes.ml:140:2>>*/ l1 =
        /*<<bytes.ml:140:2>>*/ caml_ml_bytes_length(s1),
      /*<<bytes.ml:140:2>>*/ l2 =
        /*<<bytes.ml:140:2>>*/ caml_ml_bytes_length(s2),
      /*<<bytes.ml:142:10>>*/ r =
        /*<<bytes.ml:142:10>>*/ caml_create_bytes(l1 + l2 | 0);
     /*<<bytes.ml:143:2>>*/  /*<<bytes.ml:143:2>>*/ caml_blit_bytes
     (s1, 0, r, 0, l1);
     /*<<bytes.ml:144:2>>*/  /*<<bytes.ml:144:2>>*/ caml_blit_bytes
     (s2, 0, r, l1, l2);
     /*<<bytes.ml:144:2>>*/ return r;
    /*<<bytes.ml:145:3>>*/ }
    /*<<bytes.ml:53:12>>*/ function is_space(param){
     /*<<bytes.ml:151:15>>*/ var
      /*<<bytes.ml:151:15>>*/ _ag_ = param - 9 | 0,
     switch$0 = 0;
     /*<<bytes.ml:151:15>>*/ if(4 < _ag_ >>> 0){
     if(23 === _ag_) switch$0 = 1;
    }
    else if(2 !== _ag_) switch$0 = 1;
    return switch$0 ? 1 : 0;
    /*<<bytes.ml:153:14>>*/ }
    /*<<bytes.ml:53:12>>*/ function trim(s){
     /*<<bytes.ml:156:2>>*/ var
      /*<<bytes.ml:156:2>>*/ len =
        /*<<bytes.ml:156:2>>*/ caml_ml_bytes_length(s),
      /*<<bytes.ml:156:2>>*/ i = [0, 0];
    for(;;){
      /*<<bytes.ml:158:20>>*/ if
      (i[1] < len && is_space(caml_bytes_unsafe_get(s, i[1]))){ /*<<bytes.ml:159:4>>*/ i[1]++; continue;}
      /*<<bytes.ml:161:2>>*/  /*<<bytes.ml:161:2>>*/ var j = [0, len - 1 | 0];
     for(;;){
       /*<<bytes.ml:162:20>>*/ if
       (i[1] <= j[1] && is_space(caml_bytes_unsafe_get(s, j[1]))){ /*<<bytes.ml:163:4>>*/ j[1] += -1; continue;}
       /*<<bytes.ml:165:2>>*/ return i[1] <= j[1]
              ? sub(s, i[1], (j[1] - i[1] | 0) + 1 | 0)
              : empty;
     }
    }
    /*<<bytes.ml:168:9>>*/ }
    /*<<bytes.ml:53:12>>*/ function unsafe_escape(s){
     /*<<bytes.ml:184:2>>*/ var
      /*<<bytes.ml:184:2>>*/ n = [0, 0],
      /*<<bytes.ml:184:2>>*/ _$_ =
        /*<<bytes.ml:184:2>>*/ caml_ml_bytes_length(s) - 1 | 0,
      /*<<bytes.ml:184:2>>*/ ___ = 0;
     /*<<bytes.ml:184:2>>*/ if(_$_ >= 0){
     var i$0 = ___;
      /*<<bytes.ml:186:4>>*/ for(;;){
       /*<<bytes.ml:186:4>>*/ var
        /*<<bytes.ml:186:4>>*/ match =
          /*<<bytes.ml:186:4>>*/ caml_bytes_unsafe_get(s, i$0),
       switch$0 = 0;
       /*<<bytes.ml:186:4>>*/ if(32 <= match){
       var _ad_ = match - 34 | 0, switch$1 = 0;
       if(58 < _ad_ >>> 0){
        if(93 > _ad_) switch$1 = 1;
       }
       else if(56 < _ad_ - 1 >>> 0) switch$0 = 1; else switch$1 = 1;
       if(switch$1){var _ae_ = 1; switch$0 = 2;}
      }
      else
       if(11 <= match){
        if(13 === match) switch$0 = 1;
       }
       else if(8 <= match) switch$0 = 1;
      switch(switch$0){
        case 0:
         var _ae_ = 4; break;
        case 1:
         var _ae_ = 2; break;
      }
      n[1] = n[1] + _ae_ | 0;
      var _af_ = i$0 + 1 | 0;
      if(_$_ !== i$0){var i$0 = _af_; continue;}
      break;
     }
    }
     /*<<bytes.ml:192:2>>*/ if
     (n[1] ===  /*<<bytes.ml:192:2>>*/ caml_ml_bytes_length(s))
      /*<<bytes.ml:192:24>>*/ return s;
     /*<<bytes.ml:194:13>>*/  /*<<bytes.ml:194:13>>*/ var
     s$0 =  /*<<bytes.ml:194:13>>*/ caml_create_bytes(n[1]);
     /*<<bytes.ml:194:13>>*/ n[1] = 0;
     /*<<bytes.ml:194:13>>*/ var
      /*<<bytes.ml:194:13>>*/ _ab_ =
        /*<<bytes.ml:194:13>>*/ caml_ml_bytes_length(s) - 1 | 0,
      /*<<bytes.ml:194:13>>*/ _aa_ = 0;
     /*<<bytes.ml:194:13>>*/ if(_ab_ >= 0){
     var i = _aa_;
      /*<<bytes.ml:197:6>>*/ for(;;){
       /*<<bytes.ml:197:6>>*/ var
        /*<<bytes.ml:197:6>>*/ c =
          /*<<bytes.ml:197:6>>*/ caml_bytes_unsafe_get(s, i),
       switch$2 = 0;
       /*<<bytes.ml:197:6>>*/ if(35 <= c)
       if(92 === c)
        switch$2 = 2;
       else if(127 <= c) switch$2 = 1; else switch$2 = 3;
      else if(32 <= c)
       if(34 <= c) switch$2 = 2; else switch$2 = 3;
      else if(14 <= c)
       switch$2 = 1;
      else
       switch(c){
         case 8:
           /*<<bytes.ml:207:10>>*/  /*<<bytes.ml:207:10>>*/ caml_bytes_unsafe_set
           (s$0, n[1], 92);
           /*<<bytes.ml:207:10>>*/ n[1]++;
           /*<<bytes.ml:207:10>>*/  /*<<bytes.ml:207:10>>*/ caml_bytes_unsafe_set
           (s$0, n[1], 98);
          break;
         case 9:
           /*<<bytes.ml:203:10>>*/  /*<<bytes.ml:203:10>>*/ caml_bytes_unsafe_set
           (s$0, n[1], 92);
           /*<<bytes.ml:203:10>>*/ n[1]++;
           /*<<bytes.ml:203:10>>*/  /*<<bytes.ml:203:10>>*/ caml_bytes_unsafe_set
           (s$0, n[1], 116);
          break;
         case 10:
           /*<<bytes.ml:201:10>>*/  /*<<bytes.ml:201:10>>*/ caml_bytes_unsafe_set
           (s$0, n[1], 92);
           /*<<bytes.ml:201:10>>*/ n[1]++;
           /*<<bytes.ml:201:10>>*/  /*<<bytes.ml:201:10>>*/ caml_bytes_unsafe_set
           (s$0, n[1], 110);
          break;
         case 13:
           /*<<bytes.ml:205:10>>*/  /*<<bytes.ml:205:10>>*/ caml_bytes_unsafe_set
           (s$0, n[1], 92);
           /*<<bytes.ml:205:10>>*/ n[1]++;
           /*<<bytes.ml:205:10>>*/  /*<<bytes.ml:205:10>>*/ caml_bytes_unsafe_set
           (s$0, n[1], 114);
          break;
         default: switch$2 = 1;
       }
      switch(switch$2){
        case 1:
          /*<<bytes.ml:210:10>>*/  /*<<bytes.ml:210:10>>*/ caml_bytes_unsafe_set
          (s$0, n[1], 92);
          /*<<bytes.ml:210:10>>*/ n[1]++;
          /*<<bytes.ml:210:10>>*/  /*<<bytes.ml:210:10>>*/ caml_bytes_unsafe_set
          (s$0, n[1], 48 + (c / 100 | 0) | 0);
          /*<<bytes.ml:210:10>>*/ n[1]++;
          /*<<bytes.ml:210:10>>*/  /*<<bytes.ml:210:10>>*/ caml_bytes_unsafe_set
          (s$0, n[1], 48 + ((c / 10 | 0) % 10 | 0) | 0);
          /*<<bytes.ml:210:10>>*/ n[1]++;
          /*<<bytes.ml:210:10>>*/  /*<<bytes.ml:210:10>>*/ caml_bytes_unsafe_set
          (s$0, n[1], 48 + (c % 10 | 0) | 0);
         break;
        case 2:
          /*<<bytes.ml:199:10>>*/  /*<<bytes.ml:199:10>>*/ caml_bytes_unsafe_set
          (s$0, n[1], 92);
          /*<<bytes.ml:199:10>>*/ n[1]++;
          /*<<bytes.ml:199:10>>*/  /*<<bytes.ml:199:10>>*/ caml_bytes_unsafe_set
          (s$0, n[1], c);
         break;
        case 3:
          /*<<bytes.ml:208:29>>*/  /*<<bytes.ml:208:29>>*/ caml_bytes_unsafe_set
          (s$0, n[1], c);
         break;
      }
       /*<<bytes.ml:219:6>>*/ n[1]++;
       /*<<bytes.ml:219:6>>*/  /*<<bytes.ml:219:6>>*/ var _ac_ = i + 1 | 0;
       /*<<bytes.ml:219:6>>*/ if(_ab_ !== i){var i = _ac_; continue;}
      break;
     }
    }
     /*<<bytes.ml:221:4>>*/ return s$0;
    /*<<bytes.ml:222:5>>*/ }
    /*<<bytes.ml:53:12>>*/ function escaped(b){
     /*<<bytes.ml:225:10>>*/  /*<<bytes.ml:225:10>>*/ var b$0 = copy(b);
     /*<<bytes.ml:225:10>>*/ return unsafe_escape(b$0);
    /*<<bytes.ml:228:17>>*/ }
    /*<<bytes.ml:53:12>>*/ function map(f, s){
     /*<<bytes.ml:231:2>>*/  /*<<bytes.ml:231:2>>*/ var
     l =  /*<<bytes.ml:231:2>>*/ caml_ml_bytes_length(s);
     /*<<bytes.ml:231:2>>*/ if(0 === l)  /*<<bytes.ml:232:16>>*/ return s;
     /*<<bytes.ml:233:12>>*/ var
      /*<<bytes.ml:233:12>>*/ r =
        /*<<bytes.ml:233:12>>*/ caml_create_bytes(l),
      /*<<bytes.ml:233:12>>*/ _Y_ = l - 1 | 0,
      /*<<bytes.ml:233:12>>*/ _X_ = 0;
     /*<<bytes.ml:233:12>>*/ if(_Y_ >= 0){
     var i = _X_;
      /*<<bytes.ml:234:26>>*/ for(;;){
       /*<<bytes.ml:234:41>>*/  /*<<bytes.ml:234:41>>*/ caml_bytes_unsafe_set
       (r,
        i,
         /*<<bytes.ml:234:41>>*/ caml_call1
         (f,  /*<<bytes.ml:234:26>>*/ caml_bytes_unsafe_get(s, i)));
       /*<<bytes.ml:234:41>>*/  /*<<bytes.ml:234:41>>*/ var _Z_ = i + 1 | 0;
       /*<<bytes.ml:234:41>>*/ if(_Y_ !== i){var i = _Z_; continue;}
      break;
     }
    }
     /*<<bytes.ml:235:4>>*/ return r;
    /*<<bytes.ml:236:5>>*/ }
    /*<<bytes.ml:53:12>>*/ function mapi(f, s){
     /*<<bytes.ml:239:2>>*/  /*<<bytes.ml:239:2>>*/ var
     l =  /*<<bytes.ml:239:2>>*/ caml_ml_bytes_length(s);
     /*<<bytes.ml:239:2>>*/ if(0 === l)  /*<<bytes.ml:240:16>>*/ return s;
     /*<<bytes.ml:241:12>>*/ var
      /*<<bytes.ml:241:12>>*/ r =
        /*<<bytes.ml:241:12>>*/ caml_create_bytes(l),
      /*<<bytes.ml:241:12>>*/ _V_ = l - 1 | 0,
      /*<<bytes.ml:241:12>>*/ _U_ = 0;
     /*<<bytes.ml:241:12>>*/ if(_V_ >= 0){
     var i = _U_;
      /*<<bytes.ml:242:26>>*/ for(;;){
       /*<<bytes.ml:242:41>>*/  /*<<bytes.ml:242:41>>*/ caml_bytes_unsafe_set
       (r,
        i,
         /*<<bytes.ml:242:41>>*/ caml_call2
         (f, i,  /*<<bytes.ml:242:26>>*/ caml_bytes_unsafe_get(s, i)));
       /*<<bytes.ml:242:41>>*/  /*<<bytes.ml:242:41>>*/ var _W_ = i + 1 | 0;
       /*<<bytes.ml:242:41>>*/ if(_V_ !== i){var i = _W_; continue;}
      break;
     }
    }
     /*<<bytes.ml:243:4>>*/ return r;
    /*<<bytes.ml:244:5>>*/ }
    /*<<bytes.ml:53:12>>*/ function fold_left(f, x, a){
     /*<<bytes.ml:247:2>>*/ var
      /*<<bytes.ml:247:2>>*/ r = [0, x],
      /*<<bytes.ml:247:2>>*/ _S_ =
        /*<<bytes.ml:247:2>>*/ caml_ml_bytes_length(a) - 1 | 0,
      /*<<bytes.ml:247:2>>*/ _R_ = 0;
     /*<<bytes.ml:247:2>>*/ if(_S_ >= 0){
     var i = _R_;
      /*<<bytes.ml:249:4>>*/ for(;;){
       /*<<bytes.ml:249:9>>*/ r[1] =
        /*<<bytes.ml:249:9>>*/ caml_call2
        (f, r[1],  /*<<bytes.ml:249:4>>*/ caml_bytes_unsafe_get(a, i));
       /*<<bytes.ml:249:9>>*/  /*<<bytes.ml:249:9>>*/ var _T_ = i + 1 | 0;
       /*<<bytes.ml:249:9>>*/ if(_S_ !== i){var i = _T_; continue;}
      break;
     }
    }
     /*<<bytes.ml:251:2>>*/ return r[1];
    /*<<bytes.ml:251:4>>*/ }
    /*<<bytes.ml:53:12>>*/ function fold_right(f, a, x){
     /*<<bytes.ml:254:2>>*/ var
      /*<<bytes.ml:254:2>>*/ r = [0, x],
      /*<<bytes.ml:254:2>>*/ _P_ =
        /*<<bytes.ml:254:2>>*/ caml_ml_bytes_length(a) - 1 | 0;
     /*<<bytes.ml:254:2>>*/ if(_P_ >= 0){
     var i = _P_;
      /*<<bytes.ml:256:4>>*/ for(;;){
       /*<<bytes.ml:256:9>>*/ r[1] =
        /*<<bytes.ml:256:9>>*/ caml_call2
        (f,  /*<<bytes.ml:256:4>>*/ caml_bytes_unsafe_get(a, i), r[1]);
       /*<<bytes.ml:256:9>>*/  /*<<bytes.ml:256:9>>*/ var _Q_ = i - 1 | 0;
       /*<<bytes.ml:256:9>>*/ if(0 !== i){var i = _Q_; continue;}
      break;
     }
    }
     /*<<bytes.ml:258:2>>*/ return r[1];
    /*<<bytes.ml:258:4>>*/ }
    /*<<bytes.ml:53:12>>*/ function exists(p, s){
     /*<<bytes.ml:261:2>>*/ var
      /*<<bytes.ml:261:2>>*/ n =
        /*<<bytes.ml:261:2>>*/ caml_ml_bytes_length(s),
     i = 0;
     /*<<bytes.ml:263:4>>*/ for(;;){
      /*<<bytes.ml:263:4>>*/ if(i === n)  /*<<bytes.ml:263:18>>*/ return 0;
      /*<<bytes.ml:264:12>>*/ if
      ( /*<<bytes.ml:264:12>>*/ caml_call1
        (p,  /*<<bytes.ml:264:9>>*/ caml_bytes_unsafe_get(s, i)))
       /*<<bytes.ml:264:36>>*/ return 1;
      /*<<bytes.ml:265:9>>*/ var
       /*<<bytes.ml:265:9>>*/ i$0 = i + 1 | 0,
      i = i$0;
    }
    /*<<bytes.ml:266:8>>*/ }
    /*<<bytes.ml:53:12>>*/ function for_all(p, s){
     /*<<bytes.ml:269:2>>*/ var
      /*<<bytes.ml:269:2>>*/ n =
        /*<<bytes.ml:269:2>>*/ caml_ml_bytes_length(s),
     i = 0;
     /*<<bytes.ml:271:4>>*/ for(;;){
      /*<<bytes.ml:271:4>>*/ if(i === n)  /*<<bytes.ml:271:18>>*/ return 1;
      /*<<bytes.ml:272:12>>*/ if
      (!
        /*<<bytes.ml:272:12>>*/ caml_call1
        (p,  /*<<bytes.ml:272:9>>*/ caml_bytes_unsafe_get(s, i)))
       /*<<bytes.ml:273:9>>*/ return 0;
      /*<<bytes.ml:272:36>>*/ var
       /*<<bytes.ml:272:36>>*/ i$0 = i + 1 | 0,
      i = i$0;
    }
    /*<<bytes.ml:274:8>>*/ }
    /*<<bytes.ml:53:12>>*/ function uppercase_ascii(s){
     /*<<bytes.ml:276:24>>*/ return map(Stdlib_Char[4], s);
    /*<<bytes.ml:276:50>>*/ }
    /*<<bytes.ml:53:12>>*/ function lowercase_ascii(s){
     /*<<bytes.ml:277:24>>*/ return map(Stdlib_Char[3], s);
    /*<<bytes.ml:277:50>>*/ }
    /*<<bytes.ml:53:12>>*/ function apply1(f, s){
     /*<<bytes.ml:280:2>>*/ if
     (0 ===  /*<<bytes.ml:280:2>>*/ caml_ml_bytes_length(s))
      /*<<bytes.ml:280:23>>*/ return s;
     /*<<bytes.ml:281:12>>*/  /*<<bytes.ml:281:12>>*/ var r = copy(s);
     /*<<bytes.ml:282:19>>*/  /*<<bytes.ml:282:19>>*/ caml_bytes_unsafe_set
     (r,
      0,
       /*<<bytes.ml:282:19>>*/ caml_call1
       (f,  /*<<bytes.ml:281:12>>*/ caml_bytes_unsafe_get(s, 0)));
     /*<<bytes.ml:282:19>>*/ return r;
    /*<<bytes.ml:284:5>>*/ }
    /*<<bytes.ml:53:12>>*/ function capitalize_ascii(s){
     /*<<bytes.ml:286:25>>*/ return apply1(Stdlib_Char[4], s);
    /*<<bytes.ml:286:54>>*/ }
    /*<<bytes.ml:53:12>>*/ function uncapitalize_ascii(s){
     /*<<bytes.ml:287:27>>*/ return apply1(Stdlib_Char[3], s);
    /*<<bytes.ml:287:56>>*/ }
    /*<<bytes.ml:53:12>>*/ function starts_with(prefix, s){
     /*<<bytes.ml:291:2>>*/ var
      /*<<bytes.ml:291:2>>*/ len_s =
        /*<<bytes.ml:291:2>>*/ caml_ml_bytes_length(s),
      /*<<bytes.ml:291:2>>*/ len_pre =
        /*<<bytes.ml:291:2>>*/ caml_ml_bytes_length(prefix),
      /*<<bytes.ml:291:2>>*/ _O_ = len_pre <= len_s ? 1 : 0;
     /*<<bytes.ml:291:2>>*/ if(! _O_)  /*<<bytes.ml:287:27>>*/ return _O_;
    var i = 0;
     /*<<bytes.ml:294:4>>*/ for(;;){
      /*<<bytes.ml:294:4>>*/ if(i === len_pre)
       /*<<bytes.ml:294:24>>*/ return 1;
      /*<<bytes.ml:295:9>>*/ if
      ( /*<<bytes.ml:295:9>>*/ caml_bytes_unsafe_get(s, i)
       !==  /*<<bytes.ml:295:9>>*/ caml_bytes_unsafe_get(prefix, i))
       /*<<bytes.ml:295:55>>*/ return 0;
      /*<<bytes.ml:296:9>>*/ var
       /*<<bytes.ml:296:9>>*/ i$0 = i + 1 | 0,
      i = i$0;
    }
    /*<<bytes.ml:297:30>>*/ }
    /*<<bytes.ml:53:12>>*/ function ends_with(suffix, s){
     /*<<bytes.ml:301:2>>*/ var
      /*<<bytes.ml:301:2>>*/ len_s =
        /*<<bytes.ml:301:2>>*/ caml_ml_bytes_length(s),
      /*<<bytes.ml:301:2>>*/ len_suf =
        /*<<bytes.ml:301:2>>*/ caml_ml_bytes_length(suffix),
      /*<<bytes.ml:301:2>>*/ diff = len_s - len_suf | 0,
      /*<<bytes.ml:301:2>>*/ _N_ = 0 <= diff ? 1 : 0;
     /*<<bytes.ml:301:2>>*/ if(! _N_)  /*<<bytes.ml:294:4>>*/ return _N_;
    var i = 0;
     /*<<bytes.ml:305:4>>*/ for(;;){
      /*<<bytes.ml:305:4>>*/ if(i === len_suf)
       /*<<bytes.ml:305:24>>*/ return 1;
      /*<<bytes.ml:306:9>>*/ if
      ( /*<<bytes.ml:306:9>>*/ caml_bytes_unsafe_get(s, diff + i | 0)
       !==  /*<<bytes.ml:306:9>>*/ caml_bytes_unsafe_get(suffix, i))
       /*<<bytes.ml:306:64>>*/ return 0;
      /*<<bytes.ml:307:9>>*/ var
       /*<<bytes.ml:307:9>>*/ i$0 = i + 1 | 0,
      i = i$0;
    }
    /*<<bytes.ml:308:23>>*/ }
    /*<<bytes.ml:53:12>>*/ function index_rec(s, lim, i, c){
    var i$0 = i;
     /*<<bytes.ml:312:2>>*/ for(;;){
      /*<<bytes.ml:312:2>>*/ if(lim <= i$0)
       /*<<bytes.ml:312:19>>*/ throw  /*<<bytes.ml:312:19>>*/ caml_maybe_attach_backtrace
             (Stdlib[8], 1);
      /*<<bytes.ml:313:2>>*/ if
      ( /*<<bytes.ml:313:2>>*/ caml_bytes_unsafe_get(s, i$0) === c)
       /*<<bytes.ml:313:29>>*/ return i$0;
      /*<<bytes.ml:313:36>>*/ var
       /*<<bytes.ml:313:36>>*/ i$1 = i$0 + 1 | 0,
      i$0 = i$1;
    }
    /*<<bytes.ml:313:61>>*/ }
    /*<<bytes.ml:53:12>>*/ function index(s, c){
     /*<<bytes.ml:316:16>>*/ return index_rec
            (s,  /*<<bytes.ml:316:16>>*/ caml_ml_bytes_length(s), 0, c);
    /*<<bytes.ml:316:42>>*/ }
    /*<<bytes.ml:53:12>>*/ function index_rec_opt(s, lim, i, c){
    var i$0 = i;
     /*<<bytes.ml:320:2>>*/ for(;;){
      /*<<bytes.ml:320:2>>*/ if(lim <= i$0)  /*<<bytes.ml:320:19>>*/ return 0;
      /*<<bytes.ml:321:2>>*/ if
      ( /*<<bytes.ml:321:2>>*/ caml_bytes_unsafe_get(s, i$0) === c)
       /*<<bytes.ml:321:29>>*/ return [0, i$0];
      /*<<bytes.ml:321:41>>*/ var
       /*<<bytes.ml:321:41>>*/ i$1 = i$0 + 1 | 0,
      i$0 = i$1;
    }
    /*<<bytes.ml:321:70>>*/ }
    /*<<bytes.ml:53:12>>*/ function index_opt(s, c){
     /*<<bytes.ml:324:20>>*/ return index_rec_opt
            (s,  /*<<bytes.ml:324:20>>*/ caml_ml_bytes_length(s), 0, c);
    /*<<bytes.ml:324:50>>*/ }
    /*<<bytes.ml:53:12>>*/ function index_from(s, i, c){
     /*<<bytes.ml:328:2>>*/  /*<<bytes.ml:328:2>>*/ var
     l =  /*<<bytes.ml:328:2>>*/ caml_ml_bytes_length(s);
    if(0 <= i && l >= i)  /*<<bytes.ml:330:2>>*/ return index_rec(s, l, i, c);
     /*<<bytes.ml:329:25>>*/ return  /*<<bytes.ml:329:25>>*/ caml_call1
            (Stdlib[1], cst_String_index_from_Bytes_in);
    /*<<bytes.ml:330:19>>*/ }
    /*<<bytes.ml:53:12>>*/ function index_from_opt(s, i, c){
     /*<<bytes.ml:334:2>>*/  /*<<bytes.ml:334:2>>*/ var
     l =  /*<<bytes.ml:334:2>>*/ caml_ml_bytes_length(s);
    if(0 <= i && l >= i)
      /*<<bytes.ml:338:4>>*/ return index_rec_opt(s, l, i, c);
     /*<<bytes.ml:336:4>>*/ return  /*<<bytes.ml:336:4>>*/ caml_call1
            (Stdlib[1], cst_String_index_from_opt_Byte);
    /*<<bytes.ml:338:25>>*/ }
    /*<<bytes.ml:53:12>>*/ function rindex_rec(s, i, c){
    var i$0 = i;
     /*<<bytes.ml:342:2>>*/ for(;;){
      /*<<bytes.ml:342:2>>*/ if(0 > i$0)
       /*<<bytes.ml:342:16>>*/ throw  /*<<bytes.ml:342:16>>*/ caml_maybe_attach_backtrace
             (Stdlib[8], 1);
      /*<<bytes.ml:343:2>>*/ if
      ( /*<<bytes.ml:343:2>>*/ caml_bytes_unsafe_get(s, i$0) === c)
       /*<<bytes.ml:343:29>>*/ return i$0;
      /*<<bytes.ml:343:36>>*/ var
       /*<<bytes.ml:343:36>>*/ i$1 = i$0 - 1 | 0,
      i$0 = i$1;
    }
    /*<<bytes.ml:343:58>>*/ }
    /*<<bytes.ml:53:12>>*/ function rindex(s, c){
     /*<<bytes.ml:346:17>>*/ return rindex_rec
            (s,  /*<<bytes.ml:346:17>>*/ caml_ml_bytes_length(s) - 1 | 0, c);
    /*<<bytes.ml:346:46>>*/ }
    /*<<bytes.ml:53:12>>*/ function rindex_from(s, i, c){
     /*<<?>>*/ if(-1 <= i && caml_ml_bytes_length(s) > i)
      /*<<bytes.ml:353:4>>*/ return rindex_rec(s, i, c);
     /*<<bytes.ml:351:4>>*/ return  /*<<bytes.ml:351:4>>*/ caml_call1
            (Stdlib[1], cst_String_rindex_from_Bytes_r);
    /*<<bytes.ml:353:20>>*/ }
    /*<<bytes.ml:53:12>>*/ function rindex_rec_opt(s, i, c){
    var i$0 = i;
     /*<<bytes.ml:357:2>>*/ for(;;){
      /*<<bytes.ml:357:2>>*/ if(0 > i$0)  /*<<bytes.ml:357:16>>*/ return 0;
      /*<<bytes.ml:358:2>>*/ if
      ( /*<<bytes.ml:358:2>>*/ caml_bytes_unsafe_get(s, i$0) === c)
       /*<<bytes.ml:358:29>>*/ return [0, i$0];
      /*<<bytes.ml:358:41>>*/ var
       /*<<bytes.ml:358:41>>*/ i$1 = i$0 - 1 | 0,
      i$0 = i$1;
    }
    /*<<bytes.ml:358:67>>*/ }
    /*<<bytes.ml:53:12>>*/ function rindex_opt(s, c){
     /*<<bytes.ml:361:21>>*/ return rindex_rec_opt
            (s,  /*<<bytes.ml:361:21>>*/ caml_ml_bytes_length(s) - 1 | 0, c);
    /*<<bytes.ml:361:54>>*/ }
    /*<<bytes.ml:53:12>>*/ function rindex_from_opt(s, i, c){
     /*<<?>>*/ if(-1 <= i && caml_ml_bytes_length(s) > i)
      /*<<bytes.ml:368:4>>*/ return rindex_rec_opt(s, i, c);
     /*<<bytes.ml:366:4>>*/ return  /*<<bytes.ml:366:4>>*/ caml_call1
            (Stdlib[1], cst_String_rindex_from_opt_Byt);
    /*<<bytes.ml:368:24>>*/ }
    /*<<bytes.ml:53:12>>*/ function contains_from(s, i, c){
     /*<<bytes.ml:373:2>>*/  /*<<bytes.ml:373:2>>*/ var
     l =  /*<<bytes.ml:373:2>>*/ caml_ml_bytes_length(s);
    if(0 <= i && l >= i)
     try{
       /*<<bytes.ml:377:15>>*/ index_rec(s, l, i, c);
       /*<<bytes.ml:377:15>>*/  /*<<bytes.ml:377:15>>*/ var _L_ = 1;
      return _L_;
     }
     catch(_M_){
      var _K_ = caml_wrap_exception(_M_);
      if(_K_ === Stdlib[8])  /*<<bytes.ml:377:59>>*/ return 0;
      throw caml_maybe_attach_backtrace(_K_, 0);
     }
     /*<<bytes.ml:375:4>>*/ return  /*<<bytes.ml:375:4>>*/ caml_call1
            (Stdlib[1], cst_String_contains_from_Bytes);
    /*<<bytes.ml:377:64>>*/ }
    /*<<bytes.ml:53:12>>*/ function contains(s, c){
     /*<<bytes.ml:381:19>>*/ return contains_from(s, 0, c);
    /*<<bytes.ml:381:38>>*/ }
    /*<<bytes.ml:53:12>>*/ function rcontains_from(s, i, c){
     /*<<?>>*/ if(0 <= i && caml_ml_bytes_length(s) > i)
     try{
       /*<<bytes.ml:388:15>>*/ rindex_rec(s, i, c);
       /*<<bytes.ml:388:15>>*/  /*<<bytes.ml:388:15>>*/ var _I_ = 1;
      return _I_;
     }
     catch(_J_){
      var _H_ = caml_wrap_exception(_J_);
      if(_H_ === Stdlib[8])  /*<<bytes.ml:388:58>>*/ return 0;
      throw caml_maybe_attach_backtrace(_H_, 0);
     }
     /*<<bytes.ml:386:4>>*/ return  /*<<bytes.ml:386:4>>*/ caml_call1
            (Stdlib[1], cst_String_rcontains_from_Byte);
    /*<<bytes.ml:388:63>>*/ }
    /*<<bytes.ml:53:12>>*/ function compare(x, y){
     /*<<bytes.ml:393:28>>*/ return  /*<<bytes.ml:393:28>>*/ runtime.caml_bytes_compare
            (x, y);
    /*<<bytes.ml:393:46>>*/ }
    /*<<bytes.ml:53:12>>*/ function split_on_char(sep, s){
     /*<<bytes.ml:398:2>>*/ var
      /*<<bytes.ml:398:2>>*/ r = [0, 0],
      /*<<bytes.ml:398:2>>*/ j =
       [0,  /*<<bytes.ml:398:2>>*/ caml_ml_bytes_length(s)],
      /*<<bytes.ml:398:2>>*/ _D_ =
        /*<<bytes.ml:398:2>>*/ caml_ml_bytes_length(s) - 1 | 0;
     /*<<bytes.ml:398:2>>*/ if(_D_ >= 0){
     var i = _D_;
      /*<<bytes.ml:401:4>>*/ for(;;){
       /*<<bytes.ml:401:4>>*/ if
       ( /*<<bytes.ml:401:4>>*/ caml_bytes_unsafe_get(s, i) === sep){
        /*<<bytes.ml:401:33>>*/  /*<<bytes.ml:401:33>>*/ var _F_ = r[1];
        /*<<bytes.ml:402:11>>*/ r[1] =
        [0, sub(s, i + 1 | 0, (j[1] - i | 0) - 1 | 0), _F_];
        /*<<bytes.ml:402:11>>*/ j[1] = i;
      }
      var _G_ = i - 1 | 0;
      if(0 !== i){var i = _G_; continue;}
      break;
     }
    }
     /*<<bytes.ml:406:2>>*/  /*<<bytes.ml:406:2>>*/ var _E_ = r[1];
     /*<<bytes.ml:406:2>>*/ return [0, sub(s, 0, j[1]), _E_];
    /*<<bytes.ml:406:18>>*/ }
    /*<<bytes.ml:53:12>>*/ function to_seq(s){
     /*<<bytes.ml:411:2>>*/ function aux(i, param){
      /*<<bytes.ml:412:4>>*/ if
      (i ===  /*<<bytes.ml:412:4>>*/ caml_ml_bytes_length(s))
       /*<<bytes.ml:412:25>>*/ return 0;
      /*<<bytes.ml:414:14>>*/ var
       /*<<bytes.ml:414:14>>*/ x =
         /*<<bytes.ml:414:14>>*/ caml_bytes_get(s, i),
       /*<<bytes.ml:414:14>>*/ _B_ = i + 1 | 0;
      /*<<bytes.ml:415:19>>*/ return [0,
             x,
             function(_C_){ /*<<?>>*/ return aux(_B_, _C_);}];
     /*<<bytes.ml:415:29>>*/ }
     /*<<bytes.ml:411:2>>*/  /*<<bytes.ml:411:2>>*/ var _z_ = 0;
     /*<<bytes.ml:411:2>>*/ return function(_A_){
      /*<<?>>*/ return aux(_z_, _A_);};
    /*<<bytes.ml:417:7>>*/ }
    /*<<bytes.ml:53:12>>*/ function to_seqi(s){
     /*<<bytes.ml:420:2>>*/ function aux(i, param){
      /*<<bytes.ml:421:4>>*/ if
      (i ===  /*<<bytes.ml:421:4>>*/ caml_ml_bytes_length(s))
       /*<<bytes.ml:421:25>>*/ return 0;
      /*<<bytes.ml:423:14>>*/ var
       /*<<bytes.ml:423:14>>*/ x =
         /*<<bytes.ml:423:14>>*/ caml_bytes_get(s, i),
       /*<<bytes.ml:423:14>>*/ _x_ = i + 1 | 0;
      /*<<bytes.ml:424:23>>*/ return [0,
             [0, i, x],
             function(_y_){ /*<<?>>*/ return aux(_x_, _y_);}];
     /*<<bytes.ml:424:33>>*/ }
     /*<<bytes.ml:420:2>>*/  /*<<bytes.ml:420:2>>*/ var _v_ = 0;
     /*<<bytes.ml:420:2>>*/ return function(_w_){
      /*<<?>>*/ return aux(_v_, _w_);};
    /*<<bytes.ml:426:7>>*/ }
    /*<<bytes.ml:53:12>>*/ function of_seq(i){
     /*<<bytes.ml:429:2>>*/ var
      /*<<bytes.ml:429:2>>*/ n = [0, 0],
      /*<<bytes.ml:430:16>>*/ buf = [0, make(256, 0)];
     /*<<bytes.ml:430:16>>*/ function _u_(c){
      /*<<bytes.ml:441:7>>*/ if
      (n[1] ===  /*<<bytes.ml:441:7>>*/ caml_ml_bytes_length(buf[1])){
       /*<<bytes.ml:433:18>>*/  /*<<bytes.ml:433:18>>*/ var
       new_len =
          /*<<bytes.ml:433:18>>*/ caml_call2
          (Stdlib_Int[10],
           2 *  /*<<bytes.ml:433:4>>*/ caml_ml_bytes_length(buf[1]) | 0,
           Stdlib_Sys[12]);
       /*<<bytes.ml:433:18>>*/ if
       ( /*<<bytes.ml:433:18>>*/ caml_ml_bytes_length(buf[1]) === new_len)
        /*<<bytes.ml:434:34>>*/  /*<<bytes.ml:434:34>>*/ caml_call1
        (Stdlib[2], cst_Bytes_of_seq_cannot_grow_b);
       /*<<bytes.ml:435:18>>*/  /*<<bytes.ml:435:18>>*/ var
       new_buf = make(new_len, 0);
       /*<<bytes.ml:436:4>>*/ blit(buf[1], 0, new_buf, 0, n[1]);
       /*<<bytes.ml:436:4>>*/ buf[1] = new_buf;
     }
      /*<<bytes.ml:442:7>>*/  /*<<bytes.ml:442:7>>*/ caml_bytes_set
      (buf[1], n[1], c);
      /*<<bytes.ml:442:7>>*/ n[1]++;
      /*<<bytes.ml:442:7>>*/ return 0;
     /*<<bytes.ml:443:13>>*/ }
     /*<<bytes.ml:439:2>>*/  /*<<bytes.ml:439:2>>*/ caml_call2
     (Stdlib_Seq[4], _u_, i);
     /*<<bytes.ml:439:2>>*/ return sub(buf[1], 0, n[1]);
    /*<<bytes.ml:445:15>>*/ }
    /*<<bytes.ml:53:12>>*/ function unsafe_get_uint16_le(b, i){
     /*<<bytes.ml:470:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:471:14>>*/ caml_bswap16
              ( /*<<bytes.ml:471:14>>*/ caml_bytes_get16(b, i))
            :  /*<<bytes.ml:472:7>>*/ caml_bytes_get16(b, i);
    /*<<bytes.ml:472:31>>*/ }
    /*<<bytes.ml:53:12>>*/ function unsafe_get_uint16_be(b, i){
     /*<<bytes.ml:475:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:476:7>>*/ caml_bytes_get16(b, i)
            :  /*<<bytes.ml:477:14>>*/ caml_bswap16
              ( /*<<bytes.ml:477:14>>*/ caml_bytes_get16(b, i));
    /*<<bytes.ml:477:40>>*/ }
    /*<<bytes.ml:53:12>>*/ function get_int8(b, i){
     /*<<bytes.ml:480:2>>*/ var
      /*<<bytes.ml:480:2>>*/ _s_ = Stdlib_Sys[10] - 8 | 0,
      /*<<bytes.ml:480:2>>*/ _t_ = Stdlib_Sys[10] - 8 | 0;
     /*<<bytes.ml:480:3>>*/ return  /*<<bytes.ml:480:3>>*/ caml_bytes_get
            (b, i)
           << _t_
           >> _s_;
    /*<<bytes.ml:480:65>>*/ }
    /*<<bytes.ml:53:12>>*/ function get_uint16_le(b, i){
     /*<<bytes.ml:483:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:483:32>>*/ caml_bswap16
              ( /*<<bytes.ml:483:32>>*/ caml_bytes_get16(b, i))
            :  /*<<bytes.ml:484:7>>*/ caml_bytes_get16(b, i);
    /*<<bytes.ml:484:24>>*/ }
    /*<<bytes.ml:53:12>>*/ function get_uint16_be(b, i){
     /*<<bytes.ml:487:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:488:7>>*/ caml_bytes_get16(b, i)
            :  /*<<bytes.ml:487:36>>*/ caml_bswap16
              ( /*<<bytes.ml:487:36>>*/ caml_bytes_get16(b, i));
    /*<<bytes.ml:488:24>>*/ }
    /*<<bytes.ml:53:12>>*/ function get_int16_ne(b, i){
     /*<<bytes.ml:491:2>>*/ var
      /*<<bytes.ml:491:2>>*/ _q_ = Stdlib_Sys[10] - 16 | 0,
      /*<<bytes.ml:491:2>>*/ _r_ = Stdlib_Sys[10] - 16 | 0;
     /*<<bytes.ml:491:3>>*/ return  /*<<bytes.ml:491:3>>*/ caml_bytes_get16
            (b, i)
           << _r_
           >> _q_;
    /*<<bytes.ml:491:71>>*/ }
    /*<<bytes.ml:53:12>>*/ function get_int16_le(b, i){
     /*<<bytes.ml:494:2>>*/ var
      /*<<bytes.ml:494:2>>*/ _o_ = Stdlib_Sys[10] - 16 | 0,
      /*<<bytes.ml:494:2>>*/ _p_ = Stdlib_Sys[10] - 16 | 0;
     /*<<bytes.ml:494:3>>*/ return get_uint16_le(b, i) << _p_ >> _o_;
    /*<<bytes.ml:494:71>>*/ }
    /*<<bytes.ml:53:12>>*/ function get_int16_be(b, i){
     /*<<bytes.ml:497:2>>*/ var
      /*<<bytes.ml:497:2>>*/ _m_ = Stdlib_Sys[10] - 16 | 0,
      /*<<bytes.ml:497:2>>*/ _n_ = Stdlib_Sys[10] - 16 | 0;
     /*<<bytes.ml:497:3>>*/ return get_uint16_be(b, i) << _n_ >> _m_;
    /*<<bytes.ml:497:71>>*/ }
    /*<<bytes.ml:53:12>>*/ function get_int32_le(b, i){
     /*<<bytes.ml:500:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:500:50>>*/ caml_int32_bswap
              ( /*<<bytes.ml:500:32>>*/ caml_bytes_get32(b, i))
            :  /*<<bytes.ml:501:7>>*/ caml_bytes_get32(b, i);
    /*<<bytes.ml:501:23>>*/ }
    /*<<bytes.ml:53:12>>*/ function get_int32_be(b, i){
     /*<<bytes.ml:504:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:505:7>>*/ caml_bytes_get32(b, i)
            :  /*<<bytes.ml:504:54>>*/ caml_int32_bswap
              ( /*<<bytes.ml:504:36>>*/ caml_bytes_get32(b, i));
    /*<<bytes.ml:505:23>>*/ }
    /*<<bytes.ml:53:12>>*/ function get_int64_le(b, i){
     /*<<bytes.ml:508:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:508:50>>*/ caml_int64_bswap
              ( /*<<bytes.ml:508:32>>*/ caml_bytes_get64(b, i))
            :  /*<<bytes.ml:509:7>>*/ caml_bytes_get64(b, i);
    /*<<bytes.ml:509:23>>*/ }
    /*<<bytes.ml:53:12>>*/ function get_int64_be(b, i){
     /*<<bytes.ml:512:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:513:7>>*/ caml_bytes_get64(b, i)
            :  /*<<bytes.ml:512:54>>*/ caml_int64_bswap
              ( /*<<bytes.ml:512:36>>*/ caml_bytes_get64(b, i));
    /*<<bytes.ml:513:23>>*/ }
    /*<<bytes.ml:53:12>>*/ function unsafe_set_uint16_le(b, i, x){
     /*<<bytes.ml:516:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:517:7>>*/ caml_bytes_set16
              (b, i,  /*<<bytes.ml:517:7>>*/ caml_bswap16(x))
            :  /*<<bytes.ml:518:7>>*/ caml_bytes_set16(b, i, x);
    /*<<bytes.ml:518:33>>*/ }
    /*<<bytes.ml:53:12>>*/ function unsafe_set_uint16_be(b, i, x){
     /*<<bytes.ml:521:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:522:7>>*/ caml_bytes_set16(b, i, x)
            :  /*<<bytes.ml:523:2>>*/ caml_bytes_set16
              (b, i,  /*<<bytes.ml:523:2>>*/ caml_bswap16(x));
    /*<<bytes.ml:523:37>>*/ }
    /*<<bytes.ml:53:12>>*/ function set_int16_le(b, i, x){
     /*<<bytes.ml:526:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:526:25>>*/ caml_bytes_set16
              (b, i,  /*<<bytes.ml:526:25>>*/ caml_bswap16(x))
            :  /*<<bytes.ml:527:7>>*/ caml_bytes_set16(b, i, x);
    /*<<bytes.ml:527:25>>*/ }
    /*<<bytes.ml:53:12>>*/ function set_int16_be(b, i, x){
     /*<<bytes.ml:530:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:531:7>>*/ caml_bytes_set16(b, i, x)
            :  /*<<bytes.ml:530:29>>*/ caml_bytes_set16
              (b, i,  /*<<bytes.ml:530:29>>*/ caml_bswap16(x));
    /*<<bytes.ml:531:25>>*/ }
    /*<<bytes.ml:53:12>>*/ function set_int32_le(b, i, x){
     /*<<bytes.ml:534:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:534:25>>*/ caml_bytes_set32
              (b, i,  /*<<bytes.ml:534:42>>*/ caml_int32_bswap(x))
            :  /*<<bytes.ml:535:7>>*/ caml_bytes_set32(b, i, x);
    /*<<bytes.ml:535:25>>*/ }
    /*<<bytes.ml:53:12>>*/ function set_int32_be(b, i, x){
     /*<<bytes.ml:538:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:539:7>>*/ caml_bytes_set32(b, i, x)
            :  /*<<bytes.ml:538:29>>*/ caml_bytes_set32
              (b, i,  /*<<bytes.ml:538:46>>*/ caml_int32_bswap(x));
    /*<<bytes.ml:539:25>>*/ }
    /*<<bytes.ml:53:12>>*/ function set_int64_le(b, i, x){
     /*<<bytes.ml:542:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:542:25>>*/ caml_bytes_set64
              (b, i,  /*<<bytes.ml:542:42>>*/ caml_int64_bswap(x))
            :  /*<<bytes.ml:543:7>>*/ caml_bytes_set64(b, i, x);
    /*<<bytes.ml:543:25>>*/ }
    /*<<bytes.ml:53:12>>*/ function set_int64_be(b, i, x){
     /*<<bytes.ml:546:2>>*/ return Stdlib_Sys[11]
            ?  /*<<bytes.ml:547:7>>*/ caml_bytes_set64(b, i, x)
            :  /*<<bytes.ml:546:29>>*/ caml_bytes_set64
              (b, i,  /*<<bytes.ml:546:46>>*/ caml_int64_bswap(x));
    /*<<bytes.ml:547:25>>*/ }
    /*<<bytes.ml:53:12>>*/ var
     /*<<bytes.ml:53:12>>*/ set_uint8 = caml_bytes_set,
     /*<<bytes.ml:53:12>>*/ set_uint16_ne = caml_bytes_set16,
     /*<<bytes.ml:53:12>>*/ dec_invalid = Stdlib_Uchar[22];
    /*<<bytes.ml:53:12>>*/ function dec_ret(n, u){
     /*<<bytes.ml:557:46>>*/  /*<<bytes.ml:557:46>>*/ var
     _l_ =  /*<<bytes.ml:557:46>>*/ caml_call1(Stdlib_Uchar[9], u);
     /*<<bytes.ml:557:46>>*/ return  /*<<bytes.ml:557:46>>*/ caml_call2
            (Stdlib_Uchar[21], n, _l_);
    /*<<bytes.ml:557:69>>*/ }
    /*<<bytes.ml:53:12>>*/ function not_in_x80_to_xBF(b){
     /*<<bytes.ml:575:35>>*/ return 2 !== (b >>> 6 | 0) ? 1 : 0;
    /*<<bytes.ml:575:50>>*/ }
    /*<<bytes.ml:53:12>>*/ function not_in_xA0_to_xBF(b){
     /*<<bytes.ml:576:35>>*/ return 5 !== (b >>> 5 | 0) ? 1 : 0;
    /*<<bytes.ml:576:51>>*/ }
    /*<<bytes.ml:53:12>>*/ function not_in_x80_to_x9F(b){
     /*<<bytes.ml:577:35>>*/ return 4 !== (b >>> 5 | 0) ? 1 : 0;
    /*<<bytes.ml:577:51>>*/ }
    /*<<bytes.ml:53:12>>*/ function not_in_x90_to_xBF(b){
     /*<<bytes.ml:578:35>>*/ var
      /*<<bytes.ml:578:35>>*/ _j_ = b < 144 ? 1 : 0,
      /*<<bytes.ml:578:35>>*/ _k_ = _j_ || (191 < b ? 1 : 0);
     /*<<bytes.ml:577:35>>*/ return _k_;
    /*<<bytes.ml:578:55>>*/ }
    /*<<bytes.ml:53:12>>*/ function not_in_x80_to_x8F(b){
     /*<<bytes.ml:579:35>>*/ return 8 !== (b >>> 4 | 0) ? 1 : 0;
    /*<<bytes.ml:579:49>>*/ }
    /*<<bytes.ml:53:12>>*/ function utf_8_uchar_3(b0, b1, b2){
     /*<<bytes.ml:586:2>>*/ return (b0 & 15) << 12 | (b1 & 63) << 6 | b2 & 63;
    /*<<bytes.ml:588:18>>*/ }
    /*<<bytes.ml:53:12>>*/ function utf_8_uchar_4(b0, b1, b2, b3){
     /*<<bytes.ml:591:2>>*/ return (b0 & 7) << 18 | (b1 & 63) << 12
           | (b2 & 63) << 6
           | b3 & 63;
    /*<<bytes.ml:594:18>>*/ }
    /*<<bytes.ml:53:12>>*/ function get_utf_8_uchar(b, i){
     /*<<bytes.ml:597:11>>*/ var
      /*<<bytes.ml:597:11>>*/ b0 =
        /*<<bytes.ml:597:11>>*/ caml_bytes_get(b, i),
      /*<<bytes.ml:597:11>>*/ max =
        /*<<bytes.ml:597:11>>*/ caml_ml_bytes_length(b) - 1 | 0;
     /*<<bytes.ml:597:11>>*/ if(224 <= b0){
     var switch$0 = 0;
     if(237 <= b0){
      if(245 > b0)
       switch(b0 - 237 | 0){
         case 0:
           /*<<bytes.ml:619:6>>*/  /*<<bytes.ml:619:6>>*/ var i$0 = i + 1 | 0;
           /*<<bytes.ml:619:6>>*/ if(max < i$0)
            /*<<bytes.ml:619:39>>*/ return  /*<<bytes.ml:619:39>>*/ caml_call1
                   (dec_invalid, 1);
           /*<<bytes.ml:620:15>>*/  /*<<bytes.ml:620:15>>*/ var
           b1 =  /*<<bytes.ml:620:15>>*/ caml_bytes_unsafe_get(b, i$0);
           /*<<bytes.ml:620:29>>*/ if(not_in_x80_to_x9F(b1))
            /*<<bytes.ml:620:55>>*/ return  /*<<bytes.ml:620:55>>*/ caml_call1
                   (dec_invalid, 1);
           /*<<bytes.ml:621:6>>*/  /*<<bytes.ml:621:6>>*/ var
           i$1 = i$0 + 1 | 0;
           /*<<bytes.ml:621:6>>*/ if(max < i$1)
            /*<<bytes.ml:621:39>>*/ return  /*<<bytes.ml:621:39>>*/ caml_call1
                   (dec_invalid, 2);
           /*<<bytes.ml:622:15>>*/  /*<<bytes.ml:622:15>>*/ var
           b2 =  /*<<bytes.ml:622:15>>*/ caml_bytes_unsafe_get(b, i$1);
           /*<<bytes.ml:622:29>>*/ return not_in_x80_to_xBF(b2)
                  ?  /*<<bytes.ml:622:55>>*/ caml_call1(dec_invalid, 2)
                  : dec_ret(3, utf_8_uchar_3(b0, b1, b2));
         case 3:
           /*<<bytes.ml:625:6>>*/  /*<<bytes.ml:625:6>>*/ var i$4 = i + 1 | 0;
           /*<<bytes.ml:625:6>>*/ if(max < i$4)
            /*<<bytes.ml:625:39>>*/ return  /*<<bytes.ml:625:39>>*/ caml_call1
                   (dec_invalid, 1);
           /*<<bytes.ml:626:15>>*/  /*<<bytes.ml:626:15>>*/ var
           b1$1 =  /*<<bytes.ml:626:15>>*/ caml_bytes_unsafe_get(b, i$4);
           /*<<bytes.ml:626:29>>*/ if(not_in_x90_to_xBF(b1$1))
            /*<<bytes.ml:626:55>>*/ return  /*<<bytes.ml:626:55>>*/ caml_call1
                   (dec_invalid, 1);
           /*<<bytes.ml:627:6>>*/  /*<<bytes.ml:627:6>>*/ var
           i$5 = i$4 + 1 | 0;
           /*<<bytes.ml:627:6>>*/ if(max < i$5)
            /*<<bytes.ml:627:39>>*/ return  /*<<bytes.ml:627:39>>*/ caml_call1
                   (dec_invalid, 2);
           /*<<bytes.ml:628:15>>*/  /*<<bytes.ml:628:15>>*/ var
           b2$1 =  /*<<bytes.ml:628:15>>*/ caml_bytes_unsafe_get(b, i$5);
           /*<<bytes.ml:628:29>>*/ if(not_in_x80_to_xBF(b2$1))
            /*<<bytes.ml:628:55>>*/ return  /*<<bytes.ml:628:55>>*/ caml_call1
                   (dec_invalid, 2);
           /*<<bytes.ml:629:6>>*/  /*<<bytes.ml:629:6>>*/ var
           i$6 = i$5 + 1 | 0;
           /*<<bytes.ml:629:6>>*/ if(max < i$6)
            /*<<bytes.ml:629:39>>*/ return  /*<<bytes.ml:629:39>>*/ caml_call1
                   (dec_invalid, 3);
           /*<<bytes.ml:630:15>>*/  /*<<bytes.ml:630:15>>*/ var
           b3 =  /*<<bytes.ml:630:15>>*/ caml_bytes_unsafe_get(b, i$6);
           /*<<bytes.ml:630:29>>*/ return not_in_x80_to_xBF(b3)
                  ?  /*<<bytes.ml:630:55>>*/ caml_call1(dec_invalid, 3)
                  : dec_ret(4, utf_8_uchar_4(b0, b1$1, b2$1, b3));
         case 7:
           /*<<bytes.ml:641:6>>*/  /*<<bytes.ml:641:6>>*/ var
           i$10 = i + 1 | 0;
           /*<<bytes.ml:641:6>>*/ if(max < i$10)
            /*<<bytes.ml:641:39>>*/ return  /*<<bytes.ml:641:39>>*/ caml_call1
                   (dec_invalid, 1);
           /*<<bytes.ml:642:15>>*/  /*<<bytes.ml:642:15>>*/ var
           b1$3 =  /*<<bytes.ml:642:15>>*/ caml_bytes_unsafe_get(b, i$10);
           /*<<bytes.ml:642:29>>*/ if(not_in_x80_to_x8F(b1$3))
            /*<<bytes.ml:642:55>>*/ return  /*<<bytes.ml:642:55>>*/ caml_call1
                   (dec_invalid, 1);
           /*<<bytes.ml:643:6>>*/  /*<<bytes.ml:643:6>>*/ var
           i$11 = i$10 + 1 | 0;
           /*<<bytes.ml:643:6>>*/ if(max < i$11)
            /*<<bytes.ml:643:39>>*/ return  /*<<bytes.ml:643:39>>*/ caml_call1
                   (dec_invalid, 2);
           /*<<bytes.ml:644:15>>*/  /*<<bytes.ml:644:15>>*/ var
           b2$3 =  /*<<bytes.ml:644:15>>*/ caml_bytes_unsafe_get(b, i$11);
           /*<<bytes.ml:644:29>>*/ if(not_in_x80_to_xBF(b2$3))
            /*<<bytes.ml:644:55>>*/ return  /*<<bytes.ml:644:55>>*/ caml_call1
                   (dec_invalid, 2);
           /*<<bytes.ml:645:6>>*/  /*<<bytes.ml:645:6>>*/ var
           i$12 = i$11 + 1 | 0;
           /*<<bytes.ml:645:6>>*/ if(max < i$12)
            /*<<bytes.ml:645:39>>*/ return  /*<<bytes.ml:645:39>>*/ caml_call1
                   (dec_invalid, 3);
           /*<<bytes.ml:646:15>>*/  /*<<bytes.ml:646:15>>*/ var
           b3$1 =  /*<<bytes.ml:646:15>>*/ caml_bytes_unsafe_get(b, i$12);
           /*<<bytes.ml:646:29>>*/ return not_in_x80_to_xBF(b3$1)
                  ?  /*<<bytes.ml:646:55>>*/ caml_call1(dec_invalid, 3)
                  : dec_ret(4, utf_8_uchar_4(b0, b1$3, b2$3, b3$1));
         case 1:
         case 2:
          switch$0 = 1; break;
         default:
           /*<<bytes.ml:633:6>>*/  /*<<bytes.ml:633:6>>*/ var i$7 = i + 1 | 0;
           /*<<bytes.ml:633:6>>*/ if(max < i$7)
            /*<<bytes.ml:633:39>>*/ return  /*<<bytes.ml:633:39>>*/ caml_call1
                   (dec_invalid, 1);
           /*<<bytes.ml:634:15>>*/  /*<<bytes.ml:634:15>>*/ var
           b1$2 =  /*<<bytes.ml:634:15>>*/ caml_bytes_unsafe_get(b, i$7);
           /*<<bytes.ml:634:29>>*/ if(not_in_x80_to_xBF(b1$2))
            /*<<bytes.ml:634:55>>*/ return  /*<<bytes.ml:634:55>>*/ caml_call1
                   (dec_invalid, 1);
           /*<<bytes.ml:635:6>>*/  /*<<bytes.ml:635:6>>*/ var
           i$8 = i$7 + 1 | 0;
           /*<<bytes.ml:635:6>>*/ if(max < i$8)
            /*<<bytes.ml:635:39>>*/ return  /*<<bytes.ml:635:39>>*/ caml_call1
                   (dec_invalid, 2);
           /*<<bytes.ml:636:15>>*/  /*<<bytes.ml:636:15>>*/ var
           b2$2 =  /*<<bytes.ml:636:15>>*/ caml_bytes_unsafe_get(b, i$8);
           /*<<bytes.ml:636:29>>*/ if(not_in_x80_to_xBF(b2$2))
            /*<<bytes.ml:636:55>>*/ return  /*<<bytes.ml:636:55>>*/ caml_call1
                   (dec_invalid, 2);
           /*<<bytes.ml:637:6>>*/  /*<<bytes.ml:637:6>>*/ var
           i$9 = i$8 + 1 | 0;
           /*<<bytes.ml:637:6>>*/ if(max < i$9)
            /*<<bytes.ml:637:39>>*/ return  /*<<bytes.ml:637:39>>*/ caml_call1
                   (dec_invalid, 3);
           /*<<bytes.ml:638:15>>*/  /*<<bytes.ml:638:15>>*/ var
           b3$0 =  /*<<bytes.ml:638:15>>*/ caml_bytes_unsafe_get(b, i$9);
           /*<<bytes.ml:638:29>>*/ return not_in_x80_to_xBF(b3$0)
                  ?  /*<<bytes.ml:638:55>>*/ caml_call1(dec_invalid, 3)
                  : dec_ret(4, utf_8_uchar_4(b0, b1$2, b2$2, b3$0));
       }
     }
     else{
      if(225 > b0){
        /*<<bytes.ml:607:6>>*/  /*<<bytes.ml:607:6>>*/ var i$13 = i + 1 | 0;
        /*<<bytes.ml:607:6>>*/ if(max < i$13)
         /*<<bytes.ml:607:39>>*/ return  /*<<bytes.ml:607:39>>*/ caml_call1
                (dec_invalid, 1);
        /*<<bytes.ml:608:15>>*/  /*<<bytes.ml:608:15>>*/ var
        b1$4 =  /*<<bytes.ml:608:15>>*/ caml_bytes_unsafe_get(b, i$13);
        /*<<bytes.ml:608:29>>*/ if(not_in_xA0_to_xBF(b1$4))
         /*<<bytes.ml:608:55>>*/ return  /*<<bytes.ml:608:55>>*/ caml_call1
                (dec_invalid, 1);
        /*<<bytes.ml:609:6>>*/  /*<<bytes.ml:609:6>>*/ var
        i$14 = i$13 + 1 | 0;
        /*<<bytes.ml:609:6>>*/ if(max < i$14)
         /*<<bytes.ml:609:39>>*/ return  /*<<bytes.ml:609:39>>*/ caml_call1
                (dec_invalid, 2);
        /*<<bytes.ml:610:15>>*/  /*<<bytes.ml:610:15>>*/ var
        b2$4 =  /*<<bytes.ml:610:15>>*/ caml_bytes_unsafe_get(b, i$14);
        /*<<bytes.ml:610:29>>*/ return not_in_x80_to_xBF(b2$4)
               ?  /*<<bytes.ml:610:55>>*/ caml_call1(dec_invalid, 2)
               : dec_ret(3, utf_8_uchar_3(b0, b1$4, b2$4));
      }
      switch$0 = 1;
     }
     if(switch$0){
       /*<<bytes.ml:613:6>>*/  /*<<bytes.ml:613:6>>*/ var i$2 = i + 1 | 0;
       /*<<bytes.ml:613:6>>*/ if(max < i$2)
        /*<<bytes.ml:613:39>>*/ return  /*<<bytes.ml:613:39>>*/ caml_call1
               (dec_invalid, 1);
       /*<<bytes.ml:614:15>>*/  /*<<bytes.ml:614:15>>*/ var
       b1$0 =  /*<<bytes.ml:614:15>>*/ caml_bytes_unsafe_get(b, i$2);
       /*<<bytes.ml:614:29>>*/ if(not_in_x80_to_xBF(b1$0))
        /*<<bytes.ml:614:55>>*/ return  /*<<bytes.ml:614:55>>*/ caml_call1
               (dec_invalid, 1);
       /*<<bytes.ml:615:6>>*/  /*<<bytes.ml:615:6>>*/ var i$3 = i$2 + 1 | 0;
       /*<<bytes.ml:615:6>>*/ if(max < i$3)
        /*<<bytes.ml:615:39>>*/ return  /*<<bytes.ml:615:39>>*/ caml_call1
               (dec_invalid, 2);
       /*<<bytes.ml:616:15>>*/  /*<<bytes.ml:616:15>>*/ var
       b2$0 =  /*<<bytes.ml:616:15>>*/ caml_bytes_unsafe_get(b, i$3);
       /*<<bytes.ml:616:29>>*/ return not_in_x80_to_xBF(b2$0)
              ?  /*<<bytes.ml:616:55>>*/ caml_call1(dec_invalid, 2)
              : dec_ret(3, utf_8_uchar_3(b0, b1$0, b2$0));
     }
    }
    else{
     if(128 > b0)  /*<<bytes.ml:601:24>>*/ return dec_ret(1, b0);
     if(194 <= b0){
       /*<<bytes.ml:603:6>>*/  /*<<bytes.ml:603:6>>*/ var i$15 = i + 1 | 0;
       /*<<bytes.ml:603:6>>*/ if(max < i$15)
        /*<<bytes.ml:603:39>>*/ return  /*<<bytes.ml:603:39>>*/ caml_call1
               (dec_invalid, 1);
       /*<<bytes.ml:604:15>>*/  /*<<bytes.ml:604:15>>*/ var
       b1$5 =  /*<<bytes.ml:604:15>>*/ caml_bytes_unsafe_get(b, i$15);
       /*<<bytes.ml:604:29>>*/ return not_in_x80_to_xBF(b1$5)
              ?  /*<<bytes.ml:604:55>>*/ caml_call1(dec_invalid, 1)
              : dec_ret(2, (b0 & 31) << 6 | b1$5 & 63);
     }
    }
     /*<<bytes.ml:648:9>>*/ return  /*<<bytes.ml:648:9>>*/ caml_call1
            (dec_invalid, 1);
    /*<<bytes.ml:648:22>>*/ }
    /*<<bytes.ml:53:12>>*/ function set_utf_8_uchar(b, i, u){
     /*<<bytes.ml:651:2>>*/ function set(_i_, _h_, _g_){
      /*<<?>>*/ caml_bytes_unsafe_set(_i_, _h_, _g_);
     return 0;
    }
     /*<<bytes.ml:651:2>>*/ var
      /*<<bytes.ml:651:2>>*/ max =
        /*<<bytes.ml:651:2>>*/ caml_ml_bytes_length(b) - 1 | 0,
      /*<<bytes.ml:653:8>>*/ u$0 =
        /*<<bytes.ml:653:8>>*/ caml_call1(Stdlib_Uchar[10], u);
     /*<<bytes.ml:653:8>>*/ if(0 > u$0)
      /*<<bytes.ml:654:20>>*/ throw  /*<<bytes.ml:654:20>>*/ caml_maybe_attach_backtrace
            ([0, Assert_failure, _b_], 1);
     /*<<bytes.ml:655:11>>*/ if(127 >= u$0){
      /*<<bytes.ml:656:6>>*/  /*<<bytes.ml:656:6>>*/ caml_bytes_set(b, i, u$0);
      /*<<bytes.ml:656:6>>*/ return 1;
    }
     /*<<bytes.ml:658:11>>*/ if(2047 >= u$0){
      /*<<bytes.ml:659:6>>*/  /*<<bytes.ml:659:6>>*/ var last$1 = i + 1 | 0;
      /*<<bytes.ml:659:6>>*/ return max < last$1
             ? 0
             : ( /*<<bytes.ml:661:7>>*/ caml_bytes_set
                (b, i, 192 | u$0 >>> 6 | 0),
               set(b, last$1, 128 | u$0 & 63),
               2);
    }
     /*<<bytes.ml:664:11>>*/ if(65535 >= u$0){
      /*<<bytes.ml:665:6>>*/  /*<<bytes.ml:665:6>>*/ var last$0 = i + 2 | 0;
      /*<<bytes.ml:665:6>>*/ return max < last$0
             ? 0
             : ( /*<<bytes.ml:667:7>>*/ caml_bytes_set
                (b, i, 224 | u$0 >>> 12 | 0),
               set(b, i + 1 | 0, 128 | (u$0 >>> 6 | 0) & 63),
               set(b, last$0, 128 | u$0 & 63),
               3);
    }
     /*<<bytes.ml:671:11>>*/ if(1114111 < u$0)
      /*<<bytes.ml:679:9>>*/ throw  /*<<bytes.ml:679:9>>*/ caml_maybe_attach_backtrace
            ([0, Assert_failure, _a_], 1);
     /*<<bytes.ml:672:6>>*/  /*<<bytes.ml:672:6>>*/ var last = i + 3 | 0;
     /*<<bytes.ml:672:6>>*/ return max < last
            ? 0
            : ( /*<<bytes.ml:674:7>>*/ caml_bytes_set
               (b, i, 240 | u$0 >>> 18 | 0),
              set(b, i + 1 | 0, 128 | (u$0 >>> 12 | 0) & 63),
              set(b, i + 2 | 0, 128 | (u$0 >>> 6 | 0) & 63),
              set(b, last, 128 | u$0 & 63),
              4);
    /*<<bytes.ml:679:21>>*/ }
    /*<<bytes.ml:53:12>>*/ function is_valid_utf_8(b){
     /*<<bytes.ml:682:2>>*/ var
      /*<<bytes.ml:682:2>>*/ max =
        /*<<bytes.ml:682:2>>*/ caml_ml_bytes_length(b) - 1 | 0,
     i = 0;
     /*<<bytes.ml:683:4>>*/ for(;;){
      /*<<bytes.ml:683:4>>*/ if(max < i)  /*<<bytes.ml:683:20>>*/ return 1;
      /*<<bytes.ml:685:26>>*/  /*<<bytes.ml:685:26>>*/ var
      match =  /*<<bytes.ml:685:26>>*/ caml_bytes_unsafe_get(b, i);
      /*<<bytes.ml:685:26>>*/ if(224 <= match){
      var switch$0 = 0;
      if(237 <= match){
       if(245 > match)
        switch(match - 237 | 0){
          case 0:
            /*<<bytes.ml:708:8>>*/  /*<<bytes.ml:708:8>>*/ var
            last = i + 2 | 0;
            /*<<bytes.ml:711:11>>*/ if
            (max >= last
             &&
              !
              not_in_x80_to_x9F
               ( /*<<bytes.ml:710:29>>*/ caml_bytes_unsafe_get(b, i + 1 | 0))
              &&
               !
               not_in_x80_to_xBF
                ( /*<<bytes.ml:711:29>>*/ caml_bytes_unsafe_get(b, last))){
             /*<<bytes.ml:713:13>>*/ var
              /*<<bytes.ml:713:13>>*/ i$0 = last + 1 | 0,
             i = i$0;
            continue;
           }
            /*<<bytes.ml:712:13>>*/ return 0;
          case 3:
            /*<<bytes.ml:715:8>>*/  /*<<bytes.ml:715:8>>*/ var
            last$1 = i + 3 | 0;
            /*<<bytes.ml:719:11>>*/ if
            (max >= last$1
             &&
              !
              not_in_x90_to_xBF
               ( /*<<bytes.ml:717:29>>*/ caml_bytes_unsafe_get(b, i + 1 | 0))
              &&
               !
               not_in_x80_to_xBF
                ( /*<<bytes.ml:718:29>>*/ caml_bytes_unsafe_get(b, i + 2 | 0))
               &&
                !
                not_in_x80_to_xBF
                 ( /*<<bytes.ml:719:29>>*/ caml_bytes_unsafe_get(b, last$1))){
             /*<<bytes.ml:721:13>>*/ var
              /*<<bytes.ml:721:13>>*/ i$2 = last$1 + 1 | 0,
             i = i$2;
            continue;
           }
            /*<<bytes.ml:720:13>>*/ return 0;
          case 7:
            /*<<bytes.ml:731:8>>*/  /*<<bytes.ml:731:8>>*/ var
            last$3 = i + 3 | 0;
            /*<<bytes.ml:735:11>>*/ if
            (max >= last$3
             &&
              !
              not_in_x80_to_x8F
               ( /*<<bytes.ml:733:29>>*/ caml_bytes_unsafe_get(b, i + 1 | 0))
              &&
               !
               not_in_x80_to_xBF
                ( /*<<bytes.ml:734:29>>*/ caml_bytes_unsafe_get(b, i + 2 | 0))
               &&
                !
                not_in_x80_to_xBF
                 ( /*<<bytes.ml:735:29>>*/ caml_bytes_unsafe_get(b, last$3))){
             /*<<bytes.ml:737:13>>*/ var
              /*<<bytes.ml:737:13>>*/ i$4 = last$3 + 1 | 0,
             i = i$4;
            continue;
           }
            /*<<bytes.ml:736:13>>*/ return 0;
          case 1:
          case 2:
           switch$0 = 1; break;
          default:
            /*<<bytes.ml:723:8>>*/  /*<<bytes.ml:723:8>>*/ var
            last$2 = i + 3 | 0;
            /*<<bytes.ml:727:11>>*/ if
            (max >= last$2
             &&
              !
              not_in_x80_to_xBF
               ( /*<<bytes.ml:725:29>>*/ caml_bytes_unsafe_get(b, i + 1 | 0))
              &&
               !
               not_in_x80_to_xBF
                ( /*<<bytes.ml:726:29>>*/ caml_bytes_unsafe_get(b, i + 2 | 0))
               &&
                !
                not_in_x80_to_xBF
                 ( /*<<bytes.ml:727:29>>*/ caml_bytes_unsafe_get(b, last$2))){
             /*<<bytes.ml:729:13>>*/ var
              /*<<bytes.ml:729:13>>*/ i$3 = last$2 + 1 | 0,
             i = i$3;
            continue;
           }
            /*<<bytes.ml:728:13>>*/ return 0;
        }
      }
      else{
       if(225 > match){
         /*<<bytes.ml:694:8>>*/  /*<<bytes.ml:694:8>>*/ var
         last$4 = i + 2 | 0;
         /*<<bytes.ml:697:11>>*/ if
         (max >= last$4
          &&
           !
           not_in_xA0_to_xBF
            ( /*<<bytes.ml:696:29>>*/ caml_bytes_unsafe_get(b, i + 1 | 0))
           &&
            !
            not_in_x80_to_xBF
             ( /*<<bytes.ml:697:29>>*/ caml_bytes_unsafe_get(b, last$4))){
          /*<<bytes.ml:699:13>>*/ var
           /*<<bytes.ml:699:13>>*/ i$5 = last$4 + 1 | 0,
          i = i$5;
         continue;
        }
         /*<<bytes.ml:698:13>>*/ return 0;
       }
       switch$0 = 1;
      }
      if(switch$0){
        /*<<bytes.ml:701:8>>*/  /*<<bytes.ml:701:8>>*/ var last$0 = i + 2 | 0;
        /*<<bytes.ml:704:11>>*/ if
        (max >= last$0
         &&
          !
          not_in_x80_to_xBF
           ( /*<<bytes.ml:703:29>>*/ caml_bytes_unsafe_get(b, i + 1 | 0))
          &&
           !
           not_in_x80_to_xBF
            ( /*<<bytes.ml:704:29>>*/ caml_bytes_unsafe_get(b, last$0))){
         /*<<bytes.ml:706:13>>*/ var
          /*<<bytes.ml:706:13>>*/ i$1 = last$0 + 1 | 0,
         i = i$1;
        continue;
       }
        /*<<bytes.ml:705:13>>*/ return 0;
      }
     }
     else{
      if(128 > match){
        /*<<bytes.ml:686:26>>*/ var
         /*<<bytes.ml:686:26>>*/ i$7 = i + 1 | 0,
        i = i$7;
       continue;
      }
      if(194 <= match){
        /*<<bytes.ml:688:8>>*/  /*<<bytes.ml:688:8>>*/ var last$5 = i + 1 | 0;
        /*<<bytes.ml:690:11>>*/ if
        (max >= last$5
         &&
          !
          not_in_x80_to_xBF
           ( /*<<bytes.ml:690:29>>*/ caml_bytes_unsafe_get(b, last$5))){
         /*<<bytes.ml:692:13>>*/ var
          /*<<bytes.ml:692:13>>*/ i$6 = last$5 + 1 | 0,
         i = i$6;
        continue;
       }
        /*<<bytes.ml:691:13>>*/ return 0;
      }
     }
      /*<<bytes.ml:738:11>>*/ return 0;
    }
    /*<<bytes.ml:740:25>>*/ }
    /*<<bytes.ml:53:12>>*/ function get_utf_16be_uchar(b, i){
     /*<<bytes.ml:745:2>>*/  /*<<bytes.ml:745:2>>*/ var
     max =  /*<<bytes.ml:745:2>>*/ caml_ml_bytes_length(b) - 1 | 0;
    if(0 <= i && max >= i){
      /*<<bytes.ml:748:2>>*/ if(i === max)
       /*<<bytes.ml:748:18>>*/ return  /*<<bytes.ml:748:18>>*/ caml_call1
              (dec_invalid, 1);
      /*<<bytes.ml:749:8>>*/  /*<<bytes.ml:749:8>>*/ var
      hi = unsafe_get_uint16_be(b, i);
     if(55296 <= hi && 57343 >= hi){
       /*<<bytes.ml:751:11>>*/ if(56319 < hi)
        /*<<bytes.ml:751:25>>*/ return  /*<<bytes.ml:751:25>>*/ caml_call1
               (dec_invalid, 2);
       /*<<bytes.ml:753:6>>*/  /*<<bytes.ml:753:6>>*/ var last = i + 3 | 0;
       /*<<bytes.ml:753:6>>*/ if(max < last)
        /*<<bytes.ml:754:25>>*/ return  /*<<bytes.ml:754:25>>*/ caml_call1
               (dec_invalid, (max - i | 0) + 1 | 0);
       /*<<bytes.ml:755:12>>*/  /*<<bytes.ml:755:12>>*/ var
       lo = unsafe_get_uint16_be(b, i + 2 | 0);
      if(56320 <= lo && 57343 >= lo){
        /*<<bytes.ml:758:10>>*/  /*<<bytes.ml:758:10>>*/ var
        u = ((hi & 1023) << 10 | lo & 1023) + 65536 | 0;
        /*<<bytes.ml:758:10>>*/ return dec_ret(4, u);
      }
       /*<<bytes.ml:756:43>>*/ return  /*<<bytes.ml:756:43>>*/ caml_call1
              (dec_invalid, 2);
     }
      /*<<bytes.ml:750:39>>*/ return dec_ret(2, hi);
    }
     /*<<bytes.ml:747:27>>*/ return  /*<<bytes.ml:747:27>>*/ caml_call1
            (Stdlib[1], cst_index_out_of_bounds);
    /*<<bytes.ml:759:21>>*/ }
    /*<<bytes.ml:53:12>>*/ function set_utf_16be_uchar(b, i, u){
     /*<<bytes.ml:762:2>>*/  /*<<bytes.ml:762:2>>*/ var
     max =  /*<<bytes.ml:762:2>>*/ caml_ml_bytes_length(b) - 1 | 0;
    if(0 <= i && max >= i){
      /*<<bytes.ml:765:8>>*/  /*<<bytes.ml:765:8>>*/ var
      u$0 =  /*<<bytes.ml:765:8>>*/ caml_call1(Stdlib_Uchar[10], u);
      /*<<bytes.ml:765:8>>*/ if(0 > u$0)
       /*<<bytes.ml:766:20>>*/ throw  /*<<bytes.ml:766:20>>*/ caml_maybe_attach_backtrace
             ([0, Assert_failure, _d_], 1);
      /*<<bytes.ml:767:11>>*/ if(65535 >= u$0){
       /*<<bytes.ml:768:6>>*/  /*<<bytes.ml:768:6>>*/ var last$0 = i + 1 | 0;
       /*<<bytes.ml:768:6>>*/ return max < last$0
              ? 0
              : (unsafe_set_uint16_be(b, i, u$0), 2);
     }
      /*<<bytes.ml:770:11>>*/ if(1114111 < u$0)
       /*<<bytes.ml:777:9>>*/ throw  /*<<bytes.ml:777:9>>*/ caml_maybe_attach_backtrace
             ([0, Assert_failure, _c_], 1);
      /*<<bytes.ml:771:6>>*/  /*<<bytes.ml:771:6>>*/ var last = i + 3 | 0;
      /*<<bytes.ml:771:6>>*/ if(max < last)  /*<<bytes.ml:772:25>>*/ return 0;
      /*<<bytes.ml:773:6>>*/ var
       /*<<bytes.ml:773:6>>*/ u$1 = u$0 - 65536 | 0,
       /*<<bytes.ml:773:6>>*/ hi = 55296 | u$1 >>> 10 | 0,
       /*<<bytes.ml:773:6>>*/ lo = 56320 | u$1 & 1023;
      /*<<bytes.ml:776:6>>*/ unsafe_set_uint16_be(b, i, hi);
      /*<<bytes.ml:776:18>>*/ unsafe_set_uint16_be(b, i + 2 | 0, lo);
      /*<<bytes.ml:776:18>>*/ return 4;
    }
     /*<<bytes.ml:764:27>>*/ return  /*<<bytes.ml:764:27>>*/ caml_call1
            (Stdlib[1], cst_index_out_of_bounds$0);
    /*<<bytes.ml:777:21>>*/ }
    /*<<bytes.ml:53:12>>*/ function is_valid_utf_16be(b){
     /*<<bytes.ml:780:2>>*/ var
      /*<<bytes.ml:780:2>>*/ max =
        /*<<bytes.ml:780:2>>*/ caml_ml_bytes_length(b) - 1 | 0,
     i = 0;
     /*<<bytes.ml:781:4>>*/ for(;;){
      /*<<bytes.ml:781:4>>*/ if(max < i)  /*<<bytes.ml:782:20>>*/ return 1;
      /*<<bytes.ml:783:4>>*/ if(i === max)  /*<<bytes.ml:783:20>>*/ return 0;
      /*<<bytes.ml:784:10>>*/  /*<<bytes.ml:784:10>>*/ var
      u = unsafe_get_uint16_be(b, i);
     if(55296 <= u && 57343 >= u){
       /*<<bytes.ml:786:13>>*/ if(56319 < u)
        /*<<bytes.ml:786:27>>*/ return 0;
       /*<<bytes.ml:788:8>>*/  /*<<bytes.ml:788:8>>*/ var last = i + 3 | 0;
       /*<<bytes.ml:788:8>>*/ if(max < last)
        /*<<bytes.ml:789:27>>*/ return 0;
       /*<<bytes.ml:790:14>>*/  /*<<bytes.ml:790:14>>*/ var
       u$0 = unsafe_get_uint16_be(b, i + 2 | 0);
      if(56320 <= u$0 && 57343 >= u$0){
        /*<<bytes.ml:792:17>>*/ var
         /*<<bytes.ml:792:17>>*/ i$1 = i + 4 | 0,
        i = i$1;
       continue;
      }
       /*<<bytes.ml:791:45>>*/ return 0;
     }
      /*<<bytes.ml:785:41>>*/ var
       /*<<bytes.ml:785:41>>*/ i$0 = i + 2 | 0,
      i = i$0;
    }
    /*<<bytes.ml:794:25>>*/ }
    /*<<bytes.ml:53:12>>*/ function get_utf_16le_uchar(b, i){
     /*<<bytes.ml:799:2>>*/  /*<<bytes.ml:799:2>>*/ var
     max =  /*<<bytes.ml:799:2>>*/ caml_ml_bytes_length(b) - 1 | 0;
    if(0 <= i && max >= i){
      /*<<bytes.ml:802:2>>*/ if(i === max)
       /*<<bytes.ml:802:18>>*/ return  /*<<bytes.ml:802:18>>*/ caml_call1
              (dec_invalid, 1);
      /*<<bytes.ml:803:8>>*/  /*<<bytes.ml:803:8>>*/ var
      hi = unsafe_get_uint16_le(b, i);
     if(55296 <= hi && 57343 >= hi){
       /*<<bytes.ml:805:11>>*/ if(56319 < hi)
        /*<<bytes.ml:805:25>>*/ return  /*<<bytes.ml:805:25>>*/ caml_call1
               (dec_invalid, 2);
       /*<<bytes.ml:807:6>>*/  /*<<bytes.ml:807:6>>*/ var last = i + 3 | 0;
       /*<<bytes.ml:807:6>>*/ if(max < last)
        /*<<bytes.ml:808:25>>*/ return  /*<<bytes.ml:808:25>>*/ caml_call1
               (dec_invalid, (max - i | 0) + 1 | 0);
       /*<<bytes.ml:809:12>>*/  /*<<bytes.ml:809:12>>*/ var
       lo = unsafe_get_uint16_le(b, i + 2 | 0);
      if(56320 <= lo && 57343 >= lo){
        /*<<bytes.ml:812:10>>*/  /*<<bytes.ml:812:10>>*/ var
        u = ((hi & 1023) << 10 | lo & 1023) + 65536 | 0;
        /*<<bytes.ml:812:10>>*/ return dec_ret(4, u);
      }
       /*<<bytes.ml:810:43>>*/ return  /*<<bytes.ml:810:43>>*/ caml_call1
              (dec_invalid, 2);
     }
      /*<<bytes.ml:804:39>>*/ return dec_ret(2, hi);
    }
     /*<<bytes.ml:801:27>>*/ return  /*<<bytes.ml:801:27>>*/ caml_call1
            (Stdlib[1], cst_index_out_of_bounds$1);
    /*<<bytes.ml:813:21>>*/ }
    /*<<bytes.ml:53:12>>*/ function set_utf_16le_uchar(b, i, u){
     /*<<bytes.ml:816:2>>*/  /*<<bytes.ml:816:2>>*/ var
     max =  /*<<bytes.ml:816:2>>*/ caml_ml_bytes_length(b) - 1 | 0;
    if(0 <= i && max >= i){
      /*<<bytes.ml:819:8>>*/  /*<<bytes.ml:819:8>>*/ var
      u$0 =  /*<<bytes.ml:819:8>>*/ caml_call1(Stdlib_Uchar[10], u);
      /*<<bytes.ml:819:8>>*/ if(0 > u$0)
       /*<<bytes.ml:820:20>>*/ throw  /*<<bytes.ml:820:20>>*/ caml_maybe_attach_backtrace
             ([0, Assert_failure, _f_], 1);
      /*<<bytes.ml:821:11>>*/ if(65535 >= u$0){
       /*<<bytes.ml:822:6>>*/  /*<<bytes.ml:822:6>>*/ var last$0 = i + 1 | 0;
       /*<<bytes.ml:822:6>>*/ return max < last$0
              ? 0
              : (unsafe_set_uint16_le(b, i, u$0), 2);
     }
      /*<<bytes.ml:824:11>>*/ if(1114111 < u$0)
       /*<<bytes.ml:831:9>>*/ throw  /*<<bytes.ml:831:9>>*/ caml_maybe_attach_backtrace
             ([0, Assert_failure, _e_], 1);
      /*<<bytes.ml:825:6>>*/  /*<<bytes.ml:825:6>>*/ var last = i + 3 | 0;
      /*<<bytes.ml:825:6>>*/ if(max < last)  /*<<bytes.ml:826:25>>*/ return 0;
      /*<<bytes.ml:827:6>>*/ var
       /*<<bytes.ml:827:6>>*/ u$1 = u$0 - 65536 | 0,
       /*<<bytes.ml:827:6>>*/ hi = 55296 | u$1 >>> 10 | 0,
       /*<<bytes.ml:827:6>>*/ lo = 56320 | u$1 & 1023;
      /*<<bytes.ml:830:6>>*/ unsafe_set_uint16_le(b, i, hi);
      /*<<bytes.ml:830:18>>*/ unsafe_set_uint16_le(b, i + 2 | 0, lo);
      /*<<bytes.ml:830:18>>*/ return 4;
    }
     /*<<bytes.ml:818:27>>*/ return  /*<<bytes.ml:818:27>>*/ caml_call1
            (Stdlib[1], cst_index_out_of_bounds$2);
    /*<<bytes.ml:831:21>>*/ }
    /*<<bytes.ml:53:12>>*/ function is_valid_utf_16le(b){
     /*<<bytes.ml:834:2>>*/ var
      /*<<bytes.ml:834:2>>*/ max =
        /*<<bytes.ml:834:2>>*/ caml_ml_bytes_length(b) - 1 | 0,
     i = 0;
     /*<<bytes.ml:835:4>>*/ for(;;){
      /*<<bytes.ml:835:4>>*/ if(max < i)  /*<<bytes.ml:836:20>>*/ return 1;
      /*<<bytes.ml:837:4>>*/ if(i === max)  /*<<bytes.ml:837:20>>*/ return 0;
      /*<<bytes.ml:838:10>>*/  /*<<bytes.ml:838:10>>*/ var
      u = unsafe_get_uint16_le(b, i);
     if(55296 <= u && 57343 >= u){
       /*<<bytes.ml:840:13>>*/ if(56319 < u)
        /*<<bytes.ml:840:27>>*/ return 0;
       /*<<bytes.ml:842:8>>*/  /*<<bytes.ml:842:8>>*/ var last = i + 3 | 0;
       /*<<bytes.ml:842:8>>*/ if(max < last)
        /*<<bytes.ml:843:27>>*/ return 0;
       /*<<bytes.ml:844:14>>*/  /*<<bytes.ml:844:14>>*/ var
       u$0 = unsafe_get_uint16_le(b, i + 2 | 0);
      if(56320 <= u$0 && 57343 >= u$0){
        /*<<bytes.ml:846:17>>*/ var
         /*<<bytes.ml:846:17>>*/ i$1 = i + 4 | 0,
        i = i$1;
       continue;
      }
       /*<<bytes.ml:845:45>>*/ return 0;
     }
      /*<<bytes.ml:839:41>>*/ var
       /*<<bytes.ml:839:41>>*/ i$0 = i + 2 | 0,
      i = i$0;
    }
    /*<<bytes.ml:848:25>>*/ }
    /*<<bytes.ml:53:12>>*/  /*<<bytes.ml:53:12>>*/ var
    Stdlib_Bytes =
      [0,
       make,
       init,
       empty,
       copy,
       of_string,
       to_string,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit_string,
       concat,
       cat,
       iter,
       iteri,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       compare,
       runtime.caml_bytes_equal,
       starts_with,
       ends_with,
       caml_string_of_bytes,
       caml_bytes_of_string,
       split_on_char,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       set_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       set_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       set_utf_16le_uchar,
       is_valid_utf_16le,
       caml_bytes_get,
       get_int8,
       caml_bytes_get16,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       caml_bytes_get32,
       get_int32_be,
       get_int32_le,
       caml_bytes_get64,
       get_int64_be,
       get_int64_le,
       set_uint8,
       caml_bytes_set,
       set_uint16_ne,
       set_int16_be,
       set_int16_le,
       caml_bytes_set16,
       set_int16_be,
       set_int16_le,
       caml_bytes_set32,
       set_int32_be,
       set_int32_le,
       caml_bytes_set64,
       set_int64_be,
       set_int64_le,
       unsafe_escape];
    /*<<bytes.ml:53:12>>*/  /*<<bytes.ml:53:12>>*/ runtime.caml_register_global
    (30, Stdlib_Bytes, "Stdlib__Bytes");
    /*<<bytes.ml:53:12>>*/ return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__String
//# unitInfo: Requires: Stdlib, Stdlib__Bytes
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$0 = "",
    caml_blit_string = runtime.caml_blit_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_hash = runtime.caml_string_hash,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = cst$0,
    empty = cst$0,
    Stdlib = global_data.Stdlib,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    bts = Stdlib_Bytes[44],
    bos = Stdlib_Bytes[45],
    cst_String_rcontains_from_Byte =
      "String.rcontains_from / Bytes.rcontains_from",
    cst_String_contains_from_Bytes =
      "String.contains_from / Bytes.contains_from",
    cst_String_rindex_from_opt_Byt =
      "String.rindex_from_opt / Bytes.rindex_from_opt",
    cst_String_rindex_from_Bytes_r = "String.rindex_from / Bytes.rindex_from",
    cst_String_index_from_opt_Byte =
      "String.index_from_opt / Bytes.index_from_opt",
    cst_String_index_from_Bytes_in = "String.index_from / Bytes.index_from",
    cst_String_concat = "String.concat";
   function make(n, c){
     /*<<string.ml:36:2>>*/ return  /*<<string.ml:36:2>>*/ caml_call1
            (bts,  /*<<string.ml:36:2>>*/ caml_call2(Stdlib_Bytes[1], n, c));
    /*<<string.ml:36:19>>*/ }
   function init(n, f){
     /*<<string.ml:38:2>>*/ return  /*<<string.ml:38:2>>*/ caml_call1
            (bts,  /*<<string.ml:38:2>>*/ caml_call2(Stdlib_Bytes[2], n, f));
    /*<<string.ml:38:19>>*/ }
   var of_bytes = Stdlib_Bytes[6], to_bytes = Stdlib_Bytes[5];
   function sub(s, ofs, len){
     /*<<string.ml:43:8>>*/  /*<<string.ml:43:8>>*/ var
     _X_ =  /*<<string.ml:43:8>>*/ caml_call1(bos, s);
     /*<<string.ml:43:2>>*/ return  /*<<string.ml:43:2>>*/ caml_call1
            (bts,
              /*<<string.ml:43:2>>*/ caml_call3
              (Stdlib_Bytes[7], _X_, ofs, len));
    /*<<string.ml:43:30>>*/ }
   var blit = Stdlib_Bytes[12];
   function concat(sep, l){
     /*<<?>>*/ if(! l)  /*<<string.ml:64:10>>*/ return cst;
     /*<<string.ml:65:9>>*/ var
      /*<<string.ml:65:9>>*/ seplen =
        /*<<string.ml:65:9>>*/ caml_ml_string_length(sep),
     acc = 0,
     param = l,
      /*<<string.ml:65:9>>*/ pos$1 = 0;
    for(;;){
     if(param){
      var hd = param[1];
      if(param[2]){
        /*<<string.ml:47:26>>*/ var
        tl = param[2],
        x = (caml_ml_string_length(hd) + seplen | 0) + acc | 0,
         /*<<string.ml:47:26>>*/ acc$0 =
          acc <= x
           ? x
           :  /*<<string.ml:47:48>>*/ caml_call1(Stdlib[1], cst_String_concat),
        acc = acc$0,
        param = tl;
       continue;
      }
      var _W_ =  /*<<string.ml:51:16>>*/ caml_ml_string_length(hd) + acc | 0;
     }
     else
      var _W_ = acc;
      /*<<string.ml:67:46>>*/ var
       /*<<string.ml:67:46>>*/ dst =
         /*<<string.ml:67:46>>*/ runtime.caml_create_bytes(_W_),
      pos = pos$1,
      param$0 = l;
     for(;;){
      if(param$0){
       var hd$0 = param$0[1];
       if(param$0[2]){
        var tl$0 = param$0[2];
         /*<<string.ml:59:4>>*/  /*<<string.ml:59:4>>*/ caml_blit_string
         (hd$0, 0, dst, pos, caml_ml_string_length(hd$0));
         /*<<string.ml:60:4>>*/  /*<<string.ml:60:4>>*/ caml_blit_string
         (sep,
          0,
          dst,
          pos +  /*<<string.ml:59:4>>*/ caml_ml_string_length(hd$0) | 0,
          seplen);
         /*<<string.ml:60:4>>*/ var
          /*<<string.ml:60:4>>*/ pos$0 =
           (pos +  /*<<string.ml:60:4>>*/ caml_ml_string_length(hd$0) | 0)
           + seplen
           | 0,
         pos = pos$0,
         param$0 = tl$0;
        continue;
       }
        /*<<string.ml:57:4>>*/  /*<<string.ml:57:4>>*/ caml_blit_string
        (hd$0,
         0,
         dst,
         pos,
          /*<<string.ml:57:4>>*/ caml_ml_string_length(hd$0));
      }
      return caml_call1(bts, dst);
     }
    }
   }
   var cat = Stdlib[28];
   function iter(f, s){
     /*<<string.ml:74:2>>*/ var
      /*<<string.ml:74:2>>*/ _U_ =
        /*<<string.ml:74:2>>*/ caml_ml_string_length(s) - 1 | 0,
      /*<<string.ml:74:2>>*/ _T_ = 0;
     /*<<string.ml:74:2>>*/ if(_U_ >= 0){
     var i = _T_;
      /*<<string.ml:74:31>>*/ for(;;){
       /*<<string.ml:74:31>>*/  /*<<string.ml:74:31>>*/ caml_call1
       (f,  /*<<string.ml:74:31>>*/ caml_string_unsafe_get(s, i));
       /*<<string.ml:74:31>>*/  /*<<string.ml:74:31>>*/ var _V_ = i + 1 | 0;
       /*<<string.ml:74:31>>*/ if(_U_ !== i){var i = _V_; continue;}
      break;
     }
    }
    return 0;
    /*<<string.ml:74:54>>*/ }
   function iteri(f, s){
     /*<<string.ml:78:2>>*/ var
      /*<<string.ml:78:2>>*/ _R_ =
        /*<<string.ml:78:2>>*/ caml_ml_string_length(s) - 1 | 0,
      /*<<string.ml:78:2>>*/ _Q_ = 0;
     /*<<string.ml:78:2>>*/ if(_R_ >= 0){
     var i = _Q_;
      /*<<string.ml:78:31>>*/ for(;;){
       /*<<string.ml:78:31>>*/  /*<<string.ml:78:31>>*/ caml_call2
       (f, i,  /*<<string.ml:78:31>>*/ caml_string_unsafe_get(s, i));
       /*<<string.ml:78:31>>*/  /*<<string.ml:78:31>>*/ var _S_ = i + 1 | 0;
       /*<<string.ml:78:31>>*/ if(_R_ !== i){var i = _S_; continue;}
      break;
     }
    }
    return 0;
    /*<<string.ml:78:56>>*/ }
   function map(f, s){
     /*<<string.ml:81:10>>*/  /*<<string.ml:81:10>>*/ var
     _P_ =  /*<<string.ml:81:10>>*/ caml_call1(bos, s);
     /*<<string.ml:81:2>>*/ return  /*<<string.ml:81:2>>*/ caml_call1
            (bts,
              /*<<string.ml:81:2>>*/ caml_call2(Stdlib_Bytes[17], f, _P_));
    /*<<string.ml:81:24>>*/ }
   function mapi(f, s){
     /*<<string.ml:83:11>>*/  /*<<string.ml:83:11>>*/ var
     _O_ =  /*<<string.ml:83:11>>*/ caml_call1(bos, s);
     /*<<string.ml:83:2>>*/ return  /*<<string.ml:83:2>>*/ caml_call1
            (bts,
              /*<<string.ml:83:2>>*/ caml_call2(Stdlib_Bytes[18], f, _O_));
    /*<<string.ml:83:25>>*/ }
   function fold_right(f, x, a){
     /*<<string.ml:85:17>>*/  /*<<string.ml:85:17>>*/ var
     _N_ =  /*<<string.ml:85:17>>*/ caml_call1(bos, x);
     /*<<string.ml:85:17>>*/ return  /*<<string.ml:85:17>>*/ caml_call3
            (Stdlib_Bytes[20], f, _N_, a);
    /*<<string.ml:85:26>>*/ }
   function fold_left(f, a, x){
     /*<<string.ml:87:18>>*/  /*<<string.ml:87:18>>*/ var
     _M_ =  /*<<string.ml:87:18>>*/ caml_call1(bos, x);
     /*<<string.ml:87:18>>*/ return  /*<<string.ml:87:18>>*/ caml_call3
            (Stdlib_Bytes[19], f, a, _M_);
    /*<<string.ml:87:25>>*/ }
   function exists(f, s){
     /*<<string.ml:89:13>>*/  /*<<string.ml:89:13>>*/ var
     _L_ =  /*<<string.ml:89:13>>*/ caml_call1(bos, s);
     /*<<string.ml:89:13>>*/ return  /*<<string.ml:89:13>>*/ caml_call2
            (Stdlib_Bytes[22], f, _L_);
    /*<<string.ml:89:20>>*/ }
   function for_all(f, s){
     /*<<string.ml:91:14>>*/  /*<<string.ml:91:14>>*/ var
     _K_ =  /*<<string.ml:91:14>>*/ caml_call1(bos, s);
     /*<<string.ml:91:14>>*/ return  /*<<string.ml:91:14>>*/ caml_call2
            (Stdlib_Bytes[21], f, _K_);
    /*<<string.ml:91:21>>*/ }
   function is_space(param){
     /*<<string.ml:97:15>>*/ var
      /*<<string.ml:97:15>>*/ _J_ = param - 9 | 0,
     switch$0 = 0;
     /*<<string.ml:97:15>>*/ if(4 < _J_ >>> 0){
     if(23 === _J_) switch$0 = 1;
    }
    else if(2 !== _J_) switch$0 = 1;
    return switch$0 ? 1 : 0;
    /*<<string.ml:99:14>>*/ }
   function trim(s){
     /*<<string.ml:102:5>>*/ if
     ( /*<<string.ml:102:5>>*/ caml_string_equal(s, cst$0))
      /*<<string.ml:102:17>>*/ return s;
     /*<<string.ml:103:39>>*/ if
     (!
      is_space( /*<<string.ml:103:7>>*/ caml_string_unsafe_get(s, 0))
      &&
       !
       is_space(caml_string_unsafe_get(s, caml_ml_string_length(s) - 1 | 0)))
      /*<<string.ml:105:7>>*/ return s;
     /*<<string.ml:104:21>>*/  /*<<string.ml:104:21>>*/ var
     _I_ =  /*<<string.ml:104:21>>*/ caml_call1(bos, s);
     /*<<string.ml:104:13>>*/ return  /*<<string.ml:104:13>>*/ caml_call1
            (bts,  /*<<string.ml:104:13>>*/ caml_call1(Stdlib_Bytes[23], _I_));
    /*<<string.ml:105:8>>*/ }
   function escaped(s){
     /*<<string.ml:108:10>>*/  /*<<string.ml:108:10>>*/ var
     b =  /*<<string.ml:108:10>>*/ caml_call1(bos, s);
     /*<<string.ml:111:6>>*/ return  /*<<string.ml:111:6>>*/ caml_call1
            (bts,  /*<<string.ml:111:6>>*/ caml_call1(Stdlib_Bytes[87], b));
    /*<<string.ml:111:25>>*/ }
   function index_rec(s, lim, i, c){
    var i$0 = i;
     /*<<string.ml:115:2>>*/ for(;;){
      /*<<string.ml:115:2>>*/ if(lim <= i$0)
       /*<<string.ml:115:19>>*/ throw  /*<<string.ml:115:19>>*/ caml_maybe_attach_backtrace
             (Stdlib[8], 1);
      /*<<string.ml:116:2>>*/ if
      ( /*<<string.ml:116:2>>*/ caml_string_unsafe_get(s, i$0) === c)
       /*<<string.ml:116:29>>*/ return i$0;
      /*<<string.ml:116:36>>*/ var
       /*<<string.ml:116:36>>*/ i$1 = i$0 + 1 | 0,
      i$0 = i$1;
    }
    /*<<string.ml:116:61>>*/ }
   function index(s, c){
     /*<<string.ml:119:16>>*/ return index_rec
            (s,  /*<<string.ml:119:16>>*/ caml_ml_string_length(s), 0, c);
    /*<<string.ml:119:42>>*/ }
   function index_rec_opt(s, lim, i, c){
    var i$0 = i;
     /*<<string.ml:123:2>>*/ for(;;){
      /*<<string.ml:123:2>>*/ if(lim <= i$0)
       /*<<string.ml:123:19>>*/ return 0;
      /*<<string.ml:124:2>>*/ if
      ( /*<<string.ml:124:2>>*/ caml_string_unsafe_get(s, i$0) === c)
       /*<<string.ml:124:29>>*/ return [0, i$0];
      /*<<string.ml:124:41>>*/ var
       /*<<string.ml:124:41>>*/ i$1 = i$0 + 1 | 0,
      i$0 = i$1;
    }
    /*<<string.ml:124:70>>*/ }
   function index_opt(s, c){
     /*<<string.ml:127:20>>*/ return index_rec_opt
            (s,  /*<<string.ml:127:20>>*/ caml_ml_string_length(s), 0, c);
    /*<<string.ml:127:50>>*/ }
   function index_from(s, i, c){
     /*<<string.ml:131:2>>*/  /*<<string.ml:131:2>>*/ var
     l =  /*<<string.ml:131:2>>*/ caml_ml_string_length(s);
    if(0 <= i && l >= i)
      /*<<string.ml:133:4>>*/ return index_rec(s, l, i, c);
     /*<<string.ml:132:25>>*/ return  /*<<string.ml:132:25>>*/ caml_call1
            (Stdlib[1], cst_String_index_from_Bytes_in);
    /*<<string.ml:133:21>>*/ }
   function index_from_opt(s, i, c){
     /*<<string.ml:137:2>>*/  /*<<string.ml:137:2>>*/ var
     l =  /*<<string.ml:137:2>>*/ caml_ml_string_length(s);
    if(0 <= i && l >= i)
      /*<<string.ml:141:4>>*/ return index_rec_opt(s, l, i, c);
     /*<<string.ml:139:4>>*/ return  /*<<string.ml:139:4>>*/ caml_call1
            (Stdlib[1], cst_String_index_from_opt_Byte);
    /*<<string.ml:141:25>>*/ }
   function rindex_rec(s, i, c){
    var i$0 = i;
     /*<<string.ml:145:2>>*/ for(;;){
      /*<<string.ml:145:2>>*/ if(0 > i$0)
       /*<<string.ml:145:16>>*/ throw  /*<<string.ml:145:16>>*/ caml_maybe_attach_backtrace
             (Stdlib[8], 1);
      /*<<string.ml:146:2>>*/ if
      ( /*<<string.ml:146:2>>*/ caml_string_unsafe_get(s, i$0) === c)
       /*<<string.ml:146:29>>*/ return i$0;
      /*<<string.ml:146:36>>*/ var
       /*<<string.ml:146:36>>*/ i$1 = i$0 - 1 | 0,
      i$0 = i$1;
    }
    /*<<string.ml:146:58>>*/ }
   function rindex(s, c){
     /*<<string.ml:149:17>>*/ return rindex_rec
            (s,  /*<<string.ml:149:17>>*/ caml_ml_string_length(s) - 1 | 0, c);
    /*<<string.ml:149:46>>*/ }
   function rindex_from(s, i, c){
     /*<<?>>*/ if(-1 <= i && caml_ml_string_length(s) > i)
      /*<<string.ml:156:4>>*/ return rindex_rec(s, i, c);
     /*<<string.ml:154:4>>*/ return  /*<<string.ml:154:4>>*/ caml_call1
            (Stdlib[1], cst_String_rindex_from_Bytes_r);
    /*<<string.ml:156:20>>*/ }
   function rindex_rec_opt(s, i, c){
    var i$0 = i;
     /*<<string.ml:160:2>>*/ for(;;){
      /*<<string.ml:160:2>>*/ if(0 > i$0)  /*<<string.ml:160:16>>*/ return 0;
      /*<<string.ml:161:2>>*/ if
      ( /*<<string.ml:161:2>>*/ caml_string_unsafe_get(s, i$0) === c)
       /*<<string.ml:161:29>>*/ return [0, i$0];
      /*<<string.ml:161:41>>*/ var
       /*<<string.ml:161:41>>*/ i$1 = i$0 - 1 | 0,
      i$0 = i$1;
    }
    /*<<string.ml:161:67>>*/ }
   function rindex_opt(s, c){
     /*<<string.ml:164:21>>*/ return rindex_rec_opt
            (s,  /*<<string.ml:164:21>>*/ caml_ml_string_length(s) - 1 | 0, c);
    /*<<string.ml:164:54>>*/ }
   function rindex_from_opt(s, i, c){
     /*<<?>>*/ if(-1 <= i && caml_ml_string_length(s) > i)
      /*<<string.ml:171:4>>*/ return rindex_rec_opt(s, i, c);
     /*<<string.ml:169:4>>*/ return  /*<<string.ml:169:4>>*/ caml_call1
            (Stdlib[1], cst_String_rindex_from_opt_Byt);
    /*<<string.ml:171:24>>*/ }
   function contains_from(s, i, c){
     /*<<string.ml:175:2>>*/  /*<<string.ml:175:2>>*/ var
     l =  /*<<string.ml:175:2>>*/ caml_ml_string_length(s);
    if(0 <= i && l >= i)
     try{
       /*<<string.ml:179:15>>*/ index_rec(s, l, i, c);
       /*<<string.ml:179:15>>*/  /*<<string.ml:179:15>>*/ var _G_ = 1;
      return _G_;
     }
     catch(_H_){
      var _F_ = caml_wrap_exception(_H_);
      if(_F_ === Stdlib[8])  /*<<string.ml:179:59>>*/ return 0;
      throw caml_maybe_attach_backtrace(_F_, 0);
     }
     /*<<string.ml:177:4>>*/ return  /*<<string.ml:177:4>>*/ caml_call1
            (Stdlib[1], cst_String_contains_from_Bytes);
    /*<<string.ml:179:64>>*/ }
   function contains(s, c){
     /*<<string.ml:182:19>>*/ return contains_from(s, 0, c);
    /*<<string.ml:182:38>>*/ }
   function rcontains_from(s, i, c){
     /*<<?>>*/ if(0 <= i && caml_ml_string_length(s) > i)
     try{
       /*<<string.ml:189:15>>*/ rindex_rec(s, i, c);
       /*<<string.ml:189:15>>*/  /*<<string.ml:189:15>>*/ var _D_ = 1;
      return _D_;
     }
     catch(_E_){
      var _C_ = caml_wrap_exception(_E_);
      if(_C_ === Stdlib[8])  /*<<string.ml:189:58>>*/ return 0;
      throw caml_maybe_attach_backtrace(_C_, 0);
     }
     /*<<string.ml:187:4>>*/ return  /*<<string.ml:187:4>>*/ caml_call1
            (Stdlib[1], cst_String_rcontains_from_Byte);
    /*<<string.ml:189:63>>*/ }
   function uppercase_ascii(s){
     /*<<string.ml:192:20>>*/  /*<<string.ml:192:20>>*/ var
     _B_ =  /*<<string.ml:192:20>>*/ caml_call1(bos, s);
     /*<<string.ml:192:2>>*/ return  /*<<string.ml:192:2>>*/ caml_call1
            (bts,  /*<<string.ml:192:2>>*/ caml_call1(Stdlib_Bytes[36], _B_));
    /*<<string.ml:192:34>>*/ }
   function lowercase_ascii(s){
     /*<<string.ml:194:20>>*/  /*<<string.ml:194:20>>*/ var
     _A_ =  /*<<string.ml:194:20>>*/ caml_call1(bos, s);
     /*<<string.ml:194:2>>*/ return  /*<<string.ml:194:2>>*/ caml_call1
            (bts,  /*<<string.ml:194:2>>*/ caml_call1(Stdlib_Bytes[37], _A_));
    /*<<string.ml:194:34>>*/ }
   function capitalize_ascii(s){
     /*<<string.ml:196:21>>*/  /*<<string.ml:196:21>>*/ var
     _z_ =  /*<<string.ml:196:21>>*/ caml_call1(bos, s);
     /*<<string.ml:196:2>>*/ return  /*<<string.ml:196:2>>*/ caml_call1
            (bts,  /*<<string.ml:196:2>>*/ caml_call1(Stdlib_Bytes[38], _z_));
    /*<<string.ml:196:35>>*/ }
   function uncapitalize_ascii(s){
     /*<<string.ml:198:23>>*/  /*<<string.ml:198:23>>*/ var
     _y_ =  /*<<string.ml:198:23>>*/ caml_call1(bos, s);
     /*<<string.ml:198:2>>*/ return  /*<<string.ml:198:2>>*/ caml_call1
            (bts,  /*<<string.ml:198:2>>*/ caml_call1(Stdlib_Bytes[39], _y_));
    /*<<string.ml:198:37>>*/ }
   function starts_with(prefix, s){
     /*<<string.ml:202:2>>*/ var
      /*<<string.ml:202:2>>*/ len_s =
        /*<<string.ml:202:2>>*/ caml_ml_string_length(s),
      /*<<string.ml:202:2>>*/ len_pre =
        /*<<string.ml:202:2>>*/ caml_ml_string_length(prefix),
      /*<<string.ml:202:2>>*/ _x_ = len_pre <= len_s ? 1 : 0;
     /*<<string.ml:202:2>>*/ if(! _x_)  /*<<string.ml:198:2>>*/ return _x_;
    var i = 0;
     /*<<string.ml:205:4>>*/ for(;;){
      /*<<string.ml:205:4>>*/ if(i === len_pre)
       /*<<string.ml:205:24>>*/ return 1;
      /*<<string.ml:206:9>>*/ if
      ( /*<<string.ml:206:9>>*/ caml_string_unsafe_get(s, i)
       !==  /*<<string.ml:206:9>>*/ caml_string_unsafe_get(prefix, i))
       /*<<string.ml:206:55>>*/ return 0;
      /*<<string.ml:207:9>>*/ var
       /*<<string.ml:207:9>>*/ i$0 = i + 1 | 0,
      i = i$0;
    }
    /*<<string.ml:208:30>>*/ }
   function ends_with(suffix, s){
     /*<<string.ml:212:2>>*/ var
      /*<<string.ml:212:2>>*/ len_s =
        /*<<string.ml:212:2>>*/ caml_ml_string_length(s),
      /*<<string.ml:212:2>>*/ len_suf =
        /*<<string.ml:212:2>>*/ caml_ml_string_length(suffix),
      /*<<string.ml:212:2>>*/ diff = len_s - len_suf | 0,
      /*<<string.ml:212:2>>*/ _w_ = 0 <= diff ? 1 : 0;
     /*<<string.ml:212:2>>*/ if(! _w_)  /*<<string.ml:205:4>>*/ return _w_;
    var i = 0;
     /*<<string.ml:216:4>>*/ for(;;){
      /*<<string.ml:216:4>>*/ if(i === len_suf)
       /*<<string.ml:216:24>>*/ return 1;
      /*<<string.ml:217:9>>*/ if
      ( /*<<string.ml:217:9>>*/ caml_string_unsafe_get(s, diff + i | 0)
       !==  /*<<string.ml:217:9>>*/ caml_string_unsafe_get(suffix, i))
       /*<<string.ml:217:64>>*/ return 0;
      /*<<string.ml:218:9>>*/ var
       /*<<string.ml:218:9>>*/ i$0 = i + 1 | 0,
      i = i$0;
    }
    /*<<string.ml:219:23>>*/ }
   function hash(x){
     /*<<string.ml:222:13>>*/ return  /*<<string.ml:222:13>>*/ caml_string_hash
            (0, x);
    /*<<string.ml:222:28>>*/ }
   function split_on_char(sep, s){
     /*<<string.ml:226:2>>*/ var
      /*<<string.ml:226:2>>*/ r = [0, 0],
      /*<<string.ml:226:2>>*/ j =
       [0,  /*<<string.ml:226:2>>*/ caml_ml_string_length(s)],
      /*<<string.ml:226:2>>*/ _s_ =
        /*<<string.ml:226:2>>*/ caml_ml_string_length(s) - 1 | 0;
     /*<<string.ml:226:2>>*/ if(_s_ >= 0){
     var i = _s_;
      /*<<string.ml:229:4>>*/ for(;;){
       /*<<string.ml:229:4>>*/ if
       ( /*<<string.ml:229:4>>*/ caml_string_unsafe_get(s, i) === sep){
        /*<<string.ml:229:33>>*/  /*<<string.ml:229:33>>*/ var _u_ = r[1];
        /*<<string.ml:230:11>>*/ r[1] =
        [0, sub(s, i + 1 | 0, (j[1] - i | 0) - 1 | 0), _u_];
        /*<<string.ml:230:11>>*/ j[1] = i;
      }
      var _v_ = i - 1 | 0;
      if(0 !== i){var i = _v_; continue;}
      break;
     }
    }
     /*<<string.ml:234:2>>*/  /*<<string.ml:234:2>>*/ var _t_ = r[1];
     /*<<string.ml:234:2>>*/ return [0, sub(s, 0, j[1]), _t_];
    /*<<string.ml:234:18>>*/ }
   function compare(x, y){
     /*<<string.ml:238:28>>*/ return  /*<<string.ml:238:28>>*/ runtime.caml_string_compare
            (x, y);
    /*<<string.ml:238:46>>*/ }
   function to_seq(s){
     /*<<string.ml:243:15>>*/  /*<<string.ml:243:15>>*/ var
     _r_ =  /*<<string.ml:243:15>>*/ caml_call1(bos, s);
     /*<<string.ml:243:15>>*/ return  /*<<string.ml:243:15>>*/ caml_call1
            (Stdlib_Bytes[47], _r_);
    /*<<string.ml:243:32>>*/ }
   function to_seqi(s){
     /*<<string.ml:245:16>>*/  /*<<string.ml:245:16>>*/ var
     _q_ =  /*<<string.ml:245:16>>*/ caml_call1(bos, s);
     /*<<string.ml:245:16>>*/ return  /*<<string.ml:245:16>>*/ caml_call1
            (Stdlib_Bytes[48], _q_);
    /*<<string.ml:245:34>>*/ }
   function of_seq(g){
     /*<<string.ml:247:15>>*/ return  /*<<string.ml:247:15>>*/ caml_call1
            (bts,  /*<<string.ml:247:15>>*/ caml_call1(Stdlib_Bytes[49], g));
    /*<<string.ml:247:32>>*/ }
   function get_utf_8_uchar(s, i){
     /*<<string.ml:251:44>>*/  /*<<string.ml:251:44>>*/ var
     _p_ =  /*<<string.ml:251:44>>*/ caml_call1(bos, s);
     /*<<string.ml:251:44>>*/ return  /*<<string.ml:251:44>>*/ caml_call2
            (Stdlib_Bytes[50], _p_, i);
    /*<<string.ml:251:53>>*/ }
   function is_valid_utf_8(s){
     /*<<string.ml:252:40>>*/  /*<<string.ml:252:40>>*/ var
     _o_ =  /*<<string.ml:252:40>>*/ caml_call1(bos, s);
     /*<<string.ml:252:40>>*/ return  /*<<string.ml:252:40>>*/ caml_call1
            (Stdlib_Bytes[52], _o_);
    /*<<string.ml:252:47>>*/ }
   function get_utf_16be_uchar(s, i){
     /*<<string.ml:254:50>>*/  /*<<string.ml:254:50>>*/ var
     _n_ =  /*<<string.ml:254:50>>*/ caml_call1(bos, s);
     /*<<string.ml:254:50>>*/ return  /*<<string.ml:254:50>>*/ caml_call2
            (Stdlib_Bytes[53], _n_, i);
    /*<<string.ml:254:59>>*/ }
   function is_valid_utf_16be(s){
     /*<<string.ml:255:46>>*/  /*<<string.ml:255:46>>*/ var
     _m_ =  /*<<string.ml:255:46>>*/ caml_call1(bos, s);
     /*<<string.ml:255:46>>*/ return  /*<<string.ml:255:46>>*/ caml_call1
            (Stdlib_Bytes[55], _m_);
    /*<<string.ml:255:53>>*/ }
   function get_utf_16le_uchar(s, i){
     /*<<string.ml:257:50>>*/  /*<<string.ml:257:50>>*/ var
     _l_ =  /*<<string.ml:257:50>>*/ caml_call1(bos, s);
     /*<<string.ml:257:50>>*/ return  /*<<string.ml:257:50>>*/ caml_call2
            (Stdlib_Bytes[56], _l_, i);
    /*<<string.ml:257:59>>*/ }
   function is_valid_utf_16le(s){
     /*<<string.ml:258:46>>*/  /*<<string.ml:258:46>>*/ var
     _k_ =  /*<<string.ml:258:46>>*/ caml_call1(bos, s);
     /*<<string.ml:258:46>>*/ return  /*<<string.ml:258:46>>*/ caml_call1
            (Stdlib_Bytes[58], _k_);
    /*<<string.ml:258:53>>*/ }
   function get_int8(s, i){
     /*<<string.ml:267:30>>*/  /*<<string.ml:267:30>>*/ var
     _j_ =  /*<<string.ml:267:30>>*/ caml_call1(bos, s);
     /*<<string.ml:267:30>>*/ return  /*<<string.ml:267:30>>*/ caml_call2
            (Stdlib_Bytes[60], _j_, i);
    /*<<string.ml:267:39>>*/ }
   function get_uint16_le(s, i){
     /*<<string.ml:268:40>>*/  /*<<string.ml:268:40>>*/ var
     _i_ =  /*<<string.ml:268:40>>*/ caml_call1(bos, s);
     /*<<string.ml:268:40>>*/ return  /*<<string.ml:268:40>>*/ caml_call2
            (Stdlib_Bytes[63], _i_, i);
    /*<<string.ml:268:49>>*/ }
   function get_uint16_be(s, i){
     /*<<string.ml:269:40>>*/  /*<<string.ml:269:40>>*/ var
     _h_ =  /*<<string.ml:269:40>>*/ caml_call1(bos, s);
     /*<<string.ml:269:40>>*/ return  /*<<string.ml:269:40>>*/ caml_call2
            (Stdlib_Bytes[62], _h_, i);
    /*<<string.ml:269:49>>*/ }
   function get_int16_ne(s, i){
     /*<<string.ml:270:38>>*/  /*<<string.ml:270:38>>*/ var
     _g_ =  /*<<string.ml:270:38>>*/ caml_call1(bos, s);
     /*<<string.ml:270:38>>*/ return  /*<<string.ml:270:38>>*/ caml_call2
            (Stdlib_Bytes[64], _g_, i);
    /*<<string.ml:270:47>>*/ }
   function get_int16_le(s, i){
     /*<<string.ml:271:38>>*/  /*<<string.ml:271:38>>*/ var
     _f_ =  /*<<string.ml:271:38>>*/ caml_call1(bos, s);
     /*<<string.ml:271:38>>*/ return  /*<<string.ml:271:38>>*/ caml_call2
            (Stdlib_Bytes[66], _f_, i);
    /*<<string.ml:271:47>>*/ }
   function get_int16_be(s, i){
     /*<<string.ml:272:38>>*/  /*<<string.ml:272:38>>*/ var
     _e_ =  /*<<string.ml:272:38>>*/ caml_call1(bos, s);
     /*<<string.ml:272:38>>*/ return  /*<<string.ml:272:38>>*/ caml_call2
            (Stdlib_Bytes[65], _e_, i);
    /*<<string.ml:272:47>>*/ }
   function get_int32_le(s, i){
     /*<<string.ml:273:38>>*/  /*<<string.ml:273:38>>*/ var
     _d_ =  /*<<string.ml:273:38>>*/ caml_call1(bos, s);
     /*<<string.ml:273:38>>*/ return  /*<<string.ml:273:38>>*/ caml_call2
            (Stdlib_Bytes[69], _d_, i);
    /*<<string.ml:273:47>>*/ }
   function get_int32_be(s, i){
     /*<<string.ml:274:38>>*/  /*<<string.ml:274:38>>*/ var
     _c_ =  /*<<string.ml:274:38>>*/ caml_call1(bos, s);
     /*<<string.ml:274:38>>*/ return  /*<<string.ml:274:38>>*/ caml_call2
            (Stdlib_Bytes[68], _c_, i);
    /*<<string.ml:274:47>>*/ }
   function get_int64_le(s, i){
     /*<<string.ml:275:38>>*/  /*<<string.ml:275:38>>*/ var
     _b_ =  /*<<string.ml:275:38>>*/ caml_call1(bos, s);
     /*<<string.ml:275:38>>*/ return  /*<<string.ml:275:38>>*/ caml_call2
            (Stdlib_Bytes[72], _b_, i);
    /*<<string.ml:275:47>>*/ }
   function get_int64_be(s, i){
     /*<<string.ml:276:38>>*/  /*<<string.ml:276:38>>*/ var
     _a_ =  /*<<string.ml:276:38>>*/ caml_call1(bos, s);
     /*<<string.ml:276:38>>*/ return  /*<<string.ml:276:38>>*/ caml_call2
            (Stdlib_Bytes[71], _a_, i);
    /*<<string.ml:276:47>>*/ }
   var
    Stdlib_String =
      [0,
       make,
       init,
       empty,
       of_bytes,
       to_bytes,
       concat,
       cat,
       caml_string_equal,
       compare,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       is_valid_utf_16le,
       blit,
       runtime.caml_string_get,
       get_int8,
       runtime.caml_string_get16,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       runtime.caml_string_get32,
       hash,
       caml_string_hash,
       get_int32_be,
       get_int32_le,
       runtime.caml_string_get64,
       get_int64_be,
       get_int64_le];
   runtime.caml_register_global(12, Stdlib_String, "Stdlib__String");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Unit
(function(globalThis){
   "use strict";
    /*<<unit.ml:20:19>>*/ var
    runtime = globalThis.jsoo_runtime,
     /*<<unit.ml:20:19>>*/ cst = "()";
   function equal(param, _b_){
     /*<<unit.ml:18:18>>*/ return 1;
    /*<<unit.ml:18:22>>*/ }
   function compare(param, _a_){
     /*<<unit.ml:19:20>>*/ return 0;
    /*<<unit.ml:19:21>>*/ }
   function to_string(param){
     /*<<unit.ml:20:19>>*/ return cst;
    /*<<unit.ml:20:23>>*/ }
   var Stdlib_Unit = [0, equal, compare, to_string];
   runtime.caml_register_global(1, Stdlib_Unit, "Stdlib__Unit");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Marshal
//# unitInfo: Requires: Stdlib, Stdlib__Bytes
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Marshal_from_bytes$1 = "Marshal.from_bytes",
    caml_marshal_data_size = runtime.caml_marshal_data_size,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib = global_data.Stdlib,
    cst_Marshal_from_bytes = cst_Marshal_from_bytes$1,
    cst_Marshal_from_bytes$0 = cst_Marshal_from_bytes$1,
    cst_Marshal_data_size = "Marshal.data_size",
    cst_Marshal_to_buffer_substrin =
      "Marshal.to_buffer: substring out of bounds";
   function to_buffer(buff, ofs, len, v, flags){
     /*<<?>>*/ if
     (0 <= ofs && 0 <= len && (caml_ml_bytes_length(buff) - len | 0) >= ofs)
      /*<<marshal.ml:35:7>>*/ return  /*<<marshal.ml:35:7>>*/ runtime.caml_output_value_to_buffer
             (buff, ofs, len, v, flags);
     /*<<marshal.ml:34:7>>*/ return  /*<<marshal.ml:34:7>>*/ caml_call1
            (Stdlib[1], cst_Marshal_to_buffer_substrin);
    /*<<marshal.ml:35:44>>*/ }
   var header_size = 20;
   function data_size(buff, ofs){
     /*<<?>>*/ if(0 <= ofs && (caml_ml_bytes_length(buff) - 20 | 0) >= ofs)
      /*<<marshal.ml:51:7>>*/ return  /*<<marshal.ml:51:7>>*/ caml_marshal_data_size
             (buff, ofs);
     /*<<marshal.ml:50:7>>*/ return  /*<<marshal.ml:50:7>>*/ caml_call1
            (Stdlib[1], cst_Marshal_data_size);
    /*<<marshal.ml:51:32>>*/ }
   function total_size(buff, ofs){
     /*<<marshal.ml:52:40>>*/ return 20 + data_size(buff, ofs) | 0;
    /*<<marshal.ml:52:58>>*/ }
   function from_bytes(buff, ofs){
     /*<<?>>*/ if(0 <= ofs && (caml_ml_bytes_length(buff) - 20 | 0) >= ofs){
      /*<<marshal.ml:58:14>>*/  /*<<marshal.ml:58:14>>*/ var
      len =  /*<<marshal.ml:58:14>>*/ caml_marshal_data_size(buff, ofs);
      /*<<marshal.ml:58:14>>*/ return ( /*<<marshal.ml:58:14>>*/ caml_ml_bytes_length
              (buff)
             - (20 + len | 0)
             | 0)
             < ofs
             ?  /*<<marshal.ml:60:9>>*/ caml_call1
               (Stdlib[1], cst_Marshal_from_bytes$0)
             :  /*<<marshal.ml:61:9>>*/ runtime.caml_input_value_from_bytes
               (buff, ofs);
    }
     /*<<marshal.ml:56:7>>*/ return  /*<<marshal.ml:56:7>>*/ caml_call1
            (Stdlib[1], cst_Marshal_from_bytes);
    /*<<marshal.ml:62:5>>*/ }
   function from_string(buff, ofs){
     /*<<marshal.ml:67:13>>*/ return from_bytes
            ( /*<<marshal.ml:67:13>>*/ caml_call1(Stdlib_Bytes[45], buff),
             ofs);
    /*<<marshal.ml:67:46>>*/ }
   var
    Stdlib_Marshal =
      [0,
       runtime.caml_output_value,
       to_buffer,
       runtime.caml_input_value,
       from_bytes,
       from_string,
       header_size,
       data_size,
       total_size];
   runtime.caml_register_global(6, Stdlib_Marshal, "Stdlib__Marshal");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Array
//# unitInfo: Requires: Assert_failure, Stdlib, Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_array_sub = runtime.caml_array_sub,
    caml_check_bound = runtime.caml_check_bound,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<array.ml:37:20>>*/ var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Seq = global_data.Stdlib__Seq,
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
     /*<<array.ml:37:20>>*/ Floatarray = [0],
    _a_ = [0, "array.ml", 319, 4],
    cst_Array_combine = "Array.combine",
    cst_Array_exists2 = "Array.exists2",
    cst_Array_for_all2 = "Array.for_all2",
    cst_Array_map2_arrays_must_hav =
      "Array.map2: arrays must have the same length",
    cst_Array_iter2_arrays_must_ha =
      "Array.iter2: arrays must have the same length",
    cst_Array_blit = "Array.blit",
    cst_Array_fill = "Array.fill",
    cst_Array_sub = "Array.sub",
    cst_Array_init = "Array.init",
    cst_Stdlib_Array_Bottom = "Stdlib.Array.Bottom";
    /*<<array.ml:37:20>>*/ function init(l, f){
     /*<<array.ml:48:2>>*/ if(0 === l)  /*<<array.ml:48:16>>*/ return [0];
     /*<<array.ml:49:2>>*/ if(0 > l)
      /*<<array.ml:49:16>>*/ return  /*<<array.ml:49:16>>*/ caml_call1
             (Stdlib[1], cst_Array_init);
     /*<<array.ml:53:13>>*/ var
      /*<<array.ml:53:13>>*/ res =
        /*<<array.ml:53:13>>*/ caml_make_vect
        (l,  /*<<array.ml:53:22>>*/ caml_call1(f, 0)),
      /*<<array.ml:53:13>>*/ _au_ = l - 1 | 0,
      /*<<array.ml:53:13>>*/ _at_ = 1;
     /*<<array.ml:53:13>>*/ if(_au_ >= 1){
     var i = _at_;
      /*<<array.ml:55:5>>*/ for(;;){
       /*<<array.ml:55:5>>*/ res[1 + i] =
        /*<<array.ml:55:22>>*/ caml_call1(f, i);
       /*<<array.ml:55:5>>*/  /*<<array.ml:55:5>>*/ var _av_ = i + 1 | 0;
       /*<<array.ml:55:5>>*/ if(_au_ !== i){var i = _av_; continue;}
      break;
     }
    }
     /*<<array.ml:57:3>>*/ return res;
    /*<<array.ml:57:6>>*/ }
    /*<<array.ml:37:20>>*/ function make_matrix(sx, sy, init){
     /*<<array.ml:60:12>>*/ var
      /*<<array.ml:60:12>>*/ res =
        /*<<array.ml:60:12>>*/ caml_make_vect(sx, [0]),
      /*<<array.ml:60:12>>*/ _ar_ = sx - 1 | 0,
      /*<<array.ml:60:12>>*/ _aq_ = 0;
     /*<<array.ml:60:12>>*/ if(_ar_ >= 0){
     var x = _aq_;
      /*<<array.ml:62:4>>*/ for(;;){
       /*<<array.ml:62:21>>*/ res[1 + x] =
        /*<<array.ml:62:21>>*/ caml_make_vect(sy, init);
       /*<<array.ml:62:21>>*/  /*<<array.ml:62:21>>*/ var _as_ = x + 1 | 0;
       /*<<array.ml:62:21>>*/ if(_ar_ !== x){var x = _as_; continue;}
      break;
     }
    }
     /*<<array.ml:64:2>>*/ return res;
    /*<<array.ml:64:5>>*/ }
    /*<<array.ml:37:20>>*/ function copy(a){
     /*<<array.ml:67:2>>*/  /*<<array.ml:67:2>>*/ var l = a.length - 1;
     /*<<array.ml:67:2>>*/ return 0 === l
            ? [0]
            :  /*<<array.ml:67:46>>*/ caml_array_sub(a, 0, l);
    /*<<array.ml:67:62>>*/ }
    /*<<array.ml:37:20>>*/ function append(a1, a2){
     /*<<array.ml:70:2>>*/  /*<<array.ml:70:2>>*/ var l1 = a1.length - 1;
     /*<<array.ml:70:2>>*/ return 0 === l1
            ? copy(a2)
            : 0
              === a2.length - 1
              ?  /*<<array.ml:72:29>>*/ caml_array_sub(a1, 0, l1)
              :  /*<<array.ml:73:7>>*/ runtime.caml_array_append(a1, a2);
    /*<<array.ml:73:24>>*/ }
    /*<<array.ml:37:20>>*/ function sub(a, ofs, len){
     /*<<?>>*/ if(0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs)
      /*<<array.ml:78:7>>*/ return  /*<<array.ml:78:7>>*/ caml_array_sub
             (a, ofs, len);
     /*<<array.ml:77:7>>*/ return  /*<<array.ml:77:7>>*/ caml_call1
            (Stdlib[1], cst_Array_sub);
    /*<<array.ml:78:27>>*/ }
    /*<<array.ml:37:20>>*/ function fill(a, ofs, len, v){
     /*<<?>>*/ if(0 <= ofs && 0 <= len && (a.length - 1 - len | 0) >= ofs)
      /*<<array.ml:83:7>>*/ return  /*<<array.ml:83:7>>*/ runtime.caml_array_fill
             (a, ofs, len, v);
     /*<<array.ml:82:7>>*/ return  /*<<array.ml:82:7>>*/ caml_call1
            (Stdlib[1], cst_Array_fill);
    /*<<array.ml:83:30>>*/ }
    /*<<array.ml:37:20>>*/ function blit(a1, ofs1, a2, ofs2, len){
     /*<<?>>*/ if
     (0 <= len
      &&
       0 <= ofs1
       &&
        (a1.length - 1 - len | 0) >= ofs1
        && 0 <= ofs2 && (a2.length - 1 - len | 0) >= ofs2)
      /*<<array.ml:89:7>>*/ return  /*<<array.ml:89:7>>*/ runtime.caml_array_blit
             (a1, ofs1, a2, ofs2, len);
     /*<<array.ml:88:7>>*/ return  /*<<array.ml:88:7>>*/ caml_call1
            (Stdlib[1], cst_Array_blit);
    /*<<array.ml:89:38>>*/ }
    /*<<array.ml:37:20>>*/ function iter(f, a){
     /*<<array.ml:92:2>>*/ var
      /*<<array.ml:92:2>>*/ _ao_ = a.length - 1 - 1 | 0,
      /*<<array.ml:92:2>>*/ _an_ = 0;
     /*<<array.ml:92:2>>*/ if(_ao_ >= 0){
     var i = _an_;
      /*<<array.ml:92:31>>*/ for(;;){
       /*<<array.ml:92:31>>*/  /*<<array.ml:92:31>>*/ caml_call1(f, a[1 + i]);
       /*<<array.ml:92:31>>*/  /*<<array.ml:92:31>>*/ var _ap_ = i + 1 | 0;
       /*<<array.ml:92:31>>*/ if(_ao_ !== i){var i = _ap_; continue;}
      break;
     }
    }
    return 0;
    /*<<array.ml:92:53>>*/ }
    /*<<array.ml:37:20>>*/ function iter2(f, a, b){
     /*<<array.ml:95:2>>*/ if(a.length - 1 !== b.length - 1)
      /*<<array.ml:96:4>>*/ return  /*<<array.ml:96:4>>*/ caml_call1
             (Stdlib[1], cst_Array_iter2_arrays_must_ha);
     /*<<array.ml:98:4>>*/ var
      /*<<array.ml:98:4>>*/ _al_ = a.length - 1 - 1 | 0,
      /*<<array.ml:98:4>>*/ _ak_ = 0;
     /*<<array.ml:98:4>>*/ if(_al_ >= 0){
     var i = _ak_;
      /*<<array.ml:98:33>>*/ for(;;){
       /*<<array.ml:98:33>>*/  /*<<array.ml:98:33>>*/ caml_call2
       (f, a[1 + i], b[1 + i]);
       /*<<array.ml:98:33>>*/  /*<<array.ml:98:33>>*/ var _am_ = i + 1 | 0;
       /*<<array.ml:98:33>>*/ if(_al_ !== i){var i = _am_; continue;}
      break;
     }
    }
    return 0;
    /*<<array.ml:98:73>>*/ }
    /*<<array.ml:37:20>>*/ function map(f, a){
     /*<<array.ml:101:2>>*/  /*<<array.ml:101:2>>*/ var l = a.length - 1;
     /*<<array.ml:101:2>>*/ if(0 === l)  /*<<array.ml:102:16>>*/ return [0];
     /*<<array.ml:103:12>>*/ var
      /*<<array.ml:103:12>>*/ r =
        /*<<array.ml:103:12>>*/ caml_make_vect
        (l,  /*<<array.ml:103:21>>*/ caml_call1(f, a[1])),
      /*<<array.ml:103:12>>*/ _ai_ = l - 1 | 0,
      /*<<array.ml:103:12>>*/ _ah_ = 1;
     /*<<array.ml:103:12>>*/ if(_ai_ >= 1){
     var i = _ah_;
      /*<<array.ml:105:6>>*/ for(;;){
       /*<<array.ml:105:6>>*/ r[1 + i] =
        /*<<array.ml:105:21>>*/ caml_call1(f, a[1 + i]);
       /*<<array.ml:105:6>>*/  /*<<array.ml:105:6>>*/ var _aj_ = i + 1 | 0;
       /*<<array.ml:105:6>>*/ if(_ai_ !== i){var i = _aj_; continue;}
      break;
     }
    }
     /*<<array.ml:107:4>>*/ return r;
    /*<<array.ml:108:5>>*/ }
    /*<<array.ml:37:20>>*/ function map2(f, a, b){
     /*<<array.ml:111:2>>*/ var
      /*<<array.ml:111:2>>*/ la = a.length - 1,
      /*<<array.ml:111:2>>*/ lb = b.length - 1;
     /*<<array.ml:111:2>>*/ if(la !== lb)
      /*<<array.ml:114:4>>*/ return  /*<<array.ml:114:4>>*/ caml_call1
             (Stdlib[1], cst_Array_map2_arrays_must_hav);
     /*<<array.ml:115:7>>*/ if(0 === la)  /*<<array.ml:116:19>>*/ return [0];
     /*<<array.ml:117:14>>*/ var
      /*<<array.ml:117:14>>*/ r =
        /*<<array.ml:117:14>>*/ caml_make_vect
        (la,  /*<<array.ml:117:24>>*/ caml_call2(f, a[1], b[1])),
      /*<<array.ml:117:14>>*/ _af_ = la - 1 | 0,
      /*<<array.ml:117:14>>*/ _ae_ = 1;
     /*<<array.ml:117:14>>*/ if(_af_ >= 1){
     var i = _ae_;
      /*<<array.ml:119:8>>*/ for(;;){
       /*<<array.ml:119:8>>*/ r[1 + i] =
        /*<<array.ml:119:23>>*/ caml_call2(f, a[1 + i], b[1 + i]);
       /*<<array.ml:119:8>>*/  /*<<array.ml:119:8>>*/ var _ag_ = i + 1 | 0;
       /*<<array.ml:119:8>>*/ if(_af_ !== i){var i = _ag_; continue;}
      break;
     }
    }
     /*<<array.ml:121:6>>*/ return r;
    /*<<array.ml:123:5>>*/ }
    /*<<array.ml:37:20>>*/ function iteri(f, a){
     /*<<array.ml:126:2>>*/ var
      /*<<array.ml:126:2>>*/ _ac_ = a.length - 1 - 1 | 0,
      /*<<array.ml:126:2>>*/ _ab_ = 0;
     /*<<array.ml:126:2>>*/ if(_ac_ >= 0){
     var i = _ab_;
      /*<<array.ml:126:31>>*/ for(;;){
       /*<<array.ml:126:31>>*/  /*<<array.ml:126:31>>*/ caml_call2
       (f, i, a[1 + i]);
       /*<<array.ml:126:31>>*/  /*<<array.ml:126:31>>*/ var _ad_ = i + 1 | 0;
       /*<<array.ml:126:31>>*/ if(_ac_ !== i){var i = _ad_; continue;}
      break;
     }
    }
    return 0;
    /*<<array.ml:126:56>>*/ }
    /*<<array.ml:37:20>>*/ function mapi(f, a){
     /*<<array.ml:129:2>>*/  /*<<array.ml:129:2>>*/ var l = a.length - 1;
     /*<<array.ml:129:2>>*/ if(0 === l)  /*<<array.ml:130:16>>*/ return [0];
     /*<<array.ml:131:12>>*/ var
      /*<<array.ml:131:12>>*/ r =
        /*<<array.ml:131:12>>*/ caml_make_vect
        (l,  /*<<array.ml:131:21>>*/ caml_call2(f, 0, a[1])),
      /*<<array.ml:131:12>>*/ _$_ = l - 1 | 0,
      /*<<array.ml:131:12>>*/ ___ = 1;
     /*<<array.ml:131:12>>*/ if(_$_ >= 1){
     var i = ___;
      /*<<array.ml:133:6>>*/ for(;;){
       /*<<array.ml:133:6>>*/ r[1 + i] =
        /*<<array.ml:133:21>>*/ caml_call2(f, i, a[1 + i]);
       /*<<array.ml:133:6>>*/  /*<<array.ml:133:6>>*/ var _aa_ = i + 1 | 0;
       /*<<array.ml:133:6>>*/ if(_$_ !== i){var i = _aa_; continue;}
      break;
     }
    }
     /*<<array.ml:135:4>>*/ return r;
    /*<<array.ml:136:5>>*/ }
    /*<<array.ml:37:20>>*/ function to_list(a){
     /*<<array.ml:139:2>>*/ var
      /*<<array.ml:139:2>>*/ i$1 = a.length - 1 - 1 | 0,
     i = i$1,
     res = 0;
     /*<<array.ml:140:4>>*/ for(;;){
      /*<<array.ml:140:4>>*/ if(0 > i)  /*<<array.ml:140:18>>*/ return res;
      /*<<array.ml:140:43>>*/ var
       /*<<array.ml:140:43>>*/ res$0 = [0, a[1 + i], res],
       /*<<array.ml:140:43>>*/ i$0 = i - 1 | 0,
      i = i$0,
      res = res$0;
    }
    /*<<array.ml:141:26>>*/ }
    /*<<array.ml:37:20>>*/ function list_length(accu, param){
    var accu$0 = accu, param$0 = param;
    for(;;){
     if(! param$0)  /*<<array.ml:145:10>>*/ return accu$0;
      /*<<array.ml:146:12>>*/ var
       /*<<array.ml:146:12>>*/ t = param$0[2],
       /*<<array.ml:146:12>>*/ accu$1 = accu$0 + 1 | 0,
      accu$0 = accu$1,
      param$0 = t;
    }
   }
    /*<<array.ml:37:20>>*/ function of_list(l){
     /*<<array.ml:148:14>>*/ if(! l)  /*<<array.ml:149:10>>*/ return [0];
     /*<<array.ml:151:38>>*/ var
     tl = l[2],
     hd = l[1],
      /*<<array.ml:151:38>>*/ a =
        /*<<array.ml:151:38>>*/ caml_make_vect(list_length(0, l), hd),
     i = 1,
     param = tl;
    for(;;){
     if(! param)  /*<<array.ml:153:16>>*/ return a;
     var tl$0 = param[2], hd$0 = param[1];
      /*<<array.ml:154:20>>*/ a[1 + i] = hd$0;
      /*<<array.ml:154:20>>*/ var
       /*<<array.ml:154:20>>*/ i$0 = i + 1 | 0,
      i = i$0,
      param = tl$0;
    }
    /*<<array.ml:155:15>>*/ }
    /*<<array.ml:37:20>>*/ function fold_left(f, x, a){
     /*<<array.ml:158:2>>*/ var
      /*<<array.ml:158:2>>*/ r = [0, x],
      /*<<array.ml:158:2>>*/ _Y_ = a.length - 1 - 1 | 0,
      /*<<array.ml:158:2>>*/ _X_ = 0;
     /*<<array.ml:158:2>>*/ if(_Y_ >= 0){
     var i = _X_;
      /*<<array.ml:160:4>>*/ for(;;){
       /*<<array.ml:160:9>>*/ r[1] =
        /*<<array.ml:160:9>>*/ caml_call2(f, r[1], a[1 + i]);
       /*<<array.ml:160:9>>*/  /*<<array.ml:160:9>>*/ var _Z_ = i + 1 | 0;
       /*<<array.ml:160:9>>*/ if(_Y_ !== i){var i = _Z_; continue;}
      break;
     }
    }
     /*<<array.ml:162:2>>*/ return r[1];
    /*<<array.ml:162:4>>*/ }
    /*<<array.ml:37:20>>*/ function fold_left_map(f, acc, input_array){
     /*<<array.ml:165:2>>*/  /*<<array.ml:165:2>>*/ var
     len = input_array.length - 1;
     /*<<array.ml:165:2>>*/ if(0 === len)
      /*<<array.ml:166:18>>*/ return [0, acc, [0]];
     /*<<array.ml:167:19>>*/ var
      /*<<array.ml:167:19>>*/ match =
        /*<<array.ml:167:19>>*/ caml_call2(f, acc, input_array[1]),
      /*<<array.ml:167:19>>*/ elt = match[2],
      /*<<array.ml:167:19>>*/ acc$0 = match[1],
      /*<<array.ml:168:23>>*/ output_array =
        /*<<array.ml:168:23>>*/ caml_make_vect(len, elt),
      /*<<array.ml:168:23>>*/ acc$1 = [0, acc$0],
      /*<<array.ml:168:23>>*/ _V_ = len - 1 | 0,
      /*<<array.ml:168:23>>*/ _U_ = 1;
     /*<<array.ml:168:23>>*/ if(_V_ >= 1){
     var i = _U_;
      /*<<array.ml:171:6>>*/ for(;;){
       /*<<array.ml:171:22>>*/ var
        /*<<array.ml:171:22>>*/ match$0 =
          /*<<array.ml:171:22>>*/ caml_call2(f, acc$1[1], input_array[1 + i]),
        /*<<array.ml:171:22>>*/ elt$0 = match$0[2],
        /*<<array.ml:171:22>>*/ acc$2 = match$0[1];
       /*<<array.ml:171:22>>*/ acc$1[1] = acc$2;
       /*<<array.ml:173:6>>*/ output_array[1 + i] = elt$0;
       /*<<array.ml:173:6>>*/  /*<<array.ml:173:6>>*/ var _W_ = i + 1 | 0;
       /*<<array.ml:173:6>>*/ if(_V_ !== i){var i = _W_; continue;}
      break;
     }
    }
     /*<<array.ml:175:4>>*/ return [0, acc$1[1], output_array];
    /*<<array.ml:176:5>>*/ }
    /*<<array.ml:37:20>>*/ function fold_right(f, a, x){
     /*<<array.ml:179:2>>*/ var
      /*<<array.ml:179:2>>*/ r = [0, x],
      /*<<array.ml:179:2>>*/ _S_ = a.length - 1 - 1 | 0;
     /*<<array.ml:179:2>>*/ if(_S_ >= 0){
     var i = _S_;
      /*<<array.ml:181:4>>*/ for(;;){
       /*<<array.ml:181:9>>*/ r[1] =
        /*<<array.ml:181:9>>*/ caml_call2(f, a[1 + i], r[1]);
       /*<<array.ml:181:9>>*/  /*<<array.ml:181:9>>*/ var _T_ = i - 1 | 0;
       /*<<array.ml:181:9>>*/ if(0 !== i){var i = _T_; continue;}
      break;
     }
    }
     /*<<array.ml:183:2>>*/ return r[1];
    /*<<array.ml:183:4>>*/ }
    /*<<array.ml:37:20>>*/ function exists(p, a){
     /*<<array.ml:186:2>>*/ var
      /*<<array.ml:186:2>>*/ n = a.length - 1,
     i = 0;
     /*<<array.ml:188:4>>*/ for(;;){
      /*<<array.ml:188:4>>*/ if(i === n)  /*<<array.ml:188:18>>*/ return 0;
      /*<<array.ml:189:12>>*/ if
      ( /*<<array.ml:189:12>>*/ caml_call1(p, a[1 + i]))
       /*<<array.ml:189:36>>*/ return 1;
      /*<<array.ml:190:9>>*/ var
       /*<<array.ml:190:9>>*/ i$0 = i + 1 | 0,
      i = i$0;
    }
    /*<<array.ml:191:8>>*/ }
    /*<<array.ml:37:20>>*/ function for_all(p, a){
     /*<<array.ml:194:2>>*/ var
      /*<<array.ml:194:2>>*/ n = a.length - 1,
     i = 0;
     /*<<array.ml:196:4>>*/ for(;;){
      /*<<array.ml:196:4>>*/ if(i === n)  /*<<array.ml:196:18>>*/ return 1;
      /*<<array.ml:197:12>>*/ if
      (!  /*<<array.ml:197:12>>*/ caml_call1(p, a[1 + i]))
       /*<<array.ml:198:9>>*/ return 0;
      /*<<array.ml:197:36>>*/ var
       /*<<array.ml:197:36>>*/ i$0 = i + 1 | 0,
      i = i$0;
    }
    /*<<array.ml:199:8>>*/ }
    /*<<array.ml:37:20>>*/ function for_all2(p, l1, l2){
     /*<<array.ml:202:2>>*/ var
      /*<<array.ml:202:2>>*/ n1 = l1.length - 1,
      /*<<array.ml:202:2>>*/ n2 = l2.length - 1;
     /*<<array.ml:202:2>>*/ if(n1 !== n2)
      /*<<array.ml:204:19>>*/ return  /*<<array.ml:204:19>>*/ caml_call1
             (Stdlib[1], cst_Array_for_all2);
    var i = 0;
     /*<<array.ml:206:4>>*/ for(;;){
      /*<<array.ml:206:4>>*/ if(i === n1)  /*<<array.ml:206:19>>*/ return 1;
      /*<<array.ml:207:12>>*/ if
      (!  /*<<array.ml:207:12>>*/ caml_call2(p, l1[1 + i], l2[1 + i]))
       /*<<array.ml:208:9>>*/ return 0;
      /*<<array.ml:207:55>>*/ var
       /*<<array.ml:207:55>>*/ i$0 = i + 1 | 0,
      i = i$0;
    }
    /*<<array.ml:209:8>>*/ }
    /*<<array.ml:37:20>>*/ function exists2(p, l1, l2){
     /*<<array.ml:212:2>>*/ var
      /*<<array.ml:212:2>>*/ n1 = l1.length - 1,
      /*<<array.ml:212:2>>*/ n2 = l2.length - 1;
     /*<<array.ml:212:2>>*/ if(n1 !== n2)
      /*<<array.ml:214:19>>*/ return  /*<<array.ml:214:19>>*/ caml_call1
             (Stdlib[1], cst_Array_exists2);
    var i = 0;
     /*<<array.ml:216:4>>*/ for(;;){
      /*<<array.ml:216:4>>*/ if(i === n1)  /*<<array.ml:216:19>>*/ return 0;
      /*<<array.ml:217:12>>*/ if
      ( /*<<array.ml:217:12>>*/ caml_call2(p, l1[1 + i], l2[1 + i]))
       /*<<array.ml:217:55>>*/ return 1;
      /*<<array.ml:218:9>>*/ var
       /*<<array.ml:218:9>>*/ i$0 = i + 1 | 0,
      i = i$0;
    }
    /*<<array.ml:219:8>>*/ }
    /*<<array.ml:37:20>>*/ function mem(x, a){
     /*<<array.ml:222:2>>*/ var
      /*<<array.ml:222:2>>*/ n = a.length - 1,
     i = 0;
     /*<<array.ml:224:4>>*/ for(;;){
      /*<<array.ml:224:4>>*/ if(i === n)  /*<<array.ml:224:18>>*/ return 0;
      /*<<array.ml:225:36>>*/ if
      (0 ===  /*<<array.ml:225:36>>*/ runtime.caml_compare(a[1 + i], x))
       /*<<array.ml:225:48>>*/ return 1;
      /*<<array.ml:226:9>>*/ var
       /*<<array.ml:226:9>>*/ i$0 = i + 1 | 0,
      i = i$0;
    }
    /*<<array.ml:227:8>>*/ }
    /*<<array.ml:37:20>>*/ function memq(x, a){
     /*<<array.ml:230:2>>*/ var
      /*<<array.ml:230:2>>*/ n = a.length - 1,
     i = 0;
     /*<<array.ml:232:4>>*/ for(;;){
      /*<<array.ml:232:4>>*/ if(i === n)  /*<<array.ml:232:18>>*/ return 0;
      /*<<array.ml:233:17>>*/ if(x === a[1 + i])
       /*<<array.ml:233:39>>*/ return 1;
      /*<<array.ml:234:9>>*/ var
       /*<<array.ml:234:9>>*/ i$0 = i + 1 | 0,
      i = i$0;
    }
    /*<<array.ml:235:8>>*/ }
    /*<<array.ml:37:20>>*/ function find_opt(p, a){
     /*<<array.ml:238:2>>*/ var
      /*<<array.ml:238:2>>*/ n = a.length - 1,
     i = 0;
     /*<<array.ml:240:4>>*/ for(;;){
      /*<<array.ml:240:4>>*/ if(i === n)  /*<<array.ml:240:18>>*/ return 0;
      /*<<array.ml:242:14>>*/  /*<<array.ml:242:14>>*/ var x = a[1 + i];
      /*<<array.ml:243:9>>*/ if( /*<<array.ml:243:9>>*/ caml_call1(p, x))
       /*<<array.ml:243:18>>*/ return [0, x];
      /*<<array.ml:244:11>>*/ var
       /*<<array.ml:244:11>>*/ i$0 = i + 1 | 0,
      i = i$0;
    }
    /*<<array.ml:246:8>>*/ }
    /*<<array.ml:37:20>>*/ function find_map(f, a){
     /*<<array.ml:249:2>>*/ var
      /*<<array.ml:249:2>>*/ n = a.length - 1,
     i = 0;
     /*<<array.ml:251:4>>*/ for(;;){
      /*<<array.ml:251:4>>*/ if(i === n)  /*<<array.ml:251:18>>*/ return 0;
      /*<<array.ml:253:12>>*/  /*<<array.ml:253:12>>*/ var
      r =  /*<<array.ml:253:12>>*/ caml_call1(f, a[1 + i]);
      /*<<array.ml:253:12>>*/ if(r)  /*<<array.ml:255:23>>*/ return r;
      /*<<array.ml:254:16>>*/ var
       /*<<array.ml:254:16>>*/ i$0 = i + 1 | 0,
      i = i$0;
    }
    /*<<array.ml:257:8>>*/ }
    /*<<array.ml:37:20>>*/ function split(x){
     /*<<array.ml:260:5>>*/ if
     ( /*<<array.ml:260:5>>*/ runtime.caml_equal(x, [0]))
      /*<<array.ml:260:19>>*/ return [0, [0], [0]];
     /*<<array.ml:261:7>>*/ var
      /*<<array.ml:261:7>>*/ match = x[1],
      /*<<array.ml:261:7>>*/ b0 = match[2],
      /*<<array.ml:261:7>>*/ a0 = match[1],
      /*<<array.ml:261:7>>*/ n = x.length - 1,
      /*<<array.ml:264:12>>*/ a =
        /*<<array.ml:264:12>>*/ caml_make_vect(n, a0),
      /*<<array.ml:265:12>>*/ b =
        /*<<array.ml:265:12>>*/ caml_make_vect(n, b0),
      /*<<array.ml:265:12>>*/ _Q_ = n - 1 | 0,
      /*<<array.ml:265:12>>*/ _P_ = 1;
     /*<<array.ml:265:12>>*/ if(_Q_ >= 1){
     var i = _P_;
      /*<<array.ml:267:6>>*/ for(;;){
       /*<<array.ml:267:6>>*/ var
        /*<<array.ml:267:6>>*/ match$0 = x[1 + i],
        /*<<array.ml:267:6>>*/ bi = match$0[2],
        /*<<array.ml:267:6>>*/ ai = match$0[1];
       /*<<array.ml:268:6>>*/ a[1 + i] = ai;
       /*<<array.ml:269:6>>*/ b[1 + i] = bi;
       /*<<array.ml:269:6>>*/  /*<<array.ml:269:6>>*/ var _R_ = i + 1 | 0;
       /*<<array.ml:269:6>>*/ if(_Q_ !== i){var i = _R_; continue;}
      break;
     }
    }
     /*<<array.ml:271:4>>*/ return [0, a, b];
    /*<<array.ml:272:5>>*/ }
    /*<<array.ml:37:20>>*/ function combine(a, b){
     /*<<array.ml:275:2>>*/ var
      /*<<array.ml:275:2>>*/ na = a.length - 1,
      /*<<array.ml:275:2>>*/ nb = b.length - 1;
     /*<<array.ml:275:2>>*/ if(na !== nb)
      /*<<array.ml:277:19>>*/  /*<<array.ml:277:19>>*/ caml_call1
      (Stdlib[1], cst_Array_combine);
     /*<<array.ml:277:46>>*/ if(0 === na)  /*<<array.ml:278:17>>*/ return [0];
     /*<<array.ml:280:12>>*/ var
      /*<<array.ml:280:12>>*/ x =
        /*<<array.ml:280:12>>*/ caml_make_vect(na, [0, a[1], b[1]]),
      /*<<array.ml:280:12>>*/ _N_ = na - 1 | 0,
      /*<<array.ml:280:12>>*/ _M_ = 1;
     /*<<array.ml:280:12>>*/ if(_N_ >= 1){
     var i = _M_;
      /*<<array.ml:282:6>>*/ for(;;){
       /*<<array.ml:282:22>>*/ x[1 + i] = [0, a[1 + i], b[1 + i]];
       /*<<array.ml:282:22>>*/  /*<<array.ml:282:22>>*/ var _O_ = i + 1 | 0;
       /*<<array.ml:282:22>>*/ if(_N_ !== i){var i = _O_; continue;}
      break;
     }
    }
     /*<<array.ml:284:4>>*/ return x;
    /*<<array.ml:285:5>>*/ }
    /*<<array.ml:37:20>>*/  /*<<array.ml:37:20>>*/ var
    Bottom =
      [248,
       cst_Stdlib_Array_Bottom,
        /*<<array.ml:37:20>>*/ runtime.caml_fresh_oo_id(0)];
    /*<<array.ml:37:20>>*/ function sort(cmp, a){
     /*<<array.ml:289:2>>*/ function maxson(l, i){
      /*<<array.ml:290:4>>*/ var
       /*<<array.ml:290:4>>*/ i31 = ((i + i | 0) + i | 0) + 1 | 0,
       /*<<array.ml:290:4>>*/ x = [0, i31];
      /*<<array.ml:290:4>>*/ if((i31 + 2 | 0) < l){
       /*<<array.ml:292:22>>*/ var
        /*<<array.ml:292:22>>*/ _F_ = i31 + 1 | 0,
        /*<<array.ml:293:25>>*/ _G_ =
          /*<<array.ml:293:25>>*/ caml_check_bound(a, _F_)[1 + _F_];
       /*<<array.ml:293:9>>*/ if
       ( /*<<array.ml:293:9>>*/ caml_call2
         (cmp,
           /*<<array.ml:293:13>>*/ caml_check_bound(a, i31)[1 + i31],
          _G_)
        < 0)
        /*<<array.ml:293:50>>*/ x[1] = i31 + 1 | 0;
       /*<<array.ml:294:6>>*/ var
        /*<<array.ml:294:6>>*/ _H_ = i31 + 2 | 0,
        /*<<array.ml:294:24>>*/ _I_ =
          /*<<array.ml:294:24>>*/ caml_check_bound(a, _H_)[1 + _H_],
        /*<<array.ml:294:24>>*/ _J_ = x[1];
       /*<<array.ml:294:9>>*/ if
       ( /*<<array.ml:294:9>>*/ caml_call2
         (cmp,
           /*<<array.ml:294:13>>*/ caml_check_bound(a, _J_)[1 + _J_],
          _I_)
        < 0)
        /*<<array.ml:294:49>>*/ x[1] = i31 + 2 | 0;
       /*<<array.ml:295:6>>*/ return x[1];
     }
      /*<<array.ml:297:6>>*/ if((i31 + 1 | 0) < l){
       /*<<array.ml:297:38>>*/ var
       _K_ = i31 + 1 | 0,
        /*<<array.ml:297:38>>*/ _L_ =
          /*<<array.ml:297:38>>*/ caml_check_bound(a, _K_)[1 + _K_];
       /*<<array.ml:297:22>>*/ if
       (0
        >
          /*<<array.ml:297:22>>*/ caml_call2
          (cmp,
            /*<<array.ml:297:26>>*/ caml_check_bound(a, i31)[1 + i31],
           _L_))
        /*<<array.ml:298:11>>*/ return i31 + 1 | 0;
     }
      /*<<array.ml:299:11>>*/ if(i31 < l)  /*<<array.ml:299:27>>*/ return i31;
      /*<<array.ml:299:36>>*/ throw  /*<<array.ml:299:36>>*/ caml_maybe_attach_backtrace
            ([0, Bottom, i], 1);
     /*<<array.ml:299:52>>*/ }
     /*<<array.ml:289:2>>*/ var
      /*<<array.ml:289:2>>*/ l = a.length - 1,
      /*<<array.ml:289:2>>*/ _x_ = ((l + 1 | 0) / 3 | 0) - 1 | 0;
     /*<<array.ml:289:2>>*/ if(_x_ >= 0){
     var i$6 = _x_;
      /*<<array.ml:328:38>>*/ for(;;){
       /*<<array.ml:328:50>>*/  /*<<array.ml:328:50>>*/ var
       e$1 =  /*<<array.ml:328:50>>*/ caml_check_bound(a, i$6)[1 + i$6];
      try{
       var i = i$6;
        /*<<array.ml:302:4>>*/ for(;;){
         /*<<array.ml:302:12>>*/  /*<<array.ml:302:12>>*/ var
         j = maxson(l, i);
         /*<<array.ml:303:7>>*/ if
         (0
          <
            /*<<array.ml:303:7>>*/ caml_call2
            (cmp,  /*<<array.ml:303:11>>*/ caml_check_bound(a, j)[1 + j], e$1)){
          /*<<array.ml:304:14>>*/  /*<<array.ml:304:14>>*/ var
          _u_ =  /*<<array.ml:304:14>>*/ caml_check_bound(a, j)[1 + j];
          /*<<array.ml:304:6>>*/  /*<<array.ml:304:6>>*/ caml_check_bound
           (a, i)
          [1 + i]
         = _u_;
         var i = j;
         continue;
        }
         /*<<array.ml:306:13>>*/  /*<<array.ml:306:13>>*/ caml_check_bound
          (a, i)
         [1 + i]
        = e$1;
        break;
       }
      }
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(exn[1] !== Bottom) throw caml_maybe_attach_backtrace(exn, 0);
        /*<<array.ml:310:61>>*/  /*<<array.ml:310:61>>*/ var i$0 = exn[2];
        /*<<array.ml:310:61>>*/  /*<<array.ml:310:61>>*/ caml_check_bound
         (a, i$0)
        [1 + i$0]
       = e$1;
      }
      var _E_ = i$6 - 1 | 0;
      if(0 !== i$6){var i$6 = _E_; continue;}
      break;
     }
    }
     /*<<array.ml:329:2>>*/  /*<<array.ml:329:2>>*/ var _y_ = l - 1 | 0;
     /*<<array.ml:329:2>>*/ if(_y_ >= 2){
     var i$4 = _y_;
     a:
      /*<<array.ml:330:4>>*/ for(;;){
       /*<<array.ml:330:12>>*/ var
        /*<<array.ml:330:12>>*/ e$0 =
          /*<<array.ml:330:12>>*/ caml_check_bound(a, i$4)[1 + i$4],
        /*<<array.ml:331:12>>*/ _C_ =
          /*<<array.ml:331:12>>*/ caml_check_bound(a, 0)[1];
       /*<<array.ml:331:4>>*/  /*<<array.ml:331:4>>*/ caml_check_bound(a, i$4)
       [1 + i$4]
      = _C_;
       /*<<array.ml:331:4>>*/  /*<<array.ml:331:4>>*/ var i$5 = 0;
      try{
       var i$1 = i$5;
        /*<<array.ml:312:4>>*/ for(;;){
         /*<<array.ml:312:12>>*/ var
          /*<<array.ml:312:12>>*/ j$0 = maxson(i$4, i$1),
          /*<<array.ml:313:12>>*/ _v_ =
            /*<<array.ml:313:12>>*/ caml_check_bound(a, j$0)[1 + j$0];
         /*<<array.ml:313:4>>*/  /*<<array.ml:313:4>>*/ caml_check_bound
          (a, i$1)
         [1 + i$1]
        = _v_;
        var i$1 = j$0;
       }
      }
      catch(exn){
       var exn$0 = caml_wrap_exception(exn);
       if(exn$0[1] !== Bottom) throw caml_maybe_attach_backtrace(exn$0, 0);
        /*<<array.ml:316:55>>*/ var
         /*<<array.ml:316:55>>*/ i$2 = exn$0[2],
        i$3 = i$2;
        /*<<array.ml:318:4>>*/ for(;;){
         /*<<array.ml:318:4>>*/  /*<<array.ml:318:4>>*/ var
         father = (i$3 - 1 | 0) / 3 | 0;
         /*<<array.ml:318:4>>*/ if(i$3 === father)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
         /*<<array.ml:320:7>>*/ if
         (0
          <=
            /*<<array.ml:320:7>>*/ caml_call2
            (cmp,
              /*<<array.ml:320:11>>*/ caml_check_bound(a, father)[1 + father],
             e$0))
          /*<<array.ml:323:13>>*/  /*<<array.ml:323:13>>*/ caml_check_bound
           (a, i$3)
          [1 + i$3]
         = e$0;
        else{
          /*<<array.ml:321:14>>*/  /*<<array.ml:321:14>>*/ var
          _w_ =
             /*<<array.ml:321:14>>*/ caml_check_bound(a, father)[1 + father];
          /*<<array.ml:321:6>>*/  /*<<array.ml:321:6>>*/ caml_check_bound
           (a, i$3)
          [1 + i$3]
         = _w_;
          /*<<array.ml:321:6>>*/ if(0 < father){var i$3 = father; continue;}
          /*<<array.ml:322:49>>*/  /*<<array.ml:322:49>>*/ caml_check_bound
           (a, 0)
          [1]
         = e$0;
        }
        var _D_ = i$4 - 1 | 0;
        if(2 !== i$4){var i$4 = _D_; continue a;}
        break;
       }
      }
      break;
     }
    }
     /*<<array.ml:334:2>>*/  /*<<array.ml:334:2>>*/ var _z_ = 1 < l ? 1 : 0;
     /*<<array.ml:334:2>>*/ if(_z_){
      /*<<array.ml:334:25>>*/ var
       /*<<array.ml:334:25>>*/ e =
         /*<<array.ml:334:25>>*/ caml_check_bound(a, 1)[2],
       /*<<array.ml:334:46>>*/ _A_ =
         /*<<array.ml:334:46>>*/ caml_check_bound(a, 0)[1];
      /*<<array.ml:334:38>>*/  /*<<array.ml:334:38>>*/ caml_check_bound(a, 1)
      [2]
     = _A_;
      /*<<array.ml:334:57>>*/  /*<<array.ml:334:57>>*/ caml_check_bound(a, 0)
      [1]
     = e;
     var _B_ = 0;
    }
    else
     var _B_ = _z_;
    return _B_;
    /*<<array.ml:334:67>>*/ }
    /*<<array.ml:37:20>>*/ function stable_sort(cmp, a){
     /*<<array.ml:339:2>>*/ function merge
    (src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs){
      /*<<array.ml:340:4>>*/ var
       /*<<array.ml:340:4>>*/ src1r = src1ofs + src1len | 0,
       /*<<array.ml:340:4>>*/ src2r = src2ofs + src2len | 0,
       /*<<array.ml:357:44>>*/ s2$1 =
         /*<<array.ml:357:44>>*/ caml_check_bound(src2, src2ofs)[1 + src2ofs],
       /*<<array.ml:357:20>>*/ s1$1 =
         /*<<array.ml:357:20>>*/ caml_check_bound(a, src1ofs)[1 + src1ofs],
      i1 = src1ofs,
      s1 = s1$1,
      i2 = src2ofs,
      s2 = s2$1,
      d = dstofs;
      /*<<array.ml:342:6>>*/ for(;;){
       /*<<array.ml:342:9>>*/ if
       (0 <  /*<<array.ml:342:9>>*/ caml_call2(cmp, s1, s2)){
        /*<<array.ml:350:8>>*/  /*<<array.ml:350:8>>*/ caml_check_bound
         (dst, d)
        [1 + d]
       = s2;
        /*<<array.ml:350:8>>*/  /*<<array.ml:350:8>>*/ var i2$0 = i2 + 1 | 0;
        /*<<array.ml:350:8>>*/ if(i2$0 >= src2r)
         /*<<array.ml:355:10>>*/ return blit
                (a, i1, dst, d + 1 | 0, src1r - i1 | 0);
        /*<<array.ml:353:10>>*/ var
         /*<<array.ml:353:10>>*/ d$0 = d + 1 | 0,
         /*<<array.ml:353:24>>*/ s2$0 =
           /*<<array.ml:353:24>>*/ caml_check_bound(src2, i2$0)[1 + i2$0],
        i2 = i2$0,
        s2 = s2$0,
        d = d$0;
       continue;
      }
       /*<<array.ml:343:8>>*/  /*<<array.ml:343:8>>*/ caml_check_bound(dst, d)
       [1 + d]
      = s1;
       /*<<array.ml:343:8>>*/  /*<<array.ml:343:8>>*/ var i1$0 = i1 + 1 | 0;
       /*<<array.ml:343:8>>*/ if(i1$0 >= src1r)
        /*<<array.ml:348:10>>*/ return blit
               (src2, i2, dst, d + 1 | 0, src2r - i2 | 0);
       /*<<array.ml:346:10>>*/ var
        /*<<array.ml:346:10>>*/ d$1 = d + 1 | 0,
        /*<<array.ml:346:18>>*/ s1$0 =
          /*<<array.ml:346:18>>*/ caml_check_bound(a, i1$0)[1 + i1$0],
       i1 = i1$0,
       s1 = s1$0,
       d = d$1;
     }
     /*<<array.ml:357:70>>*/ }
     /*<<array.ml:339:2>>*/ function isortto(srcofs, dst, dstofs, len){
      /*<<array.ml:360:4>>*/ var
       /*<<array.ml:360:4>>*/ _m_ = len - 1 | 0,
       /*<<array.ml:360:4>>*/ _l_ = 0;
      /*<<array.ml:360:4>>*/ if(_m_ >= 0){
      var i = _l_;
      a:
       /*<<array.ml:361:6>>*/ for(;;){
        /*<<array.ml:361:6>>*/ var
         /*<<array.ml:361:6>>*/ _n_ = srcofs + i | 0,
         /*<<array.ml:361:14>>*/ e =
           /*<<array.ml:361:14>>*/ caml_check_bound(a, _n_)[1 + _n_],
         /*<<array.ml:361:14>>*/ j = [0, (dstofs + i | 0) - 1 | 0];
       for(;;){
        if(dstofs <= j[1]){
         var _o_ = j[1];
          /*<<array.ml:363:29>>*/ if
          (0
           <
             /*<<array.ml:363:29>>*/ caml_call2
             (cmp,
               /*<<array.ml:363:33>>*/ caml_check_bound(dst, _o_)[1 + _o_],
              e)){
           /*<<array.ml:364:8>>*/ var
            /*<<array.ml:364:8>>*/ _p_ = j[1],
            /*<<array.ml:364:25>>*/ _q_ =
              /*<<array.ml:364:25>>*/ caml_check_bound(dst, _p_)[1 + _p_],
            /*<<array.ml:364:25>>*/ _r_ = j[1] + 1 | 0;
           /*<<array.ml:364:8>>*/  /*<<array.ml:364:8>>*/ caml_check_bound
            (dst, _r_)
           [1 + _r_]
          = _q_;
           /*<<array.ml:364:8>>*/ j[1] += -1;
          continue;
         }
        }
         /*<<array.ml:367:6>>*/  /*<<array.ml:367:6>>*/ var
         _s_ = j[1] + 1 | 0;
         /*<<array.ml:367:6>>*/  /*<<array.ml:367:6>>*/ caml_check_bound
          (dst, _s_)
         [1 + _s_]
        = e;
         /*<<array.ml:367:6>>*/  /*<<array.ml:367:6>>*/ var _t_ = i + 1 | 0;
         /*<<array.ml:367:6>>*/ if(_m_ !== i){var i = _t_; continue a;}
        break;
       }
       break;
      }
     }
     return 0;
     /*<<array.ml:368:8>>*/ }
     /*<<array.ml:339:2>>*/ function sortto(srcofs, dst, dstofs, len){
      /*<<array.ml:371:4>>*/ if(len <= 5)
       /*<<array.ml:371:26>>*/ return isortto(srcofs, dst, dstofs, len);
      /*<<array.ml:371:61>>*/ var
       /*<<array.ml:371:61>>*/ l1 = len / 2 | 0,
       /*<<array.ml:371:61>>*/ l2 = len - l1 | 0;
      /*<<array.ml:374:6>>*/ sortto(srcofs + l1 | 0, dst, dstofs + l1 | 0, l2);
      /*<<array.ml:375:6>>*/ sortto(srcofs, a, srcofs + l2 | 0, l1);
      /*<<array.ml:375:6>>*/ return merge
             (srcofs + l2 | 0, l1, dst, dstofs + l1 | 0, l2, dst, dstofs);
     /*<<array.ml:377:7>>*/ }
     /*<<array.ml:339:2>>*/  /*<<array.ml:339:2>>*/ var l = a.length - 1;
     /*<<array.ml:339:2>>*/ if(l <= 5)
      /*<<array.ml:380:22>>*/ return isortto(0, a, 0, l);
     /*<<array.ml:380:43>>*/ var
      /*<<array.ml:380:43>>*/ l1 = l / 2 | 0,
      /*<<array.ml:380:43>>*/ l2 = l - l1 | 0,
      /*<<array.ml:383:12>>*/ t =
        /*<<array.ml:383:12>>*/ caml_make_vect
        (l2,  /*<<array.ml:383:20>>*/ caml_check_bound(a, 0)[1]);
     /*<<array.ml:384:4>>*/ sortto(l1, t, 0, l2);
     /*<<array.ml:385:4>>*/ sortto(0, a, l2, l1);
     /*<<array.ml:385:4>>*/ return merge(l2, l1, t, 0, l2, a, 0);
    /*<<array.ml:387:5>>*/ }
    /*<<array.ml:37:20>>*/ function to_seq(a){
     /*<<array.ml:395:2>>*/ function aux(i, param){
      /*<<array.ml:396:4>>*/ if(i >= a.length - 1)
       /*<<array.ml:400:9>>*/ return 0;
      /*<<array.ml:398:14>>*/ var
       /*<<array.ml:398:14>>*/ x = a[1 + i],
       /*<<array.ml:398:14>>*/ _j_ = i + 1 | 0;
      /*<<array.ml:399:19>>*/ return [0,
             x,
             function(_k_){ /*<<?>>*/ return aux(_j_, _k_);}];
     /*<<array.ml:400:16>>*/ }
     /*<<array.ml:395:2>>*/  /*<<array.ml:395:2>>*/ var _h_ = 0;
     /*<<array.ml:395:2>>*/ return function(_i_){
      /*<<?>>*/ return aux(_h_, _i_);};
    /*<<array.ml:402:7>>*/ }
    /*<<array.ml:37:20>>*/ function to_seqi(a){
     /*<<array.ml:405:2>>*/ function aux(i, param){
      /*<<array.ml:406:4>>*/ if(i >= a.length - 1)
       /*<<array.ml:410:9>>*/ return 0;
      /*<<array.ml:408:14>>*/ var
       /*<<array.ml:408:14>>*/ x = a[1 + i],
       /*<<array.ml:408:14>>*/ _f_ = i + 1 | 0;
      /*<<array.ml:409:23>>*/ return [0,
             [0, i, x],
             function(_g_){ /*<<?>>*/ return aux(_f_, _g_);}];
     /*<<array.ml:410:16>>*/ }
     /*<<array.ml:405:2>>*/  /*<<array.ml:405:2>>*/ var _d_ = 0;
     /*<<array.ml:405:2>>*/ return function(_e_){
      /*<<?>>*/ return aux(_d_, _e_);};
    /*<<array.ml:412:7>>*/ }
    /*<<array.ml:37:20>>*/ function of_seq(i$2){
     /*<<array.ml:426:2>>*/  /*<<array.ml:426:2>>*/ var _b_ = 0;
     /*<<array.ml:426:2>>*/ function _c_(acc, x){
      /*<<array.ml:426:38>>*/ return [0, x, acc];
     /*<<array.ml:426:44>>*/ }
     /*<<array.ml:426:10>>*/  /*<<array.ml:426:10>>*/ var
     l =  /*<<array.ml:426:10>>*/ caml_call3(Stdlib_Seq[5], _c_, _b_, i$2);
     /*<<array.ml:414:18>>*/ if(! l)  /*<<array.ml:415:10>>*/ return [0];
     /*<<array.ml:417:16>>*/ var
     tl = l[2],
     hd = l[1],
      /*<<array.ml:417:16>>*/ len = list_length(0, l),
      /*<<array.ml:418:14>>*/ a =
        /*<<array.ml:418:14>>*/ caml_make_vect(len, hd),
      /*<<array.ml:418:14>>*/ i$1 = len - 2 | 0,
     i = i$1,
     param = tl;
    for(;;){
     if(! param)  /*<<array.ml:420:16>>*/ return a;
     var tl$0 = param[2], hd$0 = param[1];
      /*<<array.ml:421:20>>*/ a[1 + i] = hd$0;
      /*<<array.ml:421:20>>*/ var
       /*<<array.ml:421:20>>*/ i$0 = i - 1 | 0,
      i = i$0,
      param = tl$0;
    }
    /*<<array.ml:427:15>>*/ }
    /*<<array.ml:37:20>>*/  /*<<array.ml:37:20>>*/ var
    Stdlib_Array =
      [0,
       init,
       make_matrix,
       append,
       runtime.caml_array_concat,
       sub,
       copy,
       fill,
       blit,
       to_list,
       of_list,
       iter,
       iteri,
       map,
       mapi,
       fold_left,
       fold_left_map,
       fold_right,
       iter2,
       map2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find_opt,
       find_map,
       split,
       combine,
       sort,
       stable_sort,
       stable_sort,
       to_seq,
       to_seqi,
       of_seq,
       Floatarray];
    /*<<array.ml:37:20>>*/  /*<<array.ml:37:20>>*/ runtime.caml_register_global
    (14, Stdlib_Array, "Stdlib__Array");
    /*<<array.ml:37:20>>*/ return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Float
//# unitInfo: Requires: Assert_failure, Stdlib, Stdlib__Array, Stdlib__List, Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Float_array_blit$1 = "Float.array.blit",
    cst_float_ml = "float.ml",
    caml_array_get = runtime.caml_array_get,
    caml_array_set = runtime.caml_array_set,
    caml_float_compare = runtime.caml_float_compare,
    caml_floatarray_blit = runtime.caml_floatarray_blit,
    caml_floatarray_create = runtime.caml_floatarray_create,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_nextafter_float = runtime.caml_nextafter_float,
    caml_signbit_float = runtime.caml_signbit_float,
    caml_wrap_exception = runtime.caml_wrap_exception;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure,
    Stdlib = global_data.Stdlib,
    infinity = Stdlib[22],
    neg_infinity = Stdlib[23],
    nan = Stdlib[24],
    _b_ = [0, cst_float_ml, 395, 6],
    cst_Float_Array_map2_arrays_mu =
      "Float.Array.map2: arrays must have the same length",
    cst_Float_Array_iter2_arrays_m =
      "Float.Array.iter2: arrays must have the same length",
    cst_Float_array_blit = cst_Float_array_blit$1,
    cst_Float_array_blit$0 = cst_Float_array_blit$1,
    cst_Float_Array_fill = "Float.Array.fill",
    cst_Float_Array_sub = "Float.Array.sub",
    _a_ = [0, cst_float_ml, 222, 14],
    cst_Float_Array_concat = "Float.Array.concat",
    cst_Float_Array_init = "Float.Array.init",
    cst_Stdlib_Float_Array_Bottom = "Stdlib.Float.Array.Bottom",
    zero = 0.,
    one = 1.,
    minus_one = -1.;
   function is_finite(x){
     /*<<float.ml:34:27>>*/ return x - x == 0. ? 1 : 0;
    /*<<float.ml:34:38>>*/ }
   function is_infinite(x){
     /*<<float.ml:35:29>>*/ return 1. / x == 0. ? 1 : 0;
    /*<<float.ml:35:41>>*/ }
   function is_nan(x){
     /*<<float.ml:36:24>>*/ return x != x ? 1 : 0;
    /*<<float.ml:36:30>>*/ }
   var
    max_float = Stdlib[25],
    min_float = Stdlib[26],
    epsilon = Stdlib[27],
    of_string_opt = Stdlib[36],
    to_string = Stdlib[35],
    pi = 3.14159265358979312;
   function is_integer(x){
     /*<<float.ml:111:23>>*/  /*<<float.ml:111:23>>*/ var
     _aq_ = x ==  /*<<float.ml:111:23>>*/ runtime.caml_trunc_float(x) ? 1 : 0;
     /*<<float.ml:111:23>>*/ return _aq_ ? is_finite(x) : _aq_;
    /*<<float.ml:111:45>>*/ }
   function succ(x){
     /*<<float.ml:116:13>>*/ return  /*<<float.ml:116:13>>*/ caml_nextafter_float
            (x, infinity);
    /*<<float.ml:116:34>>*/ }
   function pred(x){
     /*<<float.ml:117:13>>*/ return  /*<<float.ml:117:13>>*/ caml_nextafter_float
            (x, neg_infinity);
    /*<<float.ml:117:38>>*/ }
   function equal(x, y){
     /*<<float.ml:131:16>>*/ return 0
            ===  /*<<float.ml:131:16>>*/ caml_float_compare(x, y)
            ? 1
            : 0;
    /*<<float.ml:131:31>>*/ }
   function min(x, y){
     /*<<float.ml:134:2>>*/ if(! (x < y)){
     var switch$0 = 0;
      /*<<float.ml:134:34>>*/ if
      (!
        /*<<float.ml:134:18>>*/ caml_signbit_float(y)
       &&  /*<<float.ml:134:34>>*/ caml_signbit_float(x))
      switch$0 = 1;
     if(! switch$0)  /*<<float.ml:136:10>>*/ return x != x ? x : y;
    }
     /*<<float.ml:135:7>>*/ return y != y ? y : x;
    /*<<float.ml:136:32>>*/ }
   function max(x, y){
     /*<<float.ml:139:2>>*/ if(! (x < y)){
     var switch$0 = 0;
      /*<<float.ml:139:34>>*/ if
      (!
        /*<<float.ml:139:18>>*/ caml_signbit_float(y)
       &&  /*<<float.ml:139:34>>*/ caml_signbit_float(x))
      switch$0 = 1;
     if(! switch$0)  /*<<float.ml:141:10>>*/ return y != y ? y : x;
    }
     /*<<float.ml:140:7>>*/ return x != x ? x : y;
    /*<<float.ml:141:32>>*/ }
   function min_max(x, y){
     /*<<float.ml:144:17>>*/ if(x == x && y == y){
      /*<<float.ml:145:7>>*/ if(! (x < y)){
      var switch$0 = 0;
       /*<<float.ml:145:39>>*/ if
       (!
         /*<<float.ml:145:23>>*/ caml_signbit_float(y)
        &&  /*<<float.ml:145:39>>*/ caml_signbit_float(x))
       switch$0 = 1;
      if(! switch$0)  /*<<float.ml:145:68>>*/ return [0, y, x];
     }
      /*<<float.ml:145:56>>*/ return [0, x, y];
    }
     /*<<float.ml:144:31>>*/ return [0, nan, nan];
    /*<<float.ml:145:74>>*/ }
   function min_num(x, y){
     /*<<float.ml:148:2>>*/ if(! (x < y)){
     var switch$0 = 0;
      /*<<float.ml:148:34>>*/ if
      (!
        /*<<float.ml:148:18>>*/ caml_signbit_float(y)
       &&  /*<<float.ml:148:34>>*/ caml_signbit_float(x))
      switch$0 = 1;
     if(! switch$0)  /*<<float.ml:150:10>>*/ return y != y ? x : y;
    }
     /*<<float.ml:149:7>>*/ return x != x ? y : x;
    /*<<float.ml:150:32>>*/ }
   function max_num(x, y){
     /*<<float.ml:153:2>>*/ if(! (x < y)){
     var switch$0 = 0;
      /*<<float.ml:153:34>>*/ if
      (!
        /*<<float.ml:153:18>>*/ caml_signbit_float(y)
       &&  /*<<float.ml:153:34>>*/ caml_signbit_float(x))
      switch$0 = 1;
     if(! switch$0)  /*<<float.ml:155:10>>*/ return x != x ? y : x;
    }
     /*<<float.ml:154:7>>*/ return y != y ? x : y;
    /*<<float.ml:155:32>>*/ }
   function min_max_num(x, y){
     /*<<float.ml:158:5>>*/ if(x != x)
      /*<<float.ml:158:19>>*/ return [0, y, y];
     /*<<float.ml:159:10>>*/ if(y != y)
      /*<<float.ml:159:24>>*/ return [0, x, x];
     /*<<float.ml:160:7>>*/ if(! (x < y)){
     var switch$0 = 0;
      /*<<float.ml:160:39>>*/ if
      (!
        /*<<float.ml:160:23>>*/ caml_signbit_float(y)
       &&  /*<<float.ml:160:39>>*/ caml_signbit_float(x))
      switch$0 = 1;
     if(! switch$0)  /*<<float.ml:160:67>>*/ return [0, y, x];
    }
     /*<<float.ml:160:56>>*/ return [0, x, y];
    /*<<float.ml:160:72>>*/ }
   function hash(x){
     /*<<float.ml:164:13>>*/ return  /*<<float.ml:164:13>>*/ runtime.caml_hash
            (10, 100, 0, x);
    /*<<float.ml:164:41>>*/ }
   function unsafe_fill(a, ofs, len, v){
     /*<<float.ml:178:4>>*/  /*<<float.ml:178:4>>*/ var
     _ao_ = (ofs + len | 0) - 1 | 0;
     /*<<float.ml:178:4>>*/ if(_ao_ >= ofs){
     var i = ofs;
      /*<<float.ml:178:36>>*/ for(;;){
       /*<<float.ml:178:36>>*/ a[1 + i] = v;
       /*<<float.ml:178:36>>*/  /*<<float.ml:178:36>>*/ var _ap_ = i + 1 | 0;
       /*<<float.ml:178:36>>*/ if(_ao_ !== i){var i = _ap_; continue;}
      break;
     }
    }
     /*<<float.ml:164:13>>*/ return 0;
    /*<<float.ml:178:57>>*/ }
   function check(a, ofs, len, msg){
     /*<<float.ml:184:4>>*/  /*<<float.ml:184:4>>*/ var
     _ak_ = ofs < 0 ? 1 : 0;
     /*<<float.ml:184:4>>*/ if(_ak_)
     var _al_ = _ak_;
    else{
     var _am_ = len < 0 ? 1 : 0;
     if(_am_)
      var _al_ = _am_;
     else
      var
       _an_ = (ofs + len | 0) < 0 ? 1 : 0,
       _al_ = _an_ || (a.length - 1 < (ofs + len | 0) ? 1 : 0);
    }
     /*<<float.ml:185:6>>*/ return _al_
            ?  /*<<float.ml:185:6>>*/ caml_call1(Stdlib[1], msg)
            : _al_;
    /*<<float.ml:185:21>>*/ }
   function make(n, v){
     /*<<float.ml:188:17>>*/  /*<<float.ml:188:17>>*/ var
     result =  /*<<float.ml:188:17>>*/ caml_floatarray_create(n);
     /*<<float.ml:189:4>>*/ unsafe_fill(result, 0, n, v);
     /*<<float.ml:189:4>>*/ return result;
    /*<<float.ml:190:10>>*/ }
   function init(l, f){
     /*<<float.ml:193:4>>*/ if(0 > l)
      /*<<float.ml:193:18>>*/ return  /*<<float.ml:193:18>>*/ caml_call1
             (Stdlib[1], cst_Float_Array_init);
     /*<<float.ml:195:16>>*/ var
      /*<<float.ml:195:16>>*/ res =
        /*<<float.ml:195:16>>*/ caml_floatarray_create(l),
      /*<<float.ml:195:16>>*/ _ai_ = l - 1 | 0,
      /*<<float.ml:195:16>>*/ _ah_ = 0;
     /*<<float.ml:195:16>>*/ if(_ai_ >= 0){
     var i = _ah_;
      /*<<float.ml:197:8>>*/ for(;;){
       /*<<float.ml:197:8>>*/ res[1 + i] =
        /*<<float.ml:197:25>>*/ caml_call1(f, i);
       /*<<float.ml:197:8>>*/  /*<<float.ml:197:8>>*/ var _aj_ = i + 1 | 0;
       /*<<float.ml:197:8>>*/ if(_ai_ !== i){var i = _aj_; continue;}
      break;
     }
    }
     /*<<float.ml:199:6>>*/ return res;
    /*<<float.ml:199:9>>*/ }
   function append(a1, a2){
     /*<<float.ml:202:4>>*/ var
      /*<<float.ml:202:4>>*/ l1 = a1.length - 1,
      /*<<float.ml:202:4>>*/ l2 = a2.length - 1,
      /*<<float.ml:204:17>>*/ result =
        /*<<float.ml:204:17>>*/ caml_floatarray_create(l1 + l2 | 0);
     /*<<float.ml:205:4>>*/  /*<<float.ml:205:4>>*/ caml_floatarray_blit
     (a1, 0, result, 0, l1);
     /*<<float.ml:206:4>>*/  /*<<float.ml:206:4>>*/ caml_floatarray_blit
     (a2, 0, result, l1, l2);
     /*<<float.ml:206:4>>*/ return result;
    /*<<float.ml:207:10>>*/ }
   function concat(l){
    var acc = 0, param = l;
    for(;;){
     if(param){
       /*<<float.ml:211:4>>*/ var
       tl = param[2],
       hd = param[1],
       x = hd.length - 1 + acc | 0,
        /*<<float.ml:211:4>>*/ acc$0 =
         acc <= x
          ? x
          :  /*<<float.ml:211:26>>*/ caml_call1
            (Stdlib[1], cst_Float_Array_concat),
       acc = acc$0,
       param = tl;
      continue;
     }
      /*<<float.ml:219:4>>*/ var
       /*<<float.ml:219:4>>*/ result =
         /*<<float.ml:219:4>>*/ caml_floatarray_create(acc),
      l$0 = l,
      i = 0;
      /*<<float.ml:221:6>>*/ for(;;){
       /*<<float.ml:221:6>>*/ if(l$0){
       var tl$0 = l$0[2], hd$0 = l$0[1], hlen = hd$0.length - 1;
        /*<<float.ml:225:8>>*/  /*<<float.ml:225:8>>*/ caml_floatarray_blit
        (hd$0, 0, result, i, hlen);
        /*<<float.ml:225:8>>*/ var
         /*<<float.ml:225:8>>*/ i$0 = i + hlen | 0,
        l$0 = tl$0,
        i = i$0;
       continue;
      }
       /*<<float.ml:222:14>>*/ if(i === acc) return result;
      throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
     }
    }
    /*<<float.ml:229:10>>*/ }
   function sub(a, ofs, len){
     /*<<float.ml:232:4>>*/ check(a, ofs, len, cst_Float_Array_sub);
     /*<<float.ml:233:17>>*/  /*<<float.ml:233:17>>*/ var
     result =  /*<<float.ml:233:17>>*/ caml_floatarray_create(len);
     /*<<float.ml:234:4>>*/  /*<<float.ml:234:4>>*/ caml_floatarray_blit
     (a, ofs, result, 0, len);
     /*<<float.ml:234:4>>*/ return result;
    /*<<float.ml:235:10>>*/ }
   function copy(a){
     /*<<float.ml:238:4>>*/ var
      /*<<float.ml:238:4>>*/ l = a.length - 1,
      /*<<float.ml:239:4>>*/ result =
        /*<<float.ml:239:4>>*/ caml_floatarray_create(l);
     /*<<float.ml:240:4>>*/  /*<<float.ml:240:4>>*/ caml_floatarray_blit
     (a, 0, result, 0, l);
     /*<<float.ml:240:4>>*/ return result;
    /*<<float.ml:241:10>>*/ }
   function fill(a, ofs, len, v){
     /*<<float.ml:244:4>>*/ check(a, ofs, len, cst_Float_Array_fill);
     /*<<float.ml:244:4>>*/ return unsafe_fill(a, ofs, len, v);
    /*<<float.ml:245:27>>*/ }
   function blit(src, sofs, dst, dofs, len){
     /*<<float.ml:248:4>>*/ check(src, sofs, len, cst_Float_array_blit);
     /*<<float.ml:249:4>>*/ check(dst, dofs, len, cst_Float_array_blit$0);
     /*<<float.ml:250:4>>*/ return  /*<<float.ml:250:4>>*/ caml_floatarray_blit
            (src, sofs, dst, dofs, len);
    /*<<float.ml:250:37>>*/ }
   function to_list(a){
     /*<<float.ml:253:26>>*/ function _af_(_ag_){
      /*<<?>>*/ return a[1 + _ag_];
    }
     /*<<float.ml:253:26>>*/ return  /*<<float.ml:253:26>>*/ caml_call2
            (Stdlib_List[10], a.length - 1, _af_);
    /*<<float.ml:253:39>>*/ }
   function of_list(l){
     /*<<float.ml:256:39>>*/ var
      /*<<float.ml:256:39>>*/ result =
        /*<<float.ml:256:39>>*/ caml_floatarray_create
        ( /*<<float.ml:256:24>>*/ caml_call1(Stdlib_List[1], l)),
     i = 0,
     l$0 = l;
     /*<<float.ml:258:6>>*/ for(;;){
      /*<<float.ml:258:6>>*/ if(! l$0)  /*<<float.ml:259:14>>*/ return result;
     var t = l$0[2], h = l$0[1];
      /*<<float.ml:260:18>>*/ result[1 + i] = h;
      /*<<float.ml:260:18>>*/ var
       /*<<float.ml:260:18>>*/ i$0 = i + 1 | 0,
      i = i$0,
      l$0 = t;
    }
    /*<<float.ml:262:12>>*/ }
   function iter(f, a){
     /*<<float.ml:266:4>>*/ var
      /*<<float.ml:266:4>>*/ _ad_ = a.length - 1 - 1 | 0,
      /*<<float.ml:266:4>>*/ _ac_ = 0;
     /*<<float.ml:266:4>>*/ if(_ad_ >= 0){
     var i = _ac_;
      /*<<float.ml:266:33>>*/ for(;;){
       /*<<float.ml:266:33>>*/  /*<<float.ml:266:33>>*/ caml_call1
       (f, a[1 + i]);
       /*<<float.ml:266:33>>*/  /*<<float.ml:266:33>>*/ var _ae_ = i + 1 | 0;
       /*<<float.ml:266:33>>*/ if(_ad_ !== i){var i = _ae_; continue;}
      break;
     }
    }
    return 0;
    /*<<float.ml:266:56>>*/ }
   function iter2(f, a, b){
     /*<<float.ml:270:4>>*/ if(a.length - 1 !== b.length - 1)
      /*<<float.ml:271:6>>*/ return  /*<<float.ml:271:6>>*/ caml_call1
             (Stdlib[1], cst_Float_Array_iter2_arrays_m);
     /*<<float.ml:273:6>>*/ var
      /*<<float.ml:273:6>>*/ _aa_ = a.length - 1 - 1 | 0,
      /*<<float.ml:273:6>>*/ _$_ = 0;
     /*<<float.ml:273:6>>*/ if(_aa_ >= 0){
     var i = _$_;
      /*<<float.ml:273:35>>*/ for(;;){
       /*<<float.ml:273:35>>*/  /*<<float.ml:273:35>>*/ caml_call2
       (f, a[1 + i], b[1 + i]);
       /*<<float.ml:273:35>>*/  /*<<float.ml:273:35>>*/ var _ab_ = i + 1 | 0;
       /*<<float.ml:273:35>>*/ if(_aa_ !== i){var i = _ab_; continue;}
      break;
     }
    }
    return 0;
    /*<<float.ml:273:75>>*/ }
   function map(f, a){
     /*<<float.ml:276:4>>*/ var
      /*<<float.ml:276:4>>*/ l = a.length - 1,
      /*<<float.ml:277:4>>*/ r =
        /*<<float.ml:277:4>>*/ caml_floatarray_create(l),
      /*<<float.ml:277:4>>*/ _Z_ = l - 1 | 0,
      /*<<float.ml:277:4>>*/ _Y_ = 0;
     /*<<float.ml:277:4>>*/ if(_Z_ >= 0){
     var i = _Y_;
      /*<<float.ml:279:6>>*/ for(;;){
       /*<<float.ml:279:6>>*/ r[1 + i] =
        /*<<float.ml:279:21>>*/ caml_call1(f, a[1 + i]);
       /*<<float.ml:279:6>>*/  /*<<float.ml:279:6>>*/ var ___ = i + 1 | 0;
       /*<<float.ml:279:6>>*/ if(_Z_ !== i){var i = ___; continue;}
      break;
     }
    }
     /*<<float.ml:281:4>>*/ return r;
    /*<<float.ml:281:5>>*/ }
   function map2(f, a, b){
     /*<<float.ml:284:4>>*/ var
      /*<<float.ml:284:4>>*/ la = a.length - 1,
      /*<<float.ml:284:4>>*/ lb = b.length - 1;
     /*<<float.ml:284:4>>*/ if(la !== lb)
      /*<<float.ml:287:6>>*/ return  /*<<float.ml:287:6>>*/ caml_call1
             (Stdlib[1], cst_Float_Array_map2_arrays_mu);
     /*<<float.ml:289:14>>*/ var
      /*<<float.ml:289:14>>*/ r =
        /*<<float.ml:289:14>>*/ caml_floatarray_create(la),
      /*<<float.ml:289:14>>*/ _W_ = la - 1 | 0,
      /*<<float.ml:289:14>>*/ _V_ = 0;
     /*<<float.ml:289:14>>*/ if(_W_ >= 0){
     var i = _V_;
      /*<<float.ml:291:8>>*/ for(;;){
       /*<<float.ml:291:8>>*/ r[1 + i] =
        /*<<float.ml:291:23>>*/ caml_call2(f, a[1 + i], b[1 + i]);
       /*<<float.ml:291:8>>*/  /*<<float.ml:291:8>>*/ var _X_ = i + 1 | 0;
       /*<<float.ml:291:8>>*/ if(_W_ !== i){var i = _X_; continue;}
      break;
     }
    }
     /*<<float.ml:293:6>>*/ return r;
    /*<<float.ml:294:7>>*/ }
   function iteri(f, a){
     /*<<float.ml:298:4>>*/ var
      /*<<float.ml:298:4>>*/ _T_ = a.length - 1 - 1 | 0,
      /*<<float.ml:298:4>>*/ _S_ = 0;
     /*<<float.ml:298:4>>*/ if(_T_ >= 0){
     var i = _S_;
      /*<<float.ml:298:33>>*/ for(;;){
       /*<<float.ml:298:33>>*/  /*<<float.ml:298:33>>*/ caml_call2
       (f, i, a[1 + i]);
       /*<<float.ml:298:33>>*/  /*<<float.ml:298:33>>*/ var _U_ = i + 1 | 0;
       /*<<float.ml:298:33>>*/ if(_T_ !== i){var i = _U_; continue;}
      break;
     }
    }
    return 0;
    /*<<float.ml:298:58>>*/ }
   function mapi(f, a){
     /*<<float.ml:301:4>>*/ var
      /*<<float.ml:301:4>>*/ l = a.length - 1,
      /*<<float.ml:302:4>>*/ r =
        /*<<float.ml:302:4>>*/ caml_floatarray_create(l),
      /*<<float.ml:302:4>>*/ _Q_ = l - 1 | 0,
      /*<<float.ml:302:4>>*/ _P_ = 0;
     /*<<float.ml:302:4>>*/ if(_Q_ >= 0){
     var i = _P_;
      /*<<float.ml:304:6>>*/ for(;;){
       /*<<float.ml:304:6>>*/ r[1 + i] =
        /*<<float.ml:304:21>>*/ caml_call2(f, i, a[1 + i]);
       /*<<float.ml:304:6>>*/  /*<<float.ml:304:6>>*/ var _R_ = i + 1 | 0;
       /*<<float.ml:304:6>>*/ if(_Q_ !== i){var i = _R_; continue;}
      break;
     }
    }
     /*<<float.ml:306:4>>*/ return r;
    /*<<float.ml:306:5>>*/ }
   function fold_left(f, x, a){
     /*<<float.ml:310:4>>*/ var
      /*<<float.ml:310:4>>*/ r = [0, x],
      /*<<float.ml:310:4>>*/ _N_ = a.length - 1 - 1 | 0,
      /*<<float.ml:310:4>>*/ _M_ = 0;
     /*<<float.ml:310:4>>*/ if(_N_ >= 0){
     var i = _M_;
      /*<<float.ml:312:6>>*/ for(;;){
       /*<<float.ml:312:11>>*/ r[1] =
        /*<<float.ml:312:11>>*/ caml_call2(f, r[1], a[1 + i]);
       /*<<float.ml:312:11>>*/  /*<<float.ml:312:11>>*/ var _O_ = i + 1 | 0;
       /*<<float.ml:312:11>>*/ if(_N_ !== i){var i = _O_; continue;}
      break;
     }
    }
     /*<<float.ml:314:4>>*/ return r[1];
    /*<<float.ml:314:6>>*/ }
   function fold_right(f, a, x){
     /*<<float.ml:318:4>>*/ var
      /*<<float.ml:318:4>>*/ r = [0, x],
      /*<<float.ml:318:4>>*/ _K_ = a.length - 1 - 1 | 0;
     /*<<float.ml:318:4>>*/ if(_K_ >= 0){
     var i = _K_;
      /*<<float.ml:320:6>>*/ for(;;){
       /*<<float.ml:320:11>>*/ r[1] =
        /*<<float.ml:320:11>>*/ caml_call2(f, a[1 + i], r[1]);
       /*<<float.ml:320:11>>*/  /*<<float.ml:320:11>>*/ var _L_ = i - 1 | 0;
       /*<<float.ml:320:11>>*/ if(0 !== i){var i = _L_; continue;}
      break;
     }
    }
     /*<<float.ml:322:4>>*/ return r[1];
    /*<<float.ml:322:6>>*/ }
   function exists(p, a){
     /*<<float.ml:326:4>>*/ var
      /*<<float.ml:326:4>>*/ n = a.length - 1,
     i = 0;
     /*<<float.ml:328:6>>*/ for(;;){
      /*<<float.ml:328:6>>*/ if(i === n)  /*<<float.ml:328:20>>*/ return 0;
      /*<<float.ml:329:14>>*/ if
      ( /*<<float.ml:329:14>>*/ caml_call1(p, a[1 + i]))
       /*<<float.ml:329:38>>*/ return 1;
      /*<<float.ml:330:11>>*/ var
       /*<<float.ml:330:11>>*/ i$0 = i + 1 | 0,
      i = i$0;
    }
    /*<<float.ml:331:10>>*/ }
   function for_all(p, a){
     /*<<float.ml:335:4>>*/ var
      /*<<float.ml:335:4>>*/ n = a.length - 1,
     i = 0;
     /*<<float.ml:337:6>>*/ for(;;){
      /*<<float.ml:337:6>>*/ if(i === n)  /*<<float.ml:337:20>>*/ return 1;
      /*<<float.ml:338:14>>*/ if
      (!  /*<<float.ml:338:14>>*/ caml_call1(p, a[1 + i]))
       /*<<float.ml:339:11>>*/ return 0;
      /*<<float.ml:338:38>>*/ var
       /*<<float.ml:338:38>>*/ i$0 = i + 1 | 0,
      i = i$0;
    }
    /*<<float.ml:340:10>>*/ }
   function mem(x, a){
     /*<<float.ml:344:4>>*/ var
      /*<<float.ml:344:4>>*/ n = a.length - 1,
     i = 0;
     /*<<float.ml:346:6>>*/ for(;;){
      /*<<float.ml:346:6>>*/ if(i === n)  /*<<float.ml:346:20>>*/ return 0;
      /*<<float.ml:347:22>>*/ if
      (0 ===  /*<<float.ml:347:22>>*/ caml_float_compare(a[1 + i], x))
       /*<<float.ml:347:50>>*/ return 1;
      /*<<float.ml:348:11>>*/ var
       /*<<float.ml:348:11>>*/ i$0 = i + 1 | 0,
      i = i$0;
    }
    /*<<float.ml:350:10>>*/ }
   function mem_ieee(x, a){
     /*<<float.ml:354:4>>*/ var
      /*<<float.ml:354:4>>*/ n = a.length - 1,
     i = 0;
     /*<<float.ml:356:6>>*/ for(;;){
      /*<<float.ml:356:6>>*/ if(i === n)  /*<<float.ml:356:20>>*/ return 0;
      /*<<float.ml:357:18>>*/ if(x == a[1 + i])
       /*<<float.ml:357:40>>*/ return 1;
      /*<<float.ml:358:11>>*/ var
       /*<<float.ml:358:11>>*/ i$0 = i + 1 | 0,
      i = i$0;
    }
    /*<<float.ml:360:10>>*/ }
   var
    Bottom = [248, cst_Stdlib_Float_Array_Bottom, runtime.caml_fresh_oo_id(0)];
   function sort(cmp, a){
     /*<<float.ml:365:4>>*/ function maxson(l, i){
      /*<<float.ml:366:6>>*/ var
       /*<<float.ml:366:6>>*/ i31 = ((i + i | 0) + i | 0) + 1 | 0,
       /*<<float.ml:366:6>>*/ x = [0, i31];
      /*<<float.ml:366:6>>*/ if((i31 + 2 | 0) < l){
       /*<<float.ml:369:11>>*/ if
       ( /*<<float.ml:369:11>>*/ caml_call2
         (cmp,
           /*<<float.ml:369:15>>*/ caml_array_get(a, i31),
           /*<<float.ml:369:27>>*/ caml_array_get(a, i31 + 1 | 0))
        < 0)
        /*<<float.ml:369:52>>*/ x[1] = i31 + 1 | 0;
       /*<<float.ml:370:11>>*/ if
       ( /*<<float.ml:370:11>>*/ caml_call2
         (cmp,
           /*<<float.ml:370:15>>*/ caml_array_get(a, x[1]),
           /*<<float.ml:370:26>>*/ caml_array_get(a, i31 + 2 | 0))
        < 0)
        /*<<float.ml:370:51>>*/ x[1] = i31 + 2 | 0;
       /*<<float.ml:371:8>>*/ return x[1];
     }
      /*<<float.ml:373:24>>*/ if
      ((i31 + 1 | 0) < l
       &&
        0
        >
          /*<<float.ml:373:24>>*/ caml_call2
          (cmp,
            /*<<float.ml:373:28>>*/ caml_array_get(a, i31),
            /*<<float.ml:373:40>>*/ caml_array_get(a, i31 + 1 | 0)))
       /*<<float.ml:374:13>>*/ return i31 + 1 | 0;
      /*<<float.ml:375:13>>*/ if(i31 < l)  /*<<float.ml:375:29>>*/ return i31;
      /*<<float.ml:375:38>>*/ throw  /*<<float.ml:375:38>>*/ caml_maybe_attach_backtrace
            ([0, Bottom, i], 1);
     /*<<float.ml:375:54>>*/ }
     /*<<float.ml:365:4>>*/ var
      /*<<float.ml:365:4>>*/ l = a.length - 1,
      /*<<float.ml:365:4>>*/ _E_ = ((l + 1 | 0) / 3 | 0) - 1 | 0;
     /*<<float.ml:365:4>>*/ if(_E_ >= 0){
     var i$6 = _E_;
      /*<<float.ml:404:40>>*/ for(;;){
       /*<<float.ml:404:52>>*/  /*<<float.ml:404:52>>*/ var
       e$1 =  /*<<float.ml:404:52>>*/ caml_array_get(a, i$6);
      try{
       var i = i$6;
        /*<<float.ml:378:6>>*/ for(;;){
         /*<<float.ml:378:14>>*/  /*<<float.ml:378:14>>*/ var
         j = maxson(l, i);
         /*<<float.ml:379:9>>*/ if
         (0
          <
            /*<<float.ml:379:9>>*/ caml_call2
            (cmp,  /*<<float.ml:379:13>>*/ caml_array_get(a, j), e$1)){
          /*<<float.ml:380:8>>*/  /*<<float.ml:380:8>>*/ caml_array_set
          (a, i,  /*<<float.ml:380:16>>*/ caml_array_get(a, j));
         var i = j;
         continue;
        }
         /*<<float.ml:382:15>>*/  /*<<float.ml:382:15>>*/ caml_array_set
         (a, i, e$1);
        break;
       }
      }
      catch(exn$0){
       var exn = caml_wrap_exception(exn$0);
       if(exn[1] !== Bottom) throw caml_maybe_attach_backtrace(exn, 0);
        /*<<float.ml:386:63>>*/  /*<<float.ml:386:63>>*/ var i$0 = exn[2];
        /*<<float.ml:386:63>>*/  /*<<float.ml:386:63>>*/ caml_array_set
        (a, i$0, e$1);
      }
      var _J_ = i$6 - 1 | 0;
      if(0 !== i$6){var i$6 = _J_; continue;}
      break;
     }
    }
     /*<<float.ml:405:4>>*/  /*<<float.ml:405:4>>*/ var _F_ = l - 1 | 0;
     /*<<float.ml:405:4>>*/ if(_F_ >= 2){
     var i$4 = _F_;
     a:
      /*<<float.ml:406:6>>*/ for(;;){
       /*<<float.ml:406:14>>*/  /*<<float.ml:406:14>>*/ var
       e$0 =  /*<<float.ml:406:14>>*/ caml_array_get(a, i$4);
       /*<<float.ml:407:6>>*/  /*<<float.ml:407:6>>*/ caml_array_set
       (a, i$4,  /*<<float.ml:407:14>>*/ caml_array_get(a, 0));
       /*<<float.ml:407:6>>*/  /*<<float.ml:407:6>>*/ var i$5 = 0;
      try{
       var i$1 = i$5;
        /*<<float.ml:388:6>>*/ for(;;){
         /*<<float.ml:388:14>>*/  /*<<float.ml:388:14>>*/ var
         j$0 = maxson(i$4, i$1);
         /*<<float.ml:389:6>>*/  /*<<float.ml:389:6>>*/ caml_array_set
         (a, i$1,  /*<<float.ml:389:14>>*/ caml_array_get(a, j$0));
        var i$1 = j$0;
       }
      }
      catch(exn){
       var exn$0 = caml_wrap_exception(exn);
       if(exn$0[1] !== Bottom) throw caml_maybe_attach_backtrace(exn$0, 0);
        /*<<float.ml:392:57>>*/ var
         /*<<float.ml:392:57>>*/ i$2 = exn$0[2],
        i$3 = i$2;
        /*<<float.ml:394:6>>*/ for(;;){
         /*<<float.ml:394:6>>*/  /*<<float.ml:394:6>>*/ var
         father = (i$3 - 1 | 0) / 3 | 0;
         /*<<float.ml:394:6>>*/ if(i$3 === father)
         throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
         /*<<float.ml:396:9>>*/ if
         (0
          <=
            /*<<float.ml:396:9>>*/ caml_call2
            (cmp,  /*<<float.ml:396:13>>*/ caml_array_get(a, father), e$0))
          /*<<float.ml:399:15>>*/  /*<<float.ml:399:15>>*/ caml_array_set
          (a, i$3, e$0);
        else{
          /*<<float.ml:397:8>>*/  /*<<float.ml:397:8>>*/ caml_array_set
          (a, i$3,  /*<<float.ml:397:16>>*/ caml_array_get(a, father));
          /*<<float.ml:397:8>>*/ if(0 < father){var i$3 = father; continue;}
          /*<<float.ml:398:51>>*/  /*<<float.ml:398:51>>*/ caml_array_set
          (a, 0, e$0);
        }
        var _I_ = i$4 - 1 | 0;
        if(2 !== i$4){var i$4 = _I_; continue a;}
        break;
       }
      }
      break;
     }
    }
     /*<<float.ml:410:4>>*/  /*<<float.ml:410:4>>*/ var _G_ = 1 < l ? 1 : 0;
     /*<<float.ml:410:4>>*/ if(_G_){
      /*<<float.ml:410:27>>*/  /*<<float.ml:410:27>>*/ var
      e =  /*<<float.ml:410:27>>*/ caml_array_get(a, 1);
      /*<<float.ml:410:40>>*/  /*<<float.ml:410:40>>*/ caml_array_set
      (a, 1,  /*<<float.ml:410:48>>*/ caml_array_get(a, 0));
     var _H_ =  /*<<float.ml:410:59>>*/ caml_array_set(a, 0, e);
    }
    else
     var _H_ = _G_;
     /*<<float.ml:356:6>>*/ return _H_;
    /*<<float.ml:410:69>>*/ }
   function stable_sort(cmp, a){
     /*<<float.ml:415:4>>*/ function merge
    (src1ofs, src1len, src2, src2ofs, src2len, dst, dstofs){
      /*<<float.ml:416:6>>*/ var
       /*<<float.ml:416:6>>*/ src1r = src1ofs + src1len | 0,
       /*<<float.ml:416:6>>*/ src2r = src2ofs + src2len | 0,
       /*<<float.ml:433:46>>*/ s2$1 =
         /*<<float.ml:433:46>>*/ caml_array_get(src2, src2ofs),
       /*<<float.ml:433:22>>*/ s1$1 =
         /*<<float.ml:433:22>>*/ caml_array_get(a, src1ofs),
      i1 = src1ofs,
      s1 = s1$1,
      i2 = src2ofs,
      s2 = s2$1,
      d = dstofs;
      /*<<float.ml:418:8>>*/ for(;;){
       /*<<float.ml:418:11>>*/ if
       (0 <  /*<<float.ml:418:11>>*/ caml_call2(cmp, s1, s2)){
        /*<<float.ml:426:10>>*/  /*<<float.ml:426:10>>*/ caml_array_set
        (dst, d, s2);
        /*<<float.ml:426:10>>*/  /*<<float.ml:426:10>>*/ var
        i2$0 = i2 + 1 | 0;
        /*<<float.ml:426:10>>*/ if(i2$0 >= src2r)
         /*<<float.ml:431:12>>*/ return blit
                (a, i1, dst, d + 1 | 0, src1r - i1 | 0);
        /*<<float.ml:429:12>>*/ var
         /*<<float.ml:429:12>>*/ d$0 = d + 1 | 0,
         /*<<float.ml:429:26>>*/ s2$0 =
           /*<<float.ml:429:26>>*/ caml_array_get(src2, i2$0),
        i2 = i2$0,
        s2 = s2$0,
        d = d$0;
       continue;
      }
       /*<<float.ml:419:10>>*/  /*<<float.ml:419:10>>*/ caml_array_set
       (dst, d, s1);
       /*<<float.ml:419:10>>*/  /*<<float.ml:419:10>>*/ var i1$0 = i1 + 1 | 0;
       /*<<float.ml:419:10>>*/ if(i1$0 >= src1r)
        /*<<float.ml:424:12>>*/ return blit
               (src2, i2, dst, d + 1 | 0, src2r - i2 | 0);
       /*<<float.ml:422:12>>*/ var
        /*<<float.ml:422:12>>*/ d$1 = d + 1 | 0,
        /*<<float.ml:422:20>>*/ s1$0 =
          /*<<float.ml:422:20>>*/ caml_array_get(a, i1$0),
       i1 = i1$0,
       s1 = s1$0,
       d = d$1;
     }
     /*<<float.ml:433:72>>*/ }
     /*<<float.ml:415:4>>*/ function isortto(srcofs, dst, dstofs, len){
      /*<<float.ml:436:6>>*/ var
       /*<<float.ml:436:6>>*/ _C_ = len - 1 | 0,
       /*<<float.ml:436:6>>*/ _B_ = 0;
      /*<<float.ml:436:6>>*/ if(_C_ >= 0){
      var i = _B_;
      a:
       /*<<float.ml:437:8>>*/ for(;;){
        /*<<float.ml:437:16>>*/ var
         /*<<float.ml:437:16>>*/ e =
           /*<<float.ml:437:16>>*/ caml_array_get(a, srcofs + i | 0),
         /*<<float.ml:437:16>>*/ j = [0, (dstofs + i | 0) - 1 | 0];
       for(;;){
         /*<<float.ml:439:31>>*/ if
         (dstofs <= j[1]
          &&
           0
           <
             /*<<float.ml:439:31>>*/ caml_call2
             (cmp,  /*<<float.ml:439:35>>*/ caml_array_get(dst, j[1]), e)){
          /*<<float.ml:440:10>>*/  /*<<float.ml:440:10>>*/ caml_array_set
          (dst,
           j[1] + 1 | 0,
            /*<<float.ml:440:27>>*/ caml_array_get(dst, j[1]));
          /*<<float.ml:440:10>>*/ j[1] += -1;
         continue;
        }
         /*<<float.ml:443:8>>*/  /*<<float.ml:443:8>>*/ caml_array_set
         (dst, j[1] + 1 | 0, e);
         /*<<float.ml:443:8>>*/  /*<<float.ml:443:8>>*/ var _D_ = i + 1 | 0;
         /*<<float.ml:443:8>>*/ if(_C_ !== i){var i = _D_; continue a;}
        break;
       }
       break;
      }
     }
     return 0;
     /*<<float.ml:444:10>>*/ }
     /*<<float.ml:415:4>>*/ function sortto(srcofs, dst, dstofs, len){
      /*<<float.ml:447:6>>*/ if(len <= 5)
       /*<<float.ml:447:28>>*/ return isortto(srcofs, dst, dstofs, len);
      /*<<float.ml:447:63>>*/ var
       /*<<float.ml:447:63>>*/ l1 = len / 2 | 0,
       /*<<float.ml:447:63>>*/ l2 = len - l1 | 0;
      /*<<float.ml:450:8>>*/ sortto(srcofs + l1 | 0, dst, dstofs + l1 | 0, l2);
      /*<<float.ml:451:8>>*/ sortto(srcofs, a, srcofs + l2 | 0, l1);
      /*<<float.ml:451:8>>*/ return merge
             (srcofs + l2 | 0, l1, dst, dstofs + l1 | 0, l2, dst, dstofs);
     /*<<float.ml:453:9>>*/ }
     /*<<float.ml:415:4>>*/  /*<<float.ml:415:4>>*/ var l = a.length - 1;
     /*<<float.ml:415:4>>*/ if(l <= 5)
      /*<<float.ml:456:24>>*/ return isortto(0, a, 0, l);
     /*<<float.ml:456:45>>*/ var
      /*<<float.ml:456:45>>*/ l1 = l / 2 | 0,
      /*<<float.ml:456:45>>*/ l2 = l - l1 | 0,
      /*<<float.ml:459:6>>*/ t =
        /*<<float.ml:459:6>>*/ caml_floatarray_create(l2);
     /*<<float.ml:460:6>>*/ sortto(l1, t, 0, l2);
     /*<<float.ml:461:6>>*/ sortto(0, a, l2, l1);
     /*<<float.ml:461:6>>*/ return merge(l2, l1, t, 0, l2, a, 0);
    /*<<float.ml:463:7>>*/ }
   function to_seq(a){
     /*<<float.ml:469:4>>*/ function aux(i, param){
      /*<<float.ml:470:6>>*/ if(i >= a.length - 1)
       /*<<float.ml:474:11>>*/ return 0;
      /*<<float.ml:472:16>>*/ var
       /*<<float.ml:472:16>>*/ x = a[1 + i],
       /*<<float.ml:472:16>>*/ _z_ = i + 1 | 0;
      /*<<float.ml:473:21>>*/ return [0,
             x,
             function(_A_){ /*<<?>>*/ return aux(_z_, _A_);}];
     /*<<float.ml:474:18>>*/ }
     /*<<float.ml:469:4>>*/  /*<<float.ml:469:4>>*/ var _x_ = 0;
     /*<<float.ml:469:4>>*/ return function(_y_){
      /*<<?>>*/ return aux(_x_, _y_);};
    /*<<float.ml:476:9>>*/ }
   function to_seqi(a){
     /*<<float.ml:480:4>>*/ function aux(i, param){
      /*<<float.ml:481:6>>*/ if(i >= a.length - 1)
       /*<<float.ml:485:11>>*/ return 0;
      /*<<float.ml:483:16>>*/ var
       /*<<float.ml:483:16>>*/ x = a[1 + i],
       /*<<float.ml:483:16>>*/ _v_ = i + 1 | 0;
      /*<<float.ml:484:25>>*/ return [0,
             [0, i, x],
             function(_w_){ /*<<?>>*/ return aux(_v_, _w_);}];
     /*<<float.ml:485:18>>*/ }
     /*<<float.ml:480:4>>*/  /*<<float.ml:480:4>>*/ var _t_ = 0;
     /*<<float.ml:480:4>>*/ return function(_u_){
      /*<<?>>*/ return aux(_t_, _u_);};
    /*<<float.ml:487:9>>*/ }
   function of_seq(i$2){
     /*<<float.ml:501:4>>*/  /*<<float.ml:501:4>>*/ var _r_ = 0;
     /*<<float.ml:501:4>>*/ function _s_(acc, x){
      /*<<float.ml:501:40>>*/ return [0, x, acc];
     /*<<float.ml:501:46>>*/ }
     /*<<float.ml:501:12>>*/ var
      /*<<float.ml:501:12>>*/ l =
        /*<<float.ml:501:12>>*/ caml_call3(Stdlib_Seq[5], _s_, _r_, i$2),
      /*<<float.ml:491:14>>*/ len =
        /*<<float.ml:491:14>>*/ caml_call1(Stdlib_List[1], l),
      /*<<float.ml:492:4>>*/ a =
        /*<<float.ml:492:4>>*/ caml_floatarray_create(len),
      /*<<float.ml:492:4>>*/ i$1 = len - 1 | 0,
     i = i$1,
     param = l;
    for(;;){
     if(! param)  /*<<float.ml:494:14>>*/ return a;
     var tl = param[2], hd = param[1];
      /*<<float.ml:495:18>>*/ a[1 + i] = hd;
      /*<<float.ml:495:18>>*/ var
       /*<<float.ml:495:18>>*/ i$0 = i - 1 | 0,
      i = i$0,
      param = tl;
    }
    /*<<float.ml:502:17>>*/ }
   function map_to_array(f, a){
     /*<<float.ml:506:4>>*/  /*<<float.ml:506:4>>*/ var l = a.length - 1;
     /*<<float.ml:506:4>>*/ if(0 === l)  /*<<float.ml:507:18>>*/ return [0];
     /*<<float.ml:508:14>>*/ var
      /*<<float.ml:508:14>>*/ r =
        /*<<float.ml:508:14>>*/ runtime.caml_make_vect
        (l,  /*<<float.ml:508:27>>*/ caml_call1(f, a[1])),
      /*<<float.ml:508:14>>*/ _p_ = l - 1 | 0,
      /*<<float.ml:508:14>>*/ _o_ = 1;
     /*<<float.ml:508:14>>*/ if(_p_ >= 1){
     var i = _o_;
      /*<<float.ml:510:8>>*/ for(;;){
       /*<<float.ml:510:8>>*/ r[1 + i] =
        /*<<float.ml:510:29>>*/ caml_call1(f, a[1 + i]);
       /*<<float.ml:510:8>>*/  /*<<float.ml:510:8>>*/ var _q_ = i + 1 | 0;
       /*<<float.ml:510:8>>*/ if(_p_ !== i){var i = _q_; continue;}
      break;
     }
    }
     /*<<float.ml:512:6>>*/ return r;
    /*<<float.ml:513:7>>*/ }
   function map_from_array(f, a){
     /*<<float.ml:516:4>>*/ var
      /*<<float.ml:516:4>>*/ l = a.length - 1,
      /*<<float.ml:517:4>>*/ r =
        /*<<float.ml:517:4>>*/ caml_floatarray_create(l),
      /*<<float.ml:517:4>>*/ _m_ = l - 1 | 0,
      /*<<float.ml:517:4>>*/ _l_ = 0;
     /*<<float.ml:517:4>>*/ if(_m_ >= 0){
     var i = _l_;
      /*<<float.ml:519:6>>*/ for(;;){
       /*<<float.ml:519:6>>*/ r[1 + i] =
        /*<<float.ml:519:21>>*/ caml_call1(f, a[1 + i]);
       /*<<float.ml:519:6>>*/  /*<<float.ml:519:6>>*/ var _n_ = i + 1 | 0;
       /*<<float.ml:519:6>>*/ if(_m_ !== i){var i = _n_; continue;}
      break;
     }
    }
     /*<<float.ml:521:4>>*/ return r;
    /*<<float.ml:521:5>>*/ }
   var
    _c_ = caml_floatarray_create,
    _d_ = caml_array_set,
    _e_ = caml_array_get,
    _f_ =
      [0,
       function(_k_){ /*<<?>>*/ return _k_.length - 1;},
       _e_,
       _d_,
       make,
       _c_,
       init,
       append,
       concat,
       sub,
       copy,
       fill,
       blit,
       to_list,
       of_list,
       iter,
       iteri,
       map,
       mapi,
       fold_left,
       fold_right,
       iter2,
       map2,
       for_all,
       exists,
       mem,
       mem_ieee,
       sort,
       stable_sort,
       stable_sort,
       to_seq,
       to_seqi,
       of_seq,
       map_to_array,
       map_from_array],
    _g_ = caml_floatarray_create,
    _h_ = caml_array_set,
    _i_ = caml_array_get,
    Stdlib_Float =
      [0,
       zero,
       one,
       minus_one,
       succ,
       pred,
       infinity,
       neg_infinity,
       nan,
       pi,
       max_float,
       min_float,
       epsilon,
       is_finite,
       is_infinite,
       is_nan,
       is_integer,
       of_string_opt,
       to_string,
       caml_float_compare,
       equal,
       min,
       max,
       min_max,
       min_num,
       max_num,
       min_max_num,
       hash,
       [0,
        function(_j_){ /*<<?>>*/ return _j_.length - 1;},
        _i_,
        _h_,
        make,
        _g_,
        init,
        append,
        concat,
        sub,
        copy,
        fill,
        blit,
        to_list,
        of_list,
        iter,
        iteri,
        map,
        mapi,
        fold_left,
        fold_right,
        iter2,
        map2,
        for_all,
        exists,
        mem,
        mem_ieee,
        sort,
        stable_sort,
        stable_sort,
        to_seq,
        to_seqi,
        of_seq,
        map_to_array,
        map_from_array],
       _f_];
   runtime.caml_register_global(22, Stdlib_Float, "Stdlib__Float");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Int32
//# unitInfo: Requires: Assert_failure, Stdlib, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Assert_failure = global_data.Assert_failure,
    _b_ = [0, "int32.ml", 69, 6],
    zero = 0,
    one = 1,
    minus_one = -1;
   function succ(n){
     /*<<int32.ml:48:13>>*/ return n + 1 | 0;
    /*<<int32.ml:48:21>>*/ }
   function pred(n){
     /*<<int32.ml:49:13>>*/ return n - 1 | 0;
    /*<<int32.ml:49:21>>*/ }
   function abs(n){
     /*<<int32.ml:50:15>>*/ return  /*<<int32.ml:50:15>>*/ caml_greaterequal
             (n, 0)
            ? n
            : - n | 0;
    /*<<int32.ml:50:40>>*/ }
   var min_int = -2147483648, max_int = 2147483647;
   function lognot(n){
     /*<<int32.ml:53:15>>*/ return n ^ -1;
    /*<<int32.ml:53:29>>*/ }
   var _a_ = Stdlib_Sys[9];
   if(32 === _a_)
     /*<<int32.ml:58:6>>*/ var
      /*<<int32.ml:58:6>>*/ max_int$0 = Stdlib[19],
     unsigned_to_int =
       function(n){
         /*<<int32.ml:60:34>>*/ if
         (0 >=  /*<<int32.ml:60:11>>*/ caml_int_compare(0, n)
          && 0 >=  /*<<int32.ml:60:34>>*/ caml_int_compare(n, max_int$0))
          /*<<int32.ml:61:10>>*/ return [0, n];
         /*<<int32.ml:63:10>>*/ return 0;
        /*<<int32.ml:63:14>>*/ };
   else{
    if(64 !== _a_)
      /*<<int32.ml:69:6>>*/ throw  /*<<int32.ml:69:6>>*/ caml_maybe_attach_backtrace
            ([0, Assert_failure, _b_], 1);
    var
     unsigned_to_int =
       function(n){
         /*<<int32.ml:67:15>>*/ return [0, n & -1];
        /*<<int32.ml:67:40>>*/ };
   }
   function to_string(n){
     /*<<int32.ml:72:18>>*/ return  /*<<int32.ml:72:18>>*/ runtime.caml_format_int
            ("%d", n);
    /*<<int32.ml:72:31>>*/ }
   function of_string_opt(s){
     /*<<?>>*/ try{
      /*<<int32.ml:78:11>>*/  /*<<int32.ml:78:11>>*/ var
      _d_ = [0,  /*<<int32.ml:78:11>>*/ runtime.caml_int_of_string(s)];
     return _d_;
    }
    catch(_e_){
     var _c_ = caml_wrap_exception(_e_);
     if(_c_[1] === Stdlib[7])  /*<<int32.ml:79:20>>*/ return 0;
      /*<<int32.ml:72:18>>*/ throw  /*<<int32.ml:72:18>>*/ caml_maybe_attach_backtrace
            (_c_, 0);
    }
    /*<<int32.ml:79:24>>*/ }
   function compare(x, y){
     /*<<int32.ml:83:28>>*/ return  /*<<int32.ml:83:28>>*/ caml_int_compare
            (x, y);
    /*<<int32.ml:83:46>>*/ }
   function equal(x, y){
     /*<<int32.ml:84:26>>*/ return 0
            ===  /*<<int32.ml:84:26>>*/ caml_int_compare(x, y)
            ? 1
            : 0;
    /*<<int32.ml:84:41>>*/ }
   function unsigned_compare(n, m){
     /*<<int32.ml:87:10>>*/ return  /*<<int32.ml:87:10>>*/ caml_int_compare
            (n + 2147483648 | 0, m + 2147483648 | 0);
    /*<<int32.ml:87:41>>*/ }
   function min(x, y){
     /*<<int32.ml:89:21>>*/ return  /*<<int32.ml:89:21>>*/ runtime.caml_lessequal
             (x, y)
            ? x
            : y;
    /*<<int32.ml:89:41>>*/ }
   function max(x, y){
     /*<<int32.ml:90:21>>*/ return  /*<<int32.ml:90:21>>*/ caml_greaterequal
             (x, y)
            ? x
            : y;
    /*<<int32.ml:90:41>>*/ }
   function unsigned_div(n, d){
     /*<<int32.ml:96:5>>*/ if
     ( /*<<int32.ml:96:5>>*/ runtime.caml_lessthan(d, 0))
      /*<<int32.ml:97:7>>*/ return 0 <= unsigned_compare(n, d) ? one : zero;
     /*<<int32.ml:99:56>>*/ var
      /*<<int32.ml:99:56>>*/ q =
        /*<<int32.ml:99:53>>*/ runtime.caml_div(n >>> 1 | 0, d) << 1,
      /*<<int32.ml:100:12>>*/ r =
       n -  /*<<int32.ml:100:18>>*/ caml_mul(q, d) | 0;
     /*<<int32.ml:101:7>>*/ return 0 <= unsigned_compare(r, d) ? q + 1 | 0 : q;
    /*<<int32.ml:101:51>>*/ }
   function unsigned_rem(n, d){
     /*<<int32.ml:104:2>>*/ return n
           -  /*<<int32.ml:104:31>>*/ caml_mul(unsigned_div(n, d), d)
           | 0;
    /*<<int32.ml:104:34>>*/ }
   var
    Stdlib_Int32 =
      [0,
       zero,
       one,
       minus_one,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal,
       min,
       max];
   runtime.caml_register_global(14, Stdlib_Int32, "Stdlib__Int32");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Int64
//# unitInfo: Requires: Stdlib
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_int64_compare = runtime.caml_int64_compare,
    caml_int64_mul = runtime.caml_int64_mul,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    zero = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    one = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    minus_one = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 65535),
    min_int = runtime.caml_int64_create_lo_mi_hi(0, 0, 32768),
    max_int = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 32767),
    Stdlib = global_data.Stdlib,
    _d_ = runtime.caml_int64_create_lo_mi_hi(16777215, 16777215, 65535),
    _c_ = runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
    _b_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
    _a_ = runtime.caml_int64_create_lo_mi_hi(1, 0, 0);
   function succ(n){
     /*<<int64.ml:46:13>>*/ return  /*<<int64.ml:46:13>>*/ runtime.caml_int64_add
            (n, _a_);
    /*<<int64.ml:46:21>>*/ }
   function pred(n){
     /*<<int64.ml:47:13>>*/ return  /*<<int64.ml:47:13>>*/ caml_int64_sub
            (n, _b_);
    /*<<int64.ml:47:21>>*/ }
   function abs(n){
     /*<<int64.ml:48:15>>*/ return  /*<<int64.ml:48:15>>*/ caml_greaterequal
             (n, _c_)
            ? n
            :  /*<<int64.ml:48:35>>*/ runtime.caml_int64_neg(n);
    /*<<int64.ml:48:40>>*/ }
   function lognot(n){
     /*<<int64.ml:51:15>>*/ return  /*<<int64.ml:51:15>>*/ runtime.caml_int64_xor
            (n, _d_);
    /*<<int64.ml:51:29>>*/ }
    /*<<int64.ml:54:16>>*/  /*<<int64.ml:54:16>>*/ var
    max_int$0 =
       /*<<int64.ml:54:16>>*/ runtime.caml_int64_of_int32(Stdlib[19]);
    /*<<int64.ml:54:16>>*/ function unsigned_to_int(n){
     /*<<int64.ml:56:30>>*/ if
     (0 >=  /*<<int64.ml:56:7>>*/ caml_int64_compare(zero, n)
      && 0 >=  /*<<int64.ml:56:30>>*/ caml_int64_compare(n, max_int$0))
      /*<<int64.ml:57:6>>*/ return [0,
              /*<<int64.ml:57:6>>*/ runtime.caml_int64_to_int32(n)];
     /*<<int64.ml:59:6>>*/ return 0;
    /*<<int64.ml:59:10>>*/ }
    /*<<int64.ml:54:16>>*/ function to_string(n){
     /*<<int64.ml:62:18>>*/ return  /*<<int64.ml:62:18>>*/ runtime.caml_int64_format
            ("%d", n);
    /*<<int64.ml:62:31>>*/ }
    /*<<int64.ml:54:16>>*/ function of_string_opt(s){
     /*<<?>>*/ try{
      /*<<int64.ml:68:11>>*/  /*<<int64.ml:68:11>>*/ var
      _f_ = [0,  /*<<int64.ml:68:11>>*/ runtime.caml_int64_of_string(s)];
     return _f_;
    }
    catch(_g_){
     var _e_ = caml_wrap_exception(_g_);
     if(_e_[1] === Stdlib[7])  /*<<int64.ml:69:20>>*/ return 0;
      /*<<int64.ml:62:18>>*/ throw  /*<<int64.ml:62:18>>*/ caml_maybe_attach_backtrace
            (_e_, 0);
    }
    /*<<int64.ml:69:24>>*/ }
    /*<<int64.ml:54:16>>*/ function compare(x, y){
     /*<<int64.ml:82:28>>*/ return  /*<<int64.ml:82:28>>*/ caml_int64_compare
            (x, y);
    /*<<int64.ml:82:46>>*/ }
    /*<<int64.ml:54:16>>*/ function equal(x, y){
     /*<<int64.ml:83:26>>*/ return 0
            ===  /*<<int64.ml:83:26>>*/ caml_int64_compare(x, y)
            ? 1
            : 0;
    /*<<int64.ml:83:41>>*/ }
    /*<<int64.ml:54:16>>*/ function unsigned_compare(n, m){
     /*<<int64.ml:86:10>>*/ return  /*<<int64.ml:86:10>>*/ caml_int64_compare
            ( /*<<int64.ml:86:10>>*/ caml_int64_sub(n, min_int),
              /*<<int64.ml:86:26>>*/ caml_int64_sub(m, min_int));
    /*<<int64.ml:86:41>>*/ }
    /*<<int64.ml:54:16>>*/ function min(x, y){
     /*<<int64.ml:88:21>>*/ return  /*<<int64.ml:88:21>>*/ runtime.caml_lessequal
             (x, y)
            ? x
            : y;
    /*<<int64.ml:88:41>>*/ }
    /*<<int64.ml:54:16>>*/ function max(x, y){
     /*<<int64.ml:89:21>>*/ return  /*<<int64.ml:89:21>>*/ caml_greaterequal
             (x, y)
            ? x
            : y;
    /*<<int64.ml:89:41>>*/ }
    /*<<int64.ml:54:16>>*/ function unsigned_div(n, d){
     /*<<int64.ml:95:5>>*/ if
     ( /*<<int64.ml:95:5>>*/ runtime.caml_lessthan(d, zero))
      /*<<int64.ml:96:7>>*/ return 0 <= unsigned_compare(n, d) ? one : zero;
     /*<<int64.ml:98:56>>*/ var
      /*<<int64.ml:98:56>>*/ q =
        /*<<int64.ml:98:56>>*/ runtime.caml_int64_shift_left
        ( /*<<int64.ml:98:53>>*/ runtime.caml_int64_div
          ( /*<<int64.ml:98:28>>*/ runtime.caml_int64_shift_right_unsigned
            (n, 1),
           d),
         1),
      /*<<int64.ml:99:12>>*/ r =
        /*<<int64.ml:99:12>>*/ caml_int64_sub
        (n,  /*<<int64.ml:99:18>>*/ caml_int64_mul(q, d));
     /*<<int64.ml:100:7>>*/ return 0 <= unsigned_compare(r, d) ? succ(q) : q;
    /*<<int64.ml:100:51>>*/ }
    /*<<int64.ml:54:16>>*/ function unsigned_rem(n, d){
     /*<<int64.ml:103:2>>*/ return  /*<<int64.ml:103:2>>*/ caml_int64_sub
            (n,
              /*<<int64.ml:103:31>>*/ caml_int64_mul(unsigned_div(n, d), d));
    /*<<int64.ml:103:34>>*/ }
    /*<<int64.ml:54:16>>*/  /*<<int64.ml:54:16>>*/ var
    Stdlib_Int64 =
      [0,
       zero,
       one,
       minus_one,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal,
       min,
       max];
    /*<<int64.ml:54:16>>*/  /*<<int64.ml:54:16>>*/ runtime.caml_register_global
    (11, Stdlib_Int64, "Stdlib__Int64");
    /*<<int64.ml:54:16>>*/ return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Nativeint
//# unitInfo: Requires: Stdlib, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_greaterequal = runtime.caml_greaterequal,
    caml_int_compare = runtime.caml_int_compare,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mul = runtime.caml_mul,
    caml_wrap_exception = runtime.caml_wrap_exception,
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    zero = 0,
    one = 1,
    minus_one = -1;
   function succ(n){
     /*<<nativeint.ml:44:13>>*/ return n + 1 | 0;
    /*<<nativeint.ml:44:21>>*/ }
   function pred(n){
     /*<<nativeint.ml:45:13>>*/ return n - 1 | 0;
    /*<<nativeint.ml:45:21>>*/ }
   function abs(n){
     /*<<nativeint.ml:46:15>>*/ return  /*<<nativeint.ml:46:15>>*/ caml_greaterequal
             (n, 0)
            ? n
            : - n | 0;
    /*<<nativeint.ml:46:40>>*/ }
    /*<<nativeint.ml:48:14>>*/ var
    size = Stdlib_Sys[9],
     /*<<nativeint.ml:48:14>>*/ min_int = 1 << (size - 1 | 0),
     /*<<nativeint.ml:49:14>>*/ max_int = min_int - 1 | 0;
    /*<<nativeint.ml:49:14>>*/ function lognot(n){
     /*<<nativeint.ml:50:15>>*/ return n ^ -1;
    /*<<nativeint.ml:50:29>>*/ }
    /*<<nativeint.ml:49:14>>*/  /*<<nativeint.ml:49:14>>*/ var
    max_int$0 = Stdlib[19];
    /*<<nativeint.ml:53:16>>*/ function unsigned_to_int(n){
     /*<<nativeint.ml:55:30>>*/ if
     (0 >=  /*<<nativeint.ml:55:7>>*/ caml_int_compare(0, n)
      && 0 >=  /*<<nativeint.ml:55:30>>*/ caml_int_compare(n, max_int$0))
      /*<<nativeint.ml:56:6>>*/ return [0, n];
     /*<<nativeint.ml:58:6>>*/ return 0;
    /*<<nativeint.ml:58:10>>*/ }
    /*<<nativeint.ml:53:16>>*/ function to_string(n){
     /*<<nativeint.ml:61:18>>*/ return  /*<<nativeint.ml:61:18>>*/ runtime.caml_format_int
            ("%d", n);
    /*<<nativeint.ml:61:31>>*/ }
    /*<<nativeint.ml:53:16>>*/ function of_string_opt(s){
     /*<<?>>*/ try{
      /*<<nativeint.ml:67:11>>*/  /*<<nativeint.ml:67:11>>*/ var
      _b_ = [0,  /*<<nativeint.ml:67:11>>*/ runtime.caml_int_of_string(s)];
     return _b_;
    }
    catch(_c_){
     var _a_ = caml_wrap_exception(_c_);
     if(_a_[1] === Stdlib[7])  /*<<nativeint.ml:68:20>>*/ return 0;
      /*<<nativeint.ml:61:18>>*/ throw  /*<<nativeint.ml:61:18>>*/ caml_maybe_attach_backtrace
            (_a_, 0);
    }
    /*<<nativeint.ml:68:24>>*/ }
    /*<<nativeint.ml:53:16>>*/ function compare(x, y){
     /*<<nativeint.ml:72:28>>*/ return  /*<<nativeint.ml:72:28>>*/ caml_int_compare
            (x, y);
    /*<<nativeint.ml:72:46>>*/ }
    /*<<nativeint.ml:53:16>>*/ function equal(x, y){
     /*<<nativeint.ml:73:26>>*/ return 0
            ===  /*<<nativeint.ml:73:26>>*/ caml_int_compare(x, y)
            ? 1
            : 0;
    /*<<nativeint.ml:73:41>>*/ }
    /*<<nativeint.ml:53:16>>*/ function unsigned_compare(n, m){
     /*<<nativeint.ml:76:10>>*/ return  /*<<nativeint.ml:76:10>>*/ caml_int_compare
            (n - min_int | 0, m - min_int | 0);
    /*<<nativeint.ml:76:41>>*/ }
    /*<<nativeint.ml:53:16>>*/ function min(x, y){
     /*<<nativeint.ml:78:21>>*/ return  /*<<nativeint.ml:78:21>>*/ runtime.caml_lessequal
             (x, y)
            ? x
            : y;
    /*<<nativeint.ml:78:41>>*/ }
    /*<<nativeint.ml:53:16>>*/ function max(x, y){
     /*<<nativeint.ml:79:21>>*/ return  /*<<nativeint.ml:79:21>>*/ caml_greaterequal
             (x, y)
            ? x
            : y;
    /*<<nativeint.ml:79:41>>*/ }
    /*<<nativeint.ml:53:16>>*/ function unsigned_div(n, d){
     /*<<nativeint.ml:85:5>>*/ if
     ( /*<<nativeint.ml:85:5>>*/ runtime.caml_lessthan(d, 0))
      /*<<nativeint.ml:86:7>>*/ return 0 <= unsigned_compare(n, d)
             ? one
             : zero;
     /*<<nativeint.ml:88:56>>*/ var
      /*<<nativeint.ml:88:56>>*/ q =
        /*<<nativeint.ml:88:53>>*/ runtime.caml_div(n >>> 1 | 0, d) << 1,
      /*<<nativeint.ml:89:12>>*/ r =
       n -  /*<<nativeint.ml:89:18>>*/ caml_mul(q, d) | 0;
     /*<<nativeint.ml:90:7>>*/ return 0 <= unsigned_compare(r, d)
            ? q + 1 | 0
            : q;
    /*<<nativeint.ml:90:51>>*/ }
    /*<<nativeint.ml:53:16>>*/ function unsigned_rem(n, d){
     /*<<nativeint.ml:93:2>>*/ return n
           -  /*<<nativeint.ml:93:31>>*/ caml_mul(unsigned_div(n, d), d)
           | 0;
    /*<<nativeint.ml:93:34>>*/ }
    /*<<nativeint.ml:53:16>>*/  /*<<nativeint.ml:53:16>>*/ var
    Stdlib_Nativeint =
      [0,
       zero,
       one,
       minus_one,
       unsigned_div,
       unsigned_rem,
       succ,
       pred,
       abs,
       size,
       max_int,
       min_int,
       lognot,
       unsigned_to_int,
       of_string_opt,
       to_string,
       compare,
       unsigned_compare,
       equal,
       min,
       max];
    /*<<nativeint.ml:53:16>>*/  /*<<nativeint.ml:53:16>>*/ runtime.caml_register_global
    (12, Stdlib_Nativeint, "Stdlib__Nativeint");
    /*<<nativeint.ml:53:16>>*/ return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Lexing
//# unitInfo: Requires: Stdlib, Stdlib__Bytes, Stdlib__Int, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "",
    caml_bytes_get = runtime.caml_bytes_get,
    caml_check_bound = runtime.caml_check_bound,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<?>>*/ function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
    /*<<?>>*/ function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
    /*<<lexing.ml:238:2>>*/ var
     /*<<lexing.ml:238:2>>*/ global_data =
       /*<<lexing.ml:238:2>>*/ runtime.caml_get_global_data(),
     /*<<lexing.ml:238:2>>*/ dummy_pos = [0, cst, 0, 0, -1],
     /*<<lexing.ml:238:2>>*/ zero_pos = [0, cst, 1, 0, 0],
     /*<<lexing.ml:238:2>>*/ Stdlib_Bytes = global_data.Stdlib__Bytes,
     /*<<lexing.ml:238:2>>*/ Stdlib = global_data.Stdlib,
     /*<<lexing.ml:238:2>>*/ Stdlib_Sys = global_data.Stdlib__Sys,
     /*<<lexing.ml:238:2>>*/ Stdlib_Int = global_data.Stdlib__Int,
     /*<<lexing.ml:238:2>>*/ cst_Lexing_lex_refill_cannot_g =
      "Lexing.lex_refill: cannot grow buffer";
   function engine(tbl, state, buf){
     /*<<lexing.ml:65:15>>*/ var
      /*<<lexing.ml:65:15>>*/ result =
        /*<<lexing.ml:65:15>>*/ runtime.caml_lex_engine(tbl, state, buf),
      /*<<lexing.ml:65:15>>*/ _F_ = 0 <= result ? 1 : 0,
      /*<<lexing.ml:65:15>>*/ _G_ = _F_ ? buf[12] !== dummy_pos ? 1 : 0 : _F_;
     /*<<lexing.ml:66:53>>*/ if(_G_){
      /*<<lexing.ml:66:53>>*/ buf[11] = buf[12];
      /*<<lexing.ml:66:53>>*/  /*<<lexing.ml:66:53>>*/ var _H_ = buf[12];
      /*<<lexing.ml:66:53>>*/ buf[12] =
      [0, _H_[1], _H_[2], _H_[3], buf[4] + buf[6] | 0];
    }
     /*<<lexing.ml:71:2>>*/ return result;
    /*<<lexing.ml:71:8>>*/ }
   function new_engine(tbl, state, buf){
     /*<<lexing.ml:75:15>>*/ var
      /*<<lexing.ml:75:15>>*/ result =
        /*<<lexing.ml:75:15>>*/ runtime.caml_new_lex_engine(tbl, state, buf),
      /*<<lexing.ml:75:15>>*/ _C_ = 0 <= result ? 1 : 0,
      /*<<lexing.ml:75:15>>*/ _D_ = _C_ ? buf[12] !== dummy_pos ? 1 : 0 : _C_;
     /*<<lexing.ml:76:53>>*/ if(_D_){
      /*<<lexing.ml:76:53>>*/ buf[11] = buf[12];
      /*<<lexing.ml:76:53>>*/  /*<<lexing.ml:76:53>>*/ var _E_ = buf[12];
      /*<<lexing.ml:76:53>>*/ buf[12] =
      [0, _E_[1], _E_[2], _E_[3], buf[4] + buf[6] | 0];
    }
     /*<<lexing.ml:81:2>>*/ return result;
    /*<<lexing.ml:81:8>>*/ }
   function from_function(opt, read_fun){
     /*<<lexing.ml:148:2>>*/ if(opt)
      /*<<lexing.ml:147:37>>*/ var
       /*<<lexing.ml:147:37>>*/ sth = opt[1],
      with_positions = sth;
    else
     var with_positions = 1;
     /*<<lexing.ml:148:2>>*/ var
      /*<<lexing.ml:148:2>>*/ _o_ = with_positions ? zero_pos : dummy_pos,
      /*<<lexing.ml:158:41>>*/ _p_ = with_positions ? zero_pos : dummy_pos,
      /*<<lexing.ml:148:31>>*/ aux_buffer =
        /*<<lexing.ml:148:31>>*/ caml_create_bytes(512),
      /*<<lexing.ml:156:14>>*/ _q_ = [0],
      /*<<lexing.ml:156:14>>*/ _r_ = 0,
      /*<<lexing.ml:156:14>>*/ _s_ = 0,
      /*<<lexing.ml:156:14>>*/ _t_ = 0,
      /*<<lexing.ml:156:14>>*/ _u_ = 0,
      /*<<lexing.ml:156:14>>*/ _v_ = 0,
      /*<<lexing.ml:156:14>>*/ _w_ = 0,
      /*<<lexing.ml:156:14>>*/ _x_ = 0,
      /*<<lexing.ml:149:17>>*/ _y_ =
        /*<<lexing.ml:149:17>>*/ caml_create_bytes(1024);
     /*<<lexing.ml:148:18>>*/ return [0,
            function(lexbuf){
              /*<<lexing.ml:85:4>>*/ var
               /*<<lexing.ml:85:4>>*/ read =
                 /*<<lexing.ml:85:4>>*/ caml_call2
                 (read_fun,
                  aux_buffer,
                   /*<<lexing.ml:84:2>>*/ caml_ml_bytes_length(aux_buffer)),
               /*<<lexing.ml:85:4>>*/ n = 0 < read ? read : (lexbuf[9] = 1, 0);
              /*<<lexing.ml:96:2>>*/ if
              ( /*<<lexing.ml:96:2>>*/ caml_ml_bytes_length(lexbuf[2])
               < (lexbuf[3] + n | 0)){
               /*<<lexing.ml:96:69>>*/ if
               (((lexbuf[3] - lexbuf[5] | 0) + n | 0)
                <=  /*<<lexing.ml:96:69>>*/ caml_ml_bytes_length(lexbuf[2]))
                /*<<lexing.ml:100:9>>*/  /*<<lexing.ml:100:9>>*/ caml_call5
                (Stdlib_Bytes[11],
                 lexbuf[2],
                 lexbuf[5],
                 lexbuf[2],
                 0,
                 lexbuf[3] - lexbuf[5] | 0);
              else{
                /*<<lexing.ml:111:8>>*/  /*<<lexing.ml:111:8>>*/ var
                newlen =
                   /*<<lexing.ml:111:8>>*/ caml_call2
                   (Stdlib_Int[10],
                    2
                    *  /*<<lexing.ml:106:13>>*/ caml_ml_bytes_length(lexbuf[2])
                    | 0,
                    Stdlib_Sys[12]);
                /*<<lexing.ml:111:8>>*/ if
                (newlen < ((lexbuf[3] - lexbuf[5] | 0) + n | 0))
                 /*<<lexing.ml:113:11>>*/  /*<<lexing.ml:113:11>>*/ caml_call1
                 (Stdlib[2], cst_Lexing_lex_refill_cannot_g);
                /*<<lexing.ml:114:19>>*/  /*<<lexing.ml:114:19>>*/ var
                newbuf =  /*<<lexing.ml:114:19>>*/ caml_create_bytes(newlen);
                /*<<lexing.ml:116:6>>*/  /*<<lexing.ml:116:6>>*/ caml_call5
                (Stdlib_Bytes[11],
                 lexbuf[2],
                 lexbuf[5],
                 newbuf,
                 0,
                 lexbuf[3] - lexbuf[5] | 0);
                /*<<lexing.ml:116:6>>*/ lexbuf[2] = newbuf;
              }
               /*<<lexing.ml:123:4>>*/  /*<<lexing.ml:123:4>>*/ var
               s = lexbuf[5];
               /*<<lexing.ml:123:4>>*/ lexbuf[4] = lexbuf[4] + s | 0;
               /*<<lexing.ml:123:4>>*/ lexbuf[6] = lexbuf[6] - s | 0;
               /*<<lexing.ml:123:4>>*/ lexbuf[5] = 0;
               /*<<lexing.ml:123:4>>*/ lexbuf[7] = lexbuf[7] - s | 0;
               /*<<lexing.ml:123:4>>*/ lexbuf[3] = lexbuf[3] - s | 0;
               /*<<lexing.ml:123:4>>*/ var
                /*<<lexing.ml:123:4>>*/ t = lexbuf[10],
                /*<<lexing.ml:123:4>>*/ _A_ = t.length - 1 - 1 | 0,
                /*<<lexing.ml:123:4>>*/ _z_ = 0;
               /*<<lexing.ml:123:4>>*/ if(_A_ >= 0){
               var i = _z_;
                /*<<lexing.ml:131:6>>*/ for(;;){
                 /*<<lexing.ml:131:14>>*/  /*<<lexing.ml:131:14>>*/ var
                 v =  /*<<lexing.ml:131:14>>*/ caml_check_bound(t, i)[1 + i];
                 /*<<lexing.ml:131:14>>*/ if(0 <= v)
                  /*<<lexing.ml:133:8>>*/  /*<<lexing.ml:133:8>>*/ caml_check_bound
                   (t, i)
                  [1 + i]
                 = v - s | 0;
                 /*<<lexing.ml:133:20>>*/  /*<<lexing.ml:133:20>>*/ var
                 _B_ = i + 1 | 0;
                 /*<<lexing.ml:133:20>>*/ if(_A_ !== i){
                 var i = _B_;
                 continue;
                }
                break;
               }
              }
             }
              /*<<lexing.ml:137:2>>*/  /*<<lexing.ml:137:2>>*/ caml_call5
              (Stdlib_Bytes[11], aux_buffer, 0, lexbuf[2], lexbuf[3], n);
              /*<<lexing.ml:137:2>>*/ lexbuf[3] = lexbuf[3] + n | 0;
              /*<<lexing.ml:137:2>>*/ return 0;
            },
            _y_,
            _x_,
            _w_,
            _v_,
            _u_,
            _t_,
            _s_,
            _r_,
            _q_,
            _p_,
            _o_];
    /*<<lexing.ml:160:3>>*/ }
   function from_channel(with_positions, ic){
     /*<<lexing.ml:163:2>>*/ return from_function
            (with_positions,
             function(buf, n){
               /*<<lexing.ml:163:46>>*/ return  /*<<lexing.ml:163:46>>*/ caml_call4
                      (Stdlib[84], ic, buf, 0, n);
              /*<<lexing.ml:163:62>>*/ });
    /*<<lexing.ml:163:63>>*/ }
   function from_string(opt, s){
     /*<<lexing.ml:166:2>>*/ if(opt)
      /*<<lexing.ml:165:35>>*/ var
       /*<<lexing.ml:165:35>>*/ sth = opt[1],
      with_positions = sth;
    else
     var with_positions = 1;
     /*<<lexing.ml:166:2>>*/ var
      /*<<lexing.ml:166:2>>*/ _d_ = with_positions ? zero_pos : dummy_pos,
      /*<<lexing.ml:177:41>>*/ _e_ = with_positions ? zero_pos : dummy_pos,
      /*<<lexing.ml:175:14>>*/ _f_ = [0],
      /*<<lexing.ml:175:14>>*/ _g_ = 1,
      /*<<lexing.ml:175:14>>*/ _h_ = 0,
      /*<<lexing.ml:175:14>>*/ _i_ = 0,
      /*<<lexing.ml:175:14>>*/ _j_ = 0,
      /*<<lexing.ml:175:14>>*/ _k_ = 0,
      /*<<lexing.ml:175:14>>*/ _l_ = 0,
      /*<<lexing.ml:175:14>>*/ _m_ =
        /*<<lexing.ml:175:14>>*/ runtime.caml_ml_string_length(s),
      /*<<lexing.ml:167:17>>*/ _n_ =
        /*<<lexing.ml:167:17>>*/ caml_call1(Stdlib_Bytes[5], s);
     /*<<lexing.ml:167:17>>*/ return [0,
            function(lexbuf){
              /*<<lexing.ml:166:33>>*/ lexbuf[9] = 1;
              /*<<lexing.ml:166:33>>*/ return 0;
             /*<<lexing.ml:166:63>>*/ },
            _n_,
            _m_,
            _l_,
            _k_,
            _j_,
            _i_,
            _h_,
            _g_,
            _f_,
            _e_,
            _d_];
    /*<<lexing.ml:179:3>>*/ }
   function set_position(lexbuf, position){
     /*<<lexing.ml:182:2>>*/ lexbuf[12] =
     [0, lexbuf[12][1], position[2], position[3], position[4]];
     /*<<lexing.ml:182:2>>*/ lexbuf[4] = position[4];
     /*<<lexing.ml:182:2>>*/ return 0;
    /*<<lexing.ml:183:41>>*/ }
   function set_filename(lexbuf, fname){
     /*<<lexing.ml:186:2>>*/  /*<<lexing.ml:186:2>>*/ var _c_ = lexbuf[12];
     /*<<lexing.ml:186:2>>*/ lexbuf[12] = [0, fname, _c_[2], _c_[3], _c_[4]];
     /*<<lexing.ml:186:2>>*/ return 0;
    /*<<lexing.ml:186:65>>*/ }
   function with_positions(lexbuf){
     /*<<lexing.ml:188:28>>*/ return lexbuf[12] !== dummy_pos ? 1 : 0;
    /*<<lexing.ml:188:58>>*/ }
   function lexeme(lexbuf){
     /*<<lexing.ml:191:2>>*/  /*<<lexing.ml:191:2>>*/ var
     len = lexbuf[6] - lexbuf[5] | 0;
     /*<<lexing.ml:191:2>>*/ return  /*<<lexing.ml:191:2>>*/ caml_call3
            (Stdlib_Bytes[8], lexbuf[2], lexbuf[5], len);
    /*<<lexing.ml:192:61>>*/ }
   function sub_lexeme(lexbuf, i1, i2){
     /*<<lexing.ml:195:2>>*/  /*<<lexing.ml:195:2>>*/ var len = i2 - i1 | 0;
     /*<<lexing.ml:195:2>>*/ return  /*<<lexing.ml:195:2>>*/ caml_call3
            (Stdlib_Bytes[8], lexbuf[2], i1, len);
    /*<<lexing.ml:196:43>>*/ }
   function sub_lexeme_opt(lexbuf, i1, i2){
     /*<<lexing.ml:199:2>>*/ if(0 > i1)  /*<<lexing.ml:202:11>>*/ return 0;
     /*<<lexing.ml:199:18>>*/  /*<<lexing.ml:199:18>>*/ var len = i2 - i1 | 0;
     /*<<lexing.ml:201:9>>*/ return [0,
             /*<<lexing.ml:201:9>>*/ caml_call3
             (Stdlib_Bytes[8], lexbuf[2], i1, len)];
    /*<<lexing.ml:204:5>>*/ }
   function sub_lexeme_char(lexbuf, i){
     /*<<lexing.ml:206:31>>*/ return  /*<<lexing.ml:206:31>>*/ caml_bytes_get
            (lexbuf[2], i);
    /*<<lexing.ml:206:60>>*/ }
   function sub_lexeme_char_opt(lexbuf, i){
     /*<<lexing.ml:209:2>>*/ return 0 <= i
            ? [0,  /*<<lexing.ml:210:9>>*/ caml_bytes_get(lexbuf[2], i)]
            : 0;
    /*<<lexing.ml:212:8>>*/ }
   function lexeme_char(lexbuf, i){
     /*<<lexing.ml:216:2>>*/ return  /*<<lexing.ml:216:2>>*/ caml_bytes_get
            (lexbuf[2], lexbuf[5] + i | 0);
    /*<<lexing.ml:216:56>>*/ }
   function lexeme_start(lexbuf){
     /*<<lexing.ml:218:26>>*/ return lexbuf[11][4];
    /*<<lexing.ml:218:53>>*/ }
   function lexeme_end(lexbuf){
     /*<<lexing.ml:219:24>>*/ return lexbuf[12][4];
    /*<<lexing.ml:219:50>>*/ }
   function lexeme_start_p(lexbuf){
     /*<<lexing.ml:221:28>>*/ return lexbuf[11];
    /*<<lexing.ml:221:46>>*/ }
   function lexeme_end_p(lexbuf){
     /*<<lexing.ml:222:26>>*/ return lexbuf[12];
    /*<<lexing.ml:222:43>>*/ }
   function new_line(lexbuf){
     /*<<lexing.ml:225:2>>*/ var
      /*<<lexing.ml:225:2>>*/ lcp = lexbuf[12],
      /*<<lexing.ml:225:2>>*/ _a_ = lcp !== dummy_pos ? 1 : 0,
      /*<<lexing.ml:225:2>>*/ _b_ =
       _a_
        ? (lexbuf[12] = [0, lcp[1], lcp[2] + 1 | 0, lcp[4], lcp[4]], 0)
        : _a_;
     /*<<lexing.ml:222:26>>*/ return _b_;
    /*<<lexing.ml:231:7>>*/ }
   function flush_input(lb){
     /*<<lexing.ml:238:2>>*/ lb[6] = 0;
     /*<<lexing.ml:238:2>>*/ lb[4] = 0;
     /*<<lexing.ml:238:2>>*/  /*<<lexing.ml:238:2>>*/ var lcp = lb[12];
     /*<<lexing.ml:238:2>>*/ if(lcp !== dummy_pos)
      /*<<lexing.ml:242:4>>*/ lb[12] =
      [0, lcp[1], zero_pos[2], zero_pos[3], zero_pos[4]];
     /*<<lexing.ml:243:2>>*/ lb[3] = 0;
     /*<<lexing.ml:243:2>>*/ return 0;
    /*<<lexing.ml:243:25>>*/ }
   var
    Stdlib_Lexing =
      [0,
       dummy_pos,
       from_channel,
       from_string,
       from_function,
       set_position,
       set_filename,
       with_positions,
       lexeme,
       lexeme_char,
       lexeme_start,
       lexeme_end,
       lexeme_start_p,
       lexeme_end_p,
       new_line,
       flush_input,
       sub_lexeme,
       sub_lexeme_opt,
       sub_lexeme_char,
       sub_lexeme_char_opt,
       engine,
       new_engine];
   runtime.caml_register_global(7, Stdlib_Lexing, "Stdlib__Lexing");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Parsing
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__Lexing, Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
    /*<<?>>*/ function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
    /*<<parsing.ml:90:14>>*/ var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Obj = global_data.Stdlib__Obj,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Lexing = global_data.Stdlib__Lexing,
    YYexit = [248, "Stdlib.Parsing.YYexit", caml_fresh_oo_id(0)],
    Parse_error = [248, "Stdlib.Parsing.Parse_error", caml_fresh_oo_id(0)],
     /*<<parsing.ml:90:14>>*/ env =
      [0,
        /*<<parsing.ml:90:14>>*/ caml_make_vect(100, 0),
        /*<<parsing.ml:91:14>>*/ caml_make_vect(100, 0),
        /*<<parsing.ml:92:23>>*/ caml_make_vect(100, Stdlib_Lexing[1]),
        /*<<parsing.ml:93:21>>*/ caml_make_vect(100, Stdlib_Lexing[1]),
       100,
       0,
       0,
       0,
       Stdlib_Lexing[1],
       Stdlib_Lexing[1],
       0,
       0,
       0,
       0,
       0,
       0],
    cst_syntax_error = "syntax error";
    /*<<parsing.ml:90:14>>*/ function grow_stacks(param){
     /*<<parsing.ml:108:2>>*/ var
      /*<<parsing.ml:108:2>>*/ oldsize = env[5],
      /*<<parsing.ml:108:2>>*/ newsize = oldsize * 2 | 0,
      /*<<parsing.ml:110:14>>*/ new_s =
        /*<<parsing.ml:110:14>>*/ caml_make_vect(newsize, 0),
      /*<<parsing.ml:111:14>>*/ new_v =
        /*<<parsing.ml:111:14>>*/ caml_make_vect(newsize, 0),
      /*<<parsing.ml:112:18>>*/ new_start =
        /*<<parsing.ml:112:18>>*/ caml_make_vect(newsize, Stdlib_Lexing[1]),
      /*<<parsing.ml:113:16>>*/ new_end =
        /*<<parsing.ml:113:16>>*/ caml_make_vect(newsize, Stdlib_Lexing[1]);
     /*<<parsing.ml:114:4>>*/  /*<<parsing.ml:114:4>>*/ caml_call5
     (Stdlib_Array[8], env[1], 0, new_s, 0, oldsize);
     /*<<parsing.ml:114:4>>*/ env[1] = new_s;
     /*<<parsing.ml:116:4>>*/  /*<<parsing.ml:116:4>>*/ caml_call5
     (Stdlib_Array[8], env[2], 0, new_v, 0, oldsize);
     /*<<parsing.ml:116:4>>*/ env[2] = new_v;
     /*<<parsing.ml:118:4>>*/  /*<<parsing.ml:118:4>>*/ caml_call5
     (Stdlib_Array[8], env[3], 0, new_start, 0, oldsize);
     /*<<parsing.ml:118:4>>*/ env[3] = new_start;
     /*<<parsing.ml:120:4>>*/  /*<<parsing.ml:120:4>>*/ caml_call5
     (Stdlib_Array[8], env[4], 0, new_end, 0, oldsize);
     /*<<parsing.ml:120:4>>*/ env[4] = new_end;
     /*<<parsing.ml:120:4>>*/ env[5] = newsize;
     /*<<parsing.ml:120:4>>*/ return 0;
    /*<<parsing.ml:122:28>>*/ }
    /*<<parsing.ml:90:14>>*/ function clear_parser(param){
     /*<<parsing.ml:125:2>>*/  /*<<parsing.ml:125:2>>*/ caml_call4
     (Stdlib_Array[7], env[2], 0, env[5], 0);
     /*<<parsing.ml:125:2>>*/ env[8] = 0;
     /*<<parsing.ml:125:2>>*/ return 0;
    /*<<parsing.ml:126:25>>*/ }
    /*<<parsing.ml:90:14>>*/  /*<<parsing.ml:90:14>>*/ var
    current_lookahead_fun =
      [0,
       function(param){
         /*<<parsing.ml:128:52>>*/ return 0;
        /*<<parsing.ml:128:57>>*/ }];
    /*<<parsing.ml:90:14>>*/ function yyparse(tables, start, lexer, lexbuf){
     /*<<parsing.ml:131:2>>*/ var
      /*<<parsing.ml:131:2>>*/ init_asp = env[11],
      /*<<parsing.ml:131:2>>*/ init_sp = env[14],
      /*<<parsing.ml:131:2>>*/ init_stackbase = env[6],
      /*<<parsing.ml:131:2>>*/ init_state = env[15],
      /*<<parsing.ml:131:2>>*/ init_curr_char = env[7],
      /*<<parsing.ml:131:2>>*/ init_lval = env[8],
      /*<<parsing.ml:131:2>>*/ init_errflag = env[16];
     /*<<parsing.ml:131:2>>*/ env[6] = env[14] + 1 | 0;
     /*<<parsing.ml:131:2>>*/ env[7] = start;
     /*<<parsing.ml:131:2>>*/ env[10] = lexbuf[12];
    try{
     var cmd = 0, arg = 0;
      /*<<parsing.ml:132:4>>*/ for(;;)
       /*<<parsing.ml:132:10>>*/ switch
       ( /*<<parsing.ml:132:10>>*/ runtime.caml_parse_engine
         (tables, env, cmd, arg)){
        case 0:
          /*<<parsing.ml:134:24>>*/  /*<<parsing.ml:134:24>>*/ var
          arg$0 =  /*<<parsing.ml:134:24>>*/ caml_call1(lexer, lexbuf);
          /*<<parsing.ml:134:24>>*/ env[9] = lexbuf[11];
          /*<<parsing.ml:134:24>>*/ env[10] = lexbuf[12];
         var cmd = 1, arg = arg$0;
         continue;
        case 1:
          /*<<parsing.ml:139:8>>*/ throw  /*<<parsing.ml:139:8>>*/ caml_maybe_attach_backtrace
                (Parse_error, 1);
        case 2:
          /*<<parsing.ml:148:8>>*/ grow_stacks(0);
         var cmd = 2, arg = 0;
         continue;
        case 3:
          /*<<parsing.ml:150:8>>*/ grow_stacks(0);
         var cmd = 3, arg = 0;
         continue;
        case 4:
         try{
           /*<<parsing.ml:143:71>>*/ var
           _i_ = env[13],
            /*<<parsing.ml:143:71>>*/ _j_ =
              /*<<parsing.ml:143:71>>*/ caml_call1
              ( /*<<parsing.ml:143:39>>*/ caml_check_bound(tables[1], _i_)
                [1 + _i_],
               env),
            /*<<parsing.ml:143:71>>*/ _k_ = 4,
           value = _j_,
           action = _k_;
         }
         catch(_m_){
          var _h_ = caml_wrap_exception(_m_);
          if(_h_ !== Parse_error)
            /*<<parsing.ml:146:8>>*/ throw  /*<<parsing.ml:146:8>>*/ caml_maybe_attach_backtrace
                  (_h_, 0);
          var value = 0, action = 5;
         }
         var cmd = action, arg = value;
         continue;
        default:
          /*<<parsing.ml:152:8>>*/  /*<<parsing.ml:152:8>>*/ caml_call1
          (tables[14], cst_syntax_error);
         var cmd = 5, arg = 0;
         continue;
      }
    }
    catch(exn$0){
      /*<<parsing.ml:167:4>>*/ var
      exn = caml_wrap_exception(exn$0),
       /*<<parsing.ml:167:4>>*/ curr_char = env[7];
      /*<<parsing.ml:167:4>>*/ env[11] = init_asp;
      /*<<parsing.ml:167:4>>*/ env[14] = init_sp;
      /*<<parsing.ml:167:4>>*/ env[6] = init_stackbase;
      /*<<parsing.ml:167:4>>*/ env[15] = init_state;
      /*<<parsing.ml:167:4>>*/ env[7] = init_curr_char;
      /*<<parsing.ml:167:4>>*/ env[8] = init_lval;
      /*<<parsing.ml:167:4>>*/ env[16] = init_errflag;
      /*<<parsing.ml:167:4>>*/ if(exn[1] === YYexit){
       /*<<parsing.ml:177:8>>*/  /*<<parsing.ml:177:8>>*/ var v = exn[2];
       /*<<parsing.ml:177:8>>*/ return v;
     }
      /*<<parsing.ml:179:8>>*/ current_lookahead_fun[1] =
      function(tok){
        /*<<parsing.ml:181:15>>*/ if
        (!  /*<<parsing.ml:181:15>>*/ caml_call1(Stdlib_Obj[1], tok))
         /*<<parsing.ml:183:17>>*/ return  /*<<parsing.ml:183:17>>*/ caml_check_bound
                  (tables[2], tok)
                 [1 + tok]
                === curr_char
                ? 1
                : 0;
        /*<<parsing.ml:182:38>>*/  /*<<parsing.ml:182:38>>*/ var
        _l_ =  /*<<parsing.ml:182:38>>*/ runtime.caml_obj_tag(tok);
        /*<<parsing.ml:182:17>>*/ return  /*<<parsing.ml:182:17>>*/ caml_check_bound
                 (tables[3], _l_)
                [1 + _l_]
               === curr_char
               ? 1
               : 0;
       /*<<parsing.ml:183:64>>*/ };
      /*<<parsing.ml:179:8>>*/ throw  /*<<parsing.ml:179:8>>*/ caml_maybe_attach_backtrace
            (exn, 0);
    }
    /*<<parsing.ml:184:17>>*/ }
    /*<<parsing.ml:90:14>>*/ function peek_val(env, n){
     /*<<parsing.ml:187:2>>*/  /*<<parsing.ml:187:2>>*/ var
     _g_ = env[11] - n | 0;
     /*<<parsing.ml:187:12>>*/ return  /*<<parsing.ml:187:12>>*/ caml_check_bound
             (env[2], _g_)
            [1 + _g_];
    /*<<parsing.ml:187:37>>*/ }
    /*<<parsing.ml:90:14>>*/ function symbol_start_pos(param){
     /*<<parsing.ml:190:2>>*/ var
      /*<<parsing.ml:190:2>>*/ i$1 = env[12],
     i = i$1;
     /*<<parsing.ml:191:4>>*/ for(;;){
      /*<<parsing.ml:191:4>>*/ if(0 >= i){
       /*<<parsing.ml:191:19>>*/  /*<<parsing.ml:191:19>>*/ var _f_ = env[11];
       /*<<parsing.ml:191:19>>*/ return  /*<<parsing.ml:191:19>>*/ caml_check_bound
               (env[4], _f_)
              [1 + _f_];
     }
      /*<<parsing.ml:192:9>>*/ var
       /*<<parsing.ml:192:9>>*/ _d_ = (env[11] - i | 0) + 1 | 0,
       /*<<parsing.ml:193:15>>*/ st =
         /*<<parsing.ml:193:15>>*/ caml_check_bound(env[3], _d_)[1 + _d_],
       /*<<parsing.ml:193:15>>*/ _e_ = (env[11] - i | 0) + 1 | 0,
       /*<<parsing.ml:194:15>>*/ en =
         /*<<parsing.ml:194:15>>*/ caml_check_bound(env[4], _e_)[1 + _e_];
      /*<<parsing.ml:195:9>>*/ if
      ( /*<<parsing.ml:195:9>>*/ runtime.caml_notequal(st, en))
       /*<<parsing.ml:195:23>>*/ return st;
      /*<<parsing.ml:195:31>>*/ var
       /*<<parsing.ml:195:31>>*/ i$0 = i - 1 | 0,
      i = i$0;
    }
    /*<<parsing.ml:198:19>>*/ }
    /*<<parsing.ml:90:14>>*/ function symbol_end_pos(param){
     /*<<parsing.ml:200:24>>*/  /*<<parsing.ml:200:24>>*/ var _c_ = env[11];
     /*<<parsing.ml:200:24>>*/ return  /*<<parsing.ml:200:24>>*/ caml_check_bound
             (env[4], _c_)
            [1 + _c_];
    /*<<parsing.ml:200:52>>*/ }
    /*<<parsing.ml:90:14>>*/ function rhs_start_pos(n){
     /*<<parsing.ml:201:22>>*/  /*<<parsing.ml:201:22>>*/ var
     _b_ = env[11] - (env[12] - n | 0) | 0;
     /*<<parsing.ml:201:22>>*/ return  /*<<parsing.ml:201:22>>*/ caml_check_bound
             (env[3], _b_)
            [1 + _b_];
    /*<<parsing.ml:201:73>>*/ }
    /*<<parsing.ml:90:14>>*/ function rhs_end_pos(n){
     /*<<parsing.ml:202:20>>*/  /*<<parsing.ml:202:20>>*/ var
     _a_ = env[11] - (env[12] - n | 0) | 0;
     /*<<parsing.ml:202:20>>*/ return  /*<<parsing.ml:202:20>>*/ caml_check_bound
             (env[4], _a_)
            [1 + _a_];
    /*<<parsing.ml:202:69>>*/ }
    /*<<parsing.ml:90:14>>*/ function symbol_start(param){
     /*<<parsing.ml:204:22>>*/ return symbol_start_pos(0)[4];
    /*<<parsing.ml:204:52>>*/ }
    /*<<parsing.ml:90:14>>*/ function symbol_end(param){
     /*<<parsing.ml:205:20>>*/ return symbol_end_pos(0)[4];
    /*<<parsing.ml:205:48>>*/ }
    /*<<parsing.ml:90:14>>*/ function rhs_start(n){
     /*<<parsing.ml:206:18>>*/ return rhs_start_pos(n)[4];
    /*<<parsing.ml:206:44>>*/ }
    /*<<parsing.ml:90:14>>*/ function rhs_end(n){
     /*<<parsing.ml:207:16>>*/ return rhs_end_pos(n)[4];
    /*<<parsing.ml:207:40>>*/ }
    /*<<parsing.ml:90:14>>*/ function is_current_lookahead(tok){
     /*<<parsing.ml:210:2>>*/ return  /*<<parsing.ml:210:2>>*/ caml_call1
            (current_lookahead_fun[1], tok);
    /*<<parsing.ml:210:40>>*/ }
    /*<<parsing.ml:90:14>>*/ function parse_error(param){
     /*<<parsing.ml:212:31>>*/ return 0;
    /*<<parsing.ml:212:33>>*/ }
    /*<<parsing.ml:90:14>>*/  /*<<parsing.ml:90:14>>*/ var
    Stdlib_Parsing =
      [0,
       symbol_start,
       symbol_end,
       rhs_start,
       rhs_end,
       symbol_start_pos,
       symbol_end_pos,
       rhs_start_pos,
       rhs_end_pos,
       clear_parser,
       Parse_error,
       runtime.caml_set_parser_trace,
       YYexit,
       yyparse,
       peek_val,
       is_current_lookahead,
       parse_error];
    /*<<parsing.ml:90:14>>*/  /*<<parsing.ml:90:14>>*/ runtime.caml_register_global
    (7, Stdlib_Parsing, "Stdlib__Parsing");
    /*<<parsing.ml:90:14>>*/ return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Set
//# unitInfo: Requires: Assert_failure, Stdlib, Stdlib__List, Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Set_bal$3 = "Set.bal",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<set.ml:72:11>>*/ var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_List = global_data.Stdlib__List,
    Assert_failure = global_data.Assert_failure,
    cst_Set_remove_min_elt = "Set.remove_min_elt",
    _a_ = [0, 0, 0, 0],
    _b_ = [0, 0, 0],
    _c_ = [0, "set.ml", 570, 18],
    cst_Set_bal = cst_Set_bal$3,
    cst_Set_bal$0 = cst_Set_bal$3,
    cst_Set_bal$1 = cst_Set_bal$3,
    cst_Set_bal$2 = cst_Set_bal$3,
     /*<<set.ml:72:11>>*/ Stdlib_Set =
      [0,
       function(Ord){
        function height(param){
          /*<<set.ml:80:17>>*/ if(! param)  /*<<set.ml:81:17>>*/ return 0;
          /*<<set.ml:82:20>>*/  /*<<set.ml:82:20>>*/ var h = param[4];
          /*<<set.ml:82:20>>*/ return h;
         /*<<set.ml:82:21>>*/ }
        function create(l, v, r){
          /*<<set.ml:90:6>>*/ if(l)
           /*<<set.ml:90:53>>*/ var  /*<<set.ml:90:53>>*/ h = l[4], hl = h;
         else
          var hl = 0;
          /*<<set.ml:91:6>>*/ if(r)
           /*<<set.ml:91:53>>*/ var
            /*<<set.ml:91:53>>*/ h$0 = r[4],
           hr = h$0;
         else
          var hr = 0;
          /*<<set.ml:92:6>>*/  /*<<set.ml:92:6>>*/ var
          _Z_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
         return [0, l, v, r, _Z_];
         /*<<set.ml:92:60>>*/ }
        function bal(l, v, r){
          /*<<set.ml:100:6>>*/ if(l)
           /*<<set.ml:100:53>>*/ var  /*<<set.ml:100:53>>*/ h = l[4], hl = h;
         else
          var hl = 0;
          /*<<set.ml:101:6>>*/ if(r)
           /*<<set.ml:101:53>>*/ var
            /*<<set.ml:101:53>>*/ h$0 = r[4],
           hr = h$0;
         else
          var hr = 0;
          /*<<set.ml:102:6>>*/ if((hr + 2 | 0) < hl){
           /*<<set.ml:102:26>>*/ if(! l)
            /*<<set.ml:104:19>>*/ return  /*<<set.ml:104:19>>*/ caml_call1
                   (Stdlib[1], cst_Set_bal$0);
           /*<<set.ml:106:28>>*/ var
           lr = l[3],
           lv = l[2],
           ll = l[1],
            /*<<set.ml:106:28>>*/ _U_ = height(lr);
           /*<<set.ml:106:15>>*/ if(_U_ <= height(ll))
            /*<<set.ml:107:27>>*/ return create(ll, lv, create(lr, v, r));
           /*<<set.ml:108:17>>*/ if(! lr)
            /*<<set.ml:110:25>>*/ return  /*<<set.ml:110:25>>*/ caml_call1
                   (Stdlib[1], cst_Set_bal);
           /*<<set.ml:112:48>>*/ var
           lrr = lr[3],
           lrv = lr[2],
           lrl = lr[1],
            /*<<set.ml:112:48>>*/ _V_ = create(lrr, v, r);
           /*<<set.ml:112:25>>*/ return create(create(ll, lv, lrl), lrv, _V_);
         }
          /*<<set.ml:114:15>>*/ if((hl + 2 | 0) >= hr){
           /*<<set.ml:127:8>>*/  /*<<set.ml:127:8>>*/ var
           _Y_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
          return [0, l, v, r, _Y_];
         }
          /*<<set.ml:114:35>>*/ if(! r)
           /*<<set.ml:116:19>>*/ return  /*<<set.ml:116:19>>*/ caml_call1
                  (Stdlib[1], cst_Set_bal$2);
          /*<<set.ml:118:28>>*/ var
          rr = r[3],
          rv = r[2],
          rl = r[1],
           /*<<set.ml:118:28>>*/ _W_ = height(rl);
          /*<<set.ml:118:15>>*/ if(_W_ <= height(rr))
           /*<<set.ml:119:21>>*/ return create(create(l, v, rl), rv, rr);
          /*<<set.ml:120:17>>*/ if(! rl)
           /*<<set.ml:122:25>>*/ return  /*<<set.ml:122:25>>*/ caml_call1
                  (Stdlib[1], cst_Set_bal$1);
          /*<<set.ml:124:46>>*/ var
          rlr = rl[3],
          rlv = rl[2],
          rll = rl[1],
           /*<<set.ml:124:46>>*/ _X_ = create(rlr, rv, rr);
          /*<<set.ml:124:25>>*/ return create(create(l, v, rll), rlv, _X_);
         /*<<set.ml:127:62>>*/ }
        function add(x, t){
          /*<<?>>*/ if(! t)  /*<<set.ml:132:17>>*/ return [0, 0, x, 0, 1];
          /*<<set.ml:134:18>>*/ var
          r = t[3],
          v = t[2],
          l = t[1],
           /*<<set.ml:134:18>>*/ c =
             /*<<set.ml:134:18>>*/ caml_call2(Ord[1], x, v);
          /*<<set.ml:134:18>>*/ if(0 === c)  /*<<set.ml:135:24>>*/ return t;
          /*<<set.ml:136:10>>*/ if(0 <= c){
           /*<<set.ml:140:21>>*/  /*<<set.ml:140:21>>*/ var rr = add(x, r);
           /*<<set.ml:140:21>>*/ return r === rr ? t : bal(l, v, rr);
         }
          /*<<set.ml:137:21>>*/  /*<<set.ml:137:21>>*/ var ll = add(x, l);
          /*<<set.ml:137:21>>*/ return l === ll ? t : bal(ll, v, r);
        }
        function singleton(x){
          /*<<set.ml:143:22>>*/ return [0, 0, x, 0, 1];
         /*<<set.ml:143:54>>*/ }
        function add_min_element(x, param){
          /*<<?>>*/ if(! param)  /*<<set.ml:153:17>>*/ return singleton(x);
         var r = param[3], v = param[2], l = param[1];
          /*<<set.ml:155:12>>*/ return bal(add_min_element(x, l), v, r);
        }
        function add_max_element(x, param){
          /*<<?>>*/ if(! param)  /*<<set.ml:158:17>>*/ return singleton(x);
         var r = param[3], v = param[2], l = param[1];
          /*<<set.ml:160:16>>*/ return bal(l, v, add_max_element(x, r));
        }
        function join(l, v, r){
          /*<<set.ml:166:6>>*/ if(! l)
           /*<<set.ml:167:22>>*/ return add_min_element(v, r);
         if(! r)  /*<<set.ml:168:22>>*/ return add_max_element(v, l);
         var
          rh = r[4],
          rr = r[3],
          rv = r[2],
          rl = r[1],
          lh = l[4],
          lr = l[3],
          lv = l[2],
          ll = l[1];
         return (rh + 2 | 0) < lh
                 ? bal(ll, lv, join(lr, v, r))
                 : (lh
                   + 2
                   | 0)
                   < rh
                   ? bal(join(l, v, rl), rv, rr)
                   : create(l, v, r);
         /*<<set.ml:172:22>>*/ }
        function min_elt(param){
         var param$0 = param;
          /*<<set.ml:176:22>>*/ for(;;){
           /*<<set.ml:176:22>>*/ if(! param$0)
            /*<<set.ml:177:17>>*/ throw  /*<<set.ml:177:17>>*/ caml_maybe_attach_backtrace
                  (Stdlib[8], 1);
          var l = param$0[1];
          if(l){var param$0 = l; continue;}
           /*<<set.ml:178:28>>*/  /*<<set.ml:178:28>>*/ var v = param$0[2];
           /*<<set.ml:178:28>>*/ return v;
         }
         /*<<set.ml:179:28>>*/ }
        function min_elt_opt(param){
         var param$0 = param;
          /*<<set.ml:181:26>>*/ for(;;){
           /*<<set.ml:181:26>>*/ if(! param$0)
            /*<<set.ml:182:17>>*/ return 0;
          var l = param$0[1];
          if(l){var param$0 = l; continue;}
           /*<<set.ml:183:28>>*/  /*<<set.ml:183:28>>*/ var v = param$0[2];
           /*<<set.ml:183:28>>*/ return [0, v];
         }
         /*<<set.ml:184:32>>*/ }
        function max_elt(param){
         var param$0 = param;
          /*<<set.ml:186:22>>*/ for(;;){
           /*<<set.ml:186:22>>*/ if(! param$0)
            /*<<set.ml:187:17>>*/ throw  /*<<set.ml:187:17>>*/ caml_maybe_attach_backtrace
                  (Stdlib[8], 1);
          if(param$0[3]){
            /*<<set.ml:189:19>>*/ var
             /*<<set.ml:189:19>>*/ r = param$0[3],
            param$0 = r;
           continue;
          }
           /*<<set.ml:188:28>>*/  /*<<set.ml:188:28>>*/ var v = param$0[2];
           /*<<set.ml:188:28>>*/ return v;
         }
         /*<<set.ml:189:28>>*/ }
        function max_elt_opt(param){
         var param$0 = param;
          /*<<set.ml:191:26>>*/ for(;;){
           /*<<set.ml:191:26>>*/ if(! param$0)
            /*<<set.ml:192:17>>*/ return 0;
          if(param$0[3]){
            /*<<set.ml:194:19>>*/ var
             /*<<set.ml:194:19>>*/ r = param$0[3],
            param$0 = r;
           continue;
          }
           /*<<set.ml:193:28>>*/  /*<<set.ml:193:28>>*/ var v = param$0[2];
           /*<<set.ml:193:28>>*/ return [0, v];
         }
         /*<<set.ml:194:32>>*/ }
        function remove_min_elt(param){
          /*<<set.ml:198:29>>*/ if(! param)
           /*<<set.ml:199:17>>*/ return  /*<<set.ml:199:17>>*/ caml_call1
                  (Stdlib[1], cst_Set_remove_min_elt);
         var l = param[1];
         if(l){
          var r = param[3], v = param[2];
           /*<<set.ml:201:29>>*/ return bal(remove_min_elt(l), v, r);
         }
          /*<<set.ml:200:28>>*/  /*<<set.ml:200:28>>*/ var r$0 = param[3];
          /*<<set.ml:200:28>>*/ return r$0;
         /*<<set.ml:201:51>>*/ }
        function concat(t1, t2){
          /*<<set.ml:218:6>>*/ if(! t1)  /*<<set.ml:219:22>>*/ return t2;
          /*<<set.ml:221:18>>*/ if(! t2)  /*<<set.ml:220:22>>*/ return t1;
          /*<<set.ml:221:39>>*/  /*<<set.ml:221:39>>*/ var
          _T_ = remove_min_elt(t2);
          /*<<set.ml:221:26>>*/ return join(t1, min_elt(t2), _T_);
         /*<<set.ml:221:58>>*/ }
        function split(x, param){
          /*<<?>>*/ if(! param)  /*<<set.ml:231:10>>*/ return _a_;
          /*<<set.ml:233:18>>*/ var
          r = param[3],
          v = param[2],
          l = param[1],
           /*<<set.ml:233:18>>*/ c =
             /*<<set.ml:233:18>>*/ caml_call2(Ord[1], x, v);
          /*<<set.ml:233:18>>*/ if(0 === c)
           /*<<set.ml:234:24>>*/ return [0, l, 1, r];
          /*<<set.ml:235:15>>*/ if(0 <= c){
           /*<<set.ml:238:33>>*/ var
            /*<<set.ml:238:33>>*/ match = split(x, r),
            /*<<set.ml:238:33>>*/ rr = match[3],
            /*<<set.ml:238:33>>*/ pres = match[2],
            /*<<set.ml:238:33>>*/ lr = match[1];
           /*<<set.ml:238:47>>*/ return [0, join(l, v, lr), pres, rr];
         }
          /*<<set.ml:236:33>>*/ var
           /*<<set.ml:236:33>>*/ match$0 = split(x, l),
           /*<<set.ml:236:33>>*/ rl = match$0[3],
           /*<<set.ml:236:33>>*/ pres$0 = match$0[2],
           /*<<set.ml:236:33>>*/ ll = match$0[1];
          /*<<set.ml:236:57>>*/ return [0, ll, pres$0, join(rl, v, r)];
        }
        var empty = 0;
        function is_empty(param){
          /*<<set.ml:244:19>>*/ return param ? 0 : 1;
         /*<<set.ml:244:54>>*/ }
        function mem(x, param){
         var param$0 = param;
         for(;;){
          if(! param$0)  /*<<set.ml:247:17>>*/ return 0;
           /*<<set.ml:249:18>>*/ var
           r = param$0[3],
           v = param$0[2],
           l = param$0[1],
            /*<<set.ml:249:18>>*/ c =
              /*<<set.ml:249:18>>*/ caml_call2(Ord[1], x, v),
            /*<<set.ml:249:18>>*/ _S_ = 0 === c ? 1 : 0;
           /*<<set.ml:249:18>>*/ if(_S_)  /*<<set.ml:247:17>>*/ return _S_;
          var r$0 = 0 <= c ? r : l, param$0 = r$0;
         }
        }
        function remove(x, t){
          /*<<?>>*/ if(! t)  /*<<set.ml:253:17>>*/ return 0;
          /*<<set.ml:255:18>>*/ var
          t2 = t[3],
          v = t[2],
          t1 = t[1],
           /*<<set.ml:255:18>>*/ c =
             /*<<set.ml:255:18>>*/ caml_call2(Ord[1], x, v);
          /*<<set.ml:255:18>>*/ if(0 === c){
           /*<<set.ml:208:6>>*/ if(! t1)  /*<<set.ml:209:22>>*/ return t2;
           /*<<set.ml:211:18>>*/ if(! t2)  /*<<set.ml:210:22>>*/ return t1;
           /*<<set.ml:211:38>>*/  /*<<set.ml:211:38>>*/ var
           _R_ = remove_min_elt(t2);
           /*<<set.ml:211:25>>*/ return bal(t1, min_elt(t2), _R_);
         }
          /*<<set.ml:258:12>>*/ if(0 <= c){
           /*<<set.ml:263:23>>*/  /*<<set.ml:263:23>>*/ var
           rr = remove(x, t2);
           /*<<set.ml:263:23>>*/ return t2 === rr ? t : bal(t1, v, rr);
         }
          /*<<set.ml:259:23>>*/  /*<<set.ml:259:23>>*/ var ll = remove(x, t1);
          /*<<set.ml:259:23>>*/ return t1 === ll ? t : bal(ll, v, t2);
        }
        function union(s1, s2){
          /*<<set.ml:268:6>>*/ if(! s1)  /*<<set.ml:269:23>>*/ return s2;
         if(! s2)  /*<<set.ml:270:23>>*/ return s1;
         var
          h2 = s2[4],
          r2 = s2[3],
          v2 = s2[2],
          l2 = s2[1],
          h1 = s1[4],
          r1 = s1[3],
          v1 = s1[2],
          l1 = s1[1];
         if(h2 <= h1){
           /*<<set.ml:273:12>>*/ if(1 === h2)
            /*<<set.ml:273:27>>*/ return add(v2, s1);
           /*<<set.ml:274:32>>*/ var
            /*<<set.ml:274:32>>*/ match = split(v1, s2),
            /*<<set.ml:274:32>>*/ r2$0 = match[3],
            /*<<set.ml:274:32>>*/ l2$0 = match[1],
            /*<<set.ml:275:36>>*/ _P_ = union(r1, r2$0);
           /*<<set.ml:275:19>>*/ return join(union(l1, l2$0), v1, _P_);
         }
          /*<<set.ml:278:12>>*/ if(1 === h1)
           /*<<set.ml:278:27>>*/ return add(v1, s2);
          /*<<set.ml:279:32>>*/ var
           /*<<set.ml:279:32>>*/ match$0 = split(v2, s1),
           /*<<set.ml:279:32>>*/ r1$0 = match$0[3],
           /*<<set.ml:279:32>>*/ l1$0 = match$0[1],
           /*<<set.ml:280:36>>*/ _Q_ = union(r1$0, r2);
          /*<<set.ml:280:19>>*/ return join(union(l1$0, l2), v2, _Q_);
         /*<<set.ml:281:15>>*/ }
        function inter(s1, s2){
          /*<<set.ml:284:6>>*/ if(! s1)  /*<<set.ml:285:22>>*/ return 0;
         if(! s2)  /*<<set.ml:286:22>>*/ return 0;
          /*<<set.ml:288:16>>*/ var
          r1 = s1[3],
          v1 = s1[2],
          l1 = s1[1],
           /*<<set.ml:288:16>>*/ _M_ = split(v1, s2),
           /*<<set.ml:288:16>>*/ l2 = _M_[1];
          /*<<set.ml:288:16>>*/ if(_M_[2]){
           /*<<set.ml:292:36>>*/ var
           r2 = _M_[3],
            /*<<set.ml:292:36>>*/ _N_ = inter(r1, r2);
           /*<<set.ml:292:19>>*/ return join(inter(l1, l2), v1, _N_);
         }
          /*<<set.ml:290:14>>*/ var
           /*<<set.ml:290:14>>*/ r2$0 = _M_[3],
           /*<<set.ml:290:35>>*/ _O_ = inter(r1, r2$0);
          /*<<set.ml:290:21>>*/ return concat(inter(l1, l2), _O_);
         /*<<set.ml:292:49>>*/ }
        function split_bis(x, param){
          /*<<?>>*/ if(! param)
           /*<<set.ml:304:10>>*/ return [0,
                  0,
                  function(param){
                    /*<<set.ml:304:38>>*/ return 0;
                   /*<<set.ml:304:43>>*/ }];
          /*<<set.ml:306:18>>*/ var
          r = param[3],
          v = param[2],
          l = param[1],
           /*<<set.ml:306:18>>*/ c =
             /*<<set.ml:306:18>>*/ caml_call2(Ord[1], x, v);
          /*<<set.ml:306:18>>*/ if(0 === c)  /*<<set.ml:307:24>>*/ return 0;
          /*<<set.ml:308:15>>*/ if(0 <= c){
           /*<<set.ml:313:18>>*/  /*<<set.ml:313:18>>*/ var
           match = split_bis(x, r);
           /*<<set.ml:313:18>>*/ if(! match)  /*<<set.ml:314:23>>*/ return 0;
          var rr = match[2], lr = match[1];
           /*<<set.ml:315:45>>*/ return [0, join(l, v, lr), rr];
         }
          /*<<set.ml:309:18>>*/  /*<<set.ml:309:18>>*/ var
          match$0 = split_bis(x, l);
          /*<<set.ml:309:18>>*/ if(! match$0)  /*<<set.ml:310:23>>*/ return 0;
         var rl = match$0[2], ll = match$0[1];
         return [0,
                 ll,
                 function(param){
                   /*<<set.ml:311:65>>*/ return join
                          ( /*<<set.ml:311:65>>*/ caml_call1(rl, 0), v, r);
                  /*<<set.ml:311:76>>*/ }];
        }
        function disjoint(s1, s2){
         var s1$0 = s1, s2$0 = s2;
          /*<<set.ml:318:6>>*/ for(;;){
          if(s1$0 && s2$0){
           var r1 = s1$0[3], v1 = s1$0[2], l1 = s1$0[1];
           if(s1$0 === s2$0)  /*<<set.ml:321:27>>*/ return 0;
            /*<<set.ml:322:21>>*/  /*<<set.ml:322:21>>*/ var
            match = split_bis(v1, s2$0);
            /*<<set.ml:322:21>>*/ if(! match)  /*<<set.ml:324:23>>*/ return 0;
            /*<<set.ml:323:34>>*/ var
            r2 = match[2],
            l2 = match[1],
             /*<<set.ml:323:34>>*/ _L_ = disjoint(l1, l2);
            /*<<set.ml:323:34>>*/ if(! _L_)  /*<<set.ml:324:23>>*/ return _L_;
            /*<<set.ml:323:64>>*/ var
             /*<<set.ml:323:64>>*/ s2$1 =
               /*<<set.ml:323:64>>*/ caml_call1(r2, 0),
            s1$0 = r1,
            s2$0 = s2$1;
           continue;
          }
           /*<<set.ml:319:35>>*/ return 1;
         }
         /*<<set.ml:324:28>>*/ }
        function diff(s1, s2){
          /*<<set.ml:327:6>>*/ if(! s1)  /*<<set.ml:328:22>>*/ return 0;
         if(! s2)  /*<<set.ml:329:23>>*/ return s1;
          /*<<set.ml:331:16>>*/ var
          r1 = s1[3],
          v1 = s1[2],
          l1 = s1[1],
           /*<<set.ml:331:16>>*/ _I_ = split(v1, s2),
           /*<<set.ml:331:16>>*/ l2 = _I_[1];
          /*<<set.ml:331:16>>*/ if(_I_[2]){
           /*<<set.ml:335:34>>*/ var
           r2 = _I_[3],
            /*<<set.ml:335:34>>*/ _J_ = diff(r1, r2);
           /*<<set.ml:335:21>>*/ return concat(diff(l1, l2), _J_);
         }
          /*<<set.ml:333:14>>*/ var
           /*<<set.ml:333:14>>*/ r2$0 = _I_[3],
           /*<<set.ml:333:35>>*/ _K_ = diff(r1, r2$0);
          /*<<set.ml:333:19>>*/ return join(diff(l1, l2), v1, _K_);
         /*<<set.ml:335:46>>*/ }
        function cons_enum(s, e){
         var s$0 = s, e$0 = e;
          /*<<set.ml:340:6>>*/ for(;;){
           /*<<set.ml:340:6>>*/ if(! s$0)  /*<<set.ml:341:17>>*/ return e$0;
          var
           r = s$0[3],
           v = s$0[2],
           l = s$0[1],
           e$1 = [0, v, r, e$0],
           s$0 = l,
           e$0 = e$1;
         }
         /*<<set.ml:342:52>>*/ }
        function compare(s1, s2){
          /*<<set.ml:356:37>>*/ var
           /*<<set.ml:356:37>>*/ e2$2 = cons_enum(s2, 0),
           /*<<set.ml:356:18>>*/ e1$2 = cons_enum(s1, 0),
          e1 = e1$2,
          e2 = e2$2;
          /*<<set.ml:345:8>>*/ for(;;){
           /*<<set.ml:345:8>>*/ if(! e1)
            /*<<set.ml:347:21>>*/ return e2 ? -1 : 0;
          if(! e2)  /*<<set.ml:348:20>>*/ return 1;
           /*<<set.ml:350:18>>*/ var
           e2$0 = e2[3],
           r2 = e2[2],
           v2 = e2[1],
           e1$0 = e1[3],
           r1 = e1[2],
           v1 = e1[1],
            /*<<set.ml:350:18>>*/ c =
              /*<<set.ml:350:18>>*/ caml_call2(Ord[1], v1, v2);
           /*<<set.ml:350:18>>*/ if(0 !== c)  /*<<set.ml:352:15>>*/ return c;
           /*<<set.ml:353:45>>*/ var
            /*<<set.ml:353:45>>*/ e2$1 = cons_enum(r2, e2$0),
            /*<<set.ml:353:27>>*/ e1$1 = cons_enum(r1, e1$0),
           e1 = e1$1,
           e2 = e2$1;
         }
         /*<<set.ml:356:55>>*/ }
        function equal(s1, s2){
          /*<<set.ml:359:6>>*/ return 0 === compare(s1, s2) ? 1 : 0;
         /*<<set.ml:359:23>>*/ }
        function subset(s1, s2){
         var s1$0 = s1, s2$0 = s2;
          /*<<set.ml:362:6>>*/ for(;;){
           /*<<set.ml:362:6>>*/ if(! s1$0)  /*<<set.ml:364:10>>*/ return 1;
          if(! s2$0)  /*<<set.ml:366:10>>*/ return 0;
           /*<<set.ml:368:18>>*/ var
           r2 = s2$0[3],
           v2 = s2$0[2],
           l2 = s2$0[1],
           r1 = s1$0[3],
           v1 = s1$0[2],
           l1 = s1$0[1],
            /*<<set.ml:368:18>>*/ c =
              /*<<set.ml:368:18>>*/ caml_call2(Ord[1], v1, v2);
           /*<<set.ml:368:18>>*/ if(0 === c){
            /*<<set.ml:370:12>>*/  /*<<set.ml:370:12>>*/ var
            _F_ = subset(l1, l2);
            /*<<set.ml:370:12>>*/ if(! _F_)  /*<<set.ml:371:15>>*/ return _F_;
           var s1$0 = r1, s2$0 = r2;
           continue;
          }
           /*<<set.ml:371:15>>*/ if(0 <= c){
            /*<<set.ml:374:12>>*/  /*<<set.ml:374:12>>*/ var
            _G_ = subset([0, 0, v1, r1, 0], r2);
            /*<<set.ml:374:12>>*/ if(! _G_)  /*<<set.ml:366:10>>*/ return _G_;
           var s1$0 = l1;
           continue;
          }
           /*<<set.ml:372:12>>*/  /*<<set.ml:372:12>>*/ var
           _H_ = subset([0, l1, v1, 0, 0], l2);
           /*<<set.ml:372:12>>*/ if(! _H_)  /*<<set.ml:374:12>>*/ return _H_;
          var s1$0 = r1;
         }
         /*<<set.ml:374:71>>*/ }
        function iter(f, param){
         var param$0 = param;
         for(;;){
          if(! param$0)  /*<<set.ml:377:17>>*/ return 0;
          var r = param$0[3], v = param$0[2], l = param$0[1];
           /*<<set.ml:378:25>>*/ iter(f, l);
           /*<<set.ml:378:35>>*/  /*<<set.ml:378:35>>*/ caml_call1(f, v);
          var param$0 = r;
         }
        }
        function fold(f, s, accu){
         var s$0 = s, accu$0 = accu;
          /*<<set.ml:381:6>>*/ for(;;){
           /*<<set.ml:381:6>>*/ if(! s$0)
            /*<<set.ml:382:17>>*/ return accu$0;
           /*<<set.ml:383:34>>*/ var
           r = s$0[3],
           v = s$0[2],
           l = s$0[1],
            /*<<set.ml:383:34>>*/ accu$1 =
              /*<<set.ml:383:34>>*/ caml_call2(f, v, fold(f, l, accu$0)),
           s$0 = r,
           accu$0 = accu$1;
         }
         /*<<set.ml:383:55>>*/ }
        function for_all(p, param){
         var param$0 = param;
         for(;;){
          if(! param$0)  /*<<set.ml:386:17>>*/ return 1;
           /*<<set.ml:387:25>>*/ var
           r = param$0[3],
           v = param$0[2],
           l = param$0[1],
            /*<<set.ml:387:25>>*/ _C_ =
              /*<<set.ml:387:25>>*/ caml_call1(p, v);
           /*<<set.ml:387:25>>*/ if(_C_){
            /*<<set.ml:387:32>>*/  /*<<set.ml:387:32>>*/ var
            _D_ = for_all(p, l);
            /*<<set.ml:387:32>>*/ if(_D_){var param$0 = r; continue;}
           var _E_ = _D_;
          }
          else
           var _E_ = _C_;
           /*<<set.ml:386:17>>*/ return _E_;
         }
        }
        function exists(p, param){
         var param$0 = param;
         for(;;){
          if(! param$0)  /*<<set.ml:390:17>>*/ return 0;
           /*<<set.ml:391:25>>*/ var
           r = param$0[3],
           v = param$0[2],
           l = param$0[1],
            /*<<set.ml:391:25>>*/ _z_ =
              /*<<set.ml:391:25>>*/ caml_call1(p, v);
           /*<<set.ml:391:25>>*/ if(_z_)
           var _A_ = _z_;
          else{
            /*<<set.ml:391:32>>*/  /*<<set.ml:391:32>>*/ var
            _B_ = exists(p, l);
            /*<<set.ml:391:32>>*/ if(! _B_){var param$0 = r; continue;}
           var _A_ = _B_;
          }
           /*<<set.ml:390:17>>*/ return _A_;
         }
        }
        function filter(p, t){
          /*<<?>>*/ if(! t)  /*<<set.ml:394:17>>*/ return 0;
          /*<<set.ml:397:19>>*/ var
          r = t[3],
          v = t[2],
          l = t[1],
           /*<<set.ml:397:19>>*/ l$0 = filter(p, l),
           /*<<set.ml:398:19>>*/ pv =  /*<<set.ml:398:19>>*/ caml_call1(p, v),
           /*<<set.ml:399:19>>*/ r$0 = filter(p, r);
          /*<<set.ml:399:19>>*/ if(! pv)
           /*<<set.ml:402:15>>*/ return concat(l$0, r$0);
         if(l === l$0 && r === r$0)  /*<<set.ml:401:35>>*/ return t;
          /*<<set.ml:401:42>>*/ return join(l$0, v, r$0);
        }
        function partition(p, param){
          /*<<?>>*/ if(! param)  /*<<set.ml:405:17>>*/ return _b_;
          /*<<set.ml:408:25>>*/ var
          r = param[3],
          v = param[2],
          l = param[1],
           /*<<set.ml:408:25>>*/ match = partition(p, l),
           /*<<set.ml:408:25>>*/ lf = match[2],
           /*<<set.ml:408:25>>*/ lt = match[1],
           /*<<set.ml:409:19>>*/ pv =  /*<<set.ml:409:19>>*/ caml_call1(p, v),
           /*<<set.ml:410:25>>*/ match$0 = partition(p, r),
           /*<<set.ml:410:25>>*/ rf = match$0[2],
           /*<<set.ml:410:25>>*/ rt = match$0[1];
          /*<<set.ml:410:25>>*/ if(pv){
           /*<<set.ml:412:30>>*/  /*<<set.ml:412:30>>*/ var
           _x_ = concat(lf, rf);
           /*<<set.ml:412:16>>*/ return [0, join(lt, v, rt), _x_];
         }
          /*<<set.ml:413:30>>*/  /*<<set.ml:413:30>>*/ var
          _y_ = join(lf, v, rf);
          /*<<set.ml:413:16>>*/ return [0, concat(lt, rt), _y_];
        }
        function cardinal(param){
          /*<<set.ml:415:23>>*/ if(! param)  /*<<set.ml:416:17>>*/ return 0;
          /*<<set.ml:417:39>>*/ var
          r = param[3],
          l = param[1],
           /*<<set.ml:417:39>>*/ _w_ = cardinal(r);
          /*<<set.ml:417:22>>*/ return (cardinal(l) + 1 | 0) + _w_ | 0;
         /*<<set.ml:417:49>>*/ }
        function elements_aux(accu, param){
         var accu$0 = accu, param$0 = param;
         for(;;){
          if(! param$0)  /*<<set.ml:420:17>>*/ return accu$0;
           /*<<set.ml:421:44>>*/ var
           r = param$0[3],
           v = param$0[2],
           l = param$0[1],
            /*<<set.ml:421:44>>*/ accu$1 = [0, v, elements_aux(accu$0, r)],
           accu$0 = accu$1,
           param$0 = l;
         }
        }
        function elements(s){
          /*<<set.ml:424:6>>*/ return elements_aux(0, s);
         /*<<set.ml:424:23>>*/ }
        function find(x, param){
         var param$0 = param;
         for(;;){
          if(! param$0)
            /*<<set.ml:431:17>>*/ throw  /*<<set.ml:431:17>>*/ caml_maybe_attach_backtrace
                  (Stdlib[8], 1);
           /*<<set.ml:433:18>>*/ var
           r = param$0[3],
           v = param$0[2],
           l = param$0[1],
            /*<<set.ml:433:18>>*/ c =
              /*<<set.ml:433:18>>*/ caml_call2(Ord[1], x, v);
           /*<<set.ml:433:18>>*/ if(0 === c)  /*<<set.ml:434:24>>*/ return v;
           /*<<set.ml:435:15>>*/ var
            /*<<set.ml:435:15>>*/ r$0 = 0 <= c ? r : l,
           param$0 = r$0;
         }
        }
        function find_first(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1)
            /*<<set.ml:448:10>>*/ throw  /*<<set.ml:448:10>>*/ caml_maybe_attach_backtrace
                  (Stdlib[8], 1);
          var r$0 = param$1[3], v0$1 = param$1[2], l$0 = param$1[1];
           /*<<set.ml:450:13>>*/ if
           (!  /*<<set.ml:450:13>>*/ caml_call1(f, v0$1)){var param$1 = r$0; continue;}
          var v0 = v0$1, param = l$0;
          for(;;){
           if(! param)  /*<<set.ml:439:10>>*/ return v0;
           var r = param[3], v0$0 = param[2], l = param[1];
            /*<<set.ml:441:13>>*/ if
            ( /*<<set.ml:441:13>>*/ caml_call1(f, v0$0)){var v0 = v0$0, param = l; continue;}
           var param = r;
          }
         }
        }
        function find_first_opt(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1)  /*<<set.ml:466:10>>*/ return 0;
          var r$0 = param$1[3], v0$1 = param$1[2], l$0 = param$1[1];
           /*<<set.ml:468:13>>*/ if
           (!  /*<<set.ml:468:13>>*/ caml_call1(f, v0$1)){var param$1 = r$0; continue;}
          var v0 = v0$1, param = l$0;
          for(;;){
           if(! param)  /*<<set.ml:457:10>>*/ return [0, v0];
           var r = param[3], v0$0 = param[2], l = param[1];
            /*<<set.ml:459:13>>*/ if
            ( /*<<set.ml:459:13>>*/ caml_call1(f, v0$0)){var v0 = v0$0, param = l; continue;}
           var param = r;
          }
         }
        }
        function find_last(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1)
            /*<<set.ml:484:10>>*/ throw  /*<<set.ml:484:10>>*/ caml_maybe_attach_backtrace
                  (Stdlib[8], 1);
          var r$0 = param$1[3], v0$1 = param$1[2], l$0 = param$1[1];
           /*<<set.ml:486:13>>*/ if
           (!  /*<<set.ml:486:13>>*/ caml_call1(f, v0$1)){var param$1 = l$0; continue;}
          var v0 = v0$1, param = r$0;
          for(;;){
           if(! param)  /*<<set.ml:475:10>>*/ return v0;
           var r = param[3], v0$0 = param[2], l = param[1];
            /*<<set.ml:477:13>>*/ if
            ( /*<<set.ml:477:13>>*/ caml_call1(f, v0$0)){var v0 = v0$0, param = r; continue;}
           var param = l;
          }
         }
        }
        function find_last_opt(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1)  /*<<set.ml:502:10>>*/ return 0;
          var r$0 = param$1[3], v0$1 = param$1[2], l$0 = param$1[1];
           /*<<set.ml:504:13>>*/ if
           (!  /*<<set.ml:504:13>>*/ caml_call1(f, v0$1)){var param$1 = l$0; continue;}
          var v0 = v0$1, param = r$0;
          for(;;){
           if(! param)  /*<<set.ml:493:10>>*/ return [0, v0];
           var r = param[3], v0$0 = param[2], l = param[1];
            /*<<set.ml:495:13>>*/ if
            ( /*<<set.ml:495:13>>*/ caml_call1(f, v0$0)){var v0 = v0$0, param = r; continue;}
           var param = l;
          }
         }
        }
        function find_opt(x, param){
         var param$0 = param;
         for(;;){
          if(! param$0)  /*<<set.ml:510:17>>*/ return 0;
           /*<<set.ml:512:18>>*/ var
           r = param$0[3],
           v = param$0[2],
           l = param$0[1],
            /*<<set.ml:512:18>>*/ c =
              /*<<set.ml:512:18>>*/ caml_call2(Ord[1], x, v);
           /*<<set.ml:512:18>>*/ if(0 === c)
            /*<<set.ml:513:24>>*/ return [0, v];
           /*<<set.ml:514:15>>*/ var
            /*<<set.ml:514:15>>*/ r$0 = 0 <= c ? r : l,
           param$0 = r$0;
         }
        }
        function try_join(l, v, r){
         var switch$0 = 0;
          /*<<set.ml:520:6>>*/ if(0 !== l){
           /*<<set.ml:520:35>>*/  /*<<set.ml:520:35>>*/ var _v_ = max_elt(l);
           /*<<set.ml:520:23>>*/ if
           (0 <=  /*<<set.ml:520:23>>*/ caml_call2(Ord[1], _v_, v))
           switch$0 = 1;
         }
         if(! switch$0){
          var switch$1 = 0;
          if(0 !== r){
            /*<<set.ml:521:37>>*/  /*<<set.ml:521:37>>*/ var _u_ = min_elt(r);
            /*<<set.ml:521:23>>*/ if
            (0 <=  /*<<set.ml:521:23>>*/ caml_call2(Ord[1], v, _u_))
            switch$1 = 1;
          }
          if(! switch$1)  /*<<set.ml:522:11>>*/ return join(l, v, r);
         }
          /*<<set.ml:523:19>>*/ return union(l, add(v, r));
         /*<<set.ml:523:28>>*/ }
        function map(f, t){
          /*<<?>>*/ if(! t)  /*<<set.ml:526:17>>*/ return 0;
          /*<<set.ml:529:18>>*/ var
          r = t[3],
          v = t[2],
          l = t[1],
           /*<<set.ml:529:18>>*/ l$0 = map(f, l),
           /*<<set.ml:530:18>>*/ v$0 =  /*<<set.ml:530:18>>*/ caml_call1(f, v),
           /*<<set.ml:531:18>>*/ r$0 = map(f, r);
         if(l === l$0 && v === v$0 && r === r$0)
           /*<<set.ml:532:47>>*/ return t;
          /*<<set.ml:533:14>>*/ return try_join(l$0, v$0, r$0);
        }
        function filter_map(f, t){
          /*<<?>>*/ if(! t)  /*<<set.ml:542:17>>*/ return 0;
          /*<<set.ml:545:18>>*/ var
          r = t[3],
          v = t[2],
          l = t[1],
           /*<<set.ml:545:18>>*/ t1 = filter_map(f, l),
           /*<<set.ml:546:18>>*/ v$0 =  /*<<set.ml:546:18>>*/ caml_call1(f, v),
           /*<<set.ml:547:18>>*/ t2 = filter_map(f, r);
          /*<<set.ml:547:18>>*/ if(v$0){
           /*<<set.ml:550:14>>*/  /*<<set.ml:550:14>>*/ var v$1 = v$0[1];
          if(l === t1 && v === v$1 && r === t2)
            /*<<set.ml:550:52>>*/ return t;
           /*<<set.ml:551:19>>*/ return try_join(t1, v$1, t2);
         }
          /*<<set.ml:536:6>>*/ if(! t1)  /*<<set.ml:537:22>>*/ return t2;
          /*<<set.ml:539:18>>*/ if(! t2)  /*<<set.ml:538:22>>*/ return t1;
          /*<<set.ml:539:43>>*/  /*<<set.ml:539:43>>*/ var
          _t_ = remove_min_elt(t2);
          /*<<set.ml:539:30>>*/ return try_join(t1, min_elt(t2), _t_);
        }
        function of_list(l){
          /*<<set.ml:578:6>>*/ if(! l)  /*<<set.ml:579:14>>*/ return empty;
         var _o_ = l[2], x0 = l[1];
         if(! _o_)  /*<<set.ml:580:16>>*/ return singleton(x0);
         var _p_ = _o_[2], x1 = _o_[1];
         if(! _p_)  /*<<set.ml:581:27>>*/ return add(x1, singleton(x0));
         var _q_ = _p_[2], x2 = _p_[1];
         if(! _q_)
           /*<<set.ml:582:31>>*/ return add(x2, add(x1, singleton(x0)));
         var _r_ = _q_[2], x3 = _q_[1];
         if(! _r_)
           /*<<set.ml:583:35>>*/ return add
                  (x3, add(x2, add(x1, singleton(x0))));
         if(_r_[2]){
           /*<<set.ml:585:28>>*/ var
            /*<<set.ml:585:28>>*/ l$0 =
              /*<<set.ml:585:28>>*/ caml_call2(Stdlib_List[59], Ord[1], l),
            /*<<set.ml:557:6>>*/ sub =
             function(n, l){
               /*<<set.ml:558:8>>*/ if(3 >= n >>> 0)
               switch(n){
                 case 0:
                   /*<<set.ml:559:18>>*/ return [0, 0, l];
                 case 1:
                  if(l){
                   var l$3 = l[2], x0 = l[1];
                   return [0, [0, 0, x0, 0, 1], l$3];
                  }
                  break;
                 case 2:
                  if(l){
                   var match$1 = l[2];
                   if(match$1){
                    var l$4 = match$1[2], x1 = match$1[1], x0$0 = l[1];
                    return [0, [0, [0, 0, x0$0, 0, 1], x1, 0, 2], l$4];
                   }
                  }
                  break;
                 default:
                  if(l){
                   var _s_ = l[2];
                   if(_s_){
                    var match$2 = _s_[2];
                    if(match$2){
                     var
                      l$5 = match$2[2],
                      x2 = match$2[1],
                      x1$0 = _s_[1],
                      x0$1 = l[1];
                     return [0,
                             [0, [0, 0, x0$1, 0, 1], x1$0, [0, 0, x2, 0, 1], 2],
                             l$5];
                    }
                   }
                  }
               }
               /*<<set.ml:567:10>>*/ var
                /*<<set.ml:567:10>>*/ nl = n / 2 | 0,
                /*<<set.ml:568:24>>*/ match = sub(nl, l),
                /*<<set.ml:568:24>>*/ l$0 = match[2],
                /*<<set.ml:568:24>>*/ left = match[1];
               /*<<set.ml:568:24>>*/ if(! l$0)
                /*<<set.ml:570:18>>*/ throw  /*<<set.ml:570:18>>*/ caml_maybe_attach_backtrace
                      ([0, Assert_failure, _c_], 1);
               /*<<set.ml:572:27>>*/ var
               l$1 = l$0[2],
               mid = l$0[1],
                /*<<set.ml:572:27>>*/ match$0 = sub((n - nl | 0) - 1 | 0, l$1),
                /*<<set.ml:572:27>>*/ l$2 = match$0[2],
                /*<<set.ml:572:27>>*/ right = match$0[1];
               /*<<set.ml:573:12>>*/ return [0, create(left, mid, right), l$2];
              /*<<set.ml:573:36>>*/ };
           /*<<set.ml:575:10>>*/ return sub
                   ( /*<<set.ml:575:15>>*/ caml_call1(Stdlib_List[1], l$0),
                    l$0)
                  [1];
         }
         var x4 = _r_[1];
          /*<<set.ml:584:39>>*/ return add
                 (x4, add(x3, add(x2, add(x1, singleton(x0)))));
         /*<<set.ml:585:58>>*/ }
        function add_seq(i, m){
          /*<<set.ml:588:6>>*/ function _n_(s, x){
           /*<<set.ml:588:32>>*/ return add(x, s);
          /*<<set.ml:588:39>>*/ }
          /*<<set.ml:588:6>>*/ return  /*<<set.ml:588:6>>*/ caml_call3
                 (Stdlib_Seq[5], _n_, m, i);
         /*<<set.ml:588:44>>*/ }
        function of_seq(i){
          /*<<set.ml:590:19>>*/ return add_seq(i, empty);
         /*<<set.ml:590:34>>*/ }
        function seq_of_enum(c, param){
          /*<<set.ml:592:32>>*/ if(! c)  /*<<set.ml:593:15>>*/ return 0;
          /*<<set.ml:594:55>>*/ var
          rest = c[3],
          t = c[2],
          x = c[1],
           /*<<set.ml:594:55>>*/ _l_ = cons_enum(t, rest);
          /*<<set.ml:594:42>>*/ return [0,
                 x,
                 function(_m_){ /*<<?>>*/ return seq_of_enum(_l_, _m_);}];
         /*<<set.ml:594:74>>*/ }
        function to_seq(c){
          /*<<set.ml:596:32>>*/  /*<<set.ml:596:32>>*/ var
          _j_ = cons_enum(c, 0);
          /*<<set.ml:596:32>>*/ return function(_k_){
           /*<<?>>*/ return seq_of_enum(_j_, _k_);};
         /*<<set.ml:596:49>>*/ }
        function snoc_enum(s, e){
         var s$0 = s, e$0 = e;
          /*<<set.ml:599:6>>*/ for(;;){
           /*<<set.ml:599:6>>*/ if(! s$0)  /*<<set.ml:600:17>>*/ return e$0;
          var
           r = s$0[3],
           v = s$0[2],
           l = s$0[1],
           e$1 = [0, v, l, e$0],
           s$0 = r,
           e$0 = e$1;
         }
         /*<<set.ml:601:52>>*/ }
        function rev_seq_of_enum(c, param){
          /*<<set.ml:603:36>>*/ if(! c)  /*<<set.ml:604:15>>*/ return 0;
          /*<<set.ml:605:59>>*/ var
          rest = c[3],
          t = c[2],
          x = c[1],
           /*<<set.ml:605:59>>*/ _h_ = snoc_enum(t, rest);
          /*<<set.ml:605:42>>*/ return [0,
                 x,
                 function(_i_){ /*<<?>>*/ return rev_seq_of_enum(_h_, _i_);}];
         /*<<set.ml:605:78>>*/ }
        function to_rev_seq(c){
          /*<<set.ml:607:40>>*/  /*<<set.ml:607:40>>*/ var
          _f_ = snoc_enum(c, 0);
          /*<<set.ml:607:40>>*/ return function(_g_){
           /*<<?>>*/ return rev_seq_of_enum(_f_, _g_);};
         /*<<set.ml:607:57>>*/ }
        function to_seq_from(low, s){
         var s$0 = s, c = 0;
          /*<<set.ml:610:28>>*/ for(;;){
           /*<<set.ml:610:28>>*/ if(s$0){
            /*<<set.ml:613:24>>*/ var
            r = s$0[3],
            v = s$0[2],
            l = s$0[1],
             /*<<set.ml:613:24>>*/ n =
               /*<<set.ml:613:24>>*/ caml_call2(Ord[1], v, low);
            /*<<set.ml:613:24>>*/ if(0 !== n){
             /*<<set.ml:615:23>>*/ if(0 <= n){
              /*<<set.ml:616:21>>*/ var
               /*<<set.ml:616:21>>*/ c$0 = [0, v, r, c],
              s$0 = l,
              c = c$0;
             continue;
            }
            var s$0 = r;
            continue;
           }
           var _d_ = [0, v, r, c];
          }
          else
           var _d_ = c;
          return function(_e_){ /*<<?>>*/ return seq_of_enum(_d_, _e_);};
         }
         /*<<set.ml:619:34>>*/ }
        return [0,
                empty,
                is_empty,
                mem,
                add,
                singleton,
                remove,
                union,
                inter,
                disjoint,
                diff,
                compare,
                equal,
                subset,
                iter,
                map,
                fold,
                for_all,
                exists,
                filter,
                filter_map,
                partition,
                cardinal,
                elements,
                min_elt,
                min_elt_opt,
                max_elt,
                max_elt_opt,
                min_elt,
                min_elt_opt,
                split,
                find,
                find_opt,
                find_first,
                find_first_opt,
                find_last,
                find_last_opt,
                of_list,
                to_seq_from,
                to_seq,
                to_rev_seq,
                add_seq,
                of_seq];
       }];
    /*<<set.ml:72:11>>*/  /*<<set.ml:72:11>>*/ runtime.caml_register_global
    (12, Stdlib_Set, "Stdlib__Set");
    /*<<set.ml:72:11>>*/ return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Map
//# unitInfo: Requires: Assert_failure, Stdlib, Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Map_bal$3 = "Map.bal",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<map.ml:69:11>>*/ var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Assert_failure = global_data.Assert_failure,
    Stdlib_Seq = global_data.Stdlib__Seq,
    cst_Map_remove_min_elt = "Map.remove_min_elt",
    _a_ = [0, 0, 0, 0],
    _b_ = [0, "map.ml", 400, 10],
    _c_ = [0, 0, 0],
    cst_Map_bal = cst_Map_bal$3,
    cst_Map_bal$0 = cst_Map_bal$3,
    cst_Map_bal$1 = cst_Map_bal$3,
    cst_Map_bal$2 = cst_Map_bal$3,
     /*<<map.ml:69:11>>*/ Stdlib_Map =
      [0,
       function(Ord){
        function height(param){
          /*<<map.ml:77:17>>*/ if(! param)  /*<<map.ml:78:17>>*/ return 0;
         var h = param[5];
         return h;
         /*<<map.ml:79:21>>*/ }
        function create(l, x, d, r){
          /*<<map.ml:82:15>>*/ var
           /*<<map.ml:82:15>>*/ hl = height(l),
           /*<<map.ml:82:33>>*/ hr = height(r),
           /*<<map.ml:82:33>>*/ _L_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
         return [0, l, x, d, r, _L_];
         /*<<map.ml:83:65>>*/ }
        function singleton(x, d){
          /*<<map.ml:85:24>>*/ return [0, 0, x, d, 0, 1];
         /*<<map.ml:85:59>>*/ }
        function bal(l, x, d, r){
          /*<<map.ml:88:6>>*/ if(l) var h = l[5], hl = h; else var hl = 0;
          /*<<map.ml:89:6>>*/ if(r) var h$0 = r[5], hr = h$0; else var hr = 0;
          /*<<map.ml:90:6>>*/ if((hr + 2 | 0) < hl){
           /*<<map.ml:90:26>>*/ if(! l)
            /*<<map.ml:92:19>>*/ return  /*<<map.ml:92:19>>*/ caml_call1
                   (Stdlib[1], cst_Map_bal$0);
           /*<<map.ml:94:28>>*/ var
           lr = l[4],
           ld = l[3],
           lv = l[2],
           ll = l[1],
            /*<<map.ml:94:28>>*/ _G_ = height(lr);
           /*<<map.ml:94:15>>*/ if(_G_ <= height(ll))
            /*<<map.ml:95:30>>*/ return create
                   (ll, lv, ld, create(lr, x, d, r));
           /*<<map.ml:96:17>>*/ if(! lr)
            /*<<map.ml:98:25>>*/ return  /*<<map.ml:98:25>>*/ caml_call1
                   (Stdlib[1], cst_Map_bal);
           /*<<map.ml:100:55>>*/ var
           lrr = lr[4],
           lrd = lr[3],
           lrv = lr[2],
           lrl = lr[1],
            /*<<map.ml:100:55>>*/ _H_ = create(lrr, x, d, r);
           /*<<map.ml:100:25>>*/ return create
                  (create(ll, lv, ld, lrl), lrv, lrd, _H_);
         }
          /*<<map.ml:102:15>>*/ if((hl + 2 | 0) >= hr){
           /*<<map.ml:115:8>>*/  /*<<map.ml:115:8>>*/ var
           _K_ = hr <= hl ? hl + 1 | 0 : hr + 1 | 0;
          return [0, l, x, d, r, _K_];
         }
          /*<<map.ml:102:35>>*/ if(! r)
           /*<<map.ml:104:19>>*/ return  /*<<map.ml:104:19>>*/ caml_call1
                  (Stdlib[1], cst_Map_bal$2);
          /*<<map.ml:106:28>>*/ var
          rr = r[4],
          rd = r[3],
          rv = r[2],
          rl = r[1],
           /*<<map.ml:106:28>>*/ _I_ = height(rl);
          /*<<map.ml:106:15>>*/ if(_I_ <= height(rr))
           /*<<map.ml:107:21>>*/ return create
                  (create(l, x, d, rl), rv, rd, rr);
          /*<<map.ml:108:17>>*/ if(! rl)
           /*<<map.ml:110:25>>*/ return  /*<<map.ml:110:25>>*/ caml_call1
                  (Stdlib[1], cst_Map_bal$1);
          /*<<map.ml:112:52>>*/ var
          rlr = rl[4],
          rld = rl[3],
          rlv = rl[2],
          rll = rl[1],
           /*<<map.ml:112:52>>*/ _J_ = create(rlr, rv, rd, rr);
          /*<<map.ml:112:25>>*/ return create
                 (create(l, x, d, rll), rlv, rld, _J_);
         /*<<map.ml:115:67>>*/ }
        var empty = 0;
        function is_empty(param){
          /*<<map.ml:119:19>>*/ return param ? 0 : 1;
         /*<<map.ml:119:54>>*/ }
        function add(x, data, m){
          /*<<?>>*/ if(! m)
           /*<<map.ml:123:10>>*/ return [0, 0, x, data, 0, 1];
          /*<<map.ml:125:18>>*/ var
          h = m[5],
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
           /*<<map.ml:125:18>>*/ c =
             /*<<map.ml:125:18>>*/ caml_call2(Ord[1], x, v);
          /*<<map.ml:125:18>>*/ if(0 === c)
           /*<<map.ml:127:12>>*/ return d === data ? m : [0, l, x, data, r, h];
          /*<<map.ml:128:15>>*/ if(0 <= c){
           /*<<map.ml:132:21>>*/  /*<<map.ml:132:21>>*/ var
           rr = add(x, data, r);
           /*<<map.ml:132:21>>*/ return r === rr ? m : bal(l, v, d, rr);
         }
          /*<<map.ml:129:21>>*/  /*<<map.ml:129:21>>*/ var
          ll = add(x, data, l);
          /*<<map.ml:129:21>>*/ return l === ll ? m : bal(ll, v, d, r);
        }
        function find(x, param){
         var param$0 = param;
         for(;;){
          if(! param$0)
            /*<<map.ml:137:10>>*/ throw  /*<<map.ml:137:10>>*/ caml_maybe_attach_backtrace
                  (Stdlib[8], 1);
           /*<<map.ml:139:18>>*/ var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
            /*<<map.ml:139:18>>*/ c =
              /*<<map.ml:139:18>>*/ caml_call2(Ord[1], x, v);
           /*<<map.ml:139:18>>*/ if(0 === c)  /*<<map.ml:140:24>>*/ return d;
           /*<<map.ml:141:15>>*/ var
            /*<<map.ml:141:15>>*/ r$0 = 0 <= c ? r : l,
           param$0 = r$0;
         }
        }
        function find_first(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1)
            /*<<map.ml:154:10>>*/ throw  /*<<map.ml:154:10>>*/ caml_maybe_attach_backtrace
                  (Stdlib[8], 1);
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
           /*<<map.ml:156:13>>*/ if
           (!  /*<<map.ml:156:13>>*/ caml_call1(f, v0$1)){var param$1 = r$0; continue;}
          var v0 = v0$1, d0 = d0$1, param = l$0;
          for(;;){
           if(! param)  /*<<map.ml:145:10>>*/ return [0, v0, d0];
           var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
            /*<<map.ml:147:13>>*/ if
            ( /*<<map.ml:147:13>>*/ caml_call1(f, v0$0)){
            var v0 = v0$0, d0 = d0$0, param = l;
            continue;
           }
           var param = r;
          }
         }
        }
        function find_first_opt(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1)  /*<<map.ml:172:10>>*/ return 0;
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
           /*<<map.ml:174:13>>*/ if
           (!  /*<<map.ml:174:13>>*/ caml_call1(f, v0$1)){var param$1 = r$0; continue;}
          var v0 = v0$1, d0 = d0$1, param = l$0;
          for(;;){
           if(! param)  /*<<map.ml:163:10>>*/ return [0, [0, v0, d0]];
           var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
            /*<<map.ml:165:13>>*/ if
            ( /*<<map.ml:165:13>>*/ caml_call1(f, v0$0)){
            var v0 = v0$0, d0 = d0$0, param = l;
            continue;
           }
           var param = r;
          }
         }
        }
        function find_last(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1)
            /*<<map.ml:190:10>>*/ throw  /*<<map.ml:190:10>>*/ caml_maybe_attach_backtrace
                  (Stdlib[8], 1);
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
           /*<<map.ml:192:13>>*/ if
           (!  /*<<map.ml:192:13>>*/ caml_call1(f, v0$1)){var param$1 = l$0; continue;}
          var v0 = v0$1, d0 = d0$1, param = r$0;
          for(;;){
           if(! param)  /*<<map.ml:181:10>>*/ return [0, v0, d0];
           var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
            /*<<map.ml:183:13>>*/ if
            ( /*<<map.ml:183:13>>*/ caml_call1(f, v0$0)){
            var v0 = v0$0, d0 = d0$0, param = r;
            continue;
           }
           var param = l;
          }
         }
        }
        function find_last_opt(f, param$0){
         var param$1 = param$0;
         for(;;){
          if(! param$1)  /*<<map.ml:208:10>>*/ return 0;
          var
           r$0 = param$1[4],
           d0$1 = param$1[3],
           v0$1 = param$1[2],
           l$0 = param$1[1];
           /*<<map.ml:210:13>>*/ if
           (!  /*<<map.ml:210:13>>*/ caml_call1(f, v0$1)){var param$1 = l$0; continue;}
          var v0 = v0$1, d0 = d0$1, param = r$0;
          for(;;){
           if(! param)  /*<<map.ml:199:10>>*/ return [0, [0, v0, d0]];
           var r = param[4], d0$0 = param[3], v0$0 = param[2], l = param[1];
            /*<<map.ml:201:13>>*/ if
            ( /*<<map.ml:201:13>>*/ caml_call1(f, v0$0)){
            var v0 = v0$0, d0 = d0$0, param = r;
            continue;
           }
           var param = l;
          }
         }
        }
        function find_opt(x, param){
         var param$0 = param;
         for(;;){
          if(! param$0)  /*<<map.ml:217:10>>*/ return 0;
           /*<<map.ml:219:18>>*/ var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
            /*<<map.ml:219:18>>*/ c =
              /*<<map.ml:219:18>>*/ caml_call2(Ord[1], x, v);
           /*<<map.ml:219:18>>*/ if(0 === c)
            /*<<map.ml:220:24>>*/ return [0, d];
           /*<<map.ml:221:15>>*/ var
            /*<<map.ml:221:15>>*/ r$0 = 0 <= c ? r : l,
           param$0 = r$0;
         }
        }
        function mem(x, param){
         var param$0 = param;
         for(;;){
          if(! param$0)  /*<<map.ml:225:10>>*/ return 0;
           /*<<map.ml:227:18>>*/ var
           r = param$0[4],
           v = param$0[2],
           l = param$0[1],
            /*<<map.ml:227:18>>*/ c =
              /*<<map.ml:227:18>>*/ caml_call2(Ord[1], x, v),
            /*<<map.ml:227:18>>*/ _F_ = 0 === c ? 1 : 0;
           /*<<map.ml:227:18>>*/ if(_F_)  /*<<map.ml:225:10>>*/ return _F_;
          var r$0 = 0 <= c ? r : l, param$0 = r$0;
         }
        }
        function min_binding(param){
         var param$0 = param;
          /*<<map.ml:230:26>>*/ for(;;){
           /*<<map.ml:230:26>>*/ if(! param$0)
            /*<<map.ml:231:17>>*/ throw  /*<<map.ml:231:17>>*/ caml_maybe_attach_backtrace
                  (Stdlib[8], 1);
          var l = param$0[1];
          if(l){var param$0 = l; continue;}
          var d = param$0[3], v = param$0[2];
          return [0, v, d];
         }
         /*<<map.ml:233:33>>*/ }
        function min_binding_opt(param){
         var param$0 = param;
          /*<<map.ml:235:30>>*/ for(;;){
           /*<<map.ml:235:30>>*/ if(! param$0)
            /*<<map.ml:236:17>>*/ return 0;
          var l = param$0[1];
          if(l){var param$0 = l; continue;}
          var d = param$0[3], v = param$0[2];
          return [0, [0, v, d]];
         }
         /*<<map.ml:238:36>>*/ }
        function max_binding(param){
         var param$0 = param;
          /*<<map.ml:240:26>>*/ for(;;){
           /*<<map.ml:240:26>>*/ if(! param$0)
            /*<<map.ml:241:17>>*/ throw  /*<<map.ml:241:17>>*/ caml_maybe_attach_backtrace
                  (Stdlib[8], 1);
          if(param$0[4]){
            /*<<map.ml:243:20>>*/ var
             /*<<map.ml:243:20>>*/ r = param$0[4],
            param$0 = r;
           continue;
          }
          var d = param$0[3], v = param$0[2];
          return [0, v, d];
         }
         /*<<map.ml:243:33>>*/ }
        function max_binding_opt(param){
         var param$0 = param;
          /*<<map.ml:245:30>>*/ for(;;){
           /*<<map.ml:245:30>>*/ if(! param$0)
            /*<<map.ml:246:17>>*/ return 0;
          if(param$0[4]){
            /*<<map.ml:248:20>>*/ var
             /*<<map.ml:248:20>>*/ r = param$0[4],
            param$0 = r;
           continue;
          }
          var d = param$0[3], v = param$0[2];
          return [0, [0, v, d]];
         }
         /*<<map.ml:248:37>>*/ }
        function remove_min_binding(param){
          /*<<map.ml:250:33>>*/ if(! param)
           /*<<map.ml:251:17>>*/ return  /*<<map.ml:251:17>>*/ caml_call1
                  (Stdlib[1], cst_Map_remove_min_elt);
         var l = param[1];
         if(l){
          var r = param[4], d = param[3], v = param[2];
           /*<<map.ml:253:33>>*/ return bal(remove_min_binding(l), v, d, r);
         }
          /*<<map.ml:252:29>>*/  /*<<map.ml:252:29>>*/ var r$0 = param[4];
          /*<<map.ml:252:29>>*/ return r$0;
         /*<<map.ml:253:61>>*/ }
        function _d_(t1, t2){
          /*<<map.ml:256:6>>*/ if(! t1)  /*<<map.ml:257:22>>*/ return t2;
          /*<<map.ml:260:10>>*/ if(! t2)  /*<<map.ml:258:22>>*/ return t1;
          /*<<map.ml:260:23>>*/ var
           /*<<map.ml:260:23>>*/ match = min_binding(t2),
           /*<<map.ml:260:23>>*/ d = match[2],
           /*<<map.ml:260:23>>*/ x = match[1];
          /*<<map.ml:261:21>>*/ return bal(t1, x, d, remove_min_binding(t2));
         /*<<map.ml:261:44>>*/ }
        function remove(x, m){
          /*<<?>>*/ if(! m)  /*<<map.ml:265:10>>*/ return 0;
          /*<<map.ml:267:18>>*/ var
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
           /*<<map.ml:267:18>>*/ c =
             /*<<map.ml:267:18>>*/ caml_call2(Ord[1], x, v);
          /*<<map.ml:267:18>>*/ if(0 === c)
           /*<<map.ml:268:24>>*/ return _d_(l, r);
          /*<<map.ml:269:15>>*/ if(0 <= c){
           /*<<map.ml:272:21>>*/  /*<<map.ml:272:21>>*/ var rr = remove(x, r);
           /*<<map.ml:272:21>>*/ return r === rr ? m : bal(l, v, d, rr);
         }
          /*<<map.ml:270:21>>*/  /*<<map.ml:270:21>>*/ var ll = remove(x, l);
          /*<<map.ml:270:21>>*/ return l === ll ? m : bal(ll, v, d, r);
        }
        function update(x, f, m){
          /*<<?>>*/ if(! m){
           /*<<map.ml:276:22>>*/  /*<<map.ml:276:22>>*/ var
           match$0 =  /*<<map.ml:276:22>>*/ caml_call1(f, 0);
           /*<<map.ml:276:22>>*/ if(! match$0)
            /*<<map.ml:277:20>>*/ return 0;
           /*<<map.ml:278:25>>*/  /*<<map.ml:278:25>>*/ var
           data$0 = match$0[1];
           /*<<map.ml:278:25>>*/ return [0, 0, x, data$0, 0, 1];
         }
          /*<<map.ml:281:18>>*/ var
          h = m[5],
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
           /*<<map.ml:281:18>>*/ c =
             /*<<map.ml:281:18>>*/ caml_call2(Ord[1], x, v);
          /*<<map.ml:281:18>>*/ if(0 === c){
           /*<<map.ml:283:18>>*/  /*<<map.ml:283:18>>*/ var
           match =  /*<<map.ml:283:18>>*/ caml_call1(f, [0, d]);
           /*<<map.ml:283:18>>*/ if(! match)
            /*<<map.ml:284:22>>*/ return _d_(l, r);
           /*<<map.ml:286:16>>*/  /*<<map.ml:286:16>>*/ var data = match[1];
           /*<<map.ml:286:16>>*/ return d === data ? m : [0, l, x, data, r, h];
         }
          /*<<map.ml:287:19>>*/ if(0 <= c){
           /*<<map.ml:291:21>>*/  /*<<map.ml:291:21>>*/ var
           rr = update(x, f, r);
           /*<<map.ml:291:21>>*/ return r === rr ? m : bal(l, v, d, rr);
         }
          /*<<map.ml:288:21>>*/  /*<<map.ml:288:21>>*/ var
          ll = update(x, f, l);
          /*<<map.ml:288:21>>*/ return l === ll ? m : bal(ll, v, d, r);
        }
        function iter(f, param){
         var param$0 = param;
         for(;;){
          if(! param$0)  /*<<map.ml:295:17>>*/ return 0;
          var r = param$0[4], d = param$0[3], v = param$0[2], l = param$0[1];
           /*<<map.ml:297:10>>*/ iter(f, l);
           /*<<map.ml:297:20>>*/  /*<<map.ml:297:20>>*/ caml_call2(f, v, d);
          var param$0 = r;
         }
        }
        function map(f, param){
          /*<<?>>*/ if(! param)  /*<<map.ml:301:10>>*/ return 0;
          /*<<map.ml:303:19>>*/ var
          h = param[5],
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
           /*<<map.ml:303:19>>*/ l$0 = map(f, l),
           /*<<map.ml:304:19>>*/ d$0 =  /*<<map.ml:304:19>>*/ caml_call1(f, d),
           /*<<map.ml:305:19>>*/ r$0 = map(f, r);
          /*<<map.ml:305:19>>*/ return [0, l$0, v, d$0, r$0, h];
        }
        function mapi(f, param){
          /*<<?>>*/ if(! param)  /*<<map.ml:310:10>>*/ return 0;
          /*<<map.ml:312:19>>*/ var
          h = param[5],
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
           /*<<map.ml:312:19>>*/ l$0 = mapi(f, l),
           /*<<map.ml:313:19>>*/ d$0 =
             /*<<map.ml:313:19>>*/ caml_call2(f, v, d),
           /*<<map.ml:314:19>>*/ r$0 = mapi(f, r);
          /*<<map.ml:314:19>>*/ return [0, l$0, v, d$0, r$0, h];
        }
        function fold(f, m, accu){
         var m$0 = m, accu$0 = accu;
          /*<<map.ml:318:6>>*/ for(;;){
           /*<<map.ml:318:6>>*/ if(! m$0)
            /*<<map.ml:319:17>>*/ return accu$0;
           /*<<map.ml:321:19>>*/ var
           r = m$0[4],
           d = m$0[3],
           v = m$0[2],
           l = m$0[1],
            /*<<map.ml:321:19>>*/ accu$1 =
              /*<<map.ml:321:19>>*/ caml_call3(f, v, d, fold(f, l, accu$0)),
           m$0 = r,
           accu$0 = accu$1;
         }
         /*<<map.ml:321:42>>*/ }
        function for_all(p, param){
         var param$0 = param;
         for(;;){
          if(! param$0)  /*<<map.ml:324:17>>*/ return 1;
           /*<<map.ml:325:29>>*/ var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
            /*<<map.ml:325:29>>*/ _C_ =
              /*<<map.ml:325:29>>*/ caml_call2(p, v, d);
           /*<<map.ml:325:29>>*/ if(_C_){
            /*<<map.ml:325:38>>*/  /*<<map.ml:325:38>>*/ var
            _D_ = for_all(p, l);
            /*<<map.ml:325:38>>*/ if(_D_){var param$0 = r; continue;}
           var _E_ = _D_;
          }
          else
           var _E_ = _C_;
           /*<<map.ml:324:17>>*/ return _E_;
         }
        }
        function exists(p, param){
         var param$0 = param;
         for(;;){
          if(! param$0)  /*<<map.ml:328:17>>*/ return 0;
           /*<<map.ml:329:29>>*/ var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
            /*<<map.ml:329:29>>*/ _z_ =
              /*<<map.ml:329:29>>*/ caml_call2(p, v, d);
           /*<<map.ml:329:29>>*/ if(_z_)
           var _A_ = _z_;
          else{
            /*<<map.ml:329:38>>*/  /*<<map.ml:329:38>>*/ var
            _B_ = exists(p, l);
            /*<<map.ml:329:38>>*/ if(! _B_){var param$0 = r; continue;}
           var _A_ = _B_;
          }
           /*<<map.ml:328:17>>*/ return _A_;
         }
        }
        function add_min_binding(k, x, param){
          /*<<?>>*/ if(! param)  /*<<map.ml:340:17>>*/ return singleton(k, x);
         var r = param[4], d = param[3], v = param[2], l = param[1];
          /*<<map.ml:342:12>>*/ return bal(add_min_binding(k, x, l), v, d, r);
        }
        function add_max_binding(k, x, param){
          /*<<?>>*/ if(! param)  /*<<map.ml:345:17>>*/ return singleton(k, x);
         var r = param[4], d = param[3], v = param[2], l = param[1];
          /*<<map.ml:347:18>>*/ return bal(l, v, d, add_max_binding(k, x, r));
        }
        function join(l, v, d, r){
          /*<<map.ml:353:6>>*/ if(! l)
           /*<<map.ml:354:22>>*/ return add_min_binding(v, d, r);
         if(! r)  /*<<map.ml:355:22>>*/ return add_max_binding(v, d, l);
         var
          rh = r[5],
          rr = r[4],
          rd = r[3],
          rv = r[2],
          rl = r[1],
          lh = l[5],
          lr = l[4],
          ld = l[3],
          lv = l[2],
          ll = l[1];
         return (rh + 2 | 0) < lh
                 ? bal(ll, lv, ld, join(lr, v, d, r))
                 : (lh
                   + 2
                   | 0)
                   < rh
                   ? bal(join(l, v, d, rl), rv, rd, rr)
                   : create(l, v, d, r);
         /*<<map.ml:360:24>>*/ }
        function concat(t1, t2){
          /*<<map.ml:367:6>>*/ if(! t1)  /*<<map.ml:368:22>>*/ return t2;
          /*<<map.ml:371:10>>*/ if(! t2)  /*<<map.ml:369:22>>*/ return t1;
          /*<<map.ml:371:23>>*/ var
           /*<<map.ml:371:23>>*/ match = min_binding(t2),
           /*<<map.ml:371:23>>*/ d = match[2],
           /*<<map.ml:371:23>>*/ x = match[1];
          /*<<map.ml:372:22>>*/ return join(t1, x, d, remove_min_binding(t2));
         /*<<map.ml:372:45>>*/ }
        function concat_or_join(t1, v, d, t2){
          /*<<map.ml:375:6>>*/ if(! d)
           /*<<map.ml:377:16>>*/ return concat(t1, t2);
          /*<<map.ml:376:18>>*/  /*<<map.ml:376:18>>*/ var d$0 = d[1];
          /*<<map.ml:376:18>>*/ return join(t1, v, d$0, t2);
         /*<<map.ml:377:28>>*/ }
        function split(x, param){
          /*<<?>>*/ if(! param)  /*<<map.ml:381:10>>*/ return _a_;
          /*<<map.ml:383:18>>*/ var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
           /*<<map.ml:383:18>>*/ c =
             /*<<map.ml:383:18>>*/ caml_call2(Ord[1], x, v);
          /*<<map.ml:383:18>>*/ if(0 === c)
           /*<<map.ml:384:24>>*/ return [0, l, [0, d], r];
          /*<<map.ml:385:15>>*/ if(0 <= c){
           /*<<map.ml:388:33>>*/ var
            /*<<map.ml:388:33>>*/ match = split(x, r),
            /*<<map.ml:388:33>>*/ rr = match[3],
            /*<<map.ml:388:33>>*/ pres = match[2],
            /*<<map.ml:388:33>>*/ lr = match[1];
           /*<<map.ml:388:47>>*/ return [0, join(l, v, d, lr), pres, rr];
         }
          /*<<map.ml:386:33>>*/ var
           /*<<map.ml:386:33>>*/ match$0 = split(x, l),
           /*<<map.ml:386:33>>*/ rl = match$0[3],
           /*<<map.ml:386:33>>*/ pres$0 = match$0[2],
           /*<<map.ml:386:33>>*/ ll = match$0[1];
          /*<<map.ml:386:57>>*/ return [0, ll, pres$0, join(rl, v, d, r)];
        }
        function merge(f, s1, s2){
          /*<<map.ml:391:6>>*/ if(s1){
          var h1 = s1[5], r1 = s1[4], d1 = s1[3], v1 = s1[2], l1 = s1[1];
           /*<<map.ml:393:60>>*/ if(height(s2) <= h1){
            /*<<map.ml:394:29>>*/ var
             /*<<map.ml:394:29>>*/ match = split(v1, s2),
             /*<<map.ml:394:29>>*/ r2 = match[3],
             /*<<map.ml:394:29>>*/ d2 = match[2],
             /*<<map.ml:394:29>>*/ l2 = match[1],
             /*<<map.ml:395:64>>*/ _v_ = merge(f, r1, r2),
             /*<<map.ml:395:44>>*/ _w_ =
               /*<<map.ml:395:44>>*/ caml_call3(f, v1, [0, d1], d2);
            /*<<map.ml:395:25>>*/ return concat_or_join
                   (merge(f, l1, l2), v1, _w_, _v_);
          }
         }
         else if(! s2)  /*<<map.ml:392:26>>*/ return 0;
         if(! s2)
           /*<<map.ml:400:10>>*/ throw  /*<<map.ml:400:10>>*/ caml_maybe_attach_backtrace
                 ([0, Assert_failure, _b_], 1);
          /*<<map.ml:397:29>>*/ var
          r2$0 = s2[4],
          d2$0 = s2[3],
          v2 = s2[2],
          l2$0 = s2[1],
           /*<<map.ml:397:29>>*/ match$0 = split(v2, s1),
           /*<<map.ml:397:29>>*/ r1$0 = match$0[3],
           /*<<map.ml:397:29>>*/ d1$0 = match$0[2],
           /*<<map.ml:397:29>>*/ l1$0 = match$0[1],
           /*<<map.ml:398:64>>*/ _x_ = merge(f, r1$0, r2$0),
           /*<<map.ml:398:44>>*/ _y_ =
             /*<<map.ml:398:44>>*/ caml_call3(f, v2, d1$0, [0, d2$0]);
          /*<<map.ml:398:25>>*/ return concat_or_join
                 (merge(f, l1$0, l2$0), v2, _y_, _x_);
         /*<<map.ml:400:22>>*/ }
        function union(f, s1, s2){
          /*<<map.ml:403:6>>*/ if(s1){
          if(s2){
           var
            h2 = s2[5],
            r2 = s2[4],
            d2 = s2[3],
            v2 = s2[2],
            l2 = s2[1],
            h1 = s1[5],
            r1 = s1[4],
            d1 = s1[3],
            v1 = s1[2],
            l1 = s1[1];
           if(h2 <= h1){
             /*<<map.ml:408:31>>*/ var
              /*<<map.ml:408:31>>*/ match = split(v1, s2),
              /*<<map.ml:408:31>>*/ r2$0 = match[3],
              /*<<map.ml:408:31>>*/ d2$0 = match[2],
              /*<<map.ml:408:31>>*/ l2$0 = match[1],
              /*<<map.ml:409:20>>*/ l = union(f, l1, l2$0),
              /*<<map.ml:409:42>>*/ r = union(f, r1, r2$0);
             /*<<map.ml:409:42>>*/ if(! d2$0)
              /*<<map.ml:411:22>>*/ return join(l, v1, d1, r);
             /*<<map.ml:412:25>>*/  /*<<map.ml:412:25>>*/ var d2$1 = d2$0[1];
             /*<<map.ml:412:45>>*/ return concat_or_join
                    (l,
                     v1,
                      /*<<map.ml:412:45>>*/ caml_call3(f, v1, d1, d2$1),
                     r);
           }
            /*<<map.ml:414:31>>*/ var
             /*<<map.ml:414:31>>*/ match$0 = split(v2, s1),
             /*<<map.ml:414:31>>*/ r1$0 = match$0[3],
             /*<<map.ml:414:31>>*/ d1$0 = match$0[2],
             /*<<map.ml:414:31>>*/ l1$0 = match$0[1],
             /*<<map.ml:415:20>>*/ l$0 = union(f, l1$0, l2),
             /*<<map.ml:415:42>>*/ r$0 = union(f, r1$0, r2);
            /*<<map.ml:415:42>>*/ if(! d1$0)
             /*<<map.ml:417:22>>*/ return join(l$0, v2, d2, r$0);
            /*<<map.ml:418:25>>*/  /*<<map.ml:418:25>>*/ var d1$1 = d1$0[1];
            /*<<map.ml:418:45>>*/ return concat_or_join
                   (l$0,
                    v2,
                     /*<<map.ml:418:45>>*/ caml_call3(f, v2, d1$1, d2),
                    r$0);
          }
          var s = s1;
         }
         else
          var s = s2;
          /*<<map.ml:404:35>>*/ return s;
         /*<<map.ml:418:59>>*/ }
        function filter(p, m){
          /*<<?>>*/ if(! m)  /*<<map.ml:421:17>>*/ return 0;
          /*<<map.ml:424:19>>*/ var
          r = m[4],
          d = m[3],
          v = m[2],
          l = m[1],
           /*<<map.ml:424:19>>*/ l$0 = filter(p, l),
           /*<<map.ml:425:20>>*/ pvd =
             /*<<map.ml:425:20>>*/ caml_call2(p, v, d),
           /*<<map.ml:426:19>>*/ r$0 = filter(p, r);
          /*<<map.ml:426:19>>*/ if(! pvd)
           /*<<map.ml:428:15>>*/ return concat(l$0, r$0);
         if(l === l$0 && r === r$0)  /*<<map.ml:427:45>>*/ return m;
          /*<<map.ml:427:52>>*/ return join(l$0, v, d, r$0);
        }
        function filter_map(f, param){
          /*<<?>>*/ if(! param)  /*<<map.ml:431:17>>*/ return 0;
          /*<<map.ml:434:19>>*/ var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
           /*<<map.ml:434:19>>*/ l$0 = filter_map(f, l),
           /*<<map.ml:435:20>>*/ fvd =
             /*<<map.ml:435:20>>*/ caml_call2(f, v, d),
           /*<<map.ml:436:19>>*/ r$0 = filter_map(f, r);
          /*<<map.ml:436:19>>*/ if(! fvd)
           /*<<map.ml:439:22>>*/ return concat(l$0, r$0);
          /*<<map.ml:438:25>>*/  /*<<map.ml:438:25>>*/ var d$0 = fvd[1];
          /*<<map.ml:438:25>>*/ return join(l$0, v, d$0, r$0);
        }
        function partition(p, param){
          /*<<?>>*/ if(! param)  /*<<map.ml:443:17>>*/ return _c_;
          /*<<map.ml:446:25>>*/ var
          r = param[4],
          d = param[3],
          v = param[2],
          l = param[1],
           /*<<map.ml:446:25>>*/ match = partition(p, l),
           /*<<map.ml:446:25>>*/ lf = match[2],
           /*<<map.ml:446:25>>*/ lt = match[1],
           /*<<map.ml:447:20>>*/ pvd =
             /*<<map.ml:447:20>>*/ caml_call2(p, v, d),
           /*<<map.ml:448:25>>*/ match$0 = partition(p, r),
           /*<<map.ml:448:25>>*/ rf = match$0[2],
           /*<<map.ml:448:25>>*/ rt = match$0[1];
          /*<<map.ml:448:25>>*/ if(pvd){
           /*<<map.ml:450:32>>*/  /*<<map.ml:450:32>>*/ var
           _t_ = concat(lf, rf);
           /*<<map.ml:450:16>>*/ return [0, join(lt, v, d, rt), _t_];
         }
          /*<<map.ml:451:30>>*/  /*<<map.ml:451:30>>*/ var
          _u_ = join(lf, v, d, rf);
          /*<<map.ml:451:16>>*/ return [0, concat(lt, rt), _u_];
        }
        function cons_enum(m, e){
         var m$0 = m, e$0 = e;
          /*<<map.ml:456:6>>*/ for(;;){
           /*<<map.ml:456:6>>*/ if(! m$0)  /*<<map.ml:457:17>>*/ return e$0;
          var
           r = m$0[4],
           d = m$0[3],
           v = m$0[2],
           l = m$0[1],
           e$1 = [0, v, d, r, e$0],
           m$0 = l,
           e$0 = e$1;
         }
         /*<<map.ml:458:59>>*/ }
        function compare(cmp, m1, m2){
          /*<<map.ml:472:40>>*/ var
           /*<<map.ml:472:40>>*/ e2$2 = cons_enum(m2, 0),
           /*<<map.ml:472:21>>*/ e1$2 = cons_enum(m1, 0),
          e1 = e1$2,
          e2 = e2$2;
          /*<<map.ml:462:10>>*/ for(;;){
           /*<<map.ml:462:10>>*/ if(! e1)
            /*<<map.ml:464:23>>*/ return e2 ? -1 : 0;
          if(! e2)  /*<<map.ml:465:22>>*/ return 1;
           /*<<map.ml:467:20>>*/ var
           e2$0 = e2[4],
           r2 = e2[3],
           d2 = e2[2],
           v2 = e2[1],
           e1$0 = e1[4],
           r1 = e1[3],
           d1 = e1[2],
           v1 = e1[1],
            /*<<map.ml:467:20>>*/ c =
              /*<<map.ml:467:20>>*/ caml_call2(Ord[1], v1, v2);
           /*<<map.ml:467:20>>*/ if(0 !== c)  /*<<map.ml:468:27>>*/ return c;
           /*<<map.ml:469:20>>*/  /*<<map.ml:469:20>>*/ var
           c$0 =  /*<<map.ml:469:20>>*/ caml_call2(cmp, d1, d2);
           /*<<map.ml:469:20>>*/ if(0 !== c$0)
            /*<<map.ml:470:27>>*/ return c$0;
           /*<<map.ml:471:42>>*/ var
            /*<<map.ml:471:42>>*/ e2$1 = cons_enum(r2, e2$0),
            /*<<map.ml:471:24>>*/ e1$1 = cons_enum(r1, e1$0),
           e1 = e1$1,
           e2 = e2$1;
         }
         /*<<map.ml:472:58>>*/ }
        function equal(cmp, m1, m2){
          /*<<map.ml:483:38>>*/ var
           /*<<map.ml:483:38>>*/ e2$2 = cons_enum(m2, 0),
           /*<<map.ml:483:19>>*/ e1$2 = cons_enum(m1, 0),
          e1 = e1$2,
          e2 = e2$2;
          /*<<map.ml:476:10>>*/ for(;;){
           /*<<map.ml:476:10>>*/ if(! e1)
            /*<<map.ml:478:23>>*/ return e2 ? 0 : 1;
          if(! e2)  /*<<map.ml:479:22>>*/ return 0;
           /*<<map.ml:481:12>>*/ var
           e2$0 = e2[4],
           r2 = e2[3],
           d2 = e2[2],
           v2 = e2[1],
           e1$0 = e1[4],
           r1 = e1[3],
           d1 = e1[2],
           v1 = e1[1],
            /*<<map.ml:481:12>>*/ _q_ =
             0 ===  /*<<map.ml:481:12>>*/ caml_call2(Ord[1], v1, v2) ? 1 : 0;
           /*<<map.ml:481:12>>*/ if(_q_){
            /*<<map.ml:481:37>>*/  /*<<map.ml:481:37>>*/ var
            _r_ =  /*<<map.ml:481:37>>*/ caml_call2(cmp, d1, d2);
            /*<<map.ml:481:37>>*/ if(_r_){
             /*<<map.ml:482:40>>*/ var
              /*<<map.ml:482:40>>*/ e2$1 = cons_enum(r2, e2$0),
              /*<<map.ml:482:22>>*/ e1$1 = cons_enum(r1, e1$0),
             e1 = e1$1,
             e2 = e2$1;
            continue;
           }
           var _s_ = _r_;
          }
          else
           var _s_ = _q_;
           /*<<map.ml:479:22>>*/ return _s_;
         }
         /*<<map.ml:483:56>>*/ }
        function cardinal(param){
          /*<<map.ml:485:23>>*/ if(! param)  /*<<map.ml:486:17>>*/ return 0;
          /*<<map.ml:487:40>>*/ var
          r = param[4],
          l = param[1],
           /*<<map.ml:487:40>>*/ _p_ = cardinal(r);
          /*<<map.ml:487:23>>*/ return (cardinal(l) + 1 | 0) + _p_ | 0;
         /*<<map.ml:487:50>>*/ }
        function bindings_aux(accu, param){
         var accu$0 = accu, param$0 = param;
         for(;;){
          if(! param$0)  /*<<map.ml:490:17>>*/ return accu$0;
           /*<<map.ml:491:53>>*/ var
           r = param$0[4],
           d = param$0[3],
           v = param$0[2],
           l = param$0[1],
            /*<<map.ml:491:53>>*/ accu$1 =
             [0, [0, v, d], bindings_aux(accu$0, r)],
           accu$0 = accu$1,
           param$0 = l;
         }
        }
        function bindings(s){
          /*<<map.ml:494:6>>*/ return bindings_aux(0, s);
         /*<<map.ml:494:23>>*/ }
        function add_seq(i, m){
          /*<<map.ml:501:6>>*/ function _o_(m, param){
           /*<<map.ml:501:20>>*/ var
            /*<<map.ml:501:20>>*/ v = param[2],
            /*<<map.ml:501:20>>*/ k = param[1];
           /*<<map.ml:501:20>>*/ return add(k, v, m);
          /*<<map.ml:501:46>>*/ }
          /*<<map.ml:501:6>>*/ return  /*<<map.ml:501:6>>*/ caml_call3
                 (Stdlib_Seq[5], _o_, m, i);
         /*<<map.ml:501:50>>*/ }
        function of_seq(i){
          /*<<map.ml:503:19>>*/ return add_seq(i, empty);
         /*<<map.ml:503:34>>*/ }
        function seq_of_enum(c, param){
          /*<<map.ml:505:32>>*/ if(! c)  /*<<map.ml:506:15>>*/ return 0;
          /*<<map.ml:507:59>>*/ var
          rest = c[4],
          t = c[3],
          v = c[2],
          k = c[1],
           /*<<map.ml:507:59>>*/ _m_ = cons_enum(t, rest);
          /*<<map.ml:507:46>>*/ return [0,
                 [0, k, v],
                 function(_n_){ /*<<?>>*/ return seq_of_enum(_m_, _n_);}];
         /*<<map.ml:507:78>>*/ }
        function to_seq(m){
          /*<<map.ml:510:19>>*/  /*<<map.ml:510:19>>*/ var
          _k_ = cons_enum(m, 0);
          /*<<map.ml:510:19>>*/ return function(_l_){
           /*<<?>>*/ return seq_of_enum(_k_, _l_);};
         /*<<map.ml:510:36>>*/ }
        function snoc_enum(s, e){
         var s$0 = s, e$0 = e;
          /*<<map.ml:513:6>>*/ for(;;){
           /*<<map.ml:513:6>>*/ if(! s$0)  /*<<map.ml:514:17>>*/ return e$0;
          var
           r = s$0[4],
           d = s$0[3],
           v = s$0[2],
           l = s$0[1],
           e$1 = [0, v, d, l, e$0],
           s$0 = r,
           e$0 = e$1;
         }
         /*<<map.ml:515:58>>*/ }
        function rev_seq_of_enum(c, param){
          /*<<map.ml:517:36>>*/ if(! c)  /*<<map.ml:518:15>>*/ return 0;
          /*<<map.ml:520:44>>*/ var
          rest = c[4],
          t = c[3],
          v = c[2],
          k = c[1],
           /*<<map.ml:520:44>>*/ _i_ = snoc_enum(t, rest);
          /*<<map.ml:520:27>>*/ return [0,
                 [0, k, v],
                 function(_j_){ /*<<?>>*/ return rev_seq_of_enum(_i_, _j_);}];
         /*<<map.ml:520:63>>*/ }
        function to_rev_seq(c){
          /*<<map.ml:523:23>>*/  /*<<map.ml:523:23>>*/ var
          _g_ = snoc_enum(c, 0);
          /*<<map.ml:523:23>>*/ return function(_h_){
           /*<<?>>*/ return rev_seq_of_enum(_g_, _h_);};
         /*<<map.ml:523:40>>*/ }
        function to_seq_from(low, m){
         var m$0 = m, c = 0;
          /*<<map.ml:526:28>>*/ for(;;){
           /*<<map.ml:526:28>>*/ if(m$0){
            /*<<map.ml:529:24>>*/ var
            r = m$0[4],
            d = m$0[3],
            v = m$0[2],
            l = m$0[1],
             /*<<map.ml:529:24>>*/ n =
               /*<<map.ml:529:24>>*/ caml_call2(Ord[1], v, low);
            /*<<map.ml:529:24>>*/ if(0 !== n){
             /*<<map.ml:531:23>>*/ if(0 <= n){
              /*<<map.ml:532:21>>*/ var
               /*<<map.ml:532:21>>*/ c$0 = [0, v, d, r, c],
              m$0 = l,
              c = c$0;
             continue;
            }
            var m$0 = r;
            continue;
           }
           var _e_ = [0, v, d, r, c];
          }
          else
           var _e_ = c;
          return function(_f_){ /*<<?>>*/ return seq_of_enum(_e_, _f_);};
         }
         /*<<map.ml:535:34>>*/ }
        return [0,
                empty,
                is_empty,
                mem,
                add,
                update,
                singleton,
                remove,
                merge,
                union,
                compare,
                equal,
                iter,
                fold,
                for_all,
                exists,
                filter,
                filter_map,
                partition,
                cardinal,
                bindings,
                min_binding,
                min_binding_opt,
                max_binding,
                max_binding_opt,
                min_binding,
                min_binding_opt,
                split,
                find,
                find_opt,
                find_first,
                find_first_opt,
                find_last,
                find_last_opt,
                map,
                mapi,
                to_seq,
                to_rev_seq,
                to_seq_from,
                add_seq,
                of_seq];
       }];
    /*<<map.ml:69:11>>*/  /*<<map.ml:69:11>>*/ runtime.caml_register_global
    (11, Stdlib_Map, "Stdlib__Map");
    /*<<map.ml:69:11>>*/ return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Stack
//# unitInfo: Requires: Stdlib__List, Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<stack.ml:63:2>>*/ var
     /*<<stack.ml:63:2>>*/ global_data =
       /*<<stack.ml:63:2>>*/ runtime.caml_get_global_data(),
     /*<<stack.ml:63:2>>*/ Stdlib_Seq = global_data.Stdlib__Seq,
     /*<<stack.ml:63:2>>*/ Stdlib_List = global_data.Stdlib__List,
    Empty = [248, "Stdlib.Stack.Empty", runtime.caml_fresh_oo_id(0)];
   function create(param){
     /*<<stack.ml:20:16>>*/ return [0, 0, 0];
    /*<<stack.ml:20:36>>*/ }
   function clear(s){
     /*<<stack.ml:22:14>>*/ s[1] = 0;
     /*<<stack.ml:22:14>>*/ s[2] = 0;
     /*<<stack.ml:22:14>>*/ return 0;
    /*<<stack.ml:22:35>>*/ }
   function copy(s){
     /*<<stack.ml:24:13>>*/ return [0, s[1], s[2]];
    /*<<stack.ml:24:38>>*/ }
   function push(x, s){
     /*<<stack.ml:26:15>>*/ s[1] = [0, x, s[1]];
     /*<<stack.ml:26:15>>*/ s[2] = s[2] + 1 | 0;
     /*<<stack.ml:26:15>>*/ return 0;
    /*<<stack.ml:26:50>>*/ }
   function pop(s){
     /*<<stack.ml:29:2>>*/  /*<<stack.ml:29:2>>*/ var match = s[1];
     /*<<stack.ml:29:2>>*/ if(! match)
      /*<<stack.ml:31:14>>*/ throw  /*<<stack.ml:31:14>>*/ caml_maybe_attach_backtrace
            (Empty, 1);
    var tl = match[2], hd = match[1];
    s[1] = tl;
    s[2] = s[2] - 1 | 0;
    return hd;
    /*<<stack.ml:31:25>>*/ }
   function pop_opt(s){
     /*<<stack.ml:34:2>>*/  /*<<stack.ml:34:2>>*/ var match = s[1];
     /*<<stack.ml:34:2>>*/ if(! match)  /*<<stack.ml:36:14>>*/ return 0;
    var tl = match[2], hd = match[1];
    s[1] = tl;
    s[2] = s[2] - 1 | 0;
    return [0, hd];
    /*<<stack.ml:36:18>>*/ }
   function top(s){
     /*<<stack.ml:39:2>>*/  /*<<stack.ml:39:2>>*/ var match = s[1];
     /*<<stack.ml:39:2>>*/ if(! match)
      /*<<stack.ml:41:13>>*/ throw  /*<<stack.ml:41:13>>*/ caml_maybe_attach_backtrace
            (Empty, 1);
     /*<<stack.ml:40:13>>*/  /*<<stack.ml:40:13>>*/ var hd = match[1];
     /*<<stack.ml:40:13>>*/ return hd;
    /*<<stack.ml:41:24>>*/ }
   function top_opt(s){
     /*<<stack.ml:44:2>>*/  /*<<stack.ml:44:2>>*/ var match = s[1];
     /*<<stack.ml:44:2>>*/ if(! match)  /*<<stack.ml:46:13>>*/ return 0;
     /*<<stack.ml:45:13>>*/  /*<<stack.ml:45:13>>*/ var hd = match[1];
     /*<<stack.ml:45:13>>*/ return [0, hd];
    /*<<stack.ml:46:17>>*/ }
   function is_empty(s){
     /*<<stack.ml:48:17>>*/ return 0 === s[1] ? 1 : 0;
    /*<<stack.ml:48:27>>*/ }
   function length(s){
     /*<<stack.ml:50:15>>*/ return s[2];
    /*<<stack.ml:50:20>>*/ }
   function iter(f, s){
     /*<<stack.ml:52:15>>*/ return  /*<<stack.ml:52:15>>*/ caml_call2
            (Stdlib_List[17], f, s[1]);
    /*<<stack.ml:52:30>>*/ }
   function fold(f, acc, s){
     /*<<stack.ml:54:19>>*/ return  /*<<stack.ml:54:19>>*/ caml_call3
            (Stdlib_List[25], f, acc, s[1]);
    /*<<stack.ml:54:43>>*/ }
   function to_seq(s){
     /*<<stack.ml:58:15>>*/ return  /*<<stack.ml:58:15>>*/ caml_call1
            (Stdlib_List[61], s[1]);
    /*<<stack.ml:58:30>>*/ }
   function add_seq(q, i){
     /*<<stack.ml:60:18>>*/ function _a_(x){
      /*<<stack.ml:60:37>>*/ return push(x, q);
     /*<<stack.ml:60:45>>*/ }
     /*<<stack.ml:60:18>>*/ return  /*<<stack.ml:60:18>>*/ caml_call2
            (Stdlib_Seq[4], _a_, i);
    /*<<stack.ml:60:48>>*/ }
   function of_seq(g){
     /*<<stack.ml:63:10>>*/  /*<<stack.ml:63:10>>*/ var s = create(0);
     /*<<stack.ml:64:2>>*/ add_seq(s, g);
     /*<<stack.ml:64:2>>*/ return s;
    /*<<stack.ml:65:3>>*/ }
   var
    Stdlib_Stack =
      [0,
       Empty,
       create,
       push,
       pop,
       pop_opt,
       top,
       top_opt,
       clear,
       copy,
       is_empty,
       length,
       iter,
       fold,
       to_seq,
       add_seq,
       of_seq];
   runtime.caml_register_global(3, Stdlib_Stack, "Stdlib__Stack");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Queue
//# unitInfo: Requires: Stdlib__Seq
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<queue.ml:162:2>>*/ var
     /*<<queue.ml:162:2>>*/ global_data =
       /*<<queue.ml:162:2>>*/ runtime.caml_get_global_data(),
     /*<<queue.ml:162:2>>*/ Stdlib_Seq = global_data.Stdlib__Seq,
    Empty = [248, "Stdlib.Queue.Empty", runtime.caml_fresh_oo_id(0)];
   function create(param){
     /*<<queue.ml:29:16>>*/ return [0, 0, 0, 0];
    /*<<queue.ml:33:1>>*/ }
   function clear(q){
     /*<<queue.ml:36:2>>*/ q[1] = 0;
     /*<<queue.ml:36:2>>*/ q[2] = 0;
     /*<<queue.ml:36:2>>*/ q[3] = 0;
     /*<<queue.ml:36:2>>*/ return 0;
    /*<<queue.ml:38:15>>*/ }
   function add(x, q){
     /*<<queue.ml:41:2>>*/ var
      /*<<queue.ml:41:2>>*/ cell = [0, x, 0],
      /*<<queue.ml:41:2>>*/ match = q[3];
     /*<<queue.ml:41:2>>*/ return match
            ? (q[1] = q[1] + 1 | 0, match[2] = cell, q[3] = cell, 0)
            : (q[1] = 1, q[2] = cell, q[3] = cell, 0);
    /*<<queue.ml:53:18>>*/ }
   function peek(q){
     /*<<queue.ml:59:2>>*/  /*<<queue.ml:59:2>>*/ var match = q[2];
     /*<<queue.ml:59:2>>*/ if(! match)
      /*<<queue.ml:60:11>>*/ throw  /*<<queue.ml:60:11>>*/ caml_maybe_attach_backtrace
            (Empty, 1);
     /*<<queue.ml:61:24>>*/  /*<<queue.ml:61:24>>*/ var content = match[1];
     /*<<queue.ml:61:24>>*/ return content;
    /*<<queue.ml:61:31>>*/ }
   function peek_opt(q){
     /*<<queue.ml:64:2>>*/  /*<<queue.ml:64:2>>*/ var match = q[2];
     /*<<queue.ml:64:2>>*/ if(! match)  /*<<queue.ml:65:11>>*/ return 0;
     /*<<queue.ml:66:24>>*/  /*<<queue.ml:66:24>>*/ var content = match[1];
     /*<<queue.ml:66:24>>*/ return [0, content];
    /*<<queue.ml:66:36>>*/ }
   function take(q){
     /*<<queue.ml:72:2>>*/  /*<<queue.ml:72:2>>*/ var _g_ = q[2];
     /*<<queue.ml:72:2>>*/ if(! _g_)
      /*<<queue.ml:73:11>>*/ throw  /*<<queue.ml:73:11>>*/ caml_maybe_attach_backtrace
            (Empty, 1);
    var content = _g_[1];
    if(_g_[2]){
     var next = _g_[2];
     q[1] = q[1] - 1 | 0;
     q[2] = next;
     return content;
    }
     /*<<queue.ml:75:4>>*/ clear(q);
     /*<<queue.ml:75:4>>*/ return content;
    /*<<queue.ml:80:11>>*/ }
   function take_opt(q){
     /*<<queue.ml:83:2>>*/  /*<<queue.ml:83:2>>*/ var _f_ = q[2];
     /*<<queue.ml:83:2>>*/ if(! _f_)  /*<<queue.ml:84:11>>*/ return 0;
    var content = _f_[1];
    if(_f_[2]){
     var next = _f_[2];
     q[1] = q[1] - 1 | 0;
     q[2] = next;
     return [0, content];
    }
     /*<<queue.ml:86:4>>*/ clear(q);
     /*<<queue.ml:86:4>>*/ return [0, content];
    /*<<queue.ml:91:16>>*/ }
   function copy(q){
     /*<<queue.ml:108:11>>*/ var
      /*<<queue.ml:108:11>>*/ cell$0 = q[2],
      /*<<queue.ml:108:11>>*/ q_res = [0, q[1], 0, 0],
     prev = 0,
     cell = cell$0;
     /*<<queue.ml:98:4>>*/ for(;;){
      /*<<queue.ml:98:4>>*/ if(! cell){
       /*<<queue.ml:99:13>>*/ q_res[3] = prev;
       /*<<queue.ml:99:13>>*/ return q_res;
     }
     var content = cell[1], next = cell[2], prev$0 = [0, content, 0];
     if(prev)
       /*<<queue.ml:104:18>>*/ prev[2] = prev$0;
     else
       /*<<queue.ml:103:15>>*/ q_res[2] = prev$0;
     var prev = prev$0, cell = next;
    }
    /*<<queue.ml:108:74>>*/ }
   function is_empty(q){
     /*<<queue.ml:111:2>>*/ return 0 === q[1] ? 1 : 0;
    /*<<queue.ml:111:14>>*/ }
   function length(q){
     /*<<queue.ml:114:2>>*/ return q[1];
    /*<<queue.ml:114:10>>*/ }
   function iter(f, q){
     /*<<queue.ml:124:13>>*/ var
      /*<<queue.ml:124:13>>*/ cell$0 = q[2],
     cell = cell$0;
     /*<<queue.ml:118:4>>*/ for(;;){
      /*<<queue.ml:118:4>>*/ if(! cell)  /*<<queue.ml:119:13>>*/ return 0;
     var content = cell[1], next = cell[2];
      /*<<queue.ml:121:6>>*/  /*<<queue.ml:121:6>>*/ caml_call1(f, content);
     var cell = next;
    }
    /*<<queue.ml:124:27>>*/ }
   function fold(f, accu$1, q){
     /*<<queue.ml:134:18>>*/ var
      /*<<queue.ml:134:18>>*/ cell$0 = q[2],
     accu = accu$1,
     cell = cell$0;
     /*<<queue.ml:128:4>>*/ for(;;){
      /*<<queue.ml:128:4>>*/ if(! cell)  /*<<queue.ml:129:13>>*/ return accu;
      /*<<queue.ml:131:17>>*/ var
      content = cell[1],
      next = cell[2],
       /*<<queue.ml:131:17>>*/ accu$0 =
         /*<<queue.ml:131:17>>*/ caml_call2(f, accu, content),
      accu = accu$0,
      cell = next;
    }
    /*<<queue.ml:134:37>>*/ }
   function transfer(q1, q2){
     /*<<queue.ml:137:2>>*/  /*<<queue.ml:137:2>>*/ var
     _e_ = 0 < q1[1] ? 1 : 0;
     /*<<queue.ml:137:2>>*/ if(! _e_) return _e_;
     /*<<queue.ml:138:4>>*/  /*<<queue.ml:138:4>>*/ var match = q2[3];
     /*<<queue.ml:138:4>>*/ return match
            ? (q2
               [1]
              = q2[1] + q1[1] | 0,
              match[2] = q1[2],
              q2[3] = q1[3],
              clear(q1))
            : (q2[1] = q1[1], q2[2] = q1[2], q2[3] = q1[3], clear(q1));
    /*<<queue.ml:148:14>>*/ }
   function to_seq(q){
     /*<<queue.ml:153:2>>*/ function aux(c, param){
      /*<<queue.ml:153:21>>*/ if(! c)  /*<<queue.ml:154:13>>*/ return 0;
     var x = c[1], next = c[2];
      /*<<queue.ml:155:48>>*/ return [0,
             x,
             function(_d_){ /*<<?>>*/ return aux(next, _d_);}];
     /*<<queue.ml:155:57>>*/ }
     /*<<queue.ml:153:2>>*/  /*<<queue.ml:153:2>>*/ var _b_ = q[2];
     /*<<queue.ml:153:2>>*/ return function(_c_){
      /*<<?>>*/ return aux(_b_, _c_);};
    /*<<queue.ml:157:13>>*/ }
   function add_seq(q, i){
     /*<<queue.ml:159:18>>*/ function _a_(x){
      /*<<queue.ml:159:37>>*/ return add(x, q);
     /*<<queue.ml:159:45>>*/ }
     /*<<queue.ml:159:18>>*/ return  /*<<queue.ml:159:18>>*/ caml_call2
            (Stdlib_Seq[4], _a_, i);
    /*<<queue.ml:159:48>>*/ }
   function of_seq(g){
     /*<<queue.ml:162:10>>*/  /*<<queue.ml:162:10>>*/ var q = create(0);
     /*<<queue.ml:163:2>>*/ add_seq(q, g);
     /*<<queue.ml:163:2>>*/ return q;
    /*<<queue.ml:164:3>>*/ }
   var
    Stdlib_Queue =
      [0,
       Empty,
       create,
       add,
       add,
       take,
       take_opt,
       take,
       peek,
       peek_opt,
       peek,
       clear,
       copy,
       is_empty,
       length,
       iter,
       fold,
       transfer,
       to_seq,
       add_seq,
       of_seq];
   runtime.caml_register_global(2, Stdlib_Queue, "Stdlib__Queue");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Buffer
//# unitInfo: Requires: Assert_failure, Stdlib, Stdlib__Bytes, Stdlib__Seq, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_blit_string = runtime.caml_blit_string,
    caml_bswap16 = runtime.caml_bswap16,
    caml_bytes_get = runtime.caml_bytes_get,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_bytes_set16 = runtime.caml_bytes_set16,
    caml_bytes_set32 = runtime.caml_bytes_set32,
    caml_bytes_set64 = runtime.caml_bytes_set64,
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_int32_bswap = runtime.caml_int32_bswap,
    caml_int64_bswap = runtime.caml_int64_bswap,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<?>>*/ function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
    /*<<?>>*/ function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib = global_data.Stdlib,
    Stdlib_String = global_data.Stdlib__String,
    Assert_failure = global_data.Assert_failure,
    cst_Buffer_truncate = "Buffer.truncate",
    _a_ = [0, "buffer.ml", 220, 9],
    cst_Buffer_add_channel = "Buffer.add_channel",
    cst_Buffer_add_substring_add_s = "Buffer.add_substring/add_subbytes",
    cst_Buffer_add_cannot_grow_buf = "Buffer.add: cannot grow buffer",
    cst_Buffer_nth = "Buffer.nth",
    cst_Buffer_blit = "Buffer.blit",
    cst_Buffer_sub = "Buffer.sub";
   function create(n){
     /*<<buffer.ml:41:1>>*/ var
      /*<<buffer.ml:41:1>>*/ n$0 = 1 <= n ? n : 1,
      /*<<buffer.ml:42:1>>*/ n$1 = Stdlib_Sys[12] < n$0 ? Stdlib_Sys[12] : n$0,
      /*<<buffer.ml:43:1>>*/ s =
        /*<<buffer.ml:43:1>>*/ caml_create_bytes(n$1);
     /*<<buffer.ml:43:1>>*/ return [0, [0, s, n$1], 0, s];
    /*<<buffer.ml:44:71>>*/ }
   function contents(b){
     /*<<buffer.ml:46:17>>*/ return  /*<<buffer.ml:46:17>>*/ caml_call3
            (Stdlib_Bytes[8], b[1][1], 0, b[2]);
    /*<<buffer.ml:46:61>>*/ }
   function to_bytes(b){
     /*<<buffer.ml:47:17>>*/ return  /*<<buffer.ml:47:17>>*/ caml_call3
            (Stdlib_Bytes[7], b[1][1], 0, b[2]);
    /*<<buffer.ml:47:54>>*/ }
   function sub(b, ofs, len){
     /*<<?>>*/ if(0 <= ofs && 0 <= len && (b[2] - len | 0) >= ofs)
      /*<<buffer.ml:52:7>>*/ return  /*<<buffer.ml:52:7>>*/ caml_call3
             (Stdlib_Bytes[8], b[1][1], ofs, len);
     /*<<buffer.ml:51:7>>*/ return  /*<<buffer.ml:51:7>>*/ caml_call1
            (Stdlib[1], cst_Buffer_sub);
    /*<<buffer.ml:52:46>>*/ }
   function blit(src, srcoff, dst, dstoff, len){
     /*<<?>>*/ if
     (0 <= len
      &&
       0 <= srcoff
       &&
        (src[2] - len | 0) >= srcoff
        && 0 <= dstoff && (caml_ml_bytes_length(dst) - len | 0) >= dstoff)
      /*<<buffer.ml:60:4>>*/ return  /*<<buffer.ml:60:4>>*/ caml_call5
             (Stdlib_Bytes[11], src[1][1], srcoff, dst, dstoff, len);
     /*<<buffer.ml:58:7>>*/ return  /*<<buffer.ml:58:7>>*/ caml_call1
            (Stdlib[1], cst_Buffer_blit);
    /*<<buffer.ml:60:53>>*/ }
   function nth(b, ofs){
     /*<<buffer.ml:64:2>>*/ var
      /*<<buffer.ml:64:2>>*/ position = b[2],
      /*<<buffer.ml:64:2>>*/ match = b[1],
      /*<<buffer.ml:64:2>>*/ length = match[2],
      /*<<buffer.ml:64:2>>*/ buffer = match[1];
    if(0 <= ofs && position > ofs && length >= position)
      /*<<buffer.ml:68:7>>*/ return  /*<<buffer.ml:68:7>>*/ runtime.caml_bytes_unsafe_get
             (buffer, ofs);
     /*<<buffer.ml:67:3>>*/ return  /*<<buffer.ml:67:3>>*/ caml_call1
            (Stdlib[1], cst_Buffer_nth);
    /*<<buffer.ml:68:34>>*/ }
   function length(b){
     /*<<buffer.ml:71:15>>*/ return b[2];
    /*<<buffer.ml:71:25>>*/ }
   function clear(b){
     /*<<buffer.ml:73:14>>*/ b[2] = 0;
     /*<<buffer.ml:73:14>>*/ return 0;
    /*<<buffer.ml:73:29>>*/ }
   function reset(b){
     /*<<buffer.ml:76:2>>*/ b[2] = 0;
     /*<<buffer.ml:76:2>>*/  /*<<buffer.ml:76:2>>*/ var
     inner = [0, b[3],  /*<<buffer.ml:76:2>>*/ caml_ml_bytes_length(b[3])];
     /*<<buffer.ml:76:2>>*/ b[1] = inner;
     /*<<buffer.ml:76:2>>*/ return 0;
    /*<<buffer.ml:80:18>>*/ }
   function resize(b, more){
     /*<<buffer.ml:87:2>>*/ var
      /*<<buffer.ml:87:2>>*/ old_pos = b[2],
      /*<<buffer.ml:87:2>>*/ old_len = b[1][2],
      /*<<buffer.ml:87:2>>*/ new_len = [0, old_len];
    for(;;){
     if(new_len[1] < (old_pos + more | 0)){
       /*<<buffer.ml:90:37>>*/ new_len[1] = 2 * new_len[1] | 0;
      continue;
     }
      /*<<buffer.ml:91:2>>*/ if(Stdlib_Sys[12] < new_len[1])
       /*<<buffer.ml:91:43>>*/ if((old_pos + more | 0) <= Stdlib_Sys[12])
        /*<<buffer.ml:93:9>>*/ new_len[1] = Stdlib_Sys[12];
      else
        /*<<buffer.ml:94:9>>*/  /*<<buffer.ml:94:9>>*/ caml_call1
        (Stdlib[2], cst_Buffer_add_cannot_grow_buf);
      /*<<buffer.ml:96:19>>*/  /*<<buffer.ml:96:19>>*/ var
      new_buffer =  /*<<buffer.ml:96:19>>*/ caml_create_bytes(new_len[1]);
      /*<<buffer.ml:99:2>>*/  /*<<buffer.ml:99:2>>*/ caml_call5
      (Stdlib_Bytes[11], b[1][1], 0, new_buffer, 0, b[2]);
      /*<<buffer.ml:99:2>>*/ b[1] = [0, new_buffer, new_len[1]];
      /*<<buffer.ml:99:2>>*/ return 0;
    }
    /*<<buffer.ml:100:55>>*/ }
   function add_char(b, c){
     /*<<buffer.ml:113:2>>*/ var
      /*<<buffer.ml:113:2>>*/ pos = b[2],
      /*<<buffer.ml:113:2>>*/ match = b[1],
      /*<<buffer.ml:113:2>>*/ length = match[2],
      /*<<buffer.ml:113:2>>*/ buffer = match[1];
     /*<<buffer.ml:113:2>>*/ if(length <= pos){
      /*<<buffer.ml:116:4>>*/ resize(b, 1);
      /*<<buffer.ml:117:4>>*/  /*<<buffer.ml:117:4>>*/ caml_bytes_set
      (b[1][1], b[2], c);
    }
    else
      /*<<buffer.ml:119:4>>*/  /*<<buffer.ml:119:4>>*/ caml_bytes_unsafe_set
      (buffer, pos, c);
     /*<<buffer.ml:120:2>>*/ b[2] = pos + 1 | 0;
     /*<<buffer.ml:120:2>>*/ return 0;
    /*<<buffer.ml:120:23>>*/ }
   var uchar_utf_8_byte_length_max = 4, uchar_utf_16_byte_length_max = 4;
   function add_utf_8_uchar(b, u){
     /*<<buffer.ml:126:2>>*/ for(;;){
      /*<<buffer.ml:126:2>>*/  /*<<buffer.ml:126:2>>*/ var pos = b[2];
      /*<<buffer.ml:126:2>>*/ if(b[1][2] <= pos)
       /*<<buffer.ml:127:32>>*/ resize(b, uchar_utf_8_byte_length_max);
      /*<<buffer.ml:128:10>>*/  /*<<buffer.ml:128:10>>*/ var
      n =
         /*<<buffer.ml:128:10>>*/ caml_call3
         (Stdlib_Bytes[51], b[1][1], pos, u);
      /*<<buffer.ml:128:10>>*/ if(0 === n){
       /*<<buffer.ml:130:8>>*/ resize(b, uchar_utf_8_byte_length_max);
      continue;
     }
      /*<<buffer.ml:131:7>>*/ b[2] = pos + n | 0;
      /*<<buffer.ml:131:7>>*/ return 0;
    }
    /*<<buffer.ml:131:30>>*/ }
   function add_utf_16be_uchar(b, u){
     /*<<buffer.ml:134:2>>*/ for(;;){
      /*<<buffer.ml:134:2>>*/  /*<<buffer.ml:134:2>>*/ var pos = b[2];
      /*<<buffer.ml:134:2>>*/ if(b[1][2] <= pos)
       /*<<buffer.ml:135:32>>*/ resize(b, uchar_utf_16_byte_length_max);
      /*<<buffer.ml:136:10>>*/  /*<<buffer.ml:136:10>>*/ var
      n =
         /*<<buffer.ml:136:10>>*/ caml_call3
         (Stdlib_Bytes[54], b[1][1], pos, u);
      /*<<buffer.ml:136:10>>*/ if(0 === n){
       /*<<buffer.ml:138:8>>*/ resize(b, uchar_utf_16_byte_length_max);
      continue;
     }
      /*<<buffer.ml:139:7>>*/ b[2] = pos + n | 0;
      /*<<buffer.ml:139:7>>*/ return 0;
    }
    /*<<buffer.ml:139:30>>*/ }
   function add_utf_16le_uchar(b, u){
     /*<<buffer.ml:142:2>>*/ for(;;){
      /*<<buffer.ml:142:2>>*/  /*<<buffer.ml:142:2>>*/ var pos = b[2];
      /*<<buffer.ml:142:2>>*/ if(b[1][2] <= pos)
       /*<<buffer.ml:143:32>>*/ resize(b, uchar_utf_16_byte_length_max);
      /*<<buffer.ml:144:10>>*/  /*<<buffer.ml:144:10>>*/ var
      n =
         /*<<buffer.ml:144:10>>*/ caml_call3
         (Stdlib_Bytes[57], b[1][1], pos, u);
      /*<<buffer.ml:144:10>>*/ if(0 === n){
       /*<<buffer.ml:146:8>>*/ resize(b, uchar_utf_16_byte_length_max);
      continue;
     }
      /*<<buffer.ml:147:7>>*/ b[2] = pos + n | 0;
      /*<<buffer.ml:147:7>>*/ return 0;
    }
    /*<<buffer.ml:147:30>>*/ }
   function add_substring(b, s, offset, len){
     /*<<buffer.ml:150:2>>*/  /*<<buffer.ml:150:2>>*/ var
     _r_ = offset < 0 ? 1 : 0;
     /*<<buffer.ml:150:2>>*/ if(_r_)
     var _s_ = _r_;
    else
     var
      _t_ = len < 0 ? 1 : 0,
      _s_ = _t_ || ((caml_ml_string_length(s) - len | 0) < offset ? 1 : 0);
     /*<<buffer.ml:151:7>>*/ if(_s_)
      /*<<buffer.ml:151:7>>*/  /*<<buffer.ml:151:7>>*/ caml_call1
      (Stdlib[1], cst_Buffer_add_substring_add_s);
     /*<<buffer.ml:151:54>>*/ var
      /*<<buffer.ml:151:54>>*/ position = b[2],
      /*<<buffer.ml:151:54>>*/ match = b[1],
      /*<<buffer.ml:151:54>>*/ length = match[2],
      /*<<buffer.ml:151:54>>*/ buffer = match[1],
      /*<<buffer.ml:151:54>>*/ new_position = position + len | 0;
     /*<<buffer.ml:151:54>>*/ if(length < new_position){
      /*<<buffer.ml:156:4>>*/ resize(b, len);
      /*<<buffer.ml:157:4>>*/  /*<<buffer.ml:157:4>>*/ caml_call5
      (Stdlib_Bytes[12], s, offset, b[1][1], b[2], len);
    }
    else
      /*<<buffer.ml:159:4>>*/  /*<<buffer.ml:159:4>>*/ caml_blit_string
      (s, offset, buffer, position, len);
     /*<<buffer.ml:159:57>>*/ b[2] = new_position;
     /*<<buffer.ml:159:57>>*/ return 0;
    /*<<buffer.ml:160:28>>*/ }
   function add_subbytes(b, s, offset, len){
     /*<<buffer.ml:163:18>>*/ return add_substring
            (b,
              /*<<buffer.ml:163:18>>*/ caml_call1(Stdlib_Bytes[44], s),
             offset,
             len);
    /*<<buffer.ml:163:55>>*/ }
   function add_string(b, s){
     /*<<buffer.ml:166:2>>*/ var
      /*<<buffer.ml:166:2>>*/ len =
        /*<<buffer.ml:166:2>>*/ caml_ml_string_length(s),
      /*<<buffer.ml:166:2>>*/ position = b[2],
      /*<<buffer.ml:166:2>>*/ match = b[1],
      /*<<buffer.ml:166:2>>*/ length = match[2],
      /*<<buffer.ml:166:2>>*/ buffer = match[1],
      /*<<buffer.ml:166:2>>*/ new_position = b[2] + len | 0;
     /*<<buffer.ml:166:2>>*/ if(length < new_position){
      /*<<buffer.ml:171:4>>*/ resize(b, len);
      /*<<buffer.ml:172:4>>*/  /*<<buffer.ml:172:4>>*/ caml_call5
      (Stdlib_Bytes[12], s, 0, b[1][1], b[2], len);
    }
    else
      /*<<buffer.ml:174:4>>*/  /*<<buffer.ml:174:4>>*/ caml_blit_string
      (s, 0, buffer, position, len);
     /*<<buffer.ml:174:52>>*/ b[2] = new_position;
     /*<<buffer.ml:174:52>>*/ return 0;
    /*<<buffer.ml:175:28>>*/ }
   function add_bytes(b, s){
     /*<<buffer.ml:177:33>>*/ return add_string
            (b,  /*<<buffer.ml:177:33>>*/ caml_call1(Stdlib_Bytes[44], s));
    /*<<buffer.ml:177:59>>*/ }
   function add_buffer(b, bs){
     /*<<buffer.ml:180:2>>*/ return add_subbytes(b, bs[1][1], 0, bs[2]);
    /*<<buffer.ml:180:46>>*/ }
   function add_channel(b, ic, to_read$1){
     /*<<buffer.ml:206:2>>*/ var
      /*<<buffer.ml:206:2>>*/ _p_ = to_read$1 < 0 ? 1 : 0,
      /*<<buffer.ml:206:2>>*/ _q_ =
       _p_ || (Stdlib_Sys[12] < to_read$1 ? 1 : 0);
     /*<<buffer.ml:207:4>>*/ if(_q_)
      /*<<buffer.ml:207:4>>*/  /*<<buffer.ml:207:4>>*/ caml_call1
      (Stdlib[1], cst_Buffer_add_channel);
     /*<<buffer.ml:200:2>>*/ if(b[1][2] < (b[2] + to_read$1 | 0))
      /*<<buffer.ml:200:44>>*/ resize(b, to_read$1);
     /*<<buffer.ml:200:56>>*/ var
      /*<<buffer.ml:200:56>>*/ ofs$1 = b[2],
      /*<<buffer.ml:200:56>>*/ buf = b[1][1],
     already_read = 0,
     ofs = ofs$1,
     to_read = to_read$1;
     /*<<buffer.ml:185:4>>*/ for(;;){
      /*<<buffer.ml:185:4>>*/ if(0 !== to_read){
       /*<<buffer.ml:187:14>>*/  /*<<buffer.ml:187:14>>*/ var
       r =
          /*<<buffer.ml:187:14>>*/ caml_call4
          (Stdlib[84], ic, buf, ofs, to_read);
       /*<<buffer.ml:187:14>>*/ if(0 !== r){
        /*<<buffer.ml:189:11>>*/ var
         /*<<buffer.ml:189:11>>*/ already_read$0 = already_read + r | 0,
         /*<<buffer.ml:189:11>>*/ ofs$0 = ofs + r | 0,
         /*<<buffer.ml:189:11>>*/ to_read$0 = to_read - r | 0,
        already_read = already_read$0,
        ofs = ofs$0,
        to_read = to_read$0;
       continue;
      }
     }
     b[2] = b[2] + already_read | 0;
     if(already_read < to_read$1)
       /*<<buffer.ml:211:18>>*/ throw  /*<<buffer.ml:211:18>>*/ caml_maybe_attach_backtrace
             (Stdlib[12], 1);
      /*<<buffer.ml:212:2>>*/ return 0;
    }
    /*<<buffer.ml:212:4>>*/ }
   function output_buffer(oc, b){
     /*<<buffer.ml:215:2>>*/ return  /*<<buffer.ml:215:2>>*/ caml_call4
            (Stdlib[68], oc, b[1][1], 0, b[2]);
    /*<<buffer.ml:215:39>>*/ }
   function add_substitute(b, f, s){
     /*<<buffer.ml:260:2>>*/ var
      /*<<buffer.ml:260:2>>*/ lim$1 =
        /*<<buffer.ml:260:2>>*/ caml_ml_string_length(s),
     previous = 32,
     i$4 = 0;
     /*<<buffer.ml:262:4>>*/ for(;;){
      /*<<buffer.ml:262:4>>*/ if(i$4 >= lim$1){
       /*<<buffer.ml:282:4>>*/  /*<<buffer.ml:282:4>>*/ var
       _o_ = 92 === previous ? 1 : 0;
       /*<<buffer.ml:282:4>>*/ return _o_ ? add_char(b, previous) : _o_;
     }
      /*<<buffer.ml:263:12>>*/  /*<<buffer.ml:263:12>>*/ var
      previous$0 =  /*<<buffer.ml:263:12>>*/ caml_string_get(s, i$4);
      /*<<buffer.ml:263:12>>*/ if(36 !== previous$0){
       /*<<buffer.ml:272:21>>*/ if(92 === previous){
        /*<<buffer.ml:273:9>>*/ add_char(b, 92);
        /*<<buffer.ml:274:9>>*/ add_char(b, previous$0);
        /*<<buffer.ml:274:9>>*/ var
         /*<<buffer.ml:274:9>>*/ i$6 = i$4 + 1 | 0,
        previous = 32,
        i$4 = i$6;
       continue;
      }
      if(92 === previous$0){
        /*<<buffer.ml:277:9>>*/ var
         /*<<buffer.ml:277:9>>*/ i$7 = i$4 + 1 | 0,
        previous = previous$0,
        i$4 = i$7;
       continue;
      }
       /*<<buffer.ml:279:9>>*/ add_char(b, previous$0);
       /*<<buffer.ml:279:9>>*/ var
        /*<<buffer.ml:279:9>>*/ i$8 = i$4 + 1 | 0,
       previous = previous$0,
       i$4 = i$8;
      continue;
     }
      /*<<buffer.ml:264:28>>*/ if(92 === previous){
       /*<<buffer.ml:265:9>>*/ add_char(b, previous$0);
       /*<<buffer.ml:265:9>>*/ var
        /*<<buffer.ml:265:9>>*/ i$5 = i$4 + 1 | 0,
       previous = 32,
       i$4 = i$5;
      continue;
     }
      /*<<buffer.ml:268:9>>*/  /*<<buffer.ml:268:9>>*/ var
      start$0 = i$4 + 1 | 0;
      /*<<buffer.ml:245:2>>*/ if(lim$1 <= start$0)
       /*<<buffer.ml:245:23>>*/ throw  /*<<buffer.ml:245:23>>*/ caml_maybe_attach_backtrace
             (Stdlib[8], 1);
      /*<<buffer.ml:246:8>>*/ var
       /*<<buffer.ml:246:8>>*/ opening =
         /*<<buffer.ml:246:8>>*/ caml_string_get(s, start$0),
      switch$0 = 0;
     if(40 !== opening && 123 !== opening){
       /*<<buffer.ml:254:5>>*/ var
        /*<<buffer.ml:254:5>>*/ start = start$0 + 1 | 0,
        /*<<buffer.ml:236:2>>*/ lim$0 =
          /*<<buffer.ml:236:2>>*/ caml_ml_string_length(s),
       i$2 = start;
       /*<<buffer.ml:237:4>>*/ for(;;){
        /*<<buffer.ml:237:4>>*/ if(lim$0 <= i$2)
        var stop$0 = lim$0;
       else{
         /*<<buffer.ml:238:10>>*/ var
          /*<<buffer.ml:238:10>>*/ match =
            /*<<buffer.ml:238:10>>*/ caml_string_get(s, i$2),
         switch$1 = 0;
         /*<<buffer.ml:238:10>>*/ if(91 <= match){
         if(97 <= match){
          if(123 > match) switch$1 = 1;
         }
         else if(95 === match) switch$1 = 1;
        }
        else
         if(58 <= match){
          if(65 <= match) switch$1 = 1;
         }
         else if(48 <= match) switch$1 = 1;
        if(switch$1){
          /*<<buffer.ml:239:52>>*/ var
           /*<<buffer.ml:239:52>>*/ i$3 = i$2 + 1 | 0,
          i$2 = i$3;
         continue;
        }
        var stop$0 = i$2;
       }
       var
        match$0 =
          [0,
            /*<<buffer.ml:255:5>>*/ caml_call3
            (Stdlib_String[15], s, start$0, stop$0 - start$0 | 0),
           stop$0];
       switch$0 = 1;
       break;
      }
     }
     if(! switch$0){
       /*<<buffer.ml:249:5>>*/ var
        /*<<buffer.ml:249:5>>*/ new_start = start$0 + 1 | 0,
        /*<<buffer.ml:249:5>>*/ k$2 = 0;
       /*<<buffer.ml:217:14>>*/ if(40 === opening)
       var closing = 41;
      else{
       if(123 !== opening)
         /*<<buffer.ml:220:9>>*/ throw  /*<<buffer.ml:220:9>>*/ caml_maybe_attach_backtrace
               ([0, Assert_failure, _a_], 1);
       var closing = 125;
      }
       /*<<buffer.ml:227:2>>*/ var
        /*<<buffer.ml:227:2>>*/ lim =
          /*<<buffer.ml:227:2>>*/ caml_ml_string_length(s),
       k = k$2,
       stop = new_start;
       /*<<buffer.ml:228:4>>*/ for(;;){
        /*<<buffer.ml:228:4>>*/ if(lim <= stop)
         /*<<buffer.ml:228:21>>*/ throw  /*<<buffer.ml:228:21>>*/ caml_maybe_attach_backtrace
               (Stdlib[8], 1);
        /*<<buffer.ml:229:7>>*/ if
        ( /*<<buffer.ml:229:7>>*/ caml_string_get(s, stop) === opening){
         /*<<buffer.ml:229:28>>*/ var
          /*<<buffer.ml:229:28>>*/ i = stop + 1 | 0,
          /*<<buffer.ml:229:28>>*/ k$0 = k + 1 | 0,
         k = k$0,
         stop = i;
        continue;
       }
        /*<<buffer.ml:230:7>>*/ if
        ( /*<<buffer.ml:230:7>>*/ caml_string_get(s, stop) !== closing){
         /*<<buffer.ml:232:9>>*/ var
          /*<<buffer.ml:232:9>>*/ i$1 = stop + 1 | 0,
         stop = i$1;
        continue;
       }
        /*<<buffer.ml:231:6>>*/ if(0 !== k){
         /*<<buffer.ml:231:27>>*/ var
          /*<<buffer.ml:231:27>>*/ i$0 = stop + 1 | 0,
          /*<<buffer.ml:231:27>>*/ k$1 = k - 1 | 0,
         k = k$1,
         stop = i$0;
        continue;
       }
       var
        match$0 =
          [0,
            /*<<buffer.ml:251:5>>*/ caml_call3
            (Stdlib_String[15], s, new_start, (stop - start$0 | 0) - 1 | 0),
           stop + 1 | 0];
       break;
      }
     }
     var next_i = match$0[2], ident = match$0[1];
      /*<<buffer.ml:270:9>>*/ add_string
      (b,  /*<<buffer.ml:270:22>>*/ caml_call1(f, ident));
     var previous = 32, i$4 = next_i;
    }
    /*<<buffer.ml:283:13>>*/ }
   function truncate(b, len){
     /*<<buffer.ml:286:24>>*/ if(0 <= len && b[2] >= len){
      /*<<buffer.ml:289:6>>*/ b[2] = len;
      /*<<buffer.ml:289:6>>*/ return 0;
    }
     /*<<buffer.ml:287:6>>*/ return  /*<<buffer.ml:287:6>>*/ caml_call1
            (Stdlib[1], cst_Buffer_truncate);
    /*<<buffer.ml:289:23>>*/ }
   function to_seq(b){
     /*<<buffer.ml:294:2>>*/ function aux(i, param){
      /*<<buffer.ml:296:4>>*/ if(b[2] <= i)
       /*<<buffer.ml:296:28>>*/ return 0;
      /*<<buffer.ml:298:14>>*/ var
       /*<<buffer.ml:298:14>>*/ x =
         /*<<buffer.ml:298:14>>*/ caml_bytes_get(b[1][1], i),
       /*<<buffer.ml:298:14>>*/ _m_ = i + 1 | 0;
      /*<<buffer.ml:299:19>>*/ return [0,
             x,
             function(_n_){ /*<<?>>*/ return aux(_m_, _n_);}];
     /*<<buffer.ml:299:29>>*/ }
     /*<<buffer.ml:294:2>>*/  /*<<buffer.ml:294:2>>*/ var _k_ = 0;
     /*<<buffer.ml:294:2>>*/ return function(_l_){
      /*<<?>>*/ return aux(_k_, _l_);};
    /*<<buffer.ml:301:7>>*/ }
   function to_seqi(b){
     /*<<buffer.ml:304:2>>*/ function aux(i, param){
      /*<<buffer.ml:306:4>>*/ if(b[2] <= i)
       /*<<buffer.ml:306:28>>*/ return 0;
      /*<<buffer.ml:308:14>>*/ var
       /*<<buffer.ml:308:14>>*/ x =
         /*<<buffer.ml:308:14>>*/ caml_bytes_get(b[1][1], i),
       /*<<buffer.ml:308:14>>*/ _i_ = i + 1 | 0;
      /*<<buffer.ml:309:23>>*/ return [0,
             [0, i, x],
             function(_j_){ /*<<?>>*/ return aux(_i_, _j_);}];
     /*<<buffer.ml:309:33>>*/ }
     /*<<buffer.ml:304:2>>*/  /*<<buffer.ml:304:2>>*/ var _g_ = 0;
     /*<<buffer.ml:304:2>>*/ return function(_h_){
      /*<<?>>*/ return aux(_g_, _h_);};
    /*<<buffer.ml:311:7>>*/ }
   function add_seq(b, seq){
     /*<<buffer.ml:313:29>>*/ function _e_(_f_){
      /*<<?>>*/ return add_char(b, _f_);
    }
     /*<<buffer.ml:313:29>>*/ return  /*<<buffer.ml:313:29>>*/ caml_call2
            (Stdlib_Seq[4], _e_, seq);
    /*<<buffer.ml:313:45>>*/ }
   function of_seq(i){
     /*<<buffer.ml:316:10>>*/  /*<<buffer.ml:316:10>>*/ var b = create(32);
     /*<<buffer.ml:317:2>>*/ add_seq(b, i);
     /*<<buffer.ml:317:2>>*/ return b;
    /*<<buffer.ml:318:3>>*/ }
   function add_int8(b, x){
     /*<<buffer.ml:337:2>>*/ var
      /*<<buffer.ml:337:2>>*/ position = b[2],
      /*<<buffer.ml:337:2>>*/ match = b[1],
      /*<<buffer.ml:337:2>>*/ length = match[2],
      /*<<buffer.ml:337:2>>*/ buffer = match[1],
      /*<<buffer.ml:337:2>>*/ new_position = position + 1 | 0;
     /*<<buffer.ml:337:2>>*/ if(length < new_position){
      /*<<buffer.ml:341:4>>*/ resize(b, 1);
      /*<<buffer.ml:342:4>>*/  /*<<buffer.ml:342:4>>*/ caml_bytes_set
      (b[1][1], b[2], x);
    }
    else
      /*<<buffer.ml:344:4>>*/  /*<<buffer.ml:344:4>>*/ caml_bytes_unsafe_set
      (buffer, position, x);
     /*<<buffer.ml:345:2>>*/ b[2] = new_position;
     /*<<buffer.ml:345:2>>*/ return 0;
    /*<<buffer.ml:345:28>>*/ }
   function add_int16_ne(b, x){
     /*<<buffer.ml:348:2>>*/ var
      /*<<buffer.ml:348:2>>*/ position = b[2],
      /*<<buffer.ml:348:2>>*/ match = b[1],
      /*<<buffer.ml:348:2>>*/ length = match[2],
      /*<<buffer.ml:348:2>>*/ buffer = match[1],
      /*<<buffer.ml:348:2>>*/ new_position = position + 2 | 0;
     /*<<buffer.ml:348:2>>*/ if(length < new_position){
      /*<<buffer.ml:352:4>>*/ resize(b, 2);
      /*<<buffer.ml:353:4>>*/  /*<<buffer.ml:353:4>>*/ caml_bytes_set16
      (b[1][1], b[2], x);
    }
    else
      /*<<buffer.ml:355:4>>*/  /*<<buffer.ml:355:4>>*/ caml_bytes_set16
      (buffer, position, x);
     /*<<buffer.ml:355:38>>*/ b[2] = new_position;
     /*<<buffer.ml:355:38>>*/ return 0;
    /*<<buffer.ml:356:28>>*/ }
   function add_int32_ne(b, x){
     /*<<buffer.ml:359:2>>*/ var
      /*<<buffer.ml:359:2>>*/ position = b[2],
      /*<<buffer.ml:359:2>>*/ match = b[1],
      /*<<buffer.ml:359:2>>*/ length = match[2],
      /*<<buffer.ml:359:2>>*/ buffer = match[1],
      /*<<buffer.ml:359:2>>*/ new_position = position + 4 | 0;
     /*<<buffer.ml:359:2>>*/ if(length < new_position){
      /*<<buffer.ml:363:4>>*/ resize(b, 4);
      /*<<buffer.ml:364:4>>*/  /*<<buffer.ml:364:4>>*/ caml_bytes_set32
      (b[1][1], b[2], x);
    }
    else
      /*<<buffer.ml:366:4>>*/  /*<<buffer.ml:366:4>>*/ caml_bytes_set32
      (buffer, position, x);
     /*<<buffer.ml:366:38>>*/ b[2] = new_position;
     /*<<buffer.ml:366:38>>*/ return 0;
    /*<<buffer.ml:367:28>>*/ }
   function add_int64_ne(b, x){
     /*<<buffer.ml:370:2>>*/ var
      /*<<buffer.ml:370:2>>*/ position = b[2],
      /*<<buffer.ml:370:2>>*/ match = b[1],
      /*<<buffer.ml:370:2>>*/ length = match[2],
      /*<<buffer.ml:370:2>>*/ buffer = match[1],
      /*<<buffer.ml:370:2>>*/ new_position = position + 8 | 0;
     /*<<buffer.ml:370:2>>*/ if(length < new_position){
      /*<<buffer.ml:374:4>>*/ resize(b, 8);
      /*<<buffer.ml:375:4>>*/  /*<<buffer.ml:375:4>>*/ caml_bytes_set64
      (b[1][1], b[2], x);
    }
    else
      /*<<buffer.ml:377:4>>*/  /*<<buffer.ml:377:4>>*/ caml_bytes_set64
      (buffer, position, x);
     /*<<buffer.ml:377:38>>*/ b[2] = new_position;
     /*<<buffer.ml:377:38>>*/ return 0;
    /*<<buffer.ml:378:28>>*/ }
   function add_int16_le(b, x){
     /*<<buffer.ml:381:2>>*/  /*<<buffer.ml:381:2>>*/ var
     _d_ = Stdlib_Sys[11] ?  /*<<buffer.ml:381:41>>*/ caml_bswap16(x) : x;
    return add_int16_ne(b, _d_);
    /*<<buffer.ml:381:57>>*/ }
   function add_int16_be(b, x){
     /*<<buffer.ml:384:2>>*/  /*<<buffer.ml:384:2>>*/ var
     x$0 = Stdlib_Sys[11] ? x :  /*<<buffer.ml:384:48>>*/ caml_bswap16(x);
    return add_int16_ne(b, x$0);
    /*<<buffer.ml:384:57>>*/ }
   function add_int32_le(b, x){
     /*<<buffer.ml:387:2>>*/  /*<<buffer.ml:387:2>>*/ var
     _c_ = Stdlib_Sys[11] ?  /*<<buffer.ml:387:41>>*/ caml_int32_bswap(x) : x;
    return add_int32_ne(b, _c_);
    /*<<buffer.ml:387:57>>*/ }
   function add_int32_be(b, x){
     /*<<buffer.ml:390:2>>*/  /*<<buffer.ml:390:2>>*/ var
     x$0 = Stdlib_Sys[11] ? x :  /*<<buffer.ml:390:48>>*/ caml_int32_bswap(x);
     /*<<buffer.ml:390:56>>*/ return add_int32_ne(b, x$0);
    /*<<buffer.ml:390:57>>*/ }
   function add_int64_le(b, x){
     /*<<buffer.ml:393:2>>*/  /*<<buffer.ml:393:2>>*/ var
     _b_ = Stdlib_Sys[11] ?  /*<<buffer.ml:393:41>>*/ caml_int64_bswap(x) : x;
    return add_int64_ne(b, _b_);
    /*<<buffer.ml:393:57>>*/ }
   function add_int64_be(b, x){
     /*<<buffer.ml:396:2>>*/  /*<<buffer.ml:396:2>>*/ var
     x$0 = Stdlib_Sys[11] ? x :  /*<<buffer.ml:396:48>>*/ caml_int64_bswap(x);
     /*<<buffer.ml:396:56>>*/ return add_int64_ne(b, x$0);
    /*<<buffer.ml:396:57>>*/ }
   var
    Stdlib_Buffer =
      [0,
       create,
       contents,
       to_bytes,
       sub,
       blit,
       nth,
       length,
       clear,
       reset,
       output_buffer,
       truncate,
       add_char,
       add_utf_8_uchar,
       add_utf_16le_uchar,
       add_utf_16be_uchar,
       add_string,
       add_bytes,
       add_substring,
       add_subbytes,
       add_substitute,
       add_buffer,
       add_channel,
       to_seq,
       to_seqi,
       add_seq,
       of_seq,
       add_int8,
       add_int8,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int16_ne,
       add_int16_be,
       add_int16_le,
       add_int32_ne,
       add_int32_be,
       add_int32_le,
       add_int64_ne,
       add_int64_be,
       add_int64_le];
   runtime.caml_register_global(14, Stdlib_Buffer, "Stdlib__Buffer");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Mutex
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Stdlib_Mutex =
      [0,
       runtime.caml_ml_mutex_new,
       runtime.caml_ml_mutex_lock,
       runtime.caml_ml_mutex_try_lock,
       runtime.caml_ml_mutex_unlock];
   runtime.caml_register_global(0, Stdlib_Mutex, "Stdlib__Mutex");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Condition
(function(globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    Stdlib_Condition =
      [0,
       runtime.caml_ml_condition_new,
       runtime.caml_ml_condition_wait,
       runtime.caml_ml_condition_signal,
       runtime.caml_ml_condition_broadcast];
   runtime.caml_register_global(0, Stdlib_Condition, "Stdlib__Condition");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Semaphore
//# unitInfo: Requires: Stdlib, Stdlib__Condition, Stdlib__Mutex
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<semaphore.ml:81:2>>*/ var
     /*<<semaphore.ml:81:2>>*/ global_data =
       /*<<semaphore.ml:81:2>>*/ runtime.caml_get_global_data(),
     /*<<semaphore.ml:81:2>>*/ Stdlib_Mutex = global_data.Stdlib__Mutex,
     /*<<semaphore.ml:81:2>>*/ Stdlib_Condition =
      global_data.Stdlib__Condition,
     /*<<semaphore.ml:81:2>>*/ Stdlib = global_data.Stdlib,
     /*<<semaphore.ml:81:2>>*/ cst_Semaphore_Counting_release =
      "Semaphore.Counting.release: overflow",
     /*<<semaphore.ml:81:2>>*/ cst_Semaphore_Counting_init_wr =
      "Semaphore.Counting.init: wrong initial value";
   function make(v){
     /*<<semaphore.ml:29:2>>*/ if(v < 0)
      /*<<semaphore.ml:29:16>>*/  /*<<semaphore.ml:29:16>>*/ caml_call1
      (Stdlib[1], cst_Semaphore_Counting_init_wr);
     /*<<semaphore.ml:30:39>>*/  /*<<semaphore.ml:30:39>>*/ var
     _c_ =  /*<<semaphore.ml:30:39>>*/ caml_call1(Stdlib_Condition[1], 0);
     /*<<semaphore.ml:30:10>>*/ return [0,
             /*<<semaphore.ml:30:10>>*/ caml_call1(Stdlib_Mutex[1], 0),
            v,
            _c_];
    /*<<semaphore.ml:30:59>>*/ }
   function release(s){
     /*<<semaphore.ml:33:2>>*/  /*<<semaphore.ml:33:2>>*/ caml_call1
     (Stdlib_Mutex[2], s[1]);
     /*<<semaphore.ml:33:2>>*/ if(s[2] < Stdlib[19]){
      /*<<semaphore.ml:34:24>>*/ s[2] = s[2] + 1 | 0;
      /*<<semaphore.ml:36:4>>*/  /*<<semaphore.ml:36:4>>*/ caml_call1
      (Stdlib_Condition[3], s[3]);
      /*<<semaphore.ml:36:4>>*/ return  /*<<semaphore.ml:36:4>>*/ caml_call1
             (Stdlib_Mutex[4], s[1]);
    }
     /*<<semaphore.ml:39:4>>*/  /*<<semaphore.ml:39:4>>*/ caml_call1
     (Stdlib_Mutex[4], s[1]);
     /*<<semaphore.ml:39:4>>*/ throw  /*<<semaphore.ml:39:4>>*/ caml_maybe_attach_backtrace
           ([0, Stdlib[11], cst_Semaphore_Counting_release], 1);
    /*<<semaphore.ml:41:5>>*/ }
   function acquire(s){
     /*<<semaphore.ml:44:2>>*/  /*<<semaphore.ml:44:2>>*/ caml_call1
     (Stdlib_Mutex[2], s[1]);
     /*<<semaphore.ml:45:49>>*/ for(;;){
      /*<<semaphore.ml:45:49>>*/ if(0 === s[2]){
       /*<<semaphore.ml:45:19>>*/  /*<<semaphore.ml:45:19>>*/ caml_call2
       (Stdlib_Condition[2], s[3], s[1]);
      continue;
     }
      /*<<semaphore.ml:46:2>>*/ s[2] = s[2] - 1 | 0;
      /*<<semaphore.ml:46:2>>*/ return  /*<<semaphore.ml:46:2>>*/ caml_call1
             (Stdlib_Mutex[4], s[1]);
    }
    /*<<semaphore.ml:47:20>>*/ }
   function try_acquire(s){
     /*<<semaphore.ml:50:2>>*/  /*<<semaphore.ml:50:2>>*/ caml_call1
     (Stdlib_Mutex[2], s[1]);
     /*<<semaphore.ml:50:2>>*/  /*<<semaphore.ml:50:2>>*/ var
     ret = 0 === s[2] ? 0 : (s[2] = s[2] - 1 | 0, 1);
     /*<<semaphore.ml:52:2>>*/  /*<<semaphore.ml:52:2>>*/ caml_call1
     (Stdlib_Mutex[4], s[1]);
     /*<<semaphore.ml:52:2>>*/ return ret;
    /*<<semaphore.ml:53:5>>*/ }
   function get_value(s){
     /*<<semaphore.ml:55:18>>*/ return s[2];
    /*<<semaphore.ml:55:21>>*/ }
   var Counting = [0, make, release, acquire, try_acquire, get_value];
   function make$0(b){
     /*<<semaphore.ml:66:14>>*/ var
      /*<<semaphore.ml:66:14>>*/ _a_ =
        /*<<semaphore.ml:66:14>>*/ caml_call1(Stdlib_Condition[1], 0),
      /*<<semaphore.ml:66:14>>*/ _b_ = b ? 1 : 0;
     /*<<semaphore.ml:64:10>>*/ return [0,
             /*<<semaphore.ml:64:10>>*/ caml_call1(Stdlib_Mutex[1], 0),
            _b_,
            _a_];
    /*<<semaphore.ml:66:34>>*/ }
   function release$0(s){
     /*<<semaphore.ml:69:2>>*/  /*<<semaphore.ml:69:2>>*/ caml_call1
     (Stdlib_Mutex[2], s[1]);
     /*<<semaphore.ml:69:2>>*/ s[2] = 1;
     /*<<semaphore.ml:71:2>>*/  /*<<semaphore.ml:71:2>>*/ caml_call1
     (Stdlib_Condition[3], s[3]);
     /*<<semaphore.ml:71:2>>*/ return  /*<<semaphore.ml:71:2>>*/ caml_call1
            (Stdlib_Mutex[4], s[1]);
    /*<<semaphore.ml:72:20>>*/ }
   function acquire$0(s){
     /*<<semaphore.ml:75:2>>*/  /*<<semaphore.ml:75:2>>*/ caml_call1
     (Stdlib_Mutex[2], s[1]);
     /*<<semaphore.ml:76:49>>*/ for(;;){
      /*<<semaphore.ml:76:49>>*/ if(0 === s[2]){
       /*<<semaphore.ml:76:19>>*/  /*<<semaphore.ml:76:19>>*/ caml_call2
       (Stdlib_Condition[2], s[3], s[1]);
      continue;
     }
      /*<<semaphore.ml:77:2>>*/ s[2] = 0;
      /*<<semaphore.ml:77:2>>*/ return  /*<<semaphore.ml:77:2>>*/ caml_call1
             (Stdlib_Mutex[4], s[1]);
    }
    /*<<semaphore.ml:78:20>>*/ }
   function try_acquire$0(s){
     /*<<semaphore.ml:81:2>>*/  /*<<semaphore.ml:81:2>>*/ caml_call1
     (Stdlib_Mutex[2], s[1]);
     /*<<semaphore.ml:81:2>>*/  /*<<semaphore.ml:81:2>>*/ var
     ret = 0 === s[2] ? 0 : (s[2] = 0, 1);
     /*<<semaphore.ml:83:2>>*/  /*<<semaphore.ml:83:2>>*/ caml_call1
     (Stdlib_Mutex[4], s[1]);
     /*<<semaphore.ml:83:2>>*/ return ret;
    /*<<semaphore.ml:84:5>>*/ }
   var
    Binary = [0, make$0, release$0, acquire$0, try_acquire$0],
    Stdlib_Semaphore = [0, Counting, Binary];
   runtime.caml_register_global(5, Stdlib_Semaphore, "Stdlib__Semaphore");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Domain
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__Atomic, Stdlib__Condition, Stdlib__List, Stdlib__Mutex
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_domain_dls_set = runtime.caml_domain_dls_set,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_domain_id = runtime.caml_ml_domain_id,
    caml_wrap_exception = runtime.caml_wrap_exception;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<?>>*/ function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Mutex = global_data.Stdlib__Mutex,
    Stdlib_Condition = global_data.Stdlib__Condition,
    Stdlib = global_data.Stdlib,
    Stdlib_Atomic = global_data.Stdlib__Atomic,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_Array = global_data.Stdlib__Array,
    cst_internal_error_Am_I_alread = "internal error: Am I already finished?",
    cst_first_domain_already_spawn = "first domain already spawned";
    /*<<domain.ml:19:13>>*/ function cpu_relax(param){
     /*<<domain.ml:32:19>>*/ return  /*<<domain.ml:32:19>>*/ runtime.caml_ml_domain_cpu_relax
            (0);
    /*<<domain.ml:32:35>>*/ }
    /*<<domain.ml:19:13>>*/  /*<<domain.ml:19:13>>*/ var
    unique_value = [0, 0];
    /*<<domain.ml:19:13>>*/ function create_dls(param){
     /*<<domain.ml:59:13>>*/  /*<<domain.ml:59:13>>*/ var
     st =  /*<<domain.ml:59:13>>*/ caml_make_vect(8, unique_value);
     /*<<domain.ml:60:4>>*/ return  /*<<domain.ml:60:4>>*/ caml_domain_dls_set
            (st);
    /*<<domain.ml:60:20>>*/ }
    /*<<domain.ml:62:10>>*/ create_dls(0);
    /*<<domain.ml:66:20>>*/ var
     /*<<domain.ml:66:20>>*/ key_counter =
       /*<<domain.ml:66:20>>*/ caml_call1(Stdlib_Atomic[1], 0),
     /*<<domain.ml:71:20>>*/ parent_keys =
       /*<<domain.ml:71:20>>*/ caml_call1(Stdlib_Atomic[1], 0);
    /*<<domain.ml:71:20>>*/ function new_key(split_from_parent, init_orphan){
     /*<<domain.ml:79:14>>*/ var
      /*<<domain.ml:79:14>>*/ idx =
        /*<<domain.ml:79:14>>*/ caml_call2(Stdlib_Atomic[6], key_counter, 1),
      /*<<domain.ml:79:14>>*/ k = [0, idx, init_orphan];
     /*<<domain.ml:79:14>>*/ if(split_from_parent){
      /*<<domain.ml:83:20>>*/ var
       /*<<domain.ml:83:20>>*/ split = split_from_parent[1],
       /*<<domain.ml:83:20>>*/ ki = [0, k, split];
      /*<<domain.ml:74:4>>*/ for(;;){
       /*<<domain.ml:74:12>>*/  /*<<domain.ml:74:12>>*/ var
       l =  /*<<domain.ml:74:12>>*/ caml_call1(Stdlib_Atomic[2], parent_keys);
       /*<<domain.ml:75:11>>*/ if
       (1
        -
          /*<<domain.ml:75:11>>*/ caml_call3
          (Stdlib_Atomic[5], parent_keys, l, [0, ki, l]))
       continue;
      break;
     }
    }
     /*<<domain.ml:85:4>>*/ return k;
    /*<<domain.ml:85:5>>*/ }
    /*<<domain.ml:71:20>>*/ function maybe_grow(idx){
     /*<<domain.ml:90:4>>*/ var
      /*<<domain.ml:90:4>>*/ st =
        /*<<domain.ml:90:4>>*/ runtime.caml_domain_dls_get(0),
      /*<<domain.ml:90:4>>*/ sz = st.length - 1;
     /*<<domain.ml:90:4>>*/ if(idx < sz)  /*<<domain.ml:92:21>>*/ return st;
    var new_sz = sz;
     /*<<domain.ml:95:8>>*/ for(;;){
      /*<<domain.ml:95:8>>*/ if(idx < new_sz){
       /*<<domain.ml:98:19>>*/  /*<<domain.ml:98:19>>*/ var
       new_st =  /*<<domain.ml:98:19>>*/ caml_make_vect(new_sz, unique_value);
       /*<<domain.ml:99:6>>*/  /*<<domain.ml:99:6>>*/ caml_call5
       (Stdlib_Array[8], st, 0, new_st, 0, sz);
       /*<<domain.ml:100:6>>*/  /*<<domain.ml:100:6>>*/ caml_domain_dls_set
       (new_st);
       /*<<domain.ml:100:6>>*/ return new_st;
     }
      /*<<domain.ml:95:31>>*/ var
       /*<<domain.ml:95:31>>*/ s = 2 * new_sz | 0,
      new_sz = s;
    }
    /*<<domain.ml:102:7>>*/ }
    /*<<domain.ml:71:20>>*/ function set(param, x){
     /*<<domain.ml:105:13>>*/ var
     idx = param[1],
      /*<<domain.ml:105:13>>*/ st = maybe_grow(idx);
     /*<<domain.ml:109:4>>*/  /*<<domain.ml:109:4>>*/ caml_check_bound
      (st, idx)
     [1 + idx]
    = x;
     /*<<domain.ml:109:4>>*/ return 0;
   }
    /*<<domain.ml:71:20>>*/ function get(param){
     /*<<domain.ml:112:13>>*/ var
     init = param[2],
     idx = param[1],
      /*<<domain.ml:112:13>>*/ st = maybe_grow(idx),
      /*<<domain.ml:113:12>>*/ v =
        /*<<domain.ml:113:12>>*/ caml_check_bound(st, idx)[1 + idx];
     /*<<domain.ml:113:12>>*/ if(v !== unique_value)
      /*<<domain.ml:118:9>>*/ return v;
     /*<<domain.ml:115:24>>*/  /*<<domain.ml:115:24>>*/ var
     v$0 =  /*<<domain.ml:115:24>>*/ caml_call1(init, 0);
     /*<<domain.ml:116:6>>*/  /*<<domain.ml:116:6>>*/ caml_check_bound
      (st, idx)
     [1 + idx]
    = v$0;
     /*<<domain.ml:116:6>>*/ return v$0;
   }
    /*<<domain.ml:71:20>>*/ function get_id(param){
    var domain = param[1];
    return domain;
   }
    /*<<domain.ml:71:20>>*/ function self(param){
     /*<<domain.ml:138:14>>*/ return  /*<<domain.ml:138:14>>*/ caml_ml_domain_id
            (0);
    /*<<domain.ml:138:25>>*/ }
    /*<<domain.ml:71:20>>*/ function is_main_domain(param){
     /*<<domain.ml:140:25>>*/ return 0
            ===  /*<<domain.ml:140:25>>*/ caml_ml_domain_id(0)
            ? 1
            : 0;
    /*<<domain.ml:140:44>>*/ }
    /*<<domain.ml:145:27>>*/ var
     /*<<domain.ml:145:27>>*/ first_domain_spawned =
       /*<<domain.ml:145:27>>*/ caml_call1(Stdlib_Atomic[1], 0),
     /*<<domain.ml:145:27>>*/ first_spawn_function =
      [0,
       function(param){
         /*<<domain.ml:147:42>>*/ return 0;
        /*<<domain.ml:147:44>>*/ }];
    /*<<domain.ml:145:27>>*/ function before_first_spawn(f){
     /*<<domain.ml:150:5>>*/ if
     ( /*<<domain.ml:150:5>>*/ caml_call1
       (Stdlib_Atomic[2], first_domain_spawned))
      /*<<domain.ml:151:4>>*/ throw  /*<<domain.ml:151:4>>*/ caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_first_domain_already_spawn], 1);
     /*<<domain.ml:152:7>>*/  /*<<domain.ml:152:7>>*/ var
     old_f = first_spawn_function[1];
     /*<<domain.ml:152:7>>*/ function new_f(param){
      /*<<domain.ml:154:19>>*/  /*<<domain.ml:154:19>>*/ caml_call1(old_f, 0);
      /*<<domain.ml:154:19>>*/ return  /*<<domain.ml:154:19>>*/ caml_call1
             (f, 0);
     /*<<domain.ml:154:33>>*/ }
     /*<<domain.ml:152:7>>*/ first_spawn_function[1] = new_f;
     /*<<domain.ml:152:7>>*/ return 0;
    /*<<domain.ml:156:5>>*/ }
    /*<<domain.ml:166:18>>*/  /*<<domain.ml:166:18>>*/ var
    at_exit_key =
      new_key
       (0,
        function(param, _e_){
          /*<<domain.ml:166:52>>*/ return 0;
         /*<<domain.ml:166:54>>*/ });
    /*<<domain.ml:166:18>>*/ function at_exit(f){
     /*<<domain.ml:169:32>>*/  /*<<domain.ml:169:32>>*/ var
     old_exit = get(at_exit_key);
     /*<<domain.ml:169:32>>*/ function new_exit(param){
      /*<<domain.ml:175:4>>*/  /*<<domain.ml:175:4>>*/ caml_call1(f, 0);
      /*<<domain.ml:175:4>>*/ return  /*<<domain.ml:175:4>>*/ caml_call1
             (old_exit, 0);
     /*<<domain.ml:175:21>>*/ }
     /*<<domain.ml:169:32>>*/ return set(at_exit_key, new_exit);
    /*<<domain.ml:177:30>>*/ }
    /*<<domain.ml:166:18>>*/ function do_at_exit(param){
     /*<<domain.ml:180:25>>*/  /*<<domain.ml:180:25>>*/ var
     f = get(at_exit_key);
     /*<<domain.ml:180:25>>*/ return  /*<<domain.ml:180:25>>*/ caml_call1
            (f, 0);
    /*<<domain.ml:181:6>>*/ }
    /*<<domain.ml:166:18>>*/ Stdlib[104][1] = do_at_exit;
    /*<<domain.ml:166:18>>*/ function spawn(f){
     /*<<domain.ml:159:9>>*/ if
     (1
      -
        /*<<domain.ml:159:9>>*/ caml_call1
        (Stdlib_Atomic[2], first_domain_spawned)){
      /*<<domain.ml:160:4>>*/  /*<<domain.ml:160:4>>*/ caml_call2
      (Stdlib_Atomic[3], first_domain_spawned, 1);
      /*<<domain.ml:161:4>>*/  /*<<domain.ml:161:4>>*/ caml_call1
      (first_spawn_function[1], 0);
      /*<<domain.ml:161:4>>*/ first_spawn_function[1] =
      function(param){
        /*<<domain.ml:163:39>>*/ return 0;
       /*<<domain.ml:163:41>>*/ };
    }
     /*<<domain.ml:124:6>>*/  /*<<domain.ml:124:6>>*/ var
     _a_ =  /*<<domain.ml:124:6>>*/ caml_call1(Stdlib_Atomic[2], parent_keys);
     /*<<domain.ml:124:6>>*/ function _b_(param){
      /*<<domain.ml:122:6>>*/ var
       /*<<domain.ml:122:6>>*/ split = param[2],
       /*<<domain.ml:122:6>>*/ k = param[1],
       /*<<domain.ml:122:6>>*/ idx = k[1];
      /*<<domain.ml:123:26>>*/ return [0,
             idx,
              /*<<domain.ml:123:26>>*/ caml_call1(split, get(k))];
     /*<<domain.ml:123:43>>*/ }
     /*<<domain.ml:124:6>>*/ var
      /*<<domain.ml:124:6>>*/ pk =
        /*<<domain.ml:124:6>>*/ caml_call2(Stdlib_List[19], _b_, _a_),
      /*<<domain.ml:193:19>>*/ term_mutex =
        /*<<domain.ml:193:19>>*/ caml_call1(Stdlib_Mutex[1], 0),
      /*<<domain.ml:194:23>>*/ term_condition =
        /*<<domain.ml:194:23>>*/ caml_call1(Stdlib_Condition[1], 0),
      /*<<domain.ml:194:23>>*/ term_state = [0, 0];
     /*<<domain.ml:194:23>>*/ function body(param){
     var switch$0 = 0;
     try{
       /*<<domain.ml:200:8>>*/ create_dls(0);
       /*<<domain.ml:127:4>>*/  /*<<domain.ml:127:4>>*/ var
       _c_ =
         function(param){
           /*<<domain.ml:128:6>>*/ var
            /*<<domain.ml:128:6>>*/ v = param[2],
            /*<<domain.ml:128:6>>*/ idx = param[1],
            /*<<domain.ml:129:17>>*/ st = maybe_grow(idx);
           /*<<domain.ml:129:35>>*/  /*<<domain.ml:129:35>>*/ caml_check_bound
            (st, idx)
           [1 + idx]
          = v;
           /*<<domain.ml:129:35>>*/ return 0;
          /*<<domain.ml:129:49>>*/ };
       /*<<domain.ml:127:4>>*/  /*<<domain.ml:127:4>>*/ caml_call2
       (Stdlib_List[17], _c_, pk);
       /*<<domain.ml:202:18>>*/  /*<<domain.ml:202:18>>*/ var
       res =  /*<<domain.ml:202:18>>*/ caml_call1(f, 0);
     }
     catch(ex$0){
      var ex = caml_wrap_exception(ex$0), result = [1, ex];
      switch$0 = 1;
     }
     if(! switch$0) var result = [0, res];
     try{ /*<<domain.ml:212:12>>*/ do_at_exit(0); var result$0 = result;}
     catch(ex){
       /*<<domain.ml:215:10>>*/ var
       ex$0 = caml_wrap_exception(ex),
        /*<<domain.ml:215:10>>*/ _d_ = 0 === result[0] ? [1, ex$0] : result,
       result$0 = _d_;
     }
      /*<<domain.ml:230:4>>*/  /*<<domain.ml:230:4>>*/ caml_call1
      (Stdlib_Mutex[2], term_mutex);
      /*<<domain.ml:230:4>>*/ return term_state[1]
             ?  /*<<domain.ml:236:8>>*/ caml_call1
               (Stdlib[2], cst_internal_error_Am_I_alread)
             : (term_state
                [1]
               = [0, result$0],
                /*<<domain.ml:233:8>>*/ caml_call1
                (Stdlib_Condition[4], term_condition));
     /*<<domain.ml:236:57>>*/ }
     /*<<domain.ml:240:13>>*/ return [0,
             /*<<domain.ml:240:13>>*/ runtime.caml_domain_spawn
             (body, term_mutex),
            term_mutex,
            term_condition,
            term_state];
    /*<<domain.ml:243:16>>*/ }
    /*<<domain.ml:166:18>>*/ function join(param){
    var
     term_state = param[4],
     term_condition = param[3],
     term_mutex = param[2];
     /*<<domain.ml:246:2>>*/  /*<<domain.ml:246:2>>*/ caml_call1
     (Stdlib_Mutex[2], term_mutex);
     /*<<domain.ml:248:4>>*/ for(;;){
      /*<<domain.ml:248:4>>*/  /*<<domain.ml:248:4>>*/ var
      match = term_state[1];
      /*<<domain.ml:248:4>>*/ if(! match){
       /*<<domain.ml:250:8>>*/  /*<<domain.ml:250:8>>*/ caml_call2
       (Stdlib_Condition[2], term_condition, term_mutex);
      continue;
     }
      /*<<domain.ml:253:8>>*/  /*<<domain.ml:253:8>>*/ var res = match[1];
      /*<<domain.ml:253:8>>*/  /*<<domain.ml:253:8>>*/ caml_call1
      (Stdlib_Mutex[4], term_mutex);
     if(0 === res[0]){
       /*<<domain.ml:257:12>>*/  /*<<domain.ml:257:12>>*/ var x = res[1];
       /*<<domain.ml:257:12>>*/ return x;
     }
      /*<<domain.ml:258:16>>*/  /*<<domain.ml:258:16>>*/ var ex = res[1];
      /*<<domain.ml:258:16>>*/ throw  /*<<domain.ml:258:16>>*/ caml_maybe_attach_backtrace
            (ex, 1);
    }
   }
    /*<<domain.ml:166:18>>*/ var
     /*<<domain.ml:166:18>>*/ recommended_domain_count =
      runtime.caml_recommended_domain_count,
     /*<<domain.ml:166:18>>*/ Stdlib_Domain =
      [0,
       spawn,
       join,
       get_id,
       self,
       before_first_spawn,
       at_exit,
       cpu_relax,
       is_main_domain,
       recommended_domain_count,
       [0, new_key, get, set]];
    /*<<domain.ml:166:18>>*/  /*<<domain.ml:166:18>>*/ runtime.caml_register_global
    (8, Stdlib_Domain, "Stdlib__Domain");
    /*<<domain.ml:166:18>>*/ return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: CamlinternalFormat
//# unitInfo: Requires: Assert_failure, CamlinternalFormatBasics, Stdlib, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Char, Stdlib__Int, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$43 = "",
    cst_and = " and ",
    cst_Li$3 = "%Li",
    cst_i$3 = "%i",
    cst_li$3 = "%li",
    cst_ni$3 = "%ni",
    cst_u$0 = "%u",
    cst$42 = "' '",
    cst$41 = "'#'",
    cst$39 = "'*'",
    cst$40 = "'+'",
    cst$44 = ", ",
    cst_0$3 = "0",
    cst_at_character_number = ": at character number ",
    cst$38 = "@[",
    cst$37 = "@{",
    cst_bad_input_format_type_mism =
      "bad input: format type mismatch between ",
    cst_bad_input_format_type_mism$0 =
      "bad input: format type mismatch between %S and %S",
    cst_camlinternalFormat_ml = "camlinternalFormat.ml",
    cst_invalid_format = "invalid format ",
    cst_precision$3 = "precision",
    caml_blit_string = runtime.caml_blit_string,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_format_float = runtime.caml_format_float,
    caml_format_int = runtime.caml_format_int,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_notequal = runtime.caml_notequal,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_string_unsafe_get = runtime.caml_string_unsafe_get,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<?>>*/ function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
    /*<<?>>*/ function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$9 = "%{",
    cst$10 = "%}",
    cst$11 = "%(",
    cst$12 = "%)",
    cst$13 = "%?",
    cst$18 = cst$37,
    cst$19 = cst$38,
    cst$20 = cst$37,
    cst$21 = cst$38,
    cst$22 = cst$37,
    cst$23 = cst$38,
    cst$26 = cst$39,
    cst$24 = "'-'",
    cst$25 = cst$39,
    cst$27 = cst$40,
    cst$28 = cst$41,
    cst$29 = cst$42,
    cst$30 = cst$40,
    cst$31 = "'_'",
    sub_format = [0, 0, cst$43],
    formatting_lit = [0, "@;", 1, 0],
    cst$35 = cst$41,
    cst$32 = cst$40,
    cst$33 = cst$40,
    cst$34 = cst$42,
    cst$36 = cst$40,
    cst$17 = ".",
    cst$14 = "%!",
    cst$15 = cst$37,
    cst$16 = cst$38,
    cst$8 = "%%",
    cst$0 = "@]",
    cst$1 = "@}",
    cst$2 = "@?",
    cst$3 = "@\n",
    cst$4 = "@.",
    cst$5 = "@@",
    cst$6 = "@%",
    cst$7 = "@",
    cst = ".*",
    Assert_failure = global_data.Assert_failure,
    CamlinternalFormatBasics = global_data.CamlinternalFormatBasics,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Char = global_data.Stdlib__Char,
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib_Int = global_data.Stdlib__Int,
    cst_c = "%c",
    cst_s = "%s",
    cst_i = cst_i$3,
    cst_li = cst_li$3,
    cst_ni = cst_ni$3,
    cst_Li = cst_Li$3,
    cst_f = "%f",
    cst_B = "%B",
    cst_a = "%a",
    cst_t = "%t",
    cst_r = "%r",
    cst_r$0 = "%_r",
    _b_ = [0, cst_camlinternalFormat_ml, 850, 23],
    _m_ = [0, cst_camlinternalFormat_ml, 814, 21],
    _e_ = [0, cst_camlinternalFormat_ml, 815, 21],
    _n_ = [0, cst_camlinternalFormat_ml, 818, 21],
    _f_ = [0, cst_camlinternalFormat_ml, 819, 21],
    _o_ = [0, cst_camlinternalFormat_ml, 822, 19],
    _g_ = [0, cst_camlinternalFormat_ml, 823, 19],
    _p_ = [0, cst_camlinternalFormat_ml, 826, 22],
    _h_ = [0, cst_camlinternalFormat_ml, 827, 22],
    _q_ = [0, cst_camlinternalFormat_ml, 831, 30],
    _i_ = [0, cst_camlinternalFormat_ml, 832, 30],
    _k_ = [0, cst_camlinternalFormat_ml, 836, 26],
    _c_ = [0, cst_camlinternalFormat_ml, 837, 26],
    _l_ = [0, cst_camlinternalFormat_ml, 846, 28],
    _d_ = [0, cst_camlinternalFormat_ml, 847, 28],
    _j_ = [0, cst_camlinternalFormat_ml, 851, 23],
    _s_ = [0, cst_camlinternalFormat_ml, 1558, 4],
    cst_Printf_bad_conversion = "Printf: bad conversion %[",
    _t_ = [0, cst_camlinternalFormat_ml, 1626, 39],
    _u_ = [0, cst_camlinternalFormat_ml, 1649, 31],
    _v_ = [0, cst_camlinternalFormat_ml, 1650, 31],
    cst_Printf_bad_conversion$0 = "Printf: bad conversion %_",
    _w_ = [0, cst_camlinternalFormat_ml, 1830, 8],
    ___ =
      [0,
       [11, cst_bad_input_format_type_mism, [3, 0, [11, cst_and, [3, 0, 0]]]],
       cst_bad_input_format_type_mism$0],
    _Z_ =
      [0,
       [11, cst_bad_input_format_type_mism, [3, 0, [11, cst_and, [3, 0, 0]]]],
       cst_bad_input_format_type_mism$0],
    _C_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, ", duplicate flag ", [1, 0]]]]]],
       "invalid format %S: at character number %d, duplicate flag %C"],
    cst_0 = cst_0$3,
    cst_padding = "padding",
    _D_ = [0, 1, 0],
    _E_ = [0, 0],
    cst_precision = cst_precision$3,
    _F_ = [1, 0],
    _G_ = [1, 1],
    cst_0$2 = "'0'",
    cst_0$0 = cst_0$3,
    _I_ = [1, 1],
    cst_0$1 = cst_0$3,
    cst_precision$0 = cst_precision$3,
    _H_ = [1, 1],
    cst_precision$1 = cst_precision$3,
    _M_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11,
            ", flag ",
            [1,
             [11,
              " is only allowed after the '",
              [12, 37, [11, "', before padding and precision", 0]]]]]]]]],
       "invalid format %S: at character number %d, flag %C is only allowed after the '%%', before padding and precision"],
    _J_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11, ', invalid conversion "', [12, 37, [0, [12, 34, 0]]]]]]]],
       'invalid format %S: at character number %d, invalid conversion "%%%c"'],
    _K_ = [0, 0],
    cst_padding$0 = "`padding'",
    _L_ = [0, 0],
    cst_precision$2 = "`precision'",
    _N_ = [0, [12, 64, 0]],
    _O_ = [0, "@ ", 1, 0],
    _P_ = [0, "@,", 0, 0],
    _Q_ = [2, 60],
    _R_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ": '",
          [12,
           37,
           [11,
            "' alone is not accepted in character sets, use ",
            [12,
             37,
             [12,
              37,
              [11, " instead at position ", [4, 0, 0, 0, [12, 46, 0]]]]]]]]]],
       "invalid format %S: '%%' alone is not accepted in character sets, use %%%% instead at position %d."],
    _S_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ": integer ",
          [4, 0, 0, 0, [11, " is greater than the limit ", [4, 0, 0, 0, 0]]]]]],
       "invalid format %S: integer %d is greater than the limit %d"],
    cst_digit = "digit",
    _T_ = [0, cst_camlinternalFormat_ml, 2837, 11],
    _U_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          ': unclosed sub-format, expected "',
          [12, 37, [0, [11, '" at character number ', [4, 0, 0, 0, 0]]]]]]],
       'invalid format %S: unclosed sub-format, expected "%%%c" at character number %d'],
    cst_character = "character ')'",
    cst_character$0 = "character '}'",
    _V_ = [0, cst_camlinternalFormat_ml, 2899, 34],
    _W_ = [0, cst_camlinternalFormat_ml, 2935, 28],
    _X_ = [0, cst_camlinternalFormat_ml, 2957, 11],
    _Y_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4,
           0,
           0,
           0,
           [11,
            cst$44,
            [2,
             0,
             [11,
              " is incompatible with '",
              [0, [11, "' in sub-format ", [3, 0, 0]]]]]]]]]],
       "invalid format %S: at character number %d, %s is incompatible with '%c' in sub-format %S"],
    _B_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, cst$44, [2, 0, [11, " expected, read ", [1, 0]]]]]]]],
       "invalid format %S: at character number %d, %s expected, read %C"],
    _A_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11,
          cst_at_character_number,
          [4, 0, 0, 0, [11, ", '", [0, [11, "' without ", [2, 0, 0]]]]]]]],
       "invalid format %S: at character number %d, '%c' without %s"],
    cst_non_zero_widths_are_unsupp =
      "non-zero widths are unsupported for %c conversions",
    cst_unexpected_end_of_format = "unexpected end of format",
    _z_ =
      [0,
       [11,
        cst_invalid_format,
        [3,
         0,
         [11, cst_at_character_number, [4, 0, 0, 0, [11, cst$44, [2, 0, 0]]]]]],
       "invalid format %S: at character number %d, %s"],
    _y_ =
      [0,
       [11, "invalid box description ", [3, 0, 0]],
       "invalid box description %S"],
    _x_ = [0, 0, 4],
    cst_nan = "nan",
    cst_neg_infinity = "neg_infinity",
    cst_infinity = "infinity",
    _r_ = [0, 103],
    cst_nd$0 = "%+nd",
    cst_nd$1 = "% nd",
    cst_ni$1 = "%+ni",
    cst_ni$2 = "% ni",
    cst_nx = "%nx",
    cst_nx$0 = "%#nx",
    cst_nX = "%nX",
    cst_nX$0 = "%#nX",
    cst_no = "%no",
    cst_no$0 = "%#no",
    cst_nd = "%nd",
    cst_ni$0 = cst_ni$3,
    cst_nu = "%nu",
    cst_ld$0 = "%+ld",
    cst_ld$1 = "% ld",
    cst_li$1 = "%+li",
    cst_li$2 = "% li",
    cst_lx = "%lx",
    cst_lx$0 = "%#lx",
    cst_lX = "%lX",
    cst_lX$0 = "%#lX",
    cst_lo = "%lo",
    cst_lo$0 = "%#lo",
    cst_ld = "%ld",
    cst_li$0 = cst_li$3,
    cst_lu = "%lu",
    cst_Ld$0 = "%+Ld",
    cst_Ld$1 = "% Ld",
    cst_Li$1 = "%+Li",
    cst_Li$2 = "% Li",
    cst_Lx = "%Lx",
    cst_Lx$0 = "%#Lx",
    cst_LX = "%LX",
    cst_LX$0 = "%#LX",
    cst_Lo = "%Lo",
    cst_Lo$0 = "%#Lo",
    cst_Ld = "%Ld",
    cst_Li$0 = cst_Li$3,
    cst_Lu = "%Lu",
    cst_d$0 = "%+d",
    cst_d$1 = "% d",
    cst_i$1 = "%+i",
    cst_i$2 = "% i",
    cst_x = "%x",
    cst_x$0 = "%#x",
    cst_X = "%X",
    cst_X$0 = "%#X",
    cst_o = "%o",
    cst_o$0 = "%#o",
    cst_d = "%d",
    cst_i$0 = cst_i$3,
    cst_u = cst_u$0,
    cst_0c = "0c",
    _a_ = [0, 0, 0],
    cst_CamlinternalFormat_Type_mi = "CamlinternalFormat.Type_mismatch";
   function create_char_set(param){
     /*<<camlinternalFormat.ml:24:25>>*/ return  /*<<camlinternalFormat.ml:24:25>>*/ caml_call2
            (Stdlib_Bytes[1], 32, 0);
    /*<<camlinternalFormat.ml:24:45>>*/ }
   function add_in_char_set(char_set, c){
     /*<<camlinternalFormat.ml:28:2>>*/ var
      /*<<camlinternalFormat.ml:28:2>>*/ str_ind = c >>> 3 | 0,
      /*<<camlinternalFormat.ml:28:2>>*/ mask = 1 << (c & 7),
      /*<<camlinternalFormat.ml:31:30>>*/ _dU_ =
        /*<<camlinternalFormat.ml:31:30>>*/ runtime.caml_bytes_get
        (char_set, str_ind)
       | mask;
     /*<<camlinternalFormat.ml:30:2>>*/ return  /*<<camlinternalFormat.ml:30:2>>*/ caml_bytes_set
            (char_set,
             str_ind,
              /*<<camlinternalFormat.ml:31:4>>*/ caml_call1(Stdlib[29], _dU_));
    /*<<camlinternalFormat.ml:31:69>>*/ }
   function freeze_char_set(char_set){
     /*<<camlinternalFormat.ml:34:2>>*/ return  /*<<camlinternalFormat.ml:34:2>>*/ caml_call1
            (Stdlib_Bytes[6], char_set);
    /*<<camlinternalFormat.ml:34:26>>*/ }
   function rev_char_set(char_set){
     /*<<camlinternalFormat.ml:38:18>>*/ var
      /*<<camlinternalFormat.ml:38:18>>*/ char_set$0 = create_char_set(0),
     i = 0;
     /*<<camlinternalFormat.ml:40:4>>*/ for(;;){
      /*<<camlinternalFormat.ml:41:32>>*/  /*<<camlinternalFormat.ml:41:32>>*/ var
      _dS_ =
         /*<<camlinternalFormat.ml:41:32>>*/ caml_string_get(char_set, i)
        ^ 255;
      /*<<camlinternalFormat.ml:40:4>>*/  /*<<camlinternalFormat.ml:40:4>>*/ caml_bytes_set
      (char_set$0,
       i,
        /*<<camlinternalFormat.ml:41:6>>*/ caml_call1(Stdlib[29], _dS_));
      /*<<camlinternalFormat.ml:40:4>>*/  /*<<camlinternalFormat.ml:40:4>>*/ var
      _dT_ = i + 1 | 0;
      /*<<camlinternalFormat.ml:40:4>>*/ if(31 === i)
       /*<<camlinternalFormat.ml:43:2>>*/ return  /*<<camlinternalFormat.ml:43:2>>*/ caml_call1
              (Stdlib_Bytes[44], char_set$0);
     var i = _dT_;
    }
    /*<<camlinternalFormat.ml:43:34>>*/ }
   function is_in_char_set(char_set, c){
     /*<<camlinternalFormat.ml:47:2>>*/ var
      /*<<camlinternalFormat.ml:47:2>>*/ str_ind = c >>> 3 | 0,
      /*<<camlinternalFormat.ml:47:2>>*/ mask = 1 << (c & 7);
     /*<<camlinternalFormat.ml:49:15>>*/ return 0
            !==
             ( /*<<camlinternalFormat.ml:49:15>>*/ caml_string_get
              (char_set, str_ind)
             & mask)
            ? 1
            : 0;
    /*<<camlinternalFormat.ml:49:60>>*/ }
   function pad_of_pad_opt(pad_opt){
     /*<<camlinternalFormat.ml:62:29>>*/ if(! pad_opt)
      /*<<camlinternalFormat.ml:63:12>>*/ return 0;
     /*<<camlinternalFormat.ml:64:18>>*/  /*<<camlinternalFormat.ml:64:18>>*/ var
     width = pad_opt[1];
     /*<<camlinternalFormat.ml:64:18>>*/ return [0, 1, width];
    /*<<camlinternalFormat.ml:64:44>>*/ }
   function param_format_of_ignored_format(ign, fmt){
     /*<<camlinternalFormat.ml:76:15>>*/ if(typeof ign === "number")
      /*<<camlinternalFormat.ml:76:15>>*/ switch(ign){
       case 0:
         /*<<camlinternalFormat.ml:78:4>>*/ return [0, [0, fmt]];
       case 1:
         /*<<camlinternalFormat.ml:80:4>>*/ return [0, [1, fmt]];
       case 2:
         /*<<camlinternalFormat.ml:108:4>>*/ return [0, [19, fmt]];
       default:  /*<<camlinternalFormat.ml:114:4>>*/ return [0, [22, fmt]];
     }
     /*<<camlinternalFormat.ml:76:15>>*/ switch(ign[0]){
      case 0:
        /*<<camlinternalFormat.ml:82:4>>*/  /*<<camlinternalFormat.ml:82:4>>*/ var
        pad_opt = ign[1];
        /*<<camlinternalFormat.ml:82:30>>*/ return [0,
               [2, pad_of_pad_opt(pad_opt), fmt]];
      case 1:
        /*<<camlinternalFormat.ml:84:4>>*/  /*<<camlinternalFormat.ml:84:4>>*/ var
        pad_opt$0 = ign[1];
        /*<<camlinternalFormat.ml:84:35>>*/ return [0,
               [3, pad_of_pad_opt(pad_opt$0), fmt]];
      case 2:
       var pad_opt$1 = ign[2], iconv = ign[1];
        /*<<camlinternalFormat.ml:86:34>>*/ return [0,
               [4, iconv, pad_of_pad_opt(pad_opt$1), 0, fmt]];
      case 3:
       var pad_opt$2 = ign[2], iconv$0 = ign[1];
        /*<<camlinternalFormat.ml:89:21>>*/ return [0,
               [5, iconv$0, pad_of_pad_opt(pad_opt$2), 0, fmt]];
      case 4:
       var pad_opt$3 = ign[2], iconv$1 = ign[1];
        /*<<camlinternalFormat.ml:92:25>>*/ return [0,
               [6, iconv$1, pad_of_pad_opt(pad_opt$3), 0, fmt]];
      case 5:
       var pad_opt$4 = ign[2], iconv$2 = ign[1];
        /*<<camlinternalFormat.ml:95:21>>*/ return [0,
               [7, iconv$2, pad_of_pad_opt(pad_opt$4), 0, fmt]];
      case 6:
       var prec_opt = ign[2], pad_opt$5 = ign[1];
        /*<<camlinternalFormat.ml:67:32>>*/ if(prec_opt)
         /*<<camlinternalFormat.ml:69:17>>*/ var
          /*<<camlinternalFormat.ml:69:17>>*/ ndec = prec_opt[1],
         _dR_ = [0, ndec];
       else
        var _dR_ = 0;
        /*<<camlinternalFormat.ml:99:14>>*/ return [0,
               [8, _a_, pad_of_pad_opt(pad_opt$5), _dR_, fmt]];
      case 7:
        /*<<camlinternalFormat.ml:101:4>>*/  /*<<camlinternalFormat.ml:101:4>>*/ var
        pad_opt$6 = ign[1];
        /*<<camlinternalFormat.ml:101:28>>*/ return [0,
               [9, pad_of_pad_opt(pad_opt$6), fmt]];
      case 8:
       var fmtty = ign[2], pad_opt$7 = ign[1];
       return [0, [13, pad_opt$7, fmtty, fmt]];
      case 9:
       var fmtty$0 = ign[2], pad_opt$8 = ign[1];
       return [0, [14, pad_opt$8, fmtty$0, fmt]];
      case 10:
       var char_set = ign[2], width_opt = ign[1];
       return [0, [20, width_opt, char_set, fmt]];
      default:
        /*<<camlinternalFormat.ml:112:4>>*/  /*<<camlinternalFormat.ml:112:4>>*/ var
        counter = ign[1];
        /*<<camlinternalFormat.ml:112:4>>*/ return [0, [21, counter, fmt]];
    }
    /*<<camlinternalFormat.ml:114:41>>*/ }
   function default_float_precision(fconv){
     /*<<camlinternalFormat.ml:221:2>>*/ return 5 === fconv[2] ? 12 : -6;
    /*<<camlinternalFormat.ml:227:17>>*/ }
   function buffer_create(init_size){
     /*<<camlinternalFormat.ml:256:49>>*/ return [0,
            0,
             /*<<camlinternalFormat.ml:256:49>>*/ caml_create_bytes(init_size)];
    /*<<camlinternalFormat.ml:256:73>>*/ }
   function buffer_check_size(buf, overhead){
     /*<<camlinternalFormat.ml:260:2>>*/ var
      /*<<camlinternalFormat.ml:260:2>>*/ len =
        /*<<camlinternalFormat.ml:260:2>>*/ runtime.caml_ml_bytes_length
        (buf[2]),
      /*<<camlinternalFormat.ml:260:2>>*/ min_len = buf[1] + overhead | 0,
      /*<<camlinternalFormat.ml:260:2>>*/ _dP_ = len < min_len ? 1 : 0;
     /*<<camlinternalFormat.ml:260:2>>*/ if(_dP_){
      /*<<camlinternalFormat.ml:263:18>>*/ var
       /*<<camlinternalFormat.ml:263:18>>*/ new_len =
         /*<<camlinternalFormat.ml:263:18>>*/ caml_call2
         (Stdlib_Int[11], len * 2 | 0, min_len),
       /*<<camlinternalFormat.ml:264:4>>*/ new_str =
         /*<<camlinternalFormat.ml:264:4>>*/ caml_create_bytes(new_len);
      /*<<camlinternalFormat.ml:265:4>>*/  /*<<camlinternalFormat.ml:265:4>>*/ caml_call5
      (Stdlib_Bytes[11], buf[2], 0, new_str, 0, len);
      /*<<camlinternalFormat.ml:265:4>>*/ buf[2] = new_str;
     var _dQ_ = 0;
    }
    else
     var _dQ_ = _dP_;
     /*<<camlinternalFormat.ml:256:30>>*/ return _dQ_;
    /*<<camlinternalFormat.ml:267:3>>*/ }
   function buffer_add_char(buf, c){
     /*<<camlinternalFormat.ml:271:2>>*/ buffer_check_size(buf, 1);
     /*<<camlinternalFormat.ml:272:2>>*/  /*<<camlinternalFormat.ml:272:2>>*/ caml_bytes_set
     (buf[2], buf[1], c);
     /*<<camlinternalFormat.ml:272:2>>*/ buf[1] = buf[1] + 1 | 0;
     /*<<camlinternalFormat.ml:272:2>>*/ return 0;
    /*<<camlinternalFormat.ml:273:24>>*/ }
   function buffer_add_string(buf, s){
     /*<<camlinternalFormat.ml:277:2>>*/  /*<<camlinternalFormat.ml:277:2>>*/ var
     str_len =  /*<<camlinternalFormat.ml:277:2>>*/ caml_ml_string_length(s);
     /*<<camlinternalFormat.ml:278:2>>*/ buffer_check_size(buf, str_len);
     /*<<camlinternalFormat.ml:279:2>>*/  /*<<camlinternalFormat.ml:279:2>>*/ caml_call5
     (Stdlib_String[48], s, 0, buf[2], buf[1], str_len);
     /*<<camlinternalFormat.ml:279:2>>*/ buf[1] = buf[1] + str_len | 0;
     /*<<camlinternalFormat.ml:279:2>>*/ return 0;
    /*<<camlinternalFormat.ml:280:30>>*/ }
   function buffer_contents(buf){
     /*<<camlinternalFormat.ml:284:2>>*/ return  /*<<camlinternalFormat.ml:284:2>>*/ caml_call3
            (Stdlib_Bytes[8], buf[2], 0, buf[1]);
    /*<<camlinternalFormat.ml:284:38>>*/ }
   function char_of_iconv(iconv){
     /*<<camlinternalFormat.ml:289:26>>*/ switch(iconv){
      case 6:
      case 7:
        /*<<camlinternalFormat.ml:291:38>>*/ return 120;
      case 8:
      case 9:
        /*<<camlinternalFormat.ml:291:62>>*/ return 88;
      case 10:
      case 11:
        /*<<camlinternalFormat.ml:292:14>>*/ return 111;
      case 12:
      case 15:
        /*<<camlinternalFormat.ml:292:38>>*/ return 117;
      case 0:
      case 1:
      case 2:
      case 13:
        /*<<camlinternalFormat.ml:290:40>>*/ return 100;
      default:  /*<<camlinternalFormat.ml:291:14>>*/ return 105;
    }
    /*<<camlinternalFormat.ml:292:41>>*/ }
   function char_of_fconv(opt, fconv){
     /*<<camlinternalFormat.ml:296:36>>*/ if(opt)
      /*<<camlinternalFormat.ml:296:23>>*/ var
       /*<<camlinternalFormat.ml:296:23>>*/ sth = opt[1],
      cF = sth;
    else
     var cF = 70;
     /*<<camlinternalFormat.ml:296:36>>*/ switch(fconv[2]){
      case 0:
        /*<<camlinternalFormat.ml:297:15>>*/ return 102;
      case 1:
        /*<<camlinternalFormat.ml:297:32>>*/ return 101;
      case 2:
        /*<<camlinternalFormat.ml:298:15>>*/ return 69;
      case 3:
        /*<<camlinternalFormat.ml:298:32>>*/ return 103;
      case 4:
        /*<<camlinternalFormat.ml:299:15>>*/ return 71;
      case 5:
        /*<<camlinternalFormat.ml:299:32>>*/ return cF;
      case 6:
        /*<<camlinternalFormat.ml:300:15>>*/ return 104;
      case 7:
        /*<<camlinternalFormat.ml:300:32>>*/ return 72;
      default:  /*<<camlinternalFormat.ml:301:16>>*/ return 70;
    }
    /*<<camlinternalFormat.ml:301:19>>*/ }
   function bprint_padty(buf, padty){
     /*<<camlinternalFormat.ml:374:29>>*/ switch(padty){
      case 0:
        /*<<camlinternalFormat.ml:375:13>>*/ return buffer_add_char(buf, 45);
      case 1:
        /*<<camlinternalFormat.ml:376:13>>*/ return 0;
      default:
        /*<<camlinternalFormat.ml:377:13>>*/ return buffer_add_char(buf, 48);
    }
    /*<<camlinternalFormat.ml:377:36>>*/ }
   function bprint_ignored_flag(buf, ign_flag){
     /*<<camlinternalFormat.ml:381:2>>*/ return ign_flag
            ? buffer_add_char(buf, 95)
            : ign_flag;
    /*<<camlinternalFormat.ml:381:42>>*/ }
   function bprint_pad_opt(buf, pad_opt){
     /*<<camlinternalFormat.ml:385:33>>*/ if(! pad_opt)
      /*<<camlinternalFormat.ml:386:12>>*/ return 0;
     /*<<camlinternalFormat.ml:387:18>>*/  /*<<camlinternalFormat.ml:387:18>>*/ var
     width = pad_opt[1];
     /*<<camlinternalFormat.ml:387:40>>*/ return buffer_add_string
            (buf,
              /*<<camlinternalFormat.ml:387:40>>*/ caml_call1
              (Stdlib_Int[12], width));
    /*<<camlinternalFormat.ml:387:61>>*/ }
   function bprint_padding(buf, pad){
     /*<<camlinternalFormat.ml:393:15>>*/ if(typeof pad === "number")
      /*<<camlinternalFormat.ml:394:18>>*/ return 0;
     /*<<camlinternalFormat.ml:393:15>>*/ if(0 === pad[0]){
     var n = pad[2], padty = pad[1];
      /*<<camlinternalFormat.ml:396:4>>*/ bprint_padty(buf, padty);
      /*<<camlinternalFormat.ml:397:26>>*/ return buffer_add_string
             (buf,
               /*<<camlinternalFormat.ml:397:26>>*/ caml_call1
               (Stdlib_Int[12], n));
    }
     /*<<camlinternalFormat.ml:399:4>>*/  /*<<camlinternalFormat.ml:399:4>>*/ var
     padty$0 = pad[1];
     /*<<camlinternalFormat.ml:399:4>>*/ bprint_padty(buf, padty$0);
     /*<<camlinternalFormat.ml:399:4>>*/ return buffer_add_char(buf, 42);
    /*<<camlinternalFormat.ml:400:27>>*/ }
   function bprint_precision(buf, prec){
     /*<<camlinternalFormat.ml:404:18>>*/ if(typeof prec === "number")
      /*<<camlinternalFormat.ml:410:4>>*/ return prec
             ? buffer_add_string(buf, cst)
             : 0;
    var n = prec[1];
     /*<<camlinternalFormat.ml:407:4>>*/ buffer_add_char(buf, 46);
     /*<<camlinternalFormat.ml:408:26>>*/ return buffer_add_string
            (buf,
              /*<<camlinternalFormat.ml:408:26>>*/ caml_call1
              (Stdlib_Int[12], n));
    /*<<camlinternalFormat.ml:410:30>>*/ }
   function bprint_iconv_flag(buf, iconv){
     /*<<camlinternalFormat.ml:415:34>>*/ switch(iconv){
      case 1:
      case 4:
        /*<<camlinternalFormat.ml:416:23>>*/ return buffer_add_char(buf, 43);
      case 2:
      case 5:
        /*<<camlinternalFormat.ml:417:23>>*/ return buffer_add_char(buf, 32);
      case 7:
      case 9:
      case 11:
      case 13:
      case 14:
      case 15:
        /*<<camlinternalFormat.ml:419:6>>*/ return buffer_add_char(buf, 35);
      default:  /*<<camlinternalFormat.ml:420:53>>*/ return 0;
    }
    /*<<camlinternalFormat.ml:420:55>>*/ }
   function bprint_altint_fmt(buf, ign_flag, iconv, pad, prec, c){
     /*<<camlinternalFormat.ml:433:2>>*/ buffer_add_char(buf, 37);
     /*<<camlinternalFormat.ml:434:2>>*/ bprint_ignored_flag(buf, ign_flag);
     /*<<camlinternalFormat.ml:435:2>>*/ bprint_iconv_flag(buf, iconv);
     /*<<camlinternalFormat.ml:436:2>>*/ bprint_padding(buf, pad);
     /*<<camlinternalFormat.ml:437:2>>*/ bprint_precision(buf, prec);
     /*<<camlinternalFormat.ml:438:2>>*/ buffer_add_char(buf, c);
     /*<<camlinternalFormat.ml:439:22>>*/ return buffer_add_char
            (buf, char_of_iconv(iconv));
    /*<<camlinternalFormat.ml:439:43>>*/ }
   function bprint_fconv_flag(buf, fconv){
     /*<<camlinternalFormat.ml:445:2>>*/ switch(fconv[1]){
      case 0: break;
      case 1:
        /*<<camlinternalFormat.ml:446:20>>*/ buffer_add_char(buf, 43); break;
      default:  /*<<camlinternalFormat.ml:447:20>>*/ buffer_add_char(buf, 32);
    }
     /*<<camlinternalFormat.ml:449:2>>*/ return 8 <= fconv[2]
            ? buffer_add_char(buf, 35)
            : 0;
    /*<<camlinternalFormat.ml:452:37>>*/ }
   function string_of_formatting_lit(formatting_lit){
     /*<<camlinternalFormat.ml:465:46>>*/ if
     (typeof formatting_lit === "number")
      /*<<camlinternalFormat.ml:465:46>>*/ switch(formatting_lit){
       case 0:
         /*<<camlinternalFormat.ml:466:28>>*/ return cst$0;
       case 1:
         /*<<camlinternalFormat.ml:467:28>>*/ return cst$1;
       case 2:
         /*<<camlinternalFormat.ml:469:28>>*/ return cst$2;
       case 3:
         /*<<camlinternalFormat.ml:470:28>>*/ return cst$3;
       case 4:
         /*<<camlinternalFormat.ml:471:28>>*/ return cst$4;
       case 5:
         /*<<camlinternalFormat.ml:473:28>>*/ return cst$5;
       default:  /*<<camlinternalFormat.ml:474:28>>*/ return cst$6;
     }
     /*<<camlinternalFormat.ml:465:46>>*/ switch(formatting_lit[0]){
      case 0:
        /*<<camlinternalFormat.ml:468:28>>*/  /*<<camlinternalFormat.ml:468:28>>*/ var
        str = formatting_lit[1];
        /*<<camlinternalFormat.ml:468:28>>*/ return str;
      case 1:
        /*<<camlinternalFormat.ml:472:28>>*/  /*<<camlinternalFormat.ml:472:28>>*/ var
        str$0 = formatting_lit[1];
        /*<<camlinternalFormat.ml:472:28>>*/ return str$0;
      default:
        /*<<camlinternalFormat.ml:475:20>>*/ var
         /*<<camlinternalFormat.ml:475:20>>*/ c = formatting_lit[1],
         /*<<camlinternalFormat.ml:475:26>>*/ _dO_ =
           /*<<camlinternalFormat.ml:475:26>>*/ caml_call2
           (Stdlib_String[1], 1, c);
        /*<<camlinternalFormat.ml:475:26>>*/ return  /*<<camlinternalFormat.ml:475:26>>*/ caml_call2
               (Stdlib[28], cst$7, _dO_);
    }
    /*<<camlinternalFormat.ml:475:43>>*/ }
   function bprint_char_literal(buf, chr){
     /*<<camlinternalFormat.ml:480:34>>*/ return 37 === chr
            ? buffer_add_string(buf, cst$8)
            : buffer_add_char(buf, chr);
    /*<<camlinternalFormat.ml:482:32>>*/ }
   function bprint_string_literal(buf, str){
     /*<<camlinternalFormat.ml:486:2>>*/ var
      /*<<camlinternalFormat.ml:486:2>>*/ _dM_ =
        /*<<camlinternalFormat.ml:486:2>>*/ caml_ml_string_length(str) - 1 | 0,
      /*<<camlinternalFormat.ml:486:2>>*/ _dL_ = 0;
     /*<<camlinternalFormat.ml:486:2>>*/ if(_dM_ >= 0){
     var i = _dL_;
      /*<<camlinternalFormat.ml:487:4>>*/ for(;;){
       /*<<camlinternalFormat.ml:487:4>>*/ bprint_char_literal
       (buf,  /*<<camlinternalFormat.ml:487:28>>*/ caml_string_get(str, i));
       /*<<camlinternalFormat.ml:487:4>>*/  /*<<camlinternalFormat.ml:487:4>>*/ var
       _dN_ = i + 1 | 0;
       /*<<camlinternalFormat.ml:487:4>>*/ if(_dM_ !== i){
       var i = _dN_;
       continue;
      }
      break;
     }
    }
    return 0;
    /*<<camlinternalFormat.ml:488:6>>*/ }
   function bprint_fmtty(buf, fmtty){
    var fmtty$0 = fmtty;
     /*<<camlinternalFormat.ml:496:17>>*/ for(;;){
      /*<<camlinternalFormat.ml:496:17>>*/ if(typeof fmtty$0 === "number")
       /*<<camlinternalFormat.ml:521:20>>*/ return 0;
      /*<<camlinternalFormat.ml:496:17>>*/ switch(fmtty$0[0]){
       case 0:
        var fmtty$1 = fmtty$0[1];
         /*<<camlinternalFormat.ml:497:25>>*/ buffer_add_string(buf, cst_c);
        var fmtty$0 = fmtty$1;
        continue;
       case 1:
        var fmtty$2 = fmtty$0[1];
         /*<<camlinternalFormat.ml:498:25>>*/ buffer_add_string(buf, cst_s);
        var fmtty$0 = fmtty$2;
        continue;
       case 2:
        var fmtty$3 = fmtty$0[1];
         /*<<camlinternalFormat.ml:499:25>>*/ buffer_add_string(buf, cst_i);
        var fmtty$0 = fmtty$3;
        continue;
       case 3:
        var fmtty$4 = fmtty$0[1];
         /*<<camlinternalFormat.ml:500:25>>*/ buffer_add_string(buf, cst_li);
        var fmtty$0 = fmtty$4;
        continue;
       case 4:
        var fmtty$5 = fmtty$0[1];
         /*<<camlinternalFormat.ml:501:25>>*/ buffer_add_string(buf, cst_ni);
        var fmtty$0 = fmtty$5;
        continue;
       case 5:
        var fmtty$6 = fmtty$0[1];
         /*<<camlinternalFormat.ml:502:25>>*/ buffer_add_string(buf, cst_Li);
        var fmtty$0 = fmtty$6;
        continue;
       case 6:
        var fmtty$7 = fmtty$0[1];
         /*<<camlinternalFormat.ml:503:25>>*/ buffer_add_string(buf, cst_f);
        var fmtty$0 = fmtty$7;
        continue;
       case 7:
        var fmtty$8 = fmtty$0[1];
         /*<<camlinternalFormat.ml:504:25>>*/ buffer_add_string(buf, cst_B);
        var fmtty$0 = fmtty$8;
        continue;
       case 8:
        var fmtty$9 = fmtty$0[2], sub_fmtty = fmtty$0[1];
         /*<<camlinternalFormat.ml:515:4>>*/ buffer_add_string(buf, cst$9);
         /*<<camlinternalFormat.ml:515:32>>*/ bprint_fmtty(buf, sub_fmtty);
         /*<<camlinternalFormat.ml:516:4>>*/ buffer_add_string(buf, cst$10);
        var fmtty$0 = fmtty$9;
        continue;
       case 9:
        var fmtty$10 = fmtty$0[3], sub_fmtty$0 = fmtty$0[1];
         /*<<camlinternalFormat.ml:518:4>>*/ buffer_add_string(buf, cst$11);
         /*<<camlinternalFormat.ml:518:32>>*/ bprint_fmtty(buf, sub_fmtty$0);
         /*<<camlinternalFormat.ml:519:4>>*/ buffer_add_string(buf, cst$12);
        var fmtty$0 = fmtty$10;
        continue;
       case 10:
        var fmtty$11 = fmtty$0[1];
         /*<<camlinternalFormat.ml:505:25>>*/ buffer_add_string(buf, cst_a);
        var fmtty$0 = fmtty$11;
        continue;
       case 11:
        var fmtty$12 = fmtty$0[1];
         /*<<camlinternalFormat.ml:506:25>>*/ buffer_add_string(buf, cst_t);
        var fmtty$0 = fmtty$12;
        continue;
       case 12:
        var fmtty$13 = fmtty$0[1];
         /*<<camlinternalFormat.ml:507:25>>*/ buffer_add_string(buf, cst$13);
        var fmtty$0 = fmtty$13;
        continue;
       case 13:
        var fmtty$14 = fmtty$0[1];
         /*<<camlinternalFormat.ml:508:25>>*/ buffer_add_string(buf, cst_r);
        var fmtty$0 = fmtty$14;
        continue;
       default:
        var fmtty$15 = fmtty$0[1];
         /*<<camlinternalFormat.ml:511:4>>*/ buffer_add_string(buf, cst_r$0);
        var fmtty$0 = fmtty$15;
        continue;
     }
    }
    /*<<camlinternalFormat.ml:521:22>>*/ }
   function int_of_custom_arity(param){
     /*<<camlinternalFormat.ml:525:8>>*/ if(! param)
      /*<<camlinternalFormat.ml:528:19>>*/ return 0;
     /*<<camlinternalFormat.ml:529:21>>*/  /*<<camlinternalFormat.ml:529:21>>*/ var
     x = param[1];
     /*<<camlinternalFormat.ml:529:25>>*/ return 1 + int_of_custom_arity(x)
           | 0;
    /*<<camlinternalFormat.ml:529:46>>*/ }
   function string_of_fmt(fmt){
     /*<<camlinternalFormat.ml:644:12>>*/  /*<<camlinternalFormat.ml:644:12>>*/ var
     buf = buffer_create(16);
     /*<<camlinternalFormat.ml:533:2>>*/ function fmtiter(fmt, ign_flag){
     var fmt$0 = fmt, ign_flag$0 = ign_flag;
     a:
      /*<<camlinternalFormat.ml:535:22>>*/ for(;;){
       /*<<camlinternalFormat.ml:535:22>>*/ if(typeof fmt$0 === "number")
        /*<<camlinternalFormat.ml:636:23>>*/ return 0;
       /*<<camlinternalFormat.ml:535:22>>*/ switch(fmt$0[0]){
        case 0:
         var rest = fmt$0[1];
          /*<<camlinternalFormat.ml:562:6>>*/ buffer_add_char(buf, 37);
          /*<<camlinternalFormat.ml:562:31>>*/ bprint_ignored_flag
          (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:563:6>>*/ buffer_add_char(buf, 99);
         var fmt$0 = rest, ign_flag$0 = 0;
         continue;
        case 1:
         var rest$0 = fmt$0[1];
          /*<<camlinternalFormat.ml:565:6>>*/ buffer_add_char(buf, 37);
          /*<<camlinternalFormat.ml:565:31>>*/ bprint_ignored_flag
          (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:566:6>>*/ buffer_add_char(buf, 67);
         var fmt$0 = rest$0, ign_flag$0 = 0;
         continue;
        case 2:
         var rest$1 = fmt$0[2], pad = fmt$0[1];
          /*<<camlinternalFormat.ml:537:6>>*/ buffer_add_char(buf, 37);
          /*<<camlinternalFormat.ml:537:31>>*/ bprint_ignored_flag
          (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:538:6>>*/ bprint_padding(buf, pad);
          /*<<camlinternalFormat.ml:538:30>>*/ buffer_add_char(buf, 115);
         var fmt$0 = rest$1, ign_flag$0 = 0;
         continue;
        case 3:
         var rest$2 = fmt$0[2], pad$0 = fmt$0[1];
          /*<<camlinternalFormat.ml:541:6>>*/ buffer_add_char(buf, 37);
          /*<<camlinternalFormat.ml:541:31>>*/ bprint_ignored_flag
          (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:542:6>>*/ bprint_padding(buf, pad$0);
          /*<<camlinternalFormat.ml:542:30>>*/ buffer_add_char(buf, 83);
         var fmt$0 = rest$2, ign_flag$0 = 0;
         continue;
        case 4:
         var
          rest$3 = fmt$0[4],
          prec = fmt$0[3],
          pad$1 = fmt$0[2],
          iconv = fmt$0[1];
          /*<<camlinternalFormat.ml:424:2>>*/ buffer_add_char(buf, 37);
          /*<<camlinternalFormat.ml:425:2>>*/ bprint_ignored_flag
          (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:426:2>>*/ bprint_iconv_flag(buf, iconv);
          /*<<camlinternalFormat.ml:427:2>>*/ bprint_padding(buf, pad$1);
          /*<<camlinternalFormat.ml:428:2>>*/ bprint_precision(buf, prec);
          /*<<camlinternalFormat.ml:429:22>>*/ buffer_add_char
          (buf, char_of_iconv(iconv));
         var fmt$0 = rest$3, ign_flag$0 = 0;
         continue;
        case 5:
         var
          rest$4 = fmt$0[4],
          prec$0 = fmt$0[3],
          pad$2 = fmt$0[2],
          iconv$0 = fmt$0[1];
          /*<<camlinternalFormat.ml:549:6>>*/ bprint_altint_fmt
          (buf, ign_flag$0, iconv$0, pad$2, prec$0, 108);
         var fmt$0 = rest$4, ign_flag$0 = 0;
         continue;
        case 6:
         var
          rest$5 = fmt$0[4],
          prec$1 = fmt$0[3],
          pad$3 = fmt$0[2],
          iconv$1 = fmt$0[1];
          /*<<camlinternalFormat.ml:552:6>>*/ bprint_altint_fmt
          (buf, ign_flag$0, iconv$1, pad$3, prec$1, 110);
         var fmt$0 = rest$5, ign_flag$0 = 0;
         continue;
        case 7:
         var
          rest$6 = fmt$0[4],
          prec$2 = fmt$0[3],
          pad$4 = fmt$0[2],
          iconv$2 = fmt$0[1];
          /*<<camlinternalFormat.ml:555:6>>*/ bprint_altint_fmt
          (buf, ign_flag$0, iconv$2, pad$4, prec$2, 76);
         var fmt$0 = rest$6, ign_flag$0 = 0;
         continue;
        case 8:
         var
          rest$7 = fmt$0[4],
          prec$3 = fmt$0[3],
          pad$5 = fmt$0[2],
          fconv = fmt$0[1];
          /*<<camlinternalFormat.ml:456:2>>*/ buffer_add_char(buf, 37);
          /*<<camlinternalFormat.ml:457:2>>*/ bprint_ignored_flag
          (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:458:2>>*/ bprint_fconv_flag(buf, fconv);
          /*<<camlinternalFormat.ml:459:2>>*/ bprint_padding(buf, pad$5);
          /*<<camlinternalFormat.ml:460:2>>*/ bprint_precision(buf, prec$3);
          /*<<camlinternalFormat.ml:461:22>>*/ buffer_add_char
          (buf, char_of_fconv(0, fconv));
         var fmt$0 = rest$7, ign_flag$0 = 0;
         continue;
        case 9:
         var rest$8 = fmt$0[2], pad$6 = fmt$0[1];
          /*<<camlinternalFormat.ml:568:6>>*/ buffer_add_char(buf, 37);
          /*<<camlinternalFormat.ml:568:31>>*/ bprint_ignored_flag
          (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:569:6>>*/ bprint_padding(buf, pad$6);
          /*<<camlinternalFormat.ml:569:30>>*/ buffer_add_char(buf, 66);
         var fmt$0 = rest$8, ign_flag$0 = 0;
         continue;
        case 10:
         var rest$9 = fmt$0[1];
          /*<<camlinternalFormat.ml:587:6>>*/ buffer_add_string(buf, cst$14);
         var fmt$0 = rest$9;
         continue;
        case 11:
         var rest$10 = fmt$0[2], str = fmt$0[1];
          /*<<camlinternalFormat.ml:591:6>>*/ bprint_string_literal(buf, str);
         var fmt$0 = rest$10;
         continue;
        case 12:
         var rest$11 = fmt$0[2], chr = fmt$0[1];
          /*<<camlinternalFormat.ml:594:6>>*/ bprint_char_literal(buf, chr);
         var fmt$0 = rest$11;
         continue;
        case 13:
         var rest$12 = fmt$0[3], fmtty = fmt$0[2], pad_opt = fmt$0[1];
          /*<<camlinternalFormat.ml:598:6>>*/ buffer_add_char(buf, 37);
          /*<<camlinternalFormat.ml:598:31>>*/ bprint_ignored_flag
          (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:599:6>>*/ bprint_pad_opt(buf, pad_opt);
          /*<<camlinternalFormat.ml:599:34>>*/ buffer_add_char(buf, 123);
          /*<<camlinternalFormat.ml:600:6>>*/ bprint_fmtty(buf, fmtty);
          /*<<camlinternalFormat.ml:600:30>>*/ buffer_add_char(buf, 37);
          /*<<camlinternalFormat.ml:600:55>>*/ buffer_add_char(buf, 125);
         var fmt$0 = rest$12, ign_flag$0 = 0;
         continue;
        case 14:
         var rest$13 = fmt$0[3], fmtty$0 = fmt$0[2], pad_opt$0 = fmt$0[1];
          /*<<camlinternalFormat.ml:603:6>>*/ buffer_add_char(buf, 37);
          /*<<camlinternalFormat.ml:603:31>>*/ bprint_ignored_flag
          (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:604:6>>*/ bprint_pad_opt(buf, pad_opt$0);
          /*<<camlinternalFormat.ml:604:34>>*/ buffer_add_char(buf, 40);
          /*<<camlinternalFormat.ml:605:6>>*/ bprint_fmtty(buf, fmtty$0);
          /*<<camlinternalFormat.ml:605:30>>*/ buffer_add_char(buf, 37);
          /*<<camlinternalFormat.ml:605:55>>*/ buffer_add_char(buf, 41);
         var fmt$0 = rest$13, ign_flag$0 = 0;
         continue;
        case 15:
         var rest$14 = fmt$0[1];
          /*<<camlinternalFormat.ml:572:6>>*/ buffer_add_char(buf, 37);
          /*<<camlinternalFormat.ml:572:31>>*/ bprint_ignored_flag
          (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:573:6>>*/ buffer_add_char(buf, 97);
         var fmt$0 = rest$14, ign_flag$0 = 0;
         continue;
        case 16:
         var rest$15 = fmt$0[1];
          /*<<camlinternalFormat.ml:575:6>>*/ buffer_add_char(buf, 37);
          /*<<camlinternalFormat.ml:575:31>>*/ bprint_ignored_flag
          (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:576:6>>*/ buffer_add_char(buf, 116);
         var fmt$0 = rest$15, ign_flag$0 = 0;
         continue;
        case 17:
         var rest$16 = fmt$0[2], fmting_lit = fmt$0[1];
          /*<<camlinternalFormat.ml:625:6>>*/ bprint_string_literal
          (buf, string_of_formatting_lit(fmting_lit));
         var fmt$0 = rest$16;
         continue;
        case 18:
         var rest$17 = fmt$0[2], fmting_gen = fmt$0[1];
         if(0 === fmting_gen[0]){
          var str$0 = fmting_gen[1][2];
           /*<<camlinternalFormat.ml:630:8>>*/ buffer_add_string(buf, cst$15);
           /*<<camlinternalFormat.ml:630:36>>*/ buffer_add_string(buf, str$0);
         }
         else{
          var str$1 = fmting_gen[1][2];
           /*<<camlinternalFormat.ml:632:8>>*/ buffer_add_string(buf, cst$16);
           /*<<camlinternalFormat.ml:632:36>>*/ buffer_add_string(buf, str$1);
         }
         var fmt$0 = rest$17;
         continue;
        case 19:
         var rest$18 = fmt$0[1];
          /*<<camlinternalFormat.ml:584:6>>*/ buffer_add_char(buf, 37);
          /*<<camlinternalFormat.ml:584:31>>*/ bprint_ignored_flag
          (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:585:6>>*/ buffer_add_char(buf, 114);
         var fmt$0 = rest$18, ign_flag$0 = 0;
         continue;
        case 20:
         var rest$19 = fmt$0[3], char_set = fmt$0[2], width_opt = fmt$0[1];
          /*<<camlinternalFormat.ml:609:6>>*/ buffer_add_char(buf, 37);
          /*<<camlinternalFormat.ml:609:31>>*/ bprint_ignored_flag
          (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:610:6>>*/ bprint_pad_opt(buf, width_opt);
          /*<<camlinternalFormat.ml:314:2>>*/  /*<<camlinternalFormat.ml:314:2>>*/ var
          print_char =
            function(buf, i){
              /*<<camlinternalFormat.ml:358:31>>*/  /*<<camlinternalFormat.ml:358:31>>*/ var
              c =
                 /*<<camlinternalFormat.ml:358:31>>*/ caml_call1
                 (Stdlib[29], i);
              /*<<camlinternalFormat.ml:358:31>>*/ return 37 === c
                     ? (buffer_add_char(buf, 37), buffer_add_char(buf, 37))
                     : 64
                       === c
                       ? (buffer_add_char(buf, 37), buffer_add_char(buf, 64))
                       : buffer_add_char(buf, c);
             /*<<camlinternalFormat.ml:361:35>>*/ };
          /*<<camlinternalFormat.ml:363:2>>*/ buffer_add_char(buf, 91);
          /*<<camlinternalFormat.ml:365:7>>*/ var
           /*<<camlinternalFormat.ml:365:7>>*/ set =
            is_in_char_set(char_set, 0)
             ? (buffer_add_char(buf, 94), rev_char_set(char_set))
             : char_set,
           /*<<camlinternalFormat.ml:315:4>>*/ is_alone$0 =
            function(set){
             function is_alone(c){
               /*<<camlinternalFormat.ml:316:50>>*/ var
                /*<<camlinternalFormat.ml:316:50>>*/ after =
                  /*<<camlinternalFormat.ml:316:50>>*/ caml_call1
                  (Stdlib_Char[1], c + 1 | 0),
                /*<<camlinternalFormat.ml:316:32>>*/ before =
                  /*<<camlinternalFormat.ml:316:32>>*/ caml_call1
                  (Stdlib_Char[1], c - 1 | 0),
                /*<<camlinternalFormat.ml:317:6>>*/ _dH_ =
                 is_in_char_set(set, c);
               /*<<camlinternalFormat.ml:317:6>>*/ if(_dH_)
                /*<<camlinternalFormat.ml:318:14>>*/ var
                 /*<<camlinternalFormat.ml:318:14>>*/ _dI_ =
                  is_in_char_set(set, before),
                 /*<<camlinternalFormat.ml:318:14>>*/ _dJ_ =
                  _dI_ ? is_in_char_set(set, after) : _dI_,
                _dK_ = 1 - _dJ_;
              else
               var _dK_ = _dH_;
               /*<<camlinternalFormat.ml:315:4>>*/ return _dK_;
              /*<<camlinternalFormat.ml:318:68>>*/ }
             return is_alone;
            },
           /*<<camlinternalFormat.ml:315:4>>*/ is_alone = is_alone$0(set);
          /*<<camlinternalFormat.ml:319:7>>*/ if(is_alone(93))
           /*<<camlinternalFormat.ml:319:25>>*/ buffer_add_char(buf, 93);
         var i = 1;
         b:
          /*<<camlinternalFormat.ml:323:4>>*/ for(;;){
           /*<<camlinternalFormat.ml:323:4>>*/ if(i < 256){
            /*<<camlinternalFormat.ml:324:9>>*/ if
            (!
             is_in_char_set
              (set,
                /*<<camlinternalFormat.ml:324:28>>*/ caml_call1(Stdlib[29], i))){
             /*<<camlinternalFormat.ml:325:11>>*/ var
              /*<<camlinternalFormat.ml:325:11>>*/ i$0 = i + 1 | 0,
             i = i$0;
            continue;
           }
            /*<<camlinternalFormat.ml:327:10>>*/ var
             /*<<camlinternalFormat.ml:327:10>>*/ switcher =
               /*<<camlinternalFormat.ml:327:10>>*/ caml_call1(Stdlib[29], i)
              - 45
              | 0,
            switch$0 = 0;
            /*<<camlinternalFormat.ml:327:10>>*/ if(48 < switcher >>> 0)
            if(210 <= switcher)
              /*<<camlinternalFormat.ml:328:16>>*/ print_char(buf, 255);
            else
             switch$0 = 1;
           else{
            if(46 < switcher - 1 >>> 0){
              /*<<camlinternalFormat.ml:329:19>>*/ var
               /*<<camlinternalFormat.ml:329:19>>*/ i$2 = i + 1 | 0,
              i = i$2;
             continue;
            }
            switch$0 = 1;
           }
           if(switch$0){
             /*<<camlinternalFormat.ml:330:11>>*/  /*<<camlinternalFormat.ml:330:11>>*/ var
             i$1 = i + 1 | 0;
             /*<<camlinternalFormat.ml:332:7>>*/ if
             (!
              is_in_char_set
               (set,
                 /*<<camlinternalFormat.ml:332:26>>*/ caml_call1
                 (Stdlib[29], i$1))){
              /*<<camlinternalFormat.ml:347:6>>*/ print_char(buf, i$1 - 1 | 0);
              /*<<camlinternalFormat.ml:347:6>>*/ var
               /*<<camlinternalFormat.ml:347:6>>*/ i$6 = i$1 + 1 | 0,
              i = i$6;
             continue;
            }
             /*<<camlinternalFormat.ml:333:12>>*/ var
              /*<<camlinternalFormat.ml:333:12>>*/ switcher$0 =
                /*<<camlinternalFormat.ml:333:12>>*/ caml_call1
                (Stdlib[29], i$1)
               - 45
               | 0,
             switch$1 = 0;
             /*<<camlinternalFormat.ml:333:12>>*/ if(48 < switcher$0 >>> 0){
             if(210 <= switcher$0){
               /*<<camlinternalFormat.ml:335:8>>*/ print_char(buf, 254);
               /*<<camlinternalFormat.ml:335:8>>*/ print_char(buf, 255);
              switch$1 = 1;
             }
            }
            else if
             (46 < switcher$0 - 1 >>> 0
              &&
               !
               is_in_char_set
                (set,
                  /*<<camlinternalFormat.ml:337:47>>*/ caml_call1
                  (Stdlib[29], i$1 + 1 | 0))){
              /*<<camlinternalFormat.ml:338:8>>*/ print_char(buf, i$1 - 1 | 0);
              /*<<camlinternalFormat.ml:338:8>>*/ var
               /*<<camlinternalFormat.ml:338:8>>*/ i$5 = i$1 + 1 | 0,
              i = i$5;
             continue;
            }
            if(! switch$1){
              /*<<camlinternalFormat.ml:340:19>>*/ if
              (!
               is_in_char_set
                (set,
                  /*<<camlinternalFormat.ml:340:39>>*/ caml_call1
                  (Stdlib[29], i$1 + 1 | 0))){
               /*<<camlinternalFormat.ml:341:8>>*/ print_char
               (buf, i$1 - 1 | 0);
               /*<<camlinternalFormat.ml:342:8>>*/ print_char(buf, i$1);
               /*<<camlinternalFormat.ml:342:8>>*/ var
                /*<<camlinternalFormat.ml:342:8>>*/ i$4 = i$1 + 2 | 0,
               i = i$4;
              continue;
             }
              /*<<camlinternalFormat.ml:345:8>>*/ var
               /*<<camlinternalFormat.ml:345:8>>*/ j = i$1 + 2 | 0,
               /*<<camlinternalFormat.ml:345:8>>*/ i$3 = i$1 - 1 | 0,
              j$0 = j;
              /*<<camlinternalFormat.ml:351:4>>*/ for(;;){
               /*<<camlinternalFormat.ml:351:22>>*/ if
               (256 !== j$0
                &&
                 is_in_char_set
                  (set,
                    /*<<camlinternalFormat.ml:351:42>>*/ caml_call1
                    (Stdlib[29], j$0))){
                /*<<camlinternalFormat.ml:357:6>>*/ var
                 /*<<camlinternalFormat.ml:357:6>>*/ j$1 = j$0 + 1 | 0,
                j$0 = j$1;
               continue;
              }
               /*<<camlinternalFormat.ml:352:6>>*/ print_char(buf, i$3);
               /*<<camlinternalFormat.ml:353:6>>*/ print_char(buf, 45);
               /*<<camlinternalFormat.ml:354:6>>*/ print_char
               (buf, j$0 - 1 | 0);
               /*<<camlinternalFormat.ml:354:6>>*/ if(j$0 < 256){
                /*<<camlinternalFormat.ml:355:22>>*/ var
                 /*<<camlinternalFormat.ml:355:22>>*/ i$7 = j$0 + 1 | 0,
                i = i$7;
               continue b;
              }
              break;
             }
            }
           }
          }
           /*<<camlinternalFormat.ml:321:7>>*/ if(is_alone(45))
            /*<<camlinternalFormat.ml:321:25>>*/ buffer_add_char(buf, 45);
          buffer_add_char(buf, 93);
          var fmt$0 = rest$19, ign_flag$0 = 0;
          continue a;
         }
        case 21:
         var rest$20 = fmt$0[2], counter = fmt$0[1];
          /*<<camlinternalFormat.ml:613:6>>*/ buffer_add_char(buf, 37);
          /*<<camlinternalFormat.ml:613:31>>*/ bprint_ignored_flag
          (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:305:30>>*/ switch(counter){
           case 0:
            var _dD_ = 108; break;
           case 1:
            var _dD_ = 110; break;
           default: var _dD_ = 78;
         }
          /*<<camlinternalFormat.ml:614:6>>*/ buffer_add_char(buf, _dD_);
         var fmt$0 = rest$20, ign_flag$0 = 0;
         continue;
        case 22:
         var rest$21 = fmt$0[1];
          /*<<camlinternalFormat.ml:617:6>>*/ buffer_add_char(buf, 37);
          /*<<camlinternalFormat.ml:617:31>>*/ bprint_ignored_flag
          (buf, ign_flag$0);
          /*<<camlinternalFormat.ml:618:6>>*/ bprint_string_literal
          (buf, cst_0c);
         var fmt$0 = rest$21, ign_flag$0 = 0;
         continue;
        case 23:
          /*<<camlinternalFormat.ml:621:34>>*/ var
          rest$22 = fmt$0[2],
          ign = fmt$0[1],
           /*<<camlinternalFormat.ml:621:34>>*/ fmt$1 =
            param_format_of_ignored_format(ign, rest$22)[1],
          fmt$0 = fmt$1,
          ign_flag$0 = 1;
         continue;
        default:
          /*<<camlinternalFormat.ml:578:20>>*/ var
          rest$23 = fmt$0[3],
          arity = fmt$0[1],
           /*<<camlinternalFormat.ml:578:20>>*/ _dF_ =
            int_of_custom_arity(arity),
          _dE_ = 1;
          /*<<camlinternalFormat.ml:578:20>>*/ if(_dF_ >= 1){
          var i$8 = _dE_;
           /*<<camlinternalFormat.ml:579:8>>*/ for(;;){
            /*<<camlinternalFormat.ml:579:8>>*/ buffer_add_char(buf, 37);
            /*<<camlinternalFormat.ml:579:33>>*/ bprint_ignored_flag
            (buf, ign_flag$0);
            /*<<camlinternalFormat.ml:580:8>>*/ buffer_add_char(buf, 63);
            /*<<camlinternalFormat.ml:580:8>>*/  /*<<camlinternalFormat.ml:580:8>>*/ var
            _dG_ = i$8 + 1 | 0;
            /*<<camlinternalFormat.ml:580:8>>*/ if(_dF_ !== i$8){
            var i$8 = _dG_;
            continue;
           }
           break;
          }
         }
         var fmt$0 = rest$23, ign_flag$0 = 0;
         continue;
      }
     }
     /*<<camlinternalFormat.ml:636:25>>*/ }
     /*<<camlinternalFormat.ml:533:2>>*/ fmtiter(fmt, 0);
    return buffer_contents(buf);
    /*<<camlinternalFormat.ml:646:21>>*/ }
   function symm(param){
     /*<<camlinternalFormat.ml:657:8>>*/ if(typeof param === "number")
      /*<<camlinternalFormat.ml:680:20>>*/ return 0;
     /*<<camlinternalFormat.ml:657:8>>*/ switch(param[0]){
      case 0:
        /*<<camlinternalFormat.ml:663:20>>*/  /*<<camlinternalFormat.ml:663:20>>*/ var
        rest = param[1];
        /*<<camlinternalFormat.ml:663:28>>*/ return [0, symm(rest)];
      case 1:
        /*<<camlinternalFormat.ml:670:22>>*/  /*<<camlinternalFormat.ml:670:22>>*/ var
        rest$0 = param[1];
        /*<<camlinternalFormat.ml:670:32>>*/ return [1, symm(rest$0)];
      case 2:
        /*<<camlinternalFormat.ml:664:19>>*/  /*<<camlinternalFormat.ml:664:19>>*/ var
        rest$1 = param[1];
        /*<<camlinternalFormat.ml:664:26>>*/ return [2, symm(rest$1)];
      case 3:
        /*<<camlinternalFormat.ml:665:21>>*/  /*<<camlinternalFormat.ml:665:21>>*/ var
        rest$2 = param[1];
        /*<<camlinternalFormat.ml:665:30>>*/ return [3, symm(rest$2)];
      case 4:
        /*<<camlinternalFormat.ml:667:25>>*/  /*<<camlinternalFormat.ml:667:25>>*/ var
        rest$3 = param[1];
        /*<<camlinternalFormat.ml:667:38>>*/ return [4, symm(rest$3)];
      case 5:
        /*<<camlinternalFormat.ml:666:21>>*/  /*<<camlinternalFormat.ml:666:21>>*/ var
        rest$4 = param[1];
        /*<<camlinternalFormat.ml:666:30>>*/ return [5, symm(rest$4)];
      case 6:
        /*<<camlinternalFormat.ml:668:21>>*/  /*<<camlinternalFormat.ml:668:21>>*/ var
        rest$5 = param[1];
        /*<<camlinternalFormat.ml:668:30>>*/ return [6, symm(rest$5)];
      case 7:
        /*<<camlinternalFormat.ml:669:20>>*/  /*<<camlinternalFormat.ml:669:20>>*/ var
        rest$6 = param[1];
        /*<<camlinternalFormat.ml:669:28>>*/ return [7, symm(rest$6)];
      case 8:
       var rest$7 = param[2], ty = param[1];
        /*<<camlinternalFormat.ml:677:23>>*/ return [8, ty, symm(rest$7)];
      case 9:
       var rest$8 = param[3], ty2 = param[2], ty1 = param[1];
        /*<<camlinternalFormat.ml:679:31>>*/ return [9,
               ty2,
               ty1,
               symm(rest$8)];
      case 10:
        /*<<camlinternalFormat.ml:672:21>>*/  /*<<camlinternalFormat.ml:672:21>>*/ var
        rest$9 = param[1];
        /*<<camlinternalFormat.ml:672:30>>*/ return [10, symm(rest$9)];
      case 11:
        /*<<camlinternalFormat.ml:671:21>>*/  /*<<camlinternalFormat.ml:671:21>>*/ var
        rest$10 = param[1];
        /*<<camlinternalFormat.ml:671:30>>*/ return [11, symm(rest$10)];
      case 12:
        /*<<camlinternalFormat.ml:673:19>>*/  /*<<camlinternalFormat.ml:673:19>>*/ var
        rest$11 = param[1];
        /*<<camlinternalFormat.ml:673:26>>*/ return [12, symm(rest$11)];
      case 13:
        /*<<camlinternalFormat.ml:674:22>>*/  /*<<camlinternalFormat.ml:674:22>>*/ var
        rest$12 = param[1];
        /*<<camlinternalFormat.ml:674:32>>*/ return [13, symm(rest$12)];
      default:
        /*<<camlinternalFormat.ml:675:30>>*/  /*<<camlinternalFormat.ml:675:30>>*/ var
        rest$13 = param[1];
        /*<<camlinternalFormat.ml:675:48>>*/ return [14, symm(rest$13)];
    }
    /*<<camlinternalFormat.ml:680:32>>*/ }
   function fmtty_rel_det(param){
     /*<<camlinternalFormat.ml:682:8>>*/ if(typeof param !== "number")
      /*<<camlinternalFormat.ml:682:8>>*/ switch(param[0]){
       case 0:
         /*<<camlinternalFormat.ml:696:4>>*/ var
          /*<<camlinternalFormat.ml:696:4>>*/ rest = param[1],
          /*<<camlinternalFormat.ml:696:25>>*/ match = fmtty_rel_det(rest),
          /*<<camlinternalFormat.ml:696:25>>*/ de = match[4],
          /*<<camlinternalFormat.ml:696:25>>*/ ed = match[3],
          /*<<camlinternalFormat.ml:696:25>>*/ af = match[2],
          /*<<camlinternalFormat.ml:696:25>>*/ fa = match[1],
          /*<<camlinternalFormat.ml:696:25>>*/ _di_ =
           function(param){
             /*<<camlinternalFormat.ml:698:28>>*/  /*<<camlinternalFormat.ml:698:28>>*/ caml_call1
             (af, 0);
             /*<<camlinternalFormat.ml:698:28>>*/ return 0;
            /*<<camlinternalFormat.ml:698:43>>*/ };
         /*<<camlinternalFormat.ml:696:25>>*/ return [0,
                function(param){
                  /*<<camlinternalFormat.ml:697:28>>*/  /*<<camlinternalFormat.ml:697:28>>*/ caml_call1
                  (fa, 0);
                  /*<<camlinternalFormat.ml:697:28>>*/ return 0;
                 /*<<camlinternalFormat.ml:697:43>>*/ },
                _di_,
                ed,
                de];
       case 1:
         /*<<camlinternalFormat.ml:701:4>>*/ var
          /*<<camlinternalFormat.ml:701:4>>*/ rest$0 = param[1],
          /*<<camlinternalFormat.ml:701:25>>*/ match$0 = fmtty_rel_det(rest$0),
          /*<<camlinternalFormat.ml:701:25>>*/ de$0 = match$0[4],
          /*<<camlinternalFormat.ml:701:25>>*/ ed$0 = match$0[3],
          /*<<camlinternalFormat.ml:701:25>>*/ af$0 = match$0[2],
          /*<<camlinternalFormat.ml:701:25>>*/ fa$0 = match$0[1],
          /*<<camlinternalFormat.ml:701:25>>*/ _dj_ =
           function(param){
             /*<<camlinternalFormat.ml:703:28>>*/  /*<<camlinternalFormat.ml:703:28>>*/ caml_call1
             (af$0, 0);
             /*<<camlinternalFormat.ml:703:28>>*/ return 0;
            /*<<camlinternalFormat.ml:703:43>>*/ };
         /*<<camlinternalFormat.ml:701:25>>*/ return [0,
                function(param){
                  /*<<camlinternalFormat.ml:702:28>>*/  /*<<camlinternalFormat.ml:702:28>>*/ caml_call1
                  (fa$0, 0);
                  /*<<camlinternalFormat.ml:702:28>>*/ return 0;
                 /*<<camlinternalFormat.ml:702:43>>*/ },
                _dj_,
                ed$0,
                de$0];
       case 2:
         /*<<camlinternalFormat.ml:706:4>>*/ var
          /*<<camlinternalFormat.ml:706:4>>*/ rest$1 = param[1],
          /*<<camlinternalFormat.ml:706:25>>*/ match$1 = fmtty_rel_det(rest$1),
          /*<<camlinternalFormat.ml:706:25>>*/ de$1 = match$1[4],
          /*<<camlinternalFormat.ml:706:25>>*/ ed$1 = match$1[3],
          /*<<camlinternalFormat.ml:706:25>>*/ af$1 = match$1[2],
          /*<<camlinternalFormat.ml:706:25>>*/ fa$1 = match$1[1],
          /*<<camlinternalFormat.ml:706:25>>*/ _dk_ =
           function(param){
             /*<<camlinternalFormat.ml:708:28>>*/  /*<<camlinternalFormat.ml:708:28>>*/ caml_call1
             (af$1, 0);
             /*<<camlinternalFormat.ml:708:28>>*/ return 0;
            /*<<camlinternalFormat.ml:708:43>>*/ };
         /*<<camlinternalFormat.ml:706:25>>*/ return [0,
                function(param){
                  /*<<camlinternalFormat.ml:707:28>>*/  /*<<camlinternalFormat.ml:707:28>>*/ caml_call1
                  (fa$1, 0);
                  /*<<camlinternalFormat.ml:707:28>>*/ return 0;
                 /*<<camlinternalFormat.ml:707:43>>*/ },
                _dk_,
                ed$1,
                de$1];
       case 3:
         /*<<camlinternalFormat.ml:711:4>>*/ var
          /*<<camlinternalFormat.ml:711:4>>*/ rest$2 = param[1],
          /*<<camlinternalFormat.ml:711:25>>*/ match$2 = fmtty_rel_det(rest$2),
          /*<<camlinternalFormat.ml:711:25>>*/ de$2 = match$2[4],
          /*<<camlinternalFormat.ml:711:25>>*/ ed$2 = match$2[3],
          /*<<camlinternalFormat.ml:711:25>>*/ af$2 = match$2[2],
          /*<<camlinternalFormat.ml:711:25>>*/ fa$2 = match$2[1],
          /*<<camlinternalFormat.ml:711:25>>*/ _dl_ =
           function(param){
             /*<<camlinternalFormat.ml:713:28>>*/  /*<<camlinternalFormat.ml:713:28>>*/ caml_call1
             (af$2, 0);
             /*<<camlinternalFormat.ml:713:28>>*/ return 0;
            /*<<camlinternalFormat.ml:713:43>>*/ };
         /*<<camlinternalFormat.ml:711:25>>*/ return [0,
                function(param){
                  /*<<camlinternalFormat.ml:712:28>>*/  /*<<camlinternalFormat.ml:712:28>>*/ caml_call1
                  (fa$2, 0);
                  /*<<camlinternalFormat.ml:712:28>>*/ return 0;
                 /*<<camlinternalFormat.ml:712:43>>*/ },
                _dl_,
                ed$2,
                de$2];
       case 4:
         /*<<camlinternalFormat.ml:721:4>>*/ var
          /*<<camlinternalFormat.ml:721:4>>*/ rest$3 = param[1],
          /*<<camlinternalFormat.ml:721:25>>*/ match$3 = fmtty_rel_det(rest$3),
          /*<<camlinternalFormat.ml:721:25>>*/ de$3 = match$3[4],
          /*<<camlinternalFormat.ml:721:25>>*/ ed$3 = match$3[3],
          /*<<camlinternalFormat.ml:721:25>>*/ af$3 = match$3[2],
          /*<<camlinternalFormat.ml:721:25>>*/ fa$3 = match$3[1],
          /*<<camlinternalFormat.ml:721:25>>*/ _dm_ =
           function(param){
             /*<<camlinternalFormat.ml:723:28>>*/  /*<<camlinternalFormat.ml:723:28>>*/ caml_call1
             (af$3, 0);
             /*<<camlinternalFormat.ml:723:28>>*/ return 0;
            /*<<camlinternalFormat.ml:723:43>>*/ };
         /*<<camlinternalFormat.ml:721:25>>*/ return [0,
                function(param){
                  /*<<camlinternalFormat.ml:722:28>>*/  /*<<camlinternalFormat.ml:722:28>>*/ caml_call1
                  (fa$3, 0);
                  /*<<camlinternalFormat.ml:722:28>>*/ return 0;
                 /*<<camlinternalFormat.ml:722:43>>*/ },
                _dm_,
                ed$3,
                de$3];
       case 5:
         /*<<camlinternalFormat.ml:716:4>>*/ var
          /*<<camlinternalFormat.ml:716:4>>*/ rest$4 = param[1],
          /*<<camlinternalFormat.ml:716:25>>*/ match$4 = fmtty_rel_det(rest$4),
          /*<<camlinternalFormat.ml:716:25>>*/ de$4 = match$4[4],
          /*<<camlinternalFormat.ml:716:25>>*/ ed$4 = match$4[3],
          /*<<camlinternalFormat.ml:716:25>>*/ af$4 = match$4[2],
          /*<<camlinternalFormat.ml:716:25>>*/ fa$4 = match$4[1],
          /*<<camlinternalFormat.ml:716:25>>*/ _dn_ =
           function(param){
             /*<<camlinternalFormat.ml:718:28>>*/  /*<<camlinternalFormat.ml:718:28>>*/ caml_call1
             (af$4, 0);
             /*<<camlinternalFormat.ml:718:28>>*/ return 0;
            /*<<camlinternalFormat.ml:718:43>>*/ };
         /*<<camlinternalFormat.ml:716:25>>*/ return [0,
                function(param){
                  /*<<camlinternalFormat.ml:717:28>>*/  /*<<camlinternalFormat.ml:717:28>>*/ caml_call1
                  (fa$4, 0);
                  /*<<camlinternalFormat.ml:717:28>>*/ return 0;
                 /*<<camlinternalFormat.ml:717:43>>*/ },
                _dn_,
                ed$4,
                de$4];
       case 6:
         /*<<camlinternalFormat.ml:726:4>>*/ var
          /*<<camlinternalFormat.ml:726:4>>*/ rest$5 = param[1],
          /*<<camlinternalFormat.ml:726:25>>*/ match$5 = fmtty_rel_det(rest$5),
          /*<<camlinternalFormat.ml:726:25>>*/ de$5 = match$5[4],
          /*<<camlinternalFormat.ml:726:25>>*/ ed$5 = match$5[3],
          /*<<camlinternalFormat.ml:726:25>>*/ af$5 = match$5[2],
          /*<<camlinternalFormat.ml:726:25>>*/ fa$5 = match$5[1],
          /*<<camlinternalFormat.ml:726:25>>*/ _do_ =
           function(param){
             /*<<camlinternalFormat.ml:728:28>>*/  /*<<camlinternalFormat.ml:728:28>>*/ caml_call1
             (af$5, 0);
             /*<<camlinternalFormat.ml:728:28>>*/ return 0;
            /*<<camlinternalFormat.ml:728:43>>*/ };
         /*<<camlinternalFormat.ml:726:25>>*/ return [0,
                function(param){
                  /*<<camlinternalFormat.ml:727:28>>*/  /*<<camlinternalFormat.ml:727:28>>*/ caml_call1
                  (fa$5, 0);
                  /*<<camlinternalFormat.ml:727:28>>*/ return 0;
                 /*<<camlinternalFormat.ml:727:43>>*/ },
                _do_,
                ed$5,
                de$5];
       case 7:
         /*<<camlinternalFormat.ml:731:4>>*/ var
          /*<<camlinternalFormat.ml:731:4>>*/ rest$6 = param[1],
          /*<<camlinternalFormat.ml:731:25>>*/ match$6 = fmtty_rel_det(rest$6),
          /*<<camlinternalFormat.ml:731:25>>*/ de$6 = match$6[4],
          /*<<camlinternalFormat.ml:731:25>>*/ ed$6 = match$6[3],
          /*<<camlinternalFormat.ml:731:25>>*/ af$6 = match$6[2],
          /*<<camlinternalFormat.ml:731:25>>*/ fa$6 = match$6[1],
          /*<<camlinternalFormat.ml:731:25>>*/ _dp_ =
           function(param){
             /*<<camlinternalFormat.ml:733:28>>*/  /*<<camlinternalFormat.ml:733:28>>*/ caml_call1
             (af$6, 0);
             /*<<camlinternalFormat.ml:733:28>>*/ return 0;
            /*<<camlinternalFormat.ml:733:43>>*/ };
         /*<<camlinternalFormat.ml:731:25>>*/ return [0,
                function(param){
                  /*<<camlinternalFormat.ml:732:28>>*/  /*<<camlinternalFormat.ml:732:28>>*/ caml_call1
                  (fa$6, 0);
                  /*<<camlinternalFormat.ml:732:28>>*/ return 0;
                 /*<<camlinternalFormat.ml:732:43>>*/ },
                _dp_,
                ed$6,
                de$6];
       case 8:
         /*<<camlinternalFormat.ml:764:4>>*/ var
          /*<<camlinternalFormat.ml:764:4>>*/ rest$7 = param[2],
          /*<<camlinternalFormat.ml:764:25>>*/ match$7 = fmtty_rel_det(rest$7),
          /*<<camlinternalFormat.ml:764:25>>*/ de$7 = match$7[4],
          /*<<camlinternalFormat.ml:764:25>>*/ ed$7 = match$7[3],
          /*<<camlinternalFormat.ml:764:25>>*/ af$7 = match$7[2],
          /*<<camlinternalFormat.ml:764:25>>*/ fa$7 = match$7[1],
          /*<<camlinternalFormat.ml:764:25>>*/ _dq_ =
           function(param){
             /*<<camlinternalFormat.ml:766:28>>*/  /*<<camlinternalFormat.ml:766:28>>*/ caml_call1
             (af$7, 0);
             /*<<camlinternalFormat.ml:766:28>>*/ return 0;
            /*<<camlinternalFormat.ml:766:43>>*/ };
         /*<<camlinternalFormat.ml:764:25>>*/ return [0,
                function(param){
                  /*<<camlinternalFormat.ml:765:28>>*/  /*<<camlinternalFormat.ml:765:28>>*/ caml_call1
                  (fa$7, 0);
                  /*<<camlinternalFormat.ml:765:28>>*/ return 0;
                 /*<<camlinternalFormat.ml:765:43>>*/ },
                _dq_,
                ed$7,
                de$7];
       case 9:
         /*<<camlinternalFormat.ml:769:25>>*/ var
         rest$8 = param[3],
         ty2 = param[2],
         ty1 = param[1],
          /*<<camlinternalFormat.ml:769:25>>*/ match$8 = fmtty_rel_det(rest$8),
          /*<<camlinternalFormat.ml:769:25>>*/ de$8 = match$8[4],
          /*<<camlinternalFormat.ml:769:25>>*/ ed$8 = match$8[3],
          /*<<camlinternalFormat.ml:769:25>>*/ af$8 = match$8[2],
          /*<<camlinternalFormat.ml:769:25>>*/ fa$8 = match$8[1],
          /*<<camlinternalFormat.ml:770:13>>*/ ty = trans(symm(ty1), ty2),
          /*<<camlinternalFormat.ml:771:25>>*/ match$9 = fmtty_rel_det(ty),
          /*<<camlinternalFormat.ml:771:25>>*/ jd = match$9[4],
          /*<<camlinternalFormat.ml:771:25>>*/ dj = match$9[3],
          /*<<camlinternalFormat.ml:771:25>>*/ ga = match$9[2],
          /*<<camlinternalFormat.ml:771:25>>*/ ag = match$9[1],
          /*<<camlinternalFormat.ml:771:25>>*/ _dr_ =
           function(param){
             /*<<camlinternalFormat.ml:775:28>>*/  /*<<camlinternalFormat.ml:775:28>>*/ caml_call1
             (jd, 0);
             /*<<camlinternalFormat.ml:775:50>>*/  /*<<camlinternalFormat.ml:775:50>>*/ caml_call1
             (de$8, 0);
             /*<<camlinternalFormat.ml:775:50>>*/ return 0;
            /*<<camlinternalFormat.ml:775:65>>*/ },
          /*<<camlinternalFormat.ml:771:25>>*/ _ds_ =
           function(param){
             /*<<camlinternalFormat.ml:774:28>>*/  /*<<camlinternalFormat.ml:774:28>>*/ caml_call1
             (ed$8, 0);
             /*<<camlinternalFormat.ml:774:50>>*/  /*<<camlinternalFormat.ml:774:50>>*/ caml_call1
             (dj, 0);
             /*<<camlinternalFormat.ml:774:50>>*/ return 0;
            /*<<camlinternalFormat.ml:774:65>>*/ },
          /*<<camlinternalFormat.ml:771:25>>*/ _dt_ =
           function(param){
             /*<<camlinternalFormat.ml:773:28>>*/  /*<<camlinternalFormat.ml:773:28>>*/ caml_call1
             (ga, 0);
             /*<<camlinternalFormat.ml:773:50>>*/  /*<<camlinternalFormat.ml:773:50>>*/ caml_call1
             (af$8, 0);
             /*<<camlinternalFormat.ml:773:50>>*/ return 0;
            /*<<camlinternalFormat.ml:773:65>>*/ };
         /*<<camlinternalFormat.ml:771:25>>*/ return [0,
                function(param){
                  /*<<camlinternalFormat.ml:772:28>>*/  /*<<camlinternalFormat.ml:772:28>>*/ caml_call1
                  (fa$8, 0);
                  /*<<camlinternalFormat.ml:772:50>>*/  /*<<camlinternalFormat.ml:772:50>>*/ caml_call1
                  (ag, 0);
                  /*<<camlinternalFormat.ml:772:50>>*/ return 0;
                 /*<<camlinternalFormat.ml:772:65>>*/ },
                _dt_,
                _ds_,
                _dr_];
       case 10:
         /*<<camlinternalFormat.ml:742:4>>*/ var
          /*<<camlinternalFormat.ml:742:4>>*/ rest$9 = param[1],
          /*<<camlinternalFormat.ml:742:25>>*/ match$10 =
           fmtty_rel_det(rest$9),
          /*<<camlinternalFormat.ml:742:25>>*/ de$9 = match$10[4],
          /*<<camlinternalFormat.ml:742:25>>*/ ed$9 = match$10[3],
          /*<<camlinternalFormat.ml:742:25>>*/ af$9 = match$10[2],
          /*<<camlinternalFormat.ml:742:25>>*/ fa$9 = match$10[1],
          /*<<camlinternalFormat.ml:742:25>>*/ _du_ =
           function(param){
             /*<<camlinternalFormat.ml:744:28>>*/  /*<<camlinternalFormat.ml:744:28>>*/ caml_call1
             (af$9, 0);
             /*<<camlinternalFormat.ml:744:28>>*/ return 0;
            /*<<camlinternalFormat.ml:744:43>>*/ };
         /*<<camlinternalFormat.ml:742:25>>*/ return [0,
                function(param){
                  /*<<camlinternalFormat.ml:743:28>>*/  /*<<camlinternalFormat.ml:743:28>>*/ caml_call1
                  (fa$9, 0);
                  /*<<camlinternalFormat.ml:743:28>>*/ return 0;
                 /*<<camlinternalFormat.ml:743:43>>*/ },
                _du_,
                ed$9,
                de$9];
       case 11:
         /*<<camlinternalFormat.ml:737:4>>*/ var
          /*<<camlinternalFormat.ml:737:4>>*/ rest$10 = param[1],
          /*<<camlinternalFormat.ml:737:25>>*/ match$11 =
           fmtty_rel_det(rest$10),
          /*<<camlinternalFormat.ml:737:25>>*/ de$10 = match$11[4],
          /*<<camlinternalFormat.ml:737:25>>*/ ed$10 = match$11[3],
          /*<<camlinternalFormat.ml:737:25>>*/ af$10 = match$11[2],
          /*<<camlinternalFormat.ml:737:25>>*/ fa$10 = match$11[1],
          /*<<camlinternalFormat.ml:737:25>>*/ _dv_ =
           function(param){
             /*<<camlinternalFormat.ml:739:28>>*/  /*<<camlinternalFormat.ml:739:28>>*/ caml_call1
             (af$10, 0);
             /*<<camlinternalFormat.ml:739:28>>*/ return 0;
            /*<<camlinternalFormat.ml:739:43>>*/ };
         /*<<camlinternalFormat.ml:737:25>>*/ return [0,
                function(param){
                  /*<<camlinternalFormat.ml:738:28>>*/  /*<<camlinternalFormat.ml:738:28>>*/ caml_call1
                  (fa$10, 0);
                  /*<<camlinternalFormat.ml:738:28>>*/ return 0;
                 /*<<camlinternalFormat.ml:738:43>>*/ },
                _dv_,
                ed$10,
                de$10];
       case 12:
         /*<<camlinternalFormat.ml:747:4>>*/ var
          /*<<camlinternalFormat.ml:747:4>>*/ rest$11 = param[1],
          /*<<camlinternalFormat.ml:747:25>>*/ match$12 =
           fmtty_rel_det(rest$11),
          /*<<camlinternalFormat.ml:747:25>>*/ de$11 = match$12[4],
          /*<<camlinternalFormat.ml:747:25>>*/ ed$11 = match$12[3],
          /*<<camlinternalFormat.ml:747:25>>*/ af$11 = match$12[2],
          /*<<camlinternalFormat.ml:747:25>>*/ fa$11 = match$12[1],
          /*<<camlinternalFormat.ml:747:25>>*/ _dw_ =
           function(param){
             /*<<camlinternalFormat.ml:749:28>>*/  /*<<camlinternalFormat.ml:749:28>>*/ caml_call1
             (af$11, 0);
             /*<<camlinternalFormat.ml:749:28>>*/ return 0;
            /*<<camlinternalFormat.ml:749:43>>*/ };
         /*<<camlinternalFormat.ml:747:25>>*/ return [0,
                function(param){
                  /*<<camlinternalFormat.ml:748:28>>*/  /*<<camlinternalFormat.ml:748:28>>*/ caml_call1
                  (fa$11, 0);
                  /*<<camlinternalFormat.ml:748:28>>*/ return 0;
                 /*<<camlinternalFormat.ml:748:43>>*/ },
                _dw_,
                ed$11,
                de$11];
       case 13:
         /*<<camlinternalFormat.ml:752:4>>*/ var
          /*<<camlinternalFormat.ml:752:4>>*/ rest$12 = param[1],
          /*<<camlinternalFormat.ml:752:25>>*/ match$13 =
           fmtty_rel_det(rest$12),
          /*<<camlinternalFormat.ml:752:25>>*/ de$12 = match$13[4],
          /*<<camlinternalFormat.ml:752:25>>*/ ed$12 = match$13[3],
          /*<<camlinternalFormat.ml:752:25>>*/ af$12 = match$13[2],
          /*<<camlinternalFormat.ml:752:25>>*/ fa$12 = match$13[1],
          /*<<camlinternalFormat.ml:752:25>>*/ _dx_ =
           function(param){
             /*<<camlinternalFormat.ml:756:28>>*/  /*<<camlinternalFormat.ml:756:28>>*/ caml_call1
             (de$12, 0);
             /*<<camlinternalFormat.ml:756:28>>*/ return 0;
            /*<<camlinternalFormat.ml:756:43>>*/ },
          /*<<camlinternalFormat.ml:752:25>>*/ _dy_ =
           function(param){
             /*<<camlinternalFormat.ml:755:28>>*/  /*<<camlinternalFormat.ml:755:28>>*/ caml_call1
             (ed$12, 0);
             /*<<camlinternalFormat.ml:755:28>>*/ return 0;
            /*<<camlinternalFormat.ml:755:43>>*/ },
          /*<<camlinternalFormat.ml:752:25>>*/ _dz_ =
           function(param){
             /*<<camlinternalFormat.ml:754:28>>*/  /*<<camlinternalFormat.ml:754:28>>*/ caml_call1
             (af$12, 0);
             /*<<camlinternalFormat.ml:754:28>>*/ return 0;
            /*<<camlinternalFormat.ml:754:43>>*/ };
         /*<<camlinternalFormat.ml:752:25>>*/ return [0,
                function(param){
                  /*<<camlinternalFormat.ml:753:28>>*/  /*<<camlinternalFormat.ml:753:28>>*/ caml_call1
                  (fa$12, 0);
                  /*<<camlinternalFormat.ml:753:28>>*/ return 0;
                 /*<<camlinternalFormat.ml:753:43>>*/ },
                _dz_,
                _dy_,
                _dx_];
       default:
         /*<<camlinternalFormat.ml:758:4>>*/ var
          /*<<camlinternalFormat.ml:758:4>>*/ rest$13 = param[1],
          /*<<camlinternalFormat.ml:758:25>>*/ match$14 =
           fmtty_rel_det(rest$13),
          /*<<camlinternalFormat.ml:758:25>>*/ de$13 = match$14[4],
          /*<<camlinternalFormat.ml:758:25>>*/ ed$13 = match$14[3],
          /*<<camlinternalFormat.ml:758:25>>*/ af$13 = match$14[2],
          /*<<camlinternalFormat.ml:758:25>>*/ fa$13 = match$14[1],
          /*<<camlinternalFormat.ml:758:25>>*/ _dA_ =
           function(param){
             /*<<camlinternalFormat.ml:762:28>>*/  /*<<camlinternalFormat.ml:762:28>>*/ caml_call1
             (de$13, 0);
             /*<<camlinternalFormat.ml:762:28>>*/ return 0;
            /*<<camlinternalFormat.ml:762:43>>*/ },
          /*<<camlinternalFormat.ml:758:25>>*/ _dB_ =
           function(param){
             /*<<camlinternalFormat.ml:761:28>>*/  /*<<camlinternalFormat.ml:761:28>>*/ caml_call1
             (ed$13, 0);
             /*<<camlinternalFormat.ml:761:28>>*/ return 0;
            /*<<camlinternalFormat.ml:761:43>>*/ },
          /*<<camlinternalFormat.ml:758:25>>*/ _dC_ =
           function(param){
             /*<<camlinternalFormat.ml:760:28>>*/  /*<<camlinternalFormat.ml:760:28>>*/ caml_call1
             (af$13, 0);
             /*<<camlinternalFormat.ml:760:28>>*/ return 0;
            /*<<camlinternalFormat.ml:760:43>>*/ };
         /*<<camlinternalFormat.ml:758:25>>*/ return [0,
                function(param){
                  /*<<camlinternalFormat.ml:759:28>>*/  /*<<camlinternalFormat.ml:759:28>>*/ caml_call1
                  (fa$13, 0);
                  /*<<camlinternalFormat.ml:759:28>>*/ return 0;
                 /*<<camlinternalFormat.ml:759:43>>*/ },
                _dC_,
                _dB_,
                _dA_];
     }
     /*<<camlinternalFormat.ml:691:4>>*/ function _df_(param){
      /*<<camlinternalFormat.ml:694:17>>*/ return 0;
     /*<<camlinternalFormat.ml:694:21>>*/ }
     /*<<camlinternalFormat.ml:691:4>>*/ function _dg_(param){
      /*<<camlinternalFormat.ml:693:17>>*/ return 0;
     /*<<camlinternalFormat.ml:693:21>>*/ }
     /*<<camlinternalFormat.ml:691:4>>*/ function _dh_(param){
      /*<<camlinternalFormat.ml:692:17>>*/ return 0;
     /*<<camlinternalFormat.ml:692:21>>*/ }
     /*<<camlinternalFormat.ml:691:4>>*/ return [0,
            function(param){
              /*<<camlinternalFormat.ml:691:17>>*/ return 0;
             /*<<camlinternalFormat.ml:691:21>>*/ },
            _dh_,
            _dg_,
            _df_];
    /*<<camlinternalFormat.ml:775:66>>*/ }
   function trans(ty1, ty2){
    var switch$0 = 0;
     /*<<camlinternalFormat.ml:803:17>>*/ if(typeof ty1 === "number"){
     if(typeof ty2 === "number")
       /*<<camlinternalFormat.ml:849:34>>*/ return 0;
     switch(ty2[0]){
       case 10: break;
       case 11:
        switch$0 = 1; break;
       case 12:
        switch$0 = 2; break;
       case 13:
        switch$0 = 3; break;
       case 14:
        switch$0 = 4; break;
       case 8:
        switch$0 = 5; break;
       case 9:
        switch$0 = 6; break;
       default:
         /*<<camlinternalFormat.ml:850:23>>*/ throw  /*<<camlinternalFormat.ml:850:23>>*/ caml_maybe_attach_backtrace
               ([0, Assert_failure, _b_], 1);
     }
    }
    else
      /*<<camlinternalFormat.ml:803:17>>*/ switch(ty1[0]){
       case 0:
        var rest1 = ty1[1], switch$1 = 0;
        if(typeof ty2 === "number")
         switch$1 = 1;
        else
         switch(ty2[0]){
           case 0:
             /*<<camlinternalFormat.ml:804:36>>*/  /*<<camlinternalFormat.ml:804:36>>*/ var
             rest2 = ty2[1];
             /*<<camlinternalFormat.ml:804:44>>*/ return [0,
                    trans(rest1, rest2)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$1 = 1;
         }
        if(switch$1) switch$0 = 7;
        break;
       case 1:
        var rest1$0 = ty1[1], switch$2 = 0;
        if(typeof ty2 === "number")
         switch$2 = 1;
        else
         switch(ty2[0]){
           case 1:
             /*<<camlinternalFormat.ml:805:40>>*/  /*<<camlinternalFormat.ml:805:40>>*/ var
             rest2$0 = ty2[1];
             /*<<camlinternalFormat.ml:805:50>>*/ return [1,
                    trans(rest1$0, rest2$0)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$2 = 1;
         }
        if(switch$2) switch$0 = 7;
        break;
       case 2:
        var rest1$1 = ty1[1], switch$3 = 0;
        if(typeof ty2 === "number")
         switch$3 = 1;
        else
         switch(ty2[0]){
           case 2:
             /*<<camlinternalFormat.ml:807:34>>*/  /*<<camlinternalFormat.ml:807:34>>*/ var
             rest2$1 = ty2[1];
             /*<<camlinternalFormat.ml:807:41>>*/ return [2,
                    trans(rest1$1, rest2$1)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$3 = 1;
         }
        if(switch$3) switch$0 = 7;
        break;
       case 3:
        var rest1$2 = ty1[1], switch$4 = 0;
        if(typeof ty2 === "number")
         switch$4 = 1;
        else
         switch(ty2[0]){
           case 3:
             /*<<camlinternalFormat.ml:808:38>>*/  /*<<camlinternalFormat.ml:808:38>>*/ var
             rest2$2 = ty2[1];
             /*<<camlinternalFormat.ml:808:47>>*/ return [3,
                    trans(rest1$2, rest2$2)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$4 = 1;
         }
        if(switch$4) switch$0 = 7;
        break;
       case 4:
        var rest1$3 = ty1[1], switch$5 = 0;
        if(typeof ty2 === "number")
         switch$5 = 1;
        else
         switch(ty2[0]){
           case 4:
             /*<<camlinternalFormat.ml:810:46>>*/  /*<<camlinternalFormat.ml:810:46>>*/ var
             rest2$3 = ty2[1];
             /*<<camlinternalFormat.ml:810:59>>*/ return [4,
                    trans(rest1$3, rest2$3)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$5 = 1;
         }
        if(switch$5) switch$0 = 7;
        break;
       case 5:
        var rest1$4 = ty1[1], switch$6 = 0;
        if(typeof ty2 === "number")
         switch$6 = 1;
        else
         switch(ty2[0]){
           case 5:
             /*<<camlinternalFormat.ml:809:38>>*/  /*<<camlinternalFormat.ml:809:38>>*/ var
             rest2$4 = ty2[1];
             /*<<camlinternalFormat.ml:809:47>>*/ return [5,
                    trans(rest1$4, rest2$4)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$6 = 1;
         }
        if(switch$6) switch$0 = 7;
        break;
       case 6:
        var rest1$5 = ty1[1], switch$7 = 0;
        if(typeof ty2 === "number")
         switch$7 = 1;
        else
         switch(ty2[0]){
           case 6:
             /*<<camlinternalFormat.ml:811:38>>*/  /*<<camlinternalFormat.ml:811:38>>*/ var
             rest2$5 = ty2[1];
             /*<<camlinternalFormat.ml:811:47>>*/ return [6,
                    trans(rest1$5, rest2$5)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$7 = 1;
         }
        if(switch$7) switch$0 = 7;
        break;
       case 7:
        var rest1$6 = ty1[1], switch$8 = 0;
        if(typeof ty2 === "number")
         switch$8 = 1;
        else
         switch(ty2[0]){
           case 7:
             /*<<camlinternalFormat.ml:806:36>>*/  /*<<camlinternalFormat.ml:806:36>>*/ var
             rest2$6 = ty2[1];
             /*<<camlinternalFormat.ml:806:44>>*/ return [7,
                    trans(rest1$6, rest2$6)];
           case 8:
            switch$0 = 5; break;
           case 9:
            switch$0 = 6; break;
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$8 = 1;
         }
        if(switch$8) switch$0 = 7;
        break;
       case 8:
        var rest1$7 = ty1[2], ty1$0 = ty1[1], switch$9 = 0;
        if(typeof ty2 === "number")
         switch$9 = 1;
        else
         switch(ty2[0]){
           case 8:
             /*<<camlinternalFormat.ml:835:34>>*/ var
             rest2$7 = ty2[2],
             ty2$0 = ty2[1],
              /*<<camlinternalFormat.ml:835:34>>*/ _de_ =
               trans(rest1$7, rest2$7);
             /*<<camlinternalFormat.ml:835:19>>*/ return [8,
                    trans(ty1$0, ty2$0),
                    _de_];
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$9 = 1;
         }
        if(switch$9)
          /*<<camlinternalFormat.ml:836:26>>*/ throw  /*<<camlinternalFormat.ml:836:26>>*/ caml_maybe_attach_backtrace
                ([0, Assert_failure, _k_], 1);
        break;
       case 9:
        var rest1$8 = ty1[3], ty12 = ty1[2], ty11 = ty1[1], switch$10 = 0;
        if(typeof ty2 === "number")
         switch$10 = 1;
        else
         switch(ty2[0]){
           case 8:
            switch$0 = 5; break;
           case 9:
             /*<<camlinternalFormat.ml:841:13>>*/ var
             rest2$8 = ty2[3],
             ty22 = ty2[2],
             ty21 = ty2[1],
              /*<<camlinternalFormat.ml:841:13>>*/ ty =
               trans(symm(ty12), ty21),
              /*<<camlinternalFormat.ml:842:23>>*/ match = fmtty_rel_det(ty),
              /*<<camlinternalFormat.ml:842:23>>*/ f4 = match[4],
              /*<<camlinternalFormat.ml:842:23>>*/ f2 = match[2];
             /*<<camlinternalFormat.ml:843:15>>*/  /*<<camlinternalFormat.ml:843:15>>*/ caml_call1
             (f2, 0);
             /*<<camlinternalFormat.ml:844:15>>*/  /*<<camlinternalFormat.ml:844:15>>*/ caml_call1
             (f4, 0);
             /*<<camlinternalFormat.ml:845:33>>*/ return [9,
                    ty11,
                    ty22,
                    trans(rest1$8, rest2$8)];
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
            switch$0 = 4; break;
           default: switch$10 = 1;
         }
        if(switch$10)
          /*<<camlinternalFormat.ml:846:28>>*/ throw  /*<<camlinternalFormat.ml:846:28>>*/ caml_maybe_attach_backtrace
                ([0, Assert_failure, _l_], 1);
        break;
       case 10:
        var rest1$9 = ty1[1];
        if(typeof ty2 !== "number" && 10 === ty2[0]){
          /*<<camlinternalFormat.ml:813:38>>*/  /*<<camlinternalFormat.ml:813:38>>*/ var
          rest2$9 = ty2[1];
          /*<<camlinternalFormat.ml:813:47>>*/ return [10,
                 trans(rest1$9, rest2$9)];
        }
         /*<<camlinternalFormat.ml:814:21>>*/ throw  /*<<camlinternalFormat.ml:814:21>>*/ caml_maybe_attach_backtrace
               ([0, Assert_failure, _m_], 1);
       case 11:
        var rest1$10 = ty1[1], switch$11 = 0;
        if(typeof ty2 === "number")
         switch$11 = 1;
        else
         switch(ty2[0]){
           case 10: break;
           case 11:
             /*<<camlinternalFormat.ml:817:38>>*/  /*<<camlinternalFormat.ml:817:38>>*/ var
             rest2$10 = ty2[1];
             /*<<camlinternalFormat.ml:817:47>>*/ return [11,
                    trans(rest1$10, rest2$10)];
           default: switch$11 = 1;
         }
        if(switch$11)
          /*<<camlinternalFormat.ml:818:21>>*/ throw  /*<<camlinternalFormat.ml:818:21>>*/ caml_maybe_attach_backtrace
                ([0, Assert_failure, _n_], 1);
        break;
       case 12:
        var rest1$11 = ty1[1], switch$12 = 0;
        if(typeof ty2 === "number")
         switch$12 = 1;
        else
         switch(ty2[0]){
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
             /*<<camlinternalFormat.ml:821:34>>*/  /*<<camlinternalFormat.ml:821:34>>*/ var
             rest2$11 = ty2[1];
             /*<<camlinternalFormat.ml:821:41>>*/ return [12,
                    trans(rest1$11, rest2$11)];
           default: switch$12 = 1;
         }
        if(switch$12)
          /*<<camlinternalFormat.ml:822:19>>*/ throw  /*<<camlinternalFormat.ml:822:19>>*/ caml_maybe_attach_backtrace
                ([0, Assert_failure, _o_], 1);
        break;
       case 13:
        var rest1$12 = ty1[1], switch$13 = 0;
        if(typeof ty2 === "number")
         switch$13 = 1;
        else
         switch(ty2[0]){
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
             /*<<camlinternalFormat.ml:825:40>>*/  /*<<camlinternalFormat.ml:825:40>>*/ var
             rest2$12 = ty2[1];
             /*<<camlinternalFormat.ml:825:50>>*/ return [13,
                    trans(rest1$12, rest2$12)];
           default: switch$13 = 1;
         }
        if(switch$13)
          /*<<camlinternalFormat.ml:826:22>>*/ throw  /*<<camlinternalFormat.ml:826:22>>*/ caml_maybe_attach_backtrace
                ([0, Assert_failure, _p_], 1);
        break;
       default:
        var rest1$13 = ty1[1], switch$14 = 0;
        if(typeof ty2 === "number")
         switch$14 = 1;
        else
         switch(ty2[0]){
           case 10: break;
           case 11:
            switch$0 = 1; break;
           case 12:
            switch$0 = 2; break;
           case 13:
            switch$0 = 3; break;
           case 14:
             /*<<camlinternalFormat.ml:830:4>>*/  /*<<camlinternalFormat.ml:830:4>>*/ var
             rest2$13 = ty2[1];
             /*<<camlinternalFormat.ml:830:22>>*/ return [14,
                    trans(rest1$13, rest2$13)];
           default: switch$14 = 1;
         }
        if(switch$14)
          /*<<camlinternalFormat.ml:831:30>>*/ throw  /*<<camlinternalFormat.ml:831:30>>*/ caml_maybe_attach_backtrace
                ([0, Assert_failure, _q_], 1);
     }
    switch(switch$0){
      case 0:
        /*<<camlinternalFormat.ml:815:21>>*/ throw  /*<<camlinternalFormat.ml:815:21>>*/ caml_maybe_attach_backtrace
              ([0, Assert_failure, _e_], 1);
      case 1:
        /*<<camlinternalFormat.ml:819:21>>*/ throw  /*<<camlinternalFormat.ml:819:21>>*/ caml_maybe_attach_backtrace
              ([0, Assert_failure, _f_], 1);
      case 2:
        /*<<camlinternalFormat.ml:823:19>>*/ throw  /*<<camlinternalFormat.ml:823:19>>*/ caml_maybe_attach_backtrace
              ([0, Assert_failure, _g_], 1);
      case 3:
        /*<<camlinternalFormat.ml:827:22>>*/ throw  /*<<camlinternalFormat.ml:827:22>>*/ caml_maybe_attach_backtrace
              ([0, Assert_failure, _h_], 1);
      case 4:
        /*<<camlinternalFormat.ml:832:30>>*/ throw  /*<<camlinternalFormat.ml:832:30>>*/ caml_maybe_attach_backtrace
              ([0, Assert_failure, _i_], 1);
      case 5:
        /*<<camlinternalFormat.ml:837:26>>*/ throw  /*<<camlinternalFormat.ml:837:26>>*/ caml_maybe_attach_backtrace
              ([0, Assert_failure, _c_], 1);
      case 6:
        /*<<camlinternalFormat.ml:847:28>>*/ throw  /*<<camlinternalFormat.ml:847:28>>*/ caml_maybe_attach_backtrace
              ([0, Assert_failure, _d_], 1);
      default:
        /*<<camlinternalFormat.ml:851:23>>*/ throw  /*<<camlinternalFormat.ml:851:23>>*/ caml_maybe_attach_backtrace
              ([0, Assert_failure, _j_], 1);
    }
    /*<<camlinternalFormat.ml:851:35>>*/ }
   function fmtty_of_padding_fmtty(pad, fmtty){
     /*<<camlinternalFormat.ml:952:19>>*/ return typeof pad === "number"
            ? fmtty
            : 0 === pad[0] ? fmtty : [2, fmtty];
    /*<<camlinternalFormat.ml:955:35>>*/ }
   function fmtty_of_custom(arity, fmtty){
     /*<<camlinternalFormat.ml:921:19>>*/ if(! arity)
      /*<<camlinternalFormat.ml:922:19>>*/ return fmtty;
     /*<<camlinternalFormat.ml:923:25>>*/  /*<<camlinternalFormat.ml:923:25>>*/ var
     arity$0 = arity[1];
     /*<<camlinternalFormat.ml:923:32>>*/ return [12,
            fmtty_of_custom(arity$0, fmtty)];
    /*<<camlinternalFormat.ml:923:61>>*/ }
   function fmtty_of_fmt(fmtty){
    var fmtty$0 = fmtty;
     /*<<camlinternalFormat.ml:863:13>>*/ for(;;){
      /*<<camlinternalFormat.ml:863:13>>*/ if(typeof fmtty$0 === "number")
       /*<<camlinternalFormat.ml:916:34>>*/ return 0;
      /*<<camlinternalFormat.ml:863:13>>*/ switch(fmtty$0[0]){
       case 0:
         /*<<camlinternalFormat.ml:890:34>>*/  /*<<camlinternalFormat.ml:890:34>>*/ var
         rest = fmtty$0[1];
         /*<<camlinternalFormat.ml:890:42>>*/ return [0, fmtty_of_fmt(rest)];
       case 1:
         /*<<camlinternalFormat.ml:891:34>>*/  /*<<camlinternalFormat.ml:891:34>>*/ var
         rest$0 = fmtty$0[1];
         /*<<camlinternalFormat.ml:891:42>>*/ return [0, fmtty_of_fmt(rest$0)];
       case 2:
        var rest$1 = fmtty$0[2], pad = fmtty$0[1];
         /*<<camlinternalFormat.ml:865:42>>*/ return fmtty_of_padding_fmtty
                (pad, [1, fmtty_of_fmt(rest$1)]);
       case 3:
        var rest$2 = fmtty$0[2], pad$0 = fmtty$0[1];
         /*<<camlinternalFormat.ml:867:42>>*/ return fmtty_of_padding_fmtty
                (pad$0, [1, fmtty_of_fmt(rest$2)]);
       case 4:
         /*<<camlinternalFormat.ml:870:18>>*/ var
         rest$3 = fmtty$0[4],
         prec = fmtty$0[3],
         pad$1 = fmtty$0[2],
          /*<<camlinternalFormat.ml:870:18>>*/ ty_rest = fmtty_of_fmt(rest$3),
          /*<<camlinternalFormat.ml:871:18>>*/ prec_ty =
           fmtty_of_precision_fmtty(prec, [2, ty_rest]);
         /*<<camlinternalFormat.ml:871:18>>*/ return fmtty_of_padding_fmtty
                (pad$1, prec_ty);
       case 5:
         /*<<camlinternalFormat.ml:874:18>>*/ var
         rest$4 = fmtty$0[4],
         prec$0 = fmtty$0[3],
         pad$2 = fmtty$0[2],
          /*<<camlinternalFormat.ml:874:18>>*/ ty_rest$0 =
           fmtty_of_fmt(rest$4),
          /*<<camlinternalFormat.ml:875:18>>*/ prec_ty$0 =
           fmtty_of_precision_fmtty(prec$0, [3, ty_rest$0]);
         /*<<camlinternalFormat.ml:875:18>>*/ return fmtty_of_padding_fmtty
                (pad$2, prec_ty$0);
       case 6:
         /*<<camlinternalFormat.ml:878:18>>*/ var
         rest$5 = fmtty$0[4],
         prec$1 = fmtty$0[3],
         pad$3 = fmtty$0[2],
          /*<<camlinternalFormat.ml:878:18>>*/ ty_rest$1 =
           fmtty_of_fmt(rest$5),
          /*<<camlinternalFormat.ml:879:18>>*/ prec_ty$1 =
           fmtty_of_precision_fmtty(prec$1, [4, ty_rest$1]);
         /*<<camlinternalFormat.ml:879:18>>*/ return fmtty_of_padding_fmtty
                (pad$3, prec_ty$1);
       case 7:
         /*<<camlinternalFormat.ml:882:18>>*/ var
         rest$6 = fmtty$0[4],
         prec$2 = fmtty$0[3],
         pad$4 = fmtty$0[2],
          /*<<camlinternalFormat.ml:882:18>>*/ ty_rest$2 =
           fmtty_of_fmt(rest$6),
          /*<<camlinternalFormat.ml:883:18>>*/ prec_ty$2 =
           fmtty_of_precision_fmtty(prec$2, [5, ty_rest$2]);
         /*<<camlinternalFormat.ml:883:18>>*/ return fmtty_of_padding_fmtty
                (pad$4, prec_ty$2);
       case 8:
         /*<<camlinternalFormat.ml:886:18>>*/ var
         rest$7 = fmtty$0[4],
         prec$3 = fmtty$0[3],
         pad$5 = fmtty$0[2],
          /*<<camlinternalFormat.ml:886:18>>*/ ty_rest$3 =
           fmtty_of_fmt(rest$7),
          /*<<camlinternalFormat.ml:887:18>>*/ prec_ty$3 =
           fmtty_of_precision_fmtty(prec$3, [6, ty_rest$3]);
         /*<<camlinternalFormat.ml:887:18>>*/ return fmtty_of_padding_fmtty
                (pad$5, prec_ty$3);
       case 9:
        var rest$8 = fmtty$0[2], pad$6 = fmtty$0[1];
         /*<<camlinternalFormat.ml:893:42>>*/ return fmtty_of_padding_fmtty
                (pad$6, [7, fmtty_of_fmt(rest$8)]);
       case 10:
         /*<<camlinternalFormat.ml:904:34>>*/ var
          /*<<camlinternalFormat.ml:904:34>>*/ fmtty$1 = fmtty$0[1],
         fmtty$0 = fmtty$1;
        continue;
       case 11:
         /*<<camlinternalFormat.ml:905:34>>*/ var
          /*<<camlinternalFormat.ml:905:34>>*/ fmtty$2 = fmtty$0[2],
         fmtty$0 = fmtty$2;
        continue;
       case 12:
         /*<<camlinternalFormat.ml:906:34>>*/ var
          /*<<camlinternalFormat.ml:906:34>>*/ fmtty$3 = fmtty$0[2],
         fmtty$0 = fmtty$3;
        continue;
       case 13:
        var rest$9 = fmtty$0[3], ty = fmtty$0[2];
         /*<<camlinternalFormat.ml:900:23>>*/ return [8,
                ty,
                fmtty_of_fmt(rest$9)];
       case 14:
        var rest$10 = fmtty$0[3], ty$0 = fmtty$0[2];
         /*<<camlinternalFormat.ml:902:29>>*/ return [9,
                ty$0,
                ty$0,
                fmtty_of_fmt(rest$10)];
       case 15:
         /*<<camlinternalFormat.ml:894:34>>*/  /*<<camlinternalFormat.ml:894:34>>*/ var
         rest$11 = fmtty$0[1];
         /*<<camlinternalFormat.ml:894:43>>*/ return [10,
                fmtty_of_fmt(rest$11)];
       case 16:
         /*<<camlinternalFormat.ml:895:34>>*/  /*<<camlinternalFormat.ml:895:34>>*/ var
         rest$12 = fmtty$0[1];
         /*<<camlinternalFormat.ml:895:43>>*/ return [11,
                fmtty_of_fmt(rest$12)];
       case 17:
         /*<<camlinternalFormat.ml:912:34>>*/ var
          /*<<camlinternalFormat.ml:912:34>>*/ fmtty$4 = fmtty$0[2],
         fmtty$0 = fmtty$4;
        continue;
       case 18:
         /*<<camlinternalFormat.ml:914:54>>*/ var
         rest$13 = fmtty$0[2],
         formatting_gen = fmtty$0[1],
          /*<<camlinternalFormat.ml:914:54>>*/ _db_ = fmtty_of_fmt(rest$13);
         /*<<camlinternalFormat.ml:856:22>>*/ if(0 === formatting_gen[0])
         var fmt = formatting_gen[1][1], _dc_ = fmtty_of_fmt(fmt);
        else
         var fmt$0 = formatting_gen[1][1], _dc_ = fmtty_of_fmt(fmt$0);
        return caml_call2(CamlinternalFormatBasics[1], _dc_, _db_);
       case 19:
         /*<<camlinternalFormat.ml:897:34>>*/  /*<<camlinternalFormat.ml:897:34>>*/ var
         rest$14 = fmtty$0[1];
         /*<<camlinternalFormat.ml:897:44>>*/ return [13,
                fmtty_of_fmt(rest$14)];
       case 20:
         /*<<camlinternalFormat.ml:908:34>>*/  /*<<camlinternalFormat.ml:908:34>>*/ var
         rest$15 = fmtty$0[3];
         /*<<camlinternalFormat.ml:908:44>>*/ return [1,
                fmtty_of_fmt(rest$15)];
       case 21:
         /*<<camlinternalFormat.ml:909:34>>*/  /*<<camlinternalFormat.ml:909:34>>*/ var
         rest$16 = fmtty$0[2];
         /*<<camlinternalFormat.ml:909:41>>*/ return [2,
                fmtty_of_fmt(rest$16)];
       case 22:
         /*<<camlinternalFormat.ml:910:34>>*/  /*<<camlinternalFormat.ml:910:34>>*/ var
         rest$17 = fmtty$0[1];
         /*<<camlinternalFormat.ml:910:42>>*/ return [0,
                fmtty_of_fmt(rest$17)];
       case 23:
        var fmtty$5 = fmtty$0[2], ign = fmtty$0[1];
         /*<<camlinternalFormat.ml:931:15>>*/ if(typeof ign === "number")
          /*<<camlinternalFormat.ml:931:15>>*/ switch(ign){
           case 0:
            var fmtty$0 = fmtty$5; continue;
           case 1:
            var fmtty$0 = fmtty$5; continue;
           case 2:
             /*<<camlinternalFormat.ml:944:57>>*/ return [14,
                    fmtty_of_fmt(fmtty$5)];
           default: var fmtty$0 = fmtty$5; continue;
         }
         /*<<camlinternalFormat.ml:931:15>>*/ switch(ign[0]){
          case 0:
           var fmtty$0 = fmtty$5; continue;
          case 1:
           var fmtty$0 = fmtty$5; continue;
          case 2:
           var fmtty$0 = fmtty$5; continue;
          case 3:
           var fmtty$0 = fmtty$5; continue;
          case 4:
           var fmtty$0 = fmtty$5; continue;
          case 5:
           var fmtty$0 = fmtty$5; continue;
          case 6:
           var fmtty$0 = fmtty$5; continue;
          case 7:
           var fmtty$0 = fmtty$5; continue;
          case 8:
           var fmtty$0 = fmtty$5; continue;
          case 9:
            /*<<camlinternalFormat.ml:943:39>>*/ var
             /*<<camlinternalFormat.ml:943:39>>*/ fmtty$6 = ign[2],
             /*<<camlinternalFormat.ml:943:58>>*/ _dd_ = fmtty_of_fmt(fmtty$5);
            /*<<camlinternalFormat.ml:943:58>>*/ return  /*<<camlinternalFormat.ml:943:58>>*/ caml_call2
                   (CamlinternalFormatBasics[1], fmtty$6, _dd_);
          case 10:
           var fmtty$0 = fmtty$5; continue;
          default: var fmtty$0 = fmtty$5; continue;
        }
       default:
        var rest$18 = fmtty$0[3], arity = fmtty$0[1];
         /*<<camlinternalFormat.ml:896:56>>*/ return fmtty_of_custom
                (arity, fmtty_of_fmt(rest$18));
     }
    }
    /*<<camlinternalFormat.ml:916:46>>*/ }
   function fmtty_of_precision_fmtty(prec, fmtty){
     /*<<camlinternalFormat.ml:960:20>>*/ return typeof prec === "number"
            ? prec ? [2, fmtty] : fmtty
            : fmtty;
    /*<<camlinternalFormat.ml:963:37>>*/ }
   var
    Type_mismatch =
      [248, cst_CamlinternalFormat_Type_mi, runtime.caml_fresh_oo_id(0)];
   function type_padding(pad, fmtty){
     /*<<camlinternalFormat.ml:977:17>>*/ if(typeof pad === "number")
      /*<<camlinternalFormat.ml:978:21>>*/ return [0, 0, fmtty];
     /*<<camlinternalFormat.ml:977:17>>*/ if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     return [0, [0, padty, w], fmtty];
    }
    if(typeof fmtty !== "number" && 2 === fmtty[0]){
     var rest = fmtty[1], padty$0 = pad[1];
     return [0, [1, padty$0], rest];
    }
     /*<<camlinternalFormat.ml:981:9>>*/ throw  /*<<camlinternalFormat.ml:981:9>>*/ caml_maybe_attach_backtrace
           (Type_mismatch, 1);
    /*<<camlinternalFormat.ml:981:28>>*/ }
   function type_padprec(pad, prec, fmtty){
     /*<<camlinternalFormat.ml:989:34>>*/  /*<<camlinternalFormat.ml:989:34>>*/ var
     match = type_padding(pad, fmtty);
     /*<<camlinternalFormat.ml:989:34>>*/ if(typeof prec !== "number"){
     var rest$1 = match[2], pad$2 = match[1], p = prec[1];
     return [0, pad$2, [0, p], rest$1];
    }
    if(! prec){
     var rest$0 = match[2], pad$1 = match[1];
     return [0, pad$1, 0, rest$0];
    }
    var match$0 = match[2];
    if(typeof match$0 !== "number" && 2 === match$0[0]){
     var rest = match$0[1], pad$0 = match[1];
     return [0, pad$0, 1, rest];
    }
     /*<<camlinternalFormat.ml:996:35>>*/ throw  /*<<camlinternalFormat.ml:996:35>>*/ caml_maybe_attach_backtrace
           (Type_mismatch, 1);
    /*<<camlinternalFormat.ml:996:54>>*/ }
   function type_format(fmt, fmtty){
     /*<<camlinternalFormat.ml:1008:25>>*/  /*<<camlinternalFormat.ml:1008:25>>*/ var
     _da_ = type_format_gen(fmt, fmtty);
     /*<<camlinternalFormat.ml:1008:25>>*/ if(typeof _da_[2] !== "number")
      /*<<camlinternalFormat.ml:1010:9>>*/ throw  /*<<camlinternalFormat.ml:1010:9>>*/ caml_maybe_attach_backtrace
            (Type_mismatch, 1);
     /*<<camlinternalFormat.ml:1009:42>>*/  /*<<camlinternalFormat.ml:1009:42>>*/ var
     fmt$0 = _da_[1];
     /*<<camlinternalFormat.ml:1009:42>>*/ return fmt$0;
    /*<<camlinternalFormat.ml:1010:28>>*/ }
   function type_ignored_param_one(ign, fmt, fmtty){
     /*<<camlinternalFormat.ml:1194:37>>*/ var
      /*<<camlinternalFormat.ml:1194:37>>*/ match =
       type_format_gen(fmt, fmtty),
      /*<<camlinternalFormat.ml:1194:37>>*/ fmtty$0 = match[2],
      /*<<camlinternalFormat.ml:1194:37>>*/ fmt$0 = match[1];
     /*<<camlinternalFormat.ml:1194:37>>*/ return [0,
            [23, ign, fmt$0],
            fmtty$0];
    /*<<camlinternalFormat.ml:1195:51>>*/ }
   function type_format_gen(fmt, fmtty0){
     /*<<camlinternalFormat.ml:1018:19>>*/ if(typeof fmt === "number")
      /*<<camlinternalFormat.ml:1133:33>>*/ return [0, 0, fmtty0];
     /*<<camlinternalFormat.ml:1018:19>>*/ switch(fmt[0]){
      case 0:
       if(typeof fmtty0 !== "number" && 0 === fmtty0[0]){
         /*<<camlinternalFormat.ml:1020:39>>*/ var
         fmtty_rest = fmtty0[1],
         fmt_rest = fmt[1],
          /*<<camlinternalFormat.ml:1020:39>>*/ match =
           type_format_gen(fmt_rest, fmtty_rest),
          /*<<camlinternalFormat.ml:1020:39>>*/ fmtty = match[2],
          /*<<camlinternalFormat.ml:1020:39>>*/ fmt$0 = match[1];
         /*<<camlinternalFormat.ml:1020:39>>*/ return [0, [0, fmt$0], fmtty];
       }
       break;
      case 1:
       if(typeof fmtty0 !== "number" && 0 === fmtty0[0]){
         /*<<camlinternalFormat.ml:1023:39>>*/ var
         fmtty_rest$0 = fmtty0[1],
         fmt_rest$0 = fmt[1],
          /*<<camlinternalFormat.ml:1023:39>>*/ match$0 =
           type_format_gen(fmt_rest$0, fmtty_rest$0),
          /*<<camlinternalFormat.ml:1023:39>>*/ fmtty$0 = match$0[2],
          /*<<camlinternalFormat.ml:1023:39>>*/ fmt$1 = match$0[1];
         /*<<camlinternalFormat.ml:1023:39>>*/ return [0, [1, fmt$1], fmtty$0];
       }
       break;
      case 2:
        /*<<camlinternalFormat.ml:1026:10>>*/ var
        fmt_rest$1 = fmt[2],
        pad = fmt[1],
         /*<<camlinternalFormat.ml:1026:10>>*/ match$1 =
          type_padding(pad, fmtty0),
         /*<<camlinternalFormat.ml:1026:10>>*/ pad$0 = match$1[1],
         /*<<camlinternalFormat.ml:1026:10>>*/ match$2 = match$1[2];
        /*<<camlinternalFormat.ml:1026:10>>*/ if
        (typeof match$2 !== "number" && 1 === match$2[0]){
         /*<<camlinternalFormat.ml:1028:6>>*/ var
          /*<<camlinternalFormat.ml:1028:6>>*/ fmtty_rest$1 = match$2[1],
          /*<<camlinternalFormat.ml:1028:41>>*/ match$3 =
           type_format_gen(fmt_rest$1, fmtty_rest$1),
          /*<<camlinternalFormat.ml:1028:41>>*/ fmtty$1 = match$3[2],
          /*<<camlinternalFormat.ml:1028:41>>*/ fmt$2 = match$3[1];
         /*<<camlinternalFormat.ml:1028:41>>*/ return [0,
                [2, pad$0, fmt$2],
                fmtty$1];
       }
        /*<<camlinternalFormat.ml:1030:34>>*/ throw  /*<<camlinternalFormat.ml:1030:34>>*/ caml_maybe_attach_backtrace
              (Type_mismatch, 1);
      case 3:
        /*<<camlinternalFormat.ml:1033:10>>*/ var
        fmt_rest$2 = fmt[2],
        pad$1 = fmt[1],
         /*<<camlinternalFormat.ml:1033:10>>*/ match$4 =
          type_padding(pad$1, fmtty0),
         /*<<camlinternalFormat.ml:1033:10>>*/ pad$2 = match$4[1],
         /*<<camlinternalFormat.ml:1033:10>>*/ match$5 = match$4[2];
        /*<<camlinternalFormat.ml:1033:10>>*/ if
        (typeof match$5 !== "number" && 1 === match$5[0]){
         /*<<camlinternalFormat.ml:1035:6>>*/ var
          /*<<camlinternalFormat.ml:1035:6>>*/ fmtty_rest$2 = match$5[1],
          /*<<camlinternalFormat.ml:1035:41>>*/ match$6 =
           type_format_gen(fmt_rest$2, fmtty_rest$2),
          /*<<camlinternalFormat.ml:1035:41>>*/ fmtty$2 = match$6[2],
          /*<<camlinternalFormat.ml:1035:41>>*/ fmt$3 = match$6[1];
         /*<<camlinternalFormat.ml:1035:41>>*/ return [0,
                [3, pad$2, fmt$3],
                fmtty$2];
       }
        /*<<camlinternalFormat.ml:1037:34>>*/ throw  /*<<camlinternalFormat.ml:1037:34>>*/ caml_maybe_attach_backtrace
              (Type_mismatch, 1);
      case 4:
        /*<<camlinternalFormat.ml:1040:10>>*/ var
        fmt_rest$3 = fmt[4],
        prec = fmt[3],
        pad$3 = fmt[2],
        iconv = fmt[1],
         /*<<camlinternalFormat.ml:1040:10>>*/ match$7 =
          type_padprec(pad$3, prec, fmtty0),
         /*<<camlinternalFormat.ml:1040:10>>*/ pad$4 = match$7[1],
         /*<<camlinternalFormat.ml:1040:10>>*/ match$8 = match$7[3];
        /*<<camlinternalFormat.ml:1040:10>>*/ if
        (typeof match$8 !== "number" && 2 === match$8[0]){
         /*<<camlinternalFormat.ml:1042:41>>*/ var
         fmtty_rest$3 = match$8[1],
         prec$0 = match$7[2],
          /*<<camlinternalFormat.ml:1042:41>>*/ match$9 =
           type_format_gen(fmt_rest$3, fmtty_rest$3),
          /*<<camlinternalFormat.ml:1042:41>>*/ fmtty$3 = match$9[2],
          /*<<camlinternalFormat.ml:1042:41>>*/ fmt$4 = match$9[1];
         /*<<camlinternalFormat.ml:1042:41>>*/ return [0,
                [4, iconv, pad$4, prec$0, fmt$4],
                fmtty$3];
       }
        /*<<camlinternalFormat.ml:1044:37>>*/ throw  /*<<camlinternalFormat.ml:1044:37>>*/ caml_maybe_attach_backtrace
              (Type_mismatch, 1);
      case 5:
        /*<<camlinternalFormat.ml:1047:10>>*/ var
        fmt_rest$4 = fmt[4],
        prec$1 = fmt[3],
        pad$5 = fmt[2],
        iconv$0 = fmt[1],
         /*<<camlinternalFormat.ml:1047:10>>*/ match$10 =
          type_padprec(pad$5, prec$1, fmtty0),
         /*<<camlinternalFormat.ml:1047:10>>*/ pad$6 = match$10[1],
         /*<<camlinternalFormat.ml:1047:10>>*/ match$11 = match$10[3];
        /*<<camlinternalFormat.ml:1047:10>>*/ if
        (typeof match$11 !== "number" && 3 === match$11[0]){
         /*<<camlinternalFormat.ml:1049:41>>*/ var
         fmtty_rest$4 = match$11[1],
         prec$2 = match$10[2],
          /*<<camlinternalFormat.ml:1049:41>>*/ match$12 =
           type_format_gen(fmt_rest$4, fmtty_rest$4),
          /*<<camlinternalFormat.ml:1049:41>>*/ fmtty$4 = match$12[2],
          /*<<camlinternalFormat.ml:1049:41>>*/ fmt$5 = match$12[1];
         /*<<camlinternalFormat.ml:1049:41>>*/ return [0,
                [5, iconv$0, pad$6, prec$2, fmt$5],
                fmtty$4];
       }
        /*<<camlinternalFormat.ml:1051:37>>*/ throw  /*<<camlinternalFormat.ml:1051:37>>*/ caml_maybe_attach_backtrace
              (Type_mismatch, 1);
      case 6:
        /*<<camlinternalFormat.ml:1054:10>>*/ var
        fmt_rest$5 = fmt[4],
        prec$3 = fmt[3],
        pad$7 = fmt[2],
        iconv$1 = fmt[1],
         /*<<camlinternalFormat.ml:1054:10>>*/ match$13 =
          type_padprec(pad$7, prec$3, fmtty0),
         /*<<camlinternalFormat.ml:1054:10>>*/ pad$8 = match$13[1],
         /*<<camlinternalFormat.ml:1054:10>>*/ match$14 = match$13[3];
        /*<<camlinternalFormat.ml:1054:10>>*/ if
        (typeof match$14 !== "number" && 4 === match$14[0]){
         /*<<camlinternalFormat.ml:1056:41>>*/ var
         fmtty_rest$5 = match$14[1],
         prec$4 = match$13[2],
          /*<<camlinternalFormat.ml:1056:41>>*/ match$15 =
           type_format_gen(fmt_rest$5, fmtty_rest$5),
          /*<<camlinternalFormat.ml:1056:41>>*/ fmtty$5 = match$15[2],
          /*<<camlinternalFormat.ml:1056:41>>*/ fmt$6 = match$15[1];
         /*<<camlinternalFormat.ml:1056:41>>*/ return [0,
                [6, iconv$1, pad$8, prec$4, fmt$6],
                fmtty$5];
       }
        /*<<camlinternalFormat.ml:1058:37>>*/ throw  /*<<camlinternalFormat.ml:1058:37>>*/ caml_maybe_attach_backtrace
              (Type_mismatch, 1);
      case 7:
        /*<<camlinternalFormat.ml:1061:10>>*/ var
        fmt_rest$6 = fmt[4],
        prec$5 = fmt[3],
        pad$9 = fmt[2],
        iconv$2 = fmt[1],
         /*<<camlinternalFormat.ml:1061:10>>*/ match$16 =
          type_padprec(pad$9, prec$5, fmtty0),
         /*<<camlinternalFormat.ml:1061:10>>*/ pad$10 = match$16[1],
         /*<<camlinternalFormat.ml:1061:10>>*/ match$17 = match$16[3];
        /*<<camlinternalFormat.ml:1061:10>>*/ if
        (typeof match$17 !== "number" && 5 === match$17[0]){
         /*<<camlinternalFormat.ml:1063:41>>*/ var
         fmtty_rest$6 = match$17[1],
         prec$6 = match$16[2],
          /*<<camlinternalFormat.ml:1063:41>>*/ match$18 =
           type_format_gen(fmt_rest$6, fmtty_rest$6),
          /*<<camlinternalFormat.ml:1063:41>>*/ fmtty$6 = match$18[2],
          /*<<camlinternalFormat.ml:1063:41>>*/ fmt$7 = match$18[1];
         /*<<camlinternalFormat.ml:1063:41>>*/ return [0,
                [7, iconv$2, pad$10, prec$6, fmt$7],
                fmtty$6];
       }
        /*<<camlinternalFormat.ml:1065:37>>*/ throw  /*<<camlinternalFormat.ml:1065:37>>*/ caml_maybe_attach_backtrace
              (Type_mismatch, 1);
      case 8:
        /*<<camlinternalFormat.ml:1068:10>>*/ var
        fmt_rest$7 = fmt[4],
        prec$7 = fmt[3],
        pad$11 = fmt[2],
        fconv = fmt[1],
         /*<<camlinternalFormat.ml:1068:10>>*/ match$19 =
          type_padprec(pad$11, prec$7, fmtty0),
         /*<<camlinternalFormat.ml:1068:10>>*/ pad$12 = match$19[1],
         /*<<camlinternalFormat.ml:1068:10>>*/ match$20 = match$19[3];
        /*<<camlinternalFormat.ml:1068:10>>*/ if
        (typeof match$20 !== "number" && 6 === match$20[0]){
         /*<<camlinternalFormat.ml:1070:41>>*/ var
         fmtty_rest$7 = match$20[1],
         prec$8 = match$19[2],
          /*<<camlinternalFormat.ml:1070:41>>*/ match$21 =
           type_format_gen(fmt_rest$7, fmtty_rest$7),
          /*<<camlinternalFormat.ml:1070:41>>*/ fmtty$7 = match$21[2],
          /*<<camlinternalFormat.ml:1070:41>>*/ fmt$8 = match$21[1];
         /*<<camlinternalFormat.ml:1070:41>>*/ return [0,
                [8, fconv, pad$12, prec$8, fmt$8],
                fmtty$7];
       }
        /*<<camlinternalFormat.ml:1072:37>>*/ throw  /*<<camlinternalFormat.ml:1072:37>>*/ caml_maybe_attach_backtrace
              (Type_mismatch, 1);
      case 9:
        /*<<camlinternalFormat.ml:1075:10>>*/ var
        fmt_rest$8 = fmt[2],
        pad$13 = fmt[1],
         /*<<camlinternalFormat.ml:1075:10>>*/ match$22 =
          type_padding(pad$13, fmtty0),
         /*<<camlinternalFormat.ml:1075:10>>*/ pad$14 = match$22[1],
         /*<<camlinternalFormat.ml:1075:10>>*/ match$23 = match$22[2];
        /*<<camlinternalFormat.ml:1075:10>>*/ if
        (typeof match$23 !== "number" && 7 === match$23[0]){
         /*<<camlinternalFormat.ml:1077:6>>*/ var
          /*<<camlinternalFormat.ml:1077:6>>*/ fmtty_rest$8 = match$23[1],
          /*<<camlinternalFormat.ml:1077:41>>*/ match$24 =
           type_format_gen(fmt_rest$8, fmtty_rest$8),
          /*<<camlinternalFormat.ml:1077:41>>*/ fmtty$8 = match$24[2],
          /*<<camlinternalFormat.ml:1077:41>>*/ fmt$9 = match$24[1];
         /*<<camlinternalFormat.ml:1077:41>>*/ return [0,
                [9, pad$14, fmt$9],
                fmtty$8];
       }
        /*<<camlinternalFormat.ml:1079:34>>*/ throw  /*<<camlinternalFormat.ml:1079:34>>*/ caml_maybe_attach_backtrace
              (Type_mismatch, 1);
      case 10:
        /*<<camlinternalFormat.ml:1082:39>>*/ var
        fmt_rest$9 = fmt[1],
         /*<<camlinternalFormat.ml:1082:39>>*/ match$25 =
          type_format_gen(fmt_rest$9, fmtty0),
         /*<<camlinternalFormat.ml:1082:39>>*/ fmtty$9 = match$25[2],
         /*<<camlinternalFormat.ml:1082:39>>*/ fmt$10 = match$25[1];
        /*<<camlinternalFormat.ml:1082:39>>*/ return [0,
               [10, fmt$10],
               fmtty$9];
      case 11:
        /*<<camlinternalFormat.ml:1086:39>>*/ var
        fmt_rest$10 = fmt[2],
        str = fmt[1],
         /*<<camlinternalFormat.ml:1086:39>>*/ match$26 =
          type_format_gen(fmt_rest$10, fmtty0),
         /*<<camlinternalFormat.ml:1086:39>>*/ fmtty$10 = match$26[2],
         /*<<camlinternalFormat.ml:1086:39>>*/ fmt$11 = match$26[1];
        /*<<camlinternalFormat.ml:1086:39>>*/ return [0,
               [11, str, fmt$11],
               fmtty$10];
      case 12:
        /*<<camlinternalFormat.ml:1089:39>>*/ var
        fmt_rest$11 = fmt[2],
        chr = fmt[1],
         /*<<camlinternalFormat.ml:1089:39>>*/ match$27 =
          type_format_gen(fmt_rest$11, fmtty0),
         /*<<camlinternalFormat.ml:1089:39>>*/ fmtty$11 = match$27[2],
         /*<<camlinternalFormat.ml:1089:39>>*/ fmt$12 = match$27[1];
        /*<<camlinternalFormat.ml:1089:39>>*/ return [0,
               [12, chr, fmt$12],
               fmtty$11];
      case 13:
       if(typeof fmtty0 !== "number" && 8 === fmtty0[0]){
        var
         fmtty_rest$9 = fmtty0[2],
         sub_fmtty = fmtty0[1],
         fmt_rest$12 = fmt[3],
         sub_fmtty$0 = fmt[2],
         pad_opt = fmt[1];
         /*<<camlinternalFormat.ml:1094:7>>*/ if
         ( /*<<camlinternalFormat.ml:1094:7>>*/ caml_notequal
           ([0, sub_fmtty$0], [0, sub_fmtty]))
          /*<<camlinternalFormat.ml:1094:56>>*/ throw  /*<<camlinternalFormat.ml:1094:56>>*/ caml_maybe_attach_backtrace
                (Type_mismatch, 1);
         /*<<camlinternalFormat.ml:1095:39>>*/ var
          /*<<camlinternalFormat.ml:1095:39>>*/ match$28 =
           type_format_gen(fmt_rest$12, fmtty_rest$9),
          /*<<camlinternalFormat.ml:1095:39>>*/ fmtty$12 = match$28[2],
          /*<<camlinternalFormat.ml:1095:39>>*/ fmt$13 = match$28[1];
         /*<<camlinternalFormat.ml:1095:39>>*/ return [0,
                [13, pad_opt, sub_fmtty, fmt$13],
                fmtty$12];
       }
       break;
      case 14:
       if(typeof fmtty0 !== "number" && 9 === fmtty0[0]){
         /*<<camlinternalFormat.ml:1099:52>>*/ var
         fmtty_rest$10 = fmtty0[3],
         sub_fmtty1 = fmtty0[1],
         fmt_rest$13 = fmt[3],
         sub_fmtty$1 = fmt[2],
         pad_opt$0 = fmt[1],
          /*<<camlinternalFormat.ml:1099:52>>*/ _c__ =
           [0,
             /*<<camlinternalFormat.ml:1099:52>>*/ caml_call1
             (CamlinternalFormatBasics[2], sub_fmtty1)];
         /*<<camlinternalFormat.ml:1099:7>>*/ if
         ( /*<<camlinternalFormat.ml:1099:7>>*/ caml_notequal
           ([0,
              /*<<camlinternalFormat.ml:1099:17>>*/ caml_call1
              (CamlinternalFormatBasics[2], sub_fmtty$1)],
            _c__))
          /*<<camlinternalFormat.ml:1100:6>>*/ throw  /*<<camlinternalFormat.ml:1100:6>>*/ caml_maybe_attach_backtrace
                (Type_mismatch, 1);
         /*<<camlinternalFormat.ml:1102:6>>*/ var
          /*<<camlinternalFormat.ml:1102:6>>*/ match$29 =
           type_format_gen
            (fmt_rest$13,
              /*<<camlinternalFormat.ml:1102:31>>*/ caml_call1
              (CamlinternalFormatBasics[2], fmtty_rest$10)),
          /*<<camlinternalFormat.ml:1102:6>>*/ fmtty$13 = match$29[2],
          /*<<camlinternalFormat.ml:1102:6>>*/ fmt$14 = match$29[1];
         /*<<camlinternalFormat.ml:1102:6>>*/ return [0,
                [14, pad_opt$0, sub_fmtty1, fmt$14],
                fmtty$13];
       }
       break;
      case 15:
       if(typeof fmtty0 !== "number" && 10 === fmtty0[0]){
         /*<<camlinternalFormat.ml:1107:39>>*/ var
         fmtty_rest$11 = fmtty0[1],
         fmt_rest$14 = fmt[1],
          /*<<camlinternalFormat.ml:1107:39>>*/ match$30 =
           type_format_gen(fmt_rest$14, fmtty_rest$11),
          /*<<camlinternalFormat.ml:1107:39>>*/ fmtty$14 = match$30[2],
          /*<<camlinternalFormat.ml:1107:39>>*/ fmt$15 = match$30[1];
         /*<<camlinternalFormat.ml:1107:39>>*/ return [0,
                [15, fmt$15],
                fmtty$14];
       }
       break;
      case 16:
       if(typeof fmtty0 !== "number" && 11 === fmtty0[0]){
         /*<<camlinternalFormat.ml:1110:39>>*/ var
         fmtty_rest$12 = fmtty0[1],
         fmt_rest$15 = fmt[1],
          /*<<camlinternalFormat.ml:1110:39>>*/ match$31 =
           type_format_gen(fmt_rest$15, fmtty_rest$12),
          /*<<camlinternalFormat.ml:1110:39>>*/ fmtty$15 = match$31[2],
          /*<<camlinternalFormat.ml:1110:39>>*/ fmt$16 = match$31[1];
         /*<<camlinternalFormat.ml:1110:39>>*/ return [0,
                [16, fmt$16],
                fmtty$15];
       }
       break;
      case 17:
        /*<<camlinternalFormat.ml:1115:39>>*/ var
        fmt_rest$16 = fmt[2],
        formatting_lit = fmt[1],
         /*<<camlinternalFormat.ml:1115:39>>*/ match$32 =
          type_format_gen(fmt_rest$16, fmtty0),
         /*<<camlinternalFormat.ml:1115:39>>*/ fmtty$16 = match$32[2],
         /*<<camlinternalFormat.ml:1115:39>>*/ fmt$17 = match$32[1];
        /*<<camlinternalFormat.ml:1115:39>>*/ return [0,
               [17, formatting_lit, fmt$17],
               fmtty$16];
      case 18:
       var fmt_rest$17 = fmt[2], formatting_gen = fmt[1];
        /*<<camlinternalFormat.ml:1142:34>>*/ if(0 === formatting_gen[0]){
         /*<<camlinternalFormat.ml:1144:39>>*/ var
         match$36 = formatting_gen[1],
         str$0 = match$36[2],
         fmt1 = match$36[1],
          /*<<camlinternalFormat.ml:1144:39>>*/ match$37 =
           type_format_gen(fmt1, fmtty0),
          /*<<camlinternalFormat.ml:1144:39>>*/ fmtty2 = match$37[2],
          /*<<camlinternalFormat.ml:1144:39>>*/ fmt2 = match$37[1],
          /*<<camlinternalFormat.ml:1145:39>>*/ match$38 =
           type_format_gen(fmt_rest$17, fmtty2),
          /*<<camlinternalFormat.ml:1145:39>>*/ fmtty3 = match$38[2],
          /*<<camlinternalFormat.ml:1145:39>>*/ fmt3 = match$38[1];
         /*<<camlinternalFormat.ml:1145:39>>*/ return [0,
                [18, [0, [0, fmt2, str$0]], fmt3],
                fmtty3];
       }
        /*<<camlinternalFormat.ml:1148:39>>*/ var
        match$39 = formatting_gen[1],
        str$1 = match$39[2],
        fmt1$0 = match$39[1],
         /*<<camlinternalFormat.ml:1148:39>>*/ match$40 =
          type_format_gen(fmt1$0, fmtty0),
         /*<<camlinternalFormat.ml:1148:39>>*/ fmtty2$0 = match$40[2],
         /*<<camlinternalFormat.ml:1148:39>>*/ fmt2$0 = match$40[1],
         /*<<camlinternalFormat.ml:1149:39>>*/ match$41 =
          type_format_gen(fmt_rest$17, fmtty2$0),
         /*<<camlinternalFormat.ml:1149:39>>*/ fmtty3$0 = match$41[2],
         /*<<camlinternalFormat.ml:1149:39>>*/ fmt3$0 = match$41[1];
        /*<<camlinternalFormat.ml:1149:39>>*/ return [0,
               [18, [1, [0, fmt2$0, str$1]], fmt3$0],
               fmtty3$0];
      case 19:
       if(typeof fmtty0 !== "number" && 13 === fmtty0[0]){
         /*<<camlinternalFormat.ml:1122:39>>*/ var
         fmtty_rest$13 = fmtty0[1],
         fmt_rest$18 = fmt[1],
          /*<<camlinternalFormat.ml:1122:39>>*/ match$33 =
           type_format_gen(fmt_rest$18, fmtty_rest$13),
          /*<<camlinternalFormat.ml:1122:39>>*/ fmtty$17 = match$33[2],
          /*<<camlinternalFormat.ml:1122:39>>*/ fmt$18 = match$33[1];
         /*<<camlinternalFormat.ml:1122:39>>*/ return [0,
                [19, fmt$18],
                fmtty$17];
       }
       break;
      case 20:
       if(typeof fmtty0 !== "number" && 1 === fmtty0[0]){
         /*<<camlinternalFormat.ml:1125:39>>*/ var
         fmtty_rest$14 = fmtty0[1],
         fmt_rest$19 = fmt[3],
         char_set = fmt[2],
         width_opt = fmt[1],
          /*<<camlinternalFormat.ml:1125:39>>*/ match$34 =
           type_format_gen(fmt_rest$19, fmtty_rest$14),
          /*<<camlinternalFormat.ml:1125:39>>*/ fmtty$18 = match$34[2],
          /*<<camlinternalFormat.ml:1125:39>>*/ fmt$19 = match$34[1];
         /*<<camlinternalFormat.ml:1125:39>>*/ return [0,
                [20, width_opt, char_set, fmt$19],
                fmtty$18];
       }
       break;
      case 21:
       if(typeof fmtty0 !== "number" && 2 === fmtty0[0]){
         /*<<camlinternalFormat.ml:1128:39>>*/ var
         fmtty_rest$15 = fmtty0[1],
         fmt_rest$20 = fmt[2],
         counter = fmt[1],
          /*<<camlinternalFormat.ml:1128:39>>*/ match$35 =
           type_format_gen(fmt_rest$20, fmtty_rest$15),
          /*<<camlinternalFormat.ml:1128:39>>*/ fmtty$19 = match$35[2],
          /*<<camlinternalFormat.ml:1128:39>>*/ fmt$20 = match$35[1];
         /*<<camlinternalFormat.ml:1128:39>>*/ return [0,
                [21, counter, fmt$20],
                fmtty$19];
       }
       break;
      case 23:
       var rest = fmt[2], ign = fmt[1];
        /*<<camlinternalFormat.ml:1158:21>>*/ if(typeof ign !== "number")
         /*<<camlinternalFormat.ml:1158:21>>*/ switch(ign[0]){
          case 0:
            /*<<camlinternalFormat.ml:1161:42>>*/ return type_ignored_param_one
                   (ign, rest, fmtty0);
          case 1:
            /*<<camlinternalFormat.ml:1162:42>>*/ return type_ignored_param_one
                   (ign, rest, fmtty0);
          case 2:
            /*<<camlinternalFormat.ml:1163:42>>*/ return type_ignored_param_one
                   (ign, rest, fmtty0);
          case 3:
            /*<<camlinternalFormat.ml:1164:42>>*/ return type_ignored_param_one
                   (ign, rest, fmtty0);
          case 4:
            /*<<camlinternalFormat.ml:1165:42>>*/ return type_ignored_param_one
                   (ign, rest, fmtty0);
          case 5:
            /*<<camlinternalFormat.ml:1166:42>>*/ return type_ignored_param_one
                   (ign, rest, fmtty0);
          case 6:
            /*<<camlinternalFormat.ml:1167:42>>*/ return type_ignored_param_one
                   (ign, rest, fmtty0);
          case 7:
            /*<<camlinternalFormat.ml:1168:42>>*/ return type_ignored_param_one
                   (ign, rest, fmtty0);
          case 8:
           var sub_fmtty$2 = ign[2], pad_opt$1 = ign[1];
           return type_ignored_param_one
                   ([8, pad_opt$1, sub_fmtty$2], rest, fmtty0);
          case 9:
            /*<<camlinternalFormat.ml:1176:6>>*/ var
            sub_fmtty$3 = ign[2],
            pad_opt$2 = ign[1],
             /*<<camlinternalFormat.ml:1176:6>>*/ _c$_ =
              type_ignored_format_substituti(sub_fmtty$3, rest, fmtty0),
             /*<<camlinternalFormat.ml:1176:6>>*/ match$43 = _c$_[2],
             /*<<camlinternalFormat.ml:1176:6>>*/ fmtty$21 = match$43[2],
             /*<<camlinternalFormat.ml:1176:6>>*/ fmt$22 = match$43[1],
             /*<<camlinternalFormat.ml:1176:6>>*/ sub_fmtty$4 = _c$_[1];
            /*<<camlinternalFormat.ml:1176:6>>*/ return [0,
                   [23, [9, pad_opt$2, sub_fmtty$4], fmt$22],
                   fmtty$21];
          case 10:
            /*<<camlinternalFormat.ml:1169:42>>*/ return type_ignored_param_one
                   (ign, rest, fmtty0);
          default:
            /*<<camlinternalFormat.ml:1170:42>>*/ return type_ignored_param_one
                   (ign, rest, fmtty0);
        }
        /*<<camlinternalFormat.ml:1158:21>>*/ switch(ign){
         case 0:
           /*<<camlinternalFormat.ml:1159:42>>*/ return type_ignored_param_one
                  (ign, rest, fmtty0);
         case 1:
           /*<<camlinternalFormat.ml:1160:42>>*/ return type_ignored_param_one
                  (ign, rest, fmtty0);
         case 2:
           /*<<camlinternalFormat.ml:1180:22>>*/ if
           (typeof fmtty0 !== "number" && 14 === fmtty0[0]){
            /*<<camlinternalFormat.ml:1183:6>>*/ var
             /*<<camlinternalFormat.ml:1183:6>>*/ fmtty_rest$16 = fmtty0[1],
             /*<<camlinternalFormat.ml:1183:41>>*/ match$42 =
              type_format_gen(rest, fmtty_rest$16),
             /*<<camlinternalFormat.ml:1183:41>>*/ fmtty$20 = match$42[2],
             /*<<camlinternalFormat.ml:1183:41>>*/ fmt$21 = match$42[1];
            /*<<camlinternalFormat.ml:1183:41>>*/ return [0,
                   [23, 2, fmt$21],
                   fmtty$20];
          }
           /*<<camlinternalFormat.ml:1185:11>>*/ throw  /*<<camlinternalFormat.ml:1185:11>>*/ caml_maybe_attach_backtrace
                 (Type_mismatch, 1);
         default:
           /*<<camlinternalFormat.ml:1171:42>>*/ return type_ignored_param_one
                  (ign, rest, fmtty0);
       }
    }
     /*<<camlinternalFormat.ml:1135:9>>*/ throw  /*<<camlinternalFormat.ml:1135:9>>*/ caml_maybe_attach_backtrace
           (Type_mismatch, 1);
    /*<<camlinternalFormat.ml:1135:28>>*/ }
   function type_ignored_format_substituti(sub_fmtty, fmt, fmtty){
     /*<<camlinternalFormat.ml:1202:27>>*/ if(typeof sub_fmtty === "number")
      /*<<camlinternalFormat.ml:1276:33>>*/ return [0,
             0,
             type_format_gen(fmt, fmtty)];
     /*<<camlinternalFormat.ml:1202:27>>*/ switch(sub_fmtty[0]){
      case 0:
       if(typeof fmtty !== "number" && 0 === fmtty[0]){
         /*<<camlinternalFormat.ml:1205:6>>*/ var
         fmtty_rest = fmtty[1],
         sub_fmtty_rest = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1205:6>>*/ match =
           type_ignored_format_substituti(sub_fmtty_rest, fmt, fmtty_rest),
          /*<<camlinternalFormat.ml:1205:6>>*/ fmt$0 = match[2],
          /*<<camlinternalFormat.ml:1205:6>>*/ sub_fmtty_rest$0 = match[1];
         /*<<camlinternalFormat.ml:1205:6>>*/ return [0,
                [0, sub_fmtty_rest$0],
                fmt$0];
       }
       break;
      case 1:
       if(typeof fmtty !== "number" && 1 === fmtty[0]){
         /*<<camlinternalFormat.ml:1209:6>>*/ var
         fmtty_rest$0 = fmtty[1],
         sub_fmtty_rest$1 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1209:6>>*/ match$0 =
           type_ignored_format_substituti(sub_fmtty_rest$1, fmt, fmtty_rest$0),
          /*<<camlinternalFormat.ml:1209:6>>*/ fmt$1 = match$0[2],
          /*<<camlinternalFormat.ml:1209:6>>*/ sub_fmtty_rest$2 = match$0[1];
         /*<<camlinternalFormat.ml:1209:6>>*/ return [0,
                [1, sub_fmtty_rest$2],
                fmt$1];
       }
       break;
      case 2:
       if(typeof fmtty !== "number" && 2 === fmtty[0]){
         /*<<camlinternalFormat.ml:1213:6>>*/ var
         fmtty_rest$1 = fmtty[1],
         sub_fmtty_rest$3 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1213:6>>*/ match$1 =
           type_ignored_format_substituti(sub_fmtty_rest$3, fmt, fmtty_rest$1),
          /*<<camlinternalFormat.ml:1213:6>>*/ fmt$2 = match$1[2],
          /*<<camlinternalFormat.ml:1213:6>>*/ sub_fmtty_rest$4 = match$1[1];
         /*<<camlinternalFormat.ml:1213:6>>*/ return [0,
                [2, sub_fmtty_rest$4],
                fmt$2];
       }
       break;
      case 3:
       if(typeof fmtty !== "number" && 3 === fmtty[0]){
         /*<<camlinternalFormat.ml:1217:6>>*/ var
         fmtty_rest$2 = fmtty[1],
         sub_fmtty_rest$5 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1217:6>>*/ match$2 =
           type_ignored_format_substituti(sub_fmtty_rest$5, fmt, fmtty_rest$2),
          /*<<camlinternalFormat.ml:1217:6>>*/ fmt$3 = match$2[2],
          /*<<camlinternalFormat.ml:1217:6>>*/ sub_fmtty_rest$6 = match$2[1];
         /*<<camlinternalFormat.ml:1217:6>>*/ return [0,
                [3, sub_fmtty_rest$6],
                fmt$3];
       }
       break;
      case 4:
       if(typeof fmtty !== "number" && 4 === fmtty[0]){
         /*<<camlinternalFormat.ml:1221:6>>*/ var
         fmtty_rest$3 = fmtty[1],
         sub_fmtty_rest$7 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1221:6>>*/ match$3 =
           type_ignored_format_substituti(sub_fmtty_rest$7, fmt, fmtty_rest$3),
          /*<<camlinternalFormat.ml:1221:6>>*/ fmt$4 = match$3[2],
          /*<<camlinternalFormat.ml:1221:6>>*/ sub_fmtty_rest$8 = match$3[1];
         /*<<camlinternalFormat.ml:1221:6>>*/ return [0,
                [4, sub_fmtty_rest$8],
                fmt$4];
       }
       break;
      case 5:
       if(typeof fmtty !== "number" && 5 === fmtty[0]){
         /*<<camlinternalFormat.ml:1225:6>>*/ var
         fmtty_rest$4 = fmtty[1],
         sub_fmtty_rest$9 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1225:6>>*/ match$4 =
           type_ignored_format_substituti(sub_fmtty_rest$9, fmt, fmtty_rest$4),
          /*<<camlinternalFormat.ml:1225:6>>*/ fmt$5 = match$4[2],
          /*<<camlinternalFormat.ml:1225:6>>*/ sub_fmtty_rest$10 = match$4[1];
         /*<<camlinternalFormat.ml:1225:6>>*/ return [0,
                [5, sub_fmtty_rest$10],
                fmt$5];
       }
       break;
      case 6:
       if(typeof fmtty !== "number" && 6 === fmtty[0]){
         /*<<camlinternalFormat.ml:1229:6>>*/ var
         fmtty_rest$5 = fmtty[1],
         sub_fmtty_rest$11 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1229:6>>*/ match$5 =
           type_ignored_format_substituti
            (sub_fmtty_rest$11, fmt, fmtty_rest$5),
          /*<<camlinternalFormat.ml:1229:6>>*/ fmt$6 = match$5[2],
          /*<<camlinternalFormat.ml:1229:6>>*/ sub_fmtty_rest$12 = match$5[1];
         /*<<camlinternalFormat.ml:1229:6>>*/ return [0,
                [6, sub_fmtty_rest$12],
                fmt$6];
       }
       break;
      case 7:
       if(typeof fmtty !== "number" && 7 === fmtty[0]){
         /*<<camlinternalFormat.ml:1233:6>>*/ var
         fmtty_rest$6 = fmtty[1],
         sub_fmtty_rest$13 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1233:6>>*/ match$6 =
           type_ignored_format_substituti
            (sub_fmtty_rest$13, fmt, fmtty_rest$6),
          /*<<camlinternalFormat.ml:1233:6>>*/ fmt$7 = match$6[2],
          /*<<camlinternalFormat.ml:1233:6>>*/ sub_fmtty_rest$14 = match$6[1];
         /*<<camlinternalFormat.ml:1233:6>>*/ return [0,
                [7, sub_fmtty_rest$14],
                fmt$7];
       }
       break;
      case 8:
       if(typeof fmtty !== "number" && 8 === fmtty[0]){
        var
         fmtty_rest$7 = fmtty[2],
         sub2_fmtty = fmtty[1],
         sub_fmtty_rest$15 = sub_fmtty[2],
         sub2_fmtty$0 = sub_fmtty[1];
         /*<<camlinternalFormat.ml:1254:7>>*/ if
         ( /*<<camlinternalFormat.ml:1254:7>>*/ caml_notequal
           ([0, sub2_fmtty$0], [0, sub2_fmtty]))
          /*<<camlinternalFormat.ml:1254:58>>*/ throw  /*<<camlinternalFormat.ml:1254:58>>*/ caml_maybe_attach_backtrace
                (Type_mismatch, 1);
         /*<<camlinternalFormat.ml:1256:6>>*/ var
          /*<<camlinternalFormat.ml:1256:6>>*/ match$7 =
           type_ignored_format_substituti
            (sub_fmtty_rest$15, fmt, fmtty_rest$7),
          /*<<camlinternalFormat.ml:1256:6>>*/ fmt$8 = match$7[2],
          /*<<camlinternalFormat.ml:1256:6>>*/ sub_fmtty_rest$16 = match$7[1];
         /*<<camlinternalFormat.ml:1256:6>>*/ return [0,
                [8, sub2_fmtty, sub_fmtty_rest$16],
                fmt$8];
       }
       break;
      case 9:
       if(typeof fmtty !== "number" && 9 === fmtty[0]){
         /*<<camlinternalFormat.ml:1261:53>>*/ var
         fmtty_rest$8 = fmtty[3],
         sub2_fmtty$1 = fmtty[2],
         sub1_fmtty = fmtty[1],
         sub_fmtty_rest$17 = sub_fmtty[3],
         sub2_fmtty$2 = sub_fmtty[2],
         sub1_fmtty$0 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1261:53>>*/ _c8_ =
           [0,
             /*<<camlinternalFormat.ml:1261:53>>*/ caml_call1
             (CamlinternalFormatBasics[2], sub1_fmtty)];
         /*<<camlinternalFormat.ml:1261:7>>*/ if
         ( /*<<camlinternalFormat.ml:1261:7>>*/ caml_notequal
           ([0,
              /*<<camlinternalFormat.ml:1261:17>>*/ caml_call1
              (CamlinternalFormatBasics[2], sub1_fmtty$0)],
            _c8_))
          /*<<camlinternalFormat.ml:1262:9>>*/ throw  /*<<camlinternalFormat.ml:1262:9>>*/ caml_maybe_attach_backtrace
                (Type_mismatch, 1);
         /*<<camlinternalFormat.ml:1263:53>>*/  /*<<camlinternalFormat.ml:1263:53>>*/ var
         _c9_ =
           [0,
             /*<<camlinternalFormat.ml:1263:53>>*/ caml_call1
             (CamlinternalFormatBasics[2], sub2_fmtty$1)];
         /*<<camlinternalFormat.ml:1263:7>>*/ if
         ( /*<<camlinternalFormat.ml:1263:7>>*/ caml_notequal
           ([0,
              /*<<camlinternalFormat.ml:1263:17>>*/ caml_call1
              (CamlinternalFormatBasics[2], sub2_fmtty$2)],
            _c9_))
          /*<<camlinternalFormat.ml:1264:9>>*/ throw  /*<<camlinternalFormat.ml:1264:9>>*/ caml_maybe_attach_backtrace
                (Type_mismatch, 1);
         /*<<camlinternalFormat.ml:1265:21>>*/ var
          /*<<camlinternalFormat.ml:1265:21>>*/ sub_fmtty$0 =
           trans(symm(sub1_fmtty), sub2_fmtty$1),
          /*<<camlinternalFormat.ml:1266:23>>*/ match$8 =
           fmtty_rel_det(sub_fmtty$0),
          /*<<camlinternalFormat.ml:1266:23>>*/ f4 = match$8[4],
          /*<<camlinternalFormat.ml:1266:23>>*/ f2 = match$8[2];
         /*<<camlinternalFormat.ml:1267:15>>*/  /*<<camlinternalFormat.ml:1267:15>>*/ caml_call1
         (f2, 0);
         /*<<camlinternalFormat.ml:1268:15>>*/  /*<<camlinternalFormat.ml:1268:15>>*/ caml_call1
         (f4, 0);
         /*<<camlinternalFormat.ml:1270:6>>*/ var
          /*<<camlinternalFormat.ml:1270:6>>*/ match$9 =
           type_ignored_format_substituti
            ( /*<<camlinternalFormat.ml:1270:39>>*/ caml_call1
              (CamlinternalFormatBasics[2], sub_fmtty_rest$17),
             fmt,
             fmtty_rest$8),
          /*<<camlinternalFormat.ml:1270:6>>*/ fmt$9 = match$9[2],
          /*<<camlinternalFormat.ml:1270:6>>*/ sub_fmtty_rest$18 = match$9[1];
         /*<<camlinternalFormat.ml:1273:36>>*/ return [0,
                [9, sub1_fmtty, sub2_fmtty$1, symm(sub_fmtty_rest$18)],
                fmt$9];
       }
       break;
      case 10:
       if(typeof fmtty !== "number" && 10 === fmtty[0]){
         /*<<camlinternalFormat.ml:1237:6>>*/ var
         fmtty_rest$9 = fmtty[1],
         sub_fmtty_rest$19 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1237:6>>*/ match$10 =
           type_ignored_format_substituti
            (sub_fmtty_rest$19, fmt, fmtty_rest$9),
          /*<<camlinternalFormat.ml:1237:6>>*/ fmt$10 = match$10[2],
          /*<<camlinternalFormat.ml:1237:6>>*/ sub_fmtty_rest$20 = match$10[1];
         /*<<camlinternalFormat.ml:1237:6>>*/ return [0,
                [10, sub_fmtty_rest$20],
                fmt$10];
       }
       break;
      case 11:
       if(typeof fmtty !== "number" && 11 === fmtty[0]){
         /*<<camlinternalFormat.ml:1241:6>>*/ var
         fmtty_rest$10 = fmtty[1],
         sub_fmtty_rest$21 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1241:6>>*/ match$11 =
           type_ignored_format_substituti
            (sub_fmtty_rest$21, fmt, fmtty_rest$10),
          /*<<camlinternalFormat.ml:1241:6>>*/ fmt$11 = match$11[2],
          /*<<camlinternalFormat.ml:1241:6>>*/ sub_fmtty_rest$22 = match$11[1];
         /*<<camlinternalFormat.ml:1241:6>>*/ return [0,
                [11, sub_fmtty_rest$22],
                fmt$11];
       }
       break;
      case 13:
       if(typeof fmtty !== "number" && 13 === fmtty[0]){
         /*<<camlinternalFormat.ml:1245:6>>*/ var
         fmtty_rest$11 = fmtty[1],
         sub_fmtty_rest$23 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1245:6>>*/ match$12 =
           type_ignored_format_substituti
            (sub_fmtty_rest$23, fmt, fmtty_rest$11),
          /*<<camlinternalFormat.ml:1245:6>>*/ fmt$12 = match$12[2],
          /*<<camlinternalFormat.ml:1245:6>>*/ sub_fmtty_rest$24 = match$12[1];
         /*<<camlinternalFormat.ml:1245:6>>*/ return [0,
                [13, sub_fmtty_rest$24],
                fmt$12];
       }
       break;
      case 14:
       if(typeof fmtty !== "number" && 14 === fmtty[0]){
         /*<<camlinternalFormat.ml:1249:6>>*/ var
         fmtty_rest$12 = fmtty[1],
         sub_fmtty_rest$25 = sub_fmtty[1],
          /*<<camlinternalFormat.ml:1249:6>>*/ match$13 =
           type_ignored_format_substituti
            (sub_fmtty_rest$25, fmt, fmtty_rest$12),
          /*<<camlinternalFormat.ml:1249:6>>*/ fmt$13 = match$13[2],
          /*<<camlinternalFormat.ml:1249:6>>*/ sub_fmtty_rest$26 = match$13[1];
         /*<<camlinternalFormat.ml:1249:6>>*/ return [0,
                [14, sub_fmtty_rest$26],
                fmt$13];
       }
       break;
    }
     /*<<camlinternalFormat.ml:1277:9>>*/ throw  /*<<camlinternalFormat.ml:1277:9>>*/ caml_maybe_attach_backtrace
           (Type_mismatch, 1);
    /*<<camlinternalFormat.ml:1277:28>>*/ }
   function recast(fmt, fmtty){
     /*<<camlinternalFormat.ml:1312:29>>*/  /*<<camlinternalFormat.ml:1312:29>>*/ var
     _c7_ = symm(fmtty);
     /*<<camlinternalFormat.ml:1312:18>>*/ return type_format
            (fmt,
              /*<<camlinternalFormat.ml:1312:18>>*/ caml_call1
              (CamlinternalFormatBasics[2], _c7_));
    /*<<camlinternalFormat.ml:1312:42>>*/ }
   function fix_padding(padty, width, str){
     /*<<camlinternalFormat.ml:1319:2>>*/ var
      /*<<camlinternalFormat.ml:1319:2>>*/ len =
        /*<<camlinternalFormat.ml:1319:2>>*/ caml_ml_string_length(str),
      /*<<camlinternalFormat.ml:1319:2>>*/ padty$0 = 0 <= width ? padty : 0,
      /*<<camlinternalFormat.ml:1321:4>>*/ width$0 =
        /*<<camlinternalFormat.ml:1321:4>>*/ caml_call1(Stdlib[18], width);
     /*<<camlinternalFormat.ml:1321:4>>*/ if(width$0 <= len)
      /*<<camlinternalFormat.ml:1332:23>>*/ return str;
     /*<<camlinternalFormat.ml:1333:4>>*/ var
      /*<<camlinternalFormat.ml:1333:4>>*/ _c6_ = 2 === padty$0 ? 48 : 32,
      /*<<camlinternalFormat.ml:1333:14>>*/ res =
        /*<<camlinternalFormat.ml:1333:14>>*/ caml_call2
        (Stdlib_Bytes[1], width$0, _c6_);
     /*<<camlinternalFormat.ml:1333:14>>*/ switch(padty$0){
      case 0:
        /*<<camlinternalFormat.ml:1335:15>>*/  /*<<camlinternalFormat.ml:1335:15>>*/ caml_call5
        (Stdlib_String[48], str, 0, res, 0, len);
       break;
      case 1:
        /*<<camlinternalFormat.ml:1336:15>>*/  /*<<camlinternalFormat.ml:1336:15>>*/ caml_call5
        (Stdlib_String[48], str, 0, res, width$0 - len | 0, len);
       break;
      default:
       var switch$0 = 0;
        /*<<camlinternalFormat.ml:1337:17>>*/ if(0 < len){
        var switch$1 = 0;
         /*<<camlinternalFormat.ml:1337:63>>*/ if
         (43
          !==  /*<<camlinternalFormat.ml:1337:29>>*/ caml_string_get(str, 0)
          &&
           45
           !==  /*<<camlinternalFormat.ml:1337:46>>*/ caml_string_get(str, 0)
           &&
            32
            !==  /*<<camlinternalFormat.ml:1337:63>>*/ caml_string_get(str, 0)){switch$0 = 1; switch$1 = 1;}
        if(! switch$1){
          /*<<camlinternalFormat.ml:1338:6>>*/  /*<<camlinternalFormat.ml:1338:6>>*/ caml_bytes_set
          (res,
           0,
            /*<<camlinternalFormat.ml:1338:22>>*/ caml_string_get(str, 0));
          /*<<camlinternalFormat.ml:1339:6>>*/  /*<<camlinternalFormat.ml:1339:6>>*/ caml_call5
          (Stdlib_String[48],
           str,
           1,
           res,
           (width$0 - len | 0) + 1 | 0,
           len - 1 | 0);
        }
       }
       else
        switch$0 = 1;
       if(switch$0){
        var switch$2 = 0;
         /*<<camlinternalFormat.ml:1340:28>>*/ if
         (1 < len
          &&
           48
           ===  /*<<camlinternalFormat.ml:1340:28>>*/ caml_string_get(str, 0)){
         var switch$3 = 0;
          /*<<camlinternalFormat.ml:1340:63>>*/ if
          (120
           ===  /*<<camlinternalFormat.ml:1340:46>>*/ caml_string_get(str, 1)
           ||
            88
            ===  /*<<camlinternalFormat.ml:1340:63>>*/ caml_string_get(str, 1))
          switch$3 = 1;
         if(switch$3){
           /*<<camlinternalFormat.ml:1341:6>>*/  /*<<camlinternalFormat.ml:1341:6>>*/ caml_bytes_set
           (res,
            1,
             /*<<camlinternalFormat.ml:1341:22>>*/ caml_string_get(str, 1));
           /*<<camlinternalFormat.ml:1342:6>>*/  /*<<camlinternalFormat.ml:1342:6>>*/ caml_call5
           (Stdlib_String[48],
            str,
            2,
            res,
            (width$0 - len | 0) + 2 | 0,
            len - 2 | 0);
          switch$2 = 1;
         }
        }
        if(! switch$2)
          /*<<camlinternalFormat.ml:1344:6>>*/  /*<<camlinternalFormat.ml:1344:6>>*/ caml_call5
          (Stdlib_String[48], str, 0, res, width$0 - len | 0, len);
       }
    }
     /*<<camlinternalFormat.ml:1346:4>>*/ return  /*<<camlinternalFormat.ml:1346:4>>*/ caml_call1
            (Stdlib_Bytes[44], res);
    /*<<camlinternalFormat.ml:1346:30>>*/ }
   function fix_int_precision(prec, str){
     /*<<camlinternalFormat.ml:1350:13>>*/ var
      /*<<camlinternalFormat.ml:1350:13>>*/ prec$0 =
        /*<<camlinternalFormat.ml:1350:13>>*/ caml_call1(Stdlib[18], prec),
      /*<<camlinternalFormat.ml:1350:13>>*/ len =
        /*<<camlinternalFormat.ml:1350:13>>*/ caml_ml_string_length(str),
      /*<<camlinternalFormat.ml:1352:8>>*/ c =
        /*<<camlinternalFormat.ml:1352:8>>*/ caml_string_get(str, 0),
     switch$0 = 0;
     /*<<camlinternalFormat.ml:1352:8>>*/ if(58 <= c){
     if(71 <= c){
      if(5 >= c - 97 >>> 0) switch$0 = 1;
     }
     else if(65 <= c) switch$0 = 1;
    }
    else{
     var switch$1 = 0;
     if(32 === c)
      switch$1 = 1;
     else if(43 <= c)
      switch(c - 43 | 0){
        case 5:
         if(len < (prec$0 + 2 | 0) && 1 < len){
          var switch$2 = 0;
           /*<<camlinternalFormat.ml:1358:60>>*/ if
           (120
            !==  /*<<camlinternalFormat.ml:1358:43>>*/ caml_string_get(str, 1)
            &&
             88
             !==
               /*<<camlinternalFormat.ml:1358:60>>*/ caml_string_get(str, 1))
           switch$2 = 1;
          if(! switch$2){
            /*<<camlinternalFormat.ml:1359:14>>*/  /*<<camlinternalFormat.ml:1359:14>>*/ var
            res$1 =
               /*<<camlinternalFormat.ml:1359:14>>*/ caml_call2
               (Stdlib_Bytes[1], prec$0 + 2 | 0, 48);
            /*<<camlinternalFormat.ml:1360:4>>*/  /*<<camlinternalFormat.ml:1360:4>>*/ caml_bytes_set
            (res$1,
             1,
              /*<<camlinternalFormat.ml:1360:20>>*/ caml_string_get(str, 1));
            /*<<camlinternalFormat.ml:1361:4>>*/  /*<<camlinternalFormat.ml:1361:4>>*/ caml_call5
            (Stdlib_String[48],
             str,
             2,
             res$1,
             (prec$0 - len | 0) + 4 | 0,
             len - 2 | 0);
            /*<<camlinternalFormat.ml:1361:4>>*/ return  /*<<camlinternalFormat.ml:1361:4>>*/ caml_call1
                   (Stdlib_Bytes[44], res$1);
          }
         }
         switch$0 = 1;
         break;
        case 0:
        case 2:
         switch$1 = 1; break;
        case 1:
        case 3:
        case 4: break;
        default: switch$0 = 1;
      }
      /*<<camlinternalFormat.ml:1353:32>>*/ if
      (switch$1 && len < (prec$0 + 1 | 0)){
       /*<<camlinternalFormat.ml:1354:14>>*/  /*<<camlinternalFormat.ml:1354:14>>*/ var
       res$0 =
          /*<<camlinternalFormat.ml:1354:14>>*/ caml_call2
          (Stdlib_Bytes[1], prec$0 + 1 | 0, 48);
       /*<<camlinternalFormat.ml:1355:4>>*/  /*<<camlinternalFormat.ml:1355:4>>*/ caml_bytes_set
       (res$0, 0, c);
       /*<<camlinternalFormat.ml:1356:4>>*/  /*<<camlinternalFormat.ml:1356:4>>*/ caml_call5
       (Stdlib_String[48],
        str,
        1,
        res$0,
        (prec$0 - len | 0) + 2 | 0,
        len - 1 | 0);
       /*<<camlinternalFormat.ml:1356:4>>*/ return  /*<<camlinternalFormat.ml:1356:4>>*/ caml_call1
              (Stdlib_Bytes[44], res$0);
     }
    }
     /*<<camlinternalFormat.ml:1363:46>>*/ if(switch$0 && len < prec$0){
      /*<<camlinternalFormat.ml:1364:14>>*/  /*<<camlinternalFormat.ml:1364:14>>*/ var
      res =
         /*<<camlinternalFormat.ml:1364:14>>*/ caml_call2
         (Stdlib_Bytes[1], prec$0, 48);
      /*<<camlinternalFormat.ml:1365:4>>*/  /*<<camlinternalFormat.ml:1365:4>>*/ caml_call5
      (Stdlib_String[48], str, 0, res, prec$0 - len | 0, len);
      /*<<camlinternalFormat.ml:1365:4>>*/ return  /*<<camlinternalFormat.ml:1365:4>>*/ caml_call1
             (Stdlib_Bytes[44], res);
    }
     /*<<camlinternalFormat.ml:1368:4>>*/ return str;
    /*<<camlinternalFormat.ml:1368:7>>*/ }
   function string_to_caml_string(str){
     /*<<camlinternalFormat.ml:1372:12>>*/ var
      /*<<camlinternalFormat.ml:1372:12>>*/ str$0 =
        /*<<camlinternalFormat.ml:1372:12>>*/ caml_call1
        (Stdlib_String[24], str),
      /*<<camlinternalFormat.ml:1372:12>>*/ l =
        /*<<camlinternalFormat.ml:1372:12>>*/ caml_ml_string_length(str$0),
      /*<<camlinternalFormat.ml:1374:12>>*/ res =
        /*<<camlinternalFormat.ml:1374:12>>*/ caml_call2
        (Stdlib_Bytes[1], l + 2 | 0, 34);
     /*<<camlinternalFormat.ml:1375:2>>*/  /*<<camlinternalFormat.ml:1375:2>>*/ caml_blit_string
     (str$0, 0, res, 1, l);
     /*<<camlinternalFormat.ml:1375:2>>*/ return  /*<<camlinternalFormat.ml:1375:2>>*/ caml_call1
            (Stdlib_Bytes[44], res);
    /*<<camlinternalFormat.ml:1376:28>>*/ }
   function format_of_fconv(fconv, prec){
     /*<<camlinternalFormat.ml:1414:15>>*/ var
      /*<<camlinternalFormat.ml:1414:15>>*/ prec$0 =
        /*<<camlinternalFormat.ml:1414:15>>*/ caml_call1(Stdlib[18], prec),
      /*<<camlinternalFormat.ml:1415:15>>*/ symb = char_of_fconv(_r_, fconv),
      /*<<camlinternalFormat.ml:1416:14>>*/ buf = buffer_create(16);
     /*<<camlinternalFormat.ml:1417:4>>*/ buffer_add_char(buf, 37);
     /*<<camlinternalFormat.ml:1418:4>>*/ bprint_fconv_flag(buf, fconv);
     /*<<camlinternalFormat.ml:1419:4>>*/ buffer_add_char(buf, 46);
     /*<<camlinternalFormat.ml:1420:4>>*/ buffer_add_string
     (buf,
       /*<<camlinternalFormat.ml:1420:26>>*/ caml_call1
       (Stdlib_Int[12], prec$0));
     /*<<camlinternalFormat.ml:1421:4>>*/ buffer_add_char(buf, symb);
     /*<<camlinternalFormat.ml:1421:4>>*/ return buffer_contents(buf);
    /*<<camlinternalFormat.ml:1422:23>>*/ }
   function transform_int_alt(iconv, s){
     /*<<camlinternalFormat.ml:1425:2>>*/ if(13 > iconv)
      /*<<camlinternalFormat.ml:1447:9>>*/ return s;
     /*<<camlinternalFormat.ml:1427:4>>*/ var
      /*<<camlinternalFormat.ml:1427:4>>*/ n = [0, 0],
      /*<<camlinternalFormat.ml:1427:4>>*/ _c1_ =
        /*<<camlinternalFormat.ml:1427:4>>*/ caml_ml_string_length(s) - 1 | 0,
      /*<<camlinternalFormat.ml:1427:4>>*/ _c0_ = 0;
     /*<<camlinternalFormat.ml:1427:4>>*/ if(_c1_ >= 0){
     var i$0 = _c0_;
      /*<<camlinternalFormat.ml:1430:8>>*/ for(;;){
       /*<<camlinternalFormat.ml:1430:8>>*/ if
       (9
        >=
          /*<<camlinternalFormat.ml:1430:8>>*/ caml_string_unsafe_get(s, i$0)
         - 48
         >>> 0)
        /*<<camlinternalFormat.ml:1431:22>>*/ n[1]++;
      var _c5_ = i$0 + 1 | 0;
      if(_c1_ !== i$0){var i$0 = _c5_; continue;}
      break;
     }
    }
     /*<<camlinternalFormat.ml:1434:6>>*/ var
      /*<<camlinternalFormat.ml:1434:6>>*/ digits = n[1],
      /*<<camlinternalFormat.ml:1436:14>>*/ buf =
        /*<<camlinternalFormat.ml:1436:14>>*/ caml_create_bytes
        ( /*<<camlinternalFormat.ml:1434:6>>*/ caml_ml_string_length(s)
         + ((digits - 1 | 0) / 3 | 0)
         | 0),
      /*<<camlinternalFormat.ml:1436:14>>*/ pos = [0, 0];
     /*<<camlinternalFormat.ml:1436:14>>*/ function put(c){
      /*<<camlinternalFormat.ml:1438:16>>*/  /*<<camlinternalFormat.ml:1438:16>>*/ caml_bytes_set
      (buf, pos[1], c);
      /*<<camlinternalFormat.ml:1438:16>>*/ pos[1]++;
      /*<<camlinternalFormat.ml:1438:16>>*/ return 0;
     /*<<camlinternalFormat.ml:1438:46>>*/ }
     /*<<camlinternalFormat.ml:1436:14>>*/ var
      /*<<camlinternalFormat.ml:1436:14>>*/ left =
       [0, ((digits - 1 | 0) % 3 | 0) + 1 | 0],
      /*<<camlinternalFormat.ml:1436:14>>*/ _c3_ =
        /*<<camlinternalFormat.ml:1436:14>>*/ caml_ml_string_length(s) - 1 | 0,
      /*<<camlinternalFormat.ml:1436:14>>*/ _c2_ = 0;
     /*<<camlinternalFormat.ml:1436:14>>*/ if(_c3_ >= 0){
     var i = _c2_;
      /*<<camlinternalFormat.ml:1441:6>>*/ for(;;){
       /*<<camlinternalFormat.ml:1441:6>>*/  /*<<camlinternalFormat.ml:1441:6>>*/ var
       c =  /*<<camlinternalFormat.ml:1441:6>>*/ caml_string_unsafe_get(s, i);
       /*<<camlinternalFormat.ml:1441:6>>*/ if(9 < c - 48 >>> 0)
        /*<<camlinternalFormat.ml:1444:13>>*/ put(c);
      else{
        /*<<camlinternalFormat.ml:1443:10>>*/ if(0 === left[1]){
         /*<<camlinternalFormat.ml:1443:29>>*/ put(95);
         /*<<camlinternalFormat.ml:1443:29>>*/ left[1] = 3;
       }
        /*<<camlinternalFormat.ml:1443:50>>*/ left[1] += -1;
        /*<<camlinternalFormat.ml:1443:61>>*/ put(c);
      }
       /*<<camlinternalFormat.ml:1443:66>>*/  /*<<camlinternalFormat.ml:1443:66>>*/ var
       _c4_ = i + 1 | 0;
       /*<<camlinternalFormat.ml:1443:66>>*/ if(_c3_ !== i){
       var i = _c4_;
       continue;
      }
      break;
     }
    }
     /*<<camlinternalFormat.ml:1446:4>>*/ return  /*<<camlinternalFormat.ml:1446:4>>*/ caml_call1
            (Stdlib_Bytes[44], buf);
    /*<<camlinternalFormat.ml:1447:10>>*/ }
   function convert_int(iconv, n){
     /*<<camlinternalFormat.ml:1380:22>>*/ switch(iconv){
      case 1:
       var _cZ_ = cst_d$0; break;
      case 2:
       var _cZ_ = cst_d$1; break;
      case 4:
       var _cZ_ = cst_i$1; break;
      case 5:
       var _cZ_ = cst_i$2; break;
      case 6:
       var _cZ_ = cst_x; break;
      case 7:
       var _cZ_ = cst_x$0; break;
      case 8:
       var _cZ_ = cst_X; break;
      case 9:
       var _cZ_ = cst_X$0; break;
      case 10:
       var _cZ_ = cst_o; break;
      case 11:
       var _cZ_ = cst_o$0; break;
      case 0:
      case 13:
       var _cZ_ = cst_d; break;
      case 3:
      case 14:
       var _cZ_ = cst_i$0; break;
      default: var _cZ_ = cst_u;
    }
     /*<<camlinternalFormat.ml:1451:61>>*/ return transform_int_alt
            (iconv,
              /*<<camlinternalFormat.ml:1451:61>>*/ caml_format_int(_cZ_, n));
    /*<<camlinternalFormat.ml:1451:64>>*/ }
   function convert_int32(iconv, n){
     /*<<camlinternalFormat.ml:1396:23>>*/ switch(iconv){
      case 1:
       var _cY_ = cst_ld$0; break;
      case 2:
       var _cY_ = cst_ld$1; break;
      case 4:
       var _cY_ = cst_li$1; break;
      case 5:
       var _cY_ = cst_li$2; break;
      case 6:
       var _cY_ = cst_lx; break;
      case 7:
       var _cY_ = cst_lx$0; break;
      case 8:
       var _cY_ = cst_lX; break;
      case 9:
       var _cY_ = cst_lX$0; break;
      case 10:
       var _cY_ = cst_lo; break;
      case 11:
       var _cY_ = cst_lo$0; break;
      case 0:
      case 13:
       var _cY_ = cst_ld; break;
      case 3:
      case 14:
       var _cY_ = cst_li$0; break;
      default: var _cY_ = cst_lu;
    }
     /*<<camlinternalFormat.ml:1453:64>>*/ return transform_int_alt
            (iconv,
              /*<<camlinternalFormat.ml:1453:64>>*/ caml_format_int(_cY_, n));
    /*<<camlinternalFormat.ml:1453:67>>*/ }
   function convert_nativeint(iconv, n){
     /*<<camlinternalFormat.ml:1404:23>>*/ switch(iconv){
      case 1:
       var _cX_ = cst_nd$0; break;
      case 2:
       var _cX_ = cst_nd$1; break;
      case 4:
       var _cX_ = cst_ni$1; break;
      case 5:
       var _cX_ = cst_ni$2; break;
      case 6:
       var _cX_ = cst_nx; break;
      case 7:
       var _cX_ = cst_nx$0; break;
      case 8:
       var _cX_ = cst_nX; break;
      case 9:
       var _cX_ = cst_nX$0; break;
      case 10:
       var _cX_ = cst_no; break;
      case 11:
       var _cX_ = cst_no$0; break;
      case 0:
      case 13:
       var _cX_ = cst_nd; break;
      case 3:
      case 14:
       var _cX_ = cst_ni$0; break;
      default: var _cX_ = cst_nu;
    }
     /*<<camlinternalFormat.ml:1455:68>>*/ return transform_int_alt
            (iconv,
              /*<<camlinternalFormat.ml:1455:68>>*/ caml_format_int(_cX_, n));
    /*<<camlinternalFormat.ml:1455:71>>*/ }
   function convert_int64(iconv, n){
     /*<<camlinternalFormat.ml:1388:23>>*/ switch(iconv){
      case 1:
       var _cW_ = cst_Ld$0; break;
      case 2:
       var _cW_ = cst_Ld$1; break;
      case 4:
       var _cW_ = cst_Li$1; break;
      case 5:
       var _cW_ = cst_Li$2; break;
      case 6:
       var _cW_ = cst_Lx; break;
      case 7:
       var _cW_ = cst_Lx$0; break;
      case 8:
       var _cW_ = cst_LX; break;
      case 9:
       var _cW_ = cst_LX$0; break;
      case 10:
       var _cW_ = cst_Lo; break;
      case 11:
       var _cW_ = cst_Lo$0; break;
      case 0:
      case 13:
       var _cW_ = cst_Ld; break;
      case 3:
      case 14:
       var _cW_ = cst_Li$0; break;
      default: var _cW_ = cst_Lu;
    }
     /*<<camlinternalFormat.ml:1457:64>>*/ return transform_int_alt
            (iconv,
              /*<<camlinternalFormat.ml:1457:64>>*/ runtime.caml_int64_format
              (_cW_, n));
    /*<<camlinternalFormat.ml:1457:67>>*/ }
   function convert_float(fconv, prec, x){
     /*<<camlinternalFormat.ml:1462:2>>*/ function hex(param){
      /*<<camlinternalFormat.ml:1463:4>>*/ switch(fconv[1]){
       case 0:
        var sign = 45; break;
       case 1:
        var sign = 43; break;
       default: var sign = 32;
     }
      /*<<camlinternalFormat.ml:1468:4>>*/ return  /*<<camlinternalFormat.ml:1468:4>>*/ runtime.caml_hexstring_of_float
             (x, prec, sign);
     /*<<camlinternalFormat.ml:1468:34>>*/ }
     /*<<camlinternalFormat.ml:1462:2>>*/ function caml_special_val(str){
      /*<<camlinternalFormat.ml:1477:35>>*/  /*<<camlinternalFormat.ml:1477:35>>*/ var
      match =
         /*<<camlinternalFormat.ml:1477:35>>*/ runtime.caml_classify_float(x);
      /*<<camlinternalFormat.ml:1477:35>>*/ return 3 === match
             ? x < 0. ? cst_neg_infinity : cst_infinity
             : 4 <= match ? cst_nan : str;
     /*<<camlinternalFormat.ml:1480:21>>*/ }
     /*<<camlinternalFormat.ml:1462:2>>*/ switch(fconv[2]){
      case 5:
        /*<<camlinternalFormat.ml:1486:55>>*/ var
         /*<<camlinternalFormat.ml:1486:55>>*/ str =
           /*<<camlinternalFormat.ml:1486:55>>*/ caml_format_float
           (format_of_fconv(fconv, prec), x),
         /*<<camlinternalFormat.ml:1470:4>>*/ len =
           /*<<camlinternalFormat.ml:1470:4>>*/ caml_ml_string_length(str),
        i = 0;
        /*<<camlinternalFormat.ml:1472:6>>*/ for(;;){
         /*<<camlinternalFormat.ml:1472:6>>*/ if(i === len)
         var _cT_ = 0;
        else{
          /*<<camlinternalFormat.ml:1473:14>>*/ var
           /*<<camlinternalFormat.ml:1473:14>>*/ _cS_ =
             /*<<camlinternalFormat.ml:1473:14>>*/ caml_string_get(str, i)
            - 46
            | 0,
          switch$0 = 0;
          /*<<camlinternalFormat.ml:1473:14>>*/ if(23 < _cS_ >>> 0){
          if(55 === _cS_) switch$0 = 1;
         }
         else if(21 < _cS_ - 1 >>> 0) switch$0 = 1;
         if(! switch$0){
           /*<<camlinternalFormat.ml:1475:15>>*/ var
            /*<<camlinternalFormat.ml:1475:15>>*/ i$0 = i + 1 | 0,
           i = i$0;
          continue;
         }
         var _cT_ = 1;
        }
        var
         _cU_ =
           _cT_
            ? str
            :  /*<<camlinternalFormat.ml:1476:32>>*/ caml_call2
              (Stdlib[28], str, cst$17);
        return caml_special_val(_cU_);
       }
      case 6:
        /*<<camlinternalFormat.ml:1482:15>>*/ return hex(0);
      case 7:
        /*<<camlinternalFormat.ml:1483:38>>*/  /*<<camlinternalFormat.ml:1483:38>>*/ var
        _cV_ = hex(0);
        /*<<camlinternalFormat.ml:1483:38>>*/ return  /*<<camlinternalFormat.ml:1483:38>>*/ caml_call1
               (Stdlib_String[25], _cV_);
      case 8:
        /*<<camlinternalFormat.ml:1484:33>>*/ return caml_special_val(hex(0));
      default:
        /*<<camlinternalFormat.ml:1489:45>>*/ return  /*<<camlinternalFormat.ml:1489:45>>*/ caml_format_float
               (format_of_fconv(fconv, prec), x);
    }
    /*<<camlinternalFormat.ml:1489:47>>*/ }
   function string_of_fmtty(fmtty){
     /*<<camlinternalFormat.ml:1501:12>>*/  /*<<camlinternalFormat.ml:1501:12>>*/ var
     buf = buffer_create(16);
     /*<<camlinternalFormat.ml:1502:2>>*/ bprint_fmtty(buf, fmtty);
     /*<<camlinternalFormat.ml:1502:2>>*/ return buffer_contents(buf);
    /*<<camlinternalFormat.ml:1503:21>>*/ }
   function make_int_padding_precision(k, acc, fmt, pad, prec, trans, iconv){
     /*<<camlinternalFormat.ml:1691:40>>*/ if(typeof pad === "number"){
     if(typeof prec === "number")
       /*<<camlinternalFormat.ml:1701:4>>*/ return prec
              ? function
               (p, x){
                 /*<<camlinternalFormat.ml:1702:16>>*/  /*<<camlinternalFormat.ml:1702:16>>*/ var
                 str =
                   fix_int_precision
                    (p,
                      /*<<camlinternalFormat.ml:1702:36>>*/ caml_call2
                      (trans, iconv, x));
                 /*<<camlinternalFormat.ml:1702:16>>*/ return make_printf
                        (k, [4, acc, str], fmt);
                /*<<camlinternalFormat.ml:1703:52>>*/ }
              : function
               (x){
                 /*<<camlinternalFormat.ml:1694:16>>*/  /*<<camlinternalFormat.ml:1694:16>>*/ var
                 str =
                    /*<<camlinternalFormat.ml:1694:16>>*/ caml_call2
                    (trans, iconv, x);
                 /*<<camlinternalFormat.ml:1694:16>>*/ return make_printf
                        (k, [4, acc, str], fmt);
                /*<<camlinternalFormat.ml:1695:52>>*/ };
      /*<<camlinternalFormat.ml:1697:4>>*/  /*<<camlinternalFormat.ml:1697:4>>*/ var
      p = prec[1];
      /*<<camlinternalFormat.ml:1697:4>>*/ return function(x){
       /*<<camlinternalFormat.ml:1698:16>>*/  /*<<camlinternalFormat.ml:1698:16>>*/ var
       str =
         fix_int_precision
          (p,
            /*<<camlinternalFormat.ml:1698:36>>*/ caml_call2(trans, iconv, x));
       /*<<camlinternalFormat.ml:1698:16>>*/ return make_printf
              (k, [4, acc, str], fmt); /*<<camlinternalFormat.ml:1699:52>>*/ };
    }
     /*<<camlinternalFormat.ml:1691:40>>*/ if(0 === pad[0]){
     var w = pad[2], padty = pad[1];
     if(typeof prec === "number")
      return prec
              ? function
               (p, x){
                 /*<<camlinternalFormat.ml:1714:16>>*/  /*<<camlinternalFormat.ml:1714:16>>*/ var
                 str =
                   fix_padding
                    (padty,
                     w,
                     fix_int_precision
                      (p,
                        /*<<camlinternalFormat.ml:1714:57>>*/ caml_call2
                        (trans, iconv, x)));
                 /*<<camlinternalFormat.ml:1714:16>>*/ return make_printf
                        (k, [4, acc, str], fmt);
                /*<<camlinternalFormat.ml:1715:52>>*/ }
              : function
               (x){
                 /*<<camlinternalFormat.ml:1706:16>>*/  /*<<camlinternalFormat.ml:1706:16>>*/ var
                 str =
                   fix_padding
                    (padty,
                     w,
                      /*<<camlinternalFormat.ml:1706:36>>*/ caml_call2
                      (trans, iconv, x));
                 /*<<camlinternalFormat.ml:1706:16>>*/ return make_printf
                        (k, [4, acc, str], fmt);
                /*<<camlinternalFormat.ml:1707:52>>*/ };
     var p$0 = prec[1];
     return function(x){
       /*<<camlinternalFormat.ml:1710:16>>*/  /*<<camlinternalFormat.ml:1710:16>>*/ var
       str =
         fix_padding
          (padty,
           w,
           fix_int_precision
            (p$0,
              /*<<camlinternalFormat.ml:1710:57>>*/ caml_call2
              (trans, iconv, x)));
       /*<<camlinternalFormat.ml:1710:16>>*/ return make_printf
              (k, [4, acc, str], fmt); /*<<camlinternalFormat.ml:1711:52>>*/ };
    }
    var padty$0 = pad[1];
    if(typeof prec === "number")
     return prec
             ? function
              (w, p, x){
                /*<<camlinternalFormat.ml:1726:16>>*/  /*<<camlinternalFormat.ml:1726:16>>*/ var
                str =
                  fix_padding
                   (padty$0,
                    w,
                    fix_int_precision
                     (p,
                       /*<<camlinternalFormat.ml:1726:57>>*/ caml_call2
                       (trans, iconv, x)));
                /*<<camlinternalFormat.ml:1726:16>>*/ return make_printf
                       (k, [4, acc, str], fmt);
               /*<<camlinternalFormat.ml:1727:52>>*/ }
             : function
              (w, x){
                /*<<camlinternalFormat.ml:1718:16>>*/  /*<<camlinternalFormat.ml:1718:16>>*/ var
                str =
                  fix_padding
                   (padty$0,
                    w,
                     /*<<camlinternalFormat.ml:1718:36>>*/ caml_call2
                     (trans, iconv, x));
                /*<<camlinternalFormat.ml:1718:16>>*/ return make_printf
                       (k, [4, acc, str], fmt);
               /*<<camlinternalFormat.ml:1719:52>>*/ };
    var p$1 = prec[1];
    return function(w, x){
      /*<<camlinternalFormat.ml:1722:16>>*/  /*<<camlinternalFormat.ml:1722:16>>*/ var
      str =
        fix_padding
         (padty$0,
          w,
          fix_int_precision
           (p$1,
             /*<<camlinternalFormat.ml:1722:57>>*/ caml_call2(trans, iconv, x)));
      /*<<camlinternalFormat.ml:1722:16>>*/ return make_printf
             (k, [4, acc, str], fmt); /*<<camlinternalFormat.ml:1723:52>>*/ };
    /*<<camlinternalFormat.ml:1727:52>>*/ }
   function make_padding(k, acc, fmt, pad, trans){
     /*<<camlinternalFormat.ml:1670:29>>*/ if(typeof pad === "number")
      /*<<camlinternalFormat.ml:1672:4>>*/ return function(x){
       /*<<camlinternalFormat.ml:1673:42>>*/  /*<<camlinternalFormat.ml:1673:42>>*/ var
       new_acc =
         [4, acc,  /*<<camlinternalFormat.ml:1673:42>>*/ caml_call1(trans, x)];
       /*<<camlinternalFormat.ml:1673:42>>*/ return make_printf
              (k, new_acc, fmt); /*<<camlinternalFormat.ml:1674:31>>*/ };
     /*<<camlinternalFormat.ml:1670:29>>*/ if(0 === pad[0]){
     var width = pad[2], padty = pad[1];
     return function(x){
       /*<<camlinternalFormat.ml:1677:42>>*/  /*<<camlinternalFormat.ml:1677:42>>*/ var
       new_acc =
         [4,
          acc,
          fix_padding
           (padty,
            width,
             /*<<camlinternalFormat.ml:1677:66>>*/ caml_call1(trans, x))];
       /*<<camlinternalFormat.ml:1677:42>>*/ return make_printf
              (k, new_acc, fmt); /*<<camlinternalFormat.ml:1678:31>>*/ };
    }
     /*<<camlinternalFormat.ml:1680:4>>*/  /*<<camlinternalFormat.ml:1680:4>>*/ var
     padty$0 = pad[1];
     /*<<camlinternalFormat.ml:1680:4>>*/ return function(w, x){
      /*<<camlinternalFormat.ml:1681:42>>*/  /*<<camlinternalFormat.ml:1681:42>>*/ var
      new_acc =
        [4,
         acc,
         fix_padding
          (padty$0,
           w,
            /*<<camlinternalFormat.ml:1681:62>>*/ caml_call1(trans, x))];
      /*<<camlinternalFormat.ml:1681:42>>*/ return make_printf
             (k, new_acc, fmt); /*<<camlinternalFormat.ml:1682:31>>*/ };
    /*<<camlinternalFormat.ml:1682:31>>*/ }
   function make_printf$0(counter, k, acc, fmt){
    var k$0 = k, acc$0 = acc, fmt$0 = fmt;
     /*<<camlinternalFormat.ml:1518:17>>*/ for(;;){
      /*<<camlinternalFormat.ml:1518:17>>*/ if(typeof fmt$0 === "number")
       /*<<camlinternalFormat.ml:1605:4>>*/ return  /*<<camlinternalFormat.ml:1605:4>>*/ caml_call1
              (k$0, acc$0);
      /*<<camlinternalFormat.ml:1518:17>>*/ switch(fmt$0[0]){
       case 0:
         /*<<camlinternalFormat.ml:1520:4>>*/  /*<<camlinternalFormat.ml:1520:4>>*/ var
         rest = fmt$0[1];
         /*<<camlinternalFormat.ml:1520:4>>*/ return function(c){
          /*<<camlinternalFormat.ml:1521:6>>*/  /*<<camlinternalFormat.ml:1521:6>>*/ var
          new_acc = [5, acc$0, c];
          /*<<camlinternalFormat.ml:1521:6>>*/ return make_printf
                 (k$0, new_acc, rest); /*<<camlinternalFormat.ml:1522:32>>*/ };
       case 1:
         /*<<camlinternalFormat.ml:1524:4>>*/  /*<<camlinternalFormat.ml:1524:4>>*/ var
         rest$0 = fmt$0[1];
         /*<<camlinternalFormat.ml:1524:4>>*/ return function(c){
          /*<<camlinternalFormat.ml:1493:12>>*/ var
           /*<<camlinternalFormat.ml:1493:12>>*/ str =
             /*<<camlinternalFormat.ml:1493:12>>*/ caml_call1
             (Stdlib_Char[2], c),
           /*<<camlinternalFormat.ml:1493:12>>*/ l =
             /*<<camlinternalFormat.ml:1493:12>>*/ caml_ml_string_length(str),
           /*<<camlinternalFormat.ml:1495:12>>*/ res =
             /*<<camlinternalFormat.ml:1495:12>>*/ caml_call2
             (Stdlib_Bytes[1], l + 2 | 0, 39);
          /*<<camlinternalFormat.ml:1496:2>>*/  /*<<camlinternalFormat.ml:1496:2>>*/ caml_blit_string
          (str, 0, res, 1, l);
         var
          new_acc =
            [4,
             acc$0,
              /*<<camlinternalFormat.ml:1496:2>>*/ caml_call1
              (Stdlib_Bytes[44], res)];
         return make_printf(k$0, new_acc, rest$0); /*<<camlinternalFormat.ml:1526:32>>*/ };
       case 2:
        var rest$1 = fmt$0[2], pad = fmt$0[1];
        return make_padding
                (k$0,
                 acc$0,
                 rest$1,
                 pad,
                 function(str){
                   /*<<camlinternalFormat.ml:1528:44>>*/ return str;
                  /*<<camlinternalFormat.ml:1528:47>>*/ });
       case 3:
        var rest$2 = fmt$0[2], pad$0 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$2, pad$0, string_to_caml_string);
       case 4:
        var
         rest$3 = fmt$0[4],
         prec = fmt$0[3],
         pad$1 = fmt$0[2],
         iconv = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$3, pad$1, prec, convert_int, iconv);
       case 5:
        var
         rest$4 = fmt$0[4],
         prec$0 = fmt$0[3],
         pad$2 = fmt$0[2],
         iconv$0 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$4, pad$2, prec$0, convert_int32, iconv$0);
       case 6:
        var
         rest$5 = fmt$0[4],
         prec$1 = fmt$0[3],
         pad$3 = fmt$0[2],
         iconv$1 = fmt$0[1];
        return make_int_padding_precision
                (k$0,
                 acc$0,
                 rest$5,
                 pad$3,
                 prec$1,
                 convert_nativeint,
                 iconv$1);
       case 7:
        var
         rest$6 = fmt$0[4],
         prec$2 = fmt$0[3],
         pad$4 = fmt$0[2],
         iconv$2 = fmt$0[1];
        return make_int_padding_precision
                (k$0, acc$0, rest$6, pad$4, prec$2, convert_int64, iconv$2);
       case 8:
        var
         rest$7 = fmt$0[4],
         prec$3 = fmt$0[3],
         pad$5 = fmt$0[2],
         fconv = fmt$0[1];
         /*<<camlinternalFormat.ml:1735:34>>*/ if(typeof pad$5 === "number"){
         if(typeof prec$3 === "number")
           /*<<camlinternalFormat.ml:1745:4>>*/ return prec$3
                  ? function
                   (p, x){
                     /*<<camlinternalFormat.ml:1746:16>>*/  /*<<camlinternalFormat.ml:1746:16>>*/ var
                     str = convert_float(fconv, p, x);
                     /*<<camlinternalFormat.ml:1746:16>>*/ return make_printf
                            (k$0, [4, acc$0, str], rest$7);
                    /*<<camlinternalFormat.ml:1747:52>>*/ }
                  : function
                   (x){
                     /*<<camlinternalFormat.ml:1738:16>>*/  /*<<camlinternalFormat.ml:1738:16>>*/ var
                     str =
                       convert_float(fconv, default_float_precision(fconv), x);
                     /*<<camlinternalFormat.ml:1738:16>>*/ return make_printf
                            (k$0, [4, acc$0, str], rest$7);
                    /*<<camlinternalFormat.ml:1739:52>>*/ };
          /*<<camlinternalFormat.ml:1741:4>>*/  /*<<camlinternalFormat.ml:1741:4>>*/ var
          p = prec$3[1];
          /*<<camlinternalFormat.ml:1741:4>>*/ return function(x){
           /*<<camlinternalFormat.ml:1742:16>>*/  /*<<camlinternalFormat.ml:1742:16>>*/ var
           str = convert_float(fconv, p, x);
           /*<<camlinternalFormat.ml:1742:16>>*/ return make_printf
                  (k$0, [4, acc$0, str], rest$7); /*<<camlinternalFormat.ml:1743:52>>*/ };
        }
         /*<<camlinternalFormat.ml:1735:34>>*/ if(0 === pad$5[0]){
         var w = pad$5[2], padty = pad$5[1];
         if(typeof prec$3 === "number")
          return prec$3
                  ? function
                   (p, x){
                     /*<<camlinternalFormat.ml:1759:16>>*/  /*<<camlinternalFormat.ml:1759:16>>*/ var
                     str = fix_padding(padty, w, convert_float(fconv, p, x));
                     /*<<camlinternalFormat.ml:1759:16>>*/ return make_printf
                            (k$0, [4, acc$0, str], rest$7);
                    /*<<camlinternalFormat.ml:1760:52>>*/ }
                  : function
                   (x){
                     /*<<camlinternalFormat.ml:1750:16>>*/ var
                      /*<<camlinternalFormat.ml:1750:16>>*/ str =
                       convert_float(fconv, default_float_precision(fconv), x),
                      /*<<camlinternalFormat.ml:1751:17>>*/ str$0 =
                       fix_padding(padty, w, str);
                     /*<<camlinternalFormat.ml:1751:17>>*/ return make_printf
                            (k$0, [4, acc$0, str$0], rest$7);
                    /*<<camlinternalFormat.ml:1752:53>>*/ };
         var p$0 = prec$3[1];
         return function(x){
           /*<<camlinternalFormat.ml:1755:16>>*/  /*<<camlinternalFormat.ml:1755:16>>*/ var
           str = fix_padding(padty, w, convert_float(fconv, p$0, x));
           /*<<camlinternalFormat.ml:1755:16>>*/ return make_printf
                  (k$0, [4, acc$0, str], rest$7); /*<<camlinternalFormat.ml:1756:52>>*/ };
        }
        var padty$0 = pad$5[1];
        if(typeof prec$3 === "number")
         return prec$3
                 ? function
                  (w, p, x){
                    /*<<camlinternalFormat.ml:1772:16>>*/  /*<<camlinternalFormat.ml:1772:16>>*/ var
                    str = fix_padding(padty$0, w, convert_float(fconv, p, x));
                    /*<<camlinternalFormat.ml:1772:16>>*/ return make_printf
                           (k$0, [4, acc$0, str], rest$7);
                   /*<<camlinternalFormat.ml:1773:52>>*/ }
                 : function
                  (w, x){
                    /*<<camlinternalFormat.ml:1763:16>>*/ var
                     /*<<camlinternalFormat.ml:1763:16>>*/ str =
                      convert_float(fconv, default_float_precision(fconv), x),
                     /*<<camlinternalFormat.ml:1764:17>>*/ str$0 =
                      fix_padding(padty$0, w, str);
                    /*<<camlinternalFormat.ml:1764:17>>*/ return make_printf
                           (k$0, [4, acc$0, str$0], rest$7);
                   /*<<camlinternalFormat.ml:1765:53>>*/ };
        var p$1 = prec$3[1];
        return function(w, x){
          /*<<camlinternalFormat.ml:1768:16>>*/  /*<<camlinternalFormat.ml:1768:16>>*/ var
          str = fix_padding(padty$0, w, convert_float(fconv, p$1, x));
          /*<<camlinternalFormat.ml:1768:16>>*/ return make_printf
                 (k$0, [4, acc$0, str], rest$7); /*<<camlinternalFormat.ml:1769:52>>*/ };
       case 9:
        var rest$8 = fmt$0[2], pad$6 = fmt$0[1];
        return make_padding(k$0, acc$0, rest$8, pad$6, Stdlib[30]);
       case 10:
         /*<<camlinternalFormat.ml:1560:4>>*/ var
          /*<<camlinternalFormat.ml:1560:4>>*/ rest$9 = fmt$0[1],
          /*<<camlinternalFormat.ml:1560:4>>*/ acc$1 = [7, acc$0],
         acc$0 = acc$1,
         fmt$0 = rest$9;
        continue;
       case 11:
        var
         rest$10 = fmt$0[2],
         str = fmt$0[1],
         acc$2 = [2, acc$0, str],
         acc$0 = acc$2,
         fmt$0 = rest$10;
        continue;
       case 12:
        var
         rest$11 = fmt$0[2],
         chr = fmt$0[1],
         acc$3 = [3, acc$0, chr],
         acc$0 = acc$3,
         fmt$0 = rest$11;
        continue;
       case 13:
         /*<<camlinternalFormat.ml:1568:13>>*/ var
         rest$12 = fmt$0[3],
         sub_fmtty = fmt$0[2],
          /*<<camlinternalFormat.ml:1568:13>>*/ ty =
           string_of_fmtty(sub_fmtty);
         /*<<camlinternalFormat.ml:1568:13>>*/ return function(str){
          /*<<camlinternalFormat.ml:1570:6>>*/ return make_printf
                 (k$0, [4, acc$0, ty], rest$12); /*<<camlinternalFormat.ml:1571:52>>*/ };
       case 14:
        var rest$13 = fmt$0[3], fmtty = fmt$0[2];
        return function(param){
          /*<<camlinternalFormat.ml:1573:4>>*/ var
           /*<<camlinternalFormat.ml:1573:4>>*/ fmt = param[1],
           /*<<camlinternalFormat.ml:1574:18>>*/ _cR_ = recast(fmt, fmtty);
          /*<<camlinternalFormat.ml:1574:6>>*/ return make_printf
                 (k$0,
                  acc$0,
                   /*<<camlinternalFormat.ml:1574:6>>*/ caml_call2
                   (CamlinternalFormatBasics[3], _cR_, rest$13)); /*<<camlinternalFormat.ml:1574:42>>*/ };
       case 15:
         /*<<camlinternalFormat.ml:1544:4>>*/  /*<<camlinternalFormat.ml:1544:4>>*/ var
         rest$14 = fmt$0[1];
         /*<<camlinternalFormat.ml:1544:4>>*/ return function(f, x){
          /*<<camlinternalFormat.ml:1544:15>>*/ return make_printf
                 (k$0,
                  [6,
                   acc$0,
                   function(o){
                     /*<<camlinternalFormat.ml:1544:55>>*/ return  /*<<camlinternalFormat.ml:1544:55>>*/ caml_call2
                            (f, o, x);
                    /*<<camlinternalFormat.ml:1544:60>>*/ }],
                  rest$14); /*<<camlinternalFormat.ml:1544:67>>*/ };
       case 16:
         /*<<camlinternalFormat.ml:1546:4>>*/  /*<<camlinternalFormat.ml:1546:4>>*/ var
         rest$15 = fmt$0[1];
         /*<<camlinternalFormat.ml:1546:4>>*/ return function(f){
          /*<<camlinternalFormat.ml:1546:13>>*/ return make_printf
                 (k$0, [6, acc$0, f], rest$15); /*<<camlinternalFormat.ml:1546:52>>*/ };
       case 17:
        var
         rest$16 = fmt$0[2],
         fmting_lit = fmt$0[1],
         acc$4 = [0, acc$0, fmting_lit],
         acc$0 = acc$4,
         fmt$0 = rest$16;
        continue;
       case 18:
        var _cP_ = fmt$0[1];
        if(0 === _cP_[0]){
         var
          rest$17 = fmt$0[2],
          fmt$1 = _cP_[1][1],
          k$3 =
            function(acc, k, rest){
             function k$0(kacc){
               /*<<camlinternalFormat.ml:1597:6>>*/ return make_printf
                      (k, [1, acc, [0, kacc]], rest);
              /*<<camlinternalFormat.ml:1597:70>>*/ }
             return k$0;
            },
          k$1 = k$3(acc$0, k$0, rest$17),
          k$0 = k$1,
          acc$0 = 0,
          fmt$0 = fmt$1;
         continue;
        }
        var
         rest$18 = fmt$0[2],
         fmt$2 = _cP_[1][1],
         k$4 =
           function(acc, k, rest){
            function k$0(kacc){
              /*<<camlinternalFormat.ml:1601:6>>*/ return make_printf
                     (k, [1, acc, [1, kacc]], rest);
             /*<<camlinternalFormat.ml:1601:70>>*/ }
            return k$0;
           },
         k$2 = k$4(acc$0, k$0, rest$18),
         k$0 = k$2,
         acc$0 = 0,
         fmt$0 = fmt$2;
        continue;
       case 19:
         /*<<camlinternalFormat.ml:1558:4>>*/ throw  /*<<camlinternalFormat.ml:1558:4>>*/ caml_maybe_attach_backtrace
               ([0, Assert_failure, _s_], 1);
       case 20:
        var
         rest$19 = fmt$0[3],
         new_acc = [8, acc$0, cst_Printf_bad_conversion];
        return function(param){
          /*<<camlinternalFormat.ml:1578:13>>*/ return make_printf
                 (k$0, new_acc, rest$19); /*<<camlinternalFormat.ml:1578:39>>*/ };
       case 21:
         /*<<camlinternalFormat.ml:1583:4>>*/  /*<<camlinternalFormat.ml:1583:4>>*/ var
         rest$20 = fmt$0[2];
         /*<<camlinternalFormat.ml:1583:4>>*/ return function(n){
          /*<<camlinternalFormat.ml:1584:42>>*/  /*<<camlinternalFormat.ml:1584:42>>*/ var
          new_acc =
            [4,
             acc$0,
              /*<<camlinternalFormat.ml:1584:42>>*/ caml_format_int
              (cst_u$0, n)];
          /*<<camlinternalFormat.ml:1584:42>>*/ return make_printf
                 (k$0, new_acc, rest$20); /*<<camlinternalFormat.ml:1585:32>>*/ };
       case 22:
         /*<<camlinternalFormat.ml:1587:4>>*/  /*<<camlinternalFormat.ml:1587:4>>*/ var
         rest$21 = fmt$0[1];
         /*<<camlinternalFormat.ml:1587:4>>*/ return function(c){
          /*<<camlinternalFormat.ml:1588:6>>*/  /*<<camlinternalFormat.ml:1588:6>>*/ var
          new_acc = [5, acc$0, c];
          /*<<camlinternalFormat.ml:1588:6>>*/ return make_printf
                 (k$0, new_acc, rest$21); /*<<camlinternalFormat.ml:1589:32>>*/ };
       case 23:
        var rest$22 = fmt$0[2], ign = fmt$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (make_ignored_param$0, [0, k$0, acc$0, ign, rest$22]);
        var counter$1 = counter + 1 | 0;
        return make_ignored_param$0(counter$1, k$0, acc$0, ign, rest$22);
       default:
         /*<<camlinternalFormat.ml:1548:33>>*/ var
         rest$23 = fmt$0[3],
         f = fmt$0[2],
         arity = fmt$0[1],
          /*<<camlinternalFormat.ml:1548:33>>*/ _cQ_ =
            /*<<camlinternalFormat.ml:1548:33>>*/ caml_call1(f, 0);
         /*<<camlinternalFormat.ml:1548:33>>*/ if(counter >= 50)
         return caml_trampoline_return
                 (make_custom$0, [0, k$0, acc$0, rest$23, arity, _cQ_]);
        var counter$0 = counter + 1 | 0;
        return make_custom$0(counter$0, k$0, acc$0, rest$23, arity, _cQ_);
     }
    }
    /*<<camlinternalFormat.ml:1605:9>>*/ }
   function make_ignored_param$0(counter, k, acc, ign, fmt){
     /*<<camlinternalFormat.ml:1613:21>>*/ if(typeof ign === "number")
      /*<<camlinternalFormat.ml:1613:21>>*/ switch(ign){
       case 0:
         /*<<camlinternalFormat.ml:1614:39>>*/ if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$0 = counter + 1 | 0;
        return make_invalid_arg(counter$0, k, acc, fmt);
       case 1:
         /*<<camlinternalFormat.ml:1615:39>>*/ if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$1 = counter + 1 | 0;
        return make_invalid_arg(counter$1, k, acc, fmt);
       case 2:
         /*<<camlinternalFormat.ml:1626:39>>*/ throw  /*<<camlinternalFormat.ml:1626:39>>*/ caml_maybe_attach_backtrace
               ([0, Assert_failure, _t_], 1);
       default:
         /*<<camlinternalFormat.ml:1629:39>>*/ if(counter >= 50)
         return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
        var counter$2 = counter + 1 | 0;
        return make_invalid_arg(counter$2, k, acc, fmt);
     }
     /*<<camlinternalFormat.ml:1613:21>>*/ switch(ign[0]){
      case 0:
        /*<<camlinternalFormat.ml:1616:39>>*/ if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$3 = counter + 1 | 0;
       return make_invalid_arg(counter$3, k, acc, fmt);
      case 1:
        /*<<camlinternalFormat.ml:1617:39>>*/ if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$4 = counter + 1 | 0;
       return make_invalid_arg(counter$4, k, acc, fmt);
      case 2:
        /*<<camlinternalFormat.ml:1618:39>>*/ if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$5 = counter + 1 | 0;
       return make_invalid_arg(counter$5, k, acc, fmt);
      case 3:
        /*<<camlinternalFormat.ml:1619:39>>*/ if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$6 = counter + 1 | 0;
       return make_invalid_arg(counter$6, k, acc, fmt);
      case 4:
        /*<<camlinternalFormat.ml:1620:39>>*/ if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$7 = counter + 1 | 0;
       return make_invalid_arg(counter$7, k, acc, fmt);
      case 5:
        /*<<camlinternalFormat.ml:1621:39>>*/ if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$8 = counter + 1 | 0;
       return make_invalid_arg(counter$8, k, acc, fmt);
      case 6:
        /*<<camlinternalFormat.ml:1622:39>>*/ if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$9 = counter + 1 | 0;
       return make_invalid_arg(counter$9, k, acc, fmt);
      case 7:
        /*<<camlinternalFormat.ml:1623:39>>*/ if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$10 = counter + 1 | 0;
       return make_invalid_arg(counter$10, k, acc, fmt);
      case 8:
        /*<<camlinternalFormat.ml:1624:39>>*/ if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$11 = counter + 1 | 0;
       return make_invalid_arg(counter$11, k, acc, fmt);
      case 9:
        /*<<camlinternalFormat.ml:1625:39>>*/  /*<<camlinternalFormat.ml:1625:39>>*/ var
        fmtty = ign[2];
        /*<<camlinternalFormat.ml:1625:39>>*/ if(counter >= 50)
        return caml_trampoline_return
                (make_from_fmtty$0, [0, k, acc, fmtty, fmt]);
       var counter$14 = counter + 1 | 0;
       return make_from_fmtty$0(counter$14, k, acc, fmtty, fmt);
      case 10:
        /*<<camlinternalFormat.ml:1627:39>>*/ if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$12 = counter + 1 | 0;
       return make_invalid_arg(counter$12, k, acc, fmt);
      default:
        /*<<camlinternalFormat.ml:1628:39>>*/ if(counter >= 50)
        return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
       var counter$13 = counter + 1 | 0;
       return make_invalid_arg(counter$13, k, acc, fmt);
    }
    /*<<camlinternalFormat.ml:1629:65>>*/ }
   function make_from_fmtty$0(counter, k, acc, fmtty, fmt){
     /*<<camlinternalFormat.ml:1637:23>>*/ if(typeof fmtty !== "number")
      /*<<camlinternalFormat.ml:1637:23>>*/ switch(fmtty[0]){
       case 0:
         /*<<camlinternalFormat.ml:1638:31>>*/  /*<<camlinternalFormat.ml:1638:31>>*/ var
         rest = fmtty[1];
         /*<<camlinternalFormat.ml:1638:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1638:40>>*/ return make_from_fmtty
                 (k, acc, rest, fmt); /*<<camlinternalFormat.ml:1638:70>>*/ };
       case 1:
         /*<<camlinternalFormat.ml:1639:31>>*/  /*<<camlinternalFormat.ml:1639:31>>*/ var
         rest$0 = fmtty[1];
         /*<<camlinternalFormat.ml:1639:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1639:40>>*/ return make_from_fmtty
                 (k, acc, rest$0, fmt); /*<<camlinternalFormat.ml:1639:70>>*/ };
       case 2:
         /*<<camlinternalFormat.ml:1640:31>>*/  /*<<camlinternalFormat.ml:1640:31>>*/ var
         rest$1 = fmtty[1];
         /*<<camlinternalFormat.ml:1640:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1640:40>>*/ return make_from_fmtty
                 (k, acc, rest$1, fmt); /*<<camlinternalFormat.ml:1640:70>>*/ };
       case 3:
         /*<<camlinternalFormat.ml:1641:31>>*/  /*<<camlinternalFormat.ml:1641:31>>*/ var
         rest$2 = fmtty[1];
         /*<<camlinternalFormat.ml:1641:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1641:40>>*/ return make_from_fmtty
                 (k, acc, rest$2, fmt); /*<<camlinternalFormat.ml:1641:70>>*/ };
       case 4:
         /*<<camlinternalFormat.ml:1642:31>>*/  /*<<camlinternalFormat.ml:1642:31>>*/ var
         rest$3 = fmtty[1];
         /*<<camlinternalFormat.ml:1642:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1642:40>>*/ return make_from_fmtty
                 (k, acc, rest$3, fmt); /*<<camlinternalFormat.ml:1642:70>>*/ };
       case 5:
         /*<<camlinternalFormat.ml:1643:31>>*/  /*<<camlinternalFormat.ml:1643:31>>*/ var
         rest$4 = fmtty[1];
         /*<<camlinternalFormat.ml:1643:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1643:40>>*/ return make_from_fmtty
                 (k, acc, rest$4, fmt); /*<<camlinternalFormat.ml:1643:70>>*/ };
       case 6:
         /*<<camlinternalFormat.ml:1644:31>>*/  /*<<camlinternalFormat.ml:1644:31>>*/ var
         rest$5 = fmtty[1];
         /*<<camlinternalFormat.ml:1644:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1644:40>>*/ return make_from_fmtty
                 (k, acc, rest$5, fmt); /*<<camlinternalFormat.ml:1644:70>>*/ };
       case 7:
         /*<<camlinternalFormat.ml:1645:31>>*/  /*<<camlinternalFormat.ml:1645:31>>*/ var
         rest$6 = fmtty[1];
         /*<<camlinternalFormat.ml:1645:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1645:40>>*/ return make_from_fmtty
                 (k, acc, rest$6, fmt); /*<<camlinternalFormat.ml:1645:70>>*/ };
       case 8:
         /*<<camlinternalFormat.ml:1651:31>>*/  /*<<camlinternalFormat.ml:1651:31>>*/ var
         rest$7 = fmtty[2];
         /*<<camlinternalFormat.ml:1651:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1651:40>>*/ return make_from_fmtty
                 (k, acc, rest$7, fmt); /*<<camlinternalFormat.ml:1651:70>>*/ };
       case 9:
         /*<<camlinternalFormat.ml:1654:13>>*/ var
         rest$8 = fmtty[3],
         ty2 = fmtty[2],
         ty1 = fmtty[1],
          /*<<camlinternalFormat.ml:1654:13>>*/ ty = trans(symm(ty1), ty2);
         /*<<camlinternalFormat.ml:1654:13>>*/ return function(param){
          /*<<camlinternalFormat.ml:1655:35>>*/ return make_from_fmtty
                 (k,
                  acc,
                   /*<<camlinternalFormat.ml:1655:35>>*/ caml_call2
                   (CamlinternalFormatBasics[1], ty, rest$8),
                  fmt); /*<<camlinternalFormat.ml:1655:61>>*/ };
       case 10:
         /*<<camlinternalFormat.ml:1646:31>>*/  /*<<camlinternalFormat.ml:1646:31>>*/ var
         rest$9 = fmtty[1];
         /*<<camlinternalFormat.ml:1646:31>>*/ return function(param, _cO_){
          /*<<camlinternalFormat.ml:1646:42>>*/ return make_from_fmtty
                 (k, acc, rest$9, fmt); /*<<camlinternalFormat.ml:1646:72>>*/ };
       case 11:
         /*<<camlinternalFormat.ml:1647:31>>*/  /*<<camlinternalFormat.ml:1647:31>>*/ var
         rest$10 = fmtty[1];
         /*<<camlinternalFormat.ml:1647:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1647:40>>*/ return make_from_fmtty
                 (k, acc, rest$10, fmt); /*<<camlinternalFormat.ml:1647:70>>*/ };
       case 12:
         /*<<camlinternalFormat.ml:1648:31>>*/  /*<<camlinternalFormat.ml:1648:31>>*/ var
         rest$11 = fmtty[1];
         /*<<camlinternalFormat.ml:1648:31>>*/ return function(param){
          /*<<camlinternalFormat.ml:1648:40>>*/ return make_from_fmtty
                 (k, acc, rest$11, fmt); /*<<camlinternalFormat.ml:1648:70>>*/ };
       case 13:
         /*<<camlinternalFormat.ml:1649:31>>*/ throw  /*<<camlinternalFormat.ml:1649:31>>*/ caml_maybe_attach_backtrace
               ([0, Assert_failure, _u_], 1);
       default:
         /*<<camlinternalFormat.ml:1650:31>>*/ throw  /*<<camlinternalFormat.ml:1650:31>>*/ caml_maybe_attach_backtrace
               ([0, Assert_failure, _v_], 1);
     }
     /*<<camlinternalFormat.ml:1652:31>>*/ if(counter >= 50)
     return caml_trampoline_return(make_invalid_arg, [0, k, acc, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_invalid_arg(counter$0, k, acc, fmt);
    /*<<camlinternalFormat.ml:1655:61>>*/ }
   function make_invalid_arg(counter, k, acc, fmt){
     /*<<camlinternalFormat.ml:1663:2>>*/  /*<<camlinternalFormat.ml:1663:2>>*/ var
     _cN_ = [8, acc, cst_Printf_bad_conversion$0];
     /*<<camlinternalFormat.ml:1663:2>>*/ if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _cN_, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _cN_, fmt);
    /*<<camlinternalFormat.ml:1663:72>>*/ }
   function make_custom$0(counter, k, acc, rest, arity, f){
     /*<<camlinternalFormat.ml:1778:28>>*/ if(arity){
      /*<<camlinternalFormat.ml:1781:4>>*/  /*<<camlinternalFormat.ml:1781:4>>*/ var
      arity$0 = arity[1];
      /*<<camlinternalFormat.ml:1781:4>>*/ return function(x){
       /*<<camlinternalFormat.ml:1782:35>>*/ return make_custom
              (k,
               acc,
               rest,
               arity$0,
                /*<<camlinternalFormat.ml:1782:35>>*/ caml_call1(f, x)); /*<<camlinternalFormat.ml:1782:40>>*/ };
    }
     /*<<camlinternalFormat.ml:1779:19>>*/  /*<<camlinternalFormat.ml:1779:19>>*/ var
     _cM_ = [4, acc, f];
     /*<<camlinternalFormat.ml:1779:19>>*/ if(counter >= 50)
     return caml_trampoline_return(make_printf$0, [0, k, _cM_, rest]);
    var counter$0 = counter + 1 | 0;
    return make_printf$0(counter$0, k, _cM_, rest);
    /*<<camlinternalFormat.ml:1782:40>>*/ }
   function make_printf(k, acc, fmt){
     /*<<?>>*/ return caml_trampoline(make_printf$0(0, k, acc, fmt));
   }
   function make_ignored_param(k, acc, ign, fmt){
     /*<<?>>*/ return caml_trampoline
            (make_ignored_param$0(0, k, acc, ign, fmt));
   }
   function make_from_fmtty(k, acc, fmtty, fmt){
     /*<<?>>*/ return caml_trampoline
            (make_from_fmtty$0(0, k, acc, fmtty, fmt));
   }
   function make_custom(k, acc, rest, arity, f){
     /*<<?>>*/ return caml_trampoline
            (make_custom$0(0, k, acc, rest, arity, f));
   }
   function fn_of_padding_precision(k, o, fmt, pad, prec){
     /*<<camlinternalFormat.ml:1863:26>>*/ if(typeof pad === "number"){
     if(typeof prec !== "number"){
       /*<<camlinternalFormat.ml:1867:14>>*/  /*<<camlinternalFormat.ml:1867:14>>*/ var
       _cl_ = make_iprintf(k, o, fmt);
       /*<<camlinternalFormat.ml:1867:14>>*/ return function(_cL_){
        /*<<?>>*/ return _cl_;};
     }
      /*<<camlinternalFormat.ml:1869:8>>*/ if(prec){
       /*<<camlinternalFormat.ml:1869:21>>*/ var
        /*<<camlinternalFormat.ml:1869:21>>*/ _ci_ = make_iprintf(k, o, fmt),
        /*<<camlinternalFormat.ml:1869:14>>*/ _cj_ =
         function(_cK_){ /*<<?>>*/ return _ci_;};
       /*<<camlinternalFormat.ml:1869:14>>*/ return function(_cJ_){
        /*<<?>>*/ return _cj_;};
     }
      /*<<camlinternalFormat.ml:1865:14>>*/  /*<<camlinternalFormat.ml:1865:14>>*/ var
      _ck_ = make_iprintf(k, o, fmt);
      /*<<camlinternalFormat.ml:1865:14>>*/ return function(_cI_){
       /*<<?>>*/ return _ck_;};
    }
     /*<<camlinternalFormat.ml:1863:26>>*/ if(0 === pad[0]){
     if(typeof prec !== "number"){
       /*<<camlinternalFormat.ml:1873:14>>*/  /*<<camlinternalFormat.ml:1873:14>>*/ var
       _cp_ = make_iprintf(k, o, fmt);
       /*<<camlinternalFormat.ml:1873:14>>*/ return function(_cH_){
        /*<<?>>*/ return _cp_;};
     }
      /*<<camlinternalFormat.ml:1875:8>>*/ if(prec){
       /*<<camlinternalFormat.ml:1875:21>>*/ var
        /*<<camlinternalFormat.ml:1875:21>>*/ _cm_ = make_iprintf(k, o, fmt),
        /*<<camlinternalFormat.ml:1875:14>>*/ _cn_ =
         function(_cG_){ /*<<?>>*/ return _cm_;};
       /*<<camlinternalFormat.ml:1875:14>>*/ return function(_cF_){
        /*<<?>>*/ return _cn_;};
     }
      /*<<camlinternalFormat.ml:1871:14>>*/  /*<<camlinternalFormat.ml:1871:14>>*/ var
      _co_ = make_iprintf(k, o, fmt);
      /*<<camlinternalFormat.ml:1871:14>>*/ return function(_cE_){
       /*<<?>>*/ return _co_;};
    }
    if(typeof prec !== "number"){
      /*<<camlinternalFormat.ml:1879:21>>*/ var
       /*<<camlinternalFormat.ml:1879:21>>*/ _cv_ = make_iprintf(k, o, fmt),
       /*<<camlinternalFormat.ml:1879:14>>*/ _cw_ =
        function(_cD_){ /*<<?>>*/ return _cv_;};
      /*<<camlinternalFormat.ml:1879:14>>*/ return function(_cC_){
       /*<<?>>*/ return _cw_;};
    }
     /*<<camlinternalFormat.ml:1881:8>>*/ if(prec){
      /*<<camlinternalFormat.ml:1881:28>>*/ var
       /*<<camlinternalFormat.ml:1881:28>>*/ _cq_ = make_iprintf(k, o, fmt),
       /*<<camlinternalFormat.ml:1881:21>>*/ _cr_ =
        function(_cB_){ /*<<?>>*/ return _cq_;},
       /*<<camlinternalFormat.ml:1881:14>>*/ _cs_ =
        function(_cA_){ /*<<?>>*/ return _cr_;};
      /*<<camlinternalFormat.ml:1881:14>>*/ return function(_cz_){
       /*<<?>>*/ return _cs_;};
    }
     /*<<camlinternalFormat.ml:1877:21>>*/  /*<<camlinternalFormat.ml:1877:21>>*/ var
     _ct_ = make_iprintf(k, o, fmt);
     /*<<camlinternalFormat.ml:1877:14>>*/ function _cu_(_cy_){
      /*<<?>>*/ return _ct_;
    }
     /*<<camlinternalFormat.ml:1877:14>>*/ return function(_cx_){
      /*<<?>>*/ return _cu_;};
    /*<<camlinternalFormat.ml:1881:52>>*/ }
   function make_iprintf$0(counter, k, o, fmt){
    var k$0 = k, fmt$0 = fmt;
     /*<<camlinternalFormat.ml:1788:17>>*/ for(;;){
      /*<<camlinternalFormat.ml:1788:17>>*/ if(typeof fmt$0 === "number")
       /*<<camlinternalFormat.ml:1858:8>>*/ return  /*<<camlinternalFormat.ml:1858:8>>*/ caml_call1
              (k$0, o);
      /*<<camlinternalFormat.ml:1788:17>>*/ switch(fmt$0[0]){
       case 0:
         /*<<camlinternalFormat.ml:1790:8>>*/ var
          /*<<camlinternalFormat.ml:1790:8>>*/ rest = fmt$0[1],
          /*<<camlinternalFormat.ml:1790:14>>*/ _by_ =
           make_iprintf(k$0, o, rest);
         /*<<camlinternalFormat.ml:1790:14>>*/ return function(_ch_){
          /*<<?>>*/ return _by_;};
       case 1:
         /*<<camlinternalFormat.ml:1792:8>>*/ var
          /*<<camlinternalFormat.ml:1792:8>>*/ rest$0 = fmt$0[1],
          /*<<camlinternalFormat.ml:1792:14>>*/ _bz_ =
           make_iprintf(k$0, o, rest$0);
         /*<<camlinternalFormat.ml:1792:14>>*/ return function(_cg_){
          /*<<?>>*/ return _bz_;};
       case 2:
        var _bA_ = fmt$0[1];
        if(typeof _bA_ === "number"){
          /*<<camlinternalFormat.ml:1794:8>>*/ var
           /*<<camlinternalFormat.ml:1794:8>>*/ rest$1 = fmt$0[2],
           /*<<camlinternalFormat.ml:1794:14>>*/ _bB_ =
            make_iprintf(k$0, o, rest$1);
          /*<<camlinternalFormat.ml:1794:14>>*/ return function(_cf_){
           /*<<?>>*/ return _bB_;};
        }
        if(0 === _bA_[0]){
          /*<<camlinternalFormat.ml:1796:8>>*/ var
           /*<<camlinternalFormat.ml:1796:8>>*/ rest$2 = fmt$0[2],
           /*<<camlinternalFormat.ml:1796:14>>*/ _bC_ =
            make_iprintf(k$0, o, rest$2);
          /*<<camlinternalFormat.ml:1796:14>>*/ return function(_ce_){
           /*<<?>>*/ return _bC_;};
        }
         /*<<camlinternalFormat.ml:1798:8>>*/ var
          /*<<camlinternalFormat.ml:1798:8>>*/ rest$3 = fmt$0[2],
          /*<<camlinternalFormat.ml:1798:21>>*/ _bD_ =
           make_iprintf(k$0, o, rest$3),
          /*<<camlinternalFormat.ml:1798:14>>*/ _bE_ =
           function(_cd_){ /*<<?>>*/ return _bD_;};
         /*<<camlinternalFormat.ml:1798:14>>*/ return function(_cc_){
          /*<<?>>*/ return _bE_;};
       case 3:
        var _bF_ = fmt$0[1];
        if(typeof _bF_ === "number"){
          /*<<camlinternalFormat.ml:1800:8>>*/ var
           /*<<camlinternalFormat.ml:1800:8>>*/ rest$4 = fmt$0[2],
           /*<<camlinternalFormat.ml:1800:14>>*/ _bG_ =
            make_iprintf(k$0, o, rest$4);
          /*<<camlinternalFormat.ml:1800:14>>*/ return function(_cb_){
           /*<<?>>*/ return _bG_;};
        }
        if(0 === _bF_[0]){
          /*<<camlinternalFormat.ml:1802:8>>*/ var
           /*<<camlinternalFormat.ml:1802:8>>*/ rest$5 = fmt$0[2],
           /*<<camlinternalFormat.ml:1802:14>>*/ _bH_ =
            make_iprintf(k$0, o, rest$5);
          /*<<camlinternalFormat.ml:1802:14>>*/ return function(_ca_){
           /*<<?>>*/ return _bH_;};
        }
         /*<<camlinternalFormat.ml:1804:8>>*/ var
          /*<<camlinternalFormat.ml:1804:8>>*/ rest$6 = fmt$0[2],
          /*<<camlinternalFormat.ml:1804:21>>*/ _bI_ =
           make_iprintf(k$0, o, rest$6),
          /*<<camlinternalFormat.ml:1804:14>>*/ _bJ_ =
           function(_b$_){ /*<<?>>*/ return _bI_;};
         /*<<camlinternalFormat.ml:1804:14>>*/ return function(_b__){
          /*<<?>>*/ return _bJ_;};
       case 4:
        var rest$7 = fmt$0[4], prec = fmt$0[3], pad = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$7, pad, prec);
       case 5:
        var rest$8 = fmt$0[4], prec$0 = fmt$0[3], pad$0 = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$8, pad$0, prec$0);
       case 6:
        var rest$9 = fmt$0[4], prec$1 = fmt$0[3], pad$1 = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$9, pad$1, prec$1);
       case 7:
        var rest$10 = fmt$0[4], prec$2 = fmt$0[3], pad$2 = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$10, pad$2, prec$2);
       case 8:
        var rest$11 = fmt$0[4], prec$3 = fmt$0[3], pad$3 = fmt$0[2];
        return fn_of_padding_precision(k$0, o, rest$11, pad$3, prec$3);
       case 9:
        var _bK_ = fmt$0[1];
        if(typeof _bK_ === "number"){
          /*<<camlinternalFormat.ml:1816:8>>*/ var
           /*<<camlinternalFormat.ml:1816:8>>*/ rest$12 = fmt$0[2],
           /*<<camlinternalFormat.ml:1816:14>>*/ _bL_ =
            make_iprintf(k$0, o, rest$12);
          /*<<camlinternalFormat.ml:1816:14>>*/ return function(_b9_){
           /*<<?>>*/ return _bL_;};
        }
        if(0 === _bK_[0]){
          /*<<camlinternalFormat.ml:1818:8>>*/ var
           /*<<camlinternalFormat.ml:1818:8>>*/ rest$13 = fmt$0[2],
           /*<<camlinternalFormat.ml:1818:14>>*/ _bM_ =
            make_iprintf(k$0, o, rest$13);
          /*<<camlinternalFormat.ml:1818:14>>*/ return function(_b8_){
           /*<<?>>*/ return _bM_;};
        }
         /*<<camlinternalFormat.ml:1820:8>>*/ var
          /*<<camlinternalFormat.ml:1820:8>>*/ rest$14 = fmt$0[2],
          /*<<camlinternalFormat.ml:1820:21>>*/ _bN_ =
           make_iprintf(k$0, o, rest$14),
          /*<<camlinternalFormat.ml:1820:14>>*/ _bO_ =
           function(_b7_){ /*<<?>>*/ return _bN_;};
         /*<<camlinternalFormat.ml:1820:14>>*/ return function(_b6_){
          /*<<?>>*/ return _bO_;};
       case 10:
         /*<<camlinternalFormat.ml:1832:8>>*/ var
          /*<<camlinternalFormat.ml:1832:8>>*/ rest$15 = fmt$0[1],
         fmt$0 = rest$15;
        continue;
       case 11:
         /*<<camlinternalFormat.ml:1834:8>>*/ var
          /*<<camlinternalFormat.ml:1834:8>>*/ rest$16 = fmt$0[2],
         fmt$0 = rest$16;
        continue;
       case 12:
         /*<<camlinternalFormat.ml:1836:8>>*/ var
          /*<<camlinternalFormat.ml:1836:8>>*/ rest$17 = fmt$0[2],
         fmt$0 = rest$17;
        continue;
       case 13:
         /*<<camlinternalFormat.ml:1838:8>>*/ var
          /*<<camlinternalFormat.ml:1838:8>>*/ rest$18 = fmt$0[3],
          /*<<camlinternalFormat.ml:1838:14>>*/ _bP_ =
           make_iprintf(k$0, o, rest$18);
         /*<<camlinternalFormat.ml:1838:14>>*/ return function(_b5_){
          /*<<?>>*/ return _bP_;};
       case 14:
        var rest$19 = fmt$0[3], fmtty = fmt$0[2];
        return function(param){
          /*<<camlinternalFormat.ml:1840:8>>*/ var
           /*<<camlinternalFormat.ml:1840:8>>*/ fmt = param[1],
           /*<<camlinternalFormat.ml:1842:24>>*/ _b4_ = recast(fmt, fmtty);
          /*<<camlinternalFormat.ml:1842:12>>*/ return make_iprintf
                 (k$0,
                  o,
                   /*<<camlinternalFormat.ml:1842:12>>*/ caml_call2
                   (CamlinternalFormatBasics[3], _b4_, rest$19)); /*<<camlinternalFormat.ml:1842:48>>*/ };
       case 15:
         /*<<camlinternalFormat.ml:1822:8>>*/ var
          /*<<camlinternalFormat.ml:1822:8>>*/ rest$20 = fmt$0[1],
          /*<<camlinternalFormat.ml:1822:21>>*/ _bQ_ =
           make_iprintf(k$0, o, rest$20),
          /*<<camlinternalFormat.ml:1822:14>>*/ _bR_ =
           function(_b3_){ /*<<?>>*/ return _bQ_;};
         /*<<camlinternalFormat.ml:1822:14>>*/ return function(_b2_){
          /*<<?>>*/ return _bR_;};
       case 16:
         /*<<camlinternalFormat.ml:1824:8>>*/ var
          /*<<camlinternalFormat.ml:1824:8>>*/ rest$21 = fmt$0[1],
          /*<<camlinternalFormat.ml:1824:14>>*/ _bS_ =
           make_iprintf(k$0, o, rest$21);
         /*<<camlinternalFormat.ml:1824:14>>*/ return function(_b1_){
          /*<<?>>*/ return _bS_;};
       case 17:
         /*<<camlinternalFormat.ml:1852:8>>*/ var
          /*<<camlinternalFormat.ml:1852:8>>*/ rest$22 = fmt$0[2],
         fmt$0 = rest$22;
        continue;
       case 18:
        var _bT_ = fmt$0[1];
        if(0 === _bT_[0]){
         var
          rest$23 = fmt$0[2],
          fmt$1 = _bT_[1][1],
          k$3 =
            function(k, rest){
             function k$0(koc){
               /*<<camlinternalFormat.ml:1854:33>>*/ return make_iprintf
                      (k, koc, rest);
              /*<<camlinternalFormat.ml:1854:56>>*/ }
             return k$0;
            },
          k$1 = k$3(k$0, rest$23),
          k$0 = k$1,
          fmt$0 = fmt$1;
         continue;
        }
        var
         rest$24 = fmt$0[2],
         fmt$2 = _bT_[1][1],
         k$4 =
           function(k, rest){
            function k$0(koc){
              /*<<camlinternalFormat.ml:1856:33>>*/ return make_iprintf
                     (k, koc, rest);
             /*<<camlinternalFormat.ml:1856:56>>*/ }
            return k$0;
           },
         k$2 = k$4(k$0, rest$24),
         k$0 = k$2,
         fmt$0 = fmt$2;
        continue;
       case 19:
         /*<<camlinternalFormat.ml:1830:8>>*/ throw  /*<<camlinternalFormat.ml:1830:8>>*/ caml_maybe_attach_backtrace
               ([0, Assert_failure, _w_], 1);
       case 20:
         /*<<camlinternalFormat.ml:1844:8>>*/ var
          /*<<camlinternalFormat.ml:1844:8>>*/ rest$25 = fmt$0[3],
          /*<<camlinternalFormat.ml:1844:14>>*/ _bU_ =
           make_iprintf(k$0, o, rest$25);
         /*<<camlinternalFormat.ml:1844:14>>*/ return function(_b0_){
          /*<<?>>*/ return _bU_;};
       case 21:
         /*<<camlinternalFormat.ml:1846:8>>*/ var
          /*<<camlinternalFormat.ml:1846:8>>*/ rest$26 = fmt$0[2],
          /*<<camlinternalFormat.ml:1846:14>>*/ _bV_ =
           make_iprintf(k$0, o, rest$26);
         /*<<camlinternalFormat.ml:1846:14>>*/ return function(_bZ_){
          /*<<?>>*/ return _bV_;};
       case 22:
         /*<<camlinternalFormat.ml:1848:8>>*/ var
          /*<<camlinternalFormat.ml:1848:8>>*/ rest$27 = fmt$0[1],
          /*<<camlinternalFormat.ml:1848:14>>*/ _bW_ =
           make_iprintf(k$0, o, rest$27);
         /*<<camlinternalFormat.ml:1848:14>>*/ return function(_bY_){
          /*<<?>>*/ return _bW_;};
       case 23:
        var rest$28 = fmt$0[2], ign = fmt$0[1], _bX_ = 0;
        return make_ignored_param
                (function(param){
                   /*<<camlinternalFormat.ml:1850:37>>*/ return  /*<<camlinternalFormat.ml:1850:37>>*/ caml_call1
                          (k$0, o);
                  /*<<camlinternalFormat.ml:1850:40>>*/ },
                 _bX_,
                 ign,
                 rest$28);
       default:
        var rest$29 = fmt$0[3], arity = fmt$0[1];
        if(counter >= 50)
         return caml_trampoline_return
                 (fn_of_custom_arity$0, [0, k$0, o, rest$29, arity]);
        var counter$0 = counter + 1 | 0;
        return fn_of_custom_arity$0(counter$0, k$0, o, rest$29, arity);
     }
    }
    /*<<camlinternalFormat.ml:1858:11>>*/ }
   function fn_of_custom_arity$0(counter, k, o, fmt, param){
     /*<<camlinternalFormat.ml:1882:4>>*/ if(param){
      /*<<camlinternalFormat.ml:1889:8>>*/ var
       /*<<camlinternalFormat.ml:1889:8>>*/ arity = param[1],
       /*<<camlinternalFormat.ml:1889:14>>*/ _bw_ =
        fn_of_custom_arity(k, o, fmt, arity);
      /*<<camlinternalFormat.ml:1889:14>>*/ return function(_bx_){
       /*<<?>>*/ return _bw_;};
    }
     /*<<camlinternalFormat.ml:1887:8>>*/ if(counter >= 50)
     return caml_trampoline_return(make_iprintf$0, [0, k, o, fmt]);
    var counter$0 = counter + 1 | 0;
    return make_iprintf$0(counter$0, k, o, fmt);
    /*<<camlinternalFormat.ml:1889:48>>*/ }
   function make_iprintf(k, o, fmt){
     /*<<?>>*/ return caml_trampoline(make_iprintf$0(0, k, o, fmt));
   }
   function fn_of_custom_arity(k, o, fmt, param){
     /*<<?>>*/ return caml_trampoline
            (fn_of_custom_arity$0(0, k, o, fmt, param));
   }
   function output_acc(o, acc){
    var acc$0 = acc;
     /*<<camlinternalFormat.ml:1897:27>>*/ for(;;){
      /*<<camlinternalFormat.ml:1897:27>>*/ if(typeof acc$0 === "number")
       /*<<camlinternalFormat.ml:1912:32>>*/ return 0;
      /*<<camlinternalFormat.ml:1897:27>>*/ switch(acc$0[0]){
       case 0:
         /*<<camlinternalFormat.ml:1899:12>>*/ var
         fmting_lit = acc$0[2],
         p = acc$0[1],
          /*<<camlinternalFormat.ml:1899:12>>*/ s =
           string_of_formatting_lit(fmting_lit);
         /*<<camlinternalFormat.ml:1900:4>>*/ output_acc(o, p);
         /*<<camlinternalFormat.ml:1900:4>>*/ return  /*<<camlinternalFormat.ml:1900:4>>*/ caml_call2
                (Stdlib[66], o, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
          /*<<camlinternalFormat.ml:1902:4>>*/  /*<<camlinternalFormat.ml:1902:4>>*/ var
          acc$1 = match[1];
          /*<<camlinternalFormat.ml:1902:4>>*/ output_acc(o, p$0);
          /*<<camlinternalFormat.ml:1902:20>>*/  /*<<camlinternalFormat.ml:1902:20>>*/ caml_call2
          (Stdlib[66], o, cst$18);
         var acc$0 = acc$1;
         continue;
        }
        var acc$2 = match[1];
         /*<<camlinternalFormat.ml:1904:4>>*/ output_acc(o, p$0);
         /*<<camlinternalFormat.ml:1904:20>>*/  /*<<camlinternalFormat.ml:1904:20>>*/ caml_call2
         (Stdlib[66], o, cst$19);
        var acc$0 = acc$2;
        continue;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
         /*<<camlinternalFormat.ml:1909:32>>*/ output_acc(o, p$3);
         /*<<camlinternalFormat.ml:1909:32>>*/ return  /*<<camlinternalFormat.ml:1909:32>>*/ caml_call1
                (f, o);
       case 7:
         /*<<camlinternalFormat.ml:1910:32>>*/  /*<<camlinternalFormat.ml:1910:32>>*/ var
         p$4 = acc$0[1];
         /*<<camlinternalFormat.ml:1910:32>>*/ output_acc(o, p$4);
         /*<<camlinternalFormat.ml:1910:32>>*/ return  /*<<camlinternalFormat.ml:1910:32>>*/ caml_call1
                (Stdlib[63], o);
       case 8:
        var msg = acc$0[2], p$5 = acc$0[1];
         /*<<camlinternalFormat.ml:1911:32>>*/ output_acc(o, p$5);
         /*<<camlinternalFormat.ml:1911:32>>*/ return  /*<<camlinternalFormat.ml:1911:32>>*/ caml_call1
                (Stdlib[1], msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
         /*<<camlinternalFormat.ml:1906:32>>*/ output_acc(o, p$1);
         /*<<camlinternalFormat.ml:1906:32>>*/ return  /*<<camlinternalFormat.ml:1906:32>>*/ caml_call2
                (Stdlib[66], o, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
         /*<<camlinternalFormat.ml:1908:32>>*/ output_acc(o, p$2);
         /*<<camlinternalFormat.ml:1908:32>>*/ return  /*<<camlinternalFormat.ml:1908:32>>*/ caml_call2
                (Stdlib[65], o, c);
     }
    }
    /*<<camlinternalFormat.ml:1912:34>>*/ }
   function bufput_acc(b, acc){
    var acc$0 = acc;
     /*<<camlinternalFormat.ml:1917:27>>*/ for(;;){
      /*<<camlinternalFormat.ml:1917:27>>*/ if(typeof acc$0 === "number")
       /*<<camlinternalFormat.ml:1932:32>>*/ return 0;
      /*<<camlinternalFormat.ml:1917:27>>*/ switch(acc$0[0]){
       case 0:
         /*<<camlinternalFormat.ml:1919:12>>*/ var
         fmting_lit = acc$0[2],
         p = acc$0[1],
          /*<<camlinternalFormat.ml:1919:12>>*/ s =
           string_of_formatting_lit(fmting_lit);
         /*<<camlinternalFormat.ml:1920:4>>*/ bufput_acc(b, p);
         /*<<camlinternalFormat.ml:1920:4>>*/ return  /*<<camlinternalFormat.ml:1920:4>>*/ caml_call2
                (Stdlib_Buffer[16], b, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
          /*<<camlinternalFormat.ml:1922:4>>*/  /*<<camlinternalFormat.ml:1922:4>>*/ var
          acc$1 = match[1];
          /*<<camlinternalFormat.ml:1922:4>>*/ bufput_acc(b, p$0);
          /*<<camlinternalFormat.ml:1922:20>>*/  /*<<camlinternalFormat.ml:1922:20>>*/ caml_call2
          (Stdlib_Buffer[16], b, cst$20);
         var acc$0 = acc$1;
         continue;
        }
        var acc$2 = match[1];
         /*<<camlinternalFormat.ml:1924:4>>*/ bufput_acc(b, p$0);
         /*<<camlinternalFormat.ml:1924:20>>*/  /*<<camlinternalFormat.ml:1924:20>>*/ caml_call2
         (Stdlib_Buffer[16], b, cst$21);
        var acc$0 = acc$2;
        continue;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
         /*<<camlinternalFormat.ml:1929:32>>*/ bufput_acc(b, p$3);
         /*<<camlinternalFormat.ml:1929:32>>*/ return  /*<<camlinternalFormat.ml:1929:32>>*/ caml_call1
                (f, b);
       case 7:
         /*<<camlinternalFormat.ml:1930:32>>*/ var
          /*<<camlinternalFormat.ml:1930:32>>*/ acc$3 = acc$0[1],
         acc$0 = acc$3;
        continue;
       case 8:
        var msg = acc$0[2], p$4 = acc$0[1];
         /*<<camlinternalFormat.ml:1931:32>>*/ bufput_acc(b, p$4);
         /*<<camlinternalFormat.ml:1931:32>>*/ return  /*<<camlinternalFormat.ml:1931:32>>*/ caml_call1
                (Stdlib[1], msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
         /*<<camlinternalFormat.ml:1926:32>>*/ bufput_acc(b, p$1);
         /*<<camlinternalFormat.ml:1926:32>>*/ return  /*<<camlinternalFormat.ml:1926:32>>*/ caml_call2
                (Stdlib_Buffer[16], b, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
         /*<<camlinternalFormat.ml:1928:32>>*/ bufput_acc(b, p$2);
         /*<<camlinternalFormat.ml:1928:32>>*/ return  /*<<camlinternalFormat.ml:1928:32>>*/ caml_call2
                (Stdlib_Buffer[12], b, c);
     }
    }
    /*<<camlinternalFormat.ml:1932:34>>*/ }
   function strput_acc(b, acc){
    var acc$0 = acc;
     /*<<camlinternalFormat.ml:1938:27>>*/ for(;;){
      /*<<camlinternalFormat.ml:1938:27>>*/ if(typeof acc$0 === "number")
       /*<<camlinternalFormat.ml:1953:32>>*/ return 0;
      /*<<camlinternalFormat.ml:1938:27>>*/ switch(acc$0[0]){
       case 0:
         /*<<camlinternalFormat.ml:1940:12>>*/ var
         fmting_lit = acc$0[2],
         p = acc$0[1],
          /*<<camlinternalFormat.ml:1940:12>>*/ s =
           string_of_formatting_lit(fmting_lit);
         /*<<camlinternalFormat.ml:1941:4>>*/ strput_acc(b, p);
         /*<<camlinternalFormat.ml:1941:4>>*/ return  /*<<camlinternalFormat.ml:1941:4>>*/ caml_call2
                (Stdlib_Buffer[16], b, s);
       case 1:
        var match = acc$0[2], p$0 = acc$0[1];
        if(0 === match[0]){
          /*<<camlinternalFormat.ml:1943:4>>*/  /*<<camlinternalFormat.ml:1943:4>>*/ var
          acc$1 = match[1];
          /*<<camlinternalFormat.ml:1943:4>>*/ strput_acc(b, p$0);
          /*<<camlinternalFormat.ml:1943:20>>*/  /*<<camlinternalFormat.ml:1943:20>>*/ caml_call2
          (Stdlib_Buffer[16], b, cst$22);
         var acc$0 = acc$1;
         continue;
        }
        var acc$2 = match[1];
         /*<<camlinternalFormat.ml:1945:4>>*/ strput_acc(b, p$0);
         /*<<camlinternalFormat.ml:1945:20>>*/  /*<<camlinternalFormat.ml:1945:20>>*/ caml_call2
         (Stdlib_Buffer[16], b, cst$23);
        var acc$0 = acc$2;
        continue;
       case 6:
        var f = acc$0[2], p$3 = acc$0[1];
         /*<<camlinternalFormat.ml:1950:32>>*/ strput_acc(b, p$3);
         /*<<camlinternalFormat.ml:1950:68>>*/  /*<<camlinternalFormat.ml:1950:68>>*/ var
         _bv_ =  /*<<camlinternalFormat.ml:1950:68>>*/ caml_call1(f, 0);
         /*<<camlinternalFormat.ml:1950:68>>*/ return  /*<<camlinternalFormat.ml:1950:68>>*/ caml_call2
                (Stdlib_Buffer[16], b, _bv_);
       case 7:
         /*<<camlinternalFormat.ml:1951:32>>*/ var
          /*<<camlinternalFormat.ml:1951:32>>*/ acc$3 = acc$0[1],
         acc$0 = acc$3;
        continue;
       case 8:
        var msg = acc$0[2], p$4 = acc$0[1];
         /*<<camlinternalFormat.ml:1952:32>>*/ strput_acc(b, p$4);
         /*<<camlinternalFormat.ml:1952:32>>*/ return  /*<<camlinternalFormat.ml:1952:32>>*/ caml_call1
                (Stdlib[1], msg);
       case 2:
       case 4:
        var s$0 = acc$0[2], p$1 = acc$0[1];
         /*<<camlinternalFormat.ml:1947:32>>*/ strput_acc(b, p$1);
         /*<<camlinternalFormat.ml:1947:32>>*/ return  /*<<camlinternalFormat.ml:1947:32>>*/ caml_call2
                (Stdlib_Buffer[16], b, s$0);
       default:
        var c = acc$0[2], p$2 = acc$0[1];
         /*<<camlinternalFormat.ml:1949:32>>*/ strput_acc(b, p$2);
         /*<<camlinternalFormat.ml:1949:32>>*/ return  /*<<camlinternalFormat.ml:1949:32>>*/ caml_call2
                (Stdlib_Buffer[12], b, c);
     }
    }
    /*<<camlinternalFormat.ml:1953:34>>*/ }
   function failwith_message(param){
     /*<<camlinternalFormat.ml:1960:12>>*/ var
     fmt = param[1],
      /*<<camlinternalFormat.ml:1960:12>>*/ buf =
        /*<<camlinternalFormat.ml:1960:12>>*/ caml_call1
        (Stdlib_Buffer[1], 256);
     /*<<camlinternalFormat.ml:1960:12>>*/ function k(acc){
      /*<<camlinternalFormat.ml:1961:14>>*/ strput_acc(buf, acc);
      /*<<camlinternalFormat.ml:1961:43>>*/  /*<<camlinternalFormat.ml:1961:43>>*/ var
      _bu_ =
         /*<<camlinternalFormat.ml:1961:43>>*/ caml_call1
         (Stdlib_Buffer[2], buf);
      /*<<camlinternalFormat.ml:1961:43>>*/ return  /*<<camlinternalFormat.ml:1961:43>>*/ caml_call1
             (Stdlib[2], _bu_);
     /*<<camlinternalFormat.ml:1961:64>>*/ }
     /*<<camlinternalFormat.ml:1960:12>>*/ return make_printf(k, 0, fmt);
   }
   function open_box_of_string(str){
     /*<<camlinternalFormat.ml:1969:5>>*/ if
     ( /*<<camlinternalFormat.ml:1969:5>>*/ runtime.caml_string_equal
       (str, cst$43))
      /*<<camlinternalFormat.ml:1969:19>>*/ return _x_;
     /*<<camlinternalFormat.ml:1970:4>>*/  /*<<camlinternalFormat.ml:1970:4>>*/ var
     len =  /*<<camlinternalFormat.ml:1970:4>>*/ caml_ml_string_length(str);
     /*<<camlinternalFormat.ml:1970:4>>*/ function invalid_box(param){
      /*<<camlinternalFormat.ml:1971:25>>*/ return  /*<<camlinternalFormat.ml:1971:25>>*/ caml_call1
             (failwith_message(_y_), str);
     /*<<camlinternalFormat.ml:1971:74>>*/ }
     /*<<camlinternalFormat.ml:1970:4>>*/ function parse_spaces(i){
     var i$0 = i;
      /*<<camlinternalFormat.ml:1973:6>>*/ for(;;){
       /*<<camlinternalFormat.ml:1973:6>>*/ if(i$0 === len)
        /*<<camlinternalFormat.ml:1973:22>>*/ return i$0;
       /*<<camlinternalFormat.ml:1974:14>>*/  /*<<camlinternalFormat.ml:1974:14>>*/ var
       match =
          /*<<camlinternalFormat.ml:1974:14>>*/ caml_string_get(str, i$0);
      if(9 !== match && 32 !== match)
        /*<<camlinternalFormat.ml:1976:15>>*/ return i$0;
       /*<<camlinternalFormat.ml:1975:24>>*/ var
        /*<<camlinternalFormat.ml:1975:24>>*/ i$1 = i$0 + 1 | 0,
       i$0 = i$1;
     }
     /*<<camlinternalFormat.ml:1976:16>>*/ }
     /*<<camlinternalFormat.ml:1987:17>>*/ var
      /*<<camlinternalFormat.ml:1987:17>>*/ wstart = parse_spaces(0),
     wend = wstart;
     /*<<camlinternalFormat.ml:1978:6>>*/ for(;;){
      /*<<camlinternalFormat.ml:1979:14>>*/ if
      (wend !== len
       &&
        25
        >=
          /*<<camlinternalFormat.ml:1979:14>>*/ caml_string_get(str, wend)
         - 97
         >>> 0){
       /*<<camlinternalFormat.ml:1980:24>>*/ var
        /*<<camlinternalFormat.ml:1980:24>>*/ j = wend + 1 | 0,
       wend = j;
      continue;
     }
      /*<<camlinternalFormat.ml:1989:19>>*/ var
       /*<<camlinternalFormat.ml:1989:19>>*/ box_name =
         /*<<camlinternalFormat.ml:1989:19>>*/ caml_call3
         (Stdlib_String[15], str, wstart, wend - wstart | 0),
       /*<<camlinternalFormat.ml:1990:17>>*/ nstart = parse_spaces(wend),
      nend = nstart;
      /*<<camlinternalFormat.ml:1983:6>>*/ for(;;){
       /*<<camlinternalFormat.ml:1983:6>>*/ if(nend !== len){
        /*<<camlinternalFormat.ml:1984:14>>*/ var
         /*<<camlinternalFormat.ml:1984:14>>*/ match =
           /*<<camlinternalFormat.ml:1984:14>>*/ caml_string_get(str, nend),
        switch$0 = 0;
        /*<<camlinternalFormat.ml:1984:14>>*/ if(48 <= match){
        if(58 > match) switch$0 = 1;
       }
       else if(45 === match) switch$0 = 1;
       if(switch$0){
         /*<<camlinternalFormat.ml:1985:30>>*/ var
          /*<<camlinternalFormat.ml:1985:30>>*/ j$0 = nend + 1 | 0,
         nend = j$0;
        continue;
       }
      }
      if(nstart === nend)
       var indent = 0;
      else
       try{
         /*<<camlinternalFormat.ml:1994:65>>*/ var
          /*<<camlinternalFormat.ml:1994:65>>*/ _bs_ =
            /*<<camlinternalFormat.ml:1994:65>>*/ runtime.caml_int_of_string
            ( /*<<camlinternalFormat.ml:1994:26>>*/ caml_call3
              (Stdlib_String[15], str, nstart, nend - nstart | 0)),
         indent = _bs_;
       }
       catch(_bt_){
        var _br_ = caml_wrap_exception(_bt_);
        if(_br_[1] !== Stdlib[7]) throw caml_maybe_attach_backtrace(_br_, 0);
        var indent = invalid_box(0);
       }
       /*<<camlinternalFormat.ml:1996:18>>*/  /*<<camlinternalFormat.ml:1996:18>>*/ var
       exp_end = parse_spaces(nend);
       /*<<camlinternalFormat.ml:1996:18>>*/ if(exp_end !== len)
        /*<<camlinternalFormat.ml:1997:27>>*/ invalid_box(0);
      var switch$1 = 0;
      if
       ( /*<<camlinternalFormat.ml:1997:41>>*/ caml_string_notequal
         (box_name, cst$43)
        && caml_string_notequal(box_name, "b"))
       var
        box_type =
          caml_string_notequal(box_name, "h")
           ? caml_string_notequal
              (box_name, "hov")
             ? caml_string_notequal
                (box_name, "hv")
               ? caml_string_notequal(box_name, "v") ? invalid_box(0) : 1
               : 2
             : 3
           : 0;
      else
       switch$1 = 1;
      if(switch$1) var box_type = 4;
       /*<<camlinternalFormat.ml:2005:4>>*/ return [0, indent, box_type];
     }
    }
    /*<<camlinternalFormat.ml:2005:22>>*/ }
   function make_padding_fmt_ebb(pad, fmt){
     /*<<camlinternalFormat.ml:2015:15>>*/ if(typeof pad === "number")
      /*<<camlinternalFormat.ml:2016:26>>*/ return [0, 0, fmt];
     /*<<camlinternalFormat.ml:2015:15>>*/ if(0 === pad[0]){
     var w = pad[2], s = pad[1];
     return [0, [0, s, w], fmt];
    }
     /*<<camlinternalFormat.ml:2018:26>>*/  /*<<camlinternalFormat.ml:2018:26>>*/ var
     s$0 = pad[1];
     /*<<camlinternalFormat.ml:2018:26>>*/ return [0, [1, s$0], fmt];
    /*<<camlinternalFormat.ml:2018:62>>*/ }
   function make_padprec_fmt_ebb(pad, prec, fmt){
     /*<<camlinternalFormat.ml:2025:16>>*/ if(typeof prec === "number")
      /*<<camlinternalFormat.ml:2028:23>>*/  /*<<camlinternalFormat.ml:2028:23>>*/ var
      match = prec ? [0, 1, fmt] : [0, 0, fmt];
    else
      /*<<camlinternalFormat.ml:2027:23>>*/ var
       /*<<camlinternalFormat.ml:2027:23>>*/ p = prec[1],
      match = [0, [0, p], fmt];
    var prec$0 = match[1];
    if(typeof pad === "number")
      /*<<camlinternalFormat.ml:2040:26>>*/ return [0, 0, prec$0, fmt];
    if(0 === pad[0]){
     var w = pad[2], s = pad[1];
     return [0, [0, s, w], prec$0, fmt];
    }
     /*<<camlinternalFormat.ml:2042:26>>*/  /*<<camlinternalFormat.ml:2042:26>>*/ var
     s$0 = pad[1];
     /*<<camlinternalFormat.ml:2042:26>>*/ return [0, [1, s$0], prec$0, fmt];
    /*<<camlinternalFormat.ml:2042:69>>*/ }
   function fmt_ebb_of_string(legacy_behavior, str){
     /*<<camlinternalFormat.ml:2066:2>>*/ if(legacy_behavior)
      /*<<camlinternalFormat.ml:2067:19>>*/ var
       /*<<camlinternalFormat.ml:2067:19>>*/ flag = legacy_behavior[1],
      legacy_behavior$0 = flag;
    else
     var legacy_behavior$0 = 1;
     /*<<camlinternalFormat.ml:2083:2>>*/ function invalid_format_message
    (str_ind, msg){
      /*<<camlinternalFormat.ml:2084:4>>*/ return  /*<<camlinternalFormat.ml:2084:4>>*/ caml_call3
             (failwith_message(_z_), str, str_ind, msg);
     /*<<camlinternalFormat.ml:2086:21>>*/ }
     /*<<camlinternalFormat.ml:2083:2>>*/ function unexpected_end_of_format
    (end_ind){
      /*<<camlinternalFormat.ml:2092:4>>*/ return invalid_format_message
             (end_ind, cst_unexpected_end_of_format);
     /*<<camlinternalFormat.ml:2093:32>>*/ }
     /*<<camlinternalFormat.ml:2083:2>>*/ function invalid_format_without
    (str_ind, c, s){
      /*<<camlinternalFormat.ml:2104:4>>*/ return  /*<<camlinternalFormat.ml:2104:4>>*/ caml_call4
             (failwith_message(_A_), str, str_ind, c, s);
     /*<<camlinternalFormat.ml:2106:21>>*/ }
     /*<<camlinternalFormat.ml:2083:2>>*/ function expected_character
    (str_ind, expected, read){
      /*<<camlinternalFormat.ml:2112:4>>*/ return  /*<<camlinternalFormat.ml:2112:4>>*/ caml_call4
             (failwith_message(_B_), str, str_ind, expected, read);
     /*<<camlinternalFormat.ml:2114:31>>*/ }
     /*<<camlinternalFormat.ml:2083:2>>*/ function add_literal
    (lit_start, str_ind, fmt){
      /*<<camlinternalFormat.ml:2843:31>>*/  /*<<camlinternalFormat.ml:2843:31>>*/ var
      size = str_ind - lit_start | 0;
      /*<<camlinternalFormat.ml:2843:31>>*/ return 0 === size
             ? [0, fmt]
             : 1
               === size
               ? [0,
                 [12,
                   /*<<camlinternalFormat.ml:2845:37>>*/ caml_string_get
                   (str, lit_start),
                  fmt]]
               : [0,
                 [11,
                   /*<<camlinternalFormat.ml:2846:39>>*/ caml_call3
                   (Stdlib_String[15], str, lit_start, size),
                  fmt]];
     /*<<camlinternalFormat.ml:2846:75>>*/ }
     /*<<camlinternalFormat.ml:2083:2>>*/ function parse(lit_start, end_ind){
     var str_ind = lit_start;
      /*<<camlinternalFormat.ml:2124:4>>*/ for(;;){
       /*<<camlinternalFormat.ml:2124:4>>*/ if(str_ind === end_ind)
        /*<<camlinternalFormat.ml:2124:30>>*/ return add_literal
               (lit_start, str_ind, 0);
       /*<<camlinternalFormat.ml:2125:12>>*/  /*<<camlinternalFormat.ml:2125:12>>*/ var
       match =
          /*<<camlinternalFormat.ml:2125:12>>*/ caml_string_get(str, str_ind);
       /*<<camlinternalFormat.ml:2125:12>>*/ if(37 === match){
        /*<<camlinternalFormat.ml:2137:25>>*/  /*<<camlinternalFormat.ml:2137:25>>*/ var
        str_ind$2 = str_ind + 1 | 0;
        /*<<camlinternalFormat.ml:2141:4>>*/ if(str_ind$2 === end_ind)
         /*<<camlinternalFormat.ml:2141:30>>*/ unexpected_end_of_format
         (end_ind);
        /*<<camlinternalFormat.ml:2142:10>>*/ var
         /*<<camlinternalFormat.ml:2142:10>>*/ match$1 =
          95
           ===
             /*<<camlinternalFormat.ml:2142:10>>*/ caml_string_get
             (str, str_ind$2)
           ? parse_flags(str_ind, str_ind$2 + 1 | 0, end_ind, 1)
           : parse_flags(str_ind, str_ind$2, end_ind, 0),
        fmt_rest = match$1[1];
       return add_literal(lit_start, str_ind, fmt_rest);
      }
      if(64 !== match){
        /*<<camlinternalFormat.ml:2133:8>>*/ var
         /*<<camlinternalFormat.ml:2133:8>>*/ str_ind$1 = str_ind + 1 | 0,
        str_ind = str_ind$1;
       continue;
      }
       /*<<camlinternalFormat.ml:2130:8>>*/  /*<<camlinternalFormat.ml:2130:8>>*/ var
       str_ind$0 = str_ind + 1 | 0;
       /*<<camlinternalFormat.ml:2591:4>>*/ if(str_ind$0 === end_ind)
       var match$0 = _N_;
      else{
        /*<<camlinternalFormat.ml:2593:12>>*/ var
         /*<<camlinternalFormat.ml:2593:12>>*/ c =
           /*<<camlinternalFormat.ml:2593:12>>*/ caml_string_get
           (str, str_ind$0),
        switch$0 = 0;
        /*<<camlinternalFormat.ml:2593:12>>*/ if(65 <= c)
        if(94 <= c){
         var switcher = c - 123 | 0;
         if(2 < switcher >>> 0)
          switch$0 = 1;
         else
          switch(switcher){
            case 0:
             var match$0 = parse_tag(1, str_ind$0 + 1 | 0, end_ind); break;
            case 1:
             switch$0 = 1; break;
            default:
              /*<<camlinternalFormat.ml:2602:31>>*/ var
               /*<<camlinternalFormat.ml:2602:31>>*/ fmt_rest$2 =
                parse(str_ind$0 + 1 | 0, end_ind)[1],
              match$0 = [0, [17, 1, fmt_rest$2]];
          }
        }
        else if(91 <= c)
         switch(c - 91 | 0){
           case 0:
            var match$0 = parse_tag(0, str_ind$0 + 1 | 0, end_ind); break;
           case 1:
            switch$0 = 1; break;
           default:
             /*<<camlinternalFormat.ml:2597:31>>*/ var
              /*<<camlinternalFormat.ml:2597:31>>*/ fmt_rest$3 =
               parse(str_ind$0 + 1 | 0, end_ind)[1],
             match$0 = [0, [17, 0, fmt_rest$3]];
         }
        else
         switch$0 = 1;
       else if(10 === c)
         /*<<camlinternalFormat.ml:2616:31>>*/ var
          /*<<camlinternalFormat.ml:2616:31>>*/ fmt_rest$4 =
           parse(str_ind$0 + 1 | 0, end_ind)[1],
         match$0 = [0, [17, 3, fmt_rest$4]];
       else if(32 <= c)
        switch(c - 32 | 0){
          case 0:
            /*<<camlinternalFormat.ml:2608:31>>*/ var
             /*<<camlinternalFormat.ml:2608:31>>*/ fmt_rest$5 =
              parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, _O_, fmt_rest$5]];
           break;
          case 5:
           var switch$1 = 0;
            /*<<camlinternalFormat.ml:2626:42>>*/ if
            ((str_ind$0 + 1 | 0) < end_ind
             &&
              37
              ===
                /*<<camlinternalFormat.ml:2626:42>>*/ caml_string_get
                (str, str_ind$0 + 1 | 0))
             /*<<camlinternalFormat.ml:2627:31>>*/ var
              /*<<camlinternalFormat.ml:2627:31>>*/ fmt_rest$6 =
               parse(str_ind$0 + 2 | 0, end_ind)[1],
             match$0 = [0, [17, 6, fmt_rest$6]];
           else
            switch$1 = 1;
           if(switch$1)
             /*<<camlinternalFormat.ml:2630:31>>*/ var
              /*<<camlinternalFormat.ml:2630:31>>*/ fmt_rest$7 =
               parse(str_ind$0, end_ind)[1],
             match$0 = [0, [12, 64, fmt_rest$7]];
           break;
          case 12:
            /*<<camlinternalFormat.ml:2605:31>>*/ var
             /*<<camlinternalFormat.ml:2605:31>>*/ fmt_rest$8 =
              parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, _P_, fmt_rest$8]];
           break;
          case 14:
            /*<<camlinternalFormat.ml:2619:31>>*/ var
             /*<<camlinternalFormat.ml:2619:31>>*/ fmt_rest$9 =
              parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, 4, fmt_rest$9]];
           break;
          case 27:
            /*<<camlinternalFormat.ml:2611:8>>*/  /*<<camlinternalFormat.ml:2611:8>>*/ var
            str_ind$3 = str_ind$0 + 1 | 0;
           try{
            var
             _bg_ = str_ind$3 === end_ind ? 1 : 0,
             _bh_ =
               _bg_
               ||
                (60
                  !==
                    /*<<camlinternalFormat.ml:2666:32>>*/ caml_string_get
                    (str, str_ind$3)
                  ? 1
                  : 0);
             /*<<camlinternalFormat.ml:2666:58>>*/ if(_bh_)
              /*<<camlinternalFormat.ml:2666:58>>*/ throw  /*<<camlinternalFormat.ml:2666:58>>*/ caml_maybe_attach_backtrace
                    (Stdlib[8], 1);
             /*<<camlinternalFormat.ml:2667:24>>*/ var
              /*<<camlinternalFormat.ml:2667:24>>*/ str_ind_1 =
               parse_spaces(str_ind$3 + 1 | 0, end_ind),
              /*<<camlinternalFormat.ml:2668:14>>*/ match$2 =
                /*<<camlinternalFormat.ml:2668:14>>*/ caml_string_get
                (str, str_ind_1),
             switch$2 = 0;
             /*<<camlinternalFormat.ml:2668:14>>*/ if(48 <= match$2){
             if(58 > match$2) switch$2 = 1;
            }
            else if(45 === match$2) switch$2 = 1;
            if(! switch$2)
              /*<<camlinternalFormat.ml:2684:15>>*/ throw  /*<<camlinternalFormat.ml:2684:15>>*/ caml_maybe_attach_backtrace
                    (Stdlib[8], 1);
             /*<<camlinternalFormat.ml:2670:33>>*/ var
              /*<<camlinternalFormat.ml:2670:33>>*/ match$3 =
               parse_integer(str_ind_1, end_ind),
              /*<<camlinternalFormat.ml:2670:33>>*/ width = match$3[2],
              /*<<camlinternalFormat.ml:2670:33>>*/ str_ind_2 = match$3[1],
              /*<<camlinternalFormat.ml:2671:28>>*/ str_ind_3 =
               parse_spaces(str_ind_2, end_ind),
              /*<<camlinternalFormat.ml:2672:18>>*/ switcher$0 =
                /*<<camlinternalFormat.ml:2672:18>>*/ caml_string_get
                (str, str_ind_3)
               - 45
               | 0,
             switch$3 = 0;
             /*<<camlinternalFormat.ml:2672:18>>*/ if(12 < switcher$0 >>> 0)
             if(17 === switcher$0)
               /*<<camlinternalFormat.ml:2674:24>>*/ var
                /*<<camlinternalFormat.ml:2674:24>>*/ s =
                  /*<<camlinternalFormat.ml:2674:24>>*/ caml_call3
                  (Stdlib_String[15],
                   str,
                   str_ind$3 - 2 | 0,
                   (str_ind_3 - str_ind$3 | 0) + 3 | 0),
                /*<<camlinternalFormat.ml:2674:24>>*/ _bi_ = [0, s, width, 0],
                /*<<camlinternalFormat.ml:2674:24>>*/ _bj_ = str_ind_3 + 1 | 0,
               formatting_lit$0 = _bi_,
               next_ind = _bj_;
             else
              switch$3 = 1;
            else if(1 < switcher$0 - 1 >>> 0){
              /*<<camlinternalFormat.ml:2677:40>>*/ var
               /*<<camlinternalFormat.ml:2677:40>>*/ match$4 =
                parse_integer(str_ind_3, end_ind),
               /*<<camlinternalFormat.ml:2677:40>>*/ offset = match$4[2],
               /*<<camlinternalFormat.ml:2677:40>>*/ str_ind_4 = match$4[1],
               /*<<camlinternalFormat.ml:2678:32>>*/ str_ind_5 =
                parse_spaces(str_ind_4, end_ind);
              /*<<camlinternalFormat.ml:2679:19>>*/ if
              (62
               !==
                 /*<<camlinternalFormat.ml:2679:19>>*/ caml_string_get
                 (str, str_ind_5))
               /*<<camlinternalFormat.ml:2679:47>>*/ throw  /*<<camlinternalFormat.ml:2679:47>>*/ caml_maybe_attach_backtrace
                     (Stdlib[8], 1);
              /*<<camlinternalFormat.ml:2680:24>>*/ var
               /*<<camlinternalFormat.ml:2680:24>>*/ s$0 =
                 /*<<camlinternalFormat.ml:2680:24>>*/ caml_call3
                 (Stdlib_String[15],
                  str,
                  str_ind$3 - 2 | 0,
                  (str_ind_5 - str_ind$3 | 0) + 3 | 0),
               /*<<camlinternalFormat.ml:2680:24>>*/ _bk_ =
                [0, s$0, width, offset],
               /*<<camlinternalFormat.ml:2680:24>>*/ _bl_ = str_ind_5 + 1 | 0,
              formatting_lit$0 = _bk_,
              next_ind = _bl_;
            }
            else
             switch$3 = 1;
            if(switch$3)
              /*<<camlinternalFormat.ml:2682:21>>*/ throw  /*<<camlinternalFormat.ml:2682:21>>*/ caml_maybe_attach_backtrace
                    (Stdlib[8], 1);
           }
           catch(_bq_){
            var _bf_ = caml_wrap_exception(_bq_);
            if(_bf_ !== Stdlib[8] && _bf_[1] !== Stdlib[7])
              /*<<camlinternalFormat.ml:2686:8>>*/ throw  /*<<camlinternalFormat.ml:2686:8>>*/ caml_maybe_attach_backtrace
                    (_bf_, 0);
            var formatting_lit$0 = formatting_lit, next_ind = str_ind$3;
           }
            /*<<camlinternalFormat.ml:2688:27>>*/ var
             /*<<camlinternalFormat.ml:2688:27>>*/ fmt_rest$12 =
              parse(next_ind, end_ind)[1],
            match$0 = [0, [17, formatting_lit$0, fmt_rest$12]];
           break;
          case 28:
            /*<<camlinternalFormat.ml:2622:8>>*/  /*<<camlinternalFormat.ml:2622:8>>*/ var
            str_ind$4 = str_ind$0 + 1 | 0;
           try{
             /*<<camlinternalFormat.ml:2696:24>>*/ var
              /*<<camlinternalFormat.ml:2696:24>>*/ str_ind_1$0 =
               parse_spaces(str_ind$4, end_ind),
              /*<<camlinternalFormat.ml:2697:14>>*/ match$6 =
                /*<<camlinternalFormat.ml:2697:14>>*/ caml_string_get
                (str, str_ind_1$0),
             switch$4 = 0;
             /*<<camlinternalFormat.ml:2697:14>>*/ if(48 <= match$6){
             if(58 > match$6) switch$4 = 1;
            }
            else if(45 === match$6) switch$4 = 1;
            if(switch$4){
              /*<<camlinternalFormat.ml:2699:32>>*/ var
               /*<<camlinternalFormat.ml:2699:32>>*/ match$7 =
                parse_integer(str_ind_1$0, end_ind),
               /*<<camlinternalFormat.ml:2699:32>>*/ size = match$7[2],
               /*<<camlinternalFormat.ml:2699:32>>*/ str_ind_2$0 = match$7[1],
               /*<<camlinternalFormat.ml:2700:26>>*/ str_ind_3$0 =
                parse_spaces(str_ind_2$0, end_ind);
              /*<<camlinternalFormat.ml:2701:13>>*/ if
              (62
               !==
                 /*<<camlinternalFormat.ml:2701:13>>*/ caml_string_get
                 (str, str_ind_3$0))
               /*<<camlinternalFormat.ml:2701:41>>*/ throw  /*<<camlinternalFormat.ml:2701:41>>*/ caml_maybe_attach_backtrace
                     (Stdlib[8], 1);
              /*<<camlinternalFormat.ml:2702:18>>*/ var
               /*<<camlinternalFormat.ml:2702:18>>*/ s$1 =
                 /*<<camlinternalFormat.ml:2702:18>>*/ caml_call3
                 (Stdlib_String[15],
                  str,
                  str_ind$4 - 2 | 0,
                  (str_ind_3$0 - str_ind$4 | 0) + 3 | 0),
              _bo_ = [0, [0, str_ind_3$0 + 1 | 0, [1, s$1, size]]];
            }
            else
             var _bo_ = 0;
            var _bn_ = _bo_;
           }
           catch(_bp_){
            var _bm_ = caml_wrap_exception(_bp_);
            if(_bm_ !== Stdlib[8] && _bm_[1] !== Stdlib[7])
             throw caml_maybe_attach_backtrace(_bm_, 0);
            var _bn_ = 0;
           }
           if(_bn_)
             /*<<camlinternalFormat.ml:2709:29>>*/ var
             match$5 = _bn_[1],
             formatting_lit$1 = match$5[2],
             next_ind$0 = match$5[1],
              /*<<camlinternalFormat.ml:2709:29>>*/ fmt_rest$13 =
               parse(next_ind$0, end_ind)[1],
             _be_ = [0, [17, formatting_lit$1, fmt_rest$13]];
           else
             /*<<camlinternalFormat.ml:2712:29>>*/ var
              /*<<camlinternalFormat.ml:2712:29>>*/ fmt_rest$14 =
               parse(str_ind$4, end_ind)[1],
             _be_ = [0, [17, _Q_, fmt_rest$14]];
           var match$0 = _be_;
           break;
          case 31:
            /*<<camlinternalFormat.ml:2613:31>>*/ var
             /*<<camlinternalFormat.ml:2613:31>>*/ fmt_rest$10 =
              parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, 2, fmt_rest$10]];
           break;
          case 32:
            /*<<camlinternalFormat.ml:2624:31>>*/ var
             /*<<camlinternalFormat.ml:2624:31>>*/ fmt_rest$11 =
              parse(str_ind$0 + 1 | 0, end_ind)[1],
            match$0 = [0, [17, 5, fmt_rest$11]];
           break;
          default: switch$0 = 1;
        }
       else
        switch$0 = 1;
       if(switch$0)
         /*<<camlinternalFormat.ml:2633:31>>*/ var
          /*<<camlinternalFormat.ml:2633:31>>*/ fmt_rest$1 =
           parse(str_ind$0 + 1 | 0, end_ind)[1],
         match$0 = [0, [17, [2, c], fmt_rest$1]];
      }
      var fmt_rest$0 = match$0[1];
      return add_literal(lit_start, str_ind, fmt_rest$0);
     }
     /*<<camlinternalFormat.ml:2119:62>>*/ }
     /*<<camlinternalFormat.ml:2083:2>>*/ function parse_conversion
    (pct_ind,
     str_ind,
     end_ind,
     plus,
     hash,
     space,
     ign,
     pad,
     prec,
     padprec,
     symb){
      /*<<camlinternalFormat.ml:2295:4>>*/ var
       /*<<camlinternalFormat.ml:2295:4>>*/ plus_used = [0, 0],
       /*<<camlinternalFormat.ml:2295:4>>*/ hash_used = [0, 0],
       /*<<camlinternalFormat.ml:2295:4>>*/ space_used = [0, 0],
       /*<<camlinternalFormat.ml:2295:4>>*/ ign_used = [0, 0],
       /*<<camlinternalFormat.ml:2295:4>>*/ pad_used = [0, 0],
       /*<<camlinternalFormat.ml:2295:4>>*/ prec_used = [0, 0];
      /*<<camlinternalFormat.ml:2295:4>>*/ function get_plus(param){
       /*<<camlinternalFormat.ml:2300:25>>*/ plus_used[1] = 1;
       /*<<camlinternalFormat.ml:2300:25>>*/ return plus;
      /*<<camlinternalFormat.ml:2300:49>>*/ }
      /*<<camlinternalFormat.ml:2295:4>>*/ function get_hash(param){
       /*<<camlinternalFormat.ml:2301:24>>*/ hash_used[1] = 1;
       /*<<camlinternalFormat.ml:2301:24>>*/ return hash;
      /*<<camlinternalFormat.ml:2301:47>>*/ }
      /*<<camlinternalFormat.ml:2295:4>>*/ function get_space(param){
       /*<<camlinternalFormat.ml:2302:25>>*/ space_used[1] = 1;
       /*<<camlinternalFormat.ml:2302:25>>*/ return space;
      /*<<camlinternalFormat.ml:2302:50>>*/ }
      /*<<camlinternalFormat.ml:2295:4>>*/ function get_ign(param){
       /*<<camlinternalFormat.ml:2303:25>>*/ ign_used[1] = 1;
       /*<<camlinternalFormat.ml:2303:25>>*/ return ign;
      /*<<camlinternalFormat.ml:2303:48>>*/ }
      /*<<camlinternalFormat.ml:2295:4>>*/ function get_pad(param){
       /*<<camlinternalFormat.ml:2304:25>>*/ pad_used[1] = 1;
       /*<<camlinternalFormat.ml:2304:25>>*/ return pad;
      /*<<camlinternalFormat.ml:2304:48>>*/ }
      /*<<camlinternalFormat.ml:2295:4>>*/ function get_prec(param){
       /*<<camlinternalFormat.ml:2305:25>>*/ prec_used[1] = 1;
       /*<<camlinternalFormat.ml:2305:25>>*/ return prec;
      /*<<camlinternalFormat.ml:2305:49>>*/ }
      /*<<camlinternalFormat.ml:2295:4>>*/ function get_padprec(param){
       /*<<camlinternalFormat.ml:2306:25>>*/ pad_used[1] = 1;
       /*<<camlinternalFormat.ml:2306:25>>*/ return padprec;
      /*<<camlinternalFormat.ml:2306:52>>*/ }
      /*<<camlinternalFormat.ml:2295:4>>*/ function get_int_pad(param){
       /*<<camlinternalFormat.ml:2320:13>>*/ var
        /*<<camlinternalFormat.ml:2320:13>>*/ pad = get_pad(0),
        /*<<camlinternalFormat.ml:2320:25>>*/ match = get_prec(0);
      if(typeof match === "number" && ! match)
        /*<<camlinternalFormat.ml:2321:32>>*/ return pad;
      if(typeof pad === "number")
        /*<<camlinternalFormat.ml:2322:32>>*/ return 0;
      if(0 !== pad[0])
       return 2 <= pad[1]
               ? legacy_behavior$0
                 ? _H_
                 : incompatible_flag(pct_ind, str_ind, 48, cst_precision$1)
               : pad;
      if(2 > pad[1])  /*<<camlinternalFormat.ml:2329:38>>*/ return pad;
       /*<<camlinternalFormat.ml:2324:11>>*/  /*<<camlinternalFormat.ml:2324:11>>*/ var
       n = pad[2];
       /*<<camlinternalFormat.ml:2324:11>>*/ return legacy_behavior$0
              ? [0, 1, n]
              : incompatible_flag(pct_ind, str_ind, 48, cst_precision$0);
      /*<<camlinternalFormat.ml:2330:41>>*/ }
      /*<<camlinternalFormat.ml:2295:4>>*/ function check_no_0(symb, pad){
       /*<<camlinternalFormat.ml:2334:6>>*/ if(typeof pad === "number")
        /*<<camlinternalFormat.ml:2335:22>>*/ return pad;
       /*<<camlinternalFormat.ml:2334:6>>*/ if(0 !== pad[0])
       return 2 <= pad[1]
               ? legacy_behavior$0
                 ? _I_
                 : incompatible_flag(pct_ind, str_ind, symb, cst_0$1)
               : pad;
      if(2 > pad[1])  /*<<camlinternalFormat.ml:2336:43>>*/ return pad;
       /*<<camlinternalFormat.ml:2339:8>>*/  /*<<camlinternalFormat.ml:2339:8>>*/ var
       width = pad[2];
       /*<<camlinternalFormat.ml:2339:8>>*/ return legacy_behavior$0
              ? [0, 1, width]
              : incompatible_flag(pct_ind, str_ind, symb, cst_0$0);
      /*<<camlinternalFormat.ml:2343:55>>*/ }
      /*<<camlinternalFormat.ml:2295:4>>*/ function opt_of_pad(c, pad){
       /*<<camlinternalFormat.ml:2349:64>>*/ if(typeof pad === "number")
        /*<<camlinternalFormat.ml:2350:22>>*/ return 0;
       /*<<camlinternalFormat.ml:2349:64>>*/ if(0 === pad[0])
       switch(pad[1]){
         case 0:
           /*<<camlinternalFormat.ml:2356:8>>*/  /*<<camlinternalFormat.ml:2356:8>>*/ var
           width = pad[2];
           /*<<camlinternalFormat.ml:2356:8>>*/ return legacy_behavior$0
                  ? [0, width]
                  : incompatible_flag(pct_ind, str_ind, c, cst$24);
         case 1:
           /*<<camlinternalFormat.ml:2351:38>>*/  /*<<camlinternalFormat.ml:2351:38>>*/ var
           width$0 = pad[2];
           /*<<camlinternalFormat.ml:2351:38>>*/ return [0, width$0];
         default:
           /*<<camlinternalFormat.ml:2353:8>>*/  /*<<camlinternalFormat.ml:2353:8>>*/ var
           width$1 = pad[2];
           /*<<camlinternalFormat.ml:2353:8>>*/ return legacy_behavior$0
                  ? [0, width$1]
                  : incompatible_flag(pct_ind, str_ind, c, cst_0$2);
       }
       /*<<camlinternalFormat.ml:2358:25>>*/ return incompatible_flag
              (pct_ind, str_ind, c, cst$25);
      /*<<camlinternalFormat.ml:2358:66>>*/ }
      /*<<camlinternalFormat.ml:2295:4>>*/ function get_pad_opt(c){
       /*<<camlinternalFormat.ml:2360:37>>*/ return opt_of_pad(c, get_pad(0));
      /*<<camlinternalFormat.ml:2360:49>>*/ }
      /*<<camlinternalFormat.ml:2295:4>>*/ function get_padprec_opt(c){
       /*<<camlinternalFormat.ml:2361:41>>*/ return opt_of_pad
              (c, get_padprec(0));
      /*<<camlinternalFormat.ml:2361:57>>*/ }
     var switch$0 = 0;
      /*<<camlinternalFormat.ml:2295:4>>*/ if(124 <= symb)
      switch$0 = 1;
     else
      switch(symb){
        case 33:
          /*<<camlinternalFormat.ml:2515:29>>*/ var
           /*<<camlinternalFormat.ml:2515:29>>*/ fmt_rest$5 =
            parse(str_ind, end_ind)[1],
          fmt_result = [0, [10, fmt_rest$5]];
         break;
        case 40:
          /*<<camlinternalFormat.ml:2531:20>>*/ var
           /*<<camlinternalFormat.ml:2531:20>>*/ sub_end =
            search_subformat_end(str_ind, end_ind, 41),
           /*<<camlinternalFormat.ml:2532:29>>*/ fmt_rest$7 =
            parse(sub_end + 2 | 0, end_ind)[1],
           /*<<camlinternalFormat.ml:2533:28>>*/ sub_fmt =
            parse(str_ind, sub_end)[1],
           /*<<camlinternalFormat.ml:2534:22>>*/ sub_fmtty =
            fmtty_of_fmt(sub_fmt);
          /*<<camlinternalFormat.ml:2535:9>>*/ if(get_ign(0))
           /*<<camlinternalFormat.ml:2536:44>>*/ var
            /*<<camlinternalFormat.ml:2536:44>>*/ ignored$2 =
             [9, get_pad_opt(95), sub_fmtty],
           _aN_ = [0, [23, ignored$2, fmt_rest$7]];
         else
          var _aN_ = [0, [14, get_pad_opt(40), sub_fmtty, fmt_rest$7]];
         var fmt_result = _aN_;
         break;
        case 44:
         var fmt_result = parse(str_ind, end_ind); break;
        case 67:
          /*<<camlinternalFormat.ml:2396:29>>*/ var
           /*<<camlinternalFormat.ml:2396:29>>*/ fmt_rest$10 =
            parse(str_ind, end_ind)[1],
           /*<<camlinternalFormat.ml:2397:9>>*/ _aP_ =
            get_ign(0) ? [0, [23, 1, fmt_rest$10]] : [0, [1, fmt_rest$10]],
          fmt_result = _aP_;
         break;
        case 78:
          /*<<camlinternalFormat.ml:2431:29>>*/ var
           /*<<camlinternalFormat.ml:2431:29>>*/ fmt_rest$14 =
            parse(str_ind, end_ind)[1],
           /*<<camlinternalFormat.ml:2431:29>>*/ counter$0 = 2;
          /*<<camlinternalFormat.ml:2433:9>>*/ if(get_ign(0))
           /*<<camlinternalFormat.ml:2434:8>>*/ var
            /*<<camlinternalFormat.ml:2434:8>>*/ ignored$6 = [11, counter$0],
           _aV_ = [0, [23, ignored$6, fmt_rest$14]];
         else
          var _aV_ = [0, [21, counter$0, fmt_rest$14]];
         var fmt_result = _aV_;
         break;
        case 83:
          /*<<camlinternalFormat.ml:2410:16>>*/ var
           /*<<camlinternalFormat.ml:2410:16>>*/ pad$6 =
            check_no_0(symb, get_padprec(0)),
           /*<<camlinternalFormat.ml:2411:29>>*/ fmt_rest$15 =
            parse(str_ind, end_ind)[1];
          /*<<camlinternalFormat.ml:2412:9>>*/ if(get_ign(0))
           /*<<camlinternalFormat.ml:2413:42>>*/ var
            /*<<camlinternalFormat.ml:2413:42>>*/ ignored$7 =
             [1, get_padprec_opt(95)],
           _aW_ = [0, [23, ignored$7, fmt_rest$15]];
         else
           /*<<camlinternalFormat.ml:2417:10>>*/ var
            /*<<camlinternalFormat.ml:2417:10>>*/ match$5 =
             make_padding_fmt_ebb(pad$6, fmt_rest$15),
            /*<<camlinternalFormat.ml:2417:10>>*/ fmt_rest$16 = match$5[2],
            /*<<camlinternalFormat.ml:2417:10>>*/ pad$7 = match$5[1],
           _aW_ = [0, [3, pad$7, fmt_rest$16]];
         var fmt_result = _aW_;
         break;
        case 91:
          /*<<camlinternalFormat.ml:2717:4>>*/ if(str_ind === end_ind)
           /*<<camlinternalFormat.ml:2717:30>>*/ unexpected_end_of_format
           (end_ind);
          /*<<camlinternalFormat.ml:2719:19>>*/ var
           /*<<camlinternalFormat.ml:2719:19>>*/ char_set = create_char_set(0),
           /*<<camlinternalFormat.ml:2719:19>>*/ add_char =
            function(c){
              /*<<camlinternalFormat.ml:2721:6>>*/ return add_in_char_set
                     (char_set, c);
             /*<<camlinternalFormat.ml:2721:32>>*/ },
           /*<<camlinternalFormat.ml:2719:19>>*/ add_range =
            function(c$0, c){
              /*<<camlinternalFormat.ml:2724:6>>*/ if(c >= c$0){
              var i = c$0;
               /*<<camlinternalFormat.ml:2725:8>>*/ for(;;){
                /*<<camlinternalFormat.ml:2725:8>>*/ add_in_char_set
                (char_set,
                  /*<<camlinternalFormat.ml:2725:33>>*/ caml_call1
                  (Stdlib[29], i));
                /*<<camlinternalFormat.ml:2725:8>>*/  /*<<camlinternalFormat.ml:2725:8>>*/ var
                _bd_ = i + 1 | 0;
                /*<<camlinternalFormat.ml:2725:8>>*/ if(c !== i){
                var i = _bd_;
                continue;
               }
               break;
              }
             }
              /*<<camlinternalFormat.ml:2721:6>>*/ return 0;
             /*<<camlinternalFormat.ml:2726:10>>*/ },
           /*<<camlinternalFormat.ml:2719:19>>*/ fail_single_percent =
            function(str_ind){
              /*<<camlinternalFormat.ml:2730:6>>*/ return  /*<<camlinternalFormat.ml:2730:6>>*/ caml_call2
                     (failwith_message(_R_), str, str_ind);
             /*<<camlinternalFormat.ml:2732:54>>*/ },
           /*<<camlinternalFormat.ml:2719:19>>*/ parse_char_set_content =
            function(counter, str_ind, end_ind){
             var str_ind$0 = str_ind;
              /*<<camlinternalFormat.ml:2743:6>>*/ for(;;){
               /*<<camlinternalFormat.ml:2743:6>>*/ if(str_ind$0 === end_ind)
                /*<<camlinternalFormat.ml:2743:32>>*/ unexpected_end_of_format
                (end_ind);
               /*<<camlinternalFormat.ml:2744:12>>*/  /*<<camlinternalFormat.ml:2744:12>>*/ var
               c =
                  /*<<camlinternalFormat.ml:2744:12>>*/ caml_string_get
                  (str, str_ind$0);
               /*<<camlinternalFormat.ml:2744:12>>*/ if(45 === c){
                /*<<camlinternalFormat.ml:2748:8>>*/ add_char(45);
                /*<<camlinternalFormat.ml:2748:8>>*/ var
                 /*<<camlinternalFormat.ml:2748:8>>*/ str_ind$1 =
                  str_ind$0 + 1 | 0,
                str_ind$0 = str_ind$1;
               continue;
              }
              if(93 === c)
                /*<<camlinternalFormat.ml:2746:8>>*/ return str_ind$0 + 1 | 0;
               /*<<camlinternalFormat.ml:2751:8>>*/  /*<<camlinternalFormat.ml:2751:8>>*/ var
               _bc_ = str_ind$0 + 1 | 0;
               /*<<camlinternalFormat.ml:2751:8>>*/ if(counter >= 50)
               return caml_trampoline_return
                       (parse_char_set_after_char$0, [0, _bc_, end_ind, c]);
              var counter$0 = counter + 1 | 0;
              return parse_char_set_after_char$0(counter$0, _bc_, end_ind, c);
             }
             /*<<camlinternalFormat.ml:2751:57>>*/ },
           /*<<camlinternalFormat.ml:2719:19>>*/ parse_char_set_after_char$0 =
            function(counter, str_ind, end_ind, c){
             var str_ind$0 = str_ind, c$0 = c;
              /*<<camlinternalFormat.ml:2755:6>>*/ for(;;){
               /*<<camlinternalFormat.ml:2755:6>>*/ if(str_ind$0 === end_ind)
                /*<<camlinternalFormat.ml:2755:32>>*/ unexpected_end_of_format
                (end_ind);
               /*<<camlinternalFormat.ml:2756:12>>*/ var
                /*<<camlinternalFormat.ml:2756:12>>*/ c$1 =
                  /*<<camlinternalFormat.ml:2756:12>>*/ caml_string_get
                  (str, str_ind$0),
               switch$0 = 0;
               /*<<camlinternalFormat.ml:2756:12>>*/ if(46 <= c$1){
               if(64 === c$1)
                switch$0 = 1;
               else if(93 === c$1){
                 /*<<camlinternalFormat.ml:2758:8>>*/ add_char(c$0);
                 /*<<camlinternalFormat.ml:2758:8>>*/ return str_ind$0 + 1 | 0;
               }
              }
              else if(37 === c$1)
               switch$0 = 1;
              else if(45 <= c$1){
                /*<<camlinternalFormat.ml:2761:8>>*/  /*<<camlinternalFormat.ml:2761:8>>*/ var
                str_ind$2 = str_ind$0 + 1 | 0;
                /*<<camlinternalFormat.ml:2775:6>>*/ if(str_ind$2 === end_ind)
                 /*<<camlinternalFormat.ml:2775:32>>*/ unexpected_end_of_format
                 (end_ind);
                /*<<camlinternalFormat.ml:2776:12>>*/  /*<<camlinternalFormat.ml:2776:12>>*/ var
                c$2 =
                   /*<<camlinternalFormat.ml:2776:12>>*/ caml_string_get
                   (str, str_ind$2);
                /*<<camlinternalFormat.ml:2776:12>>*/ if(37 === c$2){
                 /*<<camlinternalFormat.ml:2782:8>>*/ if
                 ((str_ind$2 + 1 | 0) === end_ind)
                  /*<<camlinternalFormat.ml:2782:38>>*/ unexpected_end_of_format
                  (end_ind);
                 /*<<camlinternalFormat.ml:2783:20>>*/  /*<<camlinternalFormat.ml:2783:20>>*/ var
                 c$3 =
                    /*<<camlinternalFormat.ml:2783:20>>*/ caml_string_get
                    (str, str_ind$2 + 1 | 0);
                if(37 !== c$3 && 64 !== c$3)
                  /*<<camlinternalFormat.ml:2787:17>>*/ return fail_single_percent
                         (str_ind$2);
                 /*<<camlinternalFormat.ml:2785:12>>*/ add_range(c$0, c$3);
                 /*<<camlinternalFormat.ml:2785:12>>*/  /*<<camlinternalFormat.ml:2785:12>>*/ var
                 _ba_ = str_ind$2 + 2 | 0;
                 /*<<camlinternalFormat.ml:2785:12>>*/ if(counter >= 50)
                 return caml_trampoline_return
                         (parse_char_set_content, [0, _ba_, end_ind]);
                var counter$2 = counter + 1 | 0;
                return parse_char_set_content(counter$2, _ba_, end_ind);
               }
               if(93 === c$2){
                 /*<<camlinternalFormat.ml:2778:8>>*/ add_char(c$0);
                 /*<<camlinternalFormat.ml:2779:8>>*/ add_char(45);
                 /*<<camlinternalFormat.ml:2779:8>>*/ return str_ind$2 + 1 | 0;
               }
                /*<<camlinternalFormat.ml:2790:8>>*/ add_range(c$0, c$2);
                /*<<camlinternalFormat.ml:2790:8>>*/  /*<<camlinternalFormat.ml:2790:8>>*/ var
                _bb_ = str_ind$2 + 1 | 0;
                /*<<camlinternalFormat.ml:2790:8>>*/ if(counter >= 50)
                return caml_trampoline_return
                        (parse_char_set_content, [0, _bb_, end_ind]);
               var counter$1 = counter + 1 | 0;
               return parse_char_set_content(counter$1, _bb_, end_ind);
              }
               /*<<camlinternalFormat.ml:2762:31>>*/ if
               (switch$0 && 37 === c$0){
                /*<<camlinternalFormat.ml:2763:8>>*/ add_char(c$1);
                /*<<camlinternalFormat.ml:2763:8>>*/  /*<<camlinternalFormat.ml:2763:8>>*/ var
                _a$_ = str_ind$0 + 1 | 0;
                /*<<camlinternalFormat.ml:2763:8>>*/ if(counter >= 50)
                return caml_trampoline_return
                        (parse_char_set_content, [0, _a$_, end_ind]);
               var counter$0 = counter + 1 | 0;
               return parse_char_set_content(counter$0, _a$_, end_ind);
              }
               /*<<camlinternalFormat.ml:2766:8>>*/ if(37 === c$0)
                /*<<camlinternalFormat.ml:2766:24>>*/ fail_single_percent
                (str_ind$0);
               /*<<camlinternalFormat.ml:2770:8>>*/ add_char(c$0);
               /*<<camlinternalFormat.ml:2770:8>>*/ var
                /*<<camlinternalFormat.ml:2770:8>>*/ str_ind$1 =
                 str_ind$0 + 1 | 0,
               str_ind$0 = str_ind$1,
               c$0 = c$1;
             }
             /*<<camlinternalFormat.ml:2771:58>>*/ },
           /*<<camlinternalFormat.ml:2719:19>>*/ parse_char_set_after_char =
            function(str_ind, end_ind, c){
              /*<<?>>*/ return caml_trampoline
                     (parse_char_set_after_char$0(0, str_ind, end_ind, c));
            };
          /*<<camlinternalFormat.ml:2719:19>>*/ if(str_ind === end_ind)
           /*<<camlinternalFormat.ml:2794:32>>*/ unexpected_end_of_format
           (end_ind);
          /*<<camlinternalFormat.ml:2795:12>>*/ if
          (94
           ===
             /*<<camlinternalFormat.ml:2795:12>>*/ caml_string_get
             (str, str_ind))
           /*<<camlinternalFormat.ml:2796:17>>*/ var
            /*<<camlinternalFormat.ml:2796:17>>*/ str_ind$0 = str_ind + 1 | 0,
           reverse = 1,
           str_ind$1 = str_ind$0;
         else
          var reverse = 0, str_ind$1 = str_ind;
          /*<<camlinternalFormat.ml:2737:6>>*/ if(str_ind$1 === end_ind)
           /*<<camlinternalFormat.ml:2737:32>>*/ unexpected_end_of_format
           (end_ind);
          /*<<camlinternalFormat.ml:2738:14>>*/ var
           /*<<camlinternalFormat.ml:2738:14>>*/ c =
             /*<<camlinternalFormat.ml:2738:14>>*/ caml_string_get
             (str, str_ind$1),
           /*<<camlinternalFormat.ml:2738:14>>*/ next_ind =
            parse_char_set_after_char(str_ind$1 + 1 | 0, end_ind, c),
           /*<<camlinternalFormat.ml:2799:19>>*/ char_set$0 =
            freeze_char_set(char_set),
           /*<<camlinternalFormat.ml:2799:19>>*/ char_set$1 =
            reverse ? rev_char_set(char_set$0) : char_set$0,
           /*<<camlinternalFormat.ml:2542:29>>*/ fmt_rest$19 =
            parse(next_ind, end_ind)[1];
          /*<<camlinternalFormat.ml:2543:9>>*/ if(get_ign(0))
           /*<<camlinternalFormat.ml:2544:45>>*/ var
            /*<<camlinternalFormat.ml:2544:45>>*/ ignored$9 =
             [10, get_pad_opt(95), char_set$1],
           _a1_ = [0, [23, ignored$9, fmt_rest$19]];
         else
          var _a1_ = [0, [20, get_pad_opt(91), char_set$1, fmt_rest$19]];
         var fmt_result = _a1_;
         break;
        case 97:
          /*<<camlinternalFormat.ml:2505:29>>*/ var
           /*<<camlinternalFormat.ml:2505:29>>*/ fmt_rest$20 =
            parse(str_ind, end_ind)[1],
          fmt_result = [0, [15, fmt_rest$20]];
         break;
        case 99:
          /*<<camlinternalFormat.ml:2376:6>>*/ var
           /*<<camlinternalFormat.ml:2376:6>>*/ char_format =
            function(fmt_rest){
              /*<<camlinternalFormat.ml:2377:11>>*/ return get_ign(0)
                     ? [0, [23, 0, fmt_rest]]
                     : [0, [0, fmt_rest]];
             /*<<camlinternalFormat.ml:2379:36>>*/ },
           /*<<camlinternalFormat.ml:2386:29>>*/ fmt_rest$21 =
            parse(str_ind, end_ind)[1],
           /*<<camlinternalFormat.ml:2387:18>>*/ match$7 = get_pad_opt(99);
          /*<<camlinternalFormat.ml:2387:18>>*/ if(match$7){
          if(0 === match$7[1])
            /*<<camlinternalFormat.ml:2382:11>>*/ var
             /*<<camlinternalFormat.ml:2382:11>>*/ _a2_ =
              get_ign(0) ? [0, [23, 3, fmt_rest$21]] : [0, [22, fmt_rest$21]],
            _a3_ = _a2_;
          else
            /*<<camlinternalFormat.ml:2391:11>>*/  /*<<camlinternalFormat.ml:2391:11>>*/ var
            _a3_ =
              legacy_behavior$0
               ? char_format(fmt_rest$21)
               : invalid_format_message
                 (str_ind, cst_non_zero_widths_are_unsupp);
          var _a4_ = _a3_;
         }
         else
          var _a4_ = char_format(fmt_rest$21);
         var fmt_result = _a4_;
         break;
        case 114:
          /*<<camlinternalFormat.ml:2511:29>>*/ var
           /*<<camlinternalFormat.ml:2511:29>>*/ fmt_rest$22 =
            parse(str_ind, end_ind)[1],
           /*<<camlinternalFormat.ml:2512:9>>*/ _a5_ =
            get_ign(0) ? [0, [23, 2, fmt_rest$22]] : [0, [19, fmt_rest$22]],
          fmt_result = _a5_;
         break;
        case 115:
          /*<<camlinternalFormat.ml:2400:16>>*/ var
           /*<<camlinternalFormat.ml:2400:16>>*/ pad$9 =
            check_no_0(symb, get_padprec(0)),
           /*<<camlinternalFormat.ml:2401:29>>*/ fmt_rest$23 =
            parse(str_ind, end_ind)[1];
          /*<<camlinternalFormat.ml:2402:9>>*/ if(get_ign(0))
           /*<<camlinternalFormat.ml:2403:37>>*/ var
            /*<<camlinternalFormat.ml:2403:37>>*/ ignored$10 =
             [0, get_padprec_opt(95)],
           _a6_ = [0, [23, ignored$10, fmt_rest$23]];
         else
           /*<<camlinternalFormat.ml:2407:10>>*/ var
            /*<<camlinternalFormat.ml:2407:10>>*/ match$8 =
             make_padding_fmt_ebb(pad$9, fmt_rest$23),
            /*<<camlinternalFormat.ml:2407:10>>*/ fmt_rest$24 = match$8[2],
            /*<<camlinternalFormat.ml:2407:10>>*/ pad$10 = match$8[1],
           _a6_ = [0, [2, pad$10, fmt_rest$24]];
         var fmt_result = _a6_;
         break;
        case 116:
          /*<<camlinternalFormat.ml:2508:29>>*/ var
           /*<<camlinternalFormat.ml:2508:29>>*/ fmt_rest$25 =
            parse(str_ind, end_ind)[1],
          fmt_result = [0, [16, fmt_rest$25]];
         break;
        case 123:
          /*<<camlinternalFormat.ml:2521:20>>*/ var
           /*<<camlinternalFormat.ml:2521:20>>*/ sub_end$0 =
            search_subformat_end(str_ind, end_ind, 125),
           /*<<camlinternalFormat.ml:2522:28>>*/ sub_fmt$0 =
            parse(str_ind, sub_end$0)[1],
           /*<<camlinternalFormat.ml:2523:29>>*/ fmt_rest$26 =
            parse(sub_end$0 + 2 | 0, end_ind)[1],
           /*<<camlinternalFormat.ml:2524:22>>*/ sub_fmtty$0 =
            fmtty_of_fmt(sub_fmt$0);
          /*<<camlinternalFormat.ml:2525:9>>*/ if(get_ign(0))
           /*<<camlinternalFormat.ml:2526:42>>*/ var
            /*<<camlinternalFormat.ml:2526:42>>*/ ignored$11 =
             [8, get_pad_opt(95), sub_fmtty$0],
           _a7_ = [0, [23, ignored$11, fmt_rest$26]];
         else
          var _a7_ = [0, [13, get_pad_opt(123), sub_fmtty$0, fmt_rest$26]];
         var fmt_result = _a7_;
         break;
        case 66:
        case 98:
          /*<<camlinternalFormat.ml:2495:16>>*/ var
           /*<<camlinternalFormat.ml:2495:16>>*/ pad$3 =
            check_no_0(symb, get_padprec(0)),
           /*<<camlinternalFormat.ml:2496:29>>*/ fmt_rest$8 =
            parse(str_ind, end_ind)[1];
          /*<<camlinternalFormat.ml:2497:9>>*/ if(get_ign(0))
           /*<<camlinternalFormat.ml:2498:35>>*/ var
            /*<<camlinternalFormat.ml:2498:35>>*/ ignored$3 =
             [7, get_padprec_opt(95)],
           _aO_ = [0, [23, ignored$3, fmt_rest$8]];
         else
           /*<<camlinternalFormat.ml:2502:10>>*/ var
            /*<<camlinternalFormat.ml:2502:10>>*/ match$3 =
             make_padding_fmt_ebb(pad$3, fmt_rest$8),
            /*<<camlinternalFormat.ml:2502:10>>*/ fmt_rest$9 = match$3[2],
            /*<<camlinternalFormat.ml:2502:10>>*/ pad$4 = match$3[1],
           _aO_ = [0, [9, pad$4, fmt_rest$9]];
         var fmt_result = _aO_;
         break;
        case 37:
        case 64:
          /*<<camlinternalFormat.ml:2518:29>>*/ var
           /*<<camlinternalFormat.ml:2518:29>>*/ fmt_rest$6 =
            parse(str_ind, end_ind)[1],
          fmt_result = [0, [12, symb, fmt_rest$6]];
         break;
        case 76:
        case 108:
        case 110:
         var switch$1 = 0;
          /*<<camlinternalFormat.ml:2438:27>>*/ if(str_ind === end_ind)
          switch$1 = 1;
         else{
           /*<<camlinternalFormat.ml:2438:63>>*/ var
            /*<<camlinternalFormat.ml:2438:63>>*/ symb$0 =
              /*<<camlinternalFormat.ml:2438:63>>*/ caml_string_get
              (str, str_ind),
            /*<<camlinternalFormat.ml:2892:25>>*/ _a8_ = symb$0 - 88 | 0,
           switch$2 = 0;
           /*<<camlinternalFormat.ml:2892:25>>*/ if(32 >= _a8_ >>> 0)
           switch(_a8_){
             case 0:
             case 12:
             case 17:
             case 23:
             case 29:
             case 32:
              var _aU_ = 1; switch$2 = 1; break;
           }
          if(! switch$2) var _aU_ = 0;
          if(_aU_) switch$0 = 1; else switch$1 = 1;
         }
         if(switch$1){
           /*<<camlinternalFormat.ml:2439:29>>*/ var
            /*<<camlinternalFormat.ml:2439:29>>*/ fmt_rest$13 =
             parse(str_ind, end_ind)[1],
           switch$3 = 0;
           /*<<camlinternalFormat.ml:2897:29>>*/ if(108 <= symb){
           if(111 > symb)
            switch(symb - 108 | 0){
              case 0:
               var counter = 0; switch$3 = 1; break;
              case 1: break;
              default: var counter = 1; switch$3 = 1;
            }
          }
          else if(76 === symb){var counter = 2; switch$3 = 1;}
          if(! switch$3)
            /*<<camlinternalFormat.ml:2899:34>>*/ throw  /*<<camlinternalFormat.ml:2899:34>>*/ caml_maybe_attach_backtrace
                  ([0, Assert_failure, _V_], 1);
           /*<<camlinternalFormat.ml:2441:9>>*/ if(get_ign(0))
            /*<<camlinternalFormat.ml:2442:8>>*/ var
             /*<<camlinternalFormat.ml:2442:8>>*/ ignored$5 = [11, counter],
            _aT_ = [0, [23, ignored$5, fmt_rest$13]];
          else
           var _aT_ = [0, [21, counter, fmt_rest$13]];
          var fmt_result = _aT_;
         }
         break;
        case 32:
        case 35:
        case 43:
        case 45:
        case 95:
         var
          fmt_result =
             /*<<camlinternalFormat.ml:2549:6>>*/ caml_call3
             (failwith_message(_M_), str, pct_ind, symb);
         break;
        case 88:
        case 100:
        case 105:
        case 111:
        case 117:
        case 120:
          /*<<camlinternalFormat.ml:2421:8>>*/ var
           /*<<camlinternalFormat.ml:2421:8>>*/ _aX_ = get_space(0),
           /*<<camlinternalFormat.ml:2420:65>>*/ _aY_ = get_hash(0),
           /*<<camlinternalFormat.ml:2420:18>>*/ iconv$2 =
            compute_int_conv(pct_ind, str_ind, get_plus(0), _aY_, _aX_, symb),
           /*<<camlinternalFormat.ml:2422:29>>*/ fmt_rest$17 =
            parse(str_ind, end_ind)[1];
          /*<<camlinternalFormat.ml:2423:9>>*/ if(get_ign(0))
           /*<<camlinternalFormat.ml:2424:42>>*/ var
            /*<<camlinternalFormat.ml:2424:42>>*/ ignored$8 =
             [2, iconv$2, get_pad_opt(95)],
           _aZ_ = [0, [23, ignored$8, fmt_rest$17]];
         else
           /*<<camlinternalFormat.ml:2428:48>>*/ var
            /*<<camlinternalFormat.ml:2428:48>>*/ _a0_ = get_prec(0),
            /*<<camlinternalFormat.ml:2428:10>>*/ match$6 =
             make_padprec_fmt_ebb(get_int_pad(0), _a0_, fmt_rest$17),
            /*<<camlinternalFormat.ml:2428:10>>*/ fmt_rest$18 = match$6[3],
            /*<<camlinternalFormat.ml:2428:10>>*/ prec$4 = match$6[2],
            /*<<camlinternalFormat.ml:2428:10>>*/ pad$8 = match$6[1],
           _aZ_ = [0, [4, iconv$2, pad$8, prec$4, fmt_rest$18]];
         var fmt_result = _aZ_;
         break;
        case 69:
        case 70:
        case 71:
        case 72:
        case 101:
        case 102:
        case 103:
        case 104:
          /*<<camlinternalFormat.ml:2485:38>>*/ var
           /*<<camlinternalFormat.ml:2485:38>>*/ space$1 = get_space(0),
           /*<<camlinternalFormat.ml:2485:24>>*/ hash$1 = get_hash(0),
           /*<<camlinternalFormat.ml:2485:10>>*/ plus$2 = get_plus(0),
           /*<<camlinternalFormat.ml:2939:4>>*/ flag =
            plus$2
             ? space$1
               ? legacy_behavior$0
                 ? 1
                 : incompatible_flag(pct_ind, str_ind, 32, cst$36)
               : 1
             : space$1 ? 2 : 0,
          switch$4 = 0;
          /*<<camlinternalFormat.ml:2947:4>>*/ if(73 <= symb){
          var switcher = symb - 101 | 0;
          if(3 < switcher >>> 0)
           switch$4 = 1;
          else{
           switch(switcher){
             case 0:
              var _a9_ = 1; break;
             case 1:
              var _a9_ = 0; break;
             case 2:
              var _a9_ = 3; break;
             default: var _a9_ = 6;
           }
           var kind = _a9_;
          }
         }
         else if(69 <= symb){
          var switch$5 = 0;
          switch(symb - 69 | 0){
            case 0:
             var _a__ = 2; break;
            case 1:
             switch$4 = 1; switch$5 = 1; break;
            case 2:
             var _a__ = 4; break;
            default: var _a__ = 7;
          }
          if(! switch$5) var kind = _a__;
         }
         else
          switch$4 = 1;
         if(switch$4){
          var switch$6 = 0;
          if(hash$1){
           if(70 === symb){var kind = 8; switch$6 = 1;}
          }
          else if(70 === symb){var kind = 5; switch$6 = 1;}
          if(! switch$6)
            /*<<camlinternalFormat.ml:2957:11>>*/ throw  /*<<camlinternalFormat.ml:2957:11>>*/ caml_maybe_attach_backtrace
                  ([0, Assert_failure, _X_], 1);
         }
          /*<<camlinternalFormat.ml:2958:4>>*/ var
           /*<<camlinternalFormat.ml:2958:4>>*/ fconv = [0, flag, kind],
           /*<<camlinternalFormat.ml:2486:29>>*/ fmt_rest$11 =
            parse(str_ind, end_ind)[1];
          /*<<camlinternalFormat.ml:2487:9>>*/ if(get_ign(0)){
           /*<<camlinternalFormat.ml:2366:32>>*/  /*<<camlinternalFormat.ml:2366:32>>*/ var
           match = get_prec(0);
           /*<<camlinternalFormat.ml:2366:32>>*/ if(typeof match === "number")
            /*<<camlinternalFormat.ml:2369:30>>*/  /*<<camlinternalFormat.ml:2369:30>>*/ var
            _aQ_ = match ? incompatible_flag(pct_ind, str_ind, 95, cst$26) : 0;
          else
            /*<<camlinternalFormat.ml:2368:30>>*/ var
             /*<<camlinternalFormat.ml:2368:30>>*/ ndec = match[1],
            _aQ_ = [0, ndec];
           /*<<camlinternalFormat.ml:2488:37>>*/ var
            /*<<camlinternalFormat.ml:2488:37>>*/ ignored$4 =
             [6, get_pad_opt(95), _aQ_],
           _aR_ = [0, [23, ignored$4, fmt_rest$11]];
         }
         else
           /*<<camlinternalFormat.ml:2492:44>>*/ var
            /*<<camlinternalFormat.ml:2492:44>>*/ _aS_ = get_prec(0),
            /*<<camlinternalFormat.ml:2492:10>>*/ match$4 =
             make_padprec_fmt_ebb(get_pad(0), _aS_, fmt_rest$11),
            /*<<camlinternalFormat.ml:2492:10>>*/ fmt_rest$12 = match$4[3],
            /*<<camlinternalFormat.ml:2492:10>>*/ prec$3 = match$4[2],
            /*<<camlinternalFormat.ml:2492:10>>*/ pad$5 = match$4[1],
           _aR_ = [0, [8, fconv, pad$5, prec$3, fmt_rest$12]];
         var fmt_result = _aR_;
         break;
        default: switch$0 = 1;
      }
     if(switch$0){
      var switch$7 = 0;
      if(108 <= symb){
       if(111 > symb){
        var switch$8 = 0;
        switch(symb - 108 | 0){
          case 0:
            /*<<camlinternalFormat.ml:2449:25>>*/ var
             /*<<camlinternalFormat.ml:2449:25>>*/ _ax_ =
               /*<<camlinternalFormat.ml:2449:25>>*/ caml_string_get
               (str, str_ind),
             /*<<camlinternalFormat.ml:2449:10>>*/ _ay_ = get_space(0),
             /*<<camlinternalFormat.ml:2448:61>>*/ _az_ = get_hash(0),
             /*<<camlinternalFormat.ml:2448:8>>*/ iconv =
              compute_int_conv
               (pct_ind, str_ind + 1 | 0, get_plus(0), _az_, _ay_, _ax_),
             /*<<camlinternalFormat.ml:2450:29>>*/ fmt_rest =
              parse(str_ind + 1 | 0, end_ind)[1];
            /*<<camlinternalFormat.ml:2451:9>>*/ if(get_ign(0))
             /*<<camlinternalFormat.ml:2452:44>>*/ var
              /*<<camlinternalFormat.ml:2452:44>>*/ ignored =
               [3, iconv, get_pad_opt(95)],
             _aA_ = [0, [23, ignored, fmt_rest]];
           else
             /*<<camlinternalFormat.ml:2456:48>>*/ var
              /*<<camlinternalFormat.ml:2456:48>>*/ _aC_ = get_prec(0),
              /*<<camlinternalFormat.ml:2456:10>>*/ match$0 =
               make_padprec_fmt_ebb(get_int_pad(0), _aC_, fmt_rest),
              /*<<camlinternalFormat.ml:2456:10>>*/ fmt_rest$0 = match$0[3],
              /*<<camlinternalFormat.ml:2456:10>>*/ prec$0 = match$0[2],
              /*<<camlinternalFormat.ml:2456:10>>*/ pad$0 = match$0[1],
             _aA_ = [0, [5, iconv, pad$0, prec$0, fmt_rest$0]];
           var _aB_ = _aA_;
           switch$8 = 1;
           break;
          case 1: break;
          default:
            /*<<camlinternalFormat.ml:2461:39>>*/ var
             /*<<camlinternalFormat.ml:2461:39>>*/ _aD_ =
               /*<<camlinternalFormat.ml:2461:39>>*/ caml_string_get
               (str, str_ind),
             /*<<camlinternalFormat.ml:2461:24>>*/ _aE_ = get_space(0),
             /*<<camlinternalFormat.ml:2461:10>>*/ _aF_ = get_hash(0),
             /*<<camlinternalFormat.ml:2460:8>>*/ iconv$0 =
              compute_int_conv
               (pct_ind, str_ind + 1 | 0, get_plus(0), _aF_, _aE_, _aD_),
             /*<<camlinternalFormat.ml:2462:29>>*/ fmt_rest$1 =
              parse(str_ind + 1 | 0, end_ind)[1];
            /*<<camlinternalFormat.ml:2463:9>>*/ if(get_ign(0))
             /*<<camlinternalFormat.ml:2464:48>>*/ var
              /*<<camlinternalFormat.ml:2464:48>>*/ ignored$0 =
               [4, iconv$0, get_pad_opt(95)],
             _aG_ = [0, [23, ignored$0, fmt_rest$1]];
           else
             /*<<camlinternalFormat.ml:2468:48>>*/ var
              /*<<camlinternalFormat.ml:2468:48>>*/ _aH_ = get_prec(0),
              /*<<camlinternalFormat.ml:2468:10>>*/ match$1 =
               make_padprec_fmt_ebb(get_int_pad(0), _aH_, fmt_rest$1),
              /*<<camlinternalFormat.ml:2468:10>>*/ fmt_rest$2 = match$1[3],
              /*<<camlinternalFormat.ml:2468:10>>*/ prec$1 = match$1[2],
              /*<<camlinternalFormat.ml:2468:10>>*/ pad$1 = match$1[1],
             _aG_ = [0, [6, iconv$0, pad$1, prec$1, fmt_rest$2]];
           var _aB_ = _aG_;
           switch$8 = 1;
        }
        if(switch$8){var fmt_result = _aB_; switch$7 = 1;}
       }
      }
      else if(76 === symb){
        /*<<camlinternalFormat.ml:2473:25>>*/ var
         /*<<camlinternalFormat.ml:2473:25>>*/ _aI_ =
           /*<<camlinternalFormat.ml:2473:25>>*/ caml_string_get(str, str_ind),
         /*<<camlinternalFormat.ml:2473:10>>*/ _aJ_ = get_space(0),
         /*<<camlinternalFormat.ml:2472:61>>*/ _aK_ = get_hash(0),
         /*<<camlinternalFormat.ml:2472:8>>*/ iconv$1 =
          compute_int_conv
           (pct_ind, str_ind + 1 | 0, get_plus(0), _aK_, _aJ_, _aI_),
         /*<<camlinternalFormat.ml:2474:29>>*/ fmt_rest$3 =
          parse(str_ind + 1 | 0, end_ind)[1];
        /*<<camlinternalFormat.ml:2475:9>>*/ if(get_ign(0))
         /*<<camlinternalFormat.ml:2476:44>>*/ var
          /*<<camlinternalFormat.ml:2476:44>>*/ ignored$1 =
           [5, iconv$1, get_pad_opt(95)],
         _aL_ = [0, [23, ignored$1, fmt_rest$3]];
       else
         /*<<camlinternalFormat.ml:2480:48>>*/ var
          /*<<camlinternalFormat.ml:2480:48>>*/ _aM_ = get_prec(0),
          /*<<camlinternalFormat.ml:2480:10>>*/ match$2 =
           make_padprec_fmt_ebb(get_int_pad(0), _aM_, fmt_rest$3),
          /*<<camlinternalFormat.ml:2480:10>>*/ fmt_rest$4 = match$2[3],
          /*<<camlinternalFormat.ml:2480:10>>*/ prec$2 = match$2[2],
          /*<<camlinternalFormat.ml:2480:10>>*/ pad$2 = match$2[1],
         _aL_ = [0, [7, iconv$1, pad$2, prec$2, fmt_rest$4]];
       var fmt_result = _aL_;
       switch$7 = 1;
      }
      if(! switch$7)
       var
        fmt_result =
           /*<<camlinternalFormat.ml:2554:6>>*/ caml_call3
           (failwith_message(_J_), str, str_ind - 1 | 0, symb);
     }
      /*<<camlinternalFormat.ml:2556:60>>*/ if(1 - legacy_behavior$0){
       /*<<camlinternalFormat.ml:2562:32>>*/ var
        /*<<camlinternalFormat.ml:2562:32>>*/ _ao_ = 1 - plus_used[1],
        /*<<camlinternalFormat.ml:2562:32>>*/ plus$0 = _ao_ ? plus : _ao_;
       /*<<camlinternalFormat.ml:2564:6>>*/ if(plus$0)
        /*<<camlinternalFormat.ml:2564:6>>*/ incompatible_flag
        (pct_ind, str_ind, symb, cst$27);
       /*<<camlinternalFormat.ml:2564:50>>*/ var
        /*<<camlinternalFormat.ml:2564:50>>*/ _ap_ = 1 - hash_used[1],
        /*<<camlinternalFormat.ml:2564:50>>*/ hash$0 = _ap_ ? hash : _ap_;
       /*<<camlinternalFormat.ml:2566:6>>*/ if(hash$0)
        /*<<camlinternalFormat.ml:2566:6>>*/ incompatible_flag
        (pct_ind, str_ind, symb, cst$28);
       /*<<camlinternalFormat.ml:2566:50>>*/ var
        /*<<camlinternalFormat.ml:2566:50>>*/ _aq_ = 1 - space_used[1],
        /*<<camlinternalFormat.ml:2566:50>>*/ space$0 = _aq_ ? space : _aq_;
       /*<<camlinternalFormat.ml:2568:6>>*/ if(space$0)
        /*<<camlinternalFormat.ml:2568:6>>*/ incompatible_flag
        (pct_ind, str_ind, symb, cst$29);
       /*<<camlinternalFormat.ml:2568:50>>*/ var
        /*<<camlinternalFormat.ml:2568:50>>*/ _ar_ = 1 - pad_used[1],
        /*<<camlinternalFormat.ml:2568:50>>*/ _as_ =
         _ar_
          ?  /*<<camlinternalFormat.ml:2569:25>>*/ caml_notequal
            ([0, pad], _K_)
          : _ar_;
       /*<<camlinternalFormat.ml:2569:66>>*/ if(_as_)
        /*<<camlinternalFormat.ml:2570:6>>*/ incompatible_flag
        (pct_ind, str_ind, symb, cst_padding$0);
       /*<<camlinternalFormat.ml:2570:56>>*/ var
        /*<<camlinternalFormat.ml:2570:56>>*/ _at_ = 1 - prec_used[1],
        /*<<camlinternalFormat.ml:2570:56>>*/ _au_ =
         _at_
          ?  /*<<camlinternalFormat.ml:2571:25>>*/ caml_notequal
            ([0, prec], _L_)
          : _at_;
       /*<<camlinternalFormat.ml:2571:73>>*/ if(_au_){
        /*<<camlinternalFormat.ml:2572:6>>*/  /*<<camlinternalFormat.ml:2572:6>>*/ var
        _av_ = ign ? 95 : symb;
        /*<<camlinternalFormat.ml:2572:6>>*/ incompatible_flag
        (pct_ind, str_ind, _av_, cst_precision$2);
      }
       /*<<camlinternalFormat.ml:2573:21>>*/  /*<<camlinternalFormat.ml:2573:21>>*/ var
       plus$1 = ign ? plus : ign;
       /*<<camlinternalFormat.ml:2574:24>>*/ if(plus$1)
        /*<<camlinternalFormat.ml:2574:24>>*/ incompatible_flag
        (pct_ind, str_ind, 95, cst$30);
     }
      /*<<camlinternalFormat.ml:2574:67>>*/ var
       /*<<camlinternalFormat.ml:2574:67>>*/ _aw_ = 1 - ign_used[1],
       /*<<camlinternalFormat.ml:2574:67>>*/ ign$0 = _aw_ ? ign : _aw_;
      /*<<camlinternalFormat.ml:2580:6>>*/ if(ign$0){
      var switch$9 = 0;
       /*<<camlinternalFormat.ml:2580:6>>*/ if(38 <= symb){
       if(44 !== symb && 64 !== symb) switch$9 = 1;
      }
      else if(33 !== symb && 37 > symb) switch$9 = 1;
      var switch$10 = 0;
       /*<<camlinternalFormat.ml:2582:39>>*/ if
       (switch$9 || ! legacy_behavior$0)
       switch$10 = 1;
      if(switch$10)
        /*<<camlinternalFormat.ml:2584:10>>*/ incompatible_flag
        (pct_ind, str_ind, symb, cst$31);
     }
      /*<<camlinternalFormat.ml:2584:54>>*/ return fmt_result;
    }
     /*<<camlinternalFormat.ml:2083:2>>*/ function parse_after_precision
    (pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, pad, prec){
      /*<<camlinternalFormat.ml:2268:4>>*/ if(str_ind === end_ind)
       /*<<camlinternalFormat.ml:2268:30>>*/ unexpected_end_of_format(end_ind);
      /*<<camlinternalFormat.ml:2268:62>>*/ function parse_conv(padprec){
       /*<<camlinternalFormat.ml:2271:21>>*/ return parse_conversion
              (pct_ind,
               str_ind + 1 | 0,
               end_ind,
               plus,
               hash,
               space,
               ign,
               pad,
               prec,
               padprec,
                /*<<camlinternalFormat.ml:2271:21>>*/ caml_string_get
                (str, str_ind));
      /*<<camlinternalFormat.ml:2271:34>>*/ }
      /*<<camlinternalFormat.ml:2268:62>>*/ if(typeof pad !== "number")
       /*<<camlinternalFormat.ml:2287:13>>*/ return parse_conv(pad);
     if(typeof prec === "number" && ! prec)
       /*<<camlinternalFormat.ml:2281:29>>*/ return parse_conv(0);
     if(minus){
      if(typeof prec === "number")
        /*<<camlinternalFormat.ml:2285:33>>*/ return parse_conv(_F_);
      var n = prec[1];
      return parse_conv([0, 0, n]);
     }
     if(typeof prec === "number")
       /*<<camlinternalFormat.ml:2284:34>>*/ return parse_conv(_G_);
     var n$0 = prec[1];
     return parse_conv([0, 1, n$0]);
     /*<<camlinternalFormat.ml:2287:27>>*/ }
     /*<<camlinternalFormat.ml:2083:2>>*/ function parse_after_padding
    (pct_ind, str_ind, end_ind, minus, plus, hash, space, ign, pad){
      /*<<camlinternalFormat.ml:2219:4>>*/ if(str_ind === end_ind)
       /*<<camlinternalFormat.ml:2219:30>>*/ unexpected_end_of_format(end_ind);
      /*<<camlinternalFormat.ml:2220:10>>*/  /*<<camlinternalFormat.ml:2220:10>>*/ var
      symb =
         /*<<camlinternalFormat.ml:2220:10>>*/ caml_string_get(str, str_ind);
      /*<<camlinternalFormat.ml:2220:10>>*/ if(46 !== symb)
       /*<<camlinternalFormat.ml:2225:6>>*/ return parse_conversion
              (pct_ind,
               str_ind + 1 | 0,
               end_ind,
               plus,
               hash,
               space,
               ign,
               pad,
               0,
               pad,
               symb);
      /*<<camlinternalFormat.ml:2222:6>>*/  /*<<camlinternalFormat.ml:2222:6>>*/ var
      str_ind$0 = str_ind + 1 | 0;
      /*<<camlinternalFormat.ml:2233:4>>*/ if(str_ind$0 === end_ind)
       /*<<camlinternalFormat.ml:2233:30>>*/ unexpected_end_of_format(end_ind);
      /*<<camlinternalFormat.ml:2233:62>>*/ function parse_literal
     (minus, str_ind){
       /*<<camlinternalFormat.ml:2235:26>>*/ var
        /*<<camlinternalFormat.ml:2235:26>>*/ match =
         parse_positive(str_ind, end_ind, 0),
        /*<<camlinternalFormat.ml:2235:26>>*/ prec = match[2],
        /*<<camlinternalFormat.ml:2235:26>>*/ new_ind = match[1];
       /*<<camlinternalFormat.ml:2235:26>>*/ return parse_after_precision
              (pct_ind,
               new_ind,
               end_ind,
               minus,
               plus,
               hash,
               space,
               ign,
               pad,
               [0, prec]);
      /*<<camlinternalFormat.ml:2237:32>>*/ }
      /*<<camlinternalFormat.ml:2238:10>>*/  /*<<camlinternalFormat.ml:2238:10>>*/ var
      symb$0 =
         /*<<camlinternalFormat.ml:2238:10>>*/ caml_string_get(str, str_ind$0);
      /*<<camlinternalFormat.ml:2238:10>>*/ if(48 <= symb$0){
      if(58 > symb$0)
        /*<<camlinternalFormat.ml:2239:20>>*/ return parse_literal
               (minus, str_ind$0);
     }
     else if(42 <= symb$0)
      switch(symb$0 - 42 | 0){
        case 0:
          /*<<camlinternalFormat.ml:2251:6>>*/ return parse_after_precision
                 (pct_ind,
                  str_ind$0 + 1 | 0,
                  end_ind,
                  minus,
                  plus,
                  hash,
                  space,
                  ign,
                  pad,
                  1);
        case 1:
        case 3:
          /*<<camlinternalFormat.ml:2240:31>>*/ if(legacy_behavior$0){
           /*<<camlinternalFormat.ml:2249:6>>*/ var
            /*<<camlinternalFormat.ml:2249:6>>*/ _an_ = str_ind$0 + 1 | 0,
            /*<<camlinternalFormat.ml:2249:6>>*/ minus$0 =
             minus || (45 === symb$0 ? 1 : 0);
           /*<<camlinternalFormat.ml:2254:6>>*/ return parse_literal
                  (minus$0, _an_);
         }
         break;
      }
      /*<<camlinternalFormat.ml:2254:6>>*/ return legacy_behavior$0
             ? parse_after_precision
               (pct_ind,
                str_ind$0,
                end_ind,
                minus,
                plus,
                hash,
                space,
                ign,
                pad,
                _E_)
             : invalid_format_without(str_ind$0 - 1 | 0, 46, cst_precision);
     /*<<camlinternalFormat.ml:2226:29>>*/ }
     /*<<camlinternalFormat.ml:2083:2>>*/ function parse_flags
    (pct_ind, str_ind, end_ind, ign){
      /*<<camlinternalFormat.ml:2149:4>>*/ var
       /*<<camlinternalFormat.ml:2149:4>>*/ zero = [0, 0],
       /*<<camlinternalFormat.ml:2149:4>>*/ minus = [0, 0],
       /*<<camlinternalFormat.ml:2149:4>>*/ plus = [0, 0],
       /*<<camlinternalFormat.ml:2149:4>>*/ space = [0, 0],
       /*<<camlinternalFormat.ml:2149:4>>*/ hash = [0, 0];
      /*<<camlinternalFormat.ml:2149:4>>*/ function set_flag(str_ind, flag){
       /*<<camlinternalFormat.ml:2154:6>>*/ var
        /*<<camlinternalFormat.ml:2154:6>>*/ _ak_ = flag[1],
        /*<<camlinternalFormat.ml:2154:6>>*/ _al_ =
         _ak_ ? 1 - legacy_behavior$0 : _ak_;
       /*<<camlinternalFormat.ml:2155:8>>*/ if(_al_){
        /*<<camlinternalFormat.ml:2157:22>>*/  /*<<camlinternalFormat.ml:2157:22>>*/ var
        _am_ =
           /*<<camlinternalFormat.ml:2157:22>>*/ caml_string_get(str, str_ind);
        /*<<camlinternalFormat.ml:2155:8>>*/  /*<<camlinternalFormat.ml:2155:8>>*/ caml_call3
        (failwith_message(_C_), str, str_ind, _am_);
      }
       /*<<camlinternalFormat.ml:2157:35>>*/ flag[1] = 1;
       /*<<camlinternalFormat.ml:2157:35>>*/ return 0;
      /*<<camlinternalFormat.ml:2158:19>>*/ }
     var str_ind$0 = str_ind;
      /*<<camlinternalFormat.ml:2161:6>>*/ for(;;){
       /*<<camlinternalFormat.ml:2161:6>>*/ if(str_ind$0 === end_ind)
        /*<<camlinternalFormat.ml:2161:32>>*/ unexpected_end_of_format
        (end_ind);
       /*<<camlinternalFormat.ml:2162:18>>*/  /*<<camlinternalFormat.ml:2162:18>>*/ var
       switcher =
          /*<<camlinternalFormat.ml:2162:18>>*/ caml_string_get
          (str, str_ind$0)
         - 32
         | 0;
       /*<<camlinternalFormat.ml:2162:18>>*/ if(16 >= switcher >>> 0)
       switch(switcher){
         case 0:
           /*<<camlinternalFormat.ml:2167:15>>*/ set_flag(str_ind$0, space);
           /*<<camlinternalFormat.ml:2167:15>>*/ var
            /*<<camlinternalFormat.ml:2167:15>>*/ str_ind$1 =
             str_ind$0 + 1 | 0,
           str_ind$0 = str_ind$1;
          continue;
         case 3:
           /*<<camlinternalFormat.ml:2166:15>>*/ set_flag(str_ind$0, hash);
           /*<<camlinternalFormat.ml:2166:15>>*/ var
            /*<<camlinternalFormat.ml:2166:15>>*/ str_ind$2 =
             str_ind$0 + 1 | 0,
           str_ind$0 = str_ind$2;
          continue;
         case 11:
           /*<<camlinternalFormat.ml:2165:15>>*/ set_flag(str_ind$0, plus);
           /*<<camlinternalFormat.ml:2165:15>>*/ var
            /*<<camlinternalFormat.ml:2165:15>>*/ str_ind$3 =
             str_ind$0 + 1 | 0,
           str_ind$0 = str_ind$3;
          continue;
         case 13:
           /*<<camlinternalFormat.ml:2164:15>>*/ set_flag(str_ind$0, minus);
           /*<<camlinternalFormat.ml:2164:15>>*/ var
            /*<<camlinternalFormat.ml:2164:15>>*/ str_ind$4 =
             str_ind$0 + 1 | 0,
           str_ind$0 = str_ind$4;
          continue;
         case 16:
           /*<<camlinternalFormat.ml:2163:15>>*/ set_flag(str_ind$0, zero);
           /*<<camlinternalFormat.ml:2163:15>>*/ var
            /*<<camlinternalFormat.ml:2163:15>>*/ str_ind$5 =
             str_ind$0 + 1 | 0,
           str_ind$0 = str_ind$5;
          continue;
       }
       /*<<camlinternalFormat.ml:2169:8>>*/ var
        /*<<camlinternalFormat.ml:2169:8>>*/ space$0 = space[1],
        /*<<camlinternalFormat.ml:2169:8>>*/ hash$0 = hash[1],
        /*<<camlinternalFormat.ml:2169:8>>*/ plus$0 = plus[1],
        /*<<camlinternalFormat.ml:2169:8>>*/ minus$0 = minus[1],
        /*<<camlinternalFormat.ml:2169:8>>*/ zero$0 = zero[1];
       /*<<camlinternalFormat.ml:2180:4>>*/ if(str_ind$0 === end_ind)
        /*<<camlinternalFormat.ml:2180:30>>*/ unexpected_end_of_format
        (end_ind);
       /*<<camlinternalFormat.ml:2180:62>>*/ var
        /*<<camlinternalFormat.ml:2180:62>>*/ padty =
         zero$0
          ? minus$0
            ? legacy_behavior$0
              ? 0
              : incompatible_flag(pct_ind, str_ind$0, 45, cst_0)
            : 2
          : minus$0 ? 0 : 1,
        /*<<camlinternalFormat.ml:2188:10>>*/ match =
          /*<<camlinternalFormat.ml:2188:10>>*/ caml_string_get
          (str, str_ind$0);
       /*<<camlinternalFormat.ml:2188:10>>*/ if(48 <= match){
       if(58 > match){
         /*<<camlinternalFormat.ml:2190:27>>*/ var
          /*<<camlinternalFormat.ml:2190:27>>*/ match$0 =
           parse_positive(str_ind$0, end_ind, 0),
          /*<<camlinternalFormat.ml:2190:27>>*/ width = match$0[2],
          /*<<camlinternalFormat.ml:2190:27>>*/ new_ind = match$0[1];
         /*<<camlinternalFormat.ml:2190:27>>*/ return parse_after_padding
                (pct_ind,
                 new_ind,
                 end_ind,
                 minus$0,
                 plus$0,
                 hash$0,
                 space$0,
                 ign,
                 [0, padty, width]);
       }
      }
      else if(42 === match)
        /*<<camlinternalFormat.ml:2194:6>>*/ return parse_after_padding
               (pct_ind,
                str_ind$0 + 1 | 0,
                end_ind,
                minus$0,
                plus$0,
                hash$0,
                space$0,
                ign,
                [1, padty]);
       /*<<camlinternalFormat.ml:2197:6>>*/ switch(padty){
        case 0:
          /*<<camlinternalFormat.ml:2199:8>>*/ if(1 - legacy_behavior$0)
           /*<<camlinternalFormat.ml:2200:10>>*/ invalid_format_without
           (str_ind$0 - 1 | 0, 45, cst_padding);
          /*<<camlinternalFormat.ml:2200:60>>*/ return parse_after_padding
                 (pct_ind,
                  str_ind$0,
                  end_ind,
                  minus$0,
                  plus$0,
                  hash$0,
                  space$0,
                  ign,
                  0);
        case 1:
          /*<<camlinternalFormat.ml:2210:8>>*/ return parse_after_padding
                 (pct_ind,
                  str_ind$0,
                  end_ind,
                  minus$0,
                  plus$0,
                  hash$0,
                  space$0,
                  ign,
                  0);
        default:
          /*<<camlinternalFormat.ml:2207:8>>*/ return parse_after_padding
                 (pct_ind,
                  str_ind$0,
                  end_ind,
                  minus$0,
                  plus$0,
                  hash$0,
                  space$0,
                  ign,
                  _D_);
      }
     }
     /*<<camlinternalFormat.ml:2173:22>>*/ }
     /*<<camlinternalFormat.ml:2083:2>>*/ function parse_tag
    (is_open_tag, str_ind, end_ind){
      /*<<?>>*/ try{
      if(str_ind === end_ind)
        /*<<camlinternalFormat.ml:2640:32>>*/ throw  /*<<camlinternalFormat.ml:2640:32>>*/ caml_maybe_attach_backtrace
              (Stdlib[8], 1);
       /*<<camlinternalFormat.ml:2641:12>>*/ if
       (60
        !==
          /*<<camlinternalFormat.ml:2641:12>>*/ caml_string_get(str, str_ind))
        /*<<camlinternalFormat.ml:2653:8>>*/ throw  /*<<camlinternalFormat.ml:2653:8>>*/ caml_maybe_attach_backtrace
              (Stdlib[8], 1);
       /*<<camlinternalFormat.ml:2643:18>>*/  /*<<camlinternalFormat.ml:2643:18>>*/ var
       ind =
          /*<<camlinternalFormat.ml:2643:18>>*/ caml_call3
          (Stdlib_String[31], str, str_ind + 1 | 0, 62);
       /*<<camlinternalFormat.ml:2643:18>>*/ if(end_ind <= ind)
        /*<<camlinternalFormat.ml:2644:31>>*/ throw  /*<<camlinternalFormat.ml:2644:31>>*/ caml_maybe_attach_backtrace
              (Stdlib[8], 1);
       /*<<camlinternalFormat.ml:2645:22>>*/ var
        /*<<camlinternalFormat.ml:2645:22>>*/ sub_str =
          /*<<camlinternalFormat.ml:2645:22>>*/ caml_call3
          (Stdlib_String[15], str, str_ind, (ind - str_ind | 0) + 1 | 0),
        /*<<camlinternalFormat.ml:2646:31>>*/ fmt_rest$0 =
         parse(ind + 1 | 0, end_ind)[1],
        /*<<camlinternalFormat.ml:2647:30>>*/ sub_fmt =
         parse(str_ind, ind + 1 | 0)[1],
        /*<<camlinternalFormat.ml:2647:30>>*/ sub_format$0 =
         [0, sub_fmt, sub_str],
        /*<<camlinternalFormat.ml:2647:30>>*/ formatting$0 =
         is_open_tag ? [0, sub_format$0] : [1, sub_format$0],
        /*<<camlinternalFormat.ml:2650:55>>*/ _ai_ =
         [0, [18, formatting$0, fmt_rest$0]];
      return _ai_;
     }
     catch(_aj_){
      var _ah_ = caml_wrap_exception(_aj_);
      if(_ah_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_ah_, 0);
       /*<<camlinternalFormat.ml:2655:29>>*/ var
        /*<<camlinternalFormat.ml:2655:29>>*/ fmt_rest =
         parse(str_ind, end_ind)[1],
        /*<<camlinternalFormat.ml:2655:29>>*/ formatting =
         is_open_tag ? [0, sub_format] : [1, sub_format];
       /*<<camlinternalFormat.ml:2658:53>>*/ return [0,
              [18, formatting, fmt_rest]];
     }
     /*<<camlinternalFormat.ml:2659:53>>*/ }
     /*<<camlinternalFormat.ml:2083:2>>*/ function parse_spaces
    (str_ind, end_ind){
     var str_ind$0 = str_ind;
      /*<<camlinternalFormat.ml:2804:4>>*/ for(;;){
       /*<<camlinternalFormat.ml:2804:4>>*/ if(str_ind$0 === end_ind)
        /*<<camlinternalFormat.ml:2804:30>>*/ unexpected_end_of_format
        (end_ind);
       /*<<camlinternalFormat.ml:2805:7>>*/ if
       (32
        !==
          /*<<camlinternalFormat.ml:2805:7>>*/ caml_string_get(str, str_ind$0))
        /*<<camlinternalFormat.ml:2805:72>>*/ return str_ind$0;
       /*<<camlinternalFormat.ml:2805:32>>*/ var
        /*<<camlinternalFormat.ml:2805:32>>*/ str_ind$1 = str_ind$0 + 1 | 0,
       str_ind$0 = str_ind$1;
     }
     /*<<camlinternalFormat.ml:2805:79>>*/ }
     /*<<camlinternalFormat.ml:2083:2>>*/ function parse_positive
    (str_ind, end_ind, acc){
     var str_ind$0 = str_ind, acc$0 = acc;
      /*<<camlinternalFormat.ml:2810:4>>*/ for(;;){
       /*<<camlinternalFormat.ml:2810:4>>*/ if(str_ind$0 === end_ind)
        /*<<camlinternalFormat.ml:2810:30>>*/ unexpected_end_of_format
        (end_ind);
       /*<<camlinternalFormat.ml:2811:10>>*/  /*<<camlinternalFormat.ml:2811:10>>*/ var
       c =
          /*<<camlinternalFormat.ml:2811:10>>*/ caml_string_get
          (str, str_ind$0);
       /*<<camlinternalFormat.ml:2811:10>>*/ if(9 < c - 48 >>> 0)
        /*<<camlinternalFormat.ml:2820:11>>*/ return [0, str_ind$0, acc$0];
       /*<<camlinternalFormat.ml:2813:6>>*/  /*<<camlinternalFormat.ml:2813:6>>*/ var
       new_acc = (acc$0 * 10 | 0) + (c - 48 | 0) | 0;
       /*<<camlinternalFormat.ml:2813:6>>*/ if(Stdlib_Sys[12] < new_acc){
        /*<<camlinternalFormat.ml:2815:8>>*/  /*<<camlinternalFormat.ml:2815:8>>*/ var
        _ag_ = Stdlib_Sys[12];
        /*<<camlinternalFormat.ml:2815:8>>*/ return  /*<<camlinternalFormat.ml:2815:8>>*/ caml_call3
               (failwith_message(_S_), str, new_acc, _ag_);
      }
       /*<<camlinternalFormat.ml:2819:8>>*/ var
        /*<<camlinternalFormat.ml:2819:8>>*/ str_ind$1 = str_ind$0 + 1 | 0,
       str_ind$0 = str_ind$1,
       acc$0 = new_acc;
     }
     /*<<camlinternalFormat.ml:2820:23>>*/ }
     /*<<camlinternalFormat.ml:2083:2>>*/ function parse_integer
    (str_ind, end_ind){
      /*<<camlinternalFormat.ml:2825:4>>*/ if(str_ind === end_ind)
       /*<<camlinternalFormat.ml:2825:30>>*/ unexpected_end_of_format(end_ind);
      /*<<camlinternalFormat.ml:2826:10>>*/  /*<<camlinternalFormat.ml:2826:10>>*/ var
      match =
         /*<<camlinternalFormat.ml:2826:10>>*/ caml_string_get(str, str_ind);
      /*<<camlinternalFormat.ml:2826:10>>*/ if(48 <= match){
      if(58 > match)
        /*<<camlinternalFormat.ml:2827:20>>*/ return parse_positive
               (str_ind, end_ind, 0);
     }
     else if(45 === match){
       /*<<camlinternalFormat.ml:2828:13>>*/ if((str_ind + 1 | 0) === end_ind)
        /*<<camlinternalFormat.ml:2829:36>>*/ unexpected_end_of_format
        (end_ind);
       /*<<camlinternalFormat.ml:2830:12>>*/  /*<<camlinternalFormat.ml:2830:12>>*/ var
       c =
          /*<<camlinternalFormat.ml:2830:12>>*/ caml_string_get
          (str, str_ind + 1 | 0);
       /*<<camlinternalFormat.ml:2830:12>>*/ if(9 < c - 48 >>> 0)
        /*<<camlinternalFormat.ml:2835:8>>*/ return expected_character
               (str_ind + 1 | 0, cst_digit, c);
       /*<<camlinternalFormat.ml:2832:26>>*/ var
        /*<<camlinternalFormat.ml:2832:26>>*/ match$0 =
         parse_positive(str_ind + 1 | 0, end_ind, 0),
        /*<<camlinternalFormat.ml:2832:26>>*/ n = match$0[2],
        /*<<camlinternalFormat.ml:2832:26>>*/ next_ind = match$0[1];
       /*<<camlinternalFormat.ml:2832:26>>*/ return [0, next_ind, - n | 0];
     }
      /*<<camlinternalFormat.ml:2837:11>>*/ throw  /*<<camlinternalFormat.ml:2837:11>>*/ caml_maybe_attach_backtrace
            ([0, Assert_failure, _T_], 1);
     /*<<camlinternalFormat.ml:2837:23>>*/ }
     /*<<camlinternalFormat.ml:2083:2>>*/ function search_subformat_end
    (str_ind, end_ind, c){
     var str_ind$0 = str_ind;
      /*<<camlinternalFormat.ml:2851:4>>*/ for(;;){
       /*<<camlinternalFormat.ml:2851:4>>*/ if(str_ind$0 === end_ind)
        /*<<camlinternalFormat.ml:2852:6>>*/  /*<<camlinternalFormat.ml:2852:6>>*/ caml_call3
        (failwith_message(_U_), str, c, end_ind);
       /*<<camlinternalFormat.ml:2855:10>>*/ if
       (37
        !==
          /*<<camlinternalFormat.ml:2855:10>>*/ caml_string_get
          (str, str_ind$0)){
        /*<<camlinternalFormat.ml:2889:11>>*/ var
         /*<<camlinternalFormat.ml:2889:11>>*/ str_ind$7 = str_ind$0 + 1 | 0,
        str_ind$0 = str_ind$7;
       continue;
      }
       /*<<camlinternalFormat.ml:2857:6>>*/ if
       ((str_ind$0 + 1 | 0) === end_ind)
        /*<<camlinternalFormat.ml:2857:36>>*/ unexpected_end_of_format
        (end_ind);
       /*<<camlinternalFormat.ml:2858:9>>*/ if
       ( /*<<camlinternalFormat.ml:2858:9>>*/ caml_string_get
         (str, str_ind$0 + 1 | 0)
        === c)
        /*<<camlinternalFormat.ml:2858:62>>*/ return str_ind$0;
       /*<<camlinternalFormat.ml:2859:20>>*/  /*<<camlinternalFormat.ml:2859:20>>*/ var
       match =
          /*<<camlinternalFormat.ml:2859:20>>*/ caml_string_get
          (str, str_ind$0 + 1 | 0);
       /*<<camlinternalFormat.ml:2859:20>>*/ if(95 <= match){
       if(123 <= match){
        if(126 > match)
         switch(match - 123 | 0){
           case 0:
             /*<<camlinternalFormat.ml:2874:24>>*/ var
              /*<<camlinternalFormat.ml:2874:24>>*/ sub_end =
               search_subformat_end(str_ind$0 + 2 | 0, end_ind, 125),
              /*<<camlinternalFormat.ml:2874:24>>*/ str_ind$2 =
               sub_end + 2 | 0,
             str_ind$0 = str_ind$2;
            continue;
           case 1: break;
           default:
             /*<<camlinternalFormat.ml:2882:10>>*/ return expected_character
                    (str_ind$0 + 1 | 0, cst_character, 125);
         }
       }
       else if(96 > match){
         /*<<camlinternalFormat.ml:2862:10>>*/ if
         ((str_ind$0 + 2 | 0) === end_ind)
          /*<<camlinternalFormat.ml:2862:40>>*/ unexpected_end_of_format
          (end_ind);
         /*<<camlinternalFormat.ml:2863:22>>*/  /*<<camlinternalFormat.ml:2863:22>>*/ var
         match$0 =
            /*<<camlinternalFormat.ml:2863:22>>*/ caml_string_get
            (str, str_ind$0 + 2 | 0);
         /*<<camlinternalFormat.ml:2863:22>>*/ if(40 === match$0){
          /*<<camlinternalFormat.ml:2868:26>>*/ var
           /*<<camlinternalFormat.ml:2868:26>>*/ sub_end$0 =
            search_subformat_end(str_ind$0 + 3 | 0, end_ind, 41),
           /*<<camlinternalFormat.ml:2868:26>>*/ str_ind$3 = sub_end$0 + 2 | 0,
          str_ind$0 = str_ind$3;
         continue;
        }
        if(123 === match$0){
          /*<<camlinternalFormat.ml:2865:26>>*/ var
           /*<<camlinternalFormat.ml:2865:26>>*/ sub_end$1 =
            search_subformat_end(str_ind$0 + 3 | 0, end_ind, 125),
           /*<<camlinternalFormat.ml:2865:26>>*/ str_ind$4 = sub_end$1 + 2 | 0,
          str_ind$0 = str_ind$4;
         continue;
        }
         /*<<camlinternalFormat.ml:2870:17>>*/ var
          /*<<camlinternalFormat.ml:2870:17>>*/ str_ind$5 = str_ind$0 + 3 | 0,
         str_ind$0 = str_ind$5;
        continue;
       }
      }
      else{
       if(40 === match){
         /*<<camlinternalFormat.ml:2878:24>>*/ var
          /*<<camlinternalFormat.ml:2878:24>>*/ sub_end$2 =
           search_subformat_end(str_ind$0 + 2 | 0, end_ind, 41),
          /*<<camlinternalFormat.ml:2878:24>>*/ str_ind$6 = sub_end$2 + 2 | 0,
         str_ind$0 = str_ind$6;
        continue;
       }
       if(41 === match)
         /*<<camlinternalFormat.ml:2885:10>>*/ return expected_character
                (str_ind$0 + 1 | 0, cst_character$0, 41);
      }
       /*<<camlinternalFormat.ml:2887:10>>*/ var
        /*<<camlinternalFormat.ml:2887:10>>*/ str_ind$1 = str_ind$0 + 2 | 0,
       str_ind$0 = str_ind$1;
     }
     /*<<camlinternalFormat.ml:2889:55>>*/ }
     /*<<camlinternalFormat.ml:2083:2>>*/ function incompatible_flag
    (pct_ind, str_ind, symb, option){
      /*<<camlinternalFormat.ml:2963:19>>*/  /*<<camlinternalFormat.ml:2963:19>>*/ var
      subfmt =
         /*<<camlinternalFormat.ml:2963:19>>*/ caml_call3
         (Stdlib_String[15], str, pct_ind, str_ind - pct_ind | 0);
      /*<<camlinternalFormat.ml:2963:19>>*/ return  /*<<camlinternalFormat.ml:2963:19>>*/ caml_call5
             (failwith_message(_Y_), str, pct_ind, option, symb, subfmt);
     /*<<camlinternalFormat.ml:2967:38>>*/ }
     /*<<camlinternalFormat.ml:2083:2>>*/ function compute_int_conv
    (pct_ind, str_ind, plus, hash, space, symb){
     var plus$0 = plus, hash$0 = hash, space$0 = space;
      /*<<camlinternalFormat.ml:2903:4>>*/ for(;;){
      var switch$0 = 0;
       /*<<camlinternalFormat.ml:2903:4>>*/ if(plus$0){
       if(hash$0)
        switch$0 = 1;
       else if(! space$0){
        if(100 === symb)  /*<<camlinternalFormat.ml:2906:34>>*/ return 1;
        if(105 === symb)  /*<<camlinternalFormat.ml:2906:71>>*/ return 4;
       }
      }
      else if(hash$0)
       if(space$0)
        switch$0 = 1;
       else{
        var switcher$0 = symb - 88 | 0;
        if(32 < switcher$0 >>> 0)
         switch$0 = 1;
        else
         switch(switcher$0){
           case 0:
             /*<<camlinternalFormat.ml:2908:71>>*/ return 9;
           case 12:
             /*<<camlinternalFormat.ml:2912:34>>*/ return 13;
           case 17:
             /*<<camlinternalFormat.ml:2913:34>>*/ return 14;
           case 23:
             /*<<camlinternalFormat.ml:2910:34>>*/ return 11;
           case 29:
             /*<<camlinternalFormat.ml:2914:34>>*/ return 15;
           case 32:
             /*<<camlinternalFormat.ml:2908:34>>*/ return 7;
           default: switch$0 = 1;
         }
       }
      else if(space$0){
       if(100 === symb)  /*<<camlinternalFormat.ml:2905:34>>*/ return 2;
       if(105 === symb)  /*<<camlinternalFormat.ml:2905:71>>*/ return 5;
      }
      else{
       var switcher$1 = symb - 88 | 0;
       if(32 >= switcher$1 >>> 0)
        switch(switcher$1){
          case 0:
            /*<<camlinternalFormat.ml:2907:71>>*/ return 8;
          case 12:
            /*<<camlinternalFormat.ml:2904:34>>*/ return 0;
          case 17:
            /*<<camlinternalFormat.ml:2904:71>>*/ return 3;
          case 23:
            /*<<camlinternalFormat.ml:2909:34>>*/ return 10;
          case 29:
            /*<<camlinternalFormat.ml:2911:34>>*/ return 12;
          case 32:
            /*<<camlinternalFormat.ml:2907:34>>*/ return 6;
        }
      }
      if(switch$0){
       var switcher = symb - 88 | 0;
       if(32 >= switcher >>> 0)
        switch(switcher){
          case 0:
            /*<<camlinternalFormat.ml:2916:27>>*/ if(legacy_behavior$0)
             /*<<camlinternalFormat.ml:2916:46>>*/ return 9;
           break;
          case 23:
            /*<<camlinternalFormat.ml:2917:27>>*/ if(legacy_behavior$0)
             /*<<camlinternalFormat.ml:2917:46>>*/ return 11;
           break;
          case 32:
            /*<<camlinternalFormat.ml:2915:27>>*/ if(legacy_behavior$0)
             /*<<camlinternalFormat.ml:2915:46>>*/ return 7;
           break;
          case 12:
          case 17:
          case 29:
            /*<<camlinternalFormat.ml:2919:6>>*/ if(! legacy_behavior$0)
             /*<<camlinternalFormat.ml:2921:11>>*/ return incompatible_flag
                    (pct_ind, str_ind, symb, cst$35);
           var hash$0 = 0;
           continue;
        }
      }
      if(! plus$0){
        /*<<camlinternalFormat.ml:2928:6>>*/ if(! space$0)
         /*<<camlinternalFormat.ml:2935:28>>*/ throw  /*<<camlinternalFormat.ml:2935:28>>*/ caml_maybe_attach_backtrace
               ([0, Assert_failure, _W_], 1);
        /*<<camlinternalFormat.ml:2928:6>>*/ if(! legacy_behavior$0)
         /*<<camlinternalFormat.ml:2930:11>>*/ return incompatible_flag
                (pct_ind, str_ind, symb, cst$34);
       var space$0 = 0;
       continue;
      }
       /*<<camlinternalFormat.ml:2923:6>>*/ if(space$0){
        /*<<camlinternalFormat.ml:2923:6>>*/ if(! legacy_behavior$0)
         /*<<camlinternalFormat.ml:2926:11>>*/ return incompatible_flag
                (pct_ind, str_ind, 32, cst$32);
       var space$0 = 0;
       continue;
      }
       /*<<camlinternalFormat.ml:2932:6>>*/ if(! legacy_behavior$0)
        /*<<camlinternalFormat.ml:2934:11>>*/ return incompatible_flag
               (pct_ind, str_ind, symb, cst$33);
      var plus$0 = 0;
     }
     /*<<camlinternalFormat.ml:2935:40>>*/ }
     /*<<camlinternalFormat.ml:2083:2>>*/ return parse
            (0,
              /*<<camlinternalFormat.ml:2083:2>>*/ caml_ml_string_length(str));
   }
   function format_of_string_fmtty(str, fmtty){
     /*<<camlinternalFormat.ml:2977:20>>*/  /*<<camlinternalFormat.ml:2977:20>>*/ var
     fmt = fmt_ebb_of_string(0, str)[1];
    try{
      /*<<camlinternalFormat.ml:2978:14>>*/  /*<<camlinternalFormat.ml:2978:14>>*/ var
      _ae_ = [0, type_format(fmt, fmtty), str];
     return _ae_;
    }
    catch(_af_){
     var _ac_ = caml_wrap_exception(_af_);
     if(_ac_ !== Type_mismatch) throw caml_maybe_attach_backtrace(_ac_, 0);
      /*<<camlinternalFormat.ml:2982:10>>*/  /*<<camlinternalFormat.ml:2982:10>>*/ var
      _ad_ = string_of_fmtty(fmtty);
      /*<<camlinternalFormat.ml:2982:10>>*/ return  /*<<camlinternalFormat.ml:2982:10>>*/ caml_call2
             (failwith_message(_Z_), str, _ad_);
    }
    /*<<camlinternalFormat.ml:2982:33>>*/ }
   function format_of_string_format(str, param){
     /*<<camlinternalFormat.ml:2987:20>>*/ var
     str$0 = param[2],
     fmt = param[1],
      /*<<camlinternalFormat.ml:2987:20>>*/ fmt$0 =
       fmt_ebb_of_string(0, str)[1];
    try{
      /*<<camlinternalFormat.ml:2988:14>>*/  /*<<camlinternalFormat.ml:2988:14>>*/ var
      _aa_ = [0, type_format(fmt$0, fmtty_of_fmt(fmt)), str];
     return _aa_;
    }
    catch(_ab_){
     var _$_ = caml_wrap_exception(_ab_);
     if(_$_ === Type_mismatch)
       /*<<camlinternalFormat.ml:2990:4>>*/ return  /*<<camlinternalFormat.ml:2990:4>>*/ caml_call2
              (failwith_message(___), str, str$0);
     throw caml_maybe_attach_backtrace(_$_, 0);
    }
   }
   var
    CamlinternalFormat =
      [0,
       is_in_char_set,
       rev_char_set,
       create_char_set,
       add_in_char_set,
       freeze_char_set,
       param_format_of_ignored_format,
       make_printf,
       make_iprintf,
       output_acc,
       bufput_acc,
       strput_acc,
       type_format,
       fmt_ebb_of_string,
       format_of_string_fmtty,
       format_of_string_format,
       char_of_iconv,
       string_of_formatting_lit,
       string_of_fmtty,
       string_of_fmt,
       open_box_of_string,
       symm,
       trans,
       recast];
   runtime.caml_register_global(197, CamlinternalFormat, "CamlinternalFormat");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Printf
//# unitInfo: Requires: CamlinternalFormat, Stdlib, Stdlib__Buffer
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<printf.ml:41:37>>*/ var
     /*<<printf.ml:41:37>>*/ global_data =
       /*<<printf.ml:41:37>>*/ runtime.caml_get_global_data(),
     /*<<printf.ml:41:37>>*/ Stdlib_Buffer = global_data.Stdlib__Buffer,
     /*<<printf.ml:41:37>>*/ CamlinternalFormat =
      global_data.CamlinternalFormat,
     /*<<printf.ml:41:37>>*/ Stdlib = global_data.Stdlib;
   function kfprintf(k, o, param){
    var fmt = param[1], _g_ = 0;
    function _h_(acc){
      /*<<printf.ml:20:26>>*/  /*<<printf.ml:20:26>>*/ caml_call2
      (CamlinternalFormat[9], o, acc);
      /*<<printf.ml:20:26>>*/ return  /*<<printf.ml:20:26>>*/ caml_call1(k, o);
     /*<<printf.ml:20:47>>*/ }
    return caml_call3(CamlinternalFormat[7], _h_, _g_, fmt);
   }
   function kbprintf(k, b, param){
    var fmt = param[1], _e_ = 0;
    function _f_(acc){
      /*<<printf.ml:22:26>>*/  /*<<printf.ml:22:26>>*/ caml_call2
      (CamlinternalFormat[10], b, acc);
      /*<<printf.ml:22:26>>*/ return  /*<<printf.ml:22:26>>*/ caml_call1(k, b);
     /*<<printf.ml:22:47>>*/ }
    return caml_call3(CamlinternalFormat[7], _f_, _e_, fmt);
   }
   function ikfprintf(k, oc, param){
    var fmt = param[1];
    return caml_call3(CamlinternalFormat[8], k, oc, fmt);
   }
   function fprintf(oc, fmt){
     /*<<printf.ml:27:21>>*/ return kfprintf
            (function(_d_){ /*<<?>>*/ return 0;}, oc, fmt);
    /*<<printf.ml:27:43>>*/ }
   function bprintf(b, fmt){
     /*<<printf.ml:28:20>>*/ return kbprintf
            (function(_c_){ /*<<?>>*/ return 0;}, b, fmt);
    /*<<printf.ml:28:41>>*/ }
   function ifprintf(oc, fmt){
     /*<<printf.ml:29:22>>*/ return ikfprintf
            (function(_b_){ /*<<?>>*/ return 0;}, oc, fmt);
    /*<<printf.ml:29:45>>*/ }
   function ibprintf(b, fmt){
     /*<<printf.ml:30:21>>*/ return ikfprintf
            (function(_a_){ /*<<?>>*/ return 0;}, b, fmt);
    /*<<printf.ml:30:43>>*/ }
   function printf(fmt){
     /*<<printf.ml:31:17>>*/ return fprintf(Stdlib[39], fmt);
    /*<<printf.ml:31:35>>*/ }
   function eprintf(fmt){
     /*<<printf.ml:32:18>>*/ return fprintf(Stdlib[40], fmt);
    /*<<printf.ml:32:36>>*/ }
   function ksprintf(k, param){
    var fmt = param[1];
    function k$0(acc){
      /*<<printf.ml:36:14>>*/  /*<<printf.ml:36:14>>*/ var
      buf =  /*<<printf.ml:36:14>>*/ caml_call1(Stdlib_Buffer[1], 64);
      /*<<printf.ml:37:4>>*/  /*<<printf.ml:37:4>>*/ caml_call2
      (CamlinternalFormat[11], buf, acc);
      /*<<printf.ml:38:6>>*/ return  /*<<printf.ml:38:6>>*/ caml_call1
             (k,  /*<<printf.ml:38:6>>*/ caml_call1(Stdlib_Buffer[2], buf));
     /*<<printf.ml:38:27>>*/ }
    return caml_call3(CamlinternalFormat[7], k$0, 0, fmt);
   }
   function sprintf(fmt){
     /*<<printf.ml:41:18>>*/ return ksprintf
            (function(s){
               /*<<printf.ml:41:37>>*/ return s;
              /*<<printf.ml:41:38>>*/ },
             fmt);
    /*<<printf.ml:41:43>>*/ }
   var
    Stdlib_Printf =
      [0,
       fprintf,
       printf,
       eprintf,
       sprintf,
       bprintf,
       ifprintf,
       ibprintf,
       kfprintf,
       ikfprintf,
       ksprintf,
       kbprintf,
       ikfprintf,
       ksprintf];
   runtime.caml_register_global(3, Stdlib_Printf, "Stdlib__Printf");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Arg
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__Buffer, Stdlib__Int, Stdlib__List, Stdlib__Printf, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$7 = "",
    cst$9 = "  ",
    cst_Display_this_list_of_optio$1 = " Display this list of options",
    cst_s = "%s",
    cst_help$4 = "--help",
    cst_help$3 = "-help",
    cst$8 = ".\n",
    cst_a_float$1 = "a float",
    cst_an_integer$1 = "an integer",
    caml_check_bound = runtime.caml_check_bound,
    caml_equal = runtime.caml_equal,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_sys_argv = runtime.caml_sys_argv,
    caml_wrap_exception = runtime.caml_wrap_exception;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<?>>*/ function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
    /*<<?>>*/ function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
    /*<<?>>*/ function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst$6 = "\n",
    cst$3 = cst$7,
    cst$4 = " ",
    cst$5 = cst$7,
    cst$2 = "(?)",
    cst = "}",
    cst$0 = "|",
    cst$1 = "{",
    Stdlib = global_data.Stdlib,
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_List = global_data.Stdlib__List,
    Stdlib_String = global_data.Stdlib__String,
    Stdlib_Int = global_data.Stdlib__Int,
    Bad = [248, "Stdlib.Arg.Bad", caml_fresh_oo_id(0)],
    Help = [248, "Stdlib.Arg.Help", caml_fresh_oo_id(0)],
    Stop = [248, "Stdlib.Arg.Stop", caml_fresh_oo_id(0)],
    _v_ = [0, [2, 0, [0, 0]], "%s%c"],
    _p_ = [0, [2, 0, 0], cst_s],
    _q_ = [0, [2, 0, 0], cst_s],
    _n_ = [0, [2, 0, 0], cst_s],
    _o_ = [0, [2, 0, 0], cst_s],
    _l_ = [0, [2, 0, 0], cst_s],
    _m_ = [0, [2, 0, 0], cst_s],
    cst_a_boolean = "a boolean",
    cst_an_integer = cst_an_integer$1,
    cst_an_integer$0 = cst_an_integer$1,
    cst_a_float = cst_a_float$1,
    cst_a_float$0 = cst_a_float$1,
    cst_one_of = "one of: ",
    cst_Arg_Expand_is_is_only_allo =
      "Arg.Expand is is only allowed with Arg.parse_and_expand_argv_dynamic",
    cst_no_argument = "no argument",
    _f_ =
      [0,
       [2, 0, [11, ": unknown option '", [2, 0, [11, "'.\n", 0]]]],
       "%s: unknown option '%s'.\n"],
    _i_ =
      [0,
       [2,
        0,
        [11,
         ": wrong argument '",
         [2,
          0,
          [11,
           "'; option '",
           [2, 0, [11, "' expects ", [2, 0, [11, cst$8, 0]]]]]]]],
       "%s: wrong argument '%s'; option '%s' expects %s.\n"],
    _j_ =
      [0,
       [2, 0, [11, ": option '", [2, 0, [11, "' needs an argument.\n", 0]]]],
       "%s: option '%s' needs an argument.\n"],
    _k_ = [0, [2, 0, [11, ": ", [2, 0, [11, cst$8, 0]]]], "%s: %s.\n"],
    _g_ = [0, cst_help$3],
    _h_ = [0, cst_help$4],
    _e_ = [0, [2, 0, 0], cst_s],
    _d_ = [0, [2, 0, [12, 10, 0]], "%s\n"],
    cst_help$2 = cst_help$3,
    cst_Display_this_list_of_optio = cst_Display_this_list_of_optio$1,
    cst_help = cst_help$3,
    cst_help$1 = cst_help$4,
    cst_Display_this_list_of_optio$0 = cst_Display_this_list_of_optio$1,
    cst_help$0 = cst_help$4,
    _c_ = [0, cst_help$3],
    _a_ = [0, [11, cst$9, [2, 0, [12, 32, [2, 0, [12, 10, 0]]]]], "  %s %s\n"],
    _b_ =
      [0,
       [11, cst$9, [2, 0, [12, 32, [2, 0, [2, 0, [12, 10, 0]]]]]],
       "  %s %s%s\n"],
    cst_none = "<none>";
   function assoc3(x, l){
    var l$0 = l;
     /*<<arg.ml:64:2>>*/ for(;;){
      /*<<arg.ml:64:2>>*/ if(! l$0)
       /*<<arg.ml:65:10>>*/ throw  /*<<arg.ml:65:10>>*/ caml_maybe_attach_backtrace
             (Stdlib[8], 1);
     var match = l$0[1], y2 = match[2], y1 = match[1];
      /*<<arg.ml:66:26>>*/ if( /*<<arg.ml:66:26>>*/ caml_equal(y1, x))
       /*<<arg.ml:66:36>>*/ return y2;
      /*<<arg.ml:67:14>>*/ var  /*<<arg.ml:67:14>>*/ t = l$0[2], l$0 = t;
    }
    /*<<arg.ml:67:24>>*/ }
   function make_symlist(prefix, sep, suffix, l){
     /*<<arg.ml:77:2>>*/ if(! l)  /*<<arg.ml:78:10>>*/ return cst_none;
     /*<<arg.ml:79:53>>*/ var
     t = l[2],
     h = l[1],
      /*<<arg.ml:79:53>>*/ _aD_ =
        /*<<arg.ml:79:53>>*/ caml_call2(Stdlib[28], prefix, h);
     /*<<arg.ml:79:53>>*/ function _aE_(x, y){
      /*<<arg.ml:79:44>>*/  /*<<arg.ml:79:44>>*/ var
      _aG_ =  /*<<arg.ml:79:44>>*/ caml_call2(Stdlib[28], sep, y);
      /*<<arg.ml:79:44>>*/ return  /*<<arg.ml:79:44>>*/ caml_call2
             (Stdlib[28], x, _aG_);
     /*<<arg.ml:79:51>>*/ }
     /*<<arg.ml:79:12>>*/  /*<<arg.ml:79:12>>*/ var
     _aF_ =  /*<<arg.ml:79:12>>*/ caml_call3(Stdlib_List[25], _aE_, _aD_, t);
     /*<<arg.ml:79:12>>*/ return  /*<<arg.ml:79:12>>*/ caml_call2
            (Stdlib[28], _aF_, suffix);
    /*<<arg.ml:79:77>>*/ }
   function help_action(param){
     /*<<arg.ml:91:21>>*/ throw  /*<<arg.ml:91:21>>*/ caml_maybe_attach_backtrace
           ([0, Stop, _c_], 1);
    /*<<arg.ml:91:51>>*/ }
   function add_help(speclist){
     /*<<?>>*/ try{
      /*<<arg.ml:95:15>>*/ assoc3(cst_help$2, speclist);
      /*<<arg.ml:95:15>>*/ var  /*<<arg.ml:95:15>>*/ _aA_ = 0, add1 = _aA_;
    }
    catch(_aC_){
     var _aw_ = caml_wrap_exception(_aC_);
     if(_aw_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_aw_, 0);
     var
      add1 =
        [0,
         [0, cst_help, [0, help_action], cst_Display_this_list_of_optio],
         0];
    }
    try{
      /*<<arg.ml:99:15>>*/ assoc3(cst_help$1, speclist);
      /*<<arg.ml:99:15>>*/ var  /*<<arg.ml:99:15>>*/ _az_ = 0, add2 = _az_;
    }
    catch(_aB_){
     var _ax_ = caml_wrap_exception(_aB_);
     if(_ax_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_ax_, 0);
     var
      add2 =
        [0,
         [0, cst_help$0, [0, help_action], cst_Display_this_list_of_optio$0],
         0];
    }
     /*<<arg.ml:103:13>>*/  /*<<arg.ml:103:13>>*/ var
     _ay_ =  /*<<arg.ml:103:13>>*/ caml_call2(Stdlib[37], add1, add2);
     /*<<arg.ml:103:13>>*/ return  /*<<arg.ml:103:13>>*/ caml_call2
            (Stdlib[37], speclist, _ay_);
    /*<<arg.ml:103:26>>*/ }
   function usage_b(buf, speclist, errmsg){
     /*<<arg.ml:107:2>>*/  /*<<arg.ml:107:2>>*/ caml_call3
     (Stdlib_Printf[5], buf, _d_, errmsg);
     /*<<arg.ml:108:29>>*/  /*<<arg.ml:108:29>>*/ var
     _as_ = add_help(speclist);
     /*<<arg.ml:108:12>>*/ function _at_(param){
     var
      doc = param[3],
      spec = param[2],
      key = param[1],
      _au_ = 0 < caml_ml_string_length(doc) ? 1 : 0;
     if(! _au_) return _au_;
      /*<<arg.ml:84:4>>*/ if(11 !== spec[0])
       /*<<arg.ml:88:8>>*/ return  /*<<arg.ml:88:8>>*/ caml_call4
              (Stdlib_Printf[5], buf, _a_, key, doc);
      /*<<arg.ml:86:8>>*/ var
       /*<<arg.ml:86:8>>*/ l = spec[1],
       /*<<arg.ml:86:38>>*/ _av_ = make_symlist(cst$1, cst$0, cst, l);
      /*<<arg.ml:86:38>>*/ return  /*<<arg.ml:86:38>>*/ caml_call5
             (Stdlib_Printf[5], buf, _b_, key, _av_, doc);
    }
     /*<<arg.ml:108:12>>*/ return  /*<<arg.ml:108:12>>*/ caml_call2
            (Stdlib_List[17], _at_, _as_);
    /*<<arg.ml:108:48>>*/ }
   function usage_string(speclist, errmsg){
     /*<<arg.ml:112:10>>*/  /*<<arg.ml:112:10>>*/ var
     b =  /*<<arg.ml:112:10>>*/ caml_call1(Stdlib_Buffer[1], 200);
     /*<<arg.ml:113:2>>*/ usage_b(b, speclist, errmsg);
     /*<<arg.ml:113:2>>*/ return  /*<<arg.ml:113:2>>*/ caml_call1
            (Stdlib_Buffer[2], b);
    /*<<arg.ml:114:19>>*/ }
   function usage(speclist, errmsg){
     /*<<arg.ml:118:15>>*/  /*<<arg.ml:118:15>>*/ var
     _ar_ = usage_string(speclist, errmsg);
     /*<<arg.ml:118:15>>*/ return  /*<<arg.ml:118:15>>*/ caml_call2
            (Stdlib_Printf[3], _e_, _ar_);
    /*<<arg.ml:118:45>>*/ }
   var current = [0, 0];
   function int_of_string_opt(x){
     /*<<?>>*/ try{
      /*<<arg.ml:128:11>>*/  /*<<arg.ml:128:11>>*/ var
      _ap_ = [0,  /*<<arg.ml:128:11>>*/ runtime.caml_int_of_string(x)];
     return _ap_;
    }
    catch(_aq_){
     var _ao_ = caml_wrap_exception(_aq_);
     if(_ao_[1] === Stdlib[7])  /*<<arg.ml:129:20>>*/ return 0;
      /*<<arg.ml:124:2>>*/ throw  /*<<arg.ml:124:2>>*/ caml_maybe_attach_backtrace
            (_ao_, 0);
    }
    /*<<arg.ml:129:24>>*/ }
   function float_of_string_opt(x){
     /*<<?>>*/ try{
      /*<<arg.ml:132:11>>*/  /*<<arg.ml:132:11>>*/ var
      _am_ = [0,  /*<<arg.ml:132:11>>*/ runtime.caml_float_of_string(x)];
     return _am_;
    }
    catch(_an_){
     var _al_ = caml_wrap_exception(_an_);
     if(_al_[1] === Stdlib[7])  /*<<arg.ml:133:20>>*/ return 0;
      /*<<arg.ml:128:2>>*/ throw  /*<<arg.ml:128:2>>*/ caml_maybe_attach_backtrace
            (_al_, 0);
    }
    /*<<arg.ml:133:24>>*/ }
   function parse_and_expand_argv_dynamic_
   (allow_expand, current, argv, speclist, anonfun, errmsg){
     /*<<arg.ml:137:2>>*/  /*<<arg.ml:137:2>>*/ var initpos = current[1];
     /*<<arg.ml:137:2>>*/ function convert_error(error){
      /*<<arg.ml:143:12>>*/ var
       /*<<arg.ml:143:12>>*/ b =
         /*<<arg.ml:143:12>>*/ caml_call1(Stdlib_Buffer[1], 200),
       /*<<arg.ml:143:12>>*/ progname =
        initpos < argv[1].length - 1
         ?  /*<<arg.ml:145:45>>*/ caml_check_bound
            (argv[1], initpos)
           [1 + initpos]
         : cst$2;
      /*<<arg.ml:146:4>>*/ switch(error[0]){
       case 0:
        var s = error[1];
        if
         (caml_string_notequal(s, cst_help$4)
          && caml_string_notequal(s, cst_help$3))
          /*<<arg.ml:150:10>>*/  /*<<arg.ml:150:10>>*/ caml_call4
          (Stdlib_Printf[5], b, _f_, progname, s);
        break;
       case 1:
        var expected = error[3], arg = error[2], opt = error[1];
         /*<<arg.ml:154:10>>*/  /*<<arg.ml:154:10>>*/ caml_call6
         (Stdlib_Printf[5], b, _i_, progname, arg, opt, expected);
        break;
       case 2:
         /*<<arg.ml:152:10>>*/  /*<<arg.ml:152:10>>*/ var s$0 = error[1];
         /*<<arg.ml:152:10>>*/  /*<<arg.ml:152:10>>*/ caml_call4
         (Stdlib_Printf[5], b, _j_, progname, s$0);
        break;
       default:
         /*<<arg.ml:157:10>>*/  /*<<arg.ml:157:10>>*/ var s$1 = error[1];
         /*<<arg.ml:157:10>>*/  /*<<arg.ml:157:10>>*/ caml_call4
         (Stdlib_Printf[5], b, _k_, progname, s$1);
     }
      /*<<arg.ml:159:4>>*/ usage_b(b, speclist[1], errmsg);
      /*<<arg.ml:160:34>>*/ if
      (!
        /*<<arg.ml:160:7>>*/ caml_equal(error, _g_)
       && !  /*<<arg.ml:160:34>>*/ caml_equal(error, _h_))
       /*<<arg.ml:162:13>>*/ return [0,
              Bad,
               /*<<arg.ml:162:13>>*/ caml_call1(Stdlib_Buffer[2], b)];
      /*<<arg.ml:161:14>>*/ return [0,
             Help,
              /*<<arg.ml:161:14>>*/ caml_call1(Stdlib_Buffer[2], b)];
     /*<<arg.ml:162:32>>*/ }
     /*<<arg.ml:137:2>>*/ current[1]++;
    for(;;){
     if(current[1] >= argv[1].length - 1)  /*<<arg.ml:132:2>>*/ return 0;
     try{
       /*<<arg.ml:167:14>>*/ var
       _Y_ = current[1],
        /*<<arg.ml:167:14>>*/ s =
          /*<<arg.ml:167:14>>*/ caml_check_bound(argv[1], _Y_)[1 + _Y_],
       switch$0 = 0;
       /*<<arg.ml:168:33>>*/ if
       (1 <=  /*<<arg.ml:167:14>>*/ caml_ml_string_length(s)
        && 45 ===  /*<<arg.ml:168:33>>*/ caml_string_get(s, 0)){
       try{
         /*<<arg.ml:170:14>>*/ var
         follow$1 = 0,
          /*<<arg.ml:170:14>>*/ _aa_ = assoc3(s, speclist[1]),
         follow$0 = follow$1,
         action = _aa_;
       }
       catch(_aj_){
        var _Z_ = caml_wrap_exception(_aj_);
        if(_Z_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_Z_, 0);
        try{
          /*<<arg.ml:71:10>>*/ var
           /*<<arg.ml:71:10>>*/ i =
             /*<<arg.ml:71:10>>*/ caml_call2(Stdlib_String[35], s, 61),
           /*<<arg.ml:71:10>>*/ len =
             /*<<arg.ml:71:10>>*/ caml_ml_string_length(s),
           /*<<arg.ml:73:20>>*/ arg =
             /*<<arg.ml:73:20>>*/ caml_call3
             (Stdlib_String[15], s, i + 1 | 0, len - (i + 1 | 0) | 0),
           /*<<arg.ml:73:2>>*/ keyword =
             /*<<arg.ml:73:2>>*/ caml_call3(Stdlib_String[15], s, 0, i),
          follow = [0, arg],
           /*<<arg.ml:174:12>>*/ _$_ = assoc3(keyword, speclist[1]),
          follow$0 = follow,
          action = _$_;
        }
        catch(_ak_){
         var ___ = caml_wrap_exception(_ak_);
         if(___ === Stdlib[8])
           /*<<arg.ml:175:28>>*/ throw  /*<<arg.ml:175:28>>*/ caml_maybe_attach_backtrace
                 ([0, Stop, [0, s]], 1);
         throw caml_maybe_attach_backtrace(___, 0);
        }
       }
        /*<<arg.ml:177:8>>*/ var
         /*<<arg.ml:177:8>>*/ no_arg$0 =
          function(s, follow){
           function no_arg(param){
             /*<<arg.ml:178:10>>*/ if(! follow)
              /*<<arg.ml:179:20>>*/ return 0;
            var arg = follow[1];
            throw caml_maybe_attach_backtrace
                   ([0, Stop, [1, s, arg, cst_no_argument]], 1);
            /*<<arg.ml:180:68>>*/ }
           return no_arg;
          },
         /*<<arg.ml:177:8>>*/ no_arg = no_arg$0(s, follow$0),
         /*<<arg.ml:177:8>>*/ get_arg$0 =
          function(s, follow){
           function get_arg(param){
             /*<<arg.ml:182:10>>*/ if(follow){
             var arg = follow[1];
             return arg;
            }
             /*<<arg.ml:184:14>>*/ if
             ((current[1] + 1 | 0) >= argv[1].length - 1)
              /*<<arg.ml:185:19>>*/ throw  /*<<arg.ml:185:19>>*/ caml_maybe_attach_backtrace
                    ([0, Stop, [2, s]], 1);
             /*<<arg.ml:184:58>>*/  /*<<arg.ml:184:58>>*/ var
             _ai_ = current[1] + 1 | 0;
             /*<<arg.ml:184:58>>*/ return  /*<<arg.ml:184:58>>*/ caml_check_bound
                     (argv[1], _ai_)
                    [1 + _ai_];
            /*<<arg.ml:186:27>>*/ }
           return get_arg;
          },
         /*<<arg.ml:177:8>>*/ get_arg = get_arg$0(s, follow$0),
         /*<<arg.ml:177:8>>*/ consume_arg$0 =
          function(follow){
           function consume_arg(param){
             /*<<arg.ml:189:10>>*/ return follow ? 0 : (current[1]++, 0);
            /*<<arg.ml:191:24>>*/ }
           return consume_arg;
          },
         /*<<arg.ml:177:8>>*/ consume_arg = consume_arg$0(follow$0),
         /*<<arg.ml:177:8>>*/ treat_action$0 =
          function(s, no_arg, get_arg, consume_arg){
           function treat_action(param){
             /*<<arg.ml:193:31>>*/ switch(param[0]){
              case 0:
                /*<<arg.ml:194:20>>*/  /*<<arg.ml:194:20>>*/ var f = param[1];
                /*<<arg.ml:194:20>>*/ no_arg(0);
                /*<<arg.ml:194:20>>*/ return  /*<<arg.ml:194:20>>*/ caml_call1
                       (f, 0);
              case 1:
                /*<<arg.ml:196:12>>*/ var
                 /*<<arg.ml:196:12>>*/ f$0 = param[1],
                 /*<<arg.ml:196:22>>*/ arg = get_arg(0);
               try{
                 /*<<arg.ml:124:11>>*/ var
                  /*<<arg.ml:124:11>>*/ _ac_ =
                   [0,  /*<<arg.ml:124:11>>*/ caml_call1(Stdlib[32], arg)],
                 match = _ac_;
               }
               catch(_ah_){
                var _ab_ = caml_wrap_exception(_ah_);
                if(_ab_[1] !== Stdlib[6])
                 throw caml_maybe_attach_backtrace(_ab_, 0);
                var match = 0;
               }
               if(! match)
                 /*<<arg.ml:198:22>>*/ throw  /*<<arg.ml:198:22>>*/ caml_maybe_attach_backtrace
                       ([0, Stop, [1, s, arg, cst_a_boolean]], 1);
                /*<<arg.ml:199:24>>*/  /*<<arg.ml:199:24>>*/ var
                s$0 = match[1];
                /*<<arg.ml:199:24>>*/  /*<<arg.ml:199:24>>*/ caml_call1
                (f$0, s$0);
                /*<<arg.ml:201:12>>*/ return consume_arg(0);
              case 2:
                /*<<arg.ml:202:19>>*/  /*<<arg.ml:202:19>>*/ var r = param[1];
                /*<<arg.ml:202:19>>*/ no_arg(0);
                /*<<arg.ml:202:19>>*/ r[1] = 1;
                /*<<arg.ml:202:19>>*/ return 0;
              case 3:
                /*<<arg.ml:203:21>>*/  /*<<arg.ml:203:21>>*/ var
                r$0 = param[1];
                /*<<arg.ml:203:21>>*/ no_arg(0);
                /*<<arg.ml:203:21>>*/ r$0[1] = 0;
                /*<<arg.ml:203:21>>*/ return 0;
              case 4:
                /*<<arg.ml:205:12>>*/ var
                 /*<<arg.ml:205:12>>*/ f$1 = param[1],
                 /*<<arg.ml:205:22>>*/ arg$0 = get_arg(0);
                /*<<arg.ml:206:12>>*/  /*<<arg.ml:206:12>>*/ caml_call1
                (f$1, arg$0);
                /*<<arg.ml:206:12>>*/ return consume_arg(0);
              case 5:
                /*<<arg.ml:218:12>>*/  /*<<arg.ml:218:12>>*/ var
                r$1 = param[1];
                /*<<arg.ml:218:17>>*/ r$1[1] = get_arg(0);
                /*<<arg.ml:218:17>>*/ return consume_arg(0);
              case 6:
                /*<<arg.ml:221:12>>*/ var
                 /*<<arg.ml:221:12>>*/ f$2 = param[1],
                 /*<<arg.ml:221:22>>*/ arg$1 = get_arg(0),
                 /*<<arg.ml:222:24>>*/ match$0 = int_of_string_opt(arg$1);
                /*<<arg.ml:222:24>>*/ if(! match$0)
                 /*<<arg.ml:223:22>>*/ throw  /*<<arg.ml:223:22>>*/ caml_maybe_attach_backtrace
                       ([0, Stop, [1, s, arg$1, cst_an_integer]], 1);
                /*<<arg.ml:224:24>>*/  /*<<arg.ml:224:24>>*/ var
                x = match$0[1];
                /*<<arg.ml:224:24>>*/  /*<<arg.ml:224:24>>*/ caml_call1
                (f$2, x);
                /*<<arg.ml:226:12>>*/ return consume_arg(0);
              case 7:
                /*<<arg.ml:228:12>>*/ var
                 /*<<arg.ml:228:12>>*/ r$2 = param[1],
                 /*<<arg.ml:228:22>>*/ arg$2 = get_arg(0),
                 /*<<arg.ml:229:24>>*/ match$1 = int_of_string_opt(arg$2);
                /*<<arg.ml:229:24>>*/ if(! match$1)
                 /*<<arg.ml:230:22>>*/ throw  /*<<arg.ml:230:22>>*/ caml_maybe_attach_backtrace
                       ([0, Stop, [1, s, arg$2, cst_an_integer$0]], 1);
                /*<<arg.ml:231:24>>*/  /*<<arg.ml:231:24>>*/ var
                x$0 = match$1[1];
                /*<<arg.ml:231:24>>*/ r$2[1] = x$0;
                /*<<arg.ml:233:12>>*/ return consume_arg(0);
              case 8:
                /*<<arg.ml:235:12>>*/ var
                 /*<<arg.ml:235:12>>*/ f$3 = param[1],
                 /*<<arg.ml:235:22>>*/ arg$3 = get_arg(0),
                 /*<<arg.ml:236:24>>*/ match$2 = float_of_string_opt(arg$3);
                /*<<arg.ml:236:24>>*/ if(! match$2)
                 /*<<arg.ml:237:22>>*/ throw  /*<<arg.ml:237:22>>*/ caml_maybe_attach_backtrace
                       ([0, Stop, [1, s, arg$3, cst_a_float]], 1);
                /*<<arg.ml:238:24>>*/  /*<<arg.ml:238:24>>*/ var
                x$1 = match$2[1];
                /*<<arg.ml:238:24>>*/  /*<<arg.ml:238:24>>*/ caml_call1
                (f$3, x$1);
                /*<<arg.ml:240:12>>*/ return consume_arg(0);
              case 9:
                /*<<arg.ml:242:12>>*/ var
                 /*<<arg.ml:242:12>>*/ r$3 = param[1],
                 /*<<arg.ml:242:22>>*/ arg$4 = get_arg(0),
                 /*<<arg.ml:243:24>>*/ match$3 = float_of_string_opt(arg$4);
                /*<<arg.ml:243:24>>*/ if(! match$3)
                 /*<<arg.ml:244:22>>*/ throw  /*<<arg.ml:244:22>>*/ caml_maybe_attach_backtrace
                       ([0, Stop, [1, s, arg$4, cst_a_float$0]], 1);
                /*<<arg.ml:245:24>>*/  /*<<arg.ml:245:24>>*/ var
                x$2 = match$3[1];
                /*<<arg.ml:245:24>>*/ r$3[1] = x$2;
                /*<<arg.ml:247:12>>*/ return consume_arg(0);
              case 10:
                /*<<arg.ml:249:12>>*/  /*<<arg.ml:249:12>>*/ var
                specs = param[1];
                /*<<arg.ml:249:12>>*/ no_arg(0);
                /*<<arg.ml:249:12>>*/ return  /*<<arg.ml:249:12>>*/ caml_call2
                       (Stdlib_List[17], treat_action, specs);
              case 11:
                /*<<arg.ml:209:22>>*/ var
                f$4 = param[2],
                symb = param[1],
                 /*<<arg.ml:209:22>>*/ arg$5 = get_arg(0);
                /*<<arg.ml:210:15>>*/ if
                ( /*<<arg.ml:210:15>>*/ caml_call2
                  (Stdlib_List[36], arg$5, symb)){
                 /*<<arg.ml:211:14>>*/  /*<<arg.ml:211:14>>*/ caml_call1
                 (f$4, arg$5);
                 /*<<arg.ml:211:14>>*/ return consume_arg(0);
               }
                /*<<arg.ml:215:44>>*/  /*<<arg.ml:215:44>>*/ var
                _ad_ = make_symlist(cst$5, cst$4, cst$3, symb);
                /*<<arg.ml:214:42>>*/ throw  /*<<arg.ml:214:42>>*/ caml_maybe_attach_backtrace
                      ([0,
                        Stop,
                        [1,
                         s,
                         arg$5,
                          /*<<arg.ml:214:42>>*/ caml_call2
                          (Stdlib[28], cst_one_of, _ad_)]],
                       1);
              case 12:
                /*<<arg.ml:252:12>>*/  /*<<arg.ml:252:12>>*/ var
                f$5 = param[1];
                /*<<arg.ml:252:12>>*/ no_arg(0);
                /*<<arg.ml:255:28>>*/ for(;;){
                 /*<<arg.ml:255:28>>*/ if
                 (current[1] >= (argv[1].length - 1 - 1 | 0))
                 return 0;
                 /*<<arg.ml:254:14>>*/  /*<<arg.ml:254:14>>*/ var
                 _ae_ = current[1] + 1 | 0;
                 /*<<arg.ml:254:14>>*/  /*<<arg.ml:254:14>>*/ caml_call1
                 (f$5,
                   /*<<arg.ml:254:16>>*/ caml_check_bound(argv[1], _ae_)
                   [1 + _ae_]);
                 /*<<arg.ml:255:14>>*/ consume_arg(0);
               }
              case 13:
                /*<<arg.ml:258:12>>*/  /*<<arg.ml:258:12>>*/ var
                f$6 = param[1];
                /*<<arg.ml:258:12>>*/ no_arg(0);
                /*<<arg.ml:258:12>>*/  /*<<arg.ml:258:12>>*/ var acc = [0, 0];
                /*<<arg.ml:262:28>>*/ for(;;){
                 /*<<arg.ml:262:28>>*/ if
                 (current[1] >= (argv[1].length - 1 - 1 | 0))
                  /*<<arg.ml:264:14>>*/ return  /*<<arg.ml:264:14>>*/ caml_call1
                         (f$6,
                           /*<<arg.ml:264:14>>*/ caml_call1(Stdlib_List[9], acc[1]));
                 /*<<arg.ml:261:14>>*/ var
                  /*<<arg.ml:261:14>>*/ _ag_ = current[1] + 1 | 0,
                  /*<<arg.ml:261:14>>*/ _af_ = acc[1];
                 /*<<arg.ml:261:21>>*/ acc[1] =
                 [0,
                   /*<<arg.ml:261:21>>*/ caml_check_bound(argv[1], _ag_)
                   [1 + _ag_],
                  _af_];
                 /*<<arg.ml:262:14>>*/ consume_arg(0);
               }
              default:
               var f$7 = param[1];
               if(1 - allow_expand)
                 /*<<arg.ml:267:14>>*/ throw  /*<<arg.ml:267:14>>*/ caml_maybe_attach_backtrace
                       ([0, Stdlib[6], cst_Arg_Expand_is_is_only_allo], 1);
                /*<<arg.ml:269:22>>*/ var
                 /*<<arg.ml:269:22>>*/ arg$6 = get_arg(0),
                 /*<<arg.ml:270:25>>*/ newarg =
                   /*<<arg.ml:270:25>>*/ caml_call1(f$7, arg$6);
                /*<<arg.ml:271:12>>*/ consume_arg(0);
                /*<<arg.ml:272:25>>*/ var
                 /*<<arg.ml:272:25>>*/ before =
                   /*<<arg.ml:272:25>>*/ caml_call3
                   (Stdlib_Array[5], argv[1], 0, current[1] + 1 | 0),
                 /*<<arg.ml:274:14>>*/ after =
                   /*<<arg.ml:274:14>>*/ caml_call3
                   (Stdlib_Array[5],
                    argv[1],
                    current[1] + 1 | 0,
                    (argv[1].length - 1 - current[1] | 0) - 1 | 0);
                /*<<arg.ml:276:19>>*/ argv[1] =
                 /*<<arg.ml:276:19>>*/ caml_call1
                 (Stdlib_Array[4], [0, before, [0, newarg, [0, after, 0]]]);
                /*<<arg.ml:276:19>>*/ return 0;
            }
            /*<<arg.ml:276:54>>*/ }
           return treat_action;
          },
         /*<<arg.ml:177:8>>*/ treat_action =
          treat_action$0(s, no_arg, get_arg, consume_arg);
        /*<<arg.ml:278:8>>*/ treat_action(action);
       switch$0 = 1;
      }
      if(! switch$0)
        /*<<arg.ml:279:11>>*/  /*<<arg.ml:279:11>>*/ caml_call1(anonfun, s);
     }
     catch(exn$0){
      var exn = caml_wrap_exception(exn$0);
      if(exn[1] === Bad){
        /*<<arg.ml:280:20>>*/  /*<<arg.ml:280:20>>*/ var m = exn[2];
        /*<<arg.ml:280:26>>*/ throw  /*<<arg.ml:280:26>>*/ caml_maybe_attach_backtrace
              (convert_error([3, m]), 1);
      }
      if(exn[1] !== Stop) throw caml_maybe_attach_backtrace(exn, 0);
       /*<<arg.ml:281:21>>*/  /*<<arg.ml:281:21>>*/ var e = exn[2];
       /*<<arg.ml:281:27>>*/ throw  /*<<arg.ml:281:27>>*/ caml_maybe_attach_backtrace
             (convert_error(e), 1);
     }
      /*<<arg.ml:283:4>>*/ current[1]++;
    }
   }
   function parse_and_expand_argv_dynamic
   (current, argv, speclist, anonfun, errmsg){
     /*<<arg.ml:287:2>>*/ return parse_and_expand_argv_dynamic_
            (1, current, argv, speclist, anonfun, errmsg);
    /*<<arg.ml:287:77>>*/ }
   function parse_argv_dynamic(opt, argv, speclist, anonfun, errmsg){
     /*<<arg.ml:290:2>>*/ if(opt)
      /*<<arg.ml:289:33>>*/ var
       /*<<arg.ml:289:33>>*/ sth = opt[1],
      current$0 = sth;
    else
     var current$0 = current;
     /*<<arg.ml:290:2>>*/ return parse_and_expand_argv_dynamic_
            (0, current$0, [0, argv], speclist, anonfun, errmsg);
    /*<<arg.ml:291:10>>*/ }
   function parse_argv(opt, argv, speclist, anonfun, errmsg){
     /*<<arg.ml:295:2>>*/ if(opt)
      /*<<arg.ml:294:25>>*/ var
       /*<<arg.ml:294:25>>*/ sth = opt[1],
      current$0 = sth;
    else
     var current$0 = current;
     /*<<arg.ml:295:2>>*/ return parse_argv_dynamic
            ([0, current$0], argv, [0, speclist], anonfun, errmsg);
    /*<<arg.ml:295:72>>*/ }
   function parse(l, f, msg){
     /*<<?>>*/ try{
      /*<<arg.ml:300:4>>*/  /*<<arg.ml:300:4>>*/ var
      _X_ = parse_argv(0, caml_sys_argv(0), l, f, msg);
     return _X_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] === Bad){
       /*<<arg.ml:302:15>>*/  /*<<arg.ml:302:15>>*/ var msg$0 = exn[2];
       /*<<arg.ml:302:15>>*/  /*<<arg.ml:302:15>>*/ caml_call2
       (Stdlib_Printf[3], _l_, msg$0);
       /*<<arg.ml:302:15>>*/ return  /*<<arg.ml:302:15>>*/ caml_call1
              (Stdlib[99], 2);
     }
     if(exn[1] !== Help) throw caml_maybe_attach_backtrace(exn, 0);
      /*<<arg.ml:303:16>>*/  /*<<arg.ml:303:16>>*/ var msg$1 = exn[2];
      /*<<arg.ml:303:16>>*/  /*<<arg.ml:303:16>>*/ caml_call2
      (Stdlib_Printf[2], _m_, msg$1);
      /*<<arg.ml:303:16>>*/ return  /*<<arg.ml:303:16>>*/ caml_call1
             (Stdlib[99], 0);
    }
    /*<<arg.ml:303:39>>*/ }
   function parse_dynamic(l, f, msg){
     /*<<?>>*/ try{
      /*<<arg.ml:308:4>>*/  /*<<arg.ml:308:4>>*/ var
      _W_ = parse_argv_dynamic(0, caml_sys_argv(0), l, f, msg);
     return _W_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] === Bad){
       /*<<arg.ml:310:15>>*/  /*<<arg.ml:310:15>>*/ var msg$0 = exn[2];
       /*<<arg.ml:310:15>>*/  /*<<arg.ml:310:15>>*/ caml_call2
       (Stdlib_Printf[3], _n_, msg$0);
       /*<<arg.ml:310:15>>*/ return  /*<<arg.ml:310:15>>*/ caml_call1
              (Stdlib[99], 2);
     }
     if(exn[1] !== Help) throw caml_maybe_attach_backtrace(exn, 0);
      /*<<arg.ml:311:16>>*/  /*<<arg.ml:311:16>>*/ var msg$1 = exn[2];
      /*<<arg.ml:311:16>>*/  /*<<arg.ml:311:16>>*/ caml_call2
      (Stdlib_Printf[2], _o_, msg$1);
      /*<<arg.ml:311:16>>*/ return  /*<<arg.ml:311:16>>*/ caml_call1
             (Stdlib[99], 0);
    }
    /*<<arg.ml:311:39>>*/ }
   function parse_expand(l, f, msg){
     /*<<?>>*/ try{
      /*<<arg.ml:318:4>>*/ var
      argv = [0, caml_sys_argv(0)],
      spec = [0, l],
      current$0 = [0, current[1]],
       /*<<arg.ml:318:4>>*/ _V_ =
        parse_and_expand_argv_dynamic(current$0, argv, spec, f, msg);
     return _V_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] === Bad){
       /*<<arg.ml:320:15>>*/  /*<<arg.ml:320:15>>*/ var msg$0 = exn[2];
       /*<<arg.ml:320:15>>*/  /*<<arg.ml:320:15>>*/ caml_call2
       (Stdlib_Printf[3], _p_, msg$0);
       /*<<arg.ml:320:15>>*/ return  /*<<arg.ml:320:15>>*/ caml_call1
              (Stdlib[99], 2);
     }
     if(exn[1] !== Help) throw caml_maybe_attach_backtrace(exn, 0);
      /*<<arg.ml:321:16>>*/  /*<<arg.ml:321:16>>*/ var msg$1 = exn[2];
      /*<<arg.ml:321:16>>*/  /*<<arg.ml:321:16>>*/ caml_call2
      (Stdlib_Printf[2], _q_, msg$1);
      /*<<arg.ml:321:16>>*/ return  /*<<arg.ml:321:16>>*/ caml_call1
             (Stdlib[99], 0);
    }
    /*<<arg.ml:321:39>>*/ }
   function second_word(s){
     /*<<arg.ml:325:2>>*/  /*<<arg.ml:325:2>>*/ var
     len =  /*<<arg.ml:325:2>>*/ caml_ml_string_length(s);
     /*<<arg.ml:325:2>>*/ function loop(n){
     var n$0 = n;
      /*<<arg.ml:327:4>>*/ for(;;){
       /*<<arg.ml:327:4>>*/ if(len <= n$0)  /*<<arg.ml:327:21>>*/ return len;
       /*<<arg.ml:328:12>>*/ if
       (32 !==  /*<<arg.ml:328:12>>*/ caml_string_get(s, n$0))
        /*<<arg.ml:329:9>>*/ return n$0;
       /*<<arg.ml:328:29>>*/ var
        /*<<arg.ml:328:29>>*/ n$1 = n$0 + 1 | 0,
       n$0 = n$1;
     }
     /*<<arg.ml:329:10>>*/ }
    try{
      /*<<arg.ml:331:8>>*/  /*<<arg.ml:331:8>>*/ var
      n$0 =  /*<<arg.ml:331:8>>*/ caml_call2(Stdlib_String[35], s, 9);
    }
    catch(_T_){
     var _R_ = caml_wrap_exception(_T_);
     if(_R_ !== Stdlib[8])
       /*<<arg.ml:332:9>>*/ throw  /*<<arg.ml:332:9>>*/ caml_maybe_attach_backtrace
             (_R_, 0);
     try{
       /*<<arg.ml:334:18>>*/  /*<<arg.ml:334:18>>*/ var
       n =  /*<<arg.ml:334:18>>*/ caml_call2(Stdlib_String[35], s, 32);
     }
     catch(_U_){
      var _S_ = caml_wrap_exception(_U_);
      if(_S_ === Stdlib[8])  /*<<arg.ml:336:31>>*/ return len;
       /*<<arg.ml:335:13>>*/ throw  /*<<arg.ml:335:13>>*/ caml_maybe_attach_backtrace
             (_S_, 0);
     }
      /*<<arg.ml:335:13>>*/ return loop(n + 1 | 0);
    }
     /*<<arg.ml:332:9>>*/ return loop(n$0 + 1 | 0);
    /*<<arg.ml:337:9>>*/ }
   function max_arg_len(cur, param){
    var doc = param[3], spec = param[2], kwd = param[1];
    if(11 === spec[0])
      /*<<arg.ml:342:16>>*/ return  /*<<arg.ml:342:16>>*/ caml_call2
             (Stdlib_Int[11],
              cur,
               /*<<arg.ml:342:16>>*/ caml_ml_string_length(kwd));
     /*<<arg.ml:343:42>>*/  /*<<arg.ml:343:42>>*/ var
     _Q_ =
        /*<<arg.ml:343:42>>*/ caml_ml_string_length(kwd) + second_word(doc)
       | 0;
     /*<<arg.ml:343:42>>*/ return  /*<<arg.ml:343:42>>*/ caml_call2
            (Stdlib_Int[11], cur, _Q_);
   }
   function replace_leading_tab(s){
     /*<<arg.ml:347:2>>*/  /*<<arg.ml:347:2>>*/ var seen = [0, 0];
     /*<<arg.ml:347:2>>*/ function _P_(c){
      /*<<arg.ml:348:33>>*/ if(9 === c && ! seen[1]){
       /*<<arg.ml:348:46>>*/ seen[1] = 1;
       /*<<arg.ml:348:46>>*/ return 32;
     }
      /*<<arg.ml:348:71>>*/ return c;
     /*<<arg.ml:348:73>>*/ }
     /*<<arg.ml:347:2>>*/ return  /*<<arg.ml:347:2>>*/ caml_call2
            (Stdlib_String[17], _P_, s);
    /*<<arg.ml:348:75>>*/ }
   function align(opt, speclist){
     /*<<arg.ml:374:2>>*/ if(opt)
      /*<<arg.ml:373:18>>*/ var
       /*<<arg.ml:373:18>>*/ sth = opt[1],
      limit = sth;
    else
     var limit = Stdlib[19];
     /*<<arg.ml:374:18>>*/ var
      /*<<arg.ml:374:18>>*/ completed = add_help(speclist),
      /*<<arg.ml:375:12>>*/ len =
        /*<<arg.ml:375:12>>*/ caml_call3
        (Stdlib_List[25], max_arg_len, 0, completed),
      /*<<arg.ml:376:12>>*/ len$0 =
        /*<<arg.ml:376:12>>*/ caml_call2(Stdlib_Int[10], len, limit);
     /*<<arg.ml:377:11>>*/ function _J_(ksd){
      /*<<arg.ml:351:2>>*/ var
       /*<<arg.ml:351:2>>*/ kwd = ksd[1],
       /*<<arg.ml:351:2>>*/ spec = ksd[2];
      /*<<arg.ml:351:2>>*/ if
      (!  /*<<arg.ml:351:2>>*/ caml_string_notequal(ksd[3], cst$7))
       /*<<arg.ml:355:6>>*/ return ksd;
     if(11 === spec[0]){
       /*<<arg.ml:357:6>>*/ var
        /*<<arg.ml:357:6>>*/ msg$0 = ksd[3],
        /*<<arg.ml:357:19>>*/ cutcol$0 = second_word(msg$0),
        /*<<arg.ml:358:32>>*/ _M_ =
          /*<<arg.ml:358:32>>*/ caml_call2
          (Stdlib_Int[11], 0, len$0 - cutcol$0 | 0)
         + 3
         | 0,
        /*<<arg.ml:358:19>>*/ spaces$0 =
          /*<<arg.ml:358:19>>*/ caml_call2(Stdlib_String[1], _M_, 32),
        /*<<arg.ml:359:34>>*/ _N_ = replace_leading_tab(msg$0),
        /*<<arg.ml:359:25>>*/ _O_ =
          /*<<arg.ml:359:25>>*/ caml_call2(Stdlib[28], spaces$0, _N_);
       /*<<arg.ml:359:18>>*/ return [0,
              kwd,
              spec,
               /*<<arg.ml:359:18>>*/ caml_call2(Stdlib[28], cst$6, _O_)];
     }
      /*<<arg.ml:361:19>>*/ var
      msg = ksd[3],
      spec$0 = ksd[2],
       /*<<arg.ml:361:19>>*/ cutcol = second_word(msg),
       /*<<arg.ml:361:19>>*/ kwd_len =
         /*<<arg.ml:361:19>>*/ caml_ml_string_length(kwd),
       /*<<arg.ml:361:19>>*/ diff = (len$0 - kwd_len | 0) - cutcol | 0;
      /*<<arg.ml:361:19>>*/ if(0 >= diff)
       /*<<arg.ml:365:20>>*/ return [0, kwd, spec$0, replace_leading_tab(msg)];
      /*<<arg.ml:367:21>>*/ var
       /*<<arg.ml:367:21>>*/ spaces =
         /*<<arg.ml:367:21>>*/ caml_call2(Stdlib_String[1], diff, 32),
       /*<<arg.ml:368:32>>*/ _K_ = replace_leading_tab(msg),
       /*<<arg.ml:368:21>>*/ prefix =
         /*<<arg.ml:368:21>>*/ caml_call3(Stdlib_String[15], _K_, 0, cutcol),
       /*<<arg.ml:369:21>>*/ suffix =
         /*<<arg.ml:369:21>>*/ caml_call3
         (Stdlib_String[15],
          msg,
          cutcol,
           /*<<arg.ml:368:21>>*/ caml_ml_string_length(msg) - cutcol | 0),
       /*<<arg.ml:370:29>>*/ _L_ =
         /*<<arg.ml:370:29>>*/ caml_call2(Stdlib[28], spaces, suffix);
      /*<<arg.ml:370:20>>*/ return [0,
             kwd,
             spec$0,
              /*<<arg.ml:370:20>>*/ caml_call2(Stdlib[28], prefix, _L_)];
    }
     /*<<arg.ml:377:11>>*/ return  /*<<arg.ml:377:11>>*/ caml_call2
            (Stdlib_List[19], _J_, completed);
    /*<<arg.ml:377:38>>*/ }
   function read_aux(trim, sep, file){
     /*<<arg.ml:387:11>>*/ var
      /*<<arg.ml:387:11>>*/ ic =
        /*<<arg.ml:387:11>>*/ caml_call1(Stdlib[80], file),
      /*<<arg.ml:388:12>>*/ buf =
        /*<<arg.ml:388:12>>*/ caml_call1(Stdlib_Buffer[1], 200),
      /*<<arg.ml:388:12>>*/ words = [0, 0];
     /*<<arg.ml:388:12>>*/ function stash(param){
      /*<<arg.ml:391:15>>*/  /*<<arg.ml:391:15>>*/ var
      word =  /*<<arg.ml:391:15>>*/ caml_call1(Stdlib_Buffer[2], buf);
      /*<<arg.ml:391:15>>*/ if(trim){
       /*<<arg.ml:380:2>>*/ var
        /*<<arg.ml:380:2>>*/ len =
          /*<<arg.ml:380:2>>*/ caml_ml_string_length(word),
       switch$0 = 0;
       /*<<arg.ml:381:16>>*/ if
       (0 < len
        && 13 ===  /*<<arg.ml:381:16>>*/ caml_string_get(word, len - 1 | 0)){
       var
        _I_ =
           /*<<arg.ml:382:4>>*/ caml_call3
           (Stdlib_String[15], word, 0, len - 1 | 0);
       switch$0 = 1;
      }
      if(! switch$0) var _I_ = word;
      var word$0 = _I_;
     }
     else
      var word$0 = word;
      /*<<arg.ml:393:4>>*/ words[1] = [0, word$0, words[1]];
      /*<<arg.ml:393:4>>*/ return  /*<<arg.ml:393:4>>*/ caml_call1
             (Stdlib_Buffer[8], buf);
     /*<<arg.ml:394:20>>*/ }
    try{
     for(;;){
       /*<<arg.ml:398:16>>*/  /*<<arg.ml:398:16>>*/ var
       c =  /*<<arg.ml:398:16>>*/ caml_call1(Stdlib[82], ic);
       /*<<arg.ml:398:16>>*/ if(c === sep)
        /*<<arg.ml:399:24>>*/ stash(0);
      else
        /*<<arg.ml:399:38>>*/  /*<<arg.ml:399:38>>*/ caml_call2
        (Stdlib_Buffer[12], buf, c);
     }
    }
    catch(_H_){
     var _F_ = caml_wrap_exception(_H_);
     if(_F_ !== Stdlib[12]) throw caml_maybe_attach_backtrace(_F_, 0);
      /*<<arg.ml:403:5>>*/ if
      (0 <  /*<<arg.ml:403:5>>*/ caml_call1(Stdlib_Buffer[7], buf))
       /*<<arg.ml:403:32>>*/ stash(0);
      /*<<arg.ml:404:2>>*/  /*<<arg.ml:404:2>>*/ caml_call1(Stdlib[93], ic);
      /*<<arg.ml:405:16>>*/  /*<<arg.ml:405:16>>*/ var
      _G_ =  /*<<arg.ml:405:16>>*/ caml_call1(Stdlib_List[9], words[1]);
      /*<<arg.ml:405:16>>*/ return  /*<<arg.ml:405:16>>*/ caml_call1
             (Stdlib_Array[10], _G_);
    }
    /*<<arg.ml:405:33>>*/ }
   var _r_ = 10, _s_ = 1;
    /*<<arg.ml:407:15>>*/ function read_arg(_E_){
     /*<<?>>*/ return read_aux(_s_, _r_, _E_);
   }
    /*<<arg.ml:407:15>>*/ var
     /*<<arg.ml:407:15>>*/ _t_ = 0,
     /*<<arg.ml:407:15>>*/ _u_ = 0;
    /*<<arg.ml:409:16>>*/ function read_arg0(_D_){
     /*<<?>>*/ return read_aux(_u_, _t_, _D_);
   }
    /*<<arg.ml:409:16>>*/ function write_aux(sep, file, args){
     /*<<arg.ml:412:11>>*/  /*<<arg.ml:412:11>>*/ var
     oc =  /*<<arg.ml:412:11>>*/ caml_call1(Stdlib[61], file);
     /*<<arg.ml:412:11>>*/ function _C_(s){
      /*<<arg.ml:413:23>>*/ return  /*<<arg.ml:413:23>>*/ caml_call4
             (Stdlib_Printf[1], oc, _v_, s, sep);
     /*<<arg.ml:413:46>>*/ }
     /*<<arg.ml:413:2>>*/  /*<<arg.ml:413:2>>*/ caml_call2
     (Stdlib_Array[11], _C_, args);
     /*<<arg.ml:413:2>>*/ return  /*<<arg.ml:413:2>>*/ caml_call1
            (Stdlib[76], oc);
    /*<<arg.ml:414:14>>*/ }
    /*<<arg.ml:409:16>>*/  /*<<arg.ml:409:16>>*/ var _w_ = 10;
    /*<<arg.ml:416:16>>*/ function write_arg(_A_, _B_){
     /*<<?>>*/ return write_aux(_w_, _A_, _B_);
   }
    /*<<arg.ml:416:16>>*/  /*<<arg.ml:416:16>>*/ var _x_ = 0;
    /*<<arg.ml:418:17>>*/ function write_arg0(_y_, _z_){
     /*<<?>>*/ return write_aux(_x_, _y_, _z_);
   }
    /*<<arg.ml:418:17>>*/  /*<<arg.ml:418:17>>*/ var
    Stdlib_Arg =
      [0,
       parse,
       parse_dynamic,
       parse_argv,
       parse_argv_dynamic,
       parse_and_expand_argv_dynamic,
       parse_expand,
       Help,
       Bad,
       usage,
       usage_string,
       align,
       current,
       read_arg,
       read_arg0,
       write_arg,
       write_arg0];
    /*<<arg.ml:418:17>>*/  /*<<arg.ml:418:17>>*/ runtime.caml_register_global
    (54, Stdlib_Arg, "Stdlib__Arg");
    /*<<arg.ml:418:17>>*/ return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Printexc
//# unitInfo: Requires: Stdlib, Stdlib__Atomic, Stdlib__Buffer, Stdlib__Obj, Stdlib__Printf
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$4 = "",
    cst_s = "%s\n",
    cst_Program_not_linked_with_g_$0 =
      "(Program not linked with -g, cannot print stack backtrace)\n",
    cst_characters = ", characters ",
    cst_Fatal_error_exception = "Fatal error: exception ",
    cst_Fatal_error_exception_s = "Fatal error: exception %s\n",
    cst_Uncaught_exception = "Uncaught exception: ",
    cst_Uncaught_exception_s = "Uncaught exception: %s\n",
    caml_check_bound = runtime.caml_check_bound,
    caml_get_exception_raw_backtra = runtime.caml_get_exception_raw_backtrace,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag,
    caml_wrap_exception = runtime.caml_wrap_exception;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<?>>*/ function caml_call6(f, a0, a1, a2, a3, a4, a5){
    return (f.l >= 0 ? f.l : f.l = f.length) == 6
            ? f(a0, a1, a2, a3, a4, a5)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5]);
   }
    /*<<?>>*/ function caml_call8(f, a0, a1, a2, a3, a4, a5, a6, a7){
    return (f.l >= 0 ? f.l : f.l = f.length) == 8
            ? f(a0, a1, a2, a3, a4, a5, a6, a7)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4, a5, a6, a7]);
   }
    /*<<printexc.ml:20:15>>*/ var
    global_data = runtime.caml_get_global_data(),
    cst$0 = cst$4,
    cst$3 = cst$4,
    partial = [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, 0]]],
    cst$1 = cst$4,
    cst$2 = cst$4,
    cst = "_",
    locfmt =
      [0,
       [11,
        'File "',
        [2,
         0,
         [11,
          '", line ',
          [4,
           0,
           0,
           0,
           [11,
            cst_characters,
            [4, 0, 0, 0, [12, 45, [4, 0, 0, 0, [11, ": ", [2, 0, 0]]]]]]]]]],
       'File "%s", line %d, characters %d-%d: %s'],
    Stdlib_Printf = global_data.Stdlib__Printf,
    Stdlib_Atomic = global_data.Stdlib__Atomic,
    Stdlib = global_data.Stdlib,
    Stdlib_Buffer = global_data.Stdlib__Buffer,
    Stdlib_Obj = global_data.Stdlib__Obj,
     /*<<printexc.ml:20:15>>*/ printers =
       /*<<printexc.ml:20:15>>*/ caml_call1(Stdlib_Atomic[1], 0),
    _c_ = [0, [11, ", ", [2, 0, [2, 0, 0]]], ", %s%s"],
    _o_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _p_ =
      [0,
       [11,
        "Fatal error in uncaught exception handler: exception ",
        [2, 0, [12, 10, 0]]],
       "Fatal error in uncaught exception handler: exception %s\n"],
    cst_Fatal_error_out_of_memory_ =
      "Fatal error: out of memory in uncaught exception handler",
    _n_ =
      [0,
       [11, cst_Fatal_error_exception, [2, 0, [12, 10, 0]]],
       cst_Fatal_error_exception_s],
    _l_ = [0, [2, 0, [12, 10, 0]], cst_s],
    cst_Program_not_linked_with_g_ = cst_Program_not_linked_with_g_$0,
    _j_ = [0, [2, 0, [12, 10, 0]], cst_s],
    _k_ =
      [0,
       [11, cst_Program_not_linked_with_g_$0, 0],
       cst_Program_not_linked_with_g_$0],
    cst_Raised_at = "Raised at",
    cst_Re_raised_at = "Re-raised at",
    cst_Raised_by_primitive_operat = "Raised by primitive operation at",
    cst_Called_from = "Called from",
    cst_inlined = " (inlined)",
    _h_ =
      [0,
       [2,
        0,
        [12,
         32,
         [2,
          0,
          [11,
           ' in file "',
           [2,
            0,
            [12,
             34,
             [2,
              0,
              [11, ", line ", [4, 0, 0, 0, [11, cst_characters, partial]]]]]]]]]],
       '%s %s in file "%s"%s, line %d, characters %d-%d'],
    _i_ = [0, [2, 0, [11, " unknown location", 0]], "%s unknown location"],
    _g_ =
      [0,
       [11, cst_Uncaught_exception, [2, 0, [12, 10, 0]]],
       cst_Uncaught_exception_s],
    _f_ =
      [0,
       [11, cst_Uncaught_exception, [2, 0, [12, 10, 0]]],
       cst_Uncaught_exception_s],
    cst_Out_of_memory = "Out of memory",
    cst_Stack_overflow = "Stack overflow",
    cst_Pattern_matching_failed = "Pattern matching failed",
    cst_Assertion_failed = "Assertion failed",
    cst_Undefined_recursive_module = "Undefined recursive module",
    _d_ = [0, [12, 40, [2, 0, [2, 0, [12, 41, 0]]]], "(%s%s)"],
    _e_ = [0, [12, 40, [2, 0, [12, 41, 0]]], "(%s)"],
    _b_ = [0, [4, 0, 0, 0, 0], "%d"],
    _a_ = [0, [3, 0, 0], "%S"],
    _m_ =
      [0,
       cst$4,
       "(Cannot print locations:\n bytecode executable program file not found)",
       "(Cannot print locations:\n bytecode executable program file appears to be corrupt)",
       "(Cannot print locations:\n bytecode executable program file has wrong magic number)",
       "(Cannot print locations:\n bytecode executable program file cannot be opened;\n -- too many open files. Try running with OCAMLRUNPARAM=b=2)"];
    /*<<printexc.ml:20:15>>*/ function field(x, i){
     /*<<printexc.ml:25:10>>*/  /*<<printexc.ml:25:10>>*/ var f = x[1 + i];
     /*<<printexc.ml:26:9>>*/ if
     (!  /*<<printexc.ml:26:9>>*/ caml_call1(Stdlib_Obj[1], f))
      /*<<printexc.ml:27:4>>*/ return  /*<<printexc.ml:27:4>>*/ caml_call2
             (Stdlib_Printf[4], _b_, f);
     /*<<printexc.ml:28:7>>*/  /*<<printexc.ml:28:7>>*/ var
     _al_ = Stdlib_Obj[15];
     /*<<printexc.ml:28:10>>*/ if
     ( /*<<printexc.ml:28:10>>*/ caml_obj_tag(f) === _al_)
      /*<<printexc.ml:29:4>>*/ return  /*<<printexc.ml:29:4>>*/ caml_call2
             (Stdlib_Printf[4], _a_, f);
     /*<<printexc.ml:30:7>>*/  /*<<printexc.ml:30:7>>*/ var
     _am_ = Stdlib_Obj[16];
     /*<<printexc.ml:30:10>>*/ return  /*<<printexc.ml:30:10>>*/ caml_obj_tag
             (f)
            === _am_
            ?  /*<<printexc.ml:31:4>>*/ caml_call1(Stdlib[35], f)
            : cst;
    /*<<printexc.ml:33:7>>*/ }
    /*<<printexc.ml:20:15>>*/ function other_fields(x, i){
     /*<<printexc.ml:36:2>>*/ if(x.length - 1 <= i)
      /*<<printexc.ml:36:26>>*/ return cst$0;
     /*<<printexc.ml:37:36>>*/ var
      /*<<printexc.ml:37:36>>*/ _aj_ = other_fields(x, i + 1 | 0),
      /*<<printexc.ml:37:24>>*/ _ak_ = field(x, i);
     /*<<printexc.ml:37:24>>*/ return  /*<<printexc.ml:37:24>>*/ caml_call3
            (Stdlib_Printf[4], _c_, _ak_, _aj_);
    /*<<printexc.ml:37:58>>*/ }
    /*<<printexc.ml:20:15>>*/ function use_printers(x){
    var
     param =  /*<<printexc.ml:53:7>>*/ caml_call1(Stdlib_Atomic[2], printers);
     /*<<printexc.ml:47:17>>*/ for(;;){
      /*<<printexc.ml:47:17>>*/ if(! param)
       /*<<printexc.ml:52:12>>*/ return 0;
     var tl = param[2], hd = param[1], switch$0 = 0;
     try{
       /*<<printexc.ml:49:15>>*/  /*<<printexc.ml:49:15>>*/ var
       val =  /*<<printexc.ml:49:15>>*/ caml_call1(hd, x);
     }
     catch(_ai_){switch$0 = 1;}
     if(! switch$0 && val){
       /*<<printexc.ml:51:21>>*/  /*<<printexc.ml:51:21>>*/ var s = val[1];
       /*<<printexc.ml:51:21>>*/ return [0, s];
     }
     var param = tl;
    }
    /*<<printexc.ml:53:28>>*/ }
    /*<<printexc.ml:20:15>>*/ function string_of_extension_constructo(t){
     /*<<printexc.ml:56:5>>*/ if
     (0 ===  /*<<printexc.ml:56:5>>*/ caml_obj_tag(t)){
      /*<<printexc.ml:60:43>>*/ var
       /*<<printexc.ml:60:43>>*/ constructor = t[1][1],
       /*<<printexc.ml:40:2>>*/ match = t.length - 1;
      /*<<printexc.ml:40:2>>*/ if(2 < match >>> 0)
       /*<<printexc.ml:44:38>>*/ var
        /*<<printexc.ml:44:38>>*/ _ae_ = other_fields(t, 2),
        /*<<printexc.ml:44:26>>*/ _af_ = field(t, 1),
       _ah_ =
          /*<<printexc.ml:44:26>>*/ caml_call3
          (Stdlib_Printf[4], _d_, _af_, _ae_);
     else
      switch(match){
        case 0:
         var _ah_ = cst$1; break;
        case 1:
         var _ah_ = cst$2; break;
        default:
          /*<<printexc.ml:43:24>>*/ var
           /*<<printexc.ml:43:24>>*/ _ag_ = field(t, 1),
          _ah_ =
             /*<<printexc.ml:43:24>>*/ caml_call2(Stdlib_Printf[4], _e_, _ag_);
      }
     var match$0 = [0, constructor, [0, _ah_]];
    }
    else
     var match$0 = [0, t[1], 0];
    var fields_opt = match$0[2], constructor$0 = match$0[1];
    if(! fields_opt)  /*<<printexc.ml:66:12>>*/ return constructor$0;
     /*<<printexc.ml:67:14>>*/  /*<<printexc.ml:67:14>>*/ var
     f = fields_opt[1];
     /*<<printexc.ml:67:14>>*/ return  /*<<printexc.ml:67:14>>*/ caml_call2
            (Stdlib[28], constructor$0, f);
    /*<<printexc.ml:67:29>>*/ }
    /*<<printexc.ml:20:15>>*/ function to_string_default(x){
     /*<<printexc.ml:69:24>>*/ if(x === Stdlib[9])
      /*<<printexc.ml:70:21>>*/ return cst_Out_of_memory;
    if(x === Stdlib[10])  /*<<printexc.ml:71:22>>*/ return cst_Stack_overflow;
    if(x[1] === Stdlib[4]){
     var match = x[2], char$0 = match[3], line = match[2], file = match[1];
     return caml_call6
             (Stdlib_Printf[4],
              locfmt,
              file,
              line,
              char$0,
              char$0 + 5 | 0,
              cst_Pattern_matching_failed);
    }
    if(x[1] === Stdlib[5]){
     var
      match$0 = x[2],
      char$1 = match$0[3],
      line$0 = match$0[2],
      file$0 = match$0[1];
     return caml_call6
             (Stdlib_Printf[4],
              locfmt,
              file$0,
              line$0,
              char$1,
              char$1 + 6 | 0,
              cst_Assertion_failed);
    }
    if(x[1] !== Stdlib[15])
      /*<<printexc.ml:79:6>>*/ return string_of_extension_constructo(x);
    var
     match$1 = x[2],
     char$2 = match$1[3],
     line$1 = match$1[2],
     file$1 = match$1[1];
    return caml_call6
            (Stdlib_Printf[4],
             locfmt,
             file$1,
             line$1,
             char$2,
             char$2 + 6 | 0,
             cst_Undefined_recursive_module);
    /*<<printexc.ml:79:50>>*/ }
    /*<<printexc.ml:20:15>>*/ function to_string(e){
     /*<<printexc.ml:82:8>>*/  /*<<printexc.ml:82:8>>*/ var
     match = use_printers(e);
     /*<<printexc.ml:82:8>>*/ if(! match)
      /*<<printexc.ml:84:12>>*/ return to_string_default(e);
     /*<<printexc.ml:83:14>>*/  /*<<printexc.ml:83:14>>*/ var s = match[1];
     /*<<printexc.ml:83:14>>*/ return s;
    /*<<printexc.ml:84:31>>*/ }
    /*<<printexc.ml:20:15>>*/ function print(fct, arg){
     /*<<?>>*/ try{
      /*<<printexc.ml:88:4>>*/  /*<<printexc.ml:88:4>>*/ var
      _ad_ =  /*<<printexc.ml:88:4>>*/ caml_call1(fct, arg);
      /*<<printexc.ml:90:4>>*/ return _ad_;
    }
    catch(x$0){
      /*<<printexc.ml:90:39>>*/ var
      x = caml_wrap_exception(x$0),
       /*<<printexc.ml:90:39>>*/ _ac_ = to_string(x);
      /*<<printexc.ml:90:4>>*/  /*<<printexc.ml:90:4>>*/ caml_call2
      (Stdlib_Printf[3], _f_, _ac_);
      /*<<printexc.ml:91:4>>*/  /*<<printexc.ml:91:4>>*/ caml_call1
      (Stdlib[63], Stdlib[40]);
      /*<<printexc.ml:91:4>>*/ throw  /*<<printexc.ml:91:4>>*/ caml_maybe_attach_backtrace
            (x, 0);
    }
    /*<<printexc.ml:92:11>>*/ }
    /*<<printexc.ml:20:15>>*/ function catch$0(fct, arg){
     /*<<?>>*/ try{
      /*<<printexc.ml:96:4>>*/  /*<<printexc.ml:96:4>>*/ var
      _ab_ =  /*<<printexc.ml:96:4>>*/ caml_call1(fct, arg);
     return _ab_;
    }
    catch(x$0){
     var x = caml_wrap_exception(x$0);
      /*<<printexc.ml:98:4>>*/  /*<<printexc.ml:98:4>>*/ caml_call1
      (Stdlib[63], Stdlib[39]);
      /*<<printexc.ml:99:39>>*/  /*<<printexc.ml:99:39>>*/ var
      _aa_ = to_string(x);
      /*<<printexc.ml:99:4>>*/  /*<<printexc.ml:99:4>>*/ caml_call2
      (Stdlib_Printf[3], _g_, _aa_);
      /*<<printexc.ml:99:4>>*/ return  /*<<printexc.ml:99:4>>*/ caml_call1
             (Stdlib[99], 2);
    }
    /*<<printexc.ml:100:10>>*/ }
    /*<<printexc.ml:20:15>>*/ function raw_backtrace_entries(bt){
     /*<<printexc.ml:106:31>>*/ return bt;
    /*<<printexc.ml:106:33>>*/ }
    /*<<printexc.ml:20:15>>*/ function convert_raw_backtrace(bt){
     /*<<?>>*/ return [0,
             /*<<printexc.ml:141:11>>*/ runtime.caml_convert_raw_backtrace(bt)];
    /*<<printexc.ml:142:24>>*/ }
    /*<<printexc.ml:20:15>>*/ function format_backtrace_slot(pos, slot){
     /*<<printexc.ml:145:2>>*/ function info(is_raise){
      /*<<printexc.ml:146:4>>*/ return is_raise
             ? 0 === pos ? cst_Raised_at : cst_Re_raised_at
             : 0 === pos ? cst_Raised_by_primitive_operat : cst_Called_from;
     /*<<printexc.ml:149:75>>*/ }
     /*<<printexc.ml:145:2>>*/ if(0 === slot[0]){
      /*<<printexc.ml:158:6>>*/ var
       /*<<printexc.ml:158:6>>*/ _U_ = slot[5],
       /*<<printexc.ml:158:6>>*/ _V_ = slot[4],
       /*<<printexc.ml:158:6>>*/ _W_ = slot[3],
       /*<<printexc.ml:158:6>>*/ _X_ = slot[6] ? cst_inlined : cst$3,
      _Y_ = slot[2],
      _Z_ = slot[7],
       /*<<printexc.ml:159:14>>*/ ___ = info(slot[1]);
      /*<<printexc.ml:158:11>>*/ return [0,
              /*<<printexc.ml:158:11>>*/ caml_call8
              (Stdlib_Printf[4], _h_, ___, _Z_, _Y_, _X_, _W_, _V_, _U_)];
    }
     /*<<printexc.ml:153:6>>*/ if(slot[1])
      /*<<printexc.ml:154:50>>*/ return 0;
     /*<<printexc.ml:156:44>>*/  /*<<printexc.ml:156:44>>*/ var _$_ = info(0);
     /*<<printexc.ml:156:13>>*/ return [0,
             /*<<printexc.ml:156:13>>*/ caml_call2(Stdlib_Printf[4], _i_, _$_)];
    /*<<printexc.ml:161:52>>*/ }
    /*<<printexc.ml:20:15>>*/ function print_raw_backtrace
   (outchan, raw_backtrace){
     /*<<printexc.ml:176:36>>*/  /*<<printexc.ml:176:36>>*/ var
     backtrace = convert_raw_backtrace(raw_backtrace);
     /*<<printexc.ml:164:2>>*/ if(! backtrace)
      /*<<printexc.ml:166:6>>*/ return  /*<<printexc.ml:166:6>>*/ caml_call2
             (Stdlib_Printf[1], outchan, _k_);
     /*<<printexc.ml:169:6>>*/ var
      /*<<printexc.ml:169:6>>*/ a = backtrace[1],
      /*<<printexc.ml:169:6>>*/ _S_ = a.length - 1 - 1 | 0,
      /*<<printexc.ml:169:6>>*/ _R_ = 0;
     /*<<printexc.ml:169:6>>*/ if(_S_ >= 0){
     var i = _R_;
      /*<<printexc.ml:170:8>>*/ for(;;){
       /*<<printexc.ml:170:14>>*/  /*<<printexc.ml:170:14>>*/ var
       match =
         format_backtrace_slot
          (i,  /*<<printexc.ml:170:38>>*/ caml_check_bound(a, i)[1 + i]);
       /*<<printexc.ml:170:14>>*/ if(match){
        /*<<printexc.ml:172:24>>*/  /*<<printexc.ml:172:24>>*/ var
        str = match[1];
        /*<<printexc.ml:172:24>>*/  /*<<printexc.ml:172:24>>*/ caml_call3
        (Stdlib_Printf[1], outchan, _j_, str);
      }
      var _T_ = i + 1 | 0;
      if(_S_ !== i){var i = _T_; continue;}
      break;
     }
    }
     /*<<printexc.ml:166:6>>*/ return 0;
    /*<<printexc.ml:176:73>>*/ }
    /*<<printexc.ml:20:15>>*/ function print_backtrace(outchan){
     /*<<printexc.ml:180:30>>*/ return print_raw_backtrace
            (outchan,
              /*<<printexc.ml:180:30>>*/ caml_get_exception_raw_backtra(0));
    /*<<printexc.ml:180:52>>*/ }
    /*<<printexc.ml:20:15>>*/ function raw_backtrace_to_string(raw_backtrace){
     /*<<printexc.ml:196:22>>*/  /*<<printexc.ml:196:22>>*/ var
     backtrace = convert_raw_backtrace(raw_backtrace);
     /*<<printexc.ml:183:2>>*/ if(! backtrace)
      /*<<printexc.ml:185:5>>*/ return cst_Program_not_linked_with_g_;
     /*<<printexc.ml:187:14>>*/ var
     a = backtrace[1],
      /*<<printexc.ml:187:14>>*/ b =
        /*<<printexc.ml:187:14>>*/ caml_call1(Stdlib_Buffer[1], 1024),
      /*<<printexc.ml:187:14>>*/ _P_ = a.length - 1 - 1 | 0,
      /*<<printexc.ml:187:14>>*/ _O_ = 0;
     /*<<printexc.ml:187:14>>*/ if(_P_ >= 0){
     var i = _O_;
      /*<<printexc.ml:189:8>>*/ for(;;){
       /*<<printexc.ml:189:14>>*/  /*<<printexc.ml:189:14>>*/ var
       match =
         format_backtrace_slot
          (i,  /*<<printexc.ml:189:38>>*/ caml_check_bound(a, i)[1 + i]);
       /*<<printexc.ml:189:14>>*/ if(match){
        /*<<printexc.ml:191:24>>*/  /*<<printexc.ml:191:24>>*/ var
        str = match[1];
        /*<<printexc.ml:191:24>>*/  /*<<printexc.ml:191:24>>*/ caml_call3
        (Stdlib_Printf[5], b, _l_, str);
      }
      var _Q_ = i + 1 | 0;
      if(_P_ !== i){var i = _Q_; continue;}
      break;
     }
    }
     /*<<printexc.ml:193:6>>*/ return  /*<<printexc.ml:193:6>>*/ caml_call1
            (Stdlib_Buffer[2], b);
    /*<<printexc.ml:196:59>>*/ }
    /*<<printexc.ml:20:15>>*/ function backtrace_slot_is_raise(param){
     /*<<printexc.ml:198:30>>*/ return 0 === param[0] ? param[1] : param[1];
    /*<<printexc.ml:200:36>>*/ }
    /*<<printexc.ml:20:15>>*/ function backtrace_slot_is_inline(param){
     /*<<printexc.ml:202:31>>*/ return 0 === param[0] ? param[6] : 0;
    /*<<printexc.ml:204:31>>*/ }
    /*<<printexc.ml:20:15>>*/ function backtrace_slot_location(param){
     /*<<printexc.ml:213:30>>*/ return 0 === param[0]
            ? [0, [0, param[2], param[3], param[4], param[5]]]
            : 0;
    /*<<printexc.ml:221:5>>*/ }
    /*<<printexc.ml:20:15>>*/ function backtrace_slot_defname(param){
     /*<<?>>*/ if
     (0 === param[0] && runtime.caml_string_notequal(param[7], cst$4))
      /*<<printexc.ml:226:24>>*/ return [0, param[7]];
     /*<<printexc.ml:225:39>>*/ return 0;
    /*<<printexc.ml:226:38>>*/ }
    /*<<printexc.ml:20:15>>*/ function backtrace_slots(raw_backtrace){
     /*<<printexc.ml:235:8>>*/  /*<<printexc.ml:235:8>>*/ var
     match = convert_raw_backtrace(raw_backtrace);
     /*<<printexc.ml:235:8>>*/ if(! match)
      /*<<printexc.ml:236:14>>*/ return 0;
     /*<<printexc.ml:238:6>>*/ var
      /*<<printexc.ml:238:6>>*/ backtrace = match[1],
      /*<<printexc.ml:238:6>>*/ i$1 = backtrace.length - 1 - 1 | 0,
     i = i$1;
     /*<<printexc.ml:241:30>>*/ for(;;){
      /*<<printexc.ml:241:30>>*/ if(-1 === i)
      var _N_ = 0;
     else{
       /*<<printexc.ml:238:24>>*/  /*<<printexc.ml:238:24>>*/ var
       _M_ =
         0
          ===
            /*<<printexc.ml:243:27>>*/ caml_check_bound(backtrace, i)[1 + i]
            [0]
          ? 1
          : 0;
      if(! _M_){var i$0 = i - 1 | 0, i = i$0; continue;}
      var _N_ = _M_;
     }
     return _N_ ? [0, backtrace] : 0;
    }
    /*<<printexc.ml:246:15>>*/ }
    /*<<printexc.ml:20:15>>*/ function backtrace_slots_of_raw_entry(entry){
     /*<<printexc.ml:249:2>>*/ return backtrace_slots([0, entry]);
    /*<<printexc.ml:249:29>>*/ }
    /*<<printexc.ml:20:15>>*/ function raw_backtrace_length(bt){
     /*<<printexc.ml:260:30>>*/ return bt.length - 1;
    /*<<printexc.ml:260:45>>*/ }
    /*<<printexc.ml:20:15>>*/ function get_backtrace(param){
     /*<<printexc.ml:271:47>>*/ return raw_backtrace_to_string
            ( /*<<printexc.ml:271:47>>*/ caml_get_exception_raw_backtra(0));
    /*<<printexc.ml:271:69>>*/ }
    /*<<printexc.ml:20:15>>*/ function register_printer(fn){
     /*<<printexc.ml:277:2>>*/ for(;;){
      /*<<printexc.ml:277:21>>*/ var
       /*<<printexc.ml:277:21>>*/ old_printers =
         /*<<printexc.ml:277:21>>*/ caml_call1(Stdlib_Atomic[2], printers),
       /*<<printexc.ml:277:21>>*/ new_printers = [0, fn, old_printers],
       /*<<printexc.ml:279:16>>*/ success =
         /*<<printexc.ml:279:16>>*/ caml_call3
         (Stdlib_Atomic[5], printers, old_printers, new_printers),
       /*<<printexc.ml:279:16>>*/ _L_ = 1 - success;
      /*<<printexc.ml:279:16>>*/ if(_L_) continue;
     return _L_;
    }
    /*<<printexc.ml:280:41>>*/ }
    /*<<printexc.ml:20:15>>*/ function exn_slot(x){
     /*<<printexc.ml:286:2>>*/ return 0
            ===  /*<<printexc.ml:286:2>>*/ caml_obj_tag(x)
            ? x[1]
            : x;
    /*<<printexc.ml:286:44>>*/ }
    /*<<printexc.ml:20:15>>*/ function exn_slot_id(x){
     /*<<printexc.ml:289:13>>*/  /*<<printexc.ml:289:13>>*/ var
     slot = exn_slot(x);
     /*<<printexc.ml:290:11>>*/ return slot[2];
    /*<<printexc.ml:290:36>>*/ }
    /*<<printexc.ml:20:15>>*/ function exn_slot_name(x){
     /*<<printexc.ml:293:13>>*/  /*<<printexc.ml:293:13>>*/ var
     slot = exn_slot(x);
     /*<<printexc.ml:294:11>>*/ return slot[1];
    /*<<printexc.ml:294:39>>*/ }
    /*<<printexc.ml:20:15>>*/  /*<<printexc.ml:20:15>>*/ var
    errors =  /*<<printexc.ml:20:15>>*/ _m_.slice();
    /*<<printexc.ml:20:15>>*/ function default_uncaught_exception_han
   (exn, raw_backtrace){
     /*<<printexc.ml:316:40>>*/  /*<<printexc.ml:316:40>>*/ var
     _I_ = to_string(exn);
     /*<<printexc.ml:316:2>>*/  /*<<printexc.ml:316:2>>*/ caml_call2
     (Stdlib_Printf[3], _n_, _I_);
     /*<<printexc.ml:317:2>>*/ print_raw_backtrace(Stdlib[40], raw_backtrace);
     /*<<printexc.ml:318:15>>*/  /*<<printexc.ml:318:15>>*/ var
     status =  /*<<printexc.ml:318:15>>*/ runtime.caml_ml_debug_info_status(0);
     /*<<printexc.ml:318:15>>*/ if(status < 0){
      /*<<printexc.ml:320:26>>*/ var
       /*<<printexc.ml:320:26>>*/ _J_ =
         /*<<printexc.ml:320:26>>*/ caml_call1(Stdlib[18], status),
       /*<<printexc.ml:320:18>>*/ _K_ =
         /*<<printexc.ml:320:18>>*/ caml_check_bound(errors, _J_)[1 + _J_];
      /*<<printexc.ml:320:4>>*/  /*<<printexc.ml:320:4>>*/ caml_call1
      (Stdlib[53], _K_);
    }
     /*<<printexc.ml:320:37>>*/ return  /*<<printexc.ml:320:37>>*/ caml_call1
            (Stdlib[63], Stdlib[40]);
    /*<<printexc.ml:321:14>>*/ }
    /*<<printexc.ml:20:15>>*/  /*<<printexc.ml:20:15>>*/ var
    uncaught_exception_handler = [0, default_uncaught_exception_han];
    /*<<printexc.ml:20:15>>*/ function set_uncaught_exception_handler(fn){
     /*<<printexc.ml:325:40>>*/ uncaught_exception_handler[1] = fn;
     /*<<printexc.ml:325:40>>*/ return 0;
    /*<<printexc.ml:325:72>>*/ }
    /*<<printexc.ml:20:15>>*/  /*<<printexc.ml:20:15>>*/ var
    empty_backtrace = [0];
    /*<<printexc.ml:20:15>>*/ function handle_uncaught_exception
   (exn$0, debugger_in_use){
     /*<<?>>*/ try{
     try{
       /*<<printexc.ml:341:8>>*/  /*<<printexc.ml:341:8>>*/ var
       raw_backtrace =
         debugger_in_use
          ? empty_backtrace
          :  /*<<printexc.ml:343:8>>*/ caml_get_exception_raw_backtra(0);
      try{
        /*<<printexc.ml:345:9>>*/  /*<<printexc.ml:345:9>>*/ caml_call1
        (Stdlib[103], 0);
      }
      catch(_H_){}
      try{
        /*<<printexc.ml:347:6>>*/ var
         /*<<printexc.ml:347:6>>*/ _D_ =
           /*<<printexc.ml:347:6>>*/ caml_call2
           (uncaught_exception_handler[1], exn$0, raw_backtrace),
        _C_ = _D_;
      }
      catch(exn$1){
        /*<<printexc.ml:349:27>>*/ var
        exn = caml_wrap_exception(exn$1),
         /*<<printexc.ml:349:27>>*/ raw_backtrace$0 =
           /*<<printexc.ml:349:27>>*/ caml_get_exception_raw_backtra(0),
         /*<<printexc.ml:350:44>>*/ _A_ = to_string(exn$0);
        /*<<printexc.ml:350:6>>*/  /*<<printexc.ml:350:6>>*/ caml_call2
        (Stdlib_Printf[3], _o_, _A_);
        /*<<printexc.ml:351:6>>*/ print_raw_backtrace
        (Stdlib[40], raw_backtrace);
        /*<<printexc.ml:353:8>>*/  /*<<printexc.ml:353:8>>*/ var
        _B_ = to_string(exn);
        /*<<printexc.ml:352:6>>*/  /*<<printexc.ml:352:6>>*/ caml_call2
        (Stdlib_Printf[3], _p_, _B_);
        /*<<printexc.ml:354:6>>*/ print_raw_backtrace
        (Stdlib[40], raw_backtrace$0);
       var
        _C_ =  /*<<printexc.ml:355:6>>*/ caml_call1(Stdlib[63], Stdlib[40]);
      }
      var _E_ = _C_;
     }
     catch(_G_){
      var _z_ = caml_wrap_exception(_G_);
      if(_z_ !== Stdlib[9])
        /*<<printexc.ml:330:2>>*/ throw  /*<<printexc.ml:330:2>>*/ caml_maybe_attach_backtrace
              (_z_, 0);
      var
       _E_ =
          /*<<printexc.ml:358:8>>*/ caml_call1
          (Stdlib[53], cst_Fatal_error_out_of_memory_);
     }
      /*<<printexc.ml:368:4>>*/ return _E_;
    }
    catch(_F_){ /*<<printexc.ml:368:4>>*/ return 0;}
    /*<<printexc.ml:368:6>>*/ }
    /*<<printexc.ml:374:2>>*/  /*<<printexc.ml:374:2>>*/ runtime.caml_register_named_value
    ("Printexc.handle_uncaught_exception", handle_uncaught_exception);
    /*<<printexc.ml:374:2>>*/ function _q_(_y_){
     /*<<?>>*/ return runtime.caml_raw_backtrace_next_slot(_y_);
   }
    /*<<printexc.ml:374:2>>*/ function _r_(_x_){
     /*<<?>>*/ return runtime.caml_convert_raw_backtrace_slot(_x_);
   }
    /*<<printexc.ml:374:2>>*/ function _s_(_w_, _v_){
     /*<<?>>*/ return runtime.caml_raw_backtrace_slot(_w_, _v_);
   }
    /*<<printexc.ml:374:2>>*/ var
     /*<<printexc.ml:374:2>>*/ _t_ =
      [0,
       backtrace_slot_is_raise,
       backtrace_slot_is_inline,
       backtrace_slot_location,
       backtrace_slot_defname,
       format_backtrace_slot],
     /*<<printexc.ml:374:2>>*/ Stdlib_Printexc =
      [0,
       to_string,
       to_string_default,
       print,
       catch$0,
       print_backtrace,
       get_backtrace,
       runtime.caml_record_backtrace,
       runtime.caml_backtrace_status,
       register_printer,
       use_printers,
       raw_backtrace_entries,
       function(_u_){ /*<<?>>*/ return caml_get_exception_raw_backtra(_u_);},
       print_raw_backtrace,
       raw_backtrace_to_string,
       default_uncaught_exception_han,
       set_uncaught_exception_handler,
       backtrace_slots,
       backtrace_slots_of_raw_entry,
       _t_,
       raw_backtrace_length,
       _s_,
       _r_,
       _q_,
       exn_slot_id,
       exn_slot_name,
       string_of_extension_constructo];
    /*<<printexc.ml:374:2>>*/  /*<<printexc.ml:374:2>>*/ runtime.caml_register_global
    (42, Stdlib_Printexc, "Stdlib__Printexc");
    /*<<printexc.ml:374:2>>*/ return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Fun
//# unitInfo: Requires: Stdlib, Stdlib__Printexc
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_restore_raw_backtrace = runtime.caml_restore_raw_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<fun.ml:29:4>>*/ var
     /*<<fun.ml:29:4>>*/ global_data =
       /*<<fun.ml:29:4>>*/ runtime.caml_get_global_data(),
     /*<<fun.ml:29:4>>*/ Stdlib_Printexc = global_data.Stdlib__Printexc,
     /*<<fun.ml:29:4>>*/ Stdlib = global_data.Stdlib,
     /*<<fun.ml:29:4>>*/ cst_Fun_Finally_raised = "Fun.Finally_raised: ",
     /*<<fun.ml:29:4>>*/ cst_Stdlib_Fun_Finally_raised = "Stdlib.Fun.Finally_raised";
   function const$0(c, param){
     /*<<fun.ml:17:16>>*/ return c;
    /*<<fun.ml:17:17>>*/ }
   function flip(f, x, y){
     /*<<fun.ml:18:17>>*/ return  /*<<fun.ml:18:17>>*/ caml_call2(f, y, x);
    /*<<fun.ml:18:22>>*/ }
   function negate(p, v){
     /*<<fun.ml:19:21>>*/ return 1 -  /*<<fun.ml:19:21>>*/ caml_call1(p, v);
    /*<<fun.ml:19:26>>*/ }
   var
    Finally_raised =
      [248, cst_Stdlib_Fun_Finally_raised, runtime.caml_fresh_oo_id(0)];
   function _a_(param){
     /*<<fun.ml:23:38>>*/ if(param[1] !== Finally_raised)
      /*<<fun.ml:25:7>>*/ return 0;
     /*<<fun.ml:24:24>>*/ var
      /*<<fun.ml:24:24>>*/ exn = param[2],
      /*<<fun.ml:24:55>>*/ _c_ =
        /*<<fun.ml:24:55>>*/ caml_call1(Stdlib_Printexc[1], exn);
     /*<<fun.ml:24:29>>*/ return [0,
             /*<<fun.ml:24:29>>*/ caml_call2
             (Stdlib[28], cst_Fun_Finally_raised, _c_)];
    /*<<fun.ml:25:11>>*/ }
    /*<<fun.ml:23:9>>*/  /*<<fun.ml:23:9>>*/ caml_call1
    (Stdlib_Printexc[9], _a_);
    /*<<fun.ml:23:9>>*/ function protect(finally$0, work){
     /*<<fun.ml:28:2>>*/ function finally_no_exn(param){
      /*<<?>>*/ try{
       /*<<fun.ml:29:8>>*/  /*<<fun.ml:29:8>>*/ var
       _b_ =  /*<<fun.ml:29:8>>*/ caml_call1(finally$0, 0);
       /*<<fun.ml:30:6>>*/ return _b_;
     }
     catch(e$0){
       /*<<fun.ml:30:15>>*/ var
       e = caml_wrap_exception(e$0),
        /*<<fun.ml:30:15>>*/ bt =
          /*<<fun.ml:30:15>>*/ caml_call1(Stdlib_Printexc[12], 0),
        /*<<fun.ml:30:15>>*/ exn = [0, Finally_raised, e];
       /*<<fun.ml:30:15>>*/  /*<<fun.ml:30:15>>*/ caml_restore_raw_backtrace
       (exn, bt);
       /*<<fun.ml:30:15>>*/ throw  /*<<fun.ml:30:15>>*/ caml_maybe_attach_backtrace
             (exn, 0);
     }
     /*<<fun.ml:31:57>>*/ }
    try{
      /*<<fun.ml:33:8>>*/  /*<<fun.ml:33:8>>*/ var
      result =  /*<<fun.ml:33:8>>*/ caml_call1(work, 0);
    }
    catch(work_exn$0){
      /*<<fun.ml:36:20>>*/ var
      work_exn = caml_wrap_exception(work_exn$0),
       /*<<fun.ml:36:20>>*/ work_bt =
         /*<<fun.ml:36:20>>*/ caml_call1(Stdlib_Printexc[12], 0);
      /*<<fun.ml:37:6>>*/ finally_no_exn(0);
      /*<<fun.ml:37:6>>*/  /*<<fun.ml:37:6>>*/ caml_restore_raw_backtrace
      (work_exn, work_bt);
      /*<<fun.ml:37:6>>*/ throw  /*<<fun.ml:37:6>>*/ caml_maybe_attach_backtrace
            (work_exn, 0);
    }
     /*<<fun.ml:34:14>>*/ finally_no_exn(0);
     /*<<fun.ml:34:14>>*/ return result;
    /*<<fun.ml:38:52>>*/ }
    /*<<fun.ml:23:9>>*/  /*<<fun.ml:23:9>>*/ var
    Stdlib_Fun = [0, const$0, flip, negate, protect, Finally_raised];
    /*<<fun.ml:23:9>>*/  /*<<fun.ml:23:9>>*/ runtime.caml_register_global
    (4, Stdlib_Fun, "Stdlib__Fun");
    /*<<fun.ml:23:9>>*/ return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Gc
//# unitInfo: Requires: Stdlib, Stdlib__Atomic, Stdlib__Printf, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst = "\n",
    caml_ml_string_length = runtime.caml_ml_string_length;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<?>>*/ function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
    /*<<gc.ml:110:2>>*/ var
     /*<<gc.ml:110:2>>*/ global_data =
       /*<<gc.ml:110:2>>*/ runtime.caml_get_global_data(),
     /*<<gc.ml:110:2>>*/ Stdlib_Atomic = global_data.Stdlib__Atomic,
     /*<<gc.ml:110:2>>*/ Stdlib = global_data.Stdlib,
     /*<<gc.ml:110:2>>*/ Stdlib_Sys = global_data.Stdlib__Sys,
     /*<<gc.ml:110:2>>*/ Stdlib_Printf = global_data.Stdlib__Printf,
     /*<<gc.ml:110:2>>*/ _a_ =
      [0,
       [11, "minor_collections:      ", [4, 0, 0, 0, [12, 10, 0]]],
       "minor_collections:      %d\n"],
     /*<<gc.ml:110:2>>*/ _b_ =
      [0,
       [11, "major_collections:      ", [4, 0, 0, 0, [12, 10, 0]]],
       "major_collections:      %d\n"],
     /*<<gc.ml:110:2>>*/ _c_ =
      [0,
       [11, "compactions:            ", [4, 0, 0, 0, [12, 10, 0]]],
       "compactions:            %d\n"],
     /*<<gc.ml:110:2>>*/ _d_ =
      [0,
       [11, "forced_major_collections: ", [4, 0, 0, 0, [12, 10, 0]]],
       "forced_major_collections: %d\n"],
     /*<<gc.ml:110:2>>*/ _e_ = [0, [12, 10, 0], cst],
     /*<<gc.ml:110:2>>*/ _f_ = [0, [8, [0, 0, 0], 0, [0, 0], 0], "%.0f"],
     /*<<gc.ml:110:2>>*/ _g_ =
      [0,
       [11, "minor_words:    ", [8, [0, 0, 0], [1, 1], [0, 0], [12, 10, 0]]],
       "minor_words:    %*.0f\n"],
     /*<<gc.ml:110:2>>*/ _h_ =
      [0,
       [11, "promoted_words: ", [8, [0, 0, 0], [1, 1], [0, 0], [12, 10, 0]]],
       "promoted_words: %*.0f\n"],
     /*<<gc.ml:110:2>>*/ _i_ =
      [0,
       [11, "major_words:    ", [8, [0, 0, 0], [1, 1], [0, 0], [12, 10, 0]]],
       "major_words:    %*.0f\n"],
     /*<<gc.ml:110:2>>*/ _j_ = [0, [12, 10, 0], cst],
     /*<<gc.ml:110:2>>*/ _k_ = [0, [4, 0, 0, 0, 0], "%d"],
     /*<<gc.ml:110:2>>*/ _l_ =
      [0,
       [11, "top_heap_words: ", [4, 0, [1, 1], 0, [12, 10, 0]]],
       "top_heap_words: %*d\n"],
     /*<<gc.ml:110:2>>*/ _m_ =
      [0,
       [11, "heap_words:     ", [4, 0, [1, 1], 0, [12, 10, 0]]],
       "heap_words:     %*d\n"],
     /*<<gc.ml:110:2>>*/ _n_ =
      [0,
       [11, "live_words:     ", [4, 0, [1, 1], 0, [12, 10, 0]]],
       "live_words:     %*d\n"],
     /*<<gc.ml:110:2>>*/ _o_ =
      [0,
       [11, "free_words:     ", [4, 0, [1, 1], 0, [12, 10, 0]]],
       "free_words:     %*d\n"],
     /*<<gc.ml:110:2>>*/ _p_ =
      [0,
       [11, "largest_free:   ", [4, 0, [1, 1], 0, [12, 10, 0]]],
       "largest_free:   %*d\n"],
     /*<<gc.ml:110:2>>*/ _q_ =
      [0,
       [11, "fragments:      ", [4, 0, [1, 1], 0, [12, 10, 0]]],
       "fragments:      %*d\n"],
     /*<<gc.ml:110:2>>*/ _r_ = [0, [12, 10, 0], cst],
     /*<<gc.ml:110:2>>*/ _s_ =
      [0,
       [11, "live_blocks: ", [4, 0, 0, 0, [12, 10, 0]]],
       "live_blocks: %d\n"],
     /*<<gc.ml:110:2>>*/ _t_ =
      [0,
       [11, "free_blocks: ", [4, 0, 0, 0, [12, 10, 0]]],
       "free_blocks: %d\n"],
     /*<<gc.ml:110:2>>*/ _u_ =
      [0,
       [11, "heap_chunks: ", [4, 0, 0, 0, [12, 10, 0]]],
       "heap_chunks: %d\n"];
   function eventlog_pause(param){
     /*<<gc.ml:65:24>>*/ return 0;
    /*<<gc.ml:65:26>>*/ }
   function eventlog_resume(param){ /*<<gc.ml:66:25>>*/ return 0;
    /*<<gc.ml:66:27>>*/ }
   function print_stat(c){
     /*<<gc.ml:71:11>>*/  /*<<gc.ml:71:11>>*/ var
     st =  /*<<gc.ml:71:11>>*/ runtime.caml_gc_stat(0);
     /*<<gc.ml:72:2>>*/  /*<<gc.ml:72:2>>*/ caml_call3
     (Stdlib_Printf[1], c, _a_, st[4]);
     /*<<gc.ml:73:2>>*/  /*<<gc.ml:73:2>>*/ caml_call3
     (Stdlib_Printf[1], c, _b_, st[5]);
     /*<<gc.ml:74:2>>*/  /*<<gc.ml:74:2>>*/ caml_call3
     (Stdlib_Printf[1], c, _c_, st[14]);
     /*<<gc.ml:75:2>>*/  /*<<gc.ml:75:2>>*/ caml_call3
     (Stdlib_Printf[1], c, _d_, st[17]);
     /*<<gc.ml:76:2>>*/  /*<<gc.ml:76:2>>*/ caml_call2
     (Stdlib_Printf[1], c, _e_);
     /*<<gc.ml:77:25>>*/  /*<<gc.ml:77:25>>*/ var
     l1 =
        /*<<gc.ml:77:25>>*/ caml_ml_string_length
        ( /*<<gc.ml:77:25>>*/ caml_call2(Stdlib_Printf[4], _f_, st[1]));
     /*<<gc.ml:78:2>>*/  /*<<gc.ml:78:2>>*/ caml_call4
     (Stdlib_Printf[1], c, _g_, l1, st[1]);
     /*<<gc.ml:79:2>>*/  /*<<gc.ml:79:2>>*/ caml_call4
     (Stdlib_Printf[1], c, _h_, l1, st[2]);
     /*<<gc.ml:80:2>>*/  /*<<gc.ml:80:2>>*/ caml_call4
     (Stdlib_Printf[1], c, _i_, l1, st[3]);
     /*<<gc.ml:81:2>>*/  /*<<gc.ml:81:2>>*/ caml_call2
     (Stdlib_Printf[1], c, _j_);
     /*<<gc.ml:82:25>>*/  /*<<gc.ml:82:25>>*/ var
     l2 =
        /*<<gc.ml:82:25>>*/ caml_ml_string_length
        ( /*<<gc.ml:82:25>>*/ caml_call2(Stdlib_Printf[4], _k_, st[15]));
     /*<<gc.ml:83:2>>*/  /*<<gc.ml:83:2>>*/ caml_call4
     (Stdlib_Printf[1], c, _l_, l2, st[15]);
     /*<<gc.ml:84:2>>*/  /*<<gc.ml:84:2>>*/ caml_call4
     (Stdlib_Printf[1], c, _m_, l2, st[6]);
     /*<<gc.ml:85:2>>*/  /*<<gc.ml:85:2>>*/ caml_call4
     (Stdlib_Printf[1], c, _n_, l2, st[8]);
     /*<<gc.ml:86:2>>*/  /*<<gc.ml:86:2>>*/ caml_call4
     (Stdlib_Printf[1], c, _o_, l2, st[10]);
     /*<<gc.ml:87:2>>*/  /*<<gc.ml:87:2>>*/ caml_call4
     (Stdlib_Printf[1], c, _p_, l2, st[12]);
     /*<<gc.ml:88:2>>*/  /*<<gc.ml:88:2>>*/ caml_call4
     (Stdlib_Printf[1], c, _q_, l2, st[13]);
     /*<<gc.ml:89:2>>*/  /*<<gc.ml:89:2>>*/ caml_call2
     (Stdlib_Printf[1], c, _r_);
     /*<<gc.ml:90:2>>*/  /*<<gc.ml:90:2>>*/ caml_call3
     (Stdlib_Printf[1], c, _s_, st[9]);
     /*<<gc.ml:91:2>>*/  /*<<gc.ml:91:2>>*/ caml_call3
     (Stdlib_Printf[1], c, _t_, st[11]);
     /*<<gc.ml:91:2>>*/ return  /*<<gc.ml:91:2>>*/ caml_call3
            (Stdlib_Printf[1], c, _u_, st[7]);
    /*<<gc.ml:92:46>>*/ }
   function allocated_bytes(param){
     /*<<gc.ml:96:22>>*/ var
      /*<<gc.ml:96:22>>*/ match =
        /*<<gc.ml:96:22>>*/ runtime.caml_gc_counters(0),
      /*<<gc.ml:96:22>>*/ ma = match[3],
      /*<<gc.ml:96:22>>*/ pro = match[2],
      /*<<gc.ml:96:22>>*/ mi = match[1];
     /*<<gc.ml:97:19>>*/ return (mi + ma - pro) * (Stdlib_Sys[9] / 8 | 0);
    /*<<gc.ml:97:55>>*/ }
   function create_alarm(f){
     /*<<gc.ml:118:2>>*/ return  /*<<gc.ml:117:24>>*/ caml_call1
            (Stdlib_Atomic[1], 1);
    /*<<gc.ml:119:13>>*/ }
   function delete_alarm(a){
     /*<<gc.ml:122:21>>*/ return  /*<<gc.ml:122:21>>*/ caml_call2
            (Stdlib_Atomic[3], a, 0);
    /*<<gc.ml:122:39>>*/ }
   function _v_(param){ /*<<gc.ml:146:32>>*/ return 0; /*<<gc.ml:146:34>>*/ }
   function _w_(param){ /*<<gc.ml:145:32>>*/ return 0; /*<<gc.ml:145:34>>*/ }
   function _x_(param){ /*<<gc.ml:144:26>>*/ return 0; /*<<gc.ml:144:30>>*/ }
   function _y_(param){ /*<<gc.ml:143:30>>*/ return 0; /*<<gc.ml:143:34>>*/ }
   var
    null_tracker =
      [0,
       function(param){ /*<<gc.ml:142:30>>*/ return 0; /*<<gc.ml:142:34>>*/ },
       _y_,
       _x_,
       _w_,
       _v_];
   function start(sampling_rate, opt, tracker){
     /*<<gc.ml:157:6>>*/ if(opt)
      /*<<gc.ml:155:25>>*/ var
       /*<<gc.ml:155:25>>*/ sth = opt[1],
      callstack_size = sth;
    else
     var callstack_size = Stdlib[19];
     /*<<gc.ml:157:6>>*/ return  /*<<gc.ml:157:6>>*/ runtime.caml_memprof_start
            (sampling_rate, callstack_size, tracker);
    /*<<gc.ml:157:50>>*/ }
   var _z_ = [0, null_tracker, start, runtime.caml_memprof_stop];
   function _A_(_E_){ /*<<?>>*/ return runtime.caml_final_release(_E_);}
   var
    _B_ = runtime.caml_final_register_called_without_value,
    Stdlib_Gc =
      [0,
       print_stat,
       allocated_bytes,
       function(_D_, _C_){
         /*<<?>>*/ return runtime.caml_final_register(_D_, _C_);
       },
       _B_,
       _A_,
       create_alarm,
       delete_alarm,
       eventlog_pause,
       eventlog_resume,
       _z_];
   runtime.caml_register_global(25, Stdlib_Gc, "Stdlib__Gc");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Digest
//# unitInfo: Requires: Stdlib, Stdlib__Bytes, Stdlib__Char, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Digest_from_hex$1 = "Digest.from_hex",
    caml_bytes_unsafe_set = runtime.caml_bytes_unsafe_set,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_md5_string = runtime.caml_md5_string,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_wrap_exception = runtime.caml_wrap_exception;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<digest.ml:71:15>>*/ var
     /*<<digest.ml:71:15>>*/ global_data =
       /*<<digest.ml:71:15>>*/ runtime.caml_get_global_data(),
     /*<<digest.ml:71:15>>*/ Stdlib = global_data.Stdlib,
     /*<<digest.ml:71:15>>*/ Stdlib_Char = global_data.Stdlib__Char,
     /*<<digest.ml:71:15>>*/ Stdlib_Bytes = global_data.Stdlib__Bytes,
     /*<<digest.ml:71:15>>*/ Stdlib_String = global_data.Stdlib__String,
    compare = Stdlib_String[9],
    equal = Stdlib_String[8],
     /*<<digest.ml:71:15>>*/ cst_Digest_from_hex$0 = cst_Digest_from_hex$1,
     /*<<digest.ml:71:15>>*/ cst_Digest_from_hex = cst_Digest_from_hex$1,
     /*<<digest.ml:71:15>>*/ cst_Digest_to_hex = "Digest.to_hex",
     /*<<digest.ml:71:15>>*/ cst_Digest_substring = "Digest.substring";
   function string(str){
     /*<<digest.ml:27:2>>*/ return  /*<<digest.ml:27:2>>*/ caml_md5_string
            (str, 0,  /*<<digest.ml:27:2>>*/ caml_ml_string_length(str));
    /*<<digest.ml:27:41>>*/ }
   function bytes(b){
     /*<<digest.ml:29:21>>*/ return string
            ( /*<<digest.ml:29:21>>*/ caml_call1(Stdlib_Bytes[44], b));
    /*<<digest.ml:29:47>>*/ }
   function substring(str, ofs, len){
     /*<<?>>*/ if
     (0 <= ofs && 0 <= len && (caml_ml_string_length(str) - len | 0) >= ofs)
      /*<<digest.ml:34:7>>*/ return  /*<<digest.ml:34:7>>*/ caml_md5_string
             (str, ofs, len);
     /*<<digest.ml:33:7>>*/ return  /*<<digest.ml:33:7>>*/ caml_call1
            (Stdlib[1], cst_Digest_substring);
    /*<<digest.ml:34:32>>*/ }
   function subbytes(b, ofs, len){
     /*<<digest.ml:36:35>>*/ return substring
            ( /*<<digest.ml:36:35>>*/ caml_call1(Stdlib_Bytes[44], b),
             ofs,
             len);
    /*<<digest.ml:36:69>>*/ }
   function file(filename){
     /*<<digest.ml:39:11>>*/  /*<<digest.ml:39:11>>*/ var
     ic =  /*<<digest.ml:39:11>>*/ caml_call1(Stdlib[80], filename);
    try{
      /*<<digest.ml:40:8>>*/  /*<<digest.ml:40:8>>*/ var
      d =  /*<<digest.ml:40:8>>*/ runtime.caml_md5_chan(ic, -1);
    }
    catch(e$0){
     var e = caml_wrap_exception(e$0);
      /*<<digest.ml:42:21>>*/  /*<<digest.ml:42:21>>*/ caml_call1
      (Stdlib[93], ic);
      /*<<digest.ml:42:21>>*/ throw  /*<<digest.ml:42:21>>*/ caml_maybe_attach_backtrace
            (e, 0);
    }
     /*<<digest.ml:41:11>>*/  /*<<digest.ml:41:11>>*/ caml_call1
     (Stdlib[93], ic);
     /*<<digest.ml:41:11>>*/ return d;
    /*<<digest.ml:42:41>>*/ }
   function output(chan, digest){
     /*<<digest.ml:45:2>>*/ return  /*<<digest.ml:45:2>>*/ caml_call2
            (Stdlib[66], chan, digest);
    /*<<digest.ml:45:27>>*/ }
   function input(chan){
     /*<<digest.ml:47:17>>*/ return  /*<<digest.ml:47:17>>*/ caml_call2
            (Stdlib[86], chan, 16);
    /*<<digest.ml:47:44>>*/ }
   function char_hex(n){
     /*<<digest.ml:50:2>>*/  /*<<digest.ml:50:2>>*/ var
     _e_ = 10 <= n ? 87 : 48;
    return n + _e_ | 0;
    /*<<digest.ml:50:78>>*/ }
   function to_hex(d){
     /*<<digest.ml:53:2>>*/ if
     (16 !==  /*<<digest.ml:53:2>>*/ caml_ml_string_length(d))
      /*<<digest.ml:53:32>>*/  /*<<digest.ml:53:32>>*/ caml_call1
      (Stdlib[1], cst_Digest_to_hex);
     /*<<digest.ml:54:15>>*/ var
      /*<<digest.ml:54:15>>*/ result =
        /*<<digest.ml:54:15>>*/ caml_create_bytes(32),
     i = 0;
     /*<<digest.ml:56:4>>*/ for(;;){
      /*<<digest.ml:56:22>>*/  /*<<digest.ml:56:22>>*/ var
      x =  /*<<digest.ml:56:22>>*/ caml_string_get(d, i);
      /*<<digest.ml:57:34>>*/  /*<<digest.ml:57:34>>*/ caml_bytes_unsafe_set
      (result, i * 2 | 0, char_hex(x >>> 4 | 0));
      /*<<digest.ml:58:36>>*/  /*<<digest.ml:58:36>>*/ caml_bytes_unsafe_set
      (result, (i * 2 | 0) + 1 | 0, char_hex(x & 15));
      /*<<digest.ml:58:36>>*/  /*<<digest.ml:58:36>>*/ var _d_ = i + 1 | 0;
      /*<<digest.ml:58:36>>*/ if(15 === i)
       /*<<digest.ml:60:2>>*/ return  /*<<digest.ml:60:2>>*/ caml_call1
              (Stdlib_Bytes[44], result);
     var i = _d_;
    }
    /*<<digest.ml:60:31>>*/ }
   function from_hex(s){
     /*<<digest.ml:63:2>>*/ if
     (32 !==  /*<<digest.ml:63:2>>*/ caml_ml_string_length(s))
      /*<<digest.ml:63:32>>*/  /*<<digest.ml:63:32>>*/ caml_call1
      (Stdlib[1], cst_Digest_from_hex);
     /*<<digest.ml:63:61>>*/ function digit(c){
      /*<<digest.ml:65:4>>*/ if(65 <= c){
      if(97 <= c){
       if(103 > c)  /*<<digest.ml:68:18>>*/ return (c - 97 | 0) + 10 | 0;
      }
      else if(71 > c)  /*<<digest.ml:67:18>>*/ return (c - 65 | 0) + 10 | 0;
     }
     else if(9 >= c - 48 >>> 0)  /*<<digest.ml:66:18>>*/ return c - 48 | 0;
      /*<<digest.ml:69:11>>*/ throw  /*<<digest.ml:69:11>>*/ caml_maybe_attach_backtrace
            ([0, Stdlib[6], cst_Digest_from_hex$0], 1);
     /*<<digest.ml:69:53>>*/ }
     /*<<digest.ml:72:2>>*/ var
      /*<<digest.ml:72:2>>*/ result =
        /*<<digest.ml:72:2>>*/ caml_create_bytes(16),
     i = 0;
     /*<<digest.ml:74:4>>*/ for(;;){
      /*<<digest.ml:74:4>>*/ var
       /*<<digest.ml:74:4>>*/ i$0 = 2 * i | 0,
       /*<<digest.ml:71:35>>*/ _a_ =
        digit( /*<<digest.ml:71:41>>*/ caml_string_get(s, i$0 + 1 | 0)),
       /*<<digest.ml:71:15>>*/ _b_ =
        (digit( /*<<digest.ml:71:21>>*/ caml_string_get(s, i$0)) << 4) + _a_
        | 0;
      /*<<digest.ml:74:4>>*/  /*<<digest.ml:74:4>>*/ runtime.caml_bytes_set
      (result, i,  /*<<digest.ml:74:23>>*/ caml_call1(Stdlib_Char[1], _b_));
      /*<<digest.ml:74:4>>*/  /*<<digest.ml:74:4>>*/ var _c_ = i + 1 | 0;
      /*<<digest.ml:74:4>>*/ if(15 === i)
       /*<<digest.ml:76:2>>*/ return  /*<<digest.ml:76:2>>*/ caml_call1
              (Stdlib_Bytes[44], result);
     var i = _c_;
    }
    /*<<digest.ml:76:31>>*/ }
   var
    Stdlib_Digest =
      [0,
       compare,
       equal,
       string,
       bytes,
       substring,
       subbytes,
       file,
       output,
       input,
       to_hex,
       from_hex];
   runtime.caml_register_global(8, Stdlib_Digest, "Stdlib__Digest");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Bigarray
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_Bigarray_Array3_of_array_n$1 =
      "Bigarray.Array3.of_array: non-cubic data",
    caml_ba_change_layout = runtime.caml_ba_change_layout,
    caml_ba_create = runtime.caml_ba_create,
    caml_ba_dim_1 = runtime.caml_ba_dim_1,
    caml_ba_dim_2 = runtime.caml_ba_dim_2,
    caml_ba_kind = runtime.caml_ba_kind,
    caml_ba_num_dims = runtime.caml_ba_num_dims,
    caml_ba_reshape = runtime.caml_ba_reshape,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_ba_set_2 = runtime.caml_ba_set_2,
    caml_ba_set_3 = runtime.caml_ba_set_3,
    caml_ba_set_generic = runtime.caml_ba_set_generic,
    caml_ba_slice = runtime.caml_ba_slice,
    caml_check_bound = runtime.caml_check_bound,
    caml_make_vect = runtime.caml_make_vect,
    caml_mul = runtime.caml_mul;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Sys = global_data.Stdlib__Sys,
    cst_Bigarray_array3_of_genarra = "Bigarray.array3_of_genarray",
    cst_Bigarray_array2_of_genarra = "Bigarray.array2_of_genarray",
    cst_Bigarray_array1_of_genarra = "Bigarray.array1_of_genarray",
    cst_Bigarray_array0_of_genarra = "Bigarray.array0_of_genarray",
    cst_Bigarray_Array3_of_array_n = cst_Bigarray_Array3_of_array_n$1,
    cst_Bigarray_Array3_of_array_n$0 = cst_Bigarray_Array3_of_array_n$1,
    cst_Bigarray_Array2_of_array_n =
      "Bigarray.Array2.of_array: non-rectangular data",
    float32 = 0,
    float64 = 1,
    int8_signed = 2,
    int8_unsigned = 3,
    int16_signed = 4,
    int16_unsigned = 5,
    int32 = 6,
    int64 = 7,
    int$0 = 8,
    nativeint = 9,
    complex32 = 10,
    complex64 = 11,
    char$0 = 12;
   function kind_size_in_bytes(param){
     /*<<bigarray.ml:73:4>>*/ switch(param){
      case 0:
        /*<<bigarray.ml:74:15>>*/ return 4;
      case 1:
        /*<<bigarray.ml:75:15>>*/ return 8;
      case 2:
        /*<<bigarray.ml:76:19>>*/ return 1;
      case 3:
        /*<<bigarray.ml:77:21>>*/ return 1;
      case 4:
        /*<<bigarray.ml:78:20>>*/ return 2;
      case 5:
        /*<<bigarray.ml:79:22>>*/ return 2;
      case 6:
        /*<<bigarray.ml:80:13>>*/ return 4;
      case 7:
        /*<<bigarray.ml:81:13>>*/ return 8;
      case 8:
        /*<<bigarray.ml:82:11>>*/ return Stdlib_Sys[9] / 8 | 0;
      case 9:
        /*<<bigarray.ml:83:17>>*/ return Stdlib_Sys[9] / 8 | 0;
      case 10:
        /*<<bigarray.ml:84:17>>*/ return 8;
      case 11:
        /*<<bigarray.ml:85:17>>*/ return 16;
      default:  /*<<bigarray.ml:86:12>>*/ return 1;
    }
    /*<<bigarray.ml:86:13>>*/ }
   var c_layout = 0, fortran_layout = 1;
   function cloop(arr, idx, f, col, max){
     /*<<bigarray.ml:104:4>>*/ if(col === idx.length - 1)
      /*<<bigarray.ml:104:35>>*/ return  /*<<bigarray.ml:104:35>>*/ caml_ba_set_generic
             (arr, idx,  /*<<bigarray.ml:104:47>>*/ caml_call1(f, idx));
     /*<<bigarray.ml:105:27>>*/ var
      /*<<bigarray.ml:105:27>>*/ _am_ =
        /*<<bigarray.ml:105:27>>*/ caml_check_bound(max, col)[1 + col] - 1 | 0,
      /*<<bigarray.ml:105:9>>*/ _al_ = 0;
     /*<<bigarray.ml:105:27>>*/ if(_am_ >= 0){
     var j = _al_;
      /*<<bigarray.ml:106:11>>*/ for(;;){
       /*<<bigarray.ml:106:11>>*/  /*<<bigarray.ml:106:11>>*/ caml_check_bound
        (idx, col)
       [1 + col]
      = j;
       /*<<bigarray.ml:107:11>>*/ cloop(arr, idx, f, col + 1 | 0, max);
       /*<<bigarray.ml:107:11>>*/  /*<<bigarray.ml:107:11>>*/ var
       _an_ = j + 1 | 0;
       /*<<bigarray.ml:107:11>>*/ if(_am_ !== j){var j = _an_; continue;}
      break;
     }
    }
    return 0;
    /*<<bigarray.ml:108:13>>*/ }
   function floop(arr, idx, f, col, max){
     /*<<bigarray.ml:110:4>>*/ if(0 > col)
      /*<<bigarray.ml:110:20>>*/ return  /*<<bigarray.ml:110:20>>*/ caml_ba_set_generic
             (arr, idx,  /*<<bigarray.ml:110:32>>*/ caml_call1(f, idx));
     /*<<bigarray.ml:111:22>>*/ var
      /*<<bigarray.ml:111:22>>*/ _aj_ =
        /*<<bigarray.ml:111:22>>*/ caml_check_bound(max, col)[1 + col],
      /*<<bigarray.ml:111:9>>*/ _ai_ = 1;
     /*<<bigarray.ml:111:22>>*/ if(_aj_ >= 1){
     var j = _ai_;
      /*<<bigarray.ml:112:11>>*/ for(;;){
       /*<<bigarray.ml:112:11>>*/  /*<<bigarray.ml:112:11>>*/ caml_check_bound
        (idx, col)
       [1 + col]
      = j;
       /*<<bigarray.ml:113:11>>*/ floop(arr, idx, f, col - 1 | 0, max);
       /*<<bigarray.ml:113:11>>*/  /*<<bigarray.ml:113:11>>*/ var
       _ak_ = j + 1 | 0;
       /*<<bigarray.ml:113:11>>*/ if(_aj_ !== j){var j = _ak_; continue;}
      break;
     }
    }
    return 0;
    /*<<bigarray.ml:114:13>>*/ }
   function init(kind, layout, dims, f){
     /*<<bigarray.ml:116:14>>*/ var
      /*<<bigarray.ml:116:14>>*/ arr =
        /*<<bigarray.ml:116:14>>*/ caml_ba_create(kind, layout, dims),
      /*<<bigarray.ml:116:14>>*/ dlen = dims.length - 1;
     /*<<bigarray.ml:116:14>>*/ return layout
            ? (floop
               (arr,
                 /*<<bigarray.ml:120:34>>*/ caml_make_vect(dlen, 1),
                f,
                dlen - 1 | 0,
                dims),
              arr)
            : (cloop
               (arr,
                 /*<<bigarray.ml:119:28>>*/ caml_make_vect(dlen, 0),
                f,
                0,
                dims),
              arr);
    /*<<bigarray.ml:120:77>>*/ }
   function dims(a){
     /*<<bigarray.ml:125:12>>*/ var
      /*<<bigarray.ml:125:12>>*/ n =
        /*<<bigarray.ml:125:12>>*/ caml_ba_num_dims(a),
      /*<<bigarray.ml:126:12>>*/ d =
        /*<<bigarray.ml:126:12>>*/ caml_make_vect(n, 0),
      /*<<bigarray.ml:126:12>>*/ _af_ = n - 1 | 0,
      /*<<bigarray.ml:126:12>>*/ _ae_ = 0;
     /*<<bigarray.ml:126:12>>*/ if(_af_ >= 0){
     var i = _ae_;
      /*<<bigarray.ml:127:24>>*/ for(;;){
       /*<<bigarray.ml:127:33>>*/  /*<<bigarray.ml:127:33>>*/ var
       _ag_ =  /*<<bigarray.ml:127:33>>*/ runtime.caml_ba_dim(a, i);
       /*<<bigarray.ml:127:24>>*/  /*<<bigarray.ml:127:24>>*/ caml_check_bound
        (d, i)
       [1 + i]
      = _ag_;
       /*<<bigarray.ml:127:24>>*/  /*<<bigarray.ml:127:24>>*/ var
       _ah_ = i + 1 | 0;
       /*<<bigarray.ml:127:24>>*/ if(_af_ !== i){var i = _ah_; continue;}
      break;
     }
    }
     /*<<bigarray.ml:128:4>>*/ return d;
    /*<<bigarray.ml:128:5>>*/ }
   function size_in_bytes(arr){
     /*<<bigarray.ml:136:63>>*/ var
      /*<<bigarray.ml:136:63>>*/ _ac_ = dims(arr),
      /*<<bigarray.ml:136:38>>*/ _ad_ =
        /*<<bigarray.ml:136:38>>*/ caml_call3
        (Stdlib_Array[15], caml_mul, 1, _ac_);
     /*<<bigarray.ml:136:4>>*/ return  /*<<bigarray.ml:136:4>>*/ caml_mul
            (kind_size_in_bytes( /*<<bigarray.ml:136:24>>*/ caml_ba_kind(arr)),
             _ad_);
    /*<<bigarray.ml:136:74>>*/ }
   function create(kind, layout){
     /*<<bigarray.ml:157:4>>*/ return  /*<<bigarray.ml:157:4>>*/ caml_ba_create
            (kind, layout, [0]);
    /*<<bigarray.ml:157:36>>*/ }
   function get(arr){
     /*<<bigarray.ml:158:16>>*/ return  /*<<bigarray.ml:158:16>>*/ runtime.caml_ba_get_generic
            (arr, [0]);
    /*<<bigarray.ml:158:37>>*/ }
   function set(arr){
     /*<<bigarray.ml:159:16>>*/  /*<<bigarray.ml:159:16>>*/ var _aa_ = [0];
     /*<<bigarray.ml:159:16>>*/ return function(_ab_){
      /*<<?>>*/ return caml_ba_set_generic(arr, _aa_, _ab_);};
    /*<<bigarray.ml:159:37>>*/ }
   function size_in_bytes$0(arr){
     /*<<bigarray.ml:166:45>>*/ return kind_size_in_bytes
            ( /*<<bigarray.ml:166:45>>*/ caml_ba_kind(arr));
    /*<<bigarray.ml:166:55>>*/ }
   function of_value(kind, layout, v){
     /*<<bigarray.ml:172:12>>*/  /*<<bigarray.ml:172:12>>*/ var
     a = create(kind, layout);
     /*<<bigarray.ml:173:4>>*/  /*<<bigarray.ml:173:4>>*/ caml_call1
     (set(a), v);
     /*<<bigarray.ml:173:4>>*/ return a;
    /*<<bigarray.ml:174:5>>*/ }
   function create$0(kind, layout, dim){
     /*<<bigarray.ml:181:4>>*/ return  /*<<bigarray.ml:181:4>>*/ caml_ba_create
            (kind, layout, [0, dim]);
    /*<<bigarray.ml:181:39>>*/ }
   function size_in_bytes$1(arr){
     /*<<bigarray.ml:195:38>>*/  /*<<bigarray.ml:195:38>>*/ var
     _$_ =  /*<<bigarray.ml:195:38>>*/ caml_ba_dim_1(arr);
     /*<<bigarray.ml:195:4>>*/ return  /*<<bigarray.ml:195:4>>*/ caml_mul
            (kind_size_in_bytes( /*<<bigarray.ml:195:24>>*/ caml_ba_kind(arr)),
             _$_);
    /*<<bigarray.ml:195:47>>*/ }
   function slice(a, n){
     /*<<bigarray.ml:199:10>>*/ return  /*<<bigarray.ml:199:10>>*/ runtime.caml_ba_layout
             (a)
            ?  /*<<bigarray.ml:201:25>>*/ caml_ba_slice(a, [0, n])
            :  /*<<bigarray.ml:200:19>>*/ caml_ba_slice(a, [0, n]);
    /*<<bigarray.ml:201:76>>*/ }
   function init$0(kind, layout, dim, f){
     /*<<bigarray.ml:209:14>>*/  /*<<bigarray.ml:209:14>>*/ var
     arr = create$0(kind, layout, dim);
     /*<<bigarray.ml:209:14>>*/ if(layout){
      /*<<bigarray.ml:207:4>>*/  /*<<bigarray.ml:207:4>>*/ var _Z_ = 1;
      /*<<bigarray.ml:207:4>>*/ if(dim >= 1){
      var i$0 = _Z_;
       /*<<bigarray.ml:207:24>>*/ for(;;){
        /*<<bigarray.ml:207:24>>*/  /*<<bigarray.ml:207:24>>*/ caml_ba_set_1
        (arr, i$0,  /*<<bigarray.ml:207:41>>*/ caml_call1(f, i$0));
        /*<<bigarray.ml:207:24>>*/  /*<<bigarray.ml:207:24>>*/ var
        ___ = i$0 + 1 | 0;
        /*<<bigarray.ml:207:24>>*/ if(dim !== i$0){var i$0 = ___; continue;}
       break;
      }
     }
     return arr;
    }
     /*<<bigarray.ml:205:4>>*/ var
      /*<<bigarray.ml:205:4>>*/ _X_ = dim - 1 | 0,
      /*<<bigarray.ml:205:4>>*/ _W_ = 0;
     /*<<bigarray.ml:205:4>>*/ if(_X_ >= 0){
     var i = _W_;
      /*<<bigarray.ml:205:29>>*/ for(;;){
       /*<<bigarray.ml:205:29>>*/  /*<<bigarray.ml:205:29>>*/ caml_ba_set_1
       (arr, i,  /*<<bigarray.ml:205:46>>*/ caml_call1(f, i));
       /*<<bigarray.ml:205:29>>*/  /*<<bigarray.ml:205:29>>*/ var
       _Y_ = i + 1 | 0;
       /*<<bigarray.ml:205:29>>*/ if(_X_ !== i){var i = _Y_; continue;}
      break;
     }
    }
    return arr;
    /*<<bigarray.ml:212:51>>*/ }
   function of_array(kind, layout, data){
     /*<<bigarray.ml:214:13>>*/ var
      /*<<bigarray.ml:214:13>>*/ ba = create$0(kind, layout, data.length - 1),
      /*<<bigarray.ml:214:13>>*/ ofs = layout ? 1 : 0,
      /*<<bigarray.ml:220:4>>*/ _U_ = data.length - 1 - 1 | 0,
      /*<<bigarray.ml:220:4>>*/ _T_ = 0;
     /*<<bigarray.ml:220:4>>*/ if(_U_ >= 0){
     var i = _T_;
      /*<<bigarray.ml:220:42>>*/ for(;;){
       /*<<bigarray.ml:220:42>>*/  /*<<bigarray.ml:220:42>>*/ caml_ba_set_1
       (ba,
        i + ofs | 0,
         /*<<bigarray.ml:220:66>>*/ caml_check_bound(data, i)[1 + i]);
       /*<<bigarray.ml:220:42>>*/  /*<<bigarray.ml:220:42>>*/ var
       _V_ = i + 1 | 0;
       /*<<bigarray.ml:220:42>>*/ if(_U_ !== i){var i = _V_; continue;}
      break;
     }
    }
     /*<<bigarray.ml:221:4>>*/ return ba;
    /*<<bigarray.ml:221:6>>*/ }
   function create$1(kind, layout, dim1, dim2){
     /*<<bigarray.ml:227:4>>*/ return  /*<<bigarray.ml:227:4>>*/ caml_ba_create
            (kind, layout, [0, dim1, dim2]);
    /*<<bigarray.ml:227:46>>*/ }
   function size_in_bytes$2(arr){
     /*<<bigarray.ml:243:51>>*/ var
      /*<<bigarray.ml:243:51>>*/ _R_ =
        /*<<bigarray.ml:243:51>>*/ caml_ba_dim_2(arr),
      /*<<bigarray.ml:243:38>>*/ _S_ =
        /*<<bigarray.ml:243:38>>*/ caml_ba_dim_1(arr);
     /*<<bigarray.ml:243:4>>*/ return  /*<<bigarray.ml:243:4>>*/ caml_mul
            ( /*<<bigarray.ml:243:4>>*/ caml_mul
              (kind_size_in_bytes
                ( /*<<bigarray.ml:243:24>>*/ caml_ba_kind(arr)),
               _S_),
             _R_);
    /*<<bigarray.ml:243:61>>*/ }
   function slice_left(a, n){
     /*<<bigarray.ml:250:23>>*/ return  /*<<bigarray.ml:250:23>>*/ caml_ba_slice
            (a, [0, n]);
    /*<<bigarray.ml:250:50>>*/ }
   function slice_right(a, n){
     /*<<bigarray.ml:251:24>>*/ return  /*<<bigarray.ml:251:24>>*/ caml_ba_slice
            (a, [0, n]);
    /*<<bigarray.ml:251:52>>*/ }
   function init$1(kind, layout, dim1, dim2, f){
     /*<<bigarray.ml:267:14>>*/  /*<<bigarray.ml:267:14>>*/ var
     arr = create$1(kind, layout, dim1, dim2);
     /*<<bigarray.ml:267:14>>*/ if(layout){
      /*<<bigarray.ml:261:4>>*/  /*<<bigarray.ml:261:4>>*/ var _N_ = 1;
      /*<<bigarray.ml:261:4>>*/ if(dim2 >= 1){
      var j$0 = _N_;
       /*<<bigarray.ml:262:6>>*/ for(;;){
        /*<<bigarray.ml:262:6>>*/  /*<<bigarray.ml:262:6>>*/ var _O_ = 1;
        /*<<bigarray.ml:262:6>>*/ if(dim1 >= 1){
        var i$0 = _O_;
         /*<<bigarray.ml:263:8>>*/ for(;;){
          /*<<bigarray.ml:263:8>>*/  /*<<bigarray.ml:263:8>>*/ caml_ba_set_2
          (arr, i$0, j$0,  /*<<bigarray.ml:263:27>>*/ caml_call2(f, i$0, j$0));
          /*<<bigarray.ml:263:8>>*/  /*<<bigarray.ml:263:8>>*/ var
          _Q_ = i$0 + 1 | 0;
          /*<<bigarray.ml:263:8>>*/ if(dim1 !== i$0){var i$0 = _Q_; continue;}
         break;
        }
       }
       var _P_ = j$0 + 1 | 0;
       if(dim2 !== j$0){var j$0 = _P_; continue;}
       break;
      }
     }
     return arr;
    }
     /*<<bigarray.ml:255:4>>*/ var
      /*<<bigarray.ml:255:4>>*/ _I_ = dim1 - 1 | 0,
      /*<<bigarray.ml:255:4>>*/ _H_ = 0;
     /*<<bigarray.ml:255:4>>*/ if(_I_ >= 0){
     var i = _H_;
      /*<<bigarray.ml:256:6>>*/ for(;;){
       /*<<bigarray.ml:256:6>>*/ var
        /*<<bigarray.ml:256:6>>*/ _K_ = dim2 - 1 | 0,
        /*<<bigarray.ml:256:6>>*/ _J_ = 0;
       /*<<bigarray.ml:256:6>>*/ if(_K_ >= 0){
       var j = _J_;
        /*<<bigarray.ml:257:8>>*/ for(;;){
         /*<<bigarray.ml:257:8>>*/  /*<<bigarray.ml:257:8>>*/ caml_ba_set_2
         (arr, i, j,  /*<<bigarray.ml:257:27>>*/ caml_call2(f, i, j));
         /*<<bigarray.ml:257:8>>*/  /*<<bigarray.ml:257:8>>*/ var
         _M_ = j + 1 | 0;
         /*<<bigarray.ml:257:8>>*/ if(_K_ !== j){var j = _M_; continue;}
        break;
       }
      }
      var _L_ = i + 1 | 0;
      if(_I_ !== i){var i = _L_; continue;}
      break;
     }
    }
    return arr;
    /*<<bigarray.ml:270:57>>*/ }
   function of_array$0(kind, layout, data){
     /*<<bigarray.ml:272:4>>*/ var
      /*<<bigarray.ml:272:4>>*/ dim1 = data.length - 1,
      /*<<bigarray.ml:272:4>>*/ dim2 =
       0 === dim1
        ? 0
        :  /*<<bigarray.ml:273:52>>*/ caml_check_bound(data, 0)[1].length - 1,
      /*<<bigarray.ml:274:13>>*/ ba = create$1(kind, layout, dim1, dim2),
      /*<<bigarray.ml:274:13>>*/ ofs = layout ? 1 : 0,
      /*<<bigarray.ml:280:4>>*/ _C_ = dim1 - 1 | 0,
      /*<<bigarray.ml:280:4>>*/ _B_ = 0;
     /*<<bigarray.ml:280:4>>*/ if(_C_ >= 0){
     var i = _B_;
      /*<<bigarray.ml:281:6>>*/ for(;;){
       /*<<bigarray.ml:281:16>>*/  /*<<bigarray.ml:281:16>>*/ var
       row =  /*<<bigarray.ml:281:16>>*/ caml_check_bound(data, i)[1 + i];
       /*<<bigarray.ml:281:16>>*/ if(row.length - 1 !== dim2)
        /*<<bigarray.ml:283:8>>*/  /*<<bigarray.ml:283:8>>*/ caml_call1
        (Stdlib[1], cst_Bigarray_Array2_of_array_n);
       /*<<bigarray.ml:283:69>>*/ var
        /*<<bigarray.ml:283:69>>*/ _E_ = dim2 - 1 | 0,
        /*<<bigarray.ml:283:69>>*/ _D_ = 0;
       /*<<bigarray.ml:283:69>>*/ if(_E_ >= 0){
       var j = _D_;
        /*<<bigarray.ml:285:8>>*/ for(;;){
         /*<<bigarray.ml:285:8>>*/  /*<<bigarray.ml:285:8>>*/ caml_ba_set_2
         (ba,
          i + ofs | 0,
          j + ofs | 0,
           /*<<bigarray.ml:285:42>>*/ caml_check_bound(row, j)[1 + j]);
         /*<<bigarray.ml:285:8>>*/  /*<<bigarray.ml:285:8>>*/ var
         _G_ = j + 1 | 0;
         /*<<bigarray.ml:285:8>>*/ if(_E_ !== j){var j = _G_; continue;}
        break;
       }
      }
      var _F_ = i + 1 | 0;
      if(_C_ !== i){var i = _F_; continue;}
      break;
     }
    }
     /*<<bigarray.ml:288:4>>*/ return ba;
    /*<<bigarray.ml:288:6>>*/ }
   function create$2(kind, layout, dim1, dim2, dim3){
     /*<<bigarray.ml:294:4>>*/ return  /*<<bigarray.ml:294:4>>*/ caml_ba_create
            (kind, layout, [0, dim1, dim2, dim3]);
    /*<<bigarray.ml:294:52>>*/ }
   function size_in_bytes$3(arr){
     /*<<bigarray.ml:312:64>>*/ var
      /*<<bigarray.ml:312:64>>*/ _y_ =
        /*<<bigarray.ml:312:64>>*/ runtime.caml_ba_dim_3(arr),
      /*<<bigarray.ml:312:51>>*/ _z_ =
        /*<<bigarray.ml:312:51>>*/ caml_ba_dim_2(arr),
      /*<<bigarray.ml:312:38>>*/ _A_ =
        /*<<bigarray.ml:312:38>>*/ caml_ba_dim_1(arr);
     /*<<bigarray.ml:312:4>>*/ return  /*<<bigarray.ml:312:4>>*/ caml_mul
            ( /*<<bigarray.ml:312:4>>*/ caml_mul
              ( /*<<bigarray.ml:312:4>>*/ caml_mul
                (kind_size_in_bytes
                  ( /*<<bigarray.ml:312:24>>*/ caml_ba_kind(arr)),
                 _A_),
               _z_),
             _y_);
    /*<<bigarray.ml:312:74>>*/ }
   function slice_left_1(a, n, m){
     /*<<bigarray.ml:319:27>>*/ return  /*<<bigarray.ml:319:27>>*/ caml_ba_slice
            (a, [0, n, m]);
    /*<<bigarray.ml:319:57>>*/ }
   function slice_right_1(a, n, m){
     /*<<bigarray.ml:320:28>>*/ return  /*<<bigarray.ml:320:28>>*/ caml_ba_slice
            (a, [0, n, m]);
    /*<<bigarray.ml:320:59>>*/ }
   function slice_left_2(a, n){
     /*<<bigarray.ml:321:25>>*/ return  /*<<bigarray.ml:321:25>>*/ caml_ba_slice
            (a, [0, n]);
    /*<<bigarray.ml:321:52>>*/ }
   function slice_right_2(a, n){
     /*<<bigarray.ml:322:26>>*/ return  /*<<bigarray.ml:322:26>>*/ caml_ba_slice
            (a, [0, n]);
    /*<<bigarray.ml:322:54>>*/ }
   function init$2(kind, layout, dim1, dim2, dim3, f){
     /*<<bigarray.ml:342:14>>*/  /*<<bigarray.ml:342:14>>*/ var
     arr = create$2(kind, layout, dim1, dim2, dim3);
     /*<<bigarray.ml:342:14>>*/ if(layout){
      /*<<bigarray.ml:334:4>>*/  /*<<bigarray.ml:334:4>>*/ var _s_ = 1;
      /*<<bigarray.ml:334:4>>*/ if(dim3 >= 1){
      var k$0 = _s_;
       /*<<bigarray.ml:335:6>>*/ for(;;){
        /*<<bigarray.ml:335:6>>*/  /*<<bigarray.ml:335:6>>*/ var _t_ = 1;
        /*<<bigarray.ml:335:6>>*/ if(dim2 >= 1){
        var j$0 = _t_;
         /*<<bigarray.ml:336:8>>*/ for(;;){
          /*<<bigarray.ml:336:8>>*/  /*<<bigarray.ml:336:8>>*/ var _v_ = 1;
          /*<<bigarray.ml:336:8>>*/ if(dim1 >= 1){
          var i$0 = _v_;
           /*<<bigarray.ml:337:10>>*/ for(;;){
            /*<<bigarray.ml:337:10>>*/  /*<<bigarray.ml:337:10>>*/ caml_ba_set_3
            (arr,
             i$0,
             j$0,
             k$0,
              /*<<bigarray.ml:337:31>>*/ caml_call3(f, i$0, j$0, k$0));
            /*<<bigarray.ml:337:10>>*/  /*<<bigarray.ml:337:10>>*/ var
            _x_ = i$0 + 1 | 0;
            /*<<bigarray.ml:337:10>>*/ if(dim1 !== i$0){
            var i$0 = _x_;
            continue;
           }
           break;
          }
         }
         var _w_ = j$0 + 1 | 0;
         if(dim2 !== j$0){var j$0 = _w_; continue;}
         break;
        }
       }
       var _u_ = k$0 + 1 | 0;
       if(dim3 !== k$0){var k$0 = _u_; continue;}
       break;
      }
     }
     return arr;
    }
     /*<<bigarray.ml:326:4>>*/ var
      /*<<bigarray.ml:326:4>>*/ _k_ = dim1 - 1 | 0,
      /*<<bigarray.ml:326:4>>*/ _j_ = 0;
     /*<<bigarray.ml:326:4>>*/ if(_k_ >= 0){
     var i = _j_;
      /*<<bigarray.ml:327:6>>*/ for(;;){
       /*<<bigarray.ml:327:6>>*/ var
        /*<<bigarray.ml:327:6>>*/ _m_ = dim2 - 1 | 0,
        /*<<bigarray.ml:327:6>>*/ _l_ = 0;
       /*<<bigarray.ml:327:6>>*/ if(_m_ >= 0){
       var j = _l_;
        /*<<bigarray.ml:328:8>>*/ for(;;){
         /*<<bigarray.ml:328:8>>*/ var
          /*<<bigarray.ml:328:8>>*/ _p_ = dim3 - 1 | 0,
          /*<<bigarray.ml:328:8>>*/ _o_ = 0;
         /*<<bigarray.ml:328:8>>*/ if(_p_ >= 0){
         var k = _o_;
          /*<<bigarray.ml:329:10>>*/ for(;;){
           /*<<bigarray.ml:329:10>>*/  /*<<bigarray.ml:329:10>>*/ caml_ba_set_3
           (arr, i, j, k,  /*<<bigarray.ml:329:31>>*/ caml_call3(f, i, j, k));
           /*<<bigarray.ml:329:10>>*/  /*<<bigarray.ml:329:10>>*/ var
           _r_ = k + 1 | 0;
           /*<<bigarray.ml:329:10>>*/ if(_p_ !== k){var k = _r_; continue;}
          break;
         }
        }
        var _q_ = j + 1 | 0;
        if(_m_ !== j){var j = _q_; continue;}
        break;
       }
      }
      var _n_ = i + 1 | 0;
      if(_k_ !== i){var i = _n_; continue;}
      break;
     }
    }
    return arr;
    /*<<bigarray.ml:345:62>>*/ }
   function of_array$1(kind, layout, data){
     /*<<bigarray.ml:347:4>>*/ var
      /*<<bigarray.ml:347:4>>*/ dim1 = data.length - 1,
      /*<<bigarray.ml:347:4>>*/ dim2 =
       0 === dim1
        ? 0
        :  /*<<bigarray.ml:348:52>>*/ caml_check_bound(data, 0)[1].length - 1,
      /*<<bigarray.ml:349:4>>*/ dim3 =
       0 === dim2
        ? 0
        :  /*<<bigarray.ml:349:60>>*/ caml_check_bound
           ( /*<<bigarray.ml:349:52>>*/ caml_check_bound(data, 0)[1], 0)
          [1].length
         - 1,
      /*<<bigarray.ml:350:13>>*/ ba = create$2(kind, layout, dim1, dim2, dim3),
      /*<<bigarray.ml:350:13>>*/ ofs = layout ? 1 : 0,
      /*<<bigarray.ml:356:4>>*/ _b_ = dim1 - 1 | 0,
      /*<<bigarray.ml:356:4>>*/ _a_ = 0;
     /*<<bigarray.ml:356:4>>*/ if(_b_ >= 0){
     var i = _a_;
      /*<<bigarray.ml:357:6>>*/ for(;;){
       /*<<bigarray.ml:357:16>>*/  /*<<bigarray.ml:357:16>>*/ var
       row =  /*<<bigarray.ml:357:16>>*/ caml_check_bound(data, i)[1 + i];
       /*<<bigarray.ml:357:16>>*/ if(row.length - 1 !== dim2)
        /*<<bigarray.ml:359:8>>*/  /*<<bigarray.ml:359:8>>*/ caml_call1
        (Stdlib[1], cst_Bigarray_Array3_of_array_n);
       /*<<bigarray.ml:359:63>>*/ var
        /*<<bigarray.ml:359:63>>*/ _d_ = dim2 - 1 | 0,
        /*<<bigarray.ml:359:63>>*/ _c_ = 0;
       /*<<bigarray.ml:359:63>>*/ if(_d_ >= 0){
       var j = _c_;
        /*<<bigarray.ml:361:8>>*/ for(;;){
         /*<<bigarray.ml:361:18>>*/  /*<<bigarray.ml:361:18>>*/ var
         col =  /*<<bigarray.ml:361:18>>*/ caml_check_bound(row, j)[1 + j];
         /*<<bigarray.ml:361:18>>*/ if(col.length - 1 !== dim3)
          /*<<bigarray.ml:363:10>>*/  /*<<bigarray.ml:363:10>>*/ caml_call1
          (Stdlib[1], cst_Bigarray_Array3_of_array_n$0);
         /*<<bigarray.ml:363:65>>*/ var
          /*<<bigarray.ml:363:65>>*/ _g_ = dim3 - 1 | 0,
          /*<<bigarray.ml:363:65>>*/ _f_ = 0;
         /*<<bigarray.ml:363:65>>*/ if(_g_ >= 0){
         var k = _f_;
          /*<<bigarray.ml:365:10>>*/ for(;;){
           /*<<bigarray.ml:365:10>>*/  /*<<bigarray.ml:365:10>>*/ caml_ba_set_3
           (ba,
            i + ofs | 0,
            j + ofs | 0,
            k + ofs | 0,
             /*<<bigarray.ml:365:54>>*/ caml_check_bound(col, k)[1 + k]);
           /*<<bigarray.ml:365:10>>*/  /*<<bigarray.ml:365:10>>*/ var
           _i_ = k + 1 | 0;
           /*<<bigarray.ml:365:10>>*/ if(_g_ !== k){var k = _i_; continue;}
          break;
         }
        }
        var _h_ = j + 1 | 0;
        if(_d_ !== j){var j = _h_; continue;}
        break;
       }
      }
      var _e_ = i + 1 | 0;
      if(_b_ !== i){var i = _e_; continue;}
      break;
     }
    }
     /*<<bigarray.ml:369:4>>*/ return ba;
    /*<<bigarray.ml:369:6>>*/ }
   function array0_of_genarray(a){
     /*<<bigarray.ml:381:5>>*/ return 0
            ===  /*<<bigarray.ml:381:5>>*/ caml_ba_num_dims(a)
            ? a
            :  /*<<bigarray.ml:382:7>>*/ caml_call1
              (Stdlib[1], cst_Bigarray_array0_of_genarra);
    /*<<bigarray.ml:382:48>>*/ }
   function array1_of_genarray(a){
     /*<<bigarray.ml:384:5>>*/ return 1
            ===  /*<<bigarray.ml:384:5>>*/ caml_ba_num_dims(a)
            ? a
            :  /*<<bigarray.ml:385:7>>*/ caml_call1
              (Stdlib[1], cst_Bigarray_array1_of_genarra);
    /*<<bigarray.ml:385:48>>*/ }
   function array2_of_genarray(a){
     /*<<bigarray.ml:387:5>>*/ return 2
            ===  /*<<bigarray.ml:387:5>>*/ caml_ba_num_dims(a)
            ? a
            :  /*<<bigarray.ml:388:7>>*/ caml_call1
              (Stdlib[1], cst_Bigarray_array2_of_genarra);
    /*<<bigarray.ml:388:48>>*/ }
   function array3_of_genarray(a){
     /*<<bigarray.ml:390:5>>*/ return 3
            ===  /*<<bigarray.ml:390:5>>*/ caml_ba_num_dims(a)
            ? a
            :  /*<<bigarray.ml:391:7>>*/ caml_call1
              (Stdlib[1], cst_Bigarray_array3_of_genarra);
    /*<<bigarray.ml:391:48>>*/ }
   function reshape_0(a){
     /*<<bigarray.ml:396:18>>*/ return  /*<<bigarray.ml:396:18>>*/ caml_ba_reshape
            (a, [0]);
    /*<<bigarray.ml:396:32>>*/ }
   function reshape_1(a, dim1){
     /*<<bigarray.ml:397:23>>*/ return  /*<<bigarray.ml:397:23>>*/ caml_ba_reshape
            (a, [0, dim1]);
    /*<<bigarray.ml:397:41>>*/ }
   function reshape_2(a, dim1, dim2){
     /*<<bigarray.ml:398:28>>*/ return  /*<<bigarray.ml:398:28>>*/ caml_ba_reshape
            (a, [0, dim1, dim2]);
    /*<<bigarray.ml:398:51>>*/ }
   function reshape_3(a, dim1, dim2, dim3){
     /*<<bigarray.ml:399:33>>*/ return  /*<<bigarray.ml:399:33>>*/ caml_ba_reshape
            (a, [0, dim1, dim2, dim3]);
    /*<<bigarray.ml:399:61>>*/ }
   var
    Stdlib_Bigarray =
      [0,
       float32,
       float64,
       complex32,
       complex64,
       int8_signed,
       int8_unsigned,
       int16_signed,
       int16_unsigned,
       int$0,
       int32,
       int64,
       nativeint,
       char$0,
       kind_size_in_bytes,
       c_layout,
       fortran_layout,
       [0, init, dims, size_in_bytes],
       [0,
        create,
        of_value,
        caml_ba_change_layout,
        size_in_bytes$0,
        get,
        set,
        of_value],
       [0,
        create$0,
        init$0,
        caml_ba_change_layout,
        size_in_bytes$1,
        slice,
        of_array],
       [0,
        create$1,
        init$1,
        caml_ba_change_layout,
        size_in_bytes$2,
        slice_left,
        slice_right,
        of_array$0],
       [0,
        create$2,
        init$2,
        caml_ba_change_layout,
        size_in_bytes$3,
        slice_left_1,
        slice_right_1,
        slice_left_2,
        slice_right_2,
        of_array$1],
       array0_of_genarray,
       array1_of_genarray,
       array2_of_genarray,
       array3_of_genarray,
       caml_ba_reshape,
       reshape_0,
       reshape_1,
       reshape_2,
       reshape_3];
   runtime.caml_register_global(10, Stdlib_Bigarray, "Stdlib__Bigarray");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Random
//# unitInfo: Requires: Stdlib, Stdlib__Bigarray, Stdlib__Bytes, Stdlib__Digest, Stdlib__Domain, Stdlib__Int32, Stdlib__Int64, Stdlib__Nativeint, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_ba_blit = runtime.caml_ba_blit,
    caml_ba_set_1 = runtime.caml_ba_set_1,
    caml_bytes_set = runtime.caml_bytes_set,
    caml_greaterthan = runtime.caml_greaterthan,
    caml_int64_of_int32 = runtime.caml_int64_of_int32,
    caml_int64_shift_right_unsigne = runtime.caml_int64_shift_right_unsigned,
    caml_int64_sub = runtime.caml_int64_sub,
    caml_int64_to_int32 = runtime.caml_int64_to_int32,
    caml_lessequal = runtime.caml_lessequal,
    caml_lxm_next = runtime.caml_lxm_next,
    caml_mod = runtime.caml_mod,
    caml_notequal = runtime.caml_notequal,
    caml_sys_random_seed = runtime.caml_sys_random_seed;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<random.ml:204:18>>*/ var
     /*<<random.ml:204:18>>*/ global_data =
       /*<<random.ml:204:18>>*/ runtime.caml_get_global_data(),
     /*<<random.ml:204:18>>*/ Stdlib_Domain = global_data.Stdlib__Domain,
     /*<<random.ml:204:18>>*/ Stdlib = global_data.Stdlib,
     /*<<random.ml:204:18>>*/ Stdlib_Int32 = global_data.Stdlib__Int32,
     /*<<random.ml:204:18>>*/ Stdlib_Int64 = global_data.Stdlib__Int64,
     /*<<random.ml:204:18>>*/ Stdlib_Bytes = global_data.Stdlib__Bytes,
     /*<<random.ml:204:18>>*/ Stdlib_Digest = global_data.Stdlib__Digest,
     /*<<random.ml:204:18>>*/ Stdlib_String = global_data.Stdlib__String,
     /*<<random.ml:204:18>>*/ Stdlib_Bigarray = global_data.Stdlib__Bigarray,
     /*<<random.ml:204:18>>*/ Stdlib_Nativeint = global_data.Stdlib__Nativeint,
     /*<<random.ml:204:18>>*/ _j_ =
      runtime.caml_int64_create_lo_mi_hi(14371852, 15349651, 22696),
     /*<<random.ml:204:18>>*/ _k_ =
      runtime.caml_int64_create_lo_mi_hi(12230193, 11438743, 35013),
     /*<<random.ml:204:18>>*/ _l_ =
      runtime.caml_int64_create_lo_mi_hi(1424933, 15549263, 2083),
     /*<<random.ml:204:18>>*/ _m_ =
      runtime.caml_int64_create_lo_mi_hi(9492471, 4696708, 43520),
     /*<<random.ml:204:18>>*/ _f_ =
      runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
     /*<<random.ml:204:18>>*/ _h_ =
      runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
     /*<<random.ml:204:18>>*/ _i_ =
      runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
     /*<<random.ml:204:18>>*/ _g_ =
      runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
     /*<<random.ml:204:18>>*/ cst_Random_int64 = "Random.int64",
     /*<<random.ml:204:18>>*/ cst_Random_int32 = "Random.int32",
     /*<<random.ml:204:18>>*/ cst_Random_full_int = "Random.full_int",
     /*<<random.ml:204:18>>*/ cst_Random_int = "Random.int",
     /*<<random.ml:204:18>>*/ _a_ =
      runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
     /*<<random.ml:204:18>>*/ _b_ =
      runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
     /*<<random.ml:204:18>>*/ _e_ =
      runtime.caml_int64_create_lo_mi_hi(1, 0, 0),
     /*<<random.ml:204:18>>*/ _c_ =
      runtime.caml_int64_create_lo_mi_hi(0, 0, 0),
     /*<<random.ml:204:18>>*/ _d_ =
      runtime.caml_int64_create_lo_mi_hi(2, 0, 0);
   function create(param){
     /*<<random.ml:31:4>>*/ return  /*<<random.ml:31:4>>*/ caml_call3
            (Stdlib_Bigarray[19][1], 7, 0, 4);
    /*<<random.ml:31:34>>*/ }
   function set(s, i1, i2, i3, i4){
     /*<<random.ml:34:4>>*/  /*<<random.ml:34:4>>*/ caml_ba_set_1
     (s, 0,  /*<<random.ml:34:26>>*/ runtime.caml_int64_or(i1, _a_));
     /*<<random.ml:35:4>>*/  /*<<random.ml:35:4>>*/ caml_ba_set_1(s, 1, i2);
     /*<<random.ml:36:30>>*/  /*<<random.ml:36:30>>*/ var
     i3$0 =  /*<<random.ml:36:30>>*/ caml_notequal(i3, _b_) ? i3 : _e_;
     /*<<random.ml:36:4>>*/  /*<<random.ml:36:4>>*/ caml_ba_set_1(s, 2, i3$0);
     /*<<random.ml:37:30>>*/  /*<<random.ml:37:30>>*/ var
     i4$0 =  /*<<random.ml:37:30>>*/ caml_notequal(i4, _c_) ? i4 : _d_;
     /*<<random.ml:37:4>>*/ return  /*<<random.ml:37:4>>*/ caml_ba_set_1
            (s, 3, i4$0);
    /*<<random.ml:37:55>>*/ }
   function mk(i1, i2, i3, i4){
     /*<<random.ml:40:12>>*/  /*<<random.ml:40:12>>*/ var s = create(0);
     /*<<random.ml:41:4>>*/ set(s, i1, i2, i3, i4);
     /*<<random.ml:41:4>>*/ return s;
    /*<<random.ml:41:24>>*/ }
   function copy(s){
     /*<<random.ml:47:13>>*/  /*<<random.ml:47:13>>*/ var s$0 = create(0);
     /*<<random.ml:47:25>>*/  /*<<random.ml:47:25>>*/ caml_ba_blit(s, s$0);
     /*<<random.ml:47:25>>*/ return s$0;
    /*<<random.ml:47:40>>*/ }
   function reinit(s, seed){
     /*<<random.ml:55:4>>*/ var
      /*<<random.ml:55:4>>*/ n = seed.length - 1,
      /*<<random.ml:56:12>>*/ b =
        /*<<random.ml:56:12>>*/ runtime.caml_create_bytes((n * 8 | 0) + 1 | 0),
      /*<<random.ml:56:12>>*/ _p_ = n - 1 | 0,
      /*<<random.ml:56:12>>*/ _o_ = 0;
     /*<<random.ml:56:12>>*/ if(_p_ >= 0){
     var i = _o_;
      /*<<random.ml:58:6>>*/ for(;;){
       /*<<random.ml:58:57>>*/  /*<<random.ml:58:57>>*/ var
       _t_ =
          /*<<random.ml:58:57>>*/ caml_int64_of_int32
          ( /*<<random.ml:58:49>>*/ runtime.caml_check_bound(seed, i)[1 + i]);
       /*<<random.ml:58:6>>*/  /*<<random.ml:58:6>>*/ caml_call3
       (Stdlib_Bytes[86], b, i * 8 | 0, _t_);
       /*<<random.ml:58:6>>*/  /*<<random.ml:58:6>>*/ var _u_ = i + 1 | 0;
       /*<<random.ml:58:6>>*/ if(_p_ !== i){var i = _u_; continue;}
      break;
     }
    }
     /*<<random.ml:60:4>>*/  /*<<random.ml:60:4>>*/ caml_bytes_set
     (b, n * 8 | 0, 1);
     /*<<random.ml:61:13>>*/  /*<<random.ml:61:13>>*/ var
     d1 =  /*<<random.ml:61:13>>*/ caml_call1(Stdlib_Digest[4], b);
     /*<<random.ml:62:4>>*/  /*<<random.ml:62:4>>*/ caml_bytes_set
     (b, n * 8 | 0, 2);
     /*<<random.ml:63:13>>*/ var
      /*<<random.ml:63:13>>*/ d2 =
        /*<<random.ml:63:13>>*/ caml_call1(Stdlib_Digest[4], b),
      /*<<random.ml:67:10>>*/ _q_ =
        /*<<random.ml:67:10>>*/ caml_call2(Stdlib_String[64], d2, 8),
      /*<<random.ml:66:10>>*/ _r_ =
        /*<<random.ml:66:10>>*/ caml_call2(Stdlib_String[64], d2, 0),
      /*<<random.ml:65:10>>*/ _s_ =
        /*<<random.ml:65:10>>*/ caml_call2(Stdlib_String[64], d1, 8);
     /*<<random.ml:64:10>>*/ return set
            (s,
              /*<<random.ml:64:10>>*/ caml_call2(Stdlib_String[64], d1, 0),
             _s_,
             _r_,
             _q_);
    /*<<random.ml:67:36>>*/ }
   function make(seed){
     /*<<random.ml:70:12>>*/  /*<<random.ml:70:12>>*/ var s = create(0);
     /*<<random.ml:70:24>>*/ reinit(s, seed);
     /*<<random.ml:70:24>>*/ return s;
    /*<<random.ml:70:40>>*/ }
   function make_self_init(param){
     /*<<random.ml:73:9>>*/ return make
            ( /*<<random.ml:73:9>>*/ caml_sys_random_seed(0));
    /*<<random.ml:73:25>>*/ }
   function bits(s){
     /*<<random.ml:77:17>>*/ return  /*<<random.ml:77:17>>*/ caml_int64_to_int32
            ( /*<<random.ml:77:17>>*/ caml_lxm_next(s))
           & 1073741823;
    /*<<random.ml:77:42>>*/ }
   function intaux(s, n){
     /*<<random.ml:81:4>>*/ for(;;){
      /*<<random.ml:81:12>>*/ var
       /*<<random.ml:81:12>>*/ r = bits(s),
       /*<<random.ml:81:12>>*/ v =  /*<<random.ml:81:12>>*/ caml_mod(r, n);
      /*<<random.ml:81:12>>*/ if(((1073741823 - n | 0) + 1 | 0) < (r - v | 0))
      continue;
      /*<<random.ml:83:55>>*/ return v;
    }
    /*<<random.ml:83:56>>*/ }
   function int$0(s, bound){
     /*<<?>>*/ if(1073741823 >= bound && 0 < bound)
      /*<<random.ml:88:9>>*/ return intaux(s, bound);
     /*<<random.ml:87:9>>*/ return  /*<<random.ml:87:9>>*/ caml_call1
            (Stdlib[1], cst_Random_int);
    /*<<random.ml:88:23>>*/ }
   function full_int(s, bound){
     /*<<random.ml:98:4>>*/ if(0 >= bound)
      /*<<random.ml:99:6>>*/ return  /*<<random.ml:99:6>>*/ caml_call1
             (Stdlib[1], cst_Random_full_int);
     /*<<random.ml:100:9>>*/ if(1073741823 >= bound)
      /*<<random.ml:103:6>>*/ return intaux(s, bound);
     /*<<random.ml:93:4>>*/ for(;;){
      /*<<random.ml:93:4>>*/ var
       /*<<random.ml:93:4>>*/ _n_ = Stdlib[19],
       /*<<random.ml:93:25>>*/ r =
         /*<<random.ml:93:25>>*/ caml_int64_to_int32
         ( /*<<random.ml:93:25>>*/ caml_lxm_next(s))
        & _n_,
       /*<<random.ml:93:25>>*/ v =  /*<<random.ml:93:25>>*/ caml_mod(r, bound);
      /*<<random.ml:93:25>>*/ if
      (((Stdlib[19] - bound | 0) + 1 | 0) < (r - v | 0))
      continue;
      /*<<random.ml:95:54>>*/ return v;
    }
    /*<<random.ml:103:20>>*/ }
   function bits32(s){
     /*<<random.ml:107:27>>*/ return  /*<<random.ml:107:27>>*/ caml_int64_to_int32
            ( /*<<random.ml:107:19>>*/ caml_lxm_next(s));
    /*<<random.ml:107:27>>*/ }
   function int32(s, bound){
     /*<<random.ml:118:7>>*/ if
     ( /*<<random.ml:118:7>>*/ caml_lessequal(bound, 0))
      /*<<random.ml:119:9>>*/ return  /*<<random.ml:119:9>>*/ caml_call1
             (Stdlib[1], cst_Random_int32);
     /*<<random.ml:111:4>>*/ for(;;){
      /*<<random.ml:111:48>>*/ var
       /*<<random.ml:111:48>>*/ r = bits32(s) >>> 1 | 0,
       /*<<random.ml:112:12>>*/ v =
         /*<<random.ml:112:12>>*/ caml_mod(r, bound);
      /*<<random.ml:113:21>>*/ if
      ( /*<<random.ml:113:21>>*/ caml_greaterthan
        (r - v | 0, (Stdlib_Int32[9] - bound | 0) + 1 | 0))
      continue;
      /*<<random.ml:115:9>>*/ return v;
    }
    /*<<random.ml:120:25>>*/ }
   function bits64(s){
     /*<<random.ml:124:4>>*/ return  /*<<random.ml:124:4>>*/ caml_lxm_next(s);
    /*<<random.ml:124:10>>*/ }
   function int64(s, bound){
     /*<<random.ml:135:7>>*/ if
     ( /*<<random.ml:135:7>>*/ caml_lessequal(bound, _g_))
      /*<<random.ml:136:9>>*/ return  /*<<random.ml:136:9>>*/ caml_call1
             (Stdlib[1], cst_Random_int64);
     /*<<random.ml:128:4>>*/ for(;;){
      /*<<random.ml:128:48>>*/ var
       /*<<random.ml:128:48>>*/ r =
         /*<<random.ml:128:48>>*/ caml_int64_shift_right_unsigne
         ( /*<<random.ml:128:38>>*/ caml_lxm_next(s), 1),
       /*<<random.ml:129:12>>*/ v =
         /*<<random.ml:129:12>>*/ runtime.caml_int64_mod(r, bound);
      /*<<random.ml:130:21>>*/ if
      ( /*<<random.ml:130:21>>*/ caml_greaterthan
        ( /*<<random.ml:130:14>>*/ caml_int64_sub(r, v),
          /*<<random.ml:130:43>>*/ runtime.caml_int64_add
          ( /*<<random.ml:130:28>>*/ caml_int64_sub(Stdlib_Int64[9], bound),
           _f_)))
      continue;
      /*<<random.ml:132:9>>*/ return v;
    }
    /*<<random.ml:137:25>>*/ }
    /*<<random.ml:143:9>>*/ var
    nativebits =
      32 === Stdlib_Nativeint[9]
       ? function
        (s){
          /*<<random.ml:142:47>>*/ return bits32(s);
         /*<<random.ml:142:47>>*/ }
       : function
        (s){
          /*<<random.ml:143:47>>*/ return  /*<<random.ml:143:47>>*/ caml_int64_to_int32
                 ( /*<<random.ml:143:37>>*/ caml_lxm_next(s));
         /*<<random.ml:143:47>>*/ },
     /*<<random.ml:143:9>>*/ nativeint =
      32 === Stdlib_Nativeint[9]
       ? function
        (s, bound){
          /*<<random.ml:148:79>>*/ return int32(s, bound);
         /*<<random.ml:148:79>>*/ }
       : function
        (s, bound){
          /*<<random.ml:149:79>>*/ return  /*<<random.ml:149:79>>*/ caml_int64_to_int32
                 (int64
                   (s,  /*<<random.ml:149:52>>*/ caml_int64_of_int32(bound)));
         /*<<random.ml:149:79>>*/ };
    /*<<random.ml:149:9>>*/ function float$0(s, bound){
     /*<<random.ml:154:4>>*/ for(;;){
      /*<<random.ml:154:12>>*/ var
       /*<<random.ml:154:12>>*/ b =  /*<<random.ml:154:12>>*/ caml_lxm_next(s),
       /*<<random.ml:155:12>>*/ n =
         /*<<random.ml:155:12>>*/ caml_int64_shift_right_unsigne(b, 11);
      /*<<random.ml:156:7>>*/ if
      ( /*<<random.ml:156:7>>*/ caml_notequal(n, _h_))
       /*<<random.ml:159:32>>*/ return  /*<<random.ml:156:20>>*/ runtime.caml_int64_to_float
              (n)
             * 1.11022302462515654e-16
             * bound;
    }
    /*<<random.ml:159:41>>*/ }
    /*<<random.ml:149:9>>*/ function bool(s){
     /*<<random.ml:162:21>>*/ return  /*<<random.ml:162:21>>*/ runtime.caml_lessthan
            ( /*<<random.ml:162:15>>*/ caml_lxm_next(s), _i_);
    /*<<random.ml:162:26>>*/ }
    /*<<random.ml:149:9>>*/ function split(s){
     /*<<random.ml:166:13>>*/ var
      /*<<random.ml:166:13>>*/ i1 =  /*<<random.ml:166:13>>*/ caml_lxm_next(s),
      /*<<random.ml:166:34>>*/ i2 =  /*<<random.ml:166:34>>*/ caml_lxm_next(s),
      /*<<random.ml:167:13>>*/ i3 =  /*<<random.ml:167:13>>*/ caml_lxm_next(s),
      /*<<random.ml:167:34>>*/ i4 =  /*<<random.ml:167:34>>*/ caml_lxm_next(s);
     /*<<random.ml:167:34>>*/ return mk(i1, i2, i3, i4);
    /*<<random.ml:168:18>>*/ }
    /*<<random.ml:149:9>>*/ function mk_default(param){
     /*<<random.ml:173:2>>*/ return mk(_m_, _l_, _k_, _j_);
    /*<<random.ml:176:31>>*/ }
    /*<<random.ml:179:2>>*/  /*<<random.ml:179:2>>*/ var
    random_key =
       /*<<random.ml:179:2>>*/ caml_call2
       (Stdlib_Domain[10][1], [0, split], mk_default);
    /*<<random.ml:179:2>>*/ function bits$0(param){
     /*<<random.ml:181:25>>*/ return bits
            ( /*<<random.ml:181:25>>*/ caml_call1
              (Stdlib_Domain[10][2], random_key));
    /*<<random.ml:181:52>>*/ }
    /*<<random.ml:179:2>>*/ function int$1(bound){
     /*<<random.ml:182:26>>*/ return int$0
            ( /*<<random.ml:182:26>>*/ caml_call1
              (Stdlib_Domain[10][2], random_key),
             bound);
    /*<<random.ml:182:59>>*/ }
    /*<<random.ml:179:2>>*/ function full_int$0(bound){
     /*<<random.ml:183:36>>*/ return full_int
            ( /*<<random.ml:183:36>>*/ caml_call1
              (Stdlib_Domain[10][2], random_key),
             bound);
    /*<<random.ml:183:69>>*/ }
    /*<<random.ml:179:2>>*/ function int32$0(bound){
     /*<<random.ml:184:30>>*/ return int32
            ( /*<<random.ml:184:30>>*/ caml_call1
              (Stdlib_Domain[10][2], random_key),
             bound);
    /*<<random.ml:184:63>>*/ }
    /*<<random.ml:179:2>>*/ function nativeint$0(bound){
     /*<<random.ml:185:38>>*/ return nativeint
            ( /*<<random.ml:185:38>>*/ caml_call1
              (Stdlib_Domain[10][2], random_key),
             bound);
    /*<<random.ml:185:71>>*/ }
    /*<<random.ml:179:2>>*/ function int64$0(bound){
     /*<<random.ml:186:30>>*/ return int64
            ( /*<<random.ml:186:30>>*/ caml_call1
              (Stdlib_Domain[10][2], random_key),
             bound);
    /*<<random.ml:186:63>>*/ }
    /*<<random.ml:179:2>>*/ function float$1(scale){
     /*<<random.ml:187:30>>*/ return float$0
            ( /*<<random.ml:187:30>>*/ caml_call1
              (Stdlib_Domain[10][2], random_key),
             scale);
    /*<<random.ml:187:63>>*/ }
    /*<<random.ml:179:2>>*/ function bool$0(param){
     /*<<random.ml:188:25>>*/ return bool
            ( /*<<random.ml:188:25>>*/ caml_call1
              (Stdlib_Domain[10][2], random_key));
    /*<<random.ml:188:52>>*/ }
    /*<<random.ml:179:2>>*/ function bits32$0(param){
     /*<<random.ml:189:29>>*/ return bits32
            ( /*<<random.ml:189:29>>*/ caml_call1
              (Stdlib_Domain[10][2], random_key));
    /*<<random.ml:189:56>>*/ }
    /*<<random.ml:179:2>>*/ function bits64$0(param){
     /*<<random.ml:190:29>>*/ return  /*<<random.ml:190:29>>*/ caml_lxm_next
            ( /*<<random.ml:190:29>>*/ caml_call1
              (Stdlib_Domain[10][2], random_key));
    /*<<random.ml:190:56>>*/ }
    /*<<random.ml:179:2>>*/ function nativebits$0(param){
     /*<<random.ml:191:37>>*/ return nativebits
            ( /*<<random.ml:191:37>>*/ caml_call1
              (Stdlib_Domain[10][2], random_key));
    /*<<random.ml:191:64>>*/ }
    /*<<random.ml:179:2>>*/ function full_init(seed){
     /*<<random.ml:193:34>>*/ return reinit
            ( /*<<random.ml:193:34>>*/ caml_call1
              (Stdlib_Domain[10][2], random_key),
             seed);
    /*<<random.ml:193:66>>*/ }
    /*<<random.ml:179:2>>*/ function init(seed){
     /*<<random.ml:194:16>>*/ return full_init([0, seed]);
    /*<<random.ml:194:36>>*/ }
    /*<<random.ml:179:2>>*/ function self_init(param){
     /*<<random.ml:195:29>>*/ return full_init
            ( /*<<random.ml:195:29>>*/ caml_sys_random_seed(0));
    /*<<random.ml:195:44>>*/ }
    /*<<random.ml:179:2>>*/ function split$0(param){
     /*<<random.ml:199:27>>*/ return split
            ( /*<<random.ml:199:27>>*/ caml_call1
              (Stdlib_Domain[10][2], random_key));
    /*<<random.ml:199:54>>*/ }
    /*<<random.ml:179:2>>*/ function get_state(param){
     /*<<random.ml:203:30>>*/ return copy
            ( /*<<random.ml:203:30>>*/ caml_call1
              (Stdlib_Domain[10][2], random_key));
    /*<<random.ml:203:57>>*/ }
    /*<<random.ml:179:2>>*/ function set_state(s){
     /*<<random.ml:204:31>>*/ return  /*<<random.ml:204:31>>*/ caml_ba_blit
            (s,
              /*<<random.ml:204:31>>*/ caml_call1
              (Stdlib_Domain[10][2], random_key));
    /*<<random.ml:204:60>>*/ }
    /*<<random.ml:179:2>>*/  /*<<random.ml:179:2>>*/ var
    Stdlib_Random =
      [0,
       init,
       full_init,
       self_init,
       bits$0,
       int$1,
       full_int$0,
       int32$0,
       nativeint$0,
       int64$0,
       float$1,
       bool$0,
       bits32$0,
       bits64$0,
       nativebits$0,
       [0,
        make,
        make_self_init,
        copy,
        bits,
        int$0,
        full_int,
        int32,
        nativeint,
        int64,
        float$0,
        bool,
        bits32,
        bits64,
        nativebits,
        split],
       get_state,
       set_state,
       split$0];
    /*<<random.ml:179:2>>*/  /*<<random.ml:179:2>>*/ runtime.caml_register_global
    (29, Stdlib_Random, "Stdlib__Random");
    /*<<random.ml:179:2>>*/ return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Hashtbl
//# unitInfo: Requires: Assert_failure, Stdlib, Stdlib__Array, Stdlib__Atomic, Stdlib__Domain, Stdlib__Int, Stdlib__Random, Stdlib__Seq, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_compare = runtime.caml_compare,
    caml_hash = runtime.caml_hash,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_sys_getenv = runtime.caml_sys_getenv,
    caml_wrap_exception = runtime.caml_wrap_exception;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<?>>*/ function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    cst = "",
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib = global_data.Stdlib,
    Stdlib_Atomic = global_data.Stdlib__Atomic,
    Stdlib_Domain = global_data.Stdlib__Domain,
    Stdlib_Random = global_data.Stdlib__Random,
    Stdlib_Seq = global_data.Stdlib__Seq,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Array = global_data.Stdlib__Array;
   global_data.Assert_failure;
   var
    Stdlib_String = global_data.Stdlib__String,
    cst_Hashtbl_unsupported_hash_t = "Hashtbl: unsupported hash table format",
    _d_ = [0, 0];
   function ongoing_traversal(h){
     /*<<hashtbl.ml:41:2>>*/ var
      /*<<hashtbl.ml:41:2>>*/ _aC_ = h.length - 1 < 4 ? 1 : 0,
      /*<<hashtbl.ml:41:2>>*/ _aD_ = _aC_ || (h[4] < 0 ? 1 : 0);
    return _aD_;
    /*<<hashtbl.ml:42:23>>*/ }
   function flip_ongoing_traversal(h){
     /*<<hashtbl.ml:45:2>>*/ h[4] = - h[4] | 0;
     /*<<hashtbl.ml:45:2>>*/ return 0;
    /*<<hashtbl.ml:45:36>>*/ }
   try{
     /*<<hashtbl.ml:51:8>>*/ var
      /*<<hashtbl.ml:51:8>>*/ _f_ =
        /*<<hashtbl.ml:51:8>>*/ caml_sys_getenv("OCAMLRUNPARAM"),
     params = _f_;
   }
   catch(_aA_){
    var _a_ = caml_wrap_exception(_aA_);
    if(_a_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_a_, 0);
    try{
      /*<<hashtbl.ml:52:8>>*/ var
       /*<<hashtbl.ml:52:8>>*/ _e_ =
         /*<<hashtbl.ml:52:8>>*/ caml_sys_getenv("CAMLRUNPARAM"),
      _c_ = _e_;
    }
    catch(_aB_){
     var _b_ = caml_wrap_exception(_aB_);
     if(_b_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_b_, 0);
     var _c_ = cst;
    }
    var params = _c_;
   }
    /*<<hashtbl.ml:53:2>>*/ var
     /*<<hashtbl.ml:53:2>>*/ randomized_default =
       /*<<hashtbl.ml:53:2>>*/ caml_call2(Stdlib_String[14], params, 82),
     /*<<hashtbl.ml:55:17>>*/ randomized =
       /*<<hashtbl.ml:55:17>>*/ caml_call1
       (Stdlib_Atomic[1], randomized_default);
    /*<<hashtbl.ml:55:17>>*/ function randomize(param){
     /*<<hashtbl.ml:57:19>>*/ return  /*<<hashtbl.ml:57:19>>*/ caml_call2
            (Stdlib_Atomic[3], randomized, 1);
    /*<<hashtbl.ml:57:45>>*/ }
    /*<<hashtbl.ml:55:17>>*/ function is_randomized(param){
     /*<<hashtbl.ml:58:23>>*/ return  /*<<hashtbl.ml:58:23>>*/ caml_call1
            (Stdlib_Atomic[2], randomized);
    /*<<hashtbl.ml:58:44>>*/ }
    /*<<hashtbl.ml:60:15>>*/  /*<<hashtbl.ml:60:15>>*/ var
    prng_key =
       /*<<hashtbl.ml:60:15>>*/ caml_call2
       (Stdlib_Domain[10][1], 0, Stdlib_Random[15][2]);
    /*<<hashtbl.ml:60:15>>*/ function power_2_above(x, n){
    var x$0 = x;
     /*<<hashtbl.ml:69:2>>*/ for(;;){
      /*<<hashtbl.ml:69:2>>*/ if(n <= x$0)
       /*<<hashtbl.ml:69:17>>*/ return x$0;
      /*<<hashtbl.ml:70:7>>*/ if(Stdlib_Sys[13] < (x$0 * 2 | 0))
       /*<<hashtbl.ml:70:44>>*/ return x$0;
      /*<<hashtbl.ml:71:7>>*/ var
       /*<<hashtbl.ml:71:7>>*/ x$1 = x$0 * 2 | 0,
      x$0 = x$1;
    }
    /*<<hashtbl.ml:71:30>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function create(opt, initial_size){
     /*<<hashtbl.ml:74:2>>*/ if(opt)
      /*<<hashtbl.ml:73:22>>*/ var
       /*<<hashtbl.ml:73:22>>*/ sth = opt[1],
      random = sth;
    else
     var
      random =
         /*<<hashtbl.ml:73:22>>*/ caml_call1(Stdlib_Atomic[2], randomized);
     /*<<hashtbl.ml:74:10>>*/  /*<<hashtbl.ml:74:10>>*/ var
     s = power_2_above(16, initial_size);
     /*<<hashtbl.ml:74:10>>*/ if(random)
      /*<<hashtbl.ml:76:37>>*/ var
       /*<<hashtbl.ml:76:37>>*/ _az_ =
         /*<<hashtbl.ml:76:37>>*/ caml_call1(Stdlib_Domain[10][2], prng_key),
      seed =  /*<<hashtbl.ml:76:19>>*/ caml_call1(Stdlib_Random[15][4], _az_);
    else
     var seed = 0;
     /*<<hashtbl.ml:78:52>>*/ return [0,
            0,
             /*<<hashtbl.ml:78:52>>*/ caml_make_vect(s, 0),
            seed,
            s];
    /*<<hashtbl.ml:78:72>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function clear(h){
     /*<<hashtbl.ml:81:2>>*/  /*<<hashtbl.ml:81:2>>*/ var
     _ay_ = 0 < h[1] ? 1 : 0;
     /*<<hashtbl.ml:81:2>>*/ return _ay_
            ? (h
               [1]
              = 0,
               /*<<hashtbl.ml:81:21>>*/ caml_call4
               (Stdlib_Array[7], h[2], 0, h[2].length - 1, 0))
            : _ay_;
    /*<<hashtbl.ml:84:5>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function reset(h){
     /*<<hashtbl.ml:87:2>>*/  /*<<hashtbl.ml:87:2>>*/ var
     len = h[2].length - 1;
     /*<<hashtbl.ml:89:13>>*/ if
     (4 <= h.length - 1
      && len !==  /*<<hashtbl.ml:89:13>>*/ caml_call1(Stdlib[18], h[4])){
      /*<<hashtbl.ml:91:7>>*/ h[1] = 0;
      /*<<hashtbl.ml:93:45>>*/ h[2] =
       /*<<hashtbl.ml:93:45>>*/ caml_make_vect
       ( /*<<hashtbl.ml:93:25>>*/ caml_call1(Stdlib[18], h[4]), 0);
      /*<<hashtbl.ml:93:45>>*/ return 0;
    }
     /*<<hashtbl.ml:90:4>>*/ return clear(h);
    /*<<hashtbl.ml:94:5>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function copy_bucketlist(param){
     /*<<hashtbl.ml:96:22>>*/ if(! param)  /*<<hashtbl.ml:97:13>>*/ return 0;
    var
     key = param[1],
     data = param[2],
     next = param[3],
     prec$1 = [0, key, data, next],
     prec = prec$1,
     param$0 = next;
    for(;;){
     if(! param$0) return prec$1;
     var
      key$0 = param$0[1],
      data$0 = param$0[2],
      next$0 = param$0[3],
      prec$0 = [0, key$0, data$0, next$0];
      /*<<hashtbl.ml:105:28>>*/ prec[3] = prec$0;
     var prec = prec$0, param$0 = next$0;
    }
    /*<<hashtbl.ml:111:7>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function copy(init){
     /*<<hashtbl.ml:113:13>>*/ var
      /*<<hashtbl.ml:113:13>>*/ _av_ = init[4],
      /*<<hashtbl.ml:113:13>>*/ _aw_ = init[3],
      /*<<hashtbl.ml:113:29>>*/ _ax_ =
        /*<<hashtbl.ml:113:29>>*/ caml_call2
        (Stdlib_Array[13], copy_bucketlist, init[2]);
     /*<<hashtbl.ml:113:29>>*/ return [0, init[1], _ax_, _aw_, _av_];
    /*<<hashtbl.ml:113:63>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function length(h){
     /*<<hashtbl.ml:115:15>>*/ return h[1];
    /*<<hashtbl.ml:115:21>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function insert_all_buckets
   (indexfun, inplace, odata, ndata){
     /*<<hashtbl.ml:118:2>>*/ var
      /*<<hashtbl.ml:118:2>>*/ nsize = ndata.length - 1,
      /*<<hashtbl.ml:119:19>>*/ ndata_tail =
        /*<<hashtbl.ml:119:19>>*/ caml_make_vect(nsize, 0),
      /*<<hashtbl.ml:119:19>>*/ _ap_ = odata.length - 1 - 1 | 0,
      /*<<hashtbl.ml:119:19>>*/ _ao_ = 0;
     /*<<hashtbl.ml:119:19>>*/ if(_ap_ >= 0){
     var i$0 = _ao_;
     a:
      /*<<hashtbl.ml:136:4>>*/ for(;;){
       /*<<hashtbl.ml:136:18>>*/ var
        /*<<hashtbl.ml:136:18>>*/ cell$1 =
          /*<<hashtbl.ml:136:18>>*/ caml_check_bound(odata, i$0)[1 + i$0],
       cell = cell$1;
       /*<<hashtbl.ml:120:26>>*/ for(;;){
        /*<<hashtbl.ml:120:26>>*/ if(cell){
         /*<<hashtbl.ml:127:19>>*/ var
         key = cell[1],
         data = cell[2],
         next = cell[3],
         cell$0 = inplace ? cell : [0, key, data, 0],
          /*<<hashtbl.ml:127:19>>*/ nidx =
            /*<<hashtbl.ml:127:19>>*/ caml_call1(indexfun, key),
          /*<<hashtbl.ml:128:20>>*/ match =
            /*<<hashtbl.ml:128:20>>*/ caml_check_bound(ndata_tail, nidx)
            [1 + nidx];
         /*<<hashtbl.ml:128:20>>*/ if(match)
          /*<<hashtbl.ml:130:23>>*/ match[3] = cell$0;
        else
          /*<<hashtbl.ml:129:19>>*/  /*<<hashtbl.ml:129:19>>*/ caml_check_bound
           (ndata, nidx)
          [1 + nidx]
         = cell$0;
         /*<<hashtbl.ml:132:8>>*/  /*<<hashtbl.ml:132:8>>*/ caml_check_bound
          (ndata_tail, nidx)
         [1 + nidx]
        = cell$0;
        var cell = next;
        continue;
       }
       var _au_ = i$0 + 1 | 0;
       if(_ap_ !== i$0){var i$0 = _au_; continue a;}
       break;
      }
      break;
     }
    }
     /*<<hashtbl.ml:138:2>>*/ if(inplace){
      /*<<hashtbl.ml:139:4>>*/ var
       /*<<hashtbl.ml:139:4>>*/ _ar_ = nsize - 1 | 0,
       /*<<hashtbl.ml:139:4>>*/ _aq_ = 0;
      /*<<hashtbl.ml:139:4>>*/ if(_ar_ >= 0){
      var i = _aq_;
       /*<<hashtbl.ml:140:6>>*/ for(;;){
        /*<<hashtbl.ml:140:12>>*/  /*<<hashtbl.ml:140:12>>*/ var
        match$0 =
           /*<<hashtbl.ml:140:12>>*/ caml_check_bound(ndata_tail, i)[1 + i];
        /*<<hashtbl.ml:140:12>>*/ if(match$0)
         /*<<hashtbl.ml:142:21>>*/ match$0[3] = 0;
       var _at_ = i + 1 | 0;
       if(_ar_ !== i){var i = _at_; continue;}
       break;
      }
     }
     var _as_ = 0;
    }
    else
     var _as_ = inplace;
     /*<<hashtbl.ml:115:15>>*/ return _as_;
    /*<<hashtbl.ml:143:8>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function resize(indexfun, h){
     /*<<hashtbl.ml:146:2>>*/ var
      /*<<hashtbl.ml:146:2>>*/ odata = h[2],
      /*<<hashtbl.ml:146:2>>*/ osize = odata.length - 1,
      /*<<hashtbl.ml:146:2>>*/ nsize = osize * 2 | 0,
      /*<<hashtbl.ml:146:2>>*/ _an_ = nsize < Stdlib_Sys[13] ? 1 : 0;
     /*<<hashtbl.ml:146:2>>*/ if(! _an_)
      /*<<hashtbl.ml:120:26>>*/ return _an_;
     /*<<hashtbl.ml:150:16>>*/ var
      /*<<hashtbl.ml:150:16>>*/ ndata =
        /*<<hashtbl.ml:150:16>>*/ caml_make_vect(nsize, 0),
      /*<<hashtbl.ml:151:22>>*/ inplace = 1 - ongoing_traversal(h);
     /*<<hashtbl.ml:151:22>>*/ h[2] = ndata;
     /*<<hashtbl.ml:153:23>>*/ return insert_all_buckets
            ( /*<<hashtbl.ml:153:23>>*/ caml_call1(indexfun, h),
             inplace,
             odata,
             ndata);
    /*<<hashtbl.ml:154:5>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function iter(f, h){
     /*<<hashtbl.ml:162:17>>*/  /*<<hashtbl.ml:162:17>>*/ var
     old_trav = ongoing_traversal(h);
     /*<<hashtbl.ml:162:17>>*/ if(1 - old_trav)
      /*<<hashtbl.ml:163:23>>*/ flip_ongoing_traversal(h);
    try{
      /*<<hashtbl.ml:166:4>>*/ var
       /*<<hashtbl.ml:166:4>>*/ d = h[2],
       /*<<hashtbl.ml:166:4>>*/ _aj_ = d.length - 1 - 1 | 0,
       /*<<hashtbl.ml:166:4>>*/ _ai_ = 0;
      /*<<hashtbl.ml:166:4>>*/ if(_aj_ >= 0){
      var i = _ai_;
      a:
       /*<<hashtbl.ml:167:6>>*/ for(;;){
       var param =  /*<<hashtbl.ml:167:16>>*/ caml_check_bound(d, i)[1 + i];
        /*<<hashtbl.ml:157:22>>*/ for(;;){
         /*<<hashtbl.ml:157:22>>*/ if(param){
         var key = param[1], data = param[2], next = param[3];
          /*<<hashtbl.ml:161:8>>*/  /*<<hashtbl.ml:161:8>>*/ caml_call2
          (f, key, data);
         var param = next;
         continue;
        }
        var _am_ = i + 1 | 0;
        if(_aj_ !== i){var i = _am_; continue a;}
        break;
       }
       break;
      }
     }
      /*<<hashtbl.ml:169:4>>*/ var
       /*<<hashtbl.ml:169:4>>*/ _ak_ = 1 - old_trav,
       /*<<hashtbl.ml:169:4>>*/ _al_ = _ak_ ? flip_ongoing_traversal(h) : _ak_;
      /*<<hashtbl.ml:170:16>>*/ return _al_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
      /*<<hashtbl.ml:170:16>>*/ if(old_trav)
      throw caml_maybe_attach_backtrace(exn, 0);
      /*<<hashtbl.ml:171:4>>*/ flip_ongoing_traversal(h);
      /*<<hashtbl.ml:171:4>>*/ throw  /*<<hashtbl.ml:171:4>>*/ caml_maybe_attach_backtrace
            (exn, 0);
    }
    /*<<hashtbl.ml:172:13>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function filter_map_inplace(f, h){
     /*<<hashtbl.ml:195:2>>*/ var
      /*<<hashtbl.ml:195:2>>*/ d = h[2],
      /*<<hashtbl.ml:196:17>>*/ old_trav = ongoing_traversal(h);
     /*<<hashtbl.ml:196:17>>*/ if(1 - old_trav)
      /*<<hashtbl.ml:197:23>>*/ flip_ongoing_traversal(h);
    try{
     var _ae_ = d.length - 1 - 1 | 0, _ad_ = 0;
     if(_ae_ >= 0){
      var i = _ad_;
      a:
       /*<<hashtbl.ml:200:6>>*/ for(;;){
        /*<<hashtbl.ml:200:44>>*/ var
         /*<<hashtbl.ml:200:44>>*/ slot$0 =
           /*<<hashtbl.ml:200:44>>*/ caml_check_bound(h[2], i)[1 + i],
        prec = 0,
        slot = slot$0;
       for(;;){
        if(slot){
          /*<<hashtbl.ml:181:18>>*/ var
          key = slot[1],
          data = slot[2],
          next = slot[3],
           /*<<hashtbl.ml:181:18>>*/ match =
             /*<<hashtbl.ml:181:18>>*/ caml_call2(f, key, data);
          /*<<hashtbl.ml:181:18>>*/ if(! match){
           /*<<hashtbl.ml:183:10>>*/ h[1] = h[1] - 1 | 0;
          var slot = next;
          continue;
         }
         var data$0 = match[1];
         if(prec)
          prec[3] = slot;
         else
           /*<<hashtbl.ml:187:21>>*/  /*<<hashtbl.ml:187:21>>*/ caml_check_bound
            (h[2], i)
           [1 + i]
          = slot;
          /*<<hashtbl.ml:187:39>>*/ slot[2] = data$0;
         var prec = slot, slot = next;
         continue;
        }
         /*<<hashtbl.ml:176:6>>*/ if(prec)
          /*<<hashtbl.ml:178:18>>*/ prec[3] = 0;
        else
          /*<<hashtbl.ml:177:17>>*/  /*<<hashtbl.ml:177:17>>*/ caml_check_bound
           (h[2], i)
          [1 + i]
         = 0;
        var _ah_ = i + 1 | 0;
        if(_ae_ !== i){var i = _ah_; continue a;}
        break;
       }
       break;
      }
     }
      /*<<hashtbl.ml:202:4>>*/ var
       /*<<hashtbl.ml:202:4>>*/ _af_ = 1 - old_trav,
       /*<<hashtbl.ml:202:4>>*/ _ag_ = _af_ ? flip_ongoing_traversal(h) : _af_;
      /*<<hashtbl.ml:203:16>>*/ return _ag_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
      /*<<hashtbl.ml:203:16>>*/ if(old_trav)
       /*<<hashtbl.ml:157:22>>*/ throw  /*<<hashtbl.ml:157:22>>*/ caml_maybe_attach_backtrace
             (exn, 0);
      /*<<hashtbl.ml:204:4>>*/ flip_ongoing_traversal(h);
      /*<<hashtbl.ml:204:4>>*/ throw  /*<<hashtbl.ml:204:4>>*/ caml_maybe_attach_backtrace
            (exn, 0);
    }
    /*<<hashtbl.ml:205:13>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function fold(f, h, init){
     /*<<hashtbl.ml:214:17>>*/  /*<<hashtbl.ml:214:17>>*/ var
     old_trav = ongoing_traversal(h);
     /*<<hashtbl.ml:214:17>>*/ if(1 - old_trav)
      /*<<hashtbl.ml:215:23>>*/ flip_ongoing_traversal(h);
    try{
     var d = h[2], accu$1 = [0, init], _aa_ = d.length - 1 - 1 | 0, _$_ = 0;
     if(_aa_ >= 0){
      var i = _$_;
      a:
       /*<<hashtbl.ml:220:6>>*/ for(;;){
        /*<<hashtbl.ml:220:6>>*/ var
         /*<<hashtbl.ml:220:6>>*/ accu$2 = accu$1[1],
         /*<<hashtbl.ml:220:24>>*/ b$0 =
           /*<<hashtbl.ml:220:24>>*/ caml_check_bound(d, i)[1 + i],
        b = b$0,
        accu = accu$2;
        /*<<hashtbl.ml:209:4>>*/ for(;;){
         /*<<hashtbl.ml:209:4>>*/ if(b){
          /*<<hashtbl.ml:213:23>>*/ var
          key = b[1],
          data = b[2],
          next = b[3],
           /*<<hashtbl.ml:213:23>>*/ accu$0 =
             /*<<hashtbl.ml:213:23>>*/ caml_call3(f, key, data, accu),
          b = next,
          accu = accu$0;
         continue;
        }
        accu$1[1] = accu;
        var _ac_ = i + 1 | 0;
        if(_aa_ !== i){var i = _ac_; continue a;}
        break;
       }
       break;
      }
     }
      /*<<hashtbl.ml:222:4>>*/ if(1 - old_trav)
       /*<<hashtbl.ml:222:25>>*/ flip_ongoing_traversal(h);
      /*<<hashtbl.ml:222:49>>*/  /*<<hashtbl.ml:222:49>>*/ var
      _ab_ = accu$1[1];
      /*<<hashtbl.ml:224:16>>*/ return _ab_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
      /*<<hashtbl.ml:224:16>>*/ if(old_trav)
      throw caml_maybe_attach_backtrace(exn, 0);
      /*<<hashtbl.ml:225:4>>*/ flip_ongoing_traversal(h);
      /*<<hashtbl.ml:225:4>>*/ throw  /*<<hashtbl.ml:225:4>>*/ caml_maybe_attach_backtrace
            (exn, 0);
    }
    /*<<hashtbl.ml:226:13>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function bucket_length(accu, param){
    var accu$0 = accu, param$0 = param;
    for(;;){
     if(! param$0)  /*<<hashtbl.ml:236:13>>*/ return accu$0;
      /*<<hashtbl.ml:237:18>>*/ var
       /*<<hashtbl.ml:237:18>>*/ next = param$0[3],
       /*<<hashtbl.ml:237:18>>*/ accu$1 = accu$0 + 1 | 0,
      accu$0 = accu$1,
      param$0 = next;
    }
   }
    /*<<hashtbl.ml:60:15>>*/ function stats(h){
     /*<<hashtbl.ml:240:2>>*/ var
      /*<<hashtbl.ml:240:2>>*/ _U_ = h[2],
      /*<<hashtbl.ml:240:2>>*/ _V_ = 0;
     /*<<hashtbl.ml:240:2>>*/ function _W_(m, b){
      /*<<hashtbl.ml:241:42>>*/  /*<<hashtbl.ml:241:42>>*/ var
      ___ = bucket_length(0, b);
      /*<<hashtbl.ml:241:42>>*/ return  /*<<hashtbl.ml:241:42>>*/ caml_call2
             (Stdlib_Int[11], m, ___);
     /*<<hashtbl.ml:241:61>>*/ }
     /*<<hashtbl.ml:241:4>>*/ var
      /*<<hashtbl.ml:241:4>>*/ mbl =
        /*<<hashtbl.ml:241:4>>*/ caml_call3(Stdlib_Array[15], _W_, _V_, _U_),
      /*<<hashtbl.ml:242:14>>*/ histo =
        /*<<hashtbl.ml:242:14>>*/ caml_make_vect(mbl + 1 | 0, 0),
      /*<<hashtbl.ml:242:14>>*/ _X_ = h[2];
     /*<<hashtbl.ml:242:14>>*/ function _Y_(b){
      /*<<hashtbl.ml:245:14>>*/ var
       /*<<hashtbl.ml:245:14>>*/ l = bucket_length(0, b),
       /*<<hashtbl.ml:246:19>>*/ _Z_ =
         /*<<hashtbl.ml:246:19>>*/ caml_check_bound(histo, l)[1 + l] + 1 | 0;
      /*<<hashtbl.ml:246:6>>*/  /*<<hashtbl.ml:246:6>>*/ caml_check_bound
       (histo, l)
      [1 + l]
     = _Z_;
      /*<<hashtbl.ml:246:6>>*/ return 0;
     /*<<hashtbl.ml:246:32>>*/ }
     /*<<hashtbl.ml:243:2>>*/  /*<<hashtbl.ml:243:2>>*/ caml_call2
     (Stdlib_Array[11], _Y_, _X_);
     /*<<hashtbl.ml:243:2>>*/ return [0, h[1], h[2].length - 1, mbl, histo];
    /*<<hashtbl.ml:251:30>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function to_seq(tbl){
     /*<<hashtbl.ml:258:2>>*/  /*<<hashtbl.ml:258:2>>*/ var tbl_data = tbl[2];
     /*<<hashtbl.ml:258:2>>*/ function aux(i, buck, param){
     var i$0 = i, buck$0 = buck;
      /*<<hashtbl.ml:260:26>>*/ for(;;){
       /*<<hashtbl.ml:260:26>>*/ if(buck$0){
       var key = buck$0[1], data = buck$0[2], next = buck$0[3];
        /*<<hashtbl.ml:266:31>>*/ return [0,
               [0, key, data],
               function(_T_){ /*<<?>>*/ return aux(i$0, next, _T_);}];
      }
       /*<<hashtbl.ml:262:8>>*/ if(i$0 === tbl_data.length - 1)
        /*<<hashtbl.ml:263:13>>*/ return 0;
       /*<<hashtbl.ml:264:22>>*/ var
        /*<<hashtbl.ml:264:22>>*/ buck$1 =
          /*<<hashtbl.ml:264:22>>*/ caml_check_bound(tbl_data, i$0)[1 + i$0],
        /*<<hashtbl.ml:264:22>>*/ i$1 = i$0 + 1 | 0,
       i$0 = i$1,
       buck$0 = buck$1;
     }
     /*<<hashtbl.ml:266:42>>*/ }
     /*<<hashtbl.ml:258:2>>*/ var
      /*<<hashtbl.ml:258:2>>*/ _Q_ = 0,
      /*<<hashtbl.ml:258:2>>*/ _R_ = 0;
     /*<<hashtbl.ml:258:2>>*/ return function(_S_){
      /*<<?>>*/ return aux(_R_, _Q_, _S_);};
    /*<<hashtbl.ml:268:13>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function to_seq_keys(m){
     /*<<hashtbl.ml:270:32>>*/  /*<<hashtbl.ml:270:32>>*/ var _N_ = to_seq(m);
     /*<<hashtbl.ml:270:32>>*/ function _O_(_P_){ /*<<?>>*/ return _P_[1];}
     /*<<hashtbl.ml:270:32>>*/ return  /*<<hashtbl.ml:270:32>>*/ caml_call2
            (Stdlib_Seq[27], _O_, _N_);
    /*<<hashtbl.ml:270:42>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function to_seq_values(m){
     /*<<hashtbl.ml:272:34>>*/  /*<<hashtbl.ml:272:34>>*/ var _K_ = to_seq(m);
     /*<<hashtbl.ml:272:34>>*/ function _L_(_M_){ /*<<?>>*/ return _M_[2];}
     /*<<hashtbl.ml:272:34>>*/ return  /*<<hashtbl.ml:272:34>>*/ caml_call2
            (Stdlib_Seq[27], _L_, _K_);
    /*<<hashtbl.ml:272:44>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function MakeSeeded(H){
    function key_index(h, key){
      /*<<hashtbl.ml:357:6>>*/  /*<<hashtbl.ml:357:6>>*/ var
      _J_ = h[2].length - 1 - 1 | 0;
      /*<<hashtbl.ml:357:6>>*/ return  /*<<hashtbl.ml:357:6>>*/ caml_call2
             (H[2], h[3], key)
            & _J_;
     /*<<hashtbl.ml:357:63>>*/ }
    function add(h, key, data){
      /*<<hashtbl.ml:360:14>>*/ var
       /*<<hashtbl.ml:360:14>>*/ i = key_index(h, key),
       /*<<hashtbl.ml:361:40>>*/ bucket =
        [0,
         key,
         data,
          /*<<hashtbl.ml:361:40>>*/ caml_check_bound(h[2], i)[1 + i]];
      /*<<hashtbl.ml:362:6>>*/  /*<<hashtbl.ml:362:6>>*/ caml_check_bound
       (h[2], i)
      [1 + i]
     = bucket;
      /*<<hashtbl.ml:362:6>>*/ h[1] = h[1] + 1 | 0;
      /*<<hashtbl.ml:362:6>>*/  /*<<hashtbl.ml:362:6>>*/ var
      _I_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
      /*<<hashtbl.ml:362:6>>*/ return _I_ ? resize(key_index, h) : _I_;
     /*<<hashtbl.ml:364:67>>*/ }
    function remove(h, key){
      /*<<hashtbl.ml:380:14>>*/ var
       /*<<hashtbl.ml:380:14>>*/ i = key_index(h, key),
       /*<<hashtbl.ml:381:34>>*/ c =
         /*<<hashtbl.ml:381:34>>*/ caml_check_bound(h[2], i)[1 + i],
      prec$0 = 0,
      prec = c;
     for(;;){
      if(! prec)  /*<<hashtbl.ml:368:10>>*/ return 0;
      var k = prec[1], next = prec[3];
       /*<<hashtbl.ml:370:13>>*/ if
       ( /*<<hashtbl.ml:370:13>>*/ caml_call2(H[1], k, key)){
        /*<<hashtbl.ml:371:15>>*/ h[1] = h[1] - 1 | 0;
        /*<<hashtbl.ml:371:15>>*/ return prec$0
               ? (prec$0[3] = next, 0)
               : ( /*<<hashtbl.ml:374:23>>*/ caml_check_bound
                   (h[2], i)
                  [1 + i]
                 = next,
                 0);
      }
      var prec$0 = prec, prec = next;
     }
     /*<<hashtbl.ml:381:44>>*/ }
    function find(h, key){
      /*<<hashtbl.ml:390:20>>*/ var
       /*<<hashtbl.ml:390:20>>*/ _H_ = key_index(h, key),
       /*<<hashtbl.ml:390:12>>*/ match =
         /*<<hashtbl.ml:390:12>>*/ caml_check_bound(h[2], _H_)[1 + _H_];
      /*<<hashtbl.ml:390:12>>*/ if(! match)
       /*<<hashtbl.ml:391:17>>*/ throw  /*<<hashtbl.ml:391:17>>*/ caml_maybe_attach_backtrace
             (Stdlib[8], 1);
     var k1 = match[1], d1 = match[2], next1 = match[3];
      /*<<hashtbl.ml:393:13>>*/ if
      ( /*<<hashtbl.ml:393:13>>*/ caml_call2(H[1], key, k1))
       /*<<hashtbl.ml:393:33>>*/ return d1;
      /*<<hashtbl.ml:394:10>>*/ if(! next1)
       /*<<hashtbl.ml:395:21>>*/ throw  /*<<hashtbl.ml:395:21>>*/ caml_maybe_attach_backtrace
             (Stdlib[8], 1);
     var k2 = next1[1], d2 = next1[2], next2 = next1[3];
      /*<<hashtbl.ml:397:17>>*/ if
      ( /*<<hashtbl.ml:397:17>>*/ caml_call2(H[1], key, k2))
       /*<<hashtbl.ml:397:37>>*/ return d2;
      /*<<hashtbl.ml:398:14>>*/ if(! next2)
       /*<<hashtbl.ml:399:25>>*/ throw  /*<<hashtbl.ml:399:25>>*/ caml_maybe_attach_backtrace
             (Stdlib[8], 1);
     var k3 = next2[1], d3 = next2[2], next3 = next2[3];
      /*<<hashtbl.ml:401:21>>*/ if
      ( /*<<hashtbl.ml:401:21>>*/ caml_call2(H[1], key, k3))
       /*<<hashtbl.ml:401:41>>*/ return d3;
     var param = next3;
     for(;;){
      if(! param)
        /*<<hashtbl.ml:385:10>>*/ throw  /*<<hashtbl.ml:385:10>>*/ caml_maybe_attach_backtrace
              (Stdlib[8], 1);
      var k = param[1], data = param[2], next = param[3];
       /*<<hashtbl.ml:387:13>>*/ if
       ( /*<<hashtbl.ml:387:13>>*/ caml_call2(H[1], key, k))
        /*<<hashtbl.ml:387:32>>*/ return data;
      var param = next;
     }
     /*<<hashtbl.ml:401:67>>*/ }
    function find_opt(h, key){
      /*<<hashtbl.ml:410:20>>*/ var
       /*<<hashtbl.ml:410:20>>*/ _G_ = key_index(h, key),
       /*<<hashtbl.ml:410:12>>*/ match =
         /*<<hashtbl.ml:410:12>>*/ caml_check_bound(h[2], _G_)[1 + _G_];
      /*<<hashtbl.ml:410:12>>*/ if(! match)
       /*<<hashtbl.ml:411:17>>*/ return 0;
     var k1 = match[1], d1 = match[2], next1 = match[3];
      /*<<hashtbl.ml:413:13>>*/ if
      ( /*<<hashtbl.ml:413:13>>*/ caml_call2(H[1], key, k1))
       /*<<hashtbl.ml:413:33>>*/ return [0, d1];
      /*<<hashtbl.ml:414:10>>*/ if(! next1)
       /*<<hashtbl.ml:415:21>>*/ return 0;
     var k2 = next1[1], d2 = next1[2], next2 = next1[3];
      /*<<hashtbl.ml:417:17>>*/ if
      ( /*<<hashtbl.ml:417:17>>*/ caml_call2(H[1], key, k2))
       /*<<hashtbl.ml:417:37>>*/ return [0, d2];
      /*<<hashtbl.ml:418:14>>*/ if(! next2)
       /*<<hashtbl.ml:419:25>>*/ return 0;
     var k3 = next2[1], d3 = next2[2], next3 = next2[3];
      /*<<hashtbl.ml:421:21>>*/ if
      ( /*<<hashtbl.ml:421:21>>*/ caml_call2(H[1], key, k3))
       /*<<hashtbl.ml:421:41>>*/ return [0, d3];
     var param = next3;
     for(;;){
      if(! param)  /*<<hashtbl.ml:405:10>>*/ return 0;
      var k = param[1], data = param[2], next = param[3];
       /*<<hashtbl.ml:407:13>>*/ if
       ( /*<<hashtbl.ml:407:13>>*/ caml_call2(H[1], key, k))
        /*<<hashtbl.ml:407:32>>*/ return [0, data];
      var param = next;
     }
     /*<<hashtbl.ml:421:76>>*/ }
    function find_all(h, key){
      /*<<hashtbl.ml:424:6>>*/ function find_in_bucket(param){
      var param$0 = param;
       /*<<hashtbl.ml:424:31>>*/ for(;;){
        /*<<hashtbl.ml:424:31>>*/ if(! param$0)
         /*<<hashtbl.ml:426:10>>*/ return 0;
       var k = param$0[1], d = param$0[2], next = param$0[3];
        /*<<hashtbl.ml:428:13>>*/ if
        ( /*<<hashtbl.ml:428:13>>*/ caml_call2(H[1], k, key))
         /*<<hashtbl.ml:429:20>>*/ return [0, d, find_in_bucket(next)];
       var param$0 = next;
      }
      /*<<hashtbl.ml:430:34>>*/ }
      /*<<hashtbl.ml:431:29>>*/  /*<<hashtbl.ml:431:29>>*/ var
      _F_ = key_index(h, key);
      /*<<hashtbl.ml:431:21>>*/ return find_in_bucket
             ( /*<<hashtbl.ml:431:21>>*/ caml_check_bound(h[2], _F_)[1 + _F_]);
     /*<<hashtbl.ml:431:45>>*/ }
    function replace(h, key, data){
      /*<<hashtbl.ml:442:14>>*/ var
       /*<<hashtbl.ml:442:14>>*/ i = key_index(h, key),
       /*<<hashtbl.ml:443:14>>*/ l =
         /*<<hashtbl.ml:443:14>>*/ caml_check_bound(h[2], i)[1 + i],
      slot = l;
     for(;;){
      if(slot){
       var k = slot[1], next = slot[3];
        /*<<hashtbl.ml:437:13>>*/ if
        (!  /*<<hashtbl.ml:437:13>>*/ caml_call2(H[1], k, key)){var slot = next; continue;}
        /*<<hashtbl.ml:438:15>>*/ slot[1] = key;
        /*<<hashtbl.ml:438:15>>*/ slot[2] = data;
       var _C_ = 0;
      }
      else
       var _C_ = 1;
      if(_C_){
        /*<<hashtbl.ml:445:8>>*/  /*<<hashtbl.ml:445:8>>*/ caml_check_bound
         (h[2], i)
        [1 + i]
       = [0, key, data, l];
        /*<<hashtbl.ml:445:8>>*/ h[1] = h[1] + 1 | 0;
        /*<<hashtbl.ml:445:8>>*/  /*<<hashtbl.ml:445:8>>*/ var
        _D_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
        /*<<hashtbl.ml:445:8>>*/ if(_D_)
         /*<<hashtbl.ml:447:51>>*/ return resize(key_index, h);
       var _E_ = _D_;
      }
      else
       var _E_ = _C_;
       /*<<hashtbl.ml:424:31>>*/ return _E_;
     }
     /*<<hashtbl.ml:448:9>>*/ }
    function mem(h, key){
      /*<<hashtbl.ml:456:28>>*/ var
       /*<<hashtbl.ml:456:28>>*/ _B_ = key_index(h, key),
      param =  /*<<hashtbl.ml:456:20>>*/ caml_check_bound(h[2], _B_)[1 + _B_];
      /*<<hashtbl.ml:451:30>>*/ for(;;){
       /*<<hashtbl.ml:451:30>>*/ if(! param)
        /*<<hashtbl.ml:453:10>>*/ return 0;
       /*<<hashtbl.ml:455:10>>*/ var
       k = param[1],
       next = param[3],
        /*<<hashtbl.ml:455:10>>*/ _A_ =
          /*<<hashtbl.ml:455:10>>*/ caml_call2(H[1], k, key);
       /*<<hashtbl.ml:455:10>>*/ if(_A_)
        /*<<hashtbl.ml:453:10>>*/ return _A_;
      var param = next;
     }
     /*<<hashtbl.ml:456:44>>*/ }
    function add_seq(tbl, i){
      /*<<hashtbl.ml:459:6>>*/ function _z_(param){
       /*<<hashtbl.ml:459:15>>*/ var
        /*<<hashtbl.ml:459:15>>*/ v = param[2],
        /*<<hashtbl.ml:459:15>>*/ k = param[1];
       /*<<hashtbl.ml:459:15>>*/ return add(tbl, k, v);
      /*<<hashtbl.ml:459:41>>*/ }
      /*<<hashtbl.ml:459:6>>*/ return  /*<<hashtbl.ml:459:6>>*/ caml_call2
             (Stdlib_Seq[4], _z_, i);
     /*<<hashtbl.ml:459:43>>*/ }
    function replace_seq(tbl, i){
      /*<<hashtbl.ml:462:6>>*/ function _y_(param){
       /*<<hashtbl.ml:462:15>>*/ var
        /*<<hashtbl.ml:462:15>>*/ v = param[2],
        /*<<hashtbl.ml:462:15>>*/ k = param[1];
       /*<<hashtbl.ml:462:15>>*/ return replace(tbl, k, v);
      /*<<hashtbl.ml:462:45>>*/ }
      /*<<hashtbl.ml:462:6>>*/ return  /*<<hashtbl.ml:462:6>>*/ caml_call2
             (Stdlib_Seq[4], _y_, i);
     /*<<hashtbl.ml:462:47>>*/ }
    function of_seq(i){
      /*<<hashtbl.ml:465:16>>*/  /*<<hashtbl.ml:465:16>>*/ var
      tbl = create(0, 16);
      /*<<hashtbl.ml:466:6>>*/ replace_seq(tbl, i);
      /*<<hashtbl.ml:466:6>>*/ return tbl;
     /*<<hashtbl.ml:467:9>>*/ }
    return [0,
            create,
            clear,
            reset,
            copy,
            add,
            remove,
            find,
            find_opt,
            find_all,
            replace,
            mem,
            iter,
            filter_map_inplace,
            fold,
            length,
            stats,
            to_seq,
            to_seq_keys,
            to_seq_values,
            add_seq,
            replace_seq,
            of_seq];
   }
    /*<<hashtbl.ml:60:15>>*/ function Make(H){
    var equal = H[1];
    function seeded_hash(seed, x){
      /*<<hashtbl.ml:484:41>>*/ return  /*<<hashtbl.ml:484:41>>*/ caml_call1
             (H[2], x);
     /*<<hashtbl.ml:484:49>>*/ }
    var
     include = MakeSeeded([0, equal, seeded_hash]),
     clear = include[2],
     reset = include[3],
     copy = include[4],
     add = include[5],
     remove = include[6],
     find = include[7],
     find_opt = include[8],
     find_all = include[9],
     replace = include[10],
     mem = include[11],
     iter = include[12],
     filter_map_inplace = include[13],
     fold = include[14],
     length = include[15],
     stats = include[16],
     to_seq = include[17],
     to_seq_keys = include[18],
     to_seq_values = include[19],
     add_seq = include[20],
     replace_seq = include[21],
     _x_ = include[1];
    function create(sz){
      /*<<hashtbl.ml:486:20>>*/ return  /*<<hashtbl.ml:486:20>>*/ caml_call2
             (_x_, _d_, sz);
     /*<<hashtbl.ml:486:43>>*/ }
    function of_seq(i){
      /*<<hashtbl.ml:488:16>>*/  /*<<hashtbl.ml:488:16>>*/ var
      tbl = create(16);
      /*<<hashtbl.ml:489:6>>*/  /*<<hashtbl.ml:489:6>>*/ caml_call2
      (replace_seq, tbl, i);
      /*<<hashtbl.ml:489:6>>*/ return tbl;
     /*<<hashtbl.ml:490:9>>*/ }
    return [0,
            create,
            clear,
            reset,
            copy,
            add,
            remove,
            find,
            find_opt,
            find_all,
            replace,
            mem,
            iter,
            filter_map_inplace,
            fold,
            length,
            stats,
            to_seq,
            to_seq_keys,
            to_seq_values,
            add_seq,
            replace_seq,
            of_seq];
   }
    /*<<hashtbl.ml:60:15>>*/ function hash(x){
     /*<<hashtbl.ml:500:13>>*/ return  /*<<hashtbl.ml:500:13>>*/ caml_hash
            (10, 100, 0, x);
    /*<<hashtbl.ml:500:41>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function hash_param(n1, n2, x){
     /*<<hashtbl.ml:501:25>>*/ return  /*<<hashtbl.ml:501:25>>*/ caml_hash
            (n1, n2, 0, x);
    /*<<hashtbl.ml:501:52>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function seeded_hash(seed, x){
     /*<<hashtbl.ml:502:25>>*/ return  /*<<hashtbl.ml:502:25>>*/ caml_hash
            (10, 100, seed, x);
    /*<<hashtbl.ml:502:56>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function key_index(h, key){
     /*<<hashtbl.ml:505:2>>*/ return 4 <= h.length - 1
            ?  /*<<hashtbl.ml:506:7>>*/ caml_hash
              (10, 100, h[3], key)
             & (h[2].length - 1 - 1 | 0)
            :  /*<<hashtbl.ml:507:7>>*/ caml_call1
              (Stdlib[1], cst_Hashtbl_unsupported_hash_t);
    /*<<hashtbl.ml:507:59>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function add(h, key, data){
     /*<<hashtbl.ml:510:10>>*/ var
      /*<<hashtbl.ml:510:10>>*/ i = key_index(h, key),
      /*<<hashtbl.ml:511:36>>*/ bucket =
       [0,
        key,
        data,
         /*<<hashtbl.ml:511:36>>*/ caml_check_bound(h[2], i)[1 + i]];
     /*<<hashtbl.ml:512:2>>*/  /*<<hashtbl.ml:512:2>>*/ caml_check_bound
      (h[2], i)
     [1 + i]
    = bucket;
     /*<<hashtbl.ml:512:2>>*/ h[1] = h[1] + 1 | 0;
     /*<<hashtbl.ml:512:2>>*/  /*<<hashtbl.ml:512:2>>*/ var
     _w_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
     /*<<hashtbl.ml:512:2>>*/ return _w_ ? resize(key_index, h) : _w_;
    /*<<hashtbl.ml:514:63>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function remove(h, key){
     /*<<hashtbl.ml:530:10>>*/ var
      /*<<hashtbl.ml:530:10>>*/ i = key_index(h, key),
      /*<<hashtbl.ml:531:30>>*/ c =
        /*<<hashtbl.ml:531:30>>*/ caml_check_bound(h[2], i)[1 + i],
     prec$0 = 0,
     prec = c;
    for(;;){
     if(! prec)  /*<<hashtbl.ml:518:6>>*/ return 0;
     var k = prec[1], next = prec[3];
      /*<<hashtbl.ml:520:9>>*/ if
      (0 ===  /*<<hashtbl.ml:520:9>>*/ caml_compare(k, key)){
       /*<<hashtbl.ml:521:11>>*/ h[1] = h[1] - 1 | 0;
       /*<<hashtbl.ml:521:11>>*/ return prec$0
              ? (prec$0[3] = next, 0)
              : ( /*<<hashtbl.ml:524:19>>*/ caml_check_bound
                  (h[2], i)
                 [1 + i]
                = next,
                0);
     }
     var prec$0 = prec, prec = next;
    }
    /*<<hashtbl.ml:531:40>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function find(h, key){
     /*<<hashtbl.ml:540:16>>*/ var
      /*<<hashtbl.ml:540:16>>*/ _v_ = key_index(h, key),
      /*<<hashtbl.ml:540:8>>*/ match =
        /*<<hashtbl.ml:540:8>>*/ caml_check_bound(h[2], _v_)[1 + _v_];
     /*<<hashtbl.ml:540:8>>*/ if(! match)
      /*<<hashtbl.ml:541:13>>*/ throw  /*<<hashtbl.ml:541:13>>*/ caml_maybe_attach_backtrace
            (Stdlib[8], 1);
    var k1 = match[1], d1 = match[2], next1 = match[3];
     /*<<hashtbl.ml:543:9>>*/ if
     (0 ===  /*<<hashtbl.ml:543:9>>*/ caml_compare(key, k1))
      /*<<hashtbl.ml:543:33>>*/ return d1;
     /*<<hashtbl.ml:544:6>>*/ if(! next1)
      /*<<hashtbl.ml:545:17>>*/ throw  /*<<hashtbl.ml:545:17>>*/ caml_maybe_attach_backtrace
            (Stdlib[8], 1);
    var k2 = next1[1], d2 = next1[2], next2 = next1[3];
     /*<<hashtbl.ml:547:13>>*/ if
     (0 ===  /*<<hashtbl.ml:547:13>>*/ caml_compare(key, k2))
      /*<<hashtbl.ml:547:37>>*/ return d2;
     /*<<hashtbl.ml:548:10>>*/ if(! next2)
      /*<<hashtbl.ml:549:21>>*/ throw  /*<<hashtbl.ml:549:21>>*/ caml_maybe_attach_backtrace
            (Stdlib[8], 1);
    var k3 = next2[1], d3 = next2[2], next3 = next2[3];
     /*<<hashtbl.ml:551:17>>*/ if
     (0 ===  /*<<hashtbl.ml:551:17>>*/ caml_compare(key, k3))
      /*<<hashtbl.ml:551:41>>*/ return d3;
    var param = next3;
    for(;;){
     if(! param)
       /*<<hashtbl.ml:535:6>>*/ throw  /*<<hashtbl.ml:535:6>>*/ caml_maybe_attach_backtrace
             (Stdlib[8], 1);
     var k = param[1], data = param[2], next = param[3];
      /*<<hashtbl.ml:537:9>>*/ if
      (0 ===  /*<<hashtbl.ml:537:9>>*/ caml_compare(key, k))
       /*<<hashtbl.ml:537:32>>*/ return data;
     var param = next;
    }
    /*<<hashtbl.ml:551:67>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function find_opt(h, key){
     /*<<hashtbl.ml:560:16>>*/ var
      /*<<hashtbl.ml:560:16>>*/ _u_ = key_index(h, key),
      /*<<hashtbl.ml:560:8>>*/ match =
        /*<<hashtbl.ml:560:8>>*/ caml_check_bound(h[2], _u_)[1 + _u_];
     /*<<hashtbl.ml:560:8>>*/ if(! match)  /*<<hashtbl.ml:561:13>>*/ return 0;
    var k1 = match[1], d1 = match[2], next1 = match[3];
     /*<<hashtbl.ml:563:9>>*/ if
     (0 ===  /*<<hashtbl.ml:563:9>>*/ caml_compare(key, k1))
      /*<<hashtbl.ml:563:33>>*/ return [0, d1];
     /*<<hashtbl.ml:564:6>>*/ if(! next1)  /*<<hashtbl.ml:565:17>>*/ return 0;
    var k2 = next1[1], d2 = next1[2], next2 = next1[3];
     /*<<hashtbl.ml:567:13>>*/ if
     (0 ===  /*<<hashtbl.ml:567:13>>*/ caml_compare(key, k2))
      /*<<hashtbl.ml:567:37>>*/ return [0, d2];
     /*<<hashtbl.ml:568:10>>*/ if(! next2)
      /*<<hashtbl.ml:569:21>>*/ return 0;
    var k3 = next2[1], d3 = next2[2], next3 = next2[3];
     /*<<hashtbl.ml:571:17>>*/ if
     (0 ===  /*<<hashtbl.ml:571:17>>*/ caml_compare(key, k3))
      /*<<hashtbl.ml:571:41>>*/ return [0, d3];
    var param = next3;
    for(;;){
     if(! param)  /*<<hashtbl.ml:555:6>>*/ return 0;
     var k = param[1], data = param[2], next = param[3];
      /*<<hashtbl.ml:557:9>>*/ if
      (0 ===  /*<<hashtbl.ml:557:9>>*/ caml_compare(key, k))
       /*<<hashtbl.ml:557:32>>*/ return [0, data];
     var param = next;
    }
    /*<<hashtbl.ml:571:76>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function find_all(h, key){
     /*<<hashtbl.ml:574:2>>*/ function find_in_bucket(param){
     var param$0 = param;
      /*<<hashtbl.ml:574:27>>*/ for(;;){
       /*<<hashtbl.ml:574:27>>*/ if(! param$0)
        /*<<hashtbl.ml:576:6>>*/ return 0;
      var k = param$0[1], data = param$0[2], next = param$0[3];
       /*<<hashtbl.ml:578:9>>*/ if
       (0 ===  /*<<hashtbl.ml:578:9>>*/ caml_compare(k, key))
        /*<<hashtbl.ml:579:19>>*/ return [0, data, find_in_bucket(next)];
      var param$0 = next;
     }
     /*<<hashtbl.ml:580:30>>*/ }
     /*<<hashtbl.ml:581:25>>*/  /*<<hashtbl.ml:581:25>>*/ var
     _t_ = key_index(h, key);
     /*<<hashtbl.ml:581:17>>*/ return find_in_bucket
            ( /*<<hashtbl.ml:581:17>>*/ caml_check_bound(h[2], _t_)[1 + _t_]);
    /*<<hashtbl.ml:581:41>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function replace(h, key, data){
     /*<<hashtbl.ml:592:10>>*/ var
      /*<<hashtbl.ml:592:10>>*/ i = key_index(h, key),
      /*<<hashtbl.ml:593:10>>*/ l =
        /*<<hashtbl.ml:593:10>>*/ caml_check_bound(h[2], i)[1 + i],
     slot = l;
    for(;;){
     if(slot){
      var k = slot[1], next = slot[3];
       /*<<hashtbl.ml:587:9>>*/ if
       (0 !==  /*<<hashtbl.ml:587:9>>*/ caml_compare(k, key)){var slot = next; continue;}
       /*<<hashtbl.ml:588:11>>*/ slot[1] = key;
       /*<<hashtbl.ml:588:11>>*/ slot[2] = data;
      var _q_ = 0;
     }
     else
      var _q_ = 1;
     if(_q_){
       /*<<hashtbl.ml:595:4>>*/  /*<<hashtbl.ml:595:4>>*/ caml_check_bound
        (h[2], i)
       [1 + i]
      = [0, key, data, l];
       /*<<hashtbl.ml:595:4>>*/ h[1] = h[1] + 1 | 0;
       /*<<hashtbl.ml:595:4>>*/  /*<<hashtbl.ml:595:4>>*/ var
       _r_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
       /*<<hashtbl.ml:595:4>>*/ if(_r_)
        /*<<hashtbl.ml:597:47>>*/ return resize(key_index, h);
      var _s_ = _r_;
     }
     else
      var _s_ = _q_;
      /*<<hashtbl.ml:574:27>>*/ return _s_;
    }
    /*<<hashtbl.ml:598:5>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function mem(h, key){
     /*<<hashtbl.ml:606:24>>*/ var
      /*<<hashtbl.ml:606:24>>*/ _p_ = key_index(h, key),
     param =  /*<<hashtbl.ml:606:16>>*/ caml_check_bound(h[2], _p_)[1 + _p_];
     /*<<hashtbl.ml:601:26>>*/ for(;;){
      /*<<hashtbl.ml:601:26>>*/ if(! param)
       /*<<hashtbl.ml:603:6>>*/ return 0;
      /*<<hashtbl.ml:605:6>>*/ var
      k = param[1],
      next = param[3],
       /*<<hashtbl.ml:605:6>>*/ _o_ =
        0 ===  /*<<hashtbl.ml:605:6>>*/ caml_compare(k, key) ? 1 : 0;
      /*<<hashtbl.ml:605:6>>*/ if(_o_)  /*<<hashtbl.ml:603:6>>*/ return _o_;
     var param = next;
    }
    /*<<hashtbl.ml:606:40>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function add_seq(tbl, i){
     /*<<hashtbl.ml:609:2>>*/ function _n_(param){
      /*<<hashtbl.ml:609:11>>*/ var
       /*<<hashtbl.ml:609:11>>*/ v = param[2],
       /*<<hashtbl.ml:609:11>>*/ k = param[1];
      /*<<hashtbl.ml:609:11>>*/ return add(tbl, k, v);
     /*<<hashtbl.ml:609:37>>*/ }
     /*<<hashtbl.ml:609:2>>*/ return  /*<<hashtbl.ml:609:2>>*/ caml_call2
            (Stdlib_Seq[4], _n_, i);
    /*<<hashtbl.ml:609:39>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function replace_seq(tbl, i){
     /*<<hashtbl.ml:612:2>>*/ function _m_(param){
      /*<<hashtbl.ml:612:11>>*/ var
       /*<<hashtbl.ml:612:11>>*/ v = param[2],
       /*<<hashtbl.ml:612:11>>*/ k = param[1];
      /*<<hashtbl.ml:612:11>>*/ return replace(tbl, k, v);
     /*<<hashtbl.ml:612:41>>*/ }
     /*<<hashtbl.ml:612:2>>*/ return  /*<<hashtbl.ml:612:2>>*/ caml_call2
            (Stdlib_Seq[4], _m_, i);
    /*<<hashtbl.ml:612:43>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function of_seq(i){
     /*<<hashtbl.ml:615:12>>*/  /*<<hashtbl.ml:615:12>>*/ var
     tbl = create(0, 16);
     /*<<hashtbl.ml:616:2>>*/ replace_seq(tbl, i);
     /*<<hashtbl.ml:616:2>>*/ return tbl;
    /*<<hashtbl.ml:617:5>>*/ }
    /*<<hashtbl.ml:60:15>>*/ function rebuild(opt, h){
     /*<<hashtbl.ml:620:2>>*/ if(opt)
      /*<<hashtbl.ml:619:23>>*/ var
       /*<<hashtbl.ml:619:23>>*/ sth = opt[1],
      random = sth;
    else
     var
      random =
         /*<<hashtbl.ml:619:23>>*/ caml_call1(Stdlib_Atomic[2], randomized);
     /*<<hashtbl.ml:620:10>>*/  /*<<hashtbl.ml:620:10>>*/ var
     s = power_2_above(16, h[2].length - 1);
     /*<<hashtbl.ml:620:10>>*/ if(random)
      /*<<hashtbl.ml:622:37>>*/ var
       /*<<hashtbl.ml:622:37>>*/ _g_ =
         /*<<hashtbl.ml:622:37>>*/ caml_call1(Stdlib_Domain[10][2], prng_key),
      seed =  /*<<hashtbl.ml:622:19>>*/ caml_call1(Stdlib_Random[15][4], _g_);
    else
      /*<<hashtbl.ml:623:9>>*/  /*<<hashtbl.ml:623:9>>*/ var
      seed = 4 <= h.length - 1 ? h[3] : 0;
     /*<<hashtbl.ml:625:2>>*/ var
      /*<<hashtbl.ml:625:2>>*/ _h_ = 4 <= h.length - 1 ? h[4] : s,
      /*<<hashtbl.ml:627:11>>*/ h$0 =
       [0, h[1],  /*<<hashtbl.ml:627:11>>*/ caml_make_vect(s, 0), seed, _h_],
      /*<<hashtbl.ml:627:11>>*/ _i_ = h$0[2],
      /*<<hashtbl.ml:627:11>>*/ _j_ = h[2],
      /*<<hashtbl.ml:627:11>>*/ _k_ = 0;
     /*<<hashtbl.ml:631:2>>*/ insert_all_buckets
     (function(_l_){ /*<<?>>*/ return key_index(h$0, _l_);}, _k_, _j_, _i_);
     /*<<hashtbl.ml:631:2>>*/ return h$0;
    /*<<hashtbl.ml:632:4>>*/ }
    /*<<hashtbl.ml:60:15>>*/  /*<<hashtbl.ml:60:15>>*/ var
    Stdlib_Hashtbl =
      [0,
       create,
       clear,
       reset,
       copy,
       add,
       find,
       find_opt,
       find_all,
       mem,
       remove,
       replace,
       iter,
       filter_map_inplace,
       fold,
       length,
       randomize,
       is_randomized,
       rebuild,
       stats,
       to_seq,
       to_seq_keys,
       to_seq_values,
       add_seq,
       replace_seq,
       of_seq,
       Make,
       MakeSeeded,
       hash,
       seeded_hash,
       hash_param,
       caml_hash];
    /*<<hashtbl.ml:60:15>>*/  /*<<hashtbl.ml:60:15>>*/ runtime.caml_register_global
    (16, Stdlib_Hashtbl, "Stdlib__Hashtbl");
    /*<<hashtbl.ml:60:15>>*/ return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Weak
//# unitInfo: Requires: Stdlib, Stdlib__Array, Stdlib__Int, Stdlib__Obj, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_mod = runtime.caml_mod;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<?>>*/ function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Int = global_data.Stdlib__Int,
    Stdlib_Array = global_data.Stdlib__Array,
    Stdlib_Obj = global_data.Stdlib__Obj,
    cst_Weak_Make_hash_bucket_cann = "Weak.Make: hash bucket cannot grow more",
    cst_Weak_fill = "Weak.fill",
    cst_Weak_blit = "Weak.blit",
    cst_Weak_check = "Weak.check",
    cst_Weak_get_copy = "Weak.get_copy",
    cst_Weak_get = "Weak.get",
    cst_Weak_set = "Weak.set",
    cst_Weak_create = "Weak.create";
   function weak_create(l){
     /*<<weak.ml:28:2>>*/ var
      /*<<weak.ml:28:2>>*/ _W_ = 0 <= l ? 1 : 0,
      /*<<weak.ml:28:2>>*/ _X_ = _W_ ? l <= Stdlib_Obj[24][15] ? 1 : 0 : _W_;
     /*<<weak.ml:29:4>>*/ if(1 - _X_)
      /*<<weak.ml:29:4>>*/  /*<<weak.ml:29:4>>*/ caml_call1
      (Stdlib[1], cst_Weak_create);
     /*<<weak.ml:30:2>>*/ return  /*<<weak.ml:30:2>>*/ runtime.caml_weak_create
            (l);
    /*<<weak.ml:30:10>>*/ }
   function length(x){
     /*<<weak.ml:33:15>>*/ return x.length - 1 - 2 | 0;
    /*<<weak.ml:33:55>>*/ }
   function raise_if_invalid_offset(e, o, msg){
     /*<<weak.ml:36:2>>*/ var
      /*<<weak.ml:36:2>>*/ _T_ = 0 <= o ? 1 : 0,
      /*<<weak.ml:36:2>>*/ _U_ = _T_ ? o < length(e) ? 1 : 0 : _T_,
      /*<<weak.ml:37:4>>*/ _V_ = 1 - _U_;
     /*<<weak.ml:37:4>>*/ return _V_
            ?  /*<<weak.ml:37:4>>*/ caml_call1(Stdlib[1], msg)
            : _V_;
    /*<<weak.ml:37:20>>*/ }
   function set(e, o, x){
     /*<<weak.ml:42:2>>*/ raise_if_invalid_offset(e, o, cst_Weak_set);
     /*<<weak.ml:42:2>>*/ if(! x)
      /*<<weak.ml:44:12>>*/ return  /*<<weak.ml:44:12>>*/ runtime.caml_ephe_unset_key
             (e, o);
     /*<<weak.ml:45:14>>*/  /*<<weak.ml:45:14>>*/ var x$0 = x[1];
     /*<<weak.ml:45:14>>*/ return  /*<<weak.ml:45:14>>*/ runtime.caml_ephe_set_key
            (e, o, x$0);
    /*<<weak.ml:45:24>>*/ }
   function get(e, o){
     /*<<weak.ml:49:2>>*/ raise_if_invalid_offset(e, o, cst_Weak_get);
     /*<<weak.ml:50:2>>*/ return  /*<<weak.ml:50:2>>*/ runtime.caml_ephe_get_key
            (e, o);
    /*<<weak.ml:50:9>>*/ }
   function get_copy(e, o){
     /*<<weak.ml:54:2>>*/ raise_if_invalid_offset(e, o, cst_Weak_get_copy);
     /*<<weak.ml:55:2>>*/ return  /*<<weak.ml:55:2>>*/ runtime.caml_ephe_get_key_copy
            (e, o);
    /*<<weak.ml:55:14>>*/ }
   function check(e, o){
     /*<<weak.ml:59:2>>*/ raise_if_invalid_offset(e, o, cst_Weak_check);
     /*<<weak.ml:60:2>>*/ return  /*<<weak.ml:60:2>>*/ runtime.caml_ephe_check_key
            (e, o);
    /*<<weak.ml:60:11>>*/ }
   function blit(e1, o1, e2, o2, l){
     /*<<weak.ml:67:23>>*/ if
     (0 <= l
      &&
       0 <= o1
       && (length(e1) - l | 0) >= o1 && 0 <= o2 && (length(e2) - l | 0) >= o2){
      /*<<weak.ml:69:7>>*/ var
       /*<<weak.ml:69:7>>*/ _R_ = 0 !== l ? 1 : 0,
       /*<<weak.ml:69:7>>*/ _S_ =
        _R_
         ?  /*<<weak.ml:69:22>>*/ runtime.caml_ephe_blit_key
           (e1, o1, e2, o2, l)
         : _R_;
      /*<<weak.ml:69:40>>*/ return _S_;
    }
     /*<<weak.ml:68:7>>*/ return  /*<<weak.ml:68:7>>*/ caml_call1
            (Stdlib[1], cst_Weak_blit);
    /*<<weak.ml:69:40>>*/ }
   function fill(ar, ofs, len, x){
     /*<<weak.ml:72:33>>*/ if
     (0 <= ofs && 0 <= len && (length(ar) - len | 0) >= ofs){
      /*<<weak.ml:74:7>>*/  /*<<weak.ml:74:7>>*/ var
      _P_ = (ofs + len | 0) - 1 | 0;
      /*<<weak.ml:74:7>>*/ if(_P_ >= ofs){
      var i = ofs;
       /*<<weak.ml:76:6>>*/ for(;;){
        /*<<weak.ml:76:6>>*/ set(ar, i, x);
        /*<<weak.ml:76:6>>*/  /*<<weak.ml:76:6>>*/ var _Q_ = i + 1 | 0;
        /*<<weak.ml:76:6>>*/ if(_P_ !== i){var i = _Q_; continue;}
       break;
      }
     }
     return 0;
    }
     /*<<weak.ml:73:7>>*/ throw  /*<<weak.ml:73:7>>*/ caml_maybe_attach_backtrace
           ([0, Stdlib[6], cst_Weak_fill], 1);
    /*<<weak.ml:78:5>>*/ }
   function Make(H){
     /*<<weak.ml:105:20>>*/  /*<<weak.ml:105:20>>*/ var
     emptybucket = weak_create(0);
     /*<<weak.ml:105:20>>*/ function get_index(t, h){
      /*<<weak.ml:117:22>>*/ return  /*<<weak.ml:117:22>>*/ caml_mod
             (h & Stdlib[19], t[1].length - 1);
     /*<<weak.ml:117:65>>*/ }
     /*<<weak.ml:105:20>>*/  /*<<weak.ml:105:20>>*/ var limit = 7;
     /*<<weak.ml:105:20>>*/ function create(sz){
      /*<<weak.ml:123:4>>*/ var
       /*<<weak.ml:123:4>>*/ sz$0 = 7 <= sz ? sz : 7,
       /*<<weak.ml:124:4>>*/ sz$1 =
        Stdlib_Sys[13] < sz$0 ? Stdlib_Sys[13] : sz$0;
      /*<<weak.ml:126:14>>*/ return [0,
              /*<<weak.ml:126:14>>*/ caml_make_vect(sz$1, emptybucket),
              /*<<weak.ml:127:15>>*/ caml_make_vect(sz$1, [0]),
             limit,
             0,
             0];
     /*<<weak.ml:131:5>>*/ }
     /*<<weak.ml:105:20>>*/ function clear(t){
      /*<<weak.ml:134:4>>*/ var
       /*<<weak.ml:134:4>>*/ _N_ = t[1].length - 1 - 1 | 0,
       /*<<weak.ml:134:4>>*/ _M_ = 0;
      /*<<weak.ml:134:4>>*/ if(_N_ >= 0){
      var i = _M_;
       /*<<weak.ml:135:6>>*/ for(;;){
        /*<<weak.ml:135:6>>*/  /*<<weak.ml:135:6>>*/ caml_check_bound(t[1], i)
        [1 + i]
       = emptybucket;
        /*<<weak.ml:136:6>>*/  /*<<weak.ml:136:6>>*/ caml_check_bound(t[2], i)
        [1 + i]
       = [0];
        /*<<weak.ml:136:6>>*/  /*<<weak.ml:136:6>>*/ var _O_ = i + 1 | 0;
        /*<<weak.ml:136:6>>*/ if(_N_ !== i){var i = _O_; continue;}
       break;
      }
     }
      /*<<weak.ml:138:4>>*/ t[3] = limit;
      /*<<weak.ml:138:4>>*/ t[4] = 0;
      /*<<weak.ml:138:4>>*/ return 0;
     /*<<weak.ml:139:19>>*/ }
     /*<<weak.ml:105:20>>*/ function fold(f, t, init){
      /*<<weak.ml:143:4>>*/ var
       /*<<weak.ml:143:4>>*/ _K_ = t[1],
       /*<<weak.ml:143:4>>*/ i = 0;
      /*<<weak.ml:149:21>>*/ function _L_(b, accu$1){
      var i$0 = i, accu = accu$1;
       /*<<weak.ml:144:6>>*/ for(;;){
        /*<<weak.ml:144:14>>*/ if(length(b) <= i$0)
         /*<<weak.ml:144:28>>*/ return accu;
        /*<<weak.ml:145:12>>*/  /*<<weak.ml:145:12>>*/ var
        match = get(b, i$0);
        /*<<weak.ml:145:12>>*/ if(match){
         /*<<weak.ml:146:18>>*/ var
          /*<<weak.ml:146:18>>*/ v = match[1],
          /*<<weak.ml:146:38>>*/ accu$0 =
            /*<<weak.ml:146:38>>*/ caml_call2(f, v, accu),
          /*<<weak.ml:146:38>>*/ i$1 = i$0 + 1 | 0,
         i$0 = i$1,
         accu = accu$0;
        continue;
       }
        /*<<weak.ml:147:16>>*/ var
         /*<<weak.ml:147:16>>*/ i$2 = i$0 + 1 | 0,
        i$0 = i$2;
      }
     }
      /*<<weak.ml:149:21>>*/ return  /*<<weak.ml:149:21>>*/ caml_call3
             (Stdlib_Array[17], _L_, _K_, init);
     /*<<weak.ml:149:49>>*/ }
     /*<<weak.ml:105:20>>*/ function iter(f, t){
      /*<<weak.ml:153:4>>*/ var
       /*<<weak.ml:153:4>>*/ _I_ = t[1],
       /*<<weak.ml:153:4>>*/ i = 0;
      /*<<weak.ml:159:15>>*/ function _J_(b){
      var i$0 = i;
       /*<<weak.ml:154:6>>*/ for(;;){
        /*<<weak.ml:154:14>>*/ if(length(b) <= i$0)
         /*<<weak.ml:154:28>>*/ return 0;
        /*<<weak.ml:155:12>>*/  /*<<weak.ml:155:12>>*/ var
        match = get(b, i$0);
        /*<<weak.ml:155:12>>*/ if(match){
         /*<<weak.ml:156:18>>*/  /*<<weak.ml:156:18>>*/ var v = match[1];
         /*<<weak.ml:156:18>>*/  /*<<weak.ml:156:18>>*/ caml_call1(f, v);
         /*<<weak.ml:156:18>>*/ var
          /*<<weak.ml:156:18>>*/ i$1 = i$0 + 1 | 0,
         i$0 = i$1;
        continue;
       }
        /*<<weak.ml:157:16>>*/ var
         /*<<weak.ml:157:16>>*/ i$2 = i$0 + 1 | 0,
        i$0 = i$2;
      }
     }
      /*<<weak.ml:159:15>>*/ return  /*<<weak.ml:159:15>>*/ caml_call2
             (Stdlib_Array[11], _J_, _I_);
     /*<<weak.ml:159:38>>*/ }
     /*<<weak.ml:105:20>>*/ function count_bucket(i, b, accu){
     var i$0 = i, accu$0 = accu;
      /*<<weak.ml:173:4>>*/ for(;;){
       /*<<weak.ml:173:12>>*/ if(length(b) <= i$0)
        /*<<weak.ml:173:26>>*/ return accu$0;
       /*<<weak.ml:174:37>>*/ var
        /*<<weak.ml:174:37>>*/ _H_ = check(b, i$0) ? 1 : 0,
       accu$1 = accu$0 + _H_ | 0,
       i$1 = i$0 + 1 | 0,
       i$0 = i$1,
       accu$0 = accu$1;
     }
     /*<<weak.ml:174:62>>*/ }
     /*<<weak.ml:105:20>>*/ function count(t){
      /*<<weak.ml:178:4>>*/ var
       /*<<weak.ml:178:4>>*/ _B_ = 0,
       /*<<weak.ml:178:4>>*/ _C_ = t[1],
       /*<<weak.ml:178:4>>*/ _D_ = 0;
      /*<<weak.ml:178:21>>*/ function _E_(_F_, _G_){
       /*<<?>>*/ return count_bucket(_D_, _F_, _G_);
     }
      /*<<weak.ml:178:21>>*/ return  /*<<weak.ml:178:21>>*/ caml_call3
             (Stdlib_Array[17], _E_, _C_, _B_);
     /*<<weak.ml:178:47>>*/ }
     /*<<weak.ml:105:20>>*/ function add_aux(t, setter, d, h, index){
      /*<<weak.ml:238:17>>*/ var
       /*<<weak.ml:238:17>>*/ bucket$0 =
         /*<<weak.ml:238:17>>*/ caml_check_bound(t[1], index)[1 + index],
       /*<<weak.ml:239:17>>*/ hashes =
         /*<<weak.ml:239:17>>*/ caml_check_bound(t[2], index)[1 + index],
       /*<<weak.ml:240:13>>*/ sz = length(bucket$0),
      i$3 = 0;
      /*<<weak.ml:242:6>>*/ for(;;){
       /*<<weak.ml:242:6>>*/ if(sz > i$3){
        /*<<weak.ml:260:18>>*/ if(check(bucket$0, i$3)){
         /*<<weak.ml:260:38>>*/ var
          /*<<weak.ml:260:38>>*/ i$5 = i$3 + 1 | 0,
         i$3 = i$5;
        continue;
       }
        /*<<weak.ml:263:8>>*/  /*<<weak.ml:263:8>>*/ caml_call3
        (setter, bucket$0, i$3, d);
        /*<<weak.ml:264:8>>*/  /*<<weak.ml:264:8>>*/ caml_check_bound
         (hashes, i$3)
        [1 + i$3]
       = h;
        /*<<weak.ml:264:8>>*/ return 0;
      }
       /*<<weak.ml:244:10>>*/  /*<<weak.ml:244:10>>*/ var
       newsz =
          /*<<weak.ml:244:10>>*/ caml_call2
          (Stdlib_Int[10],
           ((3 * sz | 0) / 2 | 0) + 3 | 0,
           Stdlib_Sys[13] - 2 | 0);
       /*<<weak.ml:244:10>>*/ if(newsz <= sz)
        /*<<weak.ml:246:28>>*/  /*<<weak.ml:246:28>>*/ caml_call1
        (Stdlib[2], cst_Weak_Make_hash_bucket_cann);
       /*<<weak.ml:247:24>>*/ var
        /*<<weak.ml:247:24>>*/ newbucket$0 = weak_create(newsz),
        /*<<weak.ml:248:24>>*/ newhashes =
          /*<<weak.ml:248:24>>*/ caml_make_vect(newsz, 0);
       /*<<weak.ml:249:8>>*/ blit(bucket$0, 0, newbucket$0, 0, sz);
       /*<<weak.ml:250:8>>*/  /*<<weak.ml:250:8>>*/ caml_call5
       (Stdlib_Array[8], hashes, 0, newhashes, 0, sz);
       /*<<weak.ml:251:8>>*/  /*<<weak.ml:251:8>>*/ caml_call3
       (setter, newbucket$0, sz, d);
       /*<<weak.ml:252:8>>*/  /*<<weak.ml:252:8>>*/ caml_check_bound
        (newhashes, sz)
       [1 + sz]
      = h;
       /*<<weak.ml:253:8>>*/  /*<<weak.ml:253:8>>*/ caml_check_bound
        (t[1], index)
       [1 + index]
      = newbucket$0;
       /*<<weak.ml:254:8>>*/  /*<<weak.ml:254:8>>*/ caml_check_bound
        (t[2], index)
       [1 + index]
      = newhashes;
       /*<<weak.ml:254:8>>*/ var
        /*<<weak.ml:254:8>>*/ _x_ = sz <= t[3] ? 1 : 0,
        /*<<weak.ml:254:8>>*/ _y_ = _x_ ? t[3] < newsz ? 1 : 0 : _x_;
       /*<<weak.ml:255:49>>*/ if(_y_){
        /*<<weak.ml:255:49>>*/ t[4] = t[4] + 1 | 0;
       var i$4 = 0;
        /*<<weak.ml:257:38>>*/ for(;;){
         /*<<weak.ml:185:4>>*/ var
          /*<<weak.ml:185:4>>*/ _n_ = t[5],
          /*<<weak.ml:185:17>>*/ bucket =
            /*<<weak.ml:185:17>>*/ caml_check_bound(t[1], _n_)[1 + _n_],
          /*<<weak.ml:185:17>>*/ _o_ = t[5],
          /*<<weak.ml:186:18>>*/ hbucket =
            /*<<weak.ml:186:18>>*/ caml_check_bound(t[2], _o_)[1 + _o_],
          /*<<weak.ml:187:14>>*/ len = length(bucket),
          /*<<weak.ml:182:18>>*/ prev_len =
           (((len - 3 | 0) * 2 | 0) + 2 | 0) / 3 | 0,
          /*<<weak.ml:189:15>>*/ live = count_bucket(0, bucket, 0);
         /*<<weak.ml:189:15>>*/ if(live <= prev_len){
          /*<<weak.ml:201:14>>*/ var
           /*<<weak.ml:201:14>>*/ j$2 = length(bucket) - 1 | 0,
          i$0 = 0,
          j = j$2;
          /*<<weak.ml:192:8>>*/ for(;;){
           /*<<weak.ml:192:8>>*/ if(prev_len <= j){
            /*<<weak.ml:193:13>>*/ if(check(bucket, i$0)){
             /*<<weak.ml:193:33>>*/ var
              /*<<weak.ml:193:33>>*/ i$1 = i$0 + 1 | 0,
             i$0 = i$1;
            continue;
           }
            /*<<weak.ml:194:18>>*/ if(check(bucket, j)){
             /*<<weak.ml:195:12>>*/ blit(bucket, j, bucket, i$0, 1);
             /*<<weak.ml:196:27>>*/  /*<<weak.ml:196:27>>*/ var
             _p_ =  /*<<weak.ml:196:27>>*/ caml_check_bound(hbucket, j)[1 + j];
             /*<<weak.ml:196:12>>*/  /*<<weak.ml:196:12>>*/ caml_check_bound
              (hbucket, i$0)
             [1 + i$0]
            = _p_;
             /*<<weak.ml:196:12>>*/ var
              /*<<weak.ml:196:12>>*/ j$0 = j - 1 | 0,
              /*<<weak.ml:196:12>>*/ i$2 = i$0 + 1 | 0,
             i$0 = i$2,
             j = j$0;
            continue;
           }
            /*<<weak.ml:198:19>>*/ var
             /*<<weak.ml:198:19>>*/ j$1 = j - 1 | 0,
            j = j$1;
           continue;
          }
          if(0 === prev_len){
            /*<<weak.ml:202:27>>*/  /*<<weak.ml:202:27>>*/ var _q_ = t[5];
            /*<<weak.ml:203:8>>*/  /*<<weak.ml:203:8>>*/ caml_check_bound
             (t[1], _q_)
            [1 + _q_]
           = emptybucket;
            /*<<weak.ml:203:8>>*/  /*<<weak.ml:203:8>>*/ var _r_ = t[5];
            /*<<weak.ml:204:8>>*/  /*<<weak.ml:204:8>>*/ caml_check_bound
             (t[2], _r_)
            [1 + _r_]
           = [0];
          }
          else{
            /*<<weak.ml:206:24>>*/  /*<<weak.ml:206:24>>*/ var
            newbucket = weak_create(prev_len);
            /*<<weak.ml:207:8>>*/ blit(bucket, 0, newbucket, 0, prev_len);
            /*<<weak.ml:207:8>>*/  /*<<weak.ml:207:8>>*/ var _u_ = t[5];
            /*<<weak.ml:208:8>>*/  /*<<weak.ml:208:8>>*/ caml_check_bound
             (t[1], _u_)
            [1 + _u_]
           = newbucket;
            /*<<weak.ml:209:30>>*/ var
             /*<<weak.ml:209:30>>*/ _v_ =
               /*<<weak.ml:209:30>>*/ caml_call3
               (Stdlib_Array[5], hbucket, 0, prev_len),
             /*<<weak.ml:209:30>>*/ _w_ = t[5];
            /*<<weak.ml:209:8>>*/  /*<<weak.ml:209:8>>*/ caml_check_bound
             (t[2], _w_)
            [1 + _w_]
           = _v_;
          }
           /*<<weak.ml:211:6>>*/ var
            /*<<weak.ml:211:6>>*/ _s_ = t[3] < len ? 1 : 0,
            /*<<weak.ml:211:6>>*/ _t_ = _s_ ? prev_len <= t[3] ? 1 : 0 : _s_;
           /*<<weak.ml:211:51>>*/ if(_t_)
            /*<<weak.ml:211:51>>*/ t[4] = t[4] - 1 | 0;
          break;
         }
        }
         /*<<weak.ml:213:4>>*/ t[5] =
          /*<<weak.ml:213:4>>*/ caml_mod(t[5] + 1 | 0, t[1].length - 1);
        var _A_ = i$4 + 1 | 0;
        if(2 !== i$4){var i$4 = _A_; continue;}
        break;
       }
      }
       /*<<weak.ml:259:8>>*/  /*<<weak.ml:259:8>>*/ var
       _z_ = ((t[1].length - 1) / 2 | 0) < t[4] ? 1 : 0;
       /*<<weak.ml:259:8>>*/ if(! _z_)  /*<<weak.ml:260:15>>*/ return _z_;
       /*<<weak.ml:217:4>>*/ var
        /*<<weak.ml:217:4>>*/ oldlen = t[1].length - 1,
        /*<<weak.ml:181:18>>*/ newlen =
          /*<<weak.ml:181:18>>*/ caml_call2
          (Stdlib_Int[10], ((3 * oldlen | 0) / 2 | 0) + 3 | 0, Stdlib_Sys[13]);
      if(oldlen < newlen){
        /*<<weak.ml:220:17>>*/ var
         /*<<weak.ml:220:17>>*/ newt = create(newlen),
         /*<<weak.ml:163:4>>*/ _l_ = t[1],
         /*<<weak.ml:163:4>>*/ i = 0,
         /*<<weak.ml:169:16>>*/ _m_ =
          function(j, ob){
           var oi = i;
            /*<<weak.ml:164:6>>*/ for(;;){
             /*<<weak.ml:164:14>>*/ if(length(ob) <= oi)
              /*<<weak.ml:164:28>>*/ return 0;
             /*<<weak.ml:165:12>>*/ if(check(ob, oi)){
              /*<<weak.ml:166:20>>*/ var
               /*<<weak.ml:166:20>>*/ oh =
                 /*<<weak.ml:166:20>>*/ caml_check_bound(t[2], j)[1 + j],
               /*<<weak.ml:222:8>>*/ setter$0 =
                function(oi){
                 function setter(nb, ni, param){
                   /*<<weak.ml:222:29>>*/ return blit(ob, oi, nb, ni, 1);
                  /*<<weak.ml:222:47>>*/ }
                 return setter;
                },
               /*<<weak.ml:222:8>>*/ setter = setter$0(oi),
               /*<<weak.ml:223:16>>*/ h =
                 /*<<weak.ml:223:16>>*/ caml_check_bound(oh, oi)[1 + oi];
              /*<<weak.ml:224:35>>*/ add_aux
              (newt, setter, 0, h, get_index(newt, h));
             var i$0 = oi + 1 | 0, oi = i$0;
             continue;
            }
             /*<<weak.ml:167:17>>*/ var
              /*<<weak.ml:167:17>>*/ i$1 = oi + 1 | 0,
             oi = i$1;
           }
          };
        /*<<weak.ml:169:16>>*/  /*<<weak.ml:169:16>>*/ caml_call2
        (Stdlib_Array[12], _m_, _l_);
       t[1] = newt[1];
       t[2] = newt[2];
       t[3] = newt[3];
       t[4] = newt[4];
       t[5] = caml_mod(t[5], newt[1].length - 1);
       return 0;
      }
       /*<<weak.ml:232:13>>*/ t[3] = Stdlib[19];
       /*<<weak.ml:232:13>>*/ t[4] = 0;
       /*<<weak.ml:232:13>>*/ return 0;
     }
     /*<<weak.ml:267:10>>*/ }
     /*<<weak.ml:105:20>>*/ function add(t, d){
      /*<<weak.ml:271:12>>*/  /*<<weak.ml:271:12>>*/ var
      h =  /*<<weak.ml:271:12>>*/ caml_call1(H[2], d);
      /*<<weak.ml:272:29>>*/ return add_aux
             (t, set, [0, d], h, get_index(t, h));
     /*<<weak.ml:272:44>>*/ }
     /*<<weak.ml:105:20>>*/ function find_or(t, d, ifnotfound){
      /*<<weak.ml:276:12>>*/ var
       /*<<weak.ml:276:12>>*/ h =  /*<<weak.ml:276:12>>*/ caml_call1(H[2], d),
       /*<<weak.ml:277:16>>*/ index = get_index(t, h),
       /*<<weak.ml:278:17>>*/ bucket =
         /*<<weak.ml:278:17>>*/ caml_check_bound(t[1], index)[1 + index],
       /*<<weak.ml:279:17>>*/ hashes =
         /*<<weak.ml:279:17>>*/ caml_check_bound(t[2], index)[1 + index],
       /*<<weak.ml:280:13>>*/ sz = length(bucket),
      i = 0;
      /*<<weak.ml:282:6>>*/ for(;;){
       /*<<weak.ml:282:6>>*/ if(sz <= i)
        /*<<weak.ml:282:22>>*/ return  /*<<weak.ml:282:22>>*/ caml_call2
               (ifnotfound, h, index);
       /*<<weak.ml:283:18>>*/ if
       (h !==  /*<<weak.ml:283:18>>*/ caml_check_bound(hashes, i)[1 + i]){
        /*<<weak.ml:291:15>>*/ var
         /*<<weak.ml:291:15>>*/ i$2 = i + 1 | 0,
        i = i$2;
       continue;
      }
       /*<<weak.ml:284:14>>*/  /*<<weak.ml:284:14>>*/ var
       match = get_copy(bucket, i);
       /*<<weak.ml:284:14>>*/ if(match){
       var v = match[1];
        /*<<weak.ml:285:22>>*/ if
        ( /*<<weak.ml:285:22>>*/ caml_call2(H[1], v, d)){
         /*<<weak.ml:286:26>>*/  /*<<weak.ml:286:26>>*/ var
         match$0 = get(bucket, i);
         /*<<weak.ml:286:26>>*/ if(match$0){
          /*<<weak.ml:287:26>>*/  /*<<weak.ml:287:26>>*/ var v$0 = match$0[1];
          /*<<weak.ml:287:26>>*/ return v$0;
        }
         /*<<weak.ml:288:24>>*/ var
          /*<<weak.ml:288:24>>*/ i$0 = i + 1 | 0,
         i = i$0;
        continue;
       }
      }
       /*<<weak.ml:290:15>>*/ var
        /*<<weak.ml:290:15>>*/ i$1 = i + 1 | 0,
       i = i$1;
     }
     /*<<weak.ml:293:10>>*/ }
     /*<<weak.ml:105:20>>*/ function merge(t, d){
      /*<<weak.ml:297:4>>*/ return find_or
             (t,
              d,
              function(h, index){
                /*<<weak.ml:297:32>>*/ add_aux(t, set, [0, d], h, index);
                /*<<weak.ml:297:32>>*/ return d;
               /*<<weak.ml:297:65>>*/ });
     /*<<weak.ml:297:66>>*/ }
     /*<<weak.ml:105:20>>*/ function find(t, d){
      /*<<weak.ml:300:17>>*/ return find_or
             (t,
              d,
              function(h, index){
                /*<<weak.ml:300:47>>*/ throw  /*<<weak.ml:300:47>>*/ caml_maybe_attach_backtrace
                      (Stdlib[8], 1);
               /*<<weak.ml:300:62>>*/ });
     /*<<weak.ml:300:63>>*/ }
     /*<<weak.ml:105:20>>*/ function find_opt(t, d){
      /*<<weak.ml:303:12>>*/ var
       /*<<weak.ml:303:12>>*/ h =  /*<<weak.ml:303:12>>*/ caml_call1(H[2], d),
       /*<<weak.ml:304:16>>*/ index = get_index(t, h),
       /*<<weak.ml:305:17>>*/ bucket =
         /*<<weak.ml:305:17>>*/ caml_check_bound(t[1], index)[1 + index],
       /*<<weak.ml:306:17>>*/ hashes =
         /*<<weak.ml:306:17>>*/ caml_check_bound(t[2], index)[1 + index],
       /*<<weak.ml:307:13>>*/ sz = length(bucket),
      i = 0;
      /*<<weak.ml:309:6>>*/ for(;;){
       /*<<weak.ml:309:6>>*/ if(sz <= i)  /*<<weak.ml:309:22>>*/ return 0;
       /*<<weak.ml:310:18>>*/ if
       (h !==  /*<<weak.ml:310:18>>*/ caml_check_bound(hashes, i)[1 + i]){
        /*<<weak.ml:318:15>>*/ var
         /*<<weak.ml:318:15>>*/ i$2 = i + 1 | 0,
        i = i$2;
       continue;
      }
       /*<<weak.ml:311:14>>*/  /*<<weak.ml:311:14>>*/ var
       match = get_copy(bucket, i);
       /*<<weak.ml:311:14>>*/ if(match){
       var v = match[1];
        /*<<weak.ml:312:22>>*/ if
        ( /*<<weak.ml:312:22>>*/ caml_call2(H[1], v, d)){
         /*<<weak.ml:313:26>>*/  /*<<weak.ml:313:26>>*/ var
         v$0 = get(bucket, i);
         /*<<weak.ml:313:26>>*/ if(v$0)  /*<<weak.ml:314:31>>*/ return v$0;
         /*<<weak.ml:315:24>>*/ var
          /*<<weak.ml:315:24>>*/ i$0 = i + 1 | 0,
         i = i$0;
        continue;
       }
      }
       /*<<weak.ml:317:15>>*/ var
        /*<<weak.ml:317:15>>*/ i$1 = i + 1 | 0,
       i = i$1;
     }
     /*<<weak.ml:320:10>>*/ }
     /*<<weak.ml:105:20>>*/ function find_shadow(t, d, iffound, ifnotfound){
      /*<<weak.ml:324:12>>*/ var
       /*<<weak.ml:324:12>>*/ h =  /*<<weak.ml:324:12>>*/ caml_call1(H[2], d),
       /*<<weak.ml:325:16>>*/ index = get_index(t, h),
       /*<<weak.ml:326:17>>*/ bucket =
         /*<<weak.ml:326:17>>*/ caml_check_bound(t[1], index)[1 + index],
       /*<<weak.ml:327:17>>*/ hashes =
         /*<<weak.ml:327:17>>*/ caml_check_bound(t[2], index)[1 + index],
       /*<<weak.ml:328:13>>*/ sz = length(bucket),
      i = 0;
      /*<<weak.ml:330:6>>*/ for(;;){
       /*<<weak.ml:330:6>>*/ if(sz <= i)
        /*<<weak.ml:330:22>>*/ return ifnotfound;
       /*<<weak.ml:331:18>>*/ if
       (h !==  /*<<weak.ml:331:18>>*/ caml_check_bound(hashes, i)[1 + i]){
        /*<<weak.ml:335:15>>*/ var
         /*<<weak.ml:335:15>>*/ i$1 = i + 1 | 0,
        i = i$1;
       continue;
      }
       /*<<weak.ml:332:14>>*/  /*<<weak.ml:332:14>>*/ var
       match = get_copy(bucket, i);
       /*<<weak.ml:332:14>>*/ if(match){
       var v = match[1];
        /*<<weak.ml:333:22>>*/ if
        ( /*<<weak.ml:333:22>>*/ caml_call2(H[1], v, d))
         /*<<weak.ml:333:37>>*/ return  /*<<weak.ml:333:37>>*/ caml_call2
                (iffound, bucket, i);
      }
       /*<<weak.ml:334:15>>*/ var
        /*<<weak.ml:334:15>>*/ i$0 = i + 1 | 0,
       i = i$0;
     }
     /*<<weak.ml:337:10>>*/ }
     /*<<weak.ml:105:20>>*/ function remove(t, d){
      /*<<weak.ml:340:19>>*/  /*<<weak.ml:340:19>>*/ var _k_ = 0;
      /*<<weak.ml:340:19>>*/ return find_shadow
             (t,
              d,
              function(w, i){
                /*<<weak.ml:340:47>>*/ return set(w, i, 0);
               /*<<weak.ml:340:59>>*/ },
              _k_);
     /*<<weak.ml:340:63>>*/ }
     /*<<weak.ml:105:20>>*/ function mem(t, d){
      /*<<weak.ml:343:16>>*/  /*<<weak.ml:343:16>>*/ var _j_ = 0;
      /*<<weak.ml:343:16>>*/ return find_shadow
             (t,
              d,
              function(w, i){
                /*<<weak.ml:343:46>>*/ return 1;
               /*<<weak.ml:343:50>>*/ },
              _j_);
     /*<<weak.ml:343:57>>*/ }
     /*<<weak.ml:105:20>>*/ function find_all(t, d){
      /*<<weak.ml:347:12>>*/ var
       /*<<weak.ml:347:12>>*/ h =  /*<<weak.ml:347:12>>*/ caml_call1(H[2], d),
       /*<<weak.ml:348:16>>*/ index = get_index(t, h),
       /*<<weak.ml:349:17>>*/ bucket =
         /*<<weak.ml:349:17>>*/ caml_check_bound(t[1], index)[1 + index],
       /*<<weak.ml:350:17>>*/ hashes =
         /*<<weak.ml:350:17>>*/ caml_check_bound(t[2], index)[1 + index],
       /*<<weak.ml:351:13>>*/ sz = length(bucket),
      i = 0,
      accu = 0;
      /*<<weak.ml:353:6>>*/ for(;;){
       /*<<weak.ml:353:6>>*/ if(sz <= i)  /*<<weak.ml:353:22>>*/ return accu;
       /*<<weak.ml:354:18>>*/ if
       (h !==  /*<<weak.ml:354:18>>*/ caml_check_bound(hashes, i)[1 + i]){
        /*<<weak.ml:362:15>>*/ var
         /*<<weak.ml:362:15>>*/ i$3 = i + 1 | 0,
        i = i$3;
       continue;
      }
       /*<<weak.ml:355:14>>*/  /*<<weak.ml:355:14>>*/ var
       match = get_copy(bucket, i);
       /*<<weak.ml:355:14>>*/ if(match){
       var v = match[1];
        /*<<weak.ml:356:22>>*/ if
        ( /*<<weak.ml:356:22>>*/ caml_call2(H[1], v, d)){
         /*<<weak.ml:357:26>>*/  /*<<weak.ml:357:26>>*/ var
         match$0 = get(bucket, i);
         /*<<weak.ml:357:26>>*/ if(match$0){
          /*<<weak.ml:358:26>>*/ var
           /*<<weak.ml:358:26>>*/ v$0 = match$0[1],
           /*<<weak.ml:358:26>>*/ accu$0 = [0, v$0, accu],
           /*<<weak.ml:358:26>>*/ i$0 = i + 1 | 0,
          i = i$0,
          accu = accu$0;
         continue;
        }
         /*<<weak.ml:359:24>>*/ var
          /*<<weak.ml:359:24>>*/ i$1 = i + 1 | 0,
         i = i$1;
        continue;
       }
      }
       /*<<weak.ml:361:15>>*/ var
        /*<<weak.ml:361:15>>*/ i$2 = i + 1 | 0,
       i = i$2;
     }
     /*<<weak.ml:364:13>>*/ }
     /*<<weak.ml:105:20>>*/ function stats(t){
      /*<<weak.ml:368:4>>*/ var
       /*<<weak.ml:368:4>>*/ len = t[1].length - 1,
       /*<<weak.ml:369:15>>*/ lens =
         /*<<weak.ml:369:15>>*/ caml_call2(Stdlib_Array[13], length, t[1]);
      /*<<weak.ml:370:4>>*/  /*<<weak.ml:370:4>>*/ caml_call2
      (Stdlib_Array[30], runtime.caml_int_compare, lens);
      /*<<weak.ml:370:4>>*/  /*<<weak.ml:370:4>>*/ var _a_ = 0;
      /*<<weak.ml:370:4>>*/ function _b_(_i_, _h_){
       /*<<?>>*/ return _i_ + _h_ | 0;
     }
      /*<<weak.ml:371:17>>*/ var
       /*<<weak.ml:371:17>>*/ totlen =
         /*<<weak.ml:371:17>>*/ caml_call3(Stdlib_Array[15], _b_, _a_, lens),
       /*<<weak.ml:371:17>>*/ _c_ = len - 1 | 0,
       /*<<weak.ml:372:51>>*/ _e_ = len / 2 | 0,
       /*<<weak.ml:372:51>>*/ _d_ =
         /*<<weak.ml:372:51>>*/ caml_check_bound(lens, _c_)[1 + _c_],
       /*<<weak.ml:372:37>>*/ _f_ =
         /*<<weak.ml:372:37>>*/ caml_check_bound(lens, _e_)[1 + _e_],
       /*<<weak.ml:372:27>>*/ _g_ =
         /*<<weak.ml:372:27>>*/ caml_check_bound(lens, 0)[1];
      /*<<weak.ml:372:10>>*/ return [0, len, count(t), totlen, _g_, _f_, _d_];
     /*<<weak.ml:372:64>>*/ }
     /*<<weak.ml:105:20>>*/ return [0,
            create,
            clear,
            merge,
            add,
            remove,
            find,
            find_opt,
            find_all,
            mem,
            iter,
            fold,
            count,
            stats];
   }
   var
    Stdlib_Weak =
      [0, weak_create, length, set, get, get_copy, check, fill, blit, Make];
   runtime.caml_register_global(13, Stdlib_Weak, "Stdlib__Weak");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Format
//# unitInfo: Requires: CamlinternalFormat, Stdlib, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Domain, Stdlib__Int, Stdlib__List, Stdlib__Queue, Stdlib__Stack, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$16 = "",
    cst$15 = ">",
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<?>>*/ function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
    /*<<format.ml:431:2>>*/ var
     /*<<format.ml:431:2>>*/ global_data =
       /*<<format.ml:431:2>>*/ runtime.caml_get_global_data(),
     /*<<format.ml:431:2>>*/ cst$14 = ".",
     /*<<format.ml:431:2>>*/ cst$11 = cst$15,
     /*<<format.ml:431:2>>*/ cst$12 = "<\/",
     /*<<format.ml:431:2>>*/ cst$13 = cst$16,
     /*<<format.ml:431:2>>*/ cst$8 = cst$15,
     /*<<format.ml:431:2>>*/ cst$9 = "<",
     /*<<format.ml:431:2>>*/ cst$10 = cst$16,
     /*<<format.ml:431:2>>*/ cst$7 = "\n",
     /*<<format.ml:431:2>>*/ cst$3 = cst$16,
     /*<<format.ml:431:2>>*/ cst$4 = cst$16,
     /*<<format.ml:431:2>>*/ cst$5 = cst$16,
     /*<<format.ml:431:2>>*/ cst$6 = cst$16,
     /*<<format.ml:431:2>>*/ cst = cst$16,
     /*<<format.ml:431:2>>*/ cst$0 = cst$16,
     /*<<format.ml:431:2>>*/ cst$1 = cst$16,
     /*<<format.ml:431:2>>*/ cst$2 = cst$16,
     /*<<format.ml:431:2>>*/ Stdlib_Queue = global_data.Stdlib__Queue,
     /*<<format.ml:431:2>>*/ CamlinternalFormat =
      global_data.CamlinternalFormat,
     /*<<format.ml:431:2>>*/ Stdlib = global_data.Stdlib,
     /*<<format.ml:431:2>>*/ Stdlib_String = global_data.Stdlib__String,
     /*<<format.ml:431:2>>*/ Stdlib_Domain = global_data.Stdlib__Domain,
     /*<<format.ml:431:2>>*/ Stdlib_Buffer = global_data.Stdlib__Buffer,
     /*<<format.ml:431:2>>*/ Stdlib_List = global_data.Stdlib__List,
     /*<<format.ml:431:2>>*/ Stdlib_Stack = global_data.Stdlib__Stack,
     /*<<format.ml:431:2>>*/ Stdlib_Int = global_data.Stdlib__Int,
     /*<<format.ml:431:2>>*/ Stdlib_Bytes = global_data.Stdlib__Bytes,
     /*<<format.ml:431:2>>*/ _f_ = [3, 0, 3],
     /*<<format.ml:431:2>>*/ cst_Format_pp_set_geometry = "Format.pp_set_geometry: ",
     /*<<format.ml:431:2>>*/ _e_ = [1, "max_indent < 2"],
     /*<<format.ml:431:2>>*/ _c_ = [1, "margin <= max_indent"],
     /*<<format.ml:431:2>>*/ _d_ = [0, 0],
     /*<<format.ml:431:2>>*/ _b_ = [0, cst$16],
     /*<<format.ml:431:2>>*/ _a_ = [0, cst$16, 0, cst$16],
     /*<<format.ml:431:2>>*/ cst_Stdlib_Format_String_tag = "Stdlib.Format.String_tag";
   function id(x){ /*<<format.ml:23:11>>*/ return x; /*<<format.ml:23:12>>*/ }
   var
    String_tag =
      [248, cst_Stdlib_Format_String_tag, runtime.caml_fresh_oo_id(0)],
    zero = 0,
    unknown = -1;
   function pp_enqueue(state, token){
     /*<<format.ml:219:2>>*/ state[13] = state[13] + token[3] | 0;
     /*<<format.ml:219:2>>*/ return  /*<<format.ml:219:2>>*/ caml_call2
            (Stdlib_Queue[3], token, state[28]);
    /*<<format.ml:220:32>>*/ }
   var pp_infinity = 1000000010;
   function pp_output_string(state, s){
     /*<<format.ml:251:31>>*/ return  /*<<format.ml:251:31>>*/ caml_call3
            (state[17],
             s,
             0,
              /*<<format.ml:251:31>>*/ caml_ml_string_length(s));
    /*<<format.ml:251:72>>*/ }
   function pp_output_newline(state){
     /*<<format.ml:252:30>>*/ return  /*<<format.ml:252:30>>*/ caml_call1
            (state[19], 0);
    /*<<format.ml:252:53>>*/ }
   function format_pp_text(state, size, text){
     /*<<format.ml:258:2>>*/ state[9] = state[9] - size | 0;
     /*<<format.ml:259:2>>*/ pp_output_string(state, text);
     /*<<format.ml:259:2>>*/ state[11] = 0;
     /*<<format.ml:259:2>>*/ return 0;
    /*<<format.ml:260:31>>*/ }
   function format_string(state, s){
     /*<<format.ml:264:5>>*/  /*<<format.ml:264:5>>*/ var
     _bQ_ =  /*<<format.ml:264:5>>*/ runtime.caml_string_notequal(s, cst$16);
     /*<<format.ml:264:5>>*/ return _bQ_
            ? format_pp_text
              (state,  /*<<format.ml:264:18>>*/ caml_ml_string_length(s), s)
            : _bQ_;
    /*<<format.ml:264:58>>*/ }
   function break_new_line(state, param, width){
    var after = param[3], offset = param[2], before = param[1];
     /*<<format.ml:268:2>>*/ format_string(state, before);
     /*<<format.ml:269:2>>*/ pp_output_newline(state);
     /*<<format.ml:269:2>>*/ state[11] = 1;
     /*<<format.ml:269:2>>*/ var
      /*<<format.ml:269:2>>*/ indent = (state[6] - width | 0) + offset | 0,
      /*<<format.ml:273:20>>*/ real_indent =
        /*<<format.ml:273:20>>*/ caml_call2(Stdlib_Int[10], state[8], indent);
     /*<<format.ml:273:20>>*/ state[10] = real_indent;
     /*<<format.ml:273:20>>*/ state[9] = state[6] - state[10] | 0;
     /*<<format.ml:273:20>>*/  /*<<format.ml:273:20>>*/ var n = state[10];
     /*<<format.ml:254:31>>*/  /*<<format.ml:254:31>>*/ caml_call1
     (state[21], n);
    return format_string(state, after);
   }
   function break_line(state, width){
     /*<<format.ml:281:29>>*/ return break_new_line(state, _a_, width);
    /*<<format.ml:281:67>>*/ }
   function break_same_line(state, param){
    var after = param[3], width = param[2], before = param[1];
     /*<<format.ml:285:2>>*/ format_string(state, before);
     /*<<format.ml:285:2>>*/ state[9] = state[9] - width | 0;
     /*<<format.ml:253:31>>*/  /*<<format.ml:253:31>>*/ caml_call1
     (state[20], width);
    return format_string(state, after);
   }
   function format_pp_token(state, size$0, param){
     /*<<?>>*/ if(typeof param === "number")
     switch(param){
       case 0:
         /*<<format.ml:348:16>>*/  /*<<format.ml:348:16>>*/ var
         match$3 =
            /*<<format.ml:348:16>>*/ caml_call1(Stdlib_Stack[7], state[3]);
         /*<<format.ml:348:16>>*/ if(! match$3)
          /*<<format.ml:349:14>>*/ return 0;
        var
         tabs = match$3[1][1],
         add_tab =
           function(n, ls){
             /*<<?>>*/ if(! ls)  /*<<format.ml:352:16>>*/ return [0, n, 0];
            var l = ls[2], x = ls[1];
             /*<<format.ml:353:29>>*/ return  /*<<format.ml:353:29>>*/ runtime.caml_lessthan
                     (n, x)
                    ? [0, n, ls]
                    : [0, x, add_tab(n, l)];
           };
         /*<<format.ml:354:14>>*/ tabs[1] =
         add_tab(state[6] - state[9] | 0, tabs[1]);
         /*<<format.ml:354:14>>*/ return 0;
       case 1:
         /*<<format.ml:339:4>>*/  /*<<format.ml:339:4>>*/ caml_call1
         (Stdlib_Stack[5], state[2]);
         /*<<format.ml:339:4>>*/ return 0;
       case 2:
         /*<<format.ml:345:4>>*/  /*<<format.ml:345:4>>*/ caml_call1
         (Stdlib_Stack[5], state[3]);
         /*<<format.ml:345:4>>*/ return 0;
       case 3:
         /*<<format.ml:378:16>>*/  /*<<format.ml:378:16>>*/ var
         match$4 =
            /*<<format.ml:378:16>>*/ caml_call1(Stdlib_Stack[7], state[2]);
         /*<<format.ml:378:16>>*/ if(! match$4)
          /*<<format.ml:379:14>>*/ return pp_output_newline(state);
        var width$0 = match$4[1][2];
        return break_line(state, width$0);
       case 4:
         /*<<format.ml:384:4>>*/  /*<<format.ml:384:4>>*/ var
         _bO_ = state[10] !== (state[6] - state[9] | 0) ? 1 : 0;
         /*<<format.ml:384:4>>*/ if(! _bO_)
          /*<<format.ml:419:5>>*/ return _bO_;
         /*<<format.ml:306:8>>*/  /*<<format.ml:306:8>>*/ var
         match$1 =
            /*<<format.ml:306:8>>*/ caml_call1(Stdlib_Queue[6], state[28]);
         /*<<format.ml:306:8>>*/ if(! match$1)
          /*<<format.ml:307:12>>*/ return 0;
        var match$2 = match$1[1], size = match$2[1], length = match$2[3];
        state[12] = state[12] - length | 0;
        state[9] = state[9] + size | 0;
        return 0;
       default:
         /*<<format.ml:419:17>>*/  /*<<format.ml:419:17>>*/ var
         match$5 =
            /*<<format.ml:419:17>>*/ caml_call1(Stdlib_Stack[5], state[5]);
         /*<<format.ml:419:17>>*/ if(! match$5)
          /*<<format.ml:420:15>>*/ return 0;
         /*<<format.ml:422:7>>*/ var
          /*<<format.ml:422:7>>*/ tag_name = match$5[1],
          /*<<format.ml:422:20>>*/ marker =
            /*<<format.ml:422:20>>*/ caml_call1(state[25], tag_name);
         /*<<format.ml:422:20>>*/ return pp_output_string(state, marker);
     }
    switch(param[0]){
      case 0:
        /*<<format.ml:323:4>>*/  /*<<format.ml:323:4>>*/ var s = param[1];
        /*<<format.ml:323:4>>*/ return format_pp_text(state, size$0, s);
      case 1:
        /*<<format.ml:389:16>>*/ var
        breaks = param[2],
        fits = param[1],
        off = breaks[2],
        before = breaks[1],
         /*<<format.ml:389:16>>*/ match$6 =
           /*<<format.ml:389:16>>*/ caml_call1(Stdlib_Stack[7], state[2]);
        /*<<format.ml:389:16>>*/ if(! match$6)
         /*<<format.ml:390:14>>*/ return 0;
       var
        match$7 = match$6[1],
        width$1 = match$7[2],
        box_type$0 = match$7[1];
       switch(box_type$0){
         case 0:
           /*<<format.ml:409:19>>*/ return break_same_line(state, fits);
         case 1:
           /*<<format.ml:408:19>>*/ return break_new_line
                  (state, breaks, width$1);
         case 2:
           /*<<format.ml:406:20>>*/ return break_new_line
                  (state, breaks, width$1);
         case 3:
           /*<<format.ml:394:8>>*/ return state[9]
                  <
                   (size$0
                   +  /*<<format.ml:394:8>>*/ caml_ml_string_length(before)
                   | 0)
                  ? break_new_line(state, breaks, width$1)
                  : break_same_line(state, fits);
         case 4:
           /*<<format.ml:399:8>>*/ return state[11]
                  ? break_same_line(state, fits)
                  : state
                     [9]
                    <
                     (size$0
                     +  /*<<format.ml:400:8>>*/ caml_ml_string_length(before)
                     | 0)
                    ? break_new_line(state, breaks, width$1)
                    : ((state
                       [6]
                      - width$1
                      | 0)
                      + off
                      | 0)
                      < state[10]
                      ? break_new_line(state, breaks, width$1)
                      : break_same_line(state, fits);
         default:
           /*<<format.ml:407:19>>*/ return break_same_line(state, fits);
       }
      case 2:
        /*<<format.ml:359:16>>*/ var
        off$0 = param[2],
        n = param[1],
        insertion_point = state[6] - state[9] | 0,
         /*<<format.ml:359:16>>*/ match$8 =
           /*<<format.ml:359:16>>*/ caml_call1(Stdlib_Stack[7], state[3]);
        /*<<format.ml:359:16>>*/ if(! match$8)
         /*<<format.ml:360:14>>*/ return 0;
       var tabs$0 = match$8[1][1], match$9 = tabs$0[1];
       if(match$9){
         /*<<format.ml:366:10>>*/ var
          /*<<format.ml:366:10>>*/ first = match$9[1],
         param$0 = tabs$0[1];
         /*<<format.ml:366:25>>*/ for(;;){
          /*<<format.ml:366:25>>*/ if(param$0){
          var tail = param$0[2], head = param$0[1];
          if(insertion_point > head){var param$0 = tail; continue;}
          var _bP_ = head;
         }
         else
          var _bP_ = first;
         var tab = _bP_;
         break;
        }
       }
       else
        var tab = insertion_point;
        /*<<format.ml:371:6>>*/  /*<<format.ml:371:6>>*/ var
        offset = tab - insertion_point | 0;
        /*<<format.ml:371:6>>*/ return 0 <= offset
               ? break_same_line(state, [0, cst$0, offset + n | 0, cst])
               : break_new_line
                 (state, [0, cst$2, tab + off$0 | 0, cst$1], state[6]);
      case 3:
       var
        ty = param[2],
        off$1 = param[1],
        insertion_point$0 = state[6] - state[9] | 0;
       if(state[8] < insertion_point$0){
         /*<<format.ml:295:8>>*/  /*<<format.ml:295:8>>*/ var
         match =
            /*<<format.ml:295:8>>*/ caml_call1(Stdlib_Stack[7], state[2]);
         /*<<format.ml:295:8>>*/ if(match){
         var match$0 = match[1], width = match$0[2], box_type = match$0[1];
          /*<<format.ml:299:6>>*/ if
          (state[9] < width && 3 >= box_type - 1 >>> 0)
           /*<<format.ml:301:51>>*/ break_line(state, width);
        }
        else
          /*<<format.ml:296:12>>*/ pp_output_newline(state);
       }
        /*<<format.ml:329:41>>*/ var
         /*<<format.ml:329:41>>*/ width$2 = state[9] - off$1 | 0,
         /*<<format.ml:329:41>>*/ box_type$1 =
          1 === ty ? 1 : state[9] < size$0 ? ty : 5;
        /*<<format.ml:336:4>>*/ return  /*<<format.ml:336:4>>*/ caml_call2
               (Stdlib_Stack[3], [0, box_type$1, width$2], state[2]);
      case 4:
        /*<<format.ml:342:4>>*/  /*<<format.ml:342:4>>*/ var tbox = param[1];
        /*<<format.ml:342:4>>*/ return  /*<<format.ml:342:4>>*/ caml_call2
               (Stdlib_Stack[3], tbox, state[3]);
      default:
        /*<<format.ml:414:5>>*/ var
         /*<<format.ml:414:5>>*/ tag_name$0 = param[1],
         /*<<format.ml:414:18>>*/ marker$0 =
           /*<<format.ml:414:18>>*/ caml_call1(state[24], tag_name$0);
        /*<<format.ml:415:5>>*/ pp_output_string(state, marker$0);
        /*<<format.ml:415:5>>*/ return  /*<<format.ml:415:5>>*/ caml_call2
               (Stdlib_Stack[3], tag_name$0, state[5]);
    }
   }
   function advance_left(state){
     /*<<format.ml:431:2>>*/ for(;;){
      /*<<format.ml:431:8>>*/  /*<<format.ml:431:8>>*/ var
      match =  /*<<format.ml:431:8>>*/ caml_call1(Stdlib_Queue[9], state[28]);
      /*<<format.ml:431:8>>*/ if(! match)  /*<<format.ml:432:12>>*/ return 0;
      /*<<format.ml:435:7>>*/ var
      match$0 = match[1],
      size = match$0[1],
      length = match$0[3],
      token = match$0[2],
      pending_count = state[13] - state[12] | 0,
       /*<<format.ml:435:7>>*/ _bM_ = 0 <= size ? 1 : 0,
       /*<<format.ml:435:7>>*/ _bN_ =
        _bM_ || (state[9] <= pending_count ? 1 : 0);
      /*<<format.ml:435:71>>*/ if(! _bN_)
       /*<<format.ml:432:12>>*/ return _bN_;
      /*<<format.ml:436:6>>*/  /*<<format.ml:436:6>>*/ caml_call1
      (Stdlib_Queue[5], state[28]);
      /*<<format.ml:437:20>>*/  /*<<format.ml:437:20>>*/ var
      size$0 = 0 <= size ? size : pp_infinity;
      /*<<format.ml:438:6>>*/ format_pp_token(state, size$0, token);
      /*<<format.ml:438:6>>*/ state[12] = length + state[12] | 0;
    }
    /*<<format.ml:441:7>>*/ }
   function enqueue_advance(state, tok){
     /*<<format.ml:445:32>>*/ pp_enqueue(state, tok);
     /*<<format.ml:445:32>>*/ return advance_left(state);
    /*<<format.ml:445:72>>*/ }
   function enqueue_string_as(state, size, s){
     /*<<?>>*/ return enqueue_advance(state, [0, size, [0, s], size]);
    /*<<format.ml:450:78>>*/ }
   function initialize_scan_stack(stack){
     /*<<format.ml:462:2>>*/  /*<<format.ml:462:2>>*/ caml_call1
     (Stdlib_Stack[8], stack);
     /*<<format.ml:462:2>>*/  /*<<format.ml:462:2>>*/ var
     queue_elem = [0, unknown, _b_, 0];
     /*<<format.ml:462:2>>*/ return  /*<<format.ml:462:2>>*/ caml_call2
            (Stdlib_Stack[3], [0, -1, queue_elem], stack);
    /*<<format.ml:464:50>>*/ }
   function set_size(state, ty){
     /*<<format.ml:476:8>>*/  /*<<format.ml:476:8>>*/ var
     match =  /*<<format.ml:476:8>>*/ caml_call1(Stdlib_Stack[7], state[1]);
     /*<<format.ml:476:8>>*/ if(! match)  /*<<format.ml:477:12>>*/ return 0;
    var
     match$0 = match[1],
     queue_elem = match$0[2],
     left_total = match$0[1],
     size = queue_elem[1];
    if(left_total < state[12])
      /*<<format.ml:482:6>>*/ return initialize_scan_stack(state[1]);
     /*<<format.ml:484:6>>*/  /*<<format.ml:484:6>>*/ var
     _bI_ = queue_elem[2];
     /*<<format.ml:484:6>>*/ if(typeof _bI_ !== "number")
      /*<<format.ml:484:6>>*/ switch(_bI_[0]){
       case 3:
         /*<<format.ml:491:8>>*/ var
          /*<<format.ml:491:8>>*/ _bK_ = 1 - ty,
          /*<<format.ml:491:8>>*/ _bL_ =
           _bK_
            ? (queue_elem
               [1]
              = state[13] + size | 0,
               /*<<format.ml:493:10>>*/ caml_call1(Stdlib_Stack[5], state[1]),
              0)
            : _bK_;
         /*<<format.ml:486:8>>*/ return _bL_;
       case 1:
       case 2:
         /*<<format.ml:486:8>>*/  /*<<format.ml:486:8>>*/ var
         _bJ_ =
           ty
            ? (queue_elem
               [1]
              = state[13] + size | 0,
               /*<<format.ml:488:10>>*/ caml_call1(Stdlib_Stack[5], state[1]),
              0)
            : ty;
         /*<<format.ml:497:8>>*/ return _bJ_;
     }
     /*<<format.ml:497:8>>*/ return 0;
    /*<<format.ml:497:10>>*/ }
   function scan_push(state, b, token){
     /*<<format.ml:503:2>>*/ pp_enqueue(state, token);
     /*<<format.ml:503:2>>*/ if(b)
      /*<<format.ml:504:12>>*/ set_size(state, 1);
     /*<<format.ml:504:31>>*/  /*<<format.ml:504:31>>*/ var
     elem = [0, state[13], token];
     /*<<format.ml:504:31>>*/ return  /*<<format.ml:504:31>>*/ caml_call2
            (Stdlib_Stack[3], elem, state[1]);
    /*<<format.ml:506:37>>*/ }
   function pp_open_box_gen(state, indent, br_ty){
     /*<<format.ml:513:2>>*/ state[14] = state[14] + 1 | 0;
     /*<<format.ml:513:2>>*/ if(state[14] < state[15]){
      /*<<format.ml:515:4>>*/ var
       /*<<format.ml:515:4>>*/ size = - state[13] | 0,
      elem = [0, size, [3, indent, br_ty], 0];
     return scan_push(state, 0, elem);
    }
     /*<<format.ml:518:2>>*/  /*<<format.ml:518:2>>*/ var
     _bH_ = state[14] === state[15] ? 1 : 0;
     /*<<format.ml:518:2>>*/ if(! _bH_) return _bH_;
     /*<<format.ml:519:7>>*/  /*<<format.ml:519:7>>*/ var s = state[16];
    return enqueue_string_as
            (state,  /*<<format.ml:454:2>>*/ caml_ml_string_length(s), s);
    /*<<format.ml:519:45>>*/ }
   function pp_close_box(state, param){
     /*<<format.ml:527:2>>*/  /*<<format.ml:527:2>>*/ var
     _bF_ = 1 < state[14] ? 1 : 0;
     /*<<format.ml:527:2>>*/ if(_bF_){
      /*<<format.ml:528:2>>*/ if(state[14] < state[15]){
       /*<<format.ml:531:6>>*/ pp_enqueue(state, [0, zero, 1, 0]);
       /*<<format.ml:532:6>>*/ set_size(state, 1);
       /*<<format.ml:532:27>>*/ set_size(state, 0);
     }
      /*<<format.ml:532:47>>*/ state[14] = state[14] - 1 | 0;
     var _bG_ = 0;
    }
    else
     var _bG_ = _bF_;
     /*<<format.ml:523:28>>*/ return _bG_;
    /*<<format.ml:535:5>>*/ }
   function pp_open_stag(state, tag_name){
     /*<<format.ml:540:2>>*/ if(state[22]){
      /*<<format.ml:542:4>>*/  /*<<format.ml:542:4>>*/ caml_call2
      (Stdlib_Stack[3], tag_name, state[4]);
      /*<<format.ml:543:4>>*/  /*<<format.ml:543:4>>*/ caml_call1
      (state[26], tag_name);
    }
     /*<<format.ml:543:36>>*/  /*<<format.ml:543:36>>*/ var _bE_ = state[23];
     /*<<format.ml:543:36>>*/ if(! _bE_) return _bE_;
     /*<<format.ml:546:4>>*/  /*<<format.ml:546:4>>*/ var
     token = [5, tag_name];
     /*<<format.ml:546:4>>*/ return pp_enqueue(state, [0, zero, token, 0]);
    /*<<format.ml:547:60>>*/ }
   function pp_close_stag(state, param){
     /*<<format.ml:552:2>>*/ if(state[23])
      /*<<format.ml:553:4>>*/ pp_enqueue(state, [0, zero, 5, 0]);
     /*<<format.ml:553:75>>*/  /*<<format.ml:553:75>>*/ var _bC_ = state[22];
     /*<<format.ml:553:75>>*/ if(_bC_){
      /*<<format.ml:555:10>>*/  /*<<format.ml:555:10>>*/ var
      match =  /*<<format.ml:555:10>>*/ caml_call1(Stdlib_Stack[5], state[4]);
      /*<<format.ml:555:10>>*/ if(match){
       /*<<format.ml:558:6>>*/  /*<<format.ml:558:6>>*/ var
       tag_name = match[1];
       /*<<format.ml:558:6>>*/ return  /*<<format.ml:558:6>>*/ caml_call1
              (state[27], tag_name);
     }
     var _bD_ = 0;
    }
    else
     var _bD_ = _bC_;
    return _bD_;
    /*<<format.ml:558:39>>*/ }
   function pp_set_print_tags(state, b){
     /*<<format.ml:560:32>>*/ state[22] = b;
     /*<<format.ml:560:32>>*/ return 0;
    /*<<format.ml:560:56>>*/ }
   function pp_set_mark_tags(state, b){
     /*<<format.ml:561:31>>*/ state[23] = b;
     /*<<format.ml:561:31>>*/ return 0;
    /*<<format.ml:561:54>>*/ }
   function pp_get_print_tags(state, param){
     /*<<format.ml:562:33>>*/ return state[22];
    /*<<format.ml:562:52>>*/ }
   function pp_get_mark_tags(state, param){
     /*<<format.ml:563:32>>*/ return state[23];
    /*<<format.ml:563:50>>*/ }
   function pp_set_tags(state, b){
     /*<<format.ml:565:2>>*/ pp_set_print_tags(state, b);
     /*<<format.ml:565:2>>*/ return pp_set_mark_tags(state, b);
    /*<<format.ml:565:53>>*/ }
   function pp_get_formatter_stag_function(state, param){
     /*<<format.ml:569:47>>*/ return [0,
            state[24],
            state[25],
            state[26],
            state[27]];
    /*<<format.ml:574:1>>*/ }
   function pp_set_formatter_stag_function(state, param){
    var pct = param[4], pot = param[3], mct = param[2], mot = param[1];
    state[24] = mot;
    state[25] = mct;
    state[26] = pot;
    state[27] = pct;
    return 0;
   }
   function pp_rinit(state){
     /*<<format.ml:224:2>>*/ state[12] = 1;
     /*<<format.ml:224:2>>*/ state[13] = 1;
     /*<<format.ml:224:2>>*/  /*<<format.ml:224:2>>*/ caml_call1
     (Stdlib_Queue[11], state[28]);
     /*<<format.ml:592:2>>*/ initialize_scan_stack(state[1]);
     /*<<format.ml:593:2>>*/  /*<<format.ml:593:2>>*/ caml_call1
     (Stdlib_Stack[8], state[2]);
     /*<<format.ml:594:2>>*/  /*<<format.ml:594:2>>*/ caml_call1
     (Stdlib_Stack[8], state[3]);
     /*<<format.ml:595:2>>*/  /*<<format.ml:595:2>>*/ caml_call1
     (Stdlib_Stack[8], state[4]);
     /*<<format.ml:596:2>>*/  /*<<format.ml:596:2>>*/ caml_call1
     (Stdlib_Stack[8], state[5]);
     /*<<format.ml:596:2>>*/ state[10] = 0;
     /*<<format.ml:596:2>>*/ state[14] = 0;
     /*<<format.ml:596:2>>*/ state[9] = state[6];
     /*<<format.ml:523:28>>*/ return pp_open_box_gen(state, 0, 3);
    /*<<format.ml:600:23>>*/ }
   function pp_flush_queue(state, b){
     /*<<format.ml:603:2>>*/  /*<<format.ml:603:2>>*/ var _bA_ = state[4];
     /*<<format.ml:603:2>>*/ function _bB_(param){
      /*<<format.ml:603:23>>*/ return pp_close_stag(state, 0);
     /*<<format.ml:603:45>>*/ }
     /*<<format.ml:603:2>>*/  /*<<format.ml:603:2>>*/ caml_call2
     (Stdlib_Stack[12], _bB_, _bA_);
     /*<<format.ml:610:25>>*/ for(;;){
      /*<<format.ml:610:25>>*/ if(1 < state[14]){
       /*<<format.ml:610:4>>*/ pp_close_box(state, 0);
      continue;
     }
      /*<<format.ml:612:2>>*/ state[13] = pp_infinity;
      /*<<format.ml:613:2>>*/ advance_left(state);
      /*<<format.ml:613:2>>*/ if(b)
       /*<<format.ml:614:12>>*/ pp_output_newline(state);
      /*<<format.ml:614:35>>*/ return pp_rinit(state);
    }
    /*<<format.ml:615:16>>*/ }
   function pp_print_as_size(state, size, s){
     /*<<format.ml:625:2>>*/  /*<<format.ml:625:2>>*/ var
     _bz_ = state[14] < state[15] ? 1 : 0;
     /*<<format.ml:625:2>>*/ return _bz_
            ? enqueue_string_as(state, size, s)
            : _bz_;
    /*<<format.ml:626:37>>*/ }
   function pp_print_as(state, isize, s){
     /*<<?>>*/ return pp_print_as_size(state, isize, s);
    /*<<format.ml:630:46>>*/ }
   function pp_print_string(state, s){
     /*<<format.ml:634:2>>*/ return pp_print_as
            (state,  /*<<format.ml:634:2>>*/ caml_ml_string_length(s), s);
    /*<<format.ml:634:39>>*/ }
   function pp_print_bytes(state, s){
     /*<<format.ml:637:37>>*/ return pp_print_as
            (state,
              /*<<format.ml:637:37>>*/ runtime.caml_ml_bytes_length(s),
              /*<<format.ml:637:37>>*/ caml_call1(Stdlib_Bytes[6], s));
    /*<<format.ml:637:56>>*/ }
   function pp_print_int(state, i){
     /*<<format.ml:640:49>>*/ return pp_print_string
            (state,  /*<<format.ml:640:49>>*/ caml_call1(Stdlib_Int[12], i));
    /*<<format.ml:640:66>>*/ }
   function pp_print_float(state, f){
     /*<<format.ml:643:51>>*/ return pp_print_string
            (state,  /*<<format.ml:643:51>>*/ caml_call1(Stdlib[35], f));
    /*<<format.ml:643:70>>*/ }
   function pp_print_bool(state, b){
     /*<<format.ml:646:50>>*/ return pp_print_string
            (state,  /*<<format.ml:646:50>>*/ caml_call1(Stdlib[30], b));
    /*<<format.ml:646:68>>*/ }
   function pp_print_char(state, c){
     /*<<format.ml:650:22>>*/ return pp_print_as
            (state,
             1,
              /*<<format.ml:650:22>>*/ caml_call2(Stdlib_String[1], 1, c));
    /*<<format.ml:650:39>>*/ }
   function pp_open_hbox(state, param){
     /*<<format.ml:654:28>>*/ return pp_open_box_gen(state, 0, 0);
    /*<<format.ml:654:59>>*/ }
   function pp_open_vbox(state, indent){
     /*<<format.ml:655:32>>*/ return pp_open_box_gen(state, indent, 1);
    /*<<format.ml:655:68>>*/ }
   function pp_open_hvbox(state, indent){
     /*<<format.ml:657:33>>*/ return pp_open_box_gen(state, indent, 2);
    /*<<format.ml:657:70>>*/ }
   function pp_open_hovbox(state, indent){
     /*<<format.ml:658:34>>*/ return pp_open_box_gen(state, indent, 3);
    /*<<format.ml:658:72>>*/ }
   function pp_open_box(state, indent){
     /*<<format.ml:659:31>>*/ return pp_open_box_gen(state, indent, 4);
    /*<<format.ml:659:66>>*/ }
   function pp_print_newline(state, param){
     /*<<format.ml:671:2>>*/ pp_flush_queue(state, 1);
     /*<<format.ml:671:2>>*/ return  /*<<format.ml:671:2>>*/ caml_call1
            (state[18], 0);
    /*<<format.ml:671:50>>*/ }
   function pp_print_flush(state, param){
     /*<<format.ml:673:2>>*/ pp_flush_queue(state, 0);
     /*<<format.ml:673:2>>*/ return  /*<<format.ml:673:2>>*/ caml_call1
            (state[18], 0);
    /*<<format.ml:673:51>>*/ }
   function pp_force_newline(state, param){
     /*<<format.ml:678:2>>*/  /*<<format.ml:678:2>>*/ var
     _by_ = state[14] < state[15] ? 1 : 0;
     /*<<format.ml:678:2>>*/ return _by_
            ? enqueue_advance(state, [0, zero, 3, 0])
            : _by_;
    /*<<format.ml:679:78>>*/ }
   function pp_print_if_newline(state, param){
     /*<<format.ml:684:2>>*/  /*<<format.ml:684:2>>*/ var
     _bx_ = state[14] < state[15] ? 1 : 0;
     /*<<format.ml:684:2>>*/ return _bx_
            ? enqueue_advance(state, [0, zero, 4, 0])
            : _bx_;
    /*<<format.ml:686:61>>*/ }
   function pp_print_custom_break(state, fits, breaks){
     /*<<format.ml:692:2>>*/ var
      /*<<format.ml:692:2>>*/ after = fits[3],
      /*<<format.ml:692:2>>*/ width = fits[2],
      /*<<format.ml:692:2>>*/ before = fits[1],
      /*<<format.ml:692:2>>*/ _bw_ = state[14] < state[15] ? 1 : 0;
     /*<<format.ml:692:2>>*/ if(! _bw_) return _bw_;
     /*<<format.ml:694:4>>*/ var
      /*<<format.ml:694:4>>*/ size = - state[13] | 0,
     token = [1, fits, breaks],
     length =
       (caml_ml_string_length(before) + width | 0)
       + caml_ml_string_length(after)
       | 0,
     elem = [0, size, token, length];
    return scan_push(state, 1, elem);
    /*<<format.ml:698:29>>*/ }
   function pp_print_break(state, width, offset){
     /*<<format.ml:705:2>>*/ return pp_print_custom_break
            (state, [0, cst$6, width, cst$5], [0, cst$4, offset, cst$3]);
    /*<<format.ml:706:50>>*/ }
   function pp_print_space(state, param){
     /*<<format.ml:714:30>>*/ return pp_print_break(state, 1, 0);
    /*<<format.ml:714:54>>*/ }
   function pp_print_cut(state, param){
     /*<<format.ml:715:28>>*/ return pp_print_break(state, 0, 0);
    /*<<format.ml:715:52>>*/ }
   function pp_open_tbox(state, param){
     /*<<format.ml:720:2>>*/ state[14] = state[14] + 1 | 0;
     /*<<format.ml:720:2>>*/  /*<<format.ml:720:2>>*/ var
     _bv_ = state[14] < state[15] ? 1 : 0;
     /*<<format.ml:720:2>>*/ if(! _bv_) return _bv_;
     /*<<format.ml:722:4>>*/  /*<<format.ml:722:4>>*/ var
     elem = [0, zero, [4, [0, [0, 0]]], 0];
     /*<<format.ml:722:4>>*/ return enqueue_advance(state, elem);
    /*<<format.ml:724:30>>*/ }
   function pp_close_tbox(state, param){
     /*<<format.ml:729:2>>*/  /*<<format.ml:729:2>>*/ var
     _bs_ = 1 < state[14] ? 1 : 0;
     /*<<format.ml:729:2>>*/ if(_bs_){
      /*<<format.ml:730:2>>*/  /*<<format.ml:730:2>>*/ var
      _bt_ = state[14] < state[15] ? 1 : 0;
      /*<<format.ml:730:2>>*/ if(_bt_){
       /*<<format.ml:732:5>>*/  /*<<format.ml:732:5>>*/ var
       elem = [0, zero, 2, 0];
       /*<<format.ml:733:5>>*/ enqueue_advance(state, elem);
       /*<<format.ml:733:5>>*/ state[14] = state[14] - 1 | 0;
      var _bu_ = 0;
     }
     else
      var _bu_ = _bt_;
    }
    else
     var _bu_ = _bs_;
    return _bu_;
    /*<<format.ml:735:5>>*/ }
   function pp_print_tbreak(state, width, offset){
     /*<<format.ml:740:2>>*/  /*<<format.ml:740:2>>*/ var
     _br_ = state[14] < state[15] ? 1 : 0;
     /*<<format.ml:740:2>>*/ if(! _br_) return _br_;
     /*<<format.ml:741:4>>*/ var
      /*<<format.ml:741:4>>*/ size = - state[13] | 0,
     elem = [0, size, [2, width, offset], width];
    return scan_push(state, 1, elem);
    /*<<format.ml:743:29>>*/ }
   function pp_print_tab(state, param){
     /*<<format.ml:746:28>>*/ return pp_print_tbreak(state, 0, 0);
    /*<<format.ml:746:53>>*/ }
   function pp_set_tab(state, param){
     /*<<format.ml:749:2>>*/  /*<<format.ml:749:2>>*/ var
     _bq_ = state[14] < state[15] ? 1 : 0;
     /*<<format.ml:749:2>>*/ if(! _bq_) return _bq_;
     /*<<format.ml:750:4>>*/  /*<<format.ml:750:4>>*/ var
     elem = [0, zero, 0, 0];
     /*<<format.ml:750:4>>*/ return enqueue_advance(state, elem);
    /*<<format.ml:751:30>>*/ }
   function pp_set_max_boxes(state, n){
     /*<<format.ml:761:31>>*/ var
      /*<<format.ml:761:31>>*/ _bo_ = 1 < n ? 1 : 0,
      /*<<format.ml:761:31>>*/ _bp_ = _bo_ ? (state[15] = n, 0) : _bo_;
    return _bp_;
    /*<<format.ml:761:68>>*/ }
   function pp_get_max_boxes(state, param){
     /*<<format.ml:764:32>>*/ return state[15];
    /*<<format.ml:764:50>>*/ }
   function pp_over_max_boxes(state, param){
     /*<<format.ml:766:33>>*/ return state[14] === state[15] ? 1 : 0;
    /*<<format.ml:766:73>>*/ }
   function pp_set_ellipsis_text(state, s){
     /*<<format.ml:769:35>>*/ state[16] = s;
     /*<<format.ml:769:35>>*/ return 0;
    /*<<format.ml:769:57>>*/ }
   function pp_get_ellipsis_text(state, param){
     /*<<format.ml:770:36>>*/ return state[16];
    /*<<format.ml:770:53>>*/ }
   function pp_limit(n){
     /*<<format.ml:775:2>>*/ return n < 1000000010 ? n : 1000000009;
    /*<<format.ml:775:49>>*/ }
   function pp_set_max_indent(state, n$0){
     /*<<format.ml:791:2>>*/  /*<<format.ml:791:2>>*/ var
     _bn_ = 1 < n$0 ? 1 : 0;
     /*<<format.ml:791:2>>*/ if(! _bn_) return _bn_;
     /*<<format.ml:792:4>>*/ var
      /*<<format.ml:792:4>>*/ n$1 = state[6] - n$0 | 0,
      /*<<format.ml:780:2>>*/ _bm_ = 1 <= n$1 ? 1 : 0;
     /*<<format.ml:780:2>>*/ if(! _bm_)  /*<<format.ml:775:2>>*/ return _bm_;
     /*<<format.ml:781:12>>*/  /*<<format.ml:781:12>>*/ var n = pp_limit(n$1);
     /*<<format.ml:781:12>>*/ state[7] = n;
     /*<<format.ml:781:12>>*/ state[8] = state[6] - state[7] | 0;
     /*<<format.ml:781:12>>*/ return pp_rinit(state);
    /*<<format.ml:792:53>>*/ }
   function pp_get_max_indent(state, param){
     /*<<format.ml:795:33>>*/ return state[8];
    /*<<format.ml:795:52>>*/ }
   function pp_set_margin(state, n){
     /*<<format.ml:798:2>>*/  /*<<format.ml:798:2>>*/ var
     _bk_ = 1 <= n ? 1 : 0;
     /*<<format.ml:798:2>>*/ if(! _bk_) return _bk_;
     /*<<format.ml:799:12>>*/  /*<<format.ml:799:12>>*/ var n$0 = pp_limit(n);
     /*<<format.ml:799:12>>*/ state[6] = n$0;
     /*<<format.ml:799:12>>*/ if(state[8] <= state[6])
     var new_max_indent = state[8];
    else
      /*<<format.ml:808:15>>*/ var
       /*<<format.ml:808:15>>*/ _bl_ =
         /*<<format.ml:808:15>>*/ caml_call2
         (Stdlib_Int[11], state[6] - state[7] | 0, state[6] / 2 | 0),
      new_max_indent =
         /*<<format.ml:808:7>>*/ caml_call2(Stdlib_Int[11], _bl_, 1);
     /*<<format.ml:809:40>>*/ return pp_set_max_indent(state, new_max_indent);
    /*<<format.ml:811:42>>*/ }
   function validate_geometry(param){
    var margin = param[2], max_indent = param[1];
    return 2 <= max_indent ? margin <= max_indent ? _c_ : _d_ : _e_;
   }
   function check_geometry(geometry){
     /*<<format.ml:825:8>>*/ return 0 === validate_geometry(geometry)[0]
            ? 1
            : 0;
    /*<<format.ml:827:20>>*/ }
   function pp_get_margin(state, param){
     /*<<format.ml:829:29>>*/ return state[6];
    /*<<format.ml:829:44>>*/ }
   function pp_set_full_geometry(state, param){
    var margin = param[2], max_indent = param[1];
     /*<<format.ml:832:2>>*/ pp_set_margin(state, margin);
     /*<<format.ml:833:2>>*/ pp_set_max_indent(state, max_indent);
     /*<<format.ml:833:2>>*/ return 0;
   }
   function pp_set_geometry(state, max_indent, margin){
     /*<<format.ml:837:2>>*/ var
      /*<<format.ml:837:2>>*/ geometry = [0, max_indent, margin],
      /*<<format.ml:838:8>>*/ match = validate_geometry(geometry);
     /*<<format.ml:838:8>>*/ if(0 === match[0])
      /*<<format.ml:842:4>>*/ return pp_set_full_geometry(state, geometry);
     /*<<format.ml:840:4>>*/ var
      /*<<format.ml:840:4>>*/ msg = match[1],
      /*<<format.ml:840:28>>*/ _bj_ =
        /*<<format.ml:840:28>>*/ caml_call2
        (Stdlib[28], cst_Format_pp_set_geometry, msg);
     /*<<format.ml:840:28>>*/ throw  /*<<format.ml:840:28>>*/ caml_maybe_attach_backtrace
           ([0, Stdlib[6], _bj_], 1);
    /*<<format.ml:842:39>>*/ }
   function pp_safe_set_geometry(state, max_indent, margin){
     /*<<format.ml:845:2>>*/  /*<<format.ml:845:2>>*/ var
     geometry = [0, max_indent, margin];
     /*<<format.ml:846:8>>*/ return 0 === validate_geometry(geometry)[0]
            ? pp_set_full_geometry(state, geometry)
            : 0;
    /*<<format.ml:850:39>>*/ }
   function pp_get_geometry(state, param){
     /*<<format.ml:853:50>>*/ return [0, state[8], state[6]];
    /*<<format.ml:853:78>>*/ }
   function pp_update_geometry(state, update){
     /*<<format.ml:856:17>>*/  /*<<format.ml:856:17>>*/ var
     geometry = pp_get_geometry(state, 0);
     /*<<format.ml:857:29>>*/ return pp_set_full_geometry
            (state,  /*<<format.ml:857:29>>*/ caml_call1(update, geometry));
    /*<<format.ml:857:46>>*/ }
   function pp_set_formatter_out_functions(state, param){
    var j = param[5], i = param[4], h = param[3], g = param[2], f = param[1];
    state[17] = f;
    state[18] = g;
    state[19] = h;
    state[20] = i;
    state[21] = j;
    return 0;
   }
   function pp_get_formatter_out_functions(state, param){
     /*<<format.ml:873:46>>*/ return [0,
            state[17],
            state[18],
            state[19],
            state[20],
            state[21]];
    /*<<format.ml:879:1>>*/ }
   function pp_set_formatter_output_functi(state, f, g){
     /*<<format.ml:884:2>>*/ state[17] = f;
     /*<<format.ml:884:2>>*/ state[18] = g;
     /*<<format.ml:884:2>>*/ return 0;
    /*<<format.ml:884:51>>*/ }
   function pp_get_formatter_output_functi(state, param){
     /*<<format.ml:887:2>>*/ return [0, state[17], state[18]];
    /*<<format.ml:887:43>>*/ }
   function display_newline(state, param){
     /*<<format.ml:891:31>>*/ return  /*<<format.ml:891:31>>*/ caml_call3
            (state[17], cst$7, 0, 1);
    /*<<format.ml:891:60>>*/ }
    /*<<format.ml:894:17>>*/  /*<<format.ml:894:17>>*/ var
    blank_line =
       /*<<format.ml:894:17>>*/ caml_call2(Stdlib_String[1], 80, 32);
    /*<<format.ml:894:17>>*/ function display_blanks(state, n){
    var n$0 = n;
     /*<<format.ml:896:2>>*/ for(;;){
      /*<<format.ml:896:2>>*/  /*<<format.ml:896:2>>*/ var
      _bi_ = 0 < n$0 ? 1 : 0;
      /*<<format.ml:896:2>>*/ if(! _bi_) return _bi_;
      /*<<format.ml:897:2>>*/ if(80 >= n$0)
       /*<<format.ml:897:18>>*/ return  /*<<format.ml:897:18>>*/ caml_call3
              (state[17], blank_line, 0, n$0);
      /*<<format.ml:899:4>>*/  /*<<format.ml:899:4>>*/ caml_call3
      (state[17], blank_line, 0, 80);
      /*<<format.ml:899:4>>*/ var
       /*<<format.ml:899:4>>*/ n$1 = n$0 - 80 | 0,
      n$0 = n$1;
    }
    /*<<format.ml:901:5>>*/ }
    /*<<format.ml:894:17>>*/ function pp_set_formatter_out_channel(state, oc){
     /*<<format.ml:910:25>>*/ state[17] =
      /*<<format.ml:910:25>>*/ caml_call1(Stdlib[69], oc);
     /*<<format.ml:910:25>>*/ state[18] =
     function(param){
       /*<<format.ml:911:35>>*/ return  /*<<format.ml:911:35>>*/ caml_call1
              (Stdlib[63], oc);
      /*<<format.ml:911:43>>*/ };
     /*<<format.ml:912:26>>*/ state[19] =
     function(_bh_){ /*<<?>>*/ return display_newline(state, _bh_);};
     /*<<format.ml:913:25>>*/ state[20] =
     function(_bg_){ /*<<?>>*/ return display_blanks(state, _bg_);};
     /*<<format.ml:914:25>>*/ state[21] =
     function(_bf_){ /*<<?>>*/ return display_blanks(state, _bf_);};
     /*<<format.ml:914:25>>*/ return 0;
    /*<<format.ml:914:45>>*/ }
    /*<<format.ml:894:17>>*/ function default_pp_mark_open_tag(param){
     /*<<format.ml:922:31>>*/ if(param[1] !== String_tag)
      /*<<format.ml:924:9>>*/ return cst$10;
     /*<<format.ml:923:26>>*/ var
     s = param[2],
      /*<<format.ml:923:26>>*/ _be_ =
        /*<<format.ml:923:26>>*/ caml_call2(Stdlib[28], s, cst$8);
     /*<<format.ml:923:26>>*/ return  /*<<format.ml:923:26>>*/ caml_call2
            (Stdlib[28], cst$9, _be_);
    /*<<format.ml:924:11>>*/ }
    /*<<format.ml:894:17>>*/ function default_pp_mark_close_tag(param){
     /*<<format.ml:925:32>>*/ if(param[1] !== String_tag)
      /*<<format.ml:927:9>>*/ return cst$13;
     /*<<format.ml:926:27>>*/ var
     s = param[2],
      /*<<format.ml:926:27>>*/ _bd_ =
        /*<<format.ml:926:27>>*/ caml_call2(Stdlib[28], s, cst$11);
     /*<<format.ml:926:27>>*/ return  /*<<format.ml:926:27>>*/ caml_call2
            (Stdlib[28], cst$12, _bd_);
    /*<<format.ml:927:11>>*/ }
    /*<<format.ml:894:17>>*/ function default_pp_print_open_tag(_bc_){ /*<<?>>*/ return 0;
   }
    /*<<format.ml:894:17>>*/ function default_pp_print_close_tag(_bb_){ /*<<?>>*/ return 0;
   }
    /*<<format.ml:894:17>>*/ function pp_make_formatter(f, g, h, i, j){
     /*<<format.ml:936:17>>*/ var
      /*<<format.ml:936:17>>*/ pp_queue =
        /*<<format.ml:936:17>>*/ caml_call1(Stdlib_Queue[2], 0),
      /*<<format.ml:936:17>>*/ sys_tok = [0, unknown, _f_, 0];
     /*<<format.ml:939:2>>*/  /*<<format.ml:939:2>>*/ caml_call2
     (Stdlib_Queue[3], sys_tok, pp_queue);
     /*<<format.ml:940:19>>*/  /*<<format.ml:940:19>>*/ var
     scan_stack =  /*<<format.ml:940:19>>*/ caml_call1(Stdlib_Stack[2], 0);
     /*<<format.ml:941:2>>*/ initialize_scan_stack(scan_stack);
     /*<<format.ml:942:2>>*/  /*<<format.ml:942:2>>*/ caml_call2
     (Stdlib_Stack[3], [0, 1, sys_tok], scan_stack);
     /*<<format.ml:942:2>>*/ var
      /*<<format.ml:942:2>>*/ _a9_ = Stdlib[19],
      /*<<format.ml:950:20>>*/ _a__ =
        /*<<format.ml:950:20>>*/ caml_call1(Stdlib_Stack[2], 0),
      /*<<format.ml:949:19>>*/ _a$_ =
        /*<<format.ml:949:19>>*/ caml_call1(Stdlib_Stack[2], 0),
      /*<<format.ml:948:20>>*/ _ba_ =
        /*<<format.ml:948:20>>*/ caml_call1(Stdlib_Stack[2], 0);
     /*<<format.ml:947:22>>*/ return [0,
            scan_stack,
             /*<<format.ml:947:22>>*/ caml_call1(Stdlib_Stack[2], 0),
            _ba_,
            _a$_,
            _a__,
            78,
            10,
            68,
            78,
            0,
            1,
            1,
            1,
            1,
            _a9_,
            cst$14,
            f,
            g,
            h,
            i,
            j,
            0,
            0,
            default_pp_mark_open_tag,
            default_pp_mark_close_tag,
            default_pp_print_open_tag,
            default_pp_print_close_tag,
            pp_queue];
   }
    /*<<format.ml:894:17>>*/ function formatter_of_out_functions(out_funs){
     /*<<format.ml:979:2>>*/ return pp_make_formatter
            (out_funs[1], out_funs[2], out_funs[3], out_funs[4], out_funs[5]);
    /*<<format.ml:984:23>>*/ }
    /*<<format.ml:894:17>>*/ function make_formatter(output, flush){
     /*<<format.ml:990:2>>*/ function _a1_(_a8_){ /*<<?>>*/ return 0;}
     /*<<format.ml:990:2>>*/ function _a2_(_a7_){ /*<<?>>*/ return 0;}
     /*<<format.ml:990:12>>*/  /*<<format.ml:990:12>>*/ var
     ppf =
       pp_make_formatter
        (output, flush, function(_a6_){ /*<<?>>*/ return 0;}, _a2_, _a1_);
     /*<<format.ml:991:24>>*/ ppf[19] =
     function(_a5_){ /*<<?>>*/ return display_newline(ppf, _a5_);};
     /*<<format.ml:992:23>>*/ ppf[20] =
     function(_a4_){ /*<<?>>*/ return display_blanks(ppf, _a4_);};
     /*<<format.ml:993:23>>*/ ppf[21] =
     function(_a3_){ /*<<?>>*/ return display_blanks(ppf, _a3_);};
     /*<<format.ml:993:23>>*/ return ppf;
    /*<<format.ml:994:5>>*/ }
    /*<<format.ml:894:17>>*/ function formatter_of_out_channel(oc){
     /*<<format.ml:999:2>>*/ function _a0_(param){
      /*<<format.ml:999:50>>*/ return  /*<<format.ml:999:50>>*/ caml_call1
             (Stdlib[63], oc);
     /*<<format.ml:999:58>>*/ }
     /*<<format.ml:999:17>>*/ return make_formatter
            ( /*<<format.ml:999:17>>*/ caml_call1(Stdlib[69], oc), _a0_);
    /*<<format.ml:999:59>>*/ }
    /*<<format.ml:894:17>>*/ function formatter_of_buffer(b){
     /*<<format.ml:1004:2>>*/ function _aY_(_aZ_){ /*<<?>>*/ return 0;}
     /*<<format.ml:1004:17>>*/ return make_formatter
            ( /*<<format.ml:1004:17>>*/ caml_call1(Stdlib_Buffer[18], b),
             _aY_);
    /*<<format.ml:1004:48>>*/ }
    /*<<format.ml:894:17>>*/  /*<<format.ml:894:17>>*/ var
    pp_buffer_size = 512;
    /*<<format.ml:894:17>>*/ function pp_make_buffer(param){
     /*<<format.ml:1011:24>>*/ return  /*<<format.ml:1011:24>>*/ caml_call1
            (Stdlib_Buffer[1], pp_buffer_size);
    /*<<format.ml:1011:52>>*/ }
    /*<<format.ml:1014:13>>*/ var
     /*<<format.ml:1014:13>>*/ stdbuf = pp_make_buffer(0),
     /*<<format.ml:1018:20>>*/ std_formatter =
      formatter_of_out_channel(Stdlib[39]),
     /*<<format.ml:1019:20>>*/ err_formatter =
      formatter_of_out_channel(Stdlib[40]),
     /*<<format.ml:1020:20>>*/ str_formatter = formatter_of_buffer(stdbuf),
     /*<<format.ml:1025:17>>*/ stdbuf_key =
       /*<<format.ml:1025:17>>*/ caml_call2
       (Stdlib_Domain[10][1], 0, pp_make_buffer);
    /*<<format.ml:1026:8>>*/  /*<<format.ml:1026:8>>*/ caml_call2
    (Stdlib_Domain[10][3], stdbuf_key, stdbuf);
    /*<<format.ml:1026:8>>*/ function _g_(param){
     /*<<format.ml:1029:22>>*/ return formatter_of_buffer
            ( /*<<format.ml:1029:22>>*/ caml_call1
              (Stdlib_Domain[10][2], stdbuf_key));
    /*<<format.ml:1029:42>>*/ }
    /*<<format.ml:1028:24>>*/  /*<<format.ml:1028:24>>*/ var
    str_formatter_key =
       /*<<format.ml:1028:24>>*/ caml_call2(Stdlib_Domain[10][1], 0, _g_);
    /*<<format.ml:1030:8>>*/  /*<<format.ml:1030:8>>*/ caml_call2
    (Stdlib_Domain[10][3], str_formatter_key, str_formatter);
    /*<<format.ml:1030:8>>*/ function buffered_out_string(key, str, ofs, len){
     /*<<format.ml:1033:23>>*/  /*<<format.ml:1033:23>>*/ var
     _aX_ =  /*<<format.ml:1033:23>>*/ caml_call1(Stdlib_Domain[10][2], key);
     /*<<format.ml:1033:23>>*/ return  /*<<format.ml:1033:23>>*/ caml_call4
            (Stdlib_Buffer[18], _aX_, str, ofs, len);
    /*<<format.ml:1033:55>>*/ }
    /*<<format.ml:1030:8>>*/ function buffered_out_flush(oc, key, param){
     /*<<format.ml:1036:12>>*/ var
      /*<<format.ml:1036:12>>*/ buf =
        /*<<format.ml:1036:12>>*/ caml_call1(Stdlib_Domain[10][2], key),
      /*<<format.ml:1037:12>>*/ len =
        /*<<format.ml:1037:12>>*/ caml_call1(Stdlib_Buffer[7], buf),
      /*<<format.ml:1038:12>>*/ str =
        /*<<format.ml:1038:12>>*/ caml_call1(Stdlib_Buffer[2], buf);
     /*<<format.ml:1039:2>>*/  /*<<format.ml:1039:2>>*/ caml_call4
     (Stdlib[69], oc, str, 0, len);
     /*<<format.ml:1040:2>>*/  /*<<format.ml:1040:2>>*/ caml_call1
     (Stdlib[63], oc);
     /*<<format.ml:1040:2>>*/ return  /*<<format.ml:1040:2>>*/ caml_call1
            (Stdlib_Buffer[8], buf);
    /*<<format.ml:1041:18>>*/ }
    /*<<format.ml:1030:8>>*/ function _h_(param){
     /*<<format.ml:1043:48>>*/ return  /*<<format.ml:1043:48>>*/ caml_call1
            (Stdlib_Buffer[1], pp_buffer_size);
    /*<<format.ml:1043:76>>*/ }
    /*<<format.ml:1043:18>>*/  /*<<format.ml:1043:18>>*/ var
    std_buf_key =
       /*<<format.ml:1043:18>>*/ caml_call2(Stdlib_Domain[10][1], 0, _h_);
    /*<<format.ml:1043:18>>*/ function _i_(param){
     /*<<format.ml:1044:48>>*/ return  /*<<format.ml:1044:48>>*/ caml_call1
            (Stdlib_Buffer[1], pp_buffer_size);
    /*<<format.ml:1044:76>>*/ }
    /*<<format.ml:1044:18>>*/  /*<<format.ml:1044:18>>*/ var
    err_buf_key =
       /*<<format.ml:1044:18>>*/ caml_call2(Stdlib_Domain[10][1], 0, _i_);
    /*<<format.ml:1044:18>>*/ function _j_(param){
     /*<<format.ml:1047:2>>*/ function _aG_(_aW_){ /*<<?>>*/ return 0;}
     /*<<format.ml:1047:2>>*/ function _aH_(_aV_){ /*<<?>>*/ return 0;}
     /*<<format.ml:1047:2>>*/ function _aI_(_aU_){ /*<<?>>*/ return 0;}
     /*<<format.ml:1047:2>>*/  /*<<format.ml:1047:2>>*/ var _aJ_ = Stdlib[39];
     /*<<format.ml:1049:6>>*/ function _aK_(_aT_){
      /*<<?>>*/ return buffered_out_flush(_aJ_, std_buf_key, _aT_);
    }
     /*<<format.ml:1048:4>>*/  /*<<format.ml:1048:4>>*/ var
     ppf =
       pp_make_formatter
        (function(_aQ_, _aR_, _aS_){
           /*<<?>>*/ return buffered_out_string(std_buf_key, _aQ_, _aR_, _aS_);
         },
         _aK_,
         _aI_,
         _aH_,
         _aG_);
     /*<<format.ml:1051:24>>*/ ppf[19] =
     function(_aP_){ /*<<?>>*/ return display_newline(ppf, _aP_);};
     /*<<format.ml:1052:23>>*/ ppf[20] =
     function(_aO_){ /*<<?>>*/ return display_blanks(ppf, _aO_);};
     /*<<format.ml:1053:23>>*/ ppf[21] =
     function(_aN_){ /*<<?>>*/ return display_blanks(ppf, _aN_);};
     /*<<format.ml:1054:17>>*/ function _aL_(_aM_){
      /*<<?>>*/ return pp_print_flush(ppf, _aM_);
    }
     /*<<format.ml:1054:2>>*/  /*<<format.ml:1054:2>>*/ caml_call1
     (Stdlib_Domain[6], _aL_);
     /*<<format.ml:1054:2>>*/ return ppf;
    /*<<format.ml:1055:5>>*/ }
    /*<<format.ml:1046:24>>*/  /*<<format.ml:1046:24>>*/ var
    std_formatter_key =
       /*<<format.ml:1046:24>>*/ caml_call2(Stdlib_Domain[10][1], 0, _j_);
    /*<<format.ml:1056:8>>*/  /*<<format.ml:1056:8>>*/ caml_call2
    (Stdlib_Domain[10][3], std_formatter_key, std_formatter);
    /*<<format.ml:1056:8>>*/ function _k_(param){
     /*<<format.ml:1059:2>>*/ function _ap_(_aF_){ /*<<?>>*/ return 0;}
     /*<<format.ml:1059:2>>*/ function _aq_(_aE_){ /*<<?>>*/ return 0;}
     /*<<format.ml:1059:2>>*/ function _ar_(_aD_){ /*<<?>>*/ return 0;}
     /*<<format.ml:1059:2>>*/  /*<<format.ml:1059:2>>*/ var _as_ = Stdlib[40];
     /*<<format.ml:1061:6>>*/ function _at_(_aC_){
      /*<<?>>*/ return buffered_out_flush(_as_, err_buf_key, _aC_);
    }
     /*<<format.ml:1060:4>>*/  /*<<format.ml:1060:4>>*/ var
     ppf =
       pp_make_formatter
        (function(_az_, _aA_, _aB_){
           /*<<?>>*/ return buffered_out_string(err_buf_key, _az_, _aA_, _aB_);
         },
         _at_,
         _ar_,
         _aq_,
         _ap_);
     /*<<format.ml:1063:24>>*/ ppf[19] =
     function(_ay_){ /*<<?>>*/ return display_newline(ppf, _ay_);};
     /*<<format.ml:1064:23>>*/ ppf[20] =
     function(_ax_){ /*<<?>>*/ return display_blanks(ppf, _ax_);};
     /*<<format.ml:1065:23>>*/ ppf[21] =
     function(_aw_){ /*<<?>>*/ return display_blanks(ppf, _aw_);};
     /*<<format.ml:1066:17>>*/ function _au_(_av_){
      /*<<?>>*/ return pp_print_flush(ppf, _av_);
    }
     /*<<format.ml:1066:2>>*/  /*<<format.ml:1066:2>>*/ caml_call1
     (Stdlib_Domain[6], _au_);
     /*<<format.ml:1066:2>>*/ return ppf;
    /*<<format.ml:1067:5>>*/ }
    /*<<format.ml:1058:24>>*/  /*<<format.ml:1058:24>>*/ var
    err_formatter_key =
       /*<<format.ml:1058:24>>*/ caml_call2(Stdlib_Domain[10][1], 0, _k_);
    /*<<format.ml:1068:8>>*/  /*<<format.ml:1068:8>>*/ caml_call2
    (Stdlib_Domain[10][3], err_formatter_key, err_formatter);
    /*<<format.ml:1068:8>>*/ function get_std_formatter(param){
     /*<<format.ml:1070:27>>*/ return  /*<<format.ml:1070:27>>*/ caml_call1
            (Stdlib_Domain[10][2], std_formatter_key);
    /*<<format.ml:1070:52>>*/ }
    /*<<format.ml:1068:8>>*/ function get_err_formatter(param){
     /*<<format.ml:1071:27>>*/ return  /*<<format.ml:1071:27>>*/ caml_call1
            (Stdlib_Domain[10][2], err_formatter_key);
    /*<<format.ml:1071:52>>*/ }
    /*<<format.ml:1068:8>>*/ function get_str_formatter(param){
     /*<<format.ml:1072:27>>*/ return  /*<<format.ml:1072:27>>*/ caml_call1
            (Stdlib_Domain[10][2], str_formatter_key);
    /*<<format.ml:1072:52>>*/ }
    /*<<format.ml:1068:8>>*/ function get_stdbuf(param){
     /*<<format.ml:1073:20>>*/ return  /*<<format.ml:1073:20>>*/ caml_call1
            (Stdlib_Domain[10][2], stdbuf_key);
    /*<<format.ml:1073:38>>*/ }
    /*<<format.ml:1068:8>>*/ function flush_buffer_formatter(buf, ppf){
     /*<<format.ml:1080:2>>*/ pp_flush_queue(ppf, 0);
     /*<<format.ml:1081:10>>*/  /*<<format.ml:1081:10>>*/ var
     s =  /*<<format.ml:1081:10>>*/ caml_call1(Stdlib_Buffer[2], buf);
     /*<<format.ml:1082:2>>*/  /*<<format.ml:1082:2>>*/ caml_call1
     (Stdlib_Buffer[9], buf);
     /*<<format.ml:1082:2>>*/ return s;
    /*<<format.ml:1083:3>>*/ }
    /*<<format.ml:1068:8>>*/ function flush_str_formatter(param){
     /*<<format.ml:1087:15>>*/ var
      /*<<format.ml:1087:15>>*/ stdbuf =
        /*<<format.ml:1087:15>>*/ caml_call1(Stdlib_Domain[10][2], stdbuf_key),
      /*<<format.ml:1088:22>>*/ str_formatter =
        /*<<format.ml:1088:22>>*/ caml_call1
        (Stdlib_Domain[10][2], str_formatter_key);
     /*<<format.ml:1088:22>>*/ return flush_buffer_formatter
            (stdbuf, str_formatter);
    /*<<format.ml:1089:45>>*/ }
    /*<<format.ml:1068:8>>*/ function make_synchronized_formatter
   (output, flush){
     /*<<format.ml:1092:2>>*/ function _an_(param){
      /*<<format.ml:1093:14>>*/ var
       /*<<format.ml:1093:14>>*/ buf =
         /*<<format.ml:1093:14>>*/ caml_call1
         (Stdlib_Buffer[1], pp_buffer_size),
       /*<<format.ml:1094:18>>*/ output$0 =
         /*<<format.ml:1094:18>>*/ caml_call1(Stdlib_Buffer[18], buf);
      /*<<format.ml:1094:18>>*/ function flush$0(param){
       /*<<format.ml:1096:37>>*/  /*<<format.ml:1096:37>>*/ var
       _ao_ =  /*<<format.ml:1096:37>>*/ caml_call1(Stdlib_Buffer[7], buf);
       /*<<format.ml:1096:6>>*/  /*<<format.ml:1096:6>>*/ caml_call3
       (output,
         /*<<format.ml:1096:13>>*/ caml_call1(Stdlib_Buffer[2], buf),
        0,
        _ao_);
       /*<<format.ml:1097:6>>*/  /*<<format.ml:1097:6>>*/ caml_call1
       (Stdlib_Buffer[8], buf);
       /*<<format.ml:1097:6>>*/ return  /*<<format.ml:1097:6>>*/ caml_call1
              (flush, 0);
      /*<<format.ml:1098:14>>*/ }
      /*<<format.ml:1094:18>>*/ return make_formatter(output$0, flush$0);
     /*<<format.ml:1100:33>>*/ }
     /*<<format.ml:1092:2>>*/ return  /*<<format.ml:1092:2>>*/ caml_call2
            (Stdlib_Domain[10][1], 0, _an_);
    /*<<format.ml:1100:34>>*/ }
    /*<<format.ml:1068:8>>*/ function synchronized_formatter_of_out_(oc){
     /*<<format.ml:1103:2>>*/ function _am_(param){
      /*<<format.ml:1103:63>>*/ return  /*<<format.ml:1103:63>>*/ caml_call1
             (Stdlib[63], oc);
     /*<<format.ml:1103:71>>*/ }
     /*<<format.ml:1103:30>>*/ return make_synchronized_formatter
            ( /*<<format.ml:1103:30>>*/ caml_call1(Stdlib[69], oc), _am_);
    /*<<format.ml:1103:72>>*/ }
    /*<<format.ml:1068:8>>*/ function make_symbolic_output_buffer(param){ /*<<format.ml:1130:2>>*/ return [0, 0];
    /*<<format.ml:1130:35>>*/ }
    /*<<format.ml:1068:8>>*/ function clear_symbolic_output_buffer(sob){
     /*<<format.ml:1133:2>>*/ sob[1] = 0;
     /*<<format.ml:1133:2>>*/ return 0;
    /*<<format.ml:1133:36>>*/ }
    /*<<format.ml:1068:8>>*/ function get_symbolic_output_buffer(sob){
     /*<<format.ml:1136:2>>*/ return  /*<<format.ml:1136:2>>*/ caml_call1
            (Stdlib_List[9], sob[1]);
    /*<<format.ml:1136:39>>*/ }
    /*<<format.ml:1068:8>>*/ function flush_symbolic_output_buffer(sob){
     /*<<format.ml:1139:14>>*/  /*<<format.ml:1139:14>>*/ var
     items = get_symbolic_output_buffer(sob);
     /*<<format.ml:1140:2>>*/ clear_symbolic_output_buffer(sob);
     /*<<format.ml:1140:2>>*/ return items;
    /*<<format.ml:1141:7>>*/ }
    /*<<format.ml:1068:8>>*/ function add_symbolic_output_item(sob, item){
     /*<<format.ml:1144:2>>*/ sob[1] = [0, item, sob[1]];
     /*<<format.ml:1144:2>>*/ return 0;
    /*<<format.ml:1144:70>>*/ }
    /*<<format.ml:1068:8>>*/ function formatter_of_symbolic_output_b(sob){
     /*<<format.ml:1158:10>>*/ function f(s, i, n){
      /*<<format.ml:1152:48>>*/ return add_symbolic_output_item
             (sob,
              [0,
                /*<<format.ml:1152:48>>*/ caml_call3
                (Stdlib_String[15], s, i, n)]);
    }
     /*<<format.ml:1159:10>>*/ function g(_al_){
      /*<<format.ml:1148:4>>*/ return add_symbolic_output_item(sob, 0);
    }
     /*<<format.ml:1160:10>>*/ function h(_ak_){
      /*<<format.ml:1150:4>>*/ return add_symbolic_output_item(sob, 1);
    }
     /*<<format.ml:1161:10>>*/ function i(n){
      /*<<format.ml:1154:4>>*/ return add_symbolic_output_item(sob, [1, n]);
    }
     /*<<format.ml:1162:10>>*/ function j(n){
      /*<<format.ml:1156:4>>*/ return add_symbolic_output_item(sob, [2, n]);
    }
     /*<<format.ml:1162:10>>*/ return pp_make_formatter(f, g, h, i, j);
    /*<<format.ml:1163:29>>*/ }
    /*<<format.ml:1068:8>>*/ function open_hbox(v){
     /*<<format.ml:1172:31>>*/ return pp_open_hbox
            ( /*<<format.ml:1172:31>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1172:60>>*/ }
    /*<<format.ml:1068:8>>*/ function open_vbox(v){
     /*<<format.ml:1173:31>>*/ return pp_open_vbox
            ( /*<<format.ml:1173:31>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1173:60>>*/ }
    /*<<format.ml:1068:8>>*/ function open_hvbox(v){
     /*<<format.ml:1174:33>>*/ return pp_open_hvbox
            ( /*<<format.ml:1174:33>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1174:62>>*/ }
    /*<<format.ml:1068:8>>*/ function open_hovbox(v){
     /*<<format.ml:1175:35>>*/ return pp_open_hovbox
            ( /*<<format.ml:1175:35>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1175:64>>*/ }
    /*<<format.ml:1068:8>>*/ function open_box(v){
     /*<<format.ml:1176:29>>*/ return pp_open_box
            ( /*<<format.ml:1176:29>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1176:58>>*/ }
    /*<<format.ml:1068:8>>*/ function close_box(v){
     /*<<format.ml:1177:31>>*/ return pp_close_box
            ( /*<<format.ml:1177:31>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1177:60>>*/ }
    /*<<format.ml:1068:8>>*/ function open_stag(v){
     /*<<format.ml:1178:31>>*/ return pp_open_stag
            ( /*<<format.ml:1178:31>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1178:60>>*/ }
    /*<<format.ml:1068:8>>*/ function close_stag(v){
     /*<<format.ml:1179:33>>*/ return pp_close_stag
            ( /*<<format.ml:1179:33>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1179:62>>*/ }
    /*<<format.ml:1068:8>>*/ function print_as(v, w){
     /*<<format.ml:1180:31>>*/ return pp_print_as
            ( /*<<format.ml:1180:31>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v,
             w);
    /*<<format.ml:1180:62>>*/ }
    /*<<format.ml:1068:8>>*/ function print_string(v){
     /*<<format.ml:1181:37>>*/ return pp_print_string
            ( /*<<format.ml:1181:37>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1181:66>>*/ }
    /*<<format.ml:1068:8>>*/ function print_bytes(v){
     /*<<format.ml:1182:35>>*/ return pp_print_bytes
            ( /*<<format.ml:1182:35>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1182:64>>*/ }
    /*<<format.ml:1068:8>>*/ function print_int(v){
     /*<<format.ml:1183:31>>*/ return pp_print_int
            ( /*<<format.ml:1183:31>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1183:60>>*/ }
    /*<<format.ml:1068:8>>*/ function print_float(v){
     /*<<format.ml:1184:35>>*/ return pp_print_float
            ( /*<<format.ml:1184:35>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1184:64>>*/ }
    /*<<format.ml:1068:8>>*/ function print_char(v){
     /*<<format.ml:1185:33>>*/ return pp_print_char
            ( /*<<format.ml:1185:33>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1185:62>>*/ }
    /*<<format.ml:1068:8>>*/ function print_bool(v){
     /*<<format.ml:1186:33>>*/ return pp_print_bool
            ( /*<<format.ml:1186:33>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1186:62>>*/ }
    /*<<format.ml:1068:8>>*/ function print_break(v, w){
     /*<<format.ml:1187:37>>*/ return pp_print_break
            ( /*<<format.ml:1187:37>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v,
             w);
    /*<<format.ml:1187:68>>*/ }
    /*<<format.ml:1068:8>>*/ function print_cut(v){
     /*<<format.ml:1188:31>>*/ return pp_print_cut
            ( /*<<format.ml:1188:31>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1188:60>>*/ }
    /*<<format.ml:1068:8>>*/ function print_space(v){
     /*<<format.ml:1189:35>>*/ return pp_print_space
            ( /*<<format.ml:1189:35>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1189:64>>*/ }
    /*<<format.ml:1068:8>>*/ function force_newline(v){
     /*<<format.ml:1190:39>>*/ return pp_force_newline
            ( /*<<format.ml:1190:39>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1190:68>>*/ }
    /*<<format.ml:1068:8>>*/ function print_flush(v){
     /*<<format.ml:1191:35>>*/ return pp_print_flush
            ( /*<<format.ml:1191:35>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1191:64>>*/ }
    /*<<format.ml:1068:8>>*/ function print_newline(v){
     /*<<format.ml:1192:39>>*/ return pp_print_newline
            ( /*<<format.ml:1192:39>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1192:68>>*/ }
    /*<<format.ml:1068:8>>*/ function print_if_newline(v){
     /*<<format.ml:1193:45>>*/ return pp_print_if_newline
            ( /*<<format.ml:1193:45>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1193:74>>*/ }
    /*<<format.ml:1068:8>>*/ function open_tbox(v){
     /*<<format.ml:1195:31>>*/ return pp_open_tbox
            ( /*<<format.ml:1195:31>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1195:60>>*/ }
    /*<<format.ml:1068:8>>*/ function close_tbox(v){
     /*<<format.ml:1196:33>>*/ return pp_close_tbox
            ( /*<<format.ml:1196:33>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1196:62>>*/ }
    /*<<format.ml:1068:8>>*/ function print_tbreak(v, w){
     /*<<format.ml:1197:39>>*/ return pp_print_tbreak
            ( /*<<format.ml:1197:39>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v,
             w);
    /*<<format.ml:1197:70>>*/ }
    /*<<format.ml:1068:8>>*/ function set_tab(v){
     /*<<format.ml:1199:27>>*/ return pp_set_tab
            ( /*<<format.ml:1199:27>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1199:56>>*/ }
    /*<<format.ml:1068:8>>*/ function print_tab(v){
     /*<<format.ml:1200:31>>*/ return pp_print_tab
            ( /*<<format.ml:1200:31>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1200:60>>*/ }
    /*<<format.ml:1068:8>>*/ function set_margin(v){
     /*<<format.ml:1202:33>>*/ return pp_set_margin
            ( /*<<format.ml:1202:33>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1202:62>>*/ }
    /*<<format.ml:1068:8>>*/ function get_margin(v){
     /*<<format.ml:1203:33>>*/ return  /*<<format.ml:1203:33>>*/ caml_call1
             (Stdlib_Domain[10][2], std_formatter_key)
            [6];
    /*<<format.ml:1203:62>>*/ }
    /*<<format.ml:1068:8>>*/ function set_max_indent(v){
     /*<<format.ml:1205:41>>*/ return pp_set_max_indent
            ( /*<<format.ml:1205:41>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1205:70>>*/ }
    /*<<format.ml:1068:8>>*/ function get_max_indent(v){
     /*<<format.ml:1206:41>>*/ return  /*<<format.ml:1206:41>>*/ caml_call1
             (Stdlib_Domain[10][2], std_formatter_key)
            [8];
    /*<<format.ml:1206:70>>*/ }
    /*<<format.ml:1068:8>>*/ function set_geometry(max_indent, margin){
     /*<<format.ml:1209:18>>*/ return pp_set_geometry
            ( /*<<format.ml:1209:18>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             max_indent,
             margin);
    /*<<format.ml:1209:65>>*/ }
    /*<<format.ml:1068:8>>*/ function safe_set_geometry(max_indent, margin){
     /*<<format.ml:1211:23>>*/ return pp_safe_set_geometry
            ( /*<<format.ml:1211:23>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             max_indent,
             margin);
    /*<<format.ml:1211:70>>*/ }
    /*<<format.ml:1068:8>>*/ function get_geometry(v){
     /*<<format.ml:1212:37>>*/ return pp_get_geometry
            ( /*<<format.ml:1212:37>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1212:66>>*/ }
    /*<<format.ml:1068:8>>*/ function update_geometry(v){
     /*<<format.ml:1213:43>>*/ return pp_update_geometry
            ( /*<<format.ml:1213:43>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1213:72>>*/ }
    /*<<format.ml:1068:8>>*/ function set_max_boxes(v){
     /*<<format.ml:1215:39>>*/ return pp_set_max_boxes
            ( /*<<format.ml:1215:39>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1215:68>>*/ }
    /*<<format.ml:1068:8>>*/ function get_max_boxes(v){
     /*<<format.ml:1216:39>>*/ return  /*<<format.ml:1216:39>>*/ caml_call1
             (Stdlib_Domain[10][2], std_formatter_key)
            [15];
    /*<<format.ml:1216:68>>*/ }
    /*<<format.ml:1068:8>>*/ function over_max_boxes(v){
     /*<<format.ml:1217:41>>*/ return pp_over_max_boxes
            ( /*<<format.ml:1217:41>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1217:70>>*/ }
    /*<<format.ml:1068:8>>*/ function set_ellipsis_text(v){
     /*<<format.ml:1219:47>>*/ return pp_set_ellipsis_text
            ( /*<<format.ml:1219:47>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1219:76>>*/ }
    /*<<format.ml:1068:8>>*/ function get_ellipsis_text(v){
     /*<<format.ml:1220:47>>*/ return  /*<<format.ml:1220:47>>*/ caml_call1
             (Stdlib_Domain[10][2], std_formatter_key)
            [16];
    /*<<format.ml:1220:76>>*/ }
    /*<<format.ml:1068:8>>*/ function set_formatter_out_channel(v){
     /*<<format.ml:1223:31>>*/ return pp_set_formatter_out_channel
            ( /*<<format.ml:1223:31>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1223:60>>*/ }
    /*<<format.ml:1068:8>>*/ function set_formatter_out_functions(v){
     /*<<format.ml:1226:33>>*/ return pp_set_formatter_out_functions
            ( /*<<format.ml:1226:33>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1226:62>>*/ }
    /*<<format.ml:1068:8>>*/ function get_formatter_out_functions(v){
     /*<<format.ml:1228:33>>*/ return pp_get_formatter_out_functions
            ( /*<<format.ml:1228:33>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1228:62>>*/ }
    /*<<format.ml:1068:8>>*/ function set_formatter_output_functions(v, w){
     /*<<format.ml:1231:36>>*/ return pp_set_formatter_output_functi
            ( /*<<format.ml:1231:36>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v,
             w);
    /*<<format.ml:1231:67>>*/ }
    /*<<format.ml:1068:8>>*/ function get_formatter_output_functions(v){
     /*<<format.ml:1233:36>>*/ return pp_get_formatter_output_functi
            ( /*<<format.ml:1233:36>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1233:65>>*/ }
    /*<<format.ml:1068:8>>*/ function set_formatter_stag_functions(v){
     /*<<format.ml:1236:34>>*/ return pp_set_formatter_stag_function
            ( /*<<format.ml:1236:34>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1236:63>>*/ }
    /*<<format.ml:1068:8>>*/ function get_formatter_stag_functions(v){
     /*<<format.ml:1238:34>>*/ return pp_get_formatter_stag_function
            ( /*<<format.ml:1238:34>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1238:63>>*/ }
    /*<<format.ml:1068:8>>*/ function set_print_tags(v){
     /*<<format.ml:1240:20>>*/ return pp_set_print_tags
            ( /*<<format.ml:1240:20>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1240:49>>*/ }
    /*<<format.ml:1068:8>>*/ function get_print_tags(v){
     /*<<format.ml:1242:20>>*/ return  /*<<format.ml:1242:20>>*/ caml_call1
             (Stdlib_Domain[10][2], std_formatter_key)
            [22];
    /*<<format.ml:1242:49>>*/ }
    /*<<format.ml:1068:8>>*/ function set_mark_tags(v){
     /*<<format.ml:1244:19>>*/ return pp_set_mark_tags
            ( /*<<format.ml:1244:19>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1244:48>>*/ }
    /*<<format.ml:1068:8>>*/ function get_mark_tags(v){
     /*<<format.ml:1246:19>>*/ return  /*<<format.ml:1246:19>>*/ caml_call1
             (Stdlib_Domain[10][2], std_formatter_key)
            [23];
    /*<<format.ml:1246:48>>*/ }
    /*<<format.ml:1068:8>>*/ function set_tags(v){
     /*<<format.ml:1248:14>>*/ return pp_set_tags
            ( /*<<format.ml:1248:14>>*/ caml_call1
              (Stdlib_Domain[10][2], std_formatter_key),
             v);
    /*<<format.ml:1248:43>>*/ }
    /*<<format.ml:1068:8>>*/ function pp_print_list(opt, pp_v, ppf, param){
    var opt$0 = opt, param$0 = param;
    for(;;){
     if(opt$0)
       /*<<format.ml:1254:33>>*/ var
        /*<<format.ml:1254:33>>*/ sth = opt$0[1],
       pp_sep = sth;
     else
      var pp_sep = pp_print_cut;
      /*<<format.ml:1254:58>>*/ if(! param$0)
       /*<<format.ml:1255:10>>*/ return 0;
     var v = param$0[1];
     if(! param$0[2])
       /*<<format.ml:1256:11>>*/ return  /*<<format.ml:1256:11>>*/ caml_call2
              (pp_v, ppf, v);
     var vs = param$0[2];
      /*<<format.ml:1258:4>>*/  /*<<format.ml:1258:4>>*/ caml_call2
      (pp_v, ppf, v);
      /*<<format.ml:1259:4>>*/  /*<<format.ml:1259:4>>*/ caml_call2
      (pp_sep, ppf, 0);
      /*<<format.ml:1259:4>>*/ var
       /*<<format.ml:1259:4>>*/ opt$1 = [0, pp_sep],
      opt$0 = opt$1,
      param$0 = vs;
    }
   }
    /*<<format.ml:1068:8>>*/ function pp_print_seq(opt, pp_v, ppf, seq$1){
     /*<<format.ml:1272:2>>*/ if(opt)
      /*<<format.ml:1271:28>>*/ var
       /*<<format.ml:1271:28>>*/ sth = opt[1],
      pp_sep = sth;
    else
     var pp_sep = pp_print_cut;
     /*<<format.ml:1272:8>>*/  /*<<format.ml:1272:8>>*/ var
     match$0 =  /*<<format.ml:1272:8>>*/ caml_call1(seq$1, 0);
     /*<<format.ml:1272:8>>*/ if(! match$0)
      /*<<format.ml:1273:15>>*/ return 0;
    var seq$2 = match$0[2], v$0 = match$0[1];
     /*<<format.ml:1275:4>>*/  /*<<format.ml:1275:4>>*/ caml_call2
     (pp_v, ppf, v$0);
    var seq = seq$2;
     /*<<format.ml:1264:2>>*/ for(;;){
      /*<<format.ml:1264:8>>*/  /*<<format.ml:1264:8>>*/ var
      match =  /*<<format.ml:1264:8>>*/ caml_call1(seq, 0);
      /*<<format.ml:1264:8>>*/ if(! match)
       /*<<format.ml:1265:15>>*/ return 0;
     var seq$0 = match[2], v = match[1];
      /*<<format.ml:1267:4>>*/  /*<<format.ml:1267:4>>*/ caml_call2
      (pp_sep, ppf, 0);
      /*<<format.ml:1268:4>>*/  /*<<format.ml:1268:4>>*/ caml_call2
      (pp_v, ppf, v);
     var seq = seq$0;
    }
    /*<<format.ml:1276:40>>*/ }
    /*<<format.ml:1068:8>>*/ function pp_print_text(ppf, s){
     /*<<format.ml:1280:2>>*/ var
      /*<<format.ml:1280:2>>*/ len =
        /*<<format.ml:1280:2>>*/ caml_ml_string_length(s),
      /*<<format.ml:1280:2>>*/ left = [0, 0],
      /*<<format.ml:1280:2>>*/ right = [0, 0];
     /*<<format.ml:1280:2>>*/ function flush(param){
      /*<<format.ml:1284:4>>*/ pp_print_string
      (ppf,
        /*<<format.ml:1284:24>>*/ caml_call3
        (Stdlib_String[15], s, left[1], right[1] - left[1] | 0));
      /*<<format.ml:1284:4>>*/ right[1]++;
      /*<<format.ml:1284:4>>*/ left[1] = right[1];
      /*<<format.ml:1284:4>>*/ return 0;
     /*<<format.ml:1285:31>>*/ }
    for(;;){
     if(right[1] === len){
       /*<<format.ml:1298:2>>*/  /*<<format.ml:1298:2>>*/ var
       _aj_ = left[1] !== len ? 1 : 0;
       /*<<format.ml:1298:2>>*/ return _aj_ ? flush(0) : _aj_;
     }
      /*<<format.ml:1288:10>>*/  /*<<format.ml:1288:10>>*/ var
      match =  /*<<format.ml:1288:10>>*/ runtime.caml_string_get(s, right[1]);
      /*<<format.ml:1288:10>>*/ if(10 === match){
       /*<<format.ml:1290:8>>*/ flush(0);
       /*<<format.ml:1291:8>>*/ pp_force_newline(ppf, 0);
     }
     else if(32 === match){
       /*<<format.ml:1293:8>>*/ flush(0);
       /*<<format.ml:1293:18>>*/ pp_print_space(ppf, 0);
     }
     else
       /*<<format.ml:1296:13>>*/ right[1]++;
    }
    /*<<format.ml:1298:31>>*/ }
    /*<<format.ml:1068:8>>*/ function pp_print_option(opt, pp_v, ppf, param){
     /*<<?>>*/ if(opt)
      /*<<format.ml:1300:29>>*/ var
       /*<<format.ml:1300:29>>*/ sth = opt[1],
      none = sth;
    else
     var
      none =
        function(param, _ai_){
          /*<<format.ml:1300:41>>*/ return 0;
         /*<<format.ml:1300:43>>*/ };
     /*<<format.ml:1300:29>>*/ if(! param)
      /*<<format.ml:1301:10>>*/ return  /*<<format.ml:1301:10>>*/ caml_call2
             (none, ppf, 0);
     /*<<format.ml:1302:12>>*/  /*<<format.ml:1302:12>>*/ var v = param[1];
     /*<<format.ml:1302:12>>*/ return  /*<<format.ml:1302:12>>*/ caml_call2
            (pp_v, ppf, v);
   }
    /*<<format.ml:1068:8>>*/ function pp_print_result(ok, error, ppf, param){
     /*<<?>>*/ if(0 === param[0]){
      /*<<format.ml:1305:10>>*/  /*<<format.ml:1305:10>>*/ var v = param[1];
      /*<<format.ml:1305:10>>*/ return  /*<<format.ml:1305:10>>*/ caml_call2
             (ok, ppf, v);
    }
     /*<<format.ml:1306:13>>*/  /*<<format.ml:1306:13>>*/ var e = param[1];
     /*<<format.ml:1306:13>>*/ return  /*<<format.ml:1306:13>>*/ caml_call2
            (error, ppf, e);
   }
    /*<<format.ml:1068:8>>*/ function pp_print_either(left, right, ppf, param){
     /*<<?>>*/ if(0 === param[0]){
      /*<<format.ml:1309:19>>*/  /*<<format.ml:1309:19>>*/ var l = param[1];
      /*<<format.ml:1309:19>>*/ return  /*<<format.ml:1309:19>>*/ caml_call2
             (left, ppf, l);
    }
     /*<<format.ml:1310:20>>*/  /*<<format.ml:1310:20>>*/ var r = param[1];
     /*<<format.ml:1310:20>>*/ return  /*<<format.ml:1310:20>>*/ caml_call2
            (right, ppf, r);
   }
    /*<<format.ml:1068:8>>*/ function compute_tag(output, tag_acc){
     /*<<format.ml:1315:12>>*/ var
      /*<<format.ml:1315:12>>*/ buf =
        /*<<format.ml:1315:12>>*/ caml_call1(Stdlib_Buffer[1], 16),
      /*<<format.ml:1316:12>>*/ ppf = formatter_of_buffer(buf);
     /*<<format.ml:1317:2>>*/  /*<<format.ml:1317:2>>*/ caml_call2
     (output, ppf, tag_acc);
     /*<<format.ml:1318:2>>*/ pp_print_flush(ppf, 0);
     /*<<format.ml:1319:12>>*/  /*<<format.ml:1319:12>>*/ var
     len =  /*<<format.ml:1319:12>>*/ caml_call1(Stdlib_Buffer[7], buf);
     /*<<format.ml:1319:12>>*/ return 2 <= len
            ?  /*<<format.ml:1321:7>>*/ caml_call3
              (Stdlib_Buffer[4], buf, 1, len - 2 | 0)
            :  /*<<format.ml:1320:18>>*/ caml_call1(Stdlib_Buffer[2], buf);
    /*<<format.ml:1321:33>>*/ }
    /*<<format.ml:1068:8>>*/ function output_formatting_lit(ppf, fmting_lit){
     /*<<format.ml:1334:43>>*/ if(typeof fmting_lit === "number")
      /*<<format.ml:1334:43>>*/ switch(fmting_lit){
       case 0:
         /*<<format.ml:1335:33>>*/ return pp_close_box(ppf, 0);
       case 1:
         /*<<format.ml:1336:33>>*/ return pp_close_stag(ppf, 0);
       case 2:
         /*<<format.ml:1338:33>>*/ return pp_print_flush(ppf, 0);
       case 3:
         /*<<format.ml:1339:33>>*/ return pp_force_newline(ppf, 0);
       case 4:
         /*<<format.ml:1340:33>>*/ return pp_print_newline(ppf, 0);
       case 5:
         /*<<format.ml:1342:33>>*/ return pp_print_char(ppf, 64);
       default:  /*<<format.ml:1343:33>>*/ return pp_print_char(ppf, 37);
     }
     /*<<format.ml:1334:43>>*/ switch(fmting_lit[0]){
      case 0:
       var offset = fmting_lit[3], width = fmting_lit[2];
       return pp_print_break(ppf, width, offset);
      case 1:
        /*<<format.ml:1341:33>>*/ return 0;
      default:
       var c = fmting_lit[1];
        /*<<format.ml:1344:33>>*/ pp_print_char(ppf, 64);
        /*<<format.ml:1344:33>>*/ return pp_print_char(ppf, c);
    }
    /*<<format.ml:1344:75>>*/ }
    /*<<format.ml:1068:8>>*/ function output_acc(ppf, acc){
    var switch$0 = 0;
     /*<<format.ml:1350:29>>*/ if(typeof acc === "number")
      /*<<format.ml:1376:32>>*/ return 0;
     /*<<format.ml:1350:29>>*/ switch(acc[0]){
      case 0:
       var f = acc[2], p = acc[1];
        /*<<format.ml:1360:4>>*/ output_acc(ppf, p);
        /*<<format.ml:1360:4>>*/ return output_formatting_lit(ppf, f);
      case 1:
       var match = acc[2], p$0 = acc[1];
       if(0 === match[0]){
         /*<<format.ml:1363:4>>*/  /*<<format.ml:1363:4>>*/ var
         acc$0 = match[1];
         /*<<format.ml:1363:4>>*/ output_acc(ppf, p$0);
         /*<<format.ml:1364:33>>*/ return pp_open_stag
                (ppf, [0, String_tag, compute_tag(output_acc, acc$0)]);
       }
       var acc$1 = match[1];
        /*<<format.ml:1366:4>>*/ output_acc(ppf, p$0);
        /*<<format.ml:1367:43>>*/ var
         /*<<format.ml:1367:43>>*/ _$_ = compute_tag(output_acc, acc$1),
         /*<<format.ml:1367:24>>*/ match$0 =
           /*<<format.ml:1367:24>>*/ caml_call1(CamlinternalFormat[20], _$_),
         /*<<format.ml:1367:24>>*/ bty = match$0[2],
         /*<<format.ml:1367:24>>*/ indent = match$0[1];
        /*<<format.ml:1367:24>>*/ return pp_open_box_gen(ppf, indent, bty);
      case 2:
       var _aa_ = acc[1], switch$1 = 0;
       if(typeof _aa_ === "number" || ! (0 === _aa_[0]))
        switch$1 = 1;
       else{
        var _ab_ = _aa_[2], switch$2 = 0;
        if(typeof _ab_ === "number" || ! (1 === _ab_[0]))
         switch$2 = 1;
        else
         var s$0 = acc[2], size = _ab_[2], p$2 = _aa_[1];
        if(switch$2) switch$1 = 1;
       }
       if(switch$1){var s = acc[2], p$1 = _aa_; switch$0 = 2;}
       break;
      case 3:
       var _ac_ = acc[1], switch$3 = 0;
       if(typeof _ac_ === "number" || ! (0 === _ac_[0]))
        switch$3 = 1;
       else{
        var _ad_ = _ac_[2], switch$4 = 0;
        if(typeof _ad_ === "number" || ! (1 === _ad_[0]))
         switch$4 = 1;
        else{var c$0 = acc[2], size$0 = _ad_[2], p$4 = _ac_[1]; switch$0 = 1;}
        if(switch$4) switch$3 = 1;
       }
       if(switch$3){var c = acc[2], p$3 = _ac_; switch$0 = 3;}
       break;
      case 4:
       var _ae_ = acc[1], switch$5 = 0;
       if(typeof _ae_ === "number" || ! (0 === _ae_[0]))
        switch$5 = 1;
       else{
        var _af_ = _ae_[2], switch$6 = 0;
        if(typeof _af_ === "number" || ! (1 === _af_[0]))
         switch$6 = 1;
        else
         var s$0 = acc[2], size = _af_[2], p$2 = _ae_[1];
        if(switch$6) switch$5 = 1;
       }
       if(switch$5){var s = acc[2], p$1 = _ae_; switch$0 = 2;}
       break;
      case 5:
       var _ag_ = acc[1], switch$7 = 0;
       if(typeof _ag_ === "number" || ! (0 === _ag_[0]))
        switch$7 = 1;
       else{
        var _ah_ = _ag_[2], switch$8 = 0;
        if(typeof _ah_ === "number" || ! (1 === _ah_[0]))
         switch$8 = 1;
        else{var c$0 = acc[2], size$0 = _ah_[2], p$4 = _ag_[1]; switch$0 = 1;}
        if(switch$8) switch$7 = 1;
       }
       if(switch$7){var c = acc[2], p$3 = _ag_; switch$0 = 3;}
       break;
      case 6:
       var f$0 = acc[2], p$5 = acc[1];
        /*<<format.ml:1373:32>>*/ output_acc(ppf, p$5);
        /*<<format.ml:1373:32>>*/ return  /*<<format.ml:1373:32>>*/ caml_call1
               (f$0, ppf);
      case 7:
       var p$6 = acc[1];
        /*<<format.ml:1374:32>>*/ output_acc(ppf, p$6);
        /*<<format.ml:1374:32>>*/ return pp_print_flush(ppf, 0);
      default:
       var msg = acc[2], p$7 = acc[1];
        /*<<format.ml:1375:32>>*/ output_acc(ppf, p$7);
        /*<<format.ml:1375:32>>*/ return  /*<<format.ml:1375:32>>*/ caml_call1
               (Stdlib[1], msg);
    }
    switch(switch$0){
      case 0:
        /*<<format.ml:1353:4>>*/ output_acc(ppf, p$2);
       return pp_print_as_size(ppf, size, s$0);
      case 1:
        /*<<format.ml:1357:4>>*/ output_acc(ppf, p$4);
       return pp_print_as_size
               (ppf,
                size$0,
                 /*<<format.ml:1358:44>>*/ caml_call2
                 (Stdlib_String[1], 1, c$0));
      case 2:
        /*<<format.ml:1370:32>>*/ output_acc(ppf, p$1);
        /*<<format.ml:1370:32>>*/ return pp_print_string(ppf, s);
      default:
        /*<<format.ml:1372:32>>*/ output_acc(ppf, p$3);
        /*<<format.ml:1372:32>>*/ return pp_print_char(ppf, c);
    }
    /*<<format.ml:1376:34>>*/ }
    /*<<format.ml:1068:8>>*/ function strput_acc(ppf, acc){
    var switch$0 = 0;
     /*<<format.ml:1382:29>>*/ if(typeof acc === "number")
      /*<<format.ml:1411:32>>*/ return 0;
     /*<<format.ml:1382:29>>*/ switch(acc[0]){
      case 0:
       var f = acc[2], p = acc[1];
        /*<<format.ml:1395:4>>*/ strput_acc(ppf, p);
        /*<<format.ml:1395:4>>*/ return output_formatting_lit(ppf, f);
      case 1:
       var match = acc[2], p$0 = acc[1];
       if(0 === match[0]){
         /*<<format.ml:1398:4>>*/  /*<<format.ml:1398:4>>*/ var
         acc$0 = match[1];
         /*<<format.ml:1398:4>>*/ strput_acc(ppf, p$0);
         /*<<format.ml:1399:33>>*/ return pp_open_stag
                (ppf, [0, String_tag, compute_tag(strput_acc, acc$0)]);
       }
       var acc$1 = match[1];
        /*<<format.ml:1401:4>>*/ strput_acc(ppf, p$0);
        /*<<format.ml:1402:43>>*/ var
         /*<<format.ml:1402:43>>*/ _S_ = compute_tag(strput_acc, acc$1),
         /*<<format.ml:1402:24>>*/ match$0 =
           /*<<format.ml:1402:24>>*/ caml_call1(CamlinternalFormat[20], _S_),
         /*<<format.ml:1402:24>>*/ bty = match$0[2],
         /*<<format.ml:1402:24>>*/ indent = match$0[1];
        /*<<format.ml:1402:24>>*/ return pp_open_box_gen(ppf, indent, bty);
      case 2:
       var _T_ = acc[1], switch$1 = 0;
       if(typeof _T_ === "number" || ! (0 === _T_[0]))
        switch$1 = 1;
       else{
        var _U_ = _T_[2], switch$2 = 0;
        if(typeof _U_ === "number" || ! (1 === _U_[0]))
         switch$2 = 1;
        else
         var s$0 = acc[2], size = _U_[2], p$2 = _T_[1];
        if(switch$2) switch$1 = 1;
       }
       if(switch$1){var s = acc[2], p$1 = _T_; switch$0 = 2;}
       break;
      case 3:
       var _V_ = acc[1], switch$3 = 0;
       if(typeof _V_ === "number" || ! (0 === _V_[0]))
        switch$3 = 1;
       else{
        var _W_ = _V_[2], switch$4 = 0;
        if(typeof _W_ === "number" || ! (1 === _W_[0]))
         switch$4 = 1;
        else{var c$0 = acc[2], size$0 = _W_[2], p$4 = _V_[1]; switch$0 = 1;}
        if(switch$4) switch$3 = 1;
       }
       if(switch$3){var c = acc[2], p$3 = _V_; switch$0 = 3;}
       break;
      case 4:
       var _X_ = acc[1], switch$5 = 0;
       if(typeof _X_ === "number" || ! (0 === _X_[0]))
        switch$5 = 1;
       else{
        var _Y_ = _X_[2], switch$6 = 0;
        if(typeof _Y_ === "number" || ! (1 === _Y_[0]))
         switch$6 = 1;
        else
         var s$0 = acc[2], size = _Y_[2], p$2 = _X_[1];
        if(switch$6) switch$5 = 1;
       }
       if(switch$5){var s = acc[2], p$1 = _X_; switch$0 = 2;}
       break;
      case 5:
       var _Z_ = acc[1], switch$7 = 0;
       if(typeof _Z_ === "number" || ! (0 === _Z_[0]))
        switch$7 = 1;
       else{
        var ___ = _Z_[2], switch$8 = 0;
        if(typeof ___ === "number" || ! (1 === ___[0]))
         switch$8 = 1;
        else{var c$0 = acc[2], size$0 = ___[2], p$4 = _Z_[1]; switch$0 = 1;}
        if(switch$8) switch$7 = 1;
       }
       if(switch$7){var c = acc[2], p$3 = _Z_; switch$0 = 3;}
       break;
      case 6:
       var p$5 = acc[1];
       if(typeof p$5 !== "number" && 0 === p$5[0]){
        var match$1 = p$5[2];
        if(typeof match$1 !== "number" && 1 === match$1[0]){
         var f$1 = acc[2], size$1 = match$1[2], p$6 = p$5[1];
          /*<<format.ml:1392:4>>*/ strput_acc(ppf, p$6);
         return pp_print_as_size
                 (ppf, size$1,  /*<<format.ml:1393:44>>*/ caml_call1(f$1, 0));
        }
       }
       var f$0 = acc[2];
        /*<<format.ml:1408:32>>*/ strput_acc(ppf, p$5);
        /*<<format.ml:1408:70>>*/ return pp_print_string
               (ppf,  /*<<format.ml:1408:70>>*/ caml_call1(f$0, 0));
      case 7:
       var p$7 = acc[1];
        /*<<format.ml:1409:32>>*/ strput_acc(ppf, p$7);
        /*<<format.ml:1409:32>>*/ return pp_print_flush(ppf, 0);
      default:
       var msg = acc[2], p$8 = acc[1];
        /*<<format.ml:1410:32>>*/ strput_acc(ppf, p$8);
        /*<<format.ml:1410:32>>*/ return  /*<<format.ml:1410:32>>*/ caml_call1
               (Stdlib[1], msg);
    }
    switch(switch$0){
      case 0:
        /*<<format.ml:1385:4>>*/ strput_acc(ppf, p$2);
       return pp_print_as_size(ppf, size, s$0);
      case 1:
        /*<<format.ml:1389:4>>*/ strput_acc(ppf, p$4);
       return pp_print_as_size
               (ppf,
                size$0,
                 /*<<format.ml:1390:44>>*/ caml_call2
                 (Stdlib_String[1], 1, c$0));
      case 2:
        /*<<format.ml:1405:32>>*/ strput_acc(ppf, p$1);
        /*<<format.ml:1405:32>>*/ return pp_print_string(ppf, s);
      default:
        /*<<format.ml:1407:32>>*/ strput_acc(ppf, p$3);
        /*<<format.ml:1407:32>>*/ return pp_print_char(ppf, c);
    }
    /*<<format.ml:1411:34>>*/ }
    /*<<format.ml:1068:8>>*/ function kfprintf(k, ppf, param){
    var fmt = param[1], _Q_ = 0;
    function _R_(acc){
      /*<<format.ml:1421:16>>*/ output_acc(ppf, acc);
      /*<<format.ml:1421:16>>*/ return  /*<<format.ml:1421:16>>*/ caml_call1
             (k, ppf);
     /*<<format.ml:1421:41>>*/ }
    return caml_call3(CamlinternalFormat[7], _R_, _Q_, fmt);
   }
    /*<<format.ml:1068:8>>*/ function ikfprintf(k, ppf, param){
    var fmt = param[1];
    return caml_call3(CamlinternalFormat[8], k, ppf, fmt);
   }
    /*<<format.ml:1068:8>>*/ function ifprintf(ppf, param){
    var fmt = param[1], _N_ = 0;
    function _O_(_P_){ /*<<?>>*/ return 0;}
    return caml_call3(CamlinternalFormat[8], _O_, _N_, fmt);
   }
    /*<<format.ml:1068:8>>*/ function fprintf(ppf){
     /*<<format.ml:1430:18>>*/ function _K_(_M_){ /*<<?>>*/ return 0;}
     /*<<format.ml:1430:18>>*/ return function(_L_){
      /*<<?>>*/ return kfprintf(_K_, ppf, _L_);};
    /*<<format.ml:1430:37>>*/ }
    /*<<format.ml:1068:8>>*/ function printf(param){
    var fmt = param[1], _I_ = 0;
    function _J_(acc){
      /*<<format.ml:1434:27>>*/ return output_acc
             ( /*<<format.ml:1434:27>>*/ caml_call1
               (Stdlib_Domain[10][2], std_formatter_key),
              acc);
     /*<<format.ml:1434:58>>*/ }
    return caml_call3(CamlinternalFormat[7], _J_, _I_, fmt);
   }
    /*<<format.ml:1068:8>>*/ function eprintf(param){
    var fmt = param[1], _G_ = 0;
    function _H_(acc){
      /*<<format.ml:1439:27>>*/ return output_acc
             ( /*<<format.ml:1439:27>>*/ caml_call1
               (Stdlib_Domain[10][2], err_formatter_key),
              acc);
     /*<<format.ml:1439:58>>*/ }
    return caml_call3(CamlinternalFormat[7], _H_, _G_, fmt);
   }
    /*<<format.ml:1068:8>>*/ function kdprintf(k, param){
    var fmt = param[1], _E_ = 0;
    function _F_(acc){
      /*<<format.ml:1444:16>>*/ return  /*<<format.ml:1444:16>>*/ caml_call1
             (k,
              function(ppf){
                /*<<format.ml:1444:30>>*/ return output_acc(ppf, acc);
               /*<<format.ml:1444:48>>*/ });
     /*<<format.ml:1444:49>>*/ }
    return caml_call3(CamlinternalFormat[7], _F_, _E_, fmt);
   }
    /*<<format.ml:1068:8>>*/ function dprintf(fmt){
     /*<<format.ml:1447:18>>*/ return kdprintf
            (function(i){
               /*<<format.ml:1447:37>>*/ return i;
              /*<<format.ml:1447:38>>*/ },
             fmt);
    /*<<format.ml:1447:43>>*/ }
    /*<<format.ml:1068:8>>*/ function ksprintf(k, param){
     /*<<format.ml:1450:10>>*/ var
     fmt = param[1],
      /*<<format.ml:1450:10>>*/ b = pp_make_buffer(0),
      /*<<format.ml:1451:12>>*/ ppf = formatter_of_buffer(b);
     /*<<format.ml:1451:12>>*/ function k$0(acc){
      /*<<format.ml:1453:4>>*/ strput_acc(ppf, acc);
      /*<<format.ml:1454:6>>*/ return  /*<<format.ml:1454:6>>*/ caml_call1
             (k, flush_buffer_formatter(b, ppf));
     /*<<format.ml:1454:36>>*/ }
     /*<<format.ml:1451:12>>*/ return  /*<<format.ml:1451:12>>*/ caml_call3
            (CamlinternalFormat[7], k$0, 0, fmt);
   }
    /*<<format.ml:1068:8>>*/ function sprintf(fmt){
     /*<<format.ml:1458:18>>*/ return ksprintf(id, fmt);
    /*<<format.ml:1458:33>>*/ }
    /*<<format.ml:1068:8>>*/ function kasprintf(k, param){
     /*<<format.ml:1461:10>>*/ var
     fmt = param[1],
      /*<<format.ml:1461:10>>*/ b = pp_make_buffer(0),
      /*<<format.ml:1462:12>>*/ ppf = formatter_of_buffer(b);
     /*<<format.ml:1462:12>>*/ function k$0(acc){
      /*<<format.ml:1464:4>>*/ output_acc(ppf, acc);
      /*<<format.ml:1465:6>>*/ return  /*<<format.ml:1465:6>>*/ caml_call1
             (k, flush_buffer_formatter(b, ppf));
     /*<<format.ml:1465:36>>*/ }
     /*<<format.ml:1462:12>>*/ return  /*<<format.ml:1462:12>>*/ caml_call3
            (CamlinternalFormat[7], k$0, 0, fmt);
   }
    /*<<format.ml:1068:8>>*/ function asprintf(fmt){
     /*<<format.ml:1469:19>>*/ return kasprintf(id, fmt);
    /*<<format.ml:1469:35>>*/ }
    /*<<format.ml:1068:8>>*/ function flush_standard_formatters(param){
     /*<<format.ml:1474:2>>*/ pp_print_flush
     ( /*<<format.ml:1474:17>>*/ caml_call1
       (Stdlib_Domain[10][2], std_formatter_key),
      0);
     /*<<format.ml:1475:17>>*/ return pp_print_flush
            ( /*<<format.ml:1475:17>>*/ caml_call1
              (Stdlib_Domain[10][2], err_formatter_key),
             0);
    /*<<format.ml:1475:47>>*/ }
    /*<<format.ml:1477:9>>*/  /*<<format.ml:1477:9>>*/ caml_call1
    (Stdlib[100], flush_standard_formatters);
    /*<<format.ml:1477:9>>*/ function _l_(param){
     /*<<format.ml:1480:2>>*/ flush_standard_formatters(0);
     /*<<format.ml:1481:11>>*/ var
      /*<<format.ml:1481:11>>*/ init =
       pp_get_formatter_out_functions(std_formatter, 0),
      /*<<format.ml:1481:11>>*/ _m_ = init[5],
      /*<<format.ml:1481:11>>*/ _n_ = init[4],
      /*<<format.ml:1481:11>>*/ _o_ = init[3],
      /*<<format.ml:1481:11>>*/ _p_ = Stdlib[39];
     /*<<format.ml:1484:25>>*/ function _q_(_D_){
      /*<<?>>*/ return buffered_out_flush(_p_, std_buf_key, _D_);
    }
     /*<<format.ml:1482:2>>*/ pp_set_formatter_out_functions
     (std_formatter,
      [0,
       function(_A_, _B_, _C_){
         /*<<?>>*/ return buffered_out_string(std_buf_key, _A_, _B_, _C_);
       },
       _q_,
       _o_,
       _n_,
       _m_]);
     /*<<format.ml:1486:11>>*/ var
      /*<<format.ml:1486:11>>*/ init$0 =
       pp_get_formatter_out_functions(err_formatter, 0),
      /*<<format.ml:1486:11>>*/ _r_ = init$0[5],
      /*<<format.ml:1486:11>>*/ _s_ = init$0[4],
      /*<<format.ml:1486:11>>*/ _t_ = init$0[3],
      /*<<format.ml:1486:11>>*/ _u_ = Stdlib[40];
     /*<<format.ml:1489:25>>*/ function _v_(_z_){
      /*<<?>>*/ return buffered_out_flush(_u_, err_buf_key, _z_);
    }
     /*<<format.ml:1488:26>>*/ return pp_set_formatter_out_functions
            (err_formatter,
             [0,
              function(_w_, _x_, _y_){
                /*<<?>>*/ return buffered_out_string
                       (err_buf_key, _w_, _x_, _y_);
              },
              _v_,
              _t_,
              _s_,
              _r_]);
    /*<<format.ml:1489:71>>*/ }
    /*<<format.ml:1479:9>>*/  /*<<format.ml:1479:9>>*/ caml_call1
    (Stdlib_Domain[5], _l_);
    /*<<format.ml:1479:9>>*/  /*<<format.ml:1479:9>>*/ var
    Stdlib_Format =
      [0,
       pp_open_box,
       open_box,
       pp_close_box,
       close_box,
       pp_open_hbox,
       open_hbox,
       pp_open_vbox,
       open_vbox,
       pp_open_hvbox,
       open_hvbox,
       pp_open_hovbox,
       open_hovbox,
       pp_print_string,
       print_string,
       pp_print_bytes,
       print_bytes,
       pp_print_as,
       print_as,
       pp_print_int,
       print_int,
       pp_print_float,
       print_float,
       pp_print_char,
       print_char,
       pp_print_bool,
       print_bool,
       pp_print_space,
       print_space,
       pp_print_cut,
       print_cut,
       pp_print_break,
       print_break,
       pp_print_custom_break,
       pp_force_newline,
       force_newline,
       pp_print_if_newline,
       print_if_newline,
       pp_print_flush,
       print_flush,
       pp_print_newline,
       print_newline,
       pp_set_margin,
       set_margin,
       pp_get_margin,
       get_margin,
       pp_set_max_indent,
       set_max_indent,
       pp_get_max_indent,
       get_max_indent,
       check_geometry,
       pp_set_geometry,
       set_geometry,
       pp_safe_set_geometry,
       safe_set_geometry,
       pp_update_geometry,
       update_geometry,
       pp_get_geometry,
       get_geometry,
       pp_set_max_boxes,
       set_max_boxes,
       pp_get_max_boxes,
       get_max_boxes,
       pp_over_max_boxes,
       over_max_boxes,
       pp_open_tbox,
       open_tbox,
       pp_close_tbox,
       close_tbox,
       pp_set_tab,
       set_tab,
       pp_print_tab,
       print_tab,
       pp_print_tbreak,
       print_tbreak,
       pp_set_ellipsis_text,
       set_ellipsis_text,
       pp_get_ellipsis_text,
       get_ellipsis_text,
       String_tag,
       pp_open_stag,
       open_stag,
       pp_close_stag,
       close_stag,
       pp_set_tags,
       set_tags,
       pp_set_print_tags,
       set_print_tags,
       pp_set_mark_tags,
       set_mark_tags,
       pp_get_print_tags,
       get_print_tags,
       pp_get_mark_tags,
       get_mark_tags,
       pp_set_formatter_out_channel,
       set_formatter_out_channel,
       pp_set_formatter_output_functi,
       set_formatter_output_functions,
       pp_get_formatter_output_functi,
       get_formatter_output_functions,
       pp_set_formatter_out_functions,
       set_formatter_out_functions,
       pp_get_formatter_out_functions,
       get_formatter_out_functions,
       pp_set_formatter_stag_function,
       set_formatter_stag_functions,
       pp_get_formatter_stag_function,
       get_formatter_stag_functions,
       formatter_of_out_channel,
       synchronized_formatter_of_out_,
       std_formatter,
       get_std_formatter,
       err_formatter,
       get_err_formatter,
       formatter_of_buffer,
       stdbuf,
       get_stdbuf,
       str_formatter,
       get_str_formatter,
       flush_str_formatter,
       make_formatter,
       make_synchronized_formatter,
       formatter_of_out_functions,
       make_symbolic_output_buffer,
       clear_symbolic_output_buffer,
       get_symbolic_output_buffer,
       flush_symbolic_output_buffer,
       add_symbolic_output_item,
       formatter_of_symbolic_output_b,
       pp_print_list,
       pp_print_seq,
       pp_print_text,
       pp_print_option,
       pp_print_result,
       pp_print_either,
       fprintf,
       printf,
       eprintf,
       sprintf,
       asprintf,
       dprintf,
       ifprintf,
       kfprintf,
       kdprintf,
       ikfprintf,
       ksprintf,
       kasprintf];
    /*<<format.ml:1479:9>>*/  /*<<format.ml:1479:9>>*/ runtime.caml_register_global
    (35, Stdlib_Format, "Stdlib__Format");
    /*<<format.ml:1479:9>>*/ return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Scanf
//# unitInfo: Requires: Assert_failure, CamlinternalFormat, CamlinternalFormatBasics, Stdlib, Stdlib__Buffer, Stdlib__Bytes, Stdlib__Int, Stdlib__Printf, Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$5 = '"',
    cst$6 = "-",
    cst_character = "character ",
    cst_scanf_ml = "scanf.ml",
    cst_scanf_bad_conversion$3 = 'scanf: bad conversion "%*"',
    cst_scanning_of = "scanning of ",
    caml_bytes_get = runtime.caml_bytes_get,
    caml_int_of_string = runtime.caml_int_of_string,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<?>>*/ function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
    /*<<scanf.ml:444:2>>*/ var
     /*<<scanf.ml:444:2>>*/ global_data =
       /*<<scanf.ml:444:2>>*/ runtime.caml_get_global_data(),
     /*<<scanf.ml:444:2>>*/ cst$3 = cst$5,
     /*<<scanf.ml:444:2>>*/ cst$4 = cst$5,
     /*<<scanf.ml:444:2>>*/ cst$1 = cst$5,
     /*<<scanf.ml:444:2>>*/ cst$2 = cst$5,
     /*<<scanf.ml:444:2>>*/ cst$0 = cst$5,
     /*<<scanf.ml:444:2>>*/ cst = cst$6,
     /*<<scanf.ml:444:2>>*/ CamlinternalFormat =
      global_data.CamlinternalFormat,
     /*<<scanf.ml:444:2>>*/ CamlinternalFormatBasics =
      global_data.CamlinternalFormatBasics,
     /*<<scanf.ml:444:2>>*/ Stdlib_String = global_data.Stdlib__String,
     /*<<scanf.ml:444:2>>*/ Stdlib = global_data.Stdlib,
     /*<<scanf.ml:444:2>>*/ Assert_failure = global_data.Assert_failure,
     /*<<scanf.ml:444:2>>*/ Stdlib_Printf = global_data.Stdlib__Printf,
     /*<<scanf.ml:444:2>>*/ Stdlib_Int = global_data.Stdlib__Int,
     /*<<scanf.ml:444:2>>*/ Stdlib_Buffer = global_data.Stdlib__Buffer,
     /*<<scanf.ml:444:2>>*/ _r_ = [0, 91],
     /*<<scanf.ml:444:2>>*/ _q_ = [0, 123],
     /*<<scanf.ml:444:2>>*/ cst_end_of_input_not_found = "end of input not found",
     /*<<scanf.ml:444:2>>*/ cst_scanf_bad_conversion_a =
      'scanf: bad conversion "%a"',
     /*<<scanf.ml:444:2>>*/ cst_scanf_bad_conversion_t =
      'scanf: bad conversion "%t"',
     /*<<scanf.ml:444:2>>*/ cst_scanf_missing_reader = "scanf: missing reader",
     /*<<scanf.ml:444:2>>*/ _s_ = [0, cst_scanf_ml, 1414, 13],
     /*<<scanf.ml:444:2>>*/ cst_scanf_bad_conversion_custo =
      'scanf: bad conversion "%?" (custom converter)',
     /*<<scanf.ml:444:2>>*/ cst_scanf_bad_conversion =
      cst_scanf_bad_conversion$3,
     /*<<scanf.ml:444:2>>*/ cst_scanf_bad_conversion$0 = cst_scanf_bad_conversion$3,
     /*<<scanf.ml:444:2>>*/ cst_scanf_bad_conversion$1 =
      'scanf: bad conversion "%-"',
     /*<<scanf.ml:444:2>>*/ cst_scanf_bad_conversion$2 = cst_scanf_bad_conversion$3,
     /*<<scanf.ml:444:2>>*/ _t_ = [0, [3, 0, [10, 0]], "%S%!"],
     /*<<scanf.ml:444:2>>*/ cst_in_format = ' in format "',
     /*<<scanf.ml:444:2>>*/ _p_ = [0, 37, ""],
     /*<<scanf.ml:444:2>>*/ _o_ =
      [0,
       [11,
        "scanf: bad input at char number ",
        [4, 3, 0, 0, [11, ": ", [2, 0, 0]]]],
       "scanf: bad input at char number %i: %s"],
     /*<<scanf.ml:444:2>>*/ _n_ =
      [0,
       [11, "the character ", [1, [11, " cannot start a boolean", 0]]],
       "the character %C cannot start a boolean"],
     /*<<scanf.ml:444:2>>*/ _m_ =
      [0,
       [11, "bad character hexadecimal encoding \\", [0, [0, 0]]],
       "bad character hexadecimal encoding \\%c%c"],
     /*<<scanf.ml:444:2>>*/ _l_ =
      [0,
       [11, "bad character decimal encoding \\", [0, [0, [0, 0]]]],
       "bad character decimal encoding \\%c%c%c"],
     /*<<scanf.ml:444:2>>*/ cst_an = "an",
     /*<<scanf.ml:444:2>>*/ cst_x = "x",
     /*<<scanf.ml:444:2>>*/ cst_nfinity = "nfinity",
     /*<<scanf.ml:444:2>>*/ cst_digits = "digits",
     /*<<scanf.ml:444:2>>*/ _k_ =
      [0,
       [11,
        cst_character,
        [1, [11, " is not a valid ", [2, 0, [11, " digit", 0]]]]],
       "character %C is not a valid %s digit"],
     /*<<scanf.ml:444:2>>*/ cst_decimal_digits = "decimal digits",
     /*<<scanf.ml:444:2>>*/ _j_ =
      [0,
       [11, cst_character, [1, [11, " is not a decimal digit", 0]]],
       "character %C is not a decimal digit"],
     /*<<scanf.ml:444:2>>*/ cst_0b = "0b",
     /*<<scanf.ml:444:2>>*/ cst_0o = "0o",
     /*<<scanf.ml:444:2>>*/ cst_0u = "0u",
     /*<<scanf.ml:444:2>>*/ cst_0x = "0x",
     /*<<scanf.ml:444:2>>*/ _i_ = [0, cst_scanf_ml, 516, 9],
     /*<<scanf.ml:444:2>>*/ _h_ =
      [0,
       [11, "invalid boolean '", [2, 0, [12, 39, 0]]],
       "invalid boolean '%s'"],
     /*<<scanf.ml:444:2>>*/ _g_ =
      [0,
       [11, "looking for ", [1, [11, ", found ", [1, 0]]]],
       "looking for %C, found %C"],
     /*<<scanf.ml:444:2>>*/ cst_not_a_valid_float_in_hexad =
      "not a valid float in hexadecimal notation",
     /*<<scanf.ml:444:2>>*/ cst_no_dot_or_exponent_part_fo =
      "no dot or exponent part found in float token",
     /*<<scanf.ml:444:2>>*/ _f_ =
      [0,
       [11,
        cst_scanning_of,
        [2,
         0,
         [11,
          " failed: premature end of file occurred before end of token",
          0]]],
       "scanning of %s failed: premature end of file occurred before end of token"],
     /*<<scanf.ml:444:2>>*/ _e_ =
      [0,
       [11,
        cst_scanning_of,
        [2,
         0,
         [11, " failed: the specified length was too short for token", 0]]],
       "scanning of %s failed: the specified length was too short for token"],
     /*<<scanf.ml:444:2>>*/ _d_ =
      [0,
       [11, "illegal escape character ", [1, 0]],
       "illegal escape character %C"],
     /*<<scanf.ml:444:2>>*/ cst_unnamed_function = "unnamed function",
     /*<<scanf.ml:444:2>>*/ cst_unnamed_character_string = "unnamed character string",
     /*<<scanf.ml:444:2>>*/ cst_unnamed_Stdlib_input_chann = "unnamed Stdlib input channel",
     /*<<scanf.ml:444:2>>*/ cst_Stdlib_Scanf_Scan_failure = "Stdlib.Scanf.Scan_failure",
     /*<<scanf.ml:444:2>>*/ cst_binary = "binary",
     /*<<scanf.ml:444:2>>*/ cst_octal = "octal",
     /*<<scanf.ml:444:2>>*/ cst_hexadecimal = "hexadecimal",
     /*<<scanf.ml:444:2>>*/ cst_a_Char = "a Char",
     /*<<scanf.ml:444:2>>*/ cst_a_String = "a String",
    null_char = 0;
   function next_char(ib){
     /*<<?>>*/ try{
      /*<<scanf.ml:166:14>>*/  /*<<scanf.ml:166:14>>*/ var
      c =  /*<<scanf.ml:166:14>>*/ caml_call1(ib[7], 0);
      /*<<scanf.ml:166:14>>*/ ib[2] = c;
      /*<<scanf.ml:166:14>>*/ ib[3] = 1;
      /*<<scanf.ml:166:14>>*/ ib[4] = ib[4] + 1 | 0;
      /*<<scanf.ml:166:14>>*/ if(10 === c)
       /*<<scanf.ml:170:23>>*/ ib[5] = ib[5] + 1 | 0;
     return c;
    }
    catch(_bb_){
     var _ba_ = caml_wrap_exception(_bb_);
     if(_ba_ !== Stdlib[12]) throw caml_maybe_attach_backtrace(_ba_, 0);
      /*<<scanf.ml:173:6>>*/ ib[2] = null_char;
      /*<<scanf.ml:173:6>>*/ ib[3] = 0;
      /*<<scanf.ml:173:6>>*/ ib[1] = 1;
      /*<<scanf.ml:173:6>>*/ return null_char;
    }
    /*<<scanf.ml:177:7>>*/ }
   function peek_char(ib){
     /*<<scanf.ml:181:4>>*/ return ib[3] ? ib[2] : next_char(ib);
    /*<<scanf.ml:183:21>>*/ }
   function checked_peek_char(ib){
     /*<<scanf.ml:192:12>>*/  /*<<scanf.ml:192:12>>*/ var c = peek_char(ib);
     /*<<scanf.ml:192:12>>*/ if(ib[1])
      /*<<scanf.ml:193:22>>*/ throw  /*<<scanf.ml:193:22>>*/ caml_maybe_attach_backtrace
            (Stdlib[12], 1);
     /*<<scanf.ml:194:4>>*/ return c;
    /*<<scanf.ml:194:5>>*/ }
   function end_of_input(ib){
     /*<<scanf.ml:198:11>>*/ peek_char(ib);
     /*<<scanf.ml:198:11>>*/ return ib[1];
    /*<<scanf.ml:199:13>>*/ }
   function beginning_of_input(ib){
     /*<<scanf.ml:204:30>>*/ return 0 === ib[4] ? 1 : 0;
    /*<<scanf.ml:204:50>>*/ }
   function name_of_input(ib){
     /*<<scanf.ml:207:4>>*/  /*<<scanf.ml:207:4>>*/ var match = ib[9];
     /*<<scanf.ml:207:4>>*/ if(typeof match === "number")
      /*<<scanf.ml:207:4>>*/ return 0 === match
             ? cst_unnamed_function
             : cst_unnamed_character_string;
     /*<<scanf.ml:207:4>>*/ if(0 === match[0])
      /*<<scanf.ml:208:26>>*/ return cst_unnamed_Stdlib_input_chann;
     /*<<scanf.ml:209:32>>*/  /*<<scanf.ml:209:32>>*/ var fname = match[1];
     /*<<scanf.ml:209:32>>*/ return fname;
    /*<<scanf.ml:211:47>>*/ }
   function char_count(ib){
     /*<<scanf.ml:215:4>>*/ return ib[3] ? ib[4] - 1 | 0 : ib[4];
    /*<<scanf.ml:217:25>>*/ }
   function invalidate_current_char(ib){
     /*<<scanf.ml:224:35>>*/ ib[3] = 0;
     /*<<scanf.ml:224:35>>*/ return 0;
    /*<<scanf.ml:224:71>>*/ }
   function token_string(ib){
     /*<<scanf.ml:227:4>>*/ var
      /*<<scanf.ml:227:4>>*/ token_buffer = ib[8],
      /*<<scanf.ml:228:14>>*/ tok =
        /*<<scanf.ml:228:14>>*/ caml_call1(Stdlib_Buffer[2], token_buffer);
     /*<<scanf.ml:229:4>>*/  /*<<scanf.ml:229:4>>*/ caml_call1
     (Stdlib_Buffer[8], token_buffer);
     /*<<scanf.ml:229:4>>*/ ib[6] = ib[6] + 1 | 0;
     /*<<scanf.ml:229:4>>*/ return tok;
    /*<<scanf.ml:231:7>>*/ }
   function skip_char(width, ib){
     /*<<scanf.ml:237:4>>*/ invalidate_current_char(ib);
     /*<<scanf.ml:237:4>>*/ return width;
    /*<<scanf.ml:238:9>>*/ }
   function ignore_char(width, ib){
     /*<<scanf.ml:241:29>>*/ return skip_char(width - 1 | 0, ib);
    /*<<scanf.ml:241:53>>*/ }
   function store_char(width, ib, c){
     /*<<scanf.ml:244:4>>*/  /*<<scanf.ml:244:4>>*/ caml_call2
     (Stdlib_Buffer[12], ib[8], c);
     /*<<scanf.ml:244:4>>*/ return ignore_char(width, ib);
    /*<<scanf.ml:245:24>>*/ }
   var default_token_buffer_size = 1024;
   function create(iname, next){
     /*<<scanf.ml:258:22>>*/ return [0,
            0,
            null_char,
            0,
            0,
            0,
            0,
            next,
             /*<<scanf.ml:258:22>>*/ caml_call1
             (Stdlib_Buffer[1], default_token_buffer_size),
            iname];
    /*<<scanf.ml:260:3>>*/ }
   function from_string(s){
     /*<<scanf.ml:264:4>>*/ var
      /*<<scanf.ml:264:4>>*/ i = [0, 0],
      /*<<scanf.ml:264:4>>*/ len =
        /*<<scanf.ml:264:4>>*/ caml_ml_string_length(s);
     /*<<scanf.ml:264:4>>*/ function next(param){
      /*<<scanf.ml:267:6>>*/ if(len <= i[1])
       /*<<scanf.ml:267:24>>*/ throw  /*<<scanf.ml:267:24>>*/ caml_maybe_attach_backtrace
             (Stdlib[12], 1);
      /*<<scanf.ml:268:14>>*/  /*<<scanf.ml:268:14>>*/ var
      c =  /*<<scanf.ml:268:14>>*/ caml_string_get(s, i[1]);
      /*<<scanf.ml:268:14>>*/ i[1]++;
      /*<<scanf.ml:268:14>>*/ return c;
     /*<<scanf.ml:270:7>>*/ }
     /*<<scanf.ml:264:4>>*/ return create(1, next);
    /*<<scanf.ml:271:27>>*/ }
   var _a_ = 0;
    /*<<scanf.ml:274:22>>*/ function from_function(_a$_){
     /*<<?>>*/ return create(_a_, _a$_);
   }
    /*<<scanf.ml:274:22>>*/  /*<<scanf.ml:274:22>>*/ var len = 1024;
    /*<<scanf.ml:274:22>>*/ function scan_close_at_end(ic){
     /*<<scanf.ml:320:29>>*/  /*<<scanf.ml:320:29>>*/ caml_call1
     (Stdlib[93], ic);
     /*<<scanf.ml:320:29>>*/ throw  /*<<scanf.ml:320:29>>*/ caml_maybe_attach_backtrace
           (Stdlib[12], 1);
    /*<<scanf.ml:320:66>>*/ }
    /*<<scanf.ml:274:22>>*/ function scan_raise_at_end(ic){
     /*<<scanf.ml:324:30>>*/ throw  /*<<scanf.ml:324:30>>*/ caml_maybe_attach_backtrace
           (Stdlib[12], 1);
    /*<<scanf.ml:324:47>>*/ }
    /*<<scanf.ml:274:22>>*/ function from_ic(scan_close_ic, iname, ic){
     /*<<scanf.ml:328:4>>*/ var
      /*<<scanf.ml:328:4>>*/ buf =
        /*<<scanf.ml:328:4>>*/ runtime.caml_create_bytes(1024),
      /*<<scanf.ml:328:4>>*/ i = [0, 0],
      /*<<scanf.ml:328:4>>*/ lim = [0, 0],
      /*<<scanf.ml:328:4>>*/ eof = [0, 0];
     /*<<scanf.ml:328:4>>*/ function next(param){
      /*<<scanf.ml:333:6>>*/ if(i[1] < lim[1]){
       /*<<scanf.ml:333:38>>*/  /*<<scanf.ml:333:38>>*/ var
       c =  /*<<scanf.ml:333:38>>*/ caml_bytes_get(buf, i[1]);
       /*<<scanf.ml:333:38>>*/ i[1]++;
       /*<<scanf.ml:333:38>>*/ return c;
     }
      /*<<scanf.ml:334:6>>*/ if(eof[1])
       /*<<scanf.ml:334:19>>*/ throw  /*<<scanf.ml:334:19>>*/ caml_maybe_attach_backtrace
             (Stdlib[12], 1);
      /*<<scanf.ml:335:15>>*/ lim[1] =
       /*<<scanf.ml:335:15>>*/ caml_call4(Stdlib[84], ic, buf, 0, len);
      /*<<scanf.ml:335:15>>*/ return 0 === lim[1]
             ? (eof
                [1]
               = 1,
                /*<<scanf.ml:336:25>>*/ caml_call1(scan_close_ic, ic))
             : (i[1] = 1,  /*<<scanf.ml:338:10>>*/ caml_bytes_get(buf, 0));
     /*<<scanf.ml:340:9>>*/ }
     /*<<scanf.ml:328:4>>*/ return create(iname, next);
    /*<<scanf.ml:341:21>>*/ }
    /*<<scanf.ml:363:4>>*/  /*<<scanf.ml:363:4>>*/ var
    stdin = from_ic(scan_raise_at_end, [1, cst, Stdlib[38]], Stdlib[38]);
    /*<<scanf.ml:363:4>>*/ function open_in_file(open_in, fname){
     /*<<scanf.ml:367:4>>*/ if
     (!  /*<<scanf.ml:367:4>>*/ caml_string_notequal(fname, cst$6))
      /*<<scanf.ml:368:13>>*/ return stdin;
     /*<<scanf.ml:370:15>>*/  /*<<scanf.ml:370:15>>*/ var
     ic =  /*<<scanf.ml:370:15>>*/ caml_call1(open_in, fname);
    return from_ic(scan_close_at_end, [1, fname, ic], ic);
    /*<<scanf.ml:371:53>>*/ }
    /*<<scanf.ml:363:4>>*/  /*<<scanf.ml:363:4>>*/ var _b_ = Stdlib[79];
    /*<<scanf.ml:374:16>>*/ function open_in(_a__){
     /*<<?>>*/ return open_in_file(_b_, _a__);
   }
    /*<<scanf.ml:374:16>>*/  /*<<scanf.ml:374:16>>*/ var _c_ = Stdlib[80];
    /*<<scanf.ml:375:20>>*/ function open_in_bin(_a9_){
     /*<<?>>*/ return open_in_file(_c_, _a9_);
   }
    /*<<scanf.ml:375:20>>*/ function from_channel(ic){
     /*<<?>>*/ return from_ic(scan_raise_at_end, [0, ic], ic);
    /*<<scanf.ml:381:45>>*/ }
    /*<<scanf.ml:375:20>>*/ function close_in(ib){
     /*<<scanf.ml:385:4>>*/  /*<<scanf.ml:385:4>>*/ var match = ib[9];
     /*<<scanf.ml:385:4>>*/ if(typeof match === "number")
      /*<<scanf.ml:389:37>>*/ return 0;
     /*<<scanf.ml:385:4>>*/ if(0 === match[0]){
      /*<<scanf.ml:387:6>>*/  /*<<scanf.ml:387:6>>*/ var ic = match[1];
      /*<<scanf.ml:387:6>>*/ return  /*<<scanf.ml:387:6>>*/ caml_call1
             (Stdlib[93], ic);
    }
     /*<<scanf.ml:388:32>>*/  /*<<scanf.ml:388:32>>*/ var ic$0 = match[2];
     /*<<scanf.ml:388:32>>*/ return  /*<<scanf.ml:388:32>>*/ caml_call1
            (Stdlib[93], ic$0);
    /*<<scanf.ml:389:39>>*/ }
    /*<<scanf.ml:375:20>>*/  /*<<scanf.ml:375:20>>*/ var
    Scan_failure =
      [248,
       cst_Stdlib_Scanf_Scan_failure,
        /*<<scanf.ml:375:20>>*/ runtime.caml_fresh_oo_id(0)];
    /*<<scanf.ml:375:20>>*/ function bad_input(s){
     /*<<scanf.ml:405:18>>*/ throw  /*<<scanf.ml:405:18>>*/ caml_maybe_attach_backtrace
           ([0, Scan_failure, s], 1);
    /*<<scanf.ml:405:40>>*/ }
    /*<<scanf.ml:375:20>>*/ function bad_input_escape(c){
     /*<<scanf.ml:408:12>>*/ return bad_input
            ( /*<<scanf.ml:408:12>>*/ caml_call2(Stdlib_Printf[4], _d_, c));
    /*<<scanf.ml:408:60>>*/ }
    /*<<scanf.ml:375:20>>*/ function bad_token_length(message){
     /*<<scanf.ml:413:4>>*/ return bad_input
            ( /*<<scanf.ml:413:4>>*/ caml_call2
              (Stdlib_Printf[4], _e_, message));
    /*<<scanf.ml:416:15>>*/ }
    /*<<scanf.ml:375:20>>*/ function bad_float(param){
     /*<<scanf.ml:428:2>>*/ return bad_input(cst_no_dot_or_exponent_part_fo);
    /*<<scanf.ml:428:58>>*/ }
    /*<<scanf.ml:375:20>>*/ function bad_hex_float(param){
     /*<<scanf.ml:432:2>>*/ return bad_input(cst_not_a_valid_float_in_hexad);
    /*<<scanf.ml:432:55>>*/ }
    /*<<scanf.ml:375:20>>*/ function character_mismatch(c, ci){
     /*<<?>>*/ return bad_input
            ( /*<<scanf.ml:436:2>>*/ caml_call3(Stdlib_Printf[4], _g_, c, ci));
    /*<<scanf.ml:440:41>>*/ }
    /*<<scanf.ml:375:20>>*/ function check_this_char(ib, c){
     /*<<scanf.ml:474:11>>*/  /*<<scanf.ml:474:11>>*/ var
     ci = checked_peek_char(ib);
     /*<<scanf.ml:474:11>>*/ return ci === c
            ? invalidate_current_char(ib)
            : character_mismatch(c, ci);
    /*<<scanf.ml:476:25>>*/ }
    /*<<scanf.ml:375:20>>*/ function check_char(ib, c$0){
     /*<<scanf.ml:468:2>>*/ if(10 === c$0){
      /*<<scanf.ml:479:11>>*/  /*<<scanf.ml:479:11>>*/ var
      ci = checked_peek_char(ib);
      /*<<scanf.ml:479:11>>*/ return 10 === ci
             ? invalidate_current_char(ib)
             : 13
               === ci
               ? (invalidate_current_char(ib), check_this_char(ib, 10))
               : character_mismatch(10, ci);
    }
    if(32 !== c$0)  /*<<scanf.ml:471:9>>*/ return check_this_char(ib, c$0);
     /*<<scanf.ml:444:2>>*/ for(;;){
      /*<<scanf.ml:444:10>>*/ var
       /*<<scanf.ml:444:10>>*/ c = peek_char(ib),
       /*<<scanf.ml:445:9>>*/ _a7_ = 1 - ib[1];
      /*<<scanf.ml:445:9>>*/ if(! _a7_) return _a7_;
      /*<<scanf.ml:445:32>>*/ var
       /*<<scanf.ml:445:32>>*/ _a8_ = c - 9 | 0,
      switch$0 = 0;
      /*<<scanf.ml:445:32>>*/ if(4 < _a8_ >>> 0){
      if(23 === _a8_) switch$0 = 1;
     }
     else if(1 < _a8_ - 2 >>> 0) switch$0 = 1;
     if(! switch$0)  /*<<scanf.ml:449:11>>*/ return 0;
      /*<<scanf.ml:448:6>>*/ invalidate_current_char(ib);
    }
    /*<<scanf.ml:471:29>>*/ }
    /*<<scanf.ml:375:20>>*/ function token_char(ib){
     /*<<scanf.ml:488:39>>*/ return  /*<<scanf.ml:488:39>>*/ caml_string_get
            (token_string(ib), 0);
    /*<<scanf.ml:488:43>>*/ }
    /*<<scanf.ml:375:20>>*/ function token_bool(ib){
     /*<<scanf.ml:493:8>>*/  /*<<scanf.ml:493:8>>*/ var s = token_string(ib);
     /*<<scanf.ml:493:8>>*/ return  /*<<scanf.ml:493:8>>*/ caml_string_notequal
             (s, "false")
            ? caml_string_notequal
               (s, "true")
              ? bad_input
                ( /*<<scanf.ml:496:19>>*/ caml_call2(Stdlib_Printf[4], _h_, s))
              : 1
            : 0;
    /*<<scanf.ml:496:60>>*/ }
    /*<<scanf.ml:375:20>>*/ function integer_conversion_of_char(param){
     /*<<scanf.ml:509:33>>*/  /*<<scanf.ml:509:33>>*/ var
     switcher = param - 88 | 0;
     /*<<scanf.ml:509:33>>*/ if(32 >= switcher >>> 0)
     switch(switcher){
       case 10:
         /*<<scanf.ml:510:11>>*/ return 0;
       case 12:
         /*<<scanf.ml:511:11>>*/ return 1;
       case 17:
         /*<<scanf.ml:512:11>>*/ return 2;
       case 23:
         /*<<scanf.ml:513:11>>*/ return 3;
       case 29:
         /*<<scanf.ml:514:11>>*/ return 4;
       case 0:
       case 32:
         /*<<scanf.ml:515:17>>*/ return 5;
     }
     /*<<scanf.ml:516:9>>*/ throw  /*<<scanf.ml:516:9>>*/ caml_maybe_attach_backtrace
           ([0, Assert_failure, _i_], 1);
    /*<<scanf.ml:516:21>>*/ }
    /*<<scanf.ml:375:20>>*/ function token_int_literal(conv, ib){
     /*<<scanf.ml:523:2>>*/ switch(conv){
      case 0:
        /*<<scanf.ml:529:29>>*/ var
         /*<<scanf.ml:529:29>>*/ _a3_ = token_string(ib),
        tok =  /*<<scanf.ml:529:22>>*/ caml_call2(Stdlib[28], cst_0b, _a3_);
       break;
      case 3:
        /*<<scanf.ml:527:29>>*/ var
         /*<<scanf.ml:527:29>>*/ _a4_ = token_string(ib),
        tok =  /*<<scanf.ml:527:22>>*/ caml_call2(Stdlib[28], cst_0o, _a4_);
       break;
      case 4:
        /*<<scanf.ml:526:29>>*/ var
         /*<<scanf.ml:526:29>>*/ _a5_ = token_string(ib),
        tok =  /*<<scanf.ml:526:22>>*/ caml_call2(Stdlib[28], cst_0u, _a5_);
       break;
      case 5:
        /*<<scanf.ml:528:29>>*/ var
         /*<<scanf.ml:528:29>>*/ _a6_ = token_string(ib),
        tok =  /*<<scanf.ml:528:22>>*/ caml_call2(Stdlib[28], cst_0x, _a6_);
       break;
      default: var tok = token_string(ib);
    }
     /*<<scanf.ml:525:54>>*/  /*<<scanf.ml:525:54>>*/ var
     l =  /*<<scanf.ml:525:54>>*/ caml_ml_string_length(tok);
     /*<<scanf.ml:531:14>>*/ if
     (0 !== l && 43 ===  /*<<scanf.ml:531:14>>*/ caml_string_get(tok, 0))
      /*<<scanf.ml:531:43>>*/ return  /*<<scanf.ml:531:43>>*/ caml_call3
             (Stdlib_String[15], tok, 1, l - 1 | 0);
     /*<<scanf.ml:531:34>>*/ return tok;
    /*<<scanf.ml:531:67>>*/ }
    /*<<scanf.ml:375:20>>*/ function token_float(ib){
     /*<<scanf.ml:539:56>>*/ return  /*<<scanf.ml:539:56>>*/ runtime.caml_float_of_string
            (token_string(ib));
    /*<<scanf.ml:539:56>>*/ }
    /*<<scanf.ml:375:20>>*/ function scan_decimal_digit_star(width, ib){
    var width$0 = width;
     /*<<scanf.ml:575:2>>*/ for(;;){
      /*<<scanf.ml:575:2>>*/ if(0 === width$0)
       /*<<scanf.ml:575:20>>*/ return width$0;
      /*<<scanf.ml:576:10>>*/  /*<<scanf.ml:576:10>>*/ var c = peek_char(ib);
      /*<<scanf.ml:577:5>>*/ if(ib[1])
       /*<<scanf.ml:577:26>>*/ return width$0;
      /*<<scanf.ml:578:2>>*/ if(58 <= c){
      if(95 === c){
        /*<<scanf.ml:583:16>>*/ var
         /*<<scanf.ml:583:16>>*/ width$1 = ignore_char(width$0, ib),
        width$0 = width$1;
       continue;
      }
     }
     else if(48 <= c){
       /*<<scanf.ml:580:16>>*/ var
        /*<<scanf.ml:580:16>>*/ width$2 = store_char(width$0, ib, c),
       width$0 = width$2;
      continue;
     }
      /*<<scanf.ml:585:9>>*/ return width$0;
    }
    /*<<scanf.ml:585:14>>*/ }
    /*<<scanf.ml:375:20>>*/ function scan_unsigned_decimal_int(width, ib){
     /*<<scanf.ml:589:2>>*/ if(0 === width)
      /*<<scanf.ml:589:20>>*/ return bad_token_length(cst_decimal_digits);
     /*<<scanf.ml:590:10>>*/  /*<<scanf.ml:590:10>>*/ var
     c = checked_peek_char(ib);
     /*<<scanf.ml:590:10>>*/ if(9 < c - 48 >>> 0)
      /*<<scanf.ml:596:14>>*/ return bad_input
             ( /*<<scanf.ml:596:14>>*/ caml_call2(Stdlib_Printf[4], _j_, c));
     /*<<scanf.ml:593:16>>*/  /*<<scanf.ml:593:16>>*/ var
     width$0 = store_char(width, ib, c);
     /*<<scanf.ml:593:16>>*/ return scan_decimal_digit_star(width$0, ib);
    /*<<scanf.ml:596:70>>*/ }
    /*<<scanf.ml:375:20>>*/ function scan_digit_plus
   (basis, digitp, width$2, ib){
     /*<<scanf.ml:620:2>>*/ if(0 === width$2)
      /*<<scanf.ml:620:20>>*/ return bad_token_length(cst_digits);
     /*<<scanf.ml:621:10>>*/  /*<<scanf.ml:621:10>>*/ var
     c$0 = checked_peek_char(ib);
     /*<<scanf.ml:622:5>>*/ if
     (!  /*<<scanf.ml:622:5>>*/ caml_call1(digitp, c$0))
      /*<<scanf.ml:626:14>>*/ return bad_input
             ( /*<<scanf.ml:626:14>>*/ caml_call3
               (Stdlib_Printf[4], _k_, c$0, basis));
     /*<<scanf.ml:623:16>>*/ var
      /*<<scanf.ml:623:16>>*/ width$3 = store_char(width$2, ib, c$0),
     width = width$3;
     /*<<scanf.ml:603:4>>*/ for(;;){
      /*<<scanf.ml:603:4>>*/ if(0 === width)
       /*<<scanf.ml:603:22>>*/ return width;
      /*<<scanf.ml:604:12>>*/  /*<<scanf.ml:604:12>>*/ var c = peek_char(ib);
      /*<<scanf.ml:605:7>>*/ if(ib[1])  /*<<scanf.ml:605:28>>*/ return width;
      /*<<scanf.ml:607:13>>*/ if
      ( /*<<scanf.ml:607:13>>*/ caml_call1(digitp, c)){
       /*<<scanf.ml:608:18>>*/ var
        /*<<scanf.ml:608:18>>*/ width$0 = store_char(width, ib, c),
       width = width$0;
      continue;
     }
     if(95 !== c)  /*<<scanf.ml:613:11>>*/ return width;
      /*<<scanf.ml:611:18>>*/ var
       /*<<scanf.ml:611:18>>*/ width$1 = ignore_char(width, ib),
      width = width$1;
    }
    /*<<scanf.ml:626:77>>*/ }
    /*<<scanf.ml:375:20>>*/ function is_binary_digit(param){
     /*<<scanf.ml:629:22>>*/ return 1 < param - 48 >>> 0 ? 0 : 1;
    /*<<scanf.ml:631:14>>*/ }
    /*<<scanf.ml:634:22>>*/ function scan_binary_int(_a1_, _a2_){
     /*<<?>>*/ return scan_digit_plus(cst_binary, is_binary_digit, _a1_, _a2_);
   }
    /*<<scanf.ml:634:22>>*/ function is_octal_digit(param){
     /*<<scanf.ml:636:21>>*/ return 7 < param - 48 >>> 0 ? 0 : 1;
    /*<<scanf.ml:638:14>>*/ }
    /*<<scanf.ml:641:21>>*/ function scan_octal_int(_aZ_, _a0_){
     /*<<?>>*/ return scan_digit_plus(cst_octal, is_octal_digit, _aZ_, _a0_);
   }
    /*<<scanf.ml:641:21>>*/ function is_hexa_digit(param){
     /*<<scanf.ml:643:20>>*/ var
      /*<<scanf.ml:643:20>>*/ _aY_ = param - 48 | 0,
     switch$0 = 0;
     /*<<scanf.ml:643:20>>*/ if(22 < _aY_ >>> 0){
     if(5 >= _aY_ - 49 >>> 0) switch$0 = 1;
    }
    else if(6 < _aY_ - 10 >>> 0) switch$0 = 1;
    return switch$0 ? 1 : 0;
    /*<<scanf.ml:645:14>>*/ }
    /*<<scanf.ml:648:27>>*/ function scan_hexadecimal_int(_aW_, _aX_){
     /*<<?>>*/ return scan_digit_plus
            (cst_hexadecimal, is_hexa_digit, _aW_, _aX_);
   }
    /*<<scanf.ml:648:27>>*/ function scan_sign(width, ib){
     /*<<scanf.ml:654:10>>*/ var
      /*<<scanf.ml:654:10>>*/ c = checked_peek_char(ib),
      /*<<scanf.ml:654:10>>*/ switcher = c - 43 | 0;
     /*<<scanf.ml:654:10>>*/ if(2 >= switcher >>> 0)
     switch(switcher){
       case 0:
         /*<<scanf.ml:656:11>>*/ return store_char(width, ib, c);
       case 1: break;
       default:  /*<<scanf.ml:657:11>>*/ return store_char(width, ib, c);
     }
     /*<<scanf.ml:658:9>>*/ return width;
    /*<<scanf.ml:658:14>>*/ }
    /*<<scanf.ml:648:27>>*/ function scan_optionally_signed_decimal(width, ib){
     /*<<scanf.ml:662:14>>*/  /*<<scanf.ml:662:14>>*/ var
     width$0 = scan_sign(width, ib);
     /*<<scanf.ml:662:14>>*/ return scan_unsigned_decimal_int(width$0, ib);
    /*<<scanf.ml:663:36>>*/ }
    /*<<scanf.ml:648:27>>*/ function scan_int_conversion(conv, width$1, ib){
     /*<<scanf.ml:691:2>>*/ switch(conv){
      case 0:
        /*<<scanf.ml:692:20>>*/ return scan_binary_int(width$1, ib);
      case 1:
        /*<<scanf.ml:693:20>>*/ return scan_optionally_signed_decimal
               (width$1, ib);
      case 2:
        /*<<scanf.ml:686:14>>*/ var
         /*<<scanf.ml:686:14>>*/ width$0 = scan_sign(width$1, ib),
         /*<<scanf.ml:671:8>>*/ c = checked_peek_char(ib);
        /*<<scanf.ml:671:8>>*/ if(48 !== c)
         /*<<scanf.ml:682:9>>*/ return scan_unsigned_decimal_int(width$0, ib);
        /*<<scanf.ml:673:16>>*/  /*<<scanf.ml:673:16>>*/ var
        width = store_char(width$0, ib, c);
        /*<<scanf.ml:673:16>>*/ if(0 === width)
         /*<<scanf.ml:674:22>>*/ return width;
        /*<<scanf.ml:675:12>>*/  /*<<scanf.ml:675:12>>*/ var
        c$0 = peek_char(ib);
        /*<<scanf.ml:676:7>>*/ if(ib[1])
         /*<<scanf.ml:676:28>>*/ return width;
       var switch$0 = 0;
        /*<<scanf.ml:677:4>>*/ if(99 <= c$0){
        if(111 === c$0)
          /*<<scanf.ml:679:28>>*/ return scan_octal_int
                 (store_char(width, ib, c$0), ib);
        if(120 === c$0) switch$0 = 1;
       }
       else if(88 === c$0)
        switch$0 = 1;
       else if(98 <= c$0)
         /*<<scanf.ml:680:29>>*/ return scan_binary_int
                (store_char(width, ib, c$0), ib);
       return switch$0
               ? scan_hexadecimal_int(store_char(width, ib, c$0), ib)
               : scan_decimal_digit_star(width, ib);
      case 3:
        /*<<scanf.ml:695:20>>*/ return scan_octal_int(width$1, ib);
      case 4:
        /*<<scanf.ml:696:20>>*/ return scan_unsigned_decimal_int(width$1, ib);
      default:
        /*<<scanf.ml:697:20>>*/ return scan_hexadecimal_int(width$1, ib);
    }
    /*<<scanf.ml:697:49>>*/ }
    /*<<scanf.ml:648:27>>*/ function scan_fractional_part(width, ib){
     /*<<scanf.ml:704:2>>*/ if(0 === width)
      /*<<scanf.ml:704:20>>*/ return width;
     /*<<scanf.ml:705:10>>*/  /*<<scanf.ml:705:10>>*/ var c = peek_char(ib);
     /*<<scanf.ml:706:5>>*/ return ib[1]
            ? width
            : 9
              < c - 48 >>> 0
              ? width
              : scan_decimal_digit_star(store_char(width, ib, c), ib);
    /*<<scanf.ml:710:14>>*/ }
    /*<<scanf.ml:648:27>>*/ function scan_exponent_part(width, ib){
     /*<<scanf.ml:715:2>>*/ if(0 === width)
      /*<<scanf.ml:715:20>>*/ return width;
     /*<<scanf.ml:716:10>>*/  /*<<scanf.ml:716:10>>*/ var c = peek_char(ib);
     /*<<scanf.ml:717:5>>*/ if(ib[1])  /*<<scanf.ml:717:26>>*/ return width;
    if(69 !== c && 101 !== c)  /*<<scanf.ml:721:9>>*/ return width;
     /*<<scanf.ml:720:39>>*/ return scan_optionally_signed_decimal
            (store_char(width, ib, c), ib);
    /*<<scanf.ml:721:14>>*/ }
    /*<<scanf.ml:648:27>>*/ function scan_float(width$1, precision, ib){
     /*<<scanf.ml:729:14>>*/ var
      /*<<scanf.ml:729:14>>*/ width = scan_sign(width$1, ib),
      /*<<scanf.ml:729:14>>*/ width$0 = scan_decimal_digit_star(width, ib);
    if(0 === width$0)  /*<<scanf.ml:766:20>>*/ return [0, width$0, precision];
     /*<<scanf.ml:767:10>>*/  /*<<scanf.ml:767:10>>*/ var c = peek_char(ib);
     /*<<scanf.ml:768:5>>*/ if(ib[1])
      /*<<scanf.ml:768:26>>*/ return [0, width$0, precision];
     /*<<scanf.ml:769:2>>*/ if(46 !== c)
      /*<<scanf.ml:776:4>>*/ return [0,
             scan_exponent_part(width$0, ib),
             precision];
     /*<<scanf.ml:771:16>>*/ var
      /*<<scanf.ml:771:16>>*/ width$2 = store_char(width$0, ib, c),
      /*<<scanf.ml:772:20>>*/ precision$0 =
        /*<<scanf.ml:772:20>>*/ caml_call2(Stdlib_Int[10], width$2, precision),
      /*<<scanf.ml:773:37>>*/ width$3 =
       width$2 - (precision$0 - scan_fractional_part(precision$0, ib) | 0) | 0;
     /*<<scanf.ml:774:4>>*/ return [0,
            scan_exponent_part(width$3, ib),
            precision$0];
    /*<<scanf.ml:776:42>>*/ }
    /*<<scanf.ml:648:27>>*/ function check_case_insensitive_string
   (width, ib, error, str){
     /*<<scanf.ml:780:2>>*/ function lowercase(c){
      /*<<scanf.ml:781:4>>*/ return 25 < c - 65 >>> 0
             ? c
             :  /*<<scanf.ml:783:6>>*/ caml_call1
               (Stdlib[29], (c - 65 | 0) + 97 | 0);
     /*<<scanf.ml:784:12>>*/ }
     /*<<scanf.ml:780:2>>*/ var
      /*<<scanf.ml:780:2>>*/ len =
        /*<<scanf.ml:780:2>>*/ caml_ml_string_length(str),
      /*<<scanf.ml:780:2>>*/ width$0 = [0, width],
      /*<<scanf.ml:780:2>>*/ _aT_ = len - 1 | 0,
      /*<<scanf.ml:780:2>>*/ _aS_ = 0;
     /*<<scanf.ml:780:2>>*/ if(_aT_ >= 0){
     var i = _aS_;
      /*<<scanf.ml:788:4>>*/ for(;;){
       /*<<scanf.ml:788:12>>*/ var
        /*<<scanf.ml:788:12>>*/ c = peek_char(ib),
        /*<<scanf.ml:789:22>>*/ _aU_ =
         lowercase( /*<<scanf.ml:789:32>>*/ caml_string_get(str, i));
       /*<<scanf.ml:789:7>>*/ if(lowercase(c) !== _aU_)
        /*<<scanf.ml:789:45>>*/  /*<<scanf.ml:789:45>>*/ caml_call1(error, 0);
       /*<<scanf.ml:789:53>>*/ if(0 === width$0[1])
        /*<<scanf.ml:790:23>>*/  /*<<scanf.ml:790:23>>*/ caml_call1(error, 0);
       /*<<scanf.ml:791:13>>*/ width$0[1] = store_char(width$0[1], ib, c);
       /*<<scanf.ml:791:13>>*/  /*<<scanf.ml:791:13>>*/ var _aV_ = i + 1 | 0;
       /*<<scanf.ml:791:13>>*/ if(_aT_ !== i){var i = _aV_; continue;}
      break;
     }
    }
     /*<<scanf.ml:793:2>>*/ return width$0[1];
    /*<<scanf.ml:793:8>>*/ }
    /*<<scanf.ml:648:27>>*/ function scan_hex_float(width, precision, ib){
     /*<<scanf.ml:797:2>>*/ var
      /*<<scanf.ml:797:2>>*/ _aF_ = 0 === width ? 1 : 0,
      /*<<scanf.ml:797:2>>*/ _aG_ = _aF_ || end_of_input(ib);
     /*<<scanf.ml:797:42>>*/ if(_aG_)
      /*<<scanf.ml:797:48>>*/ bad_hex_float(0);
     /*<<scanf.ml:798:14>>*/ var
      /*<<scanf.ml:798:14>>*/ width$0 = scan_sign(width, ib),
      /*<<scanf.ml:798:14>>*/ _aH_ = 0 === width$0 ? 1 : 0,
      /*<<scanf.ml:798:14>>*/ _aI_ = _aH_ || end_of_input(ib);
     /*<<scanf.ml:799:42>>*/ if(_aI_)
      /*<<scanf.ml:799:48>>*/ bad_hex_float(0);
     /*<<scanf.ml:800:8>>*/ var
      /*<<scanf.ml:800:8>>*/ c = peek_char(ib),
     switch$0 = 0;
     /*<<scanf.ml:800:8>>*/ if(78 <= c){
     var switcher = c - 79 | 0;
     if(30 < switcher >>> 0){
      if(32 > switcher){
        /*<<scanf.ml:830:16>>*/ var
         /*<<scanf.ml:830:16>>*/ width$1 = store_char(width$0, ib, c),
         /*<<scanf.ml:830:16>>*/ _aJ_ = 0 === width$1 ? 1 : 0,
         /*<<scanf.ml:830:16>>*/ _aK_ = _aJ_ || end_of_input(ib);
        /*<<scanf.ml:831:44>>*/ if(_aK_)
         /*<<scanf.ml:831:50>>*/ bad_hex_float(0);
        /*<<scanf.ml:831:66>>*/ return check_case_insensitive_string
               (width$1, ib, bad_hex_float, cst_an);
      }
     }
     else if(26 === switcher) switch$0 = 1;
    }
    else{
     if(48 === c){
       /*<<scanf.ml:802:16>>*/ var
        /*<<scanf.ml:802:16>>*/ width$3 = store_char(width$0, ib, c),
        /*<<scanf.ml:802:16>>*/ _aN_ = 0 === width$3 ? 1 : 0,
        /*<<scanf.ml:802:16>>*/ _aO_ = _aN_ || end_of_input(ib);
       /*<<scanf.ml:803:44>>*/ if(_aO_)
        /*<<scanf.ml:803:50>>*/ bad_hex_float(0);
       /*<<scanf.ml:804:16>>*/  /*<<scanf.ml:804:16>>*/ var
       width$4 =
         check_case_insensitive_string(width$3, ib, bad_hex_float, cst_x);
       /*<<scanf.ml:805:20>>*/ if(0 !== width$4 && ! end_of_input(ib)){
        /*<<scanf.ml:806:24>>*/ var
         /*<<scanf.ml:806:24>>*/ _aP_ = peek_char(ib) - 46 | 0,
        switch$1 = 0;
        /*<<scanf.ml:806:24>>*/ if(34 < _aP_ >>> 0){
        if(66 === _aP_) switch$1 = 1;
       }
       else if(32 < _aP_ - 1 >>> 0) switch$1 = 1;
       var width$5 = switch$1 ? width$4 : scan_hexadecimal_int(width$4, ib);
        /*<<scanf.ml:809:22>>*/ if(0 !== width$5 && ! end_of_input(ib)){
         /*<<scanf.ml:810:26>>*/  /*<<scanf.ml:810:26>>*/ var
         c$0 = peek_char(ib);
         /*<<scanf.ml:810:26>>*/ if(46 === c$0){
          /*<<scanf.ml:812:24>>*/ var
           /*<<scanf.ml:812:24>>*/ width$6 = store_char(width$5, ib, c$0),
          switch$2 = 0;
          /*<<scanf.ml:813:28>>*/ if(0 !== width$6 && ! end_of_input(ib)){
           /*<<scanf.ml:814:20>>*/ var
            /*<<scanf.ml:814:20>>*/ match = peek_char(ib),
           switch$3 = 0;
          if(80 !== match && 112 !== match){
            /*<<scanf.ml:817:32>>*/ var
             /*<<scanf.ml:817:32>>*/ precision$0 =
               /*<<scanf.ml:817:32>>*/ caml_call2
               (Stdlib_Int[10], width$6, precision),
            width$10 =
              width$6
              - (precision$0 - scan_hexadecimal_int(precision$0, ib) | 0)
              | 0;
           switch$3 = 1;
          }
          if(! switch$3) var width$10 = width$6;
          var width$7 = width$10;
          switch$2 = 1;
         }
         if(! switch$2) var width$7 = width$6;
         var width$8 = width$7;
        }
        else
         var width$8 = width$5;
         /*<<scanf.ml:821:24>>*/ if(0 !== width$8 && ! end_of_input(ib)){
          /*<<scanf.ml:822:16>>*/  /*<<scanf.ml:822:16>>*/ var
          c$1 = peek_char(ib);
         if(80 !== c$1 && 112 !== c$1)
           /*<<scanf.ml:827:17>>*/ return width$8;
          /*<<scanf.ml:824:24>>*/ var
           /*<<scanf.ml:824:24>>*/ width$9 = store_char(width$8, ib, c$1),
           /*<<scanf.ml:824:24>>*/ _aQ_ = 0 === width$9 ? 1 : 0,
           /*<<scanf.ml:824:24>>*/ _aR_ = _aQ_ || end_of_input(ib);
          /*<<scanf.ml:825:52>>*/ if(_aR_)
           /*<<scanf.ml:825:58>>*/ bad_hex_float(0);
          /*<<scanf.ml:825:74>>*/ return scan_optionally_signed_decimal
                 (width$9, ib);
        }
         /*<<scanf.ml:821:54>>*/ return width$8;
       }
        /*<<scanf.ml:809:52>>*/ return width$5;
      }
       /*<<scanf.ml:805:50>>*/ return width$4;
     }
     if(73 === c) switch$0 = 1;
    }
    if(! switch$0)  /*<<scanf.ml:837:9>>*/ return bad_hex_float(0);
     /*<<scanf.ml:834:16>>*/ var
      /*<<scanf.ml:834:16>>*/ width$2 = store_char(width$0, ib, c),
      /*<<scanf.ml:834:16>>*/ _aL_ = 0 === width$2 ? 1 : 0,
      /*<<scanf.ml:834:16>>*/ _aM_ = _aL_ || end_of_input(ib);
     /*<<scanf.ml:835:44>>*/ if(_aM_)
      /*<<scanf.ml:835:50>>*/ bad_hex_float(0);
     /*<<scanf.ml:835:66>>*/ return check_case_insensitive_string
            (width$2, ib, bad_hex_float, cst_nfinity);
    /*<<scanf.ml:837:25>>*/ }
    /*<<scanf.ml:648:27>>*/ function scan_caml_float_rest
   (width, precision, ib){
     /*<<scanf.ml:841:2>>*/ var
      /*<<scanf.ml:841:2>>*/ _aB_ = 0 === width ? 1 : 0,
      /*<<scanf.ml:841:2>>*/ _aC_ = _aB_ || end_of_input(ib);
     /*<<scanf.ml:841:42>>*/ if(_aC_)  /*<<scanf.ml:841:48>>*/ bad_float(0);
     /*<<scanf.ml:842:14>>*/ var
      /*<<scanf.ml:842:14>>*/ width$0 = scan_decimal_digit_star(width, ib),
      /*<<scanf.ml:842:14>>*/ _aD_ = 0 === width$0 ? 1 : 0,
      /*<<scanf.ml:842:14>>*/ _aE_ = _aD_ || end_of_input(ib);
     /*<<scanf.ml:843:42>>*/ if(_aE_)  /*<<scanf.ml:843:48>>*/ bad_float(0);
     /*<<scanf.ml:844:10>>*/ var
      /*<<scanf.ml:844:10>>*/ c = peek_char(ib),
      /*<<scanf.ml:844:10>>*/ switcher = c - 69 | 0;
     /*<<scanf.ml:844:10>>*/ if(32 < switcher >>> 0){
     if(-23 === switcher){
       /*<<scanf.ml:847:16>>*/ var
        /*<<scanf.ml:847:16>>*/ width$1 = store_char(width$0, ib, c),
        /*<<scanf.ml:850:20>>*/ precision$0 =
          /*<<scanf.ml:850:20>>*/ caml_call2
          (Stdlib_Int[10], width$1, precision),
        /*<<scanf.ml:853:26>>*/ width_precision =
         scan_fractional_part(precision$0, ib),
        /*<<scanf.ml:853:26>>*/ frac_width = precision$0 - width_precision | 0,
        /*<<scanf.ml:853:26>>*/ width$2 = width$1 - frac_width | 0;
       /*<<scanf.ml:853:26>>*/ return scan_exponent_part(width$2, ib);
     }
    }
    else if(30 < switcher - 1 >>> 0)
      /*<<scanf.ml:861:4>>*/ return scan_exponent_part(width$0, ib);
     /*<<scanf.ml:862:9>>*/ return bad_float(0);
    /*<<scanf.ml:862:21>>*/ }
    /*<<scanf.ml:648:27>>*/ function scan_caml_float(width, precision, ib){
     /*<<scanf.ml:866:2>>*/ var
      /*<<scanf.ml:866:2>>*/ _an_ = 0 === width ? 1 : 0,
      /*<<scanf.ml:866:2>>*/ _ao_ = _an_ || end_of_input(ib);
     /*<<scanf.ml:866:42>>*/ if(_ao_)  /*<<scanf.ml:866:48>>*/ bad_float(0);
     /*<<scanf.ml:867:14>>*/ var
      /*<<scanf.ml:867:14>>*/ width$0 = scan_sign(width, ib),
      /*<<scanf.ml:867:14>>*/ _ap_ = 0 === width$0 ? 1 : 0,
      /*<<scanf.ml:867:14>>*/ _aq_ = _ap_ || end_of_input(ib);
     /*<<scanf.ml:868:42>>*/ if(_aq_)  /*<<scanf.ml:868:48>>*/ bad_float(0);
     /*<<scanf.ml:869:8>>*/  /*<<scanf.ml:869:8>>*/ var c = peek_char(ib);
     /*<<scanf.ml:869:8>>*/ if(49 <= c){
     if(58 > c){
       /*<<scanf.ml:903:16>>*/ var
        /*<<scanf.ml:903:16>>*/ width$1 = store_char(width$0, ib, c),
        /*<<scanf.ml:903:16>>*/ _ar_ = 0 === width$1 ? 1 : 0,
        /*<<scanf.ml:903:16>>*/ _as_ = _ar_ || end_of_input(ib);
       /*<<scanf.ml:904:44>>*/ if(_as_)  /*<<scanf.ml:904:50>>*/ bad_float(0);
       /*<<scanf.ml:904:62>>*/ return scan_caml_float_rest
              (width$1, precision, ib);
     }
    }
    else if(48 <= c){
      /*<<scanf.ml:871:16>>*/ var
       /*<<scanf.ml:871:16>>*/ width$2 = store_char(width$0, ib, c),
       /*<<scanf.ml:871:16>>*/ _at_ = 0 === width$2 ? 1 : 0,
       /*<<scanf.ml:871:16>>*/ _au_ = _at_ || end_of_input(ib);
      /*<<scanf.ml:872:44>>*/ if(_au_)  /*<<scanf.ml:872:50>>*/ bad_float(0);
      /*<<scanf.ml:873:10>>*/  /*<<scanf.ml:873:10>>*/ var
      c$0 = peek_char(ib);
     if(88 !== c$0 && 120 !== c$0)
       /*<<scanf.ml:900:6>>*/ return scan_caml_float_rest
              (width$2, precision, ib);
      /*<<scanf.ml:875:18>>*/ var
       /*<<scanf.ml:875:18>>*/ width$3 = store_char(width$2, ib, c$0),
       /*<<scanf.ml:875:18>>*/ _av_ = 0 === width$3 ? 1 : 0,
       /*<<scanf.ml:875:18>>*/ _aw_ = _av_ || end_of_input(ib);
      /*<<scanf.ml:876:46>>*/ if(_aw_)  /*<<scanf.ml:876:52>>*/ bad_float(0);
      /*<<scanf.ml:877:18>>*/ var
       /*<<scanf.ml:877:18>>*/ width$4 = scan_hexadecimal_int(width$3, ib),
       /*<<scanf.ml:877:18>>*/ _ax_ = 0 === width$4 ? 1 : 0,
       /*<<scanf.ml:877:18>>*/ _ay_ = _ax_ || end_of_input(ib);
      /*<<scanf.ml:878:46>>*/ if(_ay_)  /*<<scanf.ml:878:52>>*/ bad_float(0);
      /*<<scanf.ml:879:24>>*/ var
       /*<<scanf.ml:879:24>>*/ c$1 = peek_char(ib),
       /*<<scanf.ml:879:24>>*/ switcher = c$1 - 80 | 0,
      switch$0 = 0;
      /*<<scanf.ml:879:24>>*/ if(32 < switcher >>> 0)
      if(-34 === switcher){
        /*<<scanf.ml:881:22>>*/ var
         /*<<scanf.ml:881:22>>*/ width$5 = store_char(width$4, ib, c$1),
        switch$1 = 0;
        /*<<scanf.ml:882:26>>*/ if(0 !== width$5 && ! end_of_input(ib)){
         /*<<scanf.ml:883:18>>*/ var
          /*<<scanf.ml:883:18>>*/ match = peek_char(ib),
         switch$2 = 0;
        if(80 !== match && 112 !== match){
          /*<<scanf.ml:886:30>>*/ var
           /*<<scanf.ml:886:30>>*/ precision$0 =
             /*<<scanf.ml:886:30>>*/ caml_call2
             (Stdlib_Int[10], width$5, precision),
          width$10 =
            width$5
            - (precision$0 - scan_hexadecimal_int(precision$0, ib) | 0)
            | 0;
         switch$2 = 1;
        }
        if(! switch$2) var width$10 = width$5;
        var width$6 = width$10;
        switch$1 = 1;
       }
       if(! switch$1) var width$6 = width$5;
       var width$7 = width$6;
      }
      else
       switch$0 = 1;
     else if(30 < switcher - 1 >>> 0)
      var width$7 = width$4;
     else
      switch$0 = 1;
     var width$8 = switch$0 ? bad_float(0) : width$7;
      /*<<scanf.ml:891:22>>*/ if(0 !== width$8 && ! end_of_input(ib)){
       /*<<scanf.ml:892:14>>*/  /*<<scanf.ml:892:14>>*/ var
       c$2 = peek_char(ib);
      if(80 !== c$2 && 112 !== c$2)  /*<<scanf.ml:897:15>>*/ return width$8;
       /*<<scanf.ml:894:22>>*/ var
        /*<<scanf.ml:894:22>>*/ width$9 = store_char(width$8, ib, c$2),
        /*<<scanf.ml:894:22>>*/ _az_ = 0 === width$9 ? 1 : 0,
        /*<<scanf.ml:894:22>>*/ _aA_ = _az_ || end_of_input(ib);
       /*<<scanf.ml:895:50>>*/ if(_aA_)
        /*<<scanf.ml:895:56>>*/ bad_hex_float(0);
       /*<<scanf.ml:895:72>>*/ return scan_optionally_signed_decimal
              (width$9, ib);
     }
      /*<<scanf.ml:891:52>>*/ return width$8;
    }
     /*<<scanf.ml:910:9>>*/ return bad_float(0);
    /*<<scanf.ml:910:21>>*/ }
    /*<<scanf.ml:648:27>>*/ function scan_string(stp, width, ib){
    var width$0 = width;
     /*<<scanf.ml:921:4>>*/ for(;;){
      /*<<scanf.ml:921:4>>*/ if(0 === width$0)
       /*<<scanf.ml:921:22>>*/ return width$0;
      /*<<scanf.ml:922:12>>*/  /*<<scanf.ml:922:12>>*/ var c = peek_char(ib);
      /*<<scanf.ml:923:7>>*/ if(ib[1])
       /*<<scanf.ml:923:28>>*/ return width$0;
      /*<<scanf.ml:924:6>>*/ if(stp){
       /*<<scanf.ml:925:21>>*/  /*<<scanf.ml:925:21>>*/ var c$0 = stp[1];
       /*<<scanf.ml:925:21>>*/ if(c === c$0)
        /*<<scanf.ml:925:31>>*/ return skip_char(width$0, ib);
       /*<<scanf.ml:926:23>>*/ var
        /*<<scanf.ml:926:23>>*/ width$1 = store_char(width$0, ib, c),
       width$0 = width$1;
      continue;
     }
      /*<<scanf.ml:928:8>>*/ var
       /*<<scanf.ml:928:8>>*/ _am_ = c - 9 | 0,
      switch$0 = 0;
      /*<<scanf.ml:928:8>>*/ if(4 < _am_ >>> 0){
      if(23 === _am_) switch$0 = 1;
     }
     else if(1 < _am_ - 2 >>> 0) switch$0 = 1;
     if(switch$0)  /*<<scanf.ml:929:38>>*/ return width$0;
      /*<<scanf.ml:930:20>>*/ var
       /*<<scanf.ml:930:20>>*/ width$2 = store_char(width$0, ib, c),
      width$0 = width$2;
    }
    /*<<scanf.ml:931:12>>*/ }
    /*<<scanf.ml:648:27>>*/ function hexadecimal_value_of_char(c){
     /*<<scanf.ml:969:2>>*/ return 97 <= c
            ? c - 87 | 0
            : 65 <= c ? c - 55 | 0 : c - 48 | 0;
    /*<<scanf.ml:979:23>>*/ }
    /*<<scanf.ml:648:27>>*/ function check_next_char(message, width, ib){
     /*<<scanf.ml:995:2>>*/ if(0 === width)
      /*<<scanf.ml:995:20>>*/ return bad_token_length(message);
     /*<<scanf.ml:996:10>>*/  /*<<scanf.ml:996:10>>*/ var c = peek_char(ib);
     /*<<scanf.ml:997:5>>*/ return ib[1]
            ? bad_input
              ( /*<<scanf.ml:421:4>>*/ caml_call2
                (Stdlib_Printf[4], _f_, message))
            : c;
    /*<<scanf.ml:998:3>>*/ }
    /*<<scanf.ml:1001:31>>*/ function check_next_char_for_char(_ak_, _al_){
     /*<<?>>*/ return check_next_char(cst_a_Char, _ak_, _al_);
   }
    /*<<scanf.ml:1002:33>>*/ function check_next_char_for_string(_ai_, _aj_){
     /*<<?>>*/ return check_next_char(cst_a_String, _ai_, _aj_);
   }
    /*<<scanf.ml:1002:33>>*/ function scan_backslash_char(width, ib){
     /*<<scanf.ml:1005:8>>*/ var
      /*<<scanf.ml:1005:8>>*/ c0 = check_next_char_for_char(width, ib),
     switch$0 = 0;
     /*<<scanf.ml:1005:8>>*/ if(40 <= c0){
     if(58 <= c0){
      var switcher = c0 - 92 | 0;
      if(28 >= switcher >>> 0)
       switch(switcher){
         case 28:
           /*<<scanf.ml:1019:4>>*/ var
            /*<<scanf.ml:1019:4>>*/ get_digit =
             function(param){
               /*<<scanf.ml:1020:14>>*/ var
                /*<<scanf.ml:1020:14>>*/ c = next_char(ib),
                /*<<scanf.ml:1020:14>>*/ _ah_ = c - 48 | 0,
               switch$0 = 0;
               /*<<scanf.ml:1020:14>>*/ if(22 < _ah_ >>> 0){
               if(5 >= _ah_ - 49 >>> 0) switch$0 = 1;
              }
              else if(6 < _ah_ - 10 >>> 0) switch$0 = 1;
              return switch$0 ? c : bad_input_escape(c);
              /*<<scanf.ml:1023:31>>*/ },
            /*<<scanf.ml:1024:13>>*/ c1 = get_digit(0),
            /*<<scanf.ml:1025:13>>*/ c2 = get_digit(0),
            /*<<scanf.ml:985:9>>*/ _ad_ = hexadecimal_value_of_char(c2),
            /*<<scanf.ml:984:9>>*/ c$0 =
             (16 * hexadecimal_value_of_char(c1) | 0) + _ad_ | 0,
           switch$1 = 0;
          if(0 <= c$0 && 255 >= c$0){
           var _af_ =  /*<<scanf.ml:989:2>>*/ caml_call1(Stdlib[29], c$0);
           switch$1 = 1;
          }
          if(! switch$1)
           var
            _af_ =
              bad_input
               ( /*<<scanf.ml:988:6>>*/ caml_call3
                 (Stdlib_Printf[4], _m_, c1, c2));
          return store_char(width - 2 | 0, ib, _af_);
         case 0:
         case 6:
         case 18:
         case 22:
         case 24:
          switch$0 = 1; break;
       }
     }
     else if(48 <= c0){
       /*<<scanf.ml:1009:4>>*/ var
        /*<<scanf.ml:1009:4>>*/ get_digit$0 =
         function(param){
           /*<<scanf.ml:1010:14>>*/  /*<<scanf.ml:1010:14>>*/ var
           c = next_char(ib);
           /*<<scanf.ml:1010:14>>*/ return 9 < c - 48 >>> 0
                  ? bad_input_escape(c)
                  : c;
          /*<<scanf.ml:1013:31>>*/ },
        /*<<scanf.ml:1015:13>>*/ c1$0 = get_digit$0(0),
        /*<<scanf.ml:1016:13>>*/ c2$0 = get_digit$0(0),
        /*<<scanf.ml:956:10>>*/ c =
         ((100 * (c0 - 48 | 0) | 0) + (10 * (c1$0 - 48 | 0) | 0) | 0)
         + (c2$0 - 48 | 0)
         | 0,
       switch$2 = 0;
      if(0 <= c && 255 >= c){
       var _ag_ =  /*<<scanf.ml:963:2>>*/ caml_call1(Stdlib[29], c);
       switch$2 = 1;
      }
      if(! switch$2)
       var
        _ag_ =
          bad_input
           ( /*<<scanf.ml:961:6>>*/ caml_call4
             (Stdlib_Printf[4], _l_, c0, c1$0, c2$0));
      return store_char(width - 2 | 0, ib, _ag_);
     }
    }
    else if(34 === c0 || 39 <= c0) switch$0 = 1;
    if(! switch$0)  /*<<scanf.ml:1028:4>>*/ return bad_input_escape(c0);
    var switch$3 = 0;
     /*<<scanf.ml:942:25>>*/ if(110 <= c0)
     if(117 <= c0)
      switch$3 = 1;
     else
      switch(c0 - 110 | 0){
        case 0:
         var _ae_ = 10; break;
        case 4:
         var _ae_ = 13; break;
        case 6:
         var _ae_ = 9; break;
        default: switch$3 = 1;
      }
    else if(98 === c0) var _ae_ = 8; else switch$3 = 1;
    if(switch$3) var _ae_ = c0;
    return store_char(width, ib, _ae_);
    /*<<scanf.ml:1028:22>>*/ }
    /*<<scanf.ml:1002:33>>*/ function scan_caml_string(width, ib){
     /*<<scanf.ml:1057:2>>*/ function find_stop$0(counter, width){
     var width$0 = width;
      /*<<scanf.ml:1063:4>>*/ for(;;){
       /*<<scanf.ml:1063:10>>*/  /*<<scanf.ml:1063:10>>*/ var
       c = check_next_char_for_string(width$0, ib);
       /*<<scanf.ml:1063:10>>*/ if(34 === c)
        /*<<scanf.ml:1064:14>>*/ return ignore_char(width$0, ib);
      if(92 !== c){
        /*<<scanf.ml:1066:21>>*/ var
         /*<<scanf.ml:1066:21>>*/ width$2 = store_char(width$0, ib, c),
        width$0 = width$2;
       continue;
      }
       /*<<scanf.ml:1065:29>>*/ var
        /*<<scanf.ml:1065:29>>*/ width$1 = ignore_char(width$0, ib),
        /*<<scanf.ml:1069:10>>*/ match =
         check_next_char_for_string(width$1, ib);
       /*<<scanf.ml:1069:10>>*/ if(10 === match){
        /*<<scanf.ml:1071:26>>*/  /*<<scanf.ml:1071:26>>*/ var
        _ab_ = ignore_char(width$1, ib);
        /*<<scanf.ml:1071:26>>*/ if(counter >= 50)
        return caml_trampoline_return(skip_spaces, [0, _ab_]);
       var counter$0 = counter + 1 | 0;
       return skip_spaces(counter$0, _ab_);
      }
      if(13 !== match){
        /*<<scanf.ml:1072:21>>*/ var
         /*<<scanf.ml:1072:21>>*/ width$4 = scan_backslash_char(width$1, ib),
        width$0 = width$4;
       continue;
      }
       /*<<scanf.ml:1070:27>>*/  /*<<scanf.ml:1070:27>>*/ var
       width$3 = ignore_char(width$1, ib);
       /*<<scanf.ml:1075:10>>*/ if
       (10 !== check_next_char_for_string(width$3, ib)){
        /*<<scanf.ml:1077:21>>*/ var
         /*<<scanf.ml:1077:21>>*/ width$5 = store_char(width$3, ib, 13),
        width$0 = width$5;
       continue;
      }
       /*<<scanf.ml:1076:26>>*/  /*<<scanf.ml:1076:26>>*/ var
       _ac_ = ignore_char(width$3, ib);
       /*<<scanf.ml:1076:26>>*/ if(counter >= 50)
       return caml_trampoline_return(skip_spaces, [0, _ac_]);
      var counter$1 = counter + 1 | 0;
      return skip_spaces(counter$1, _ac_);
     }
     /*<<scanf.ml:1066:53>>*/ }
     /*<<scanf.ml:1057:2>>*/ function skip_spaces(counter, width){
     var width$0 = width;
      /*<<scanf.ml:1080:4>>*/ for(;;){
       /*<<scanf.ml:1080:10>>*/ if
       (32 === check_next_char_for_string(width$0, ib)){
        /*<<scanf.ml:1081:25>>*/ var
         /*<<scanf.ml:1081:25>>*/ width$1 = ignore_char(width$0, ib),
        width$0 = width$1;
       continue;
      }
       /*<<scanf.ml:1082:11>>*/ if(counter >= 50)
       return caml_trampoline_return(find_stop$0, [0, width$0]);
      var counter$0 = counter + 1 | 0;
      return find_stop$0(counter$0, width$0);
     }
     /*<<scanf.ml:1082:26>>*/ }
     /*<<scanf.ml:1057:2>>*/ function find_stop(width){
      /*<<?>>*/ return caml_trampoline(find_stop$0(0, width));
    }
     /*<<scanf.ml:1058:10>>*/  /*<<scanf.ml:1058:10>>*/ var
     c = checked_peek_char(ib);
     /*<<scanf.ml:1058:10>>*/ return 34 === c
            ? find_stop(ignore_char(width, ib))
            : character_mismatch(34, c);
    /*<<scanf.ml:1084:18>>*/ }
    /*<<scanf.ml:1002:33>>*/ function scan_chars_in_char_set
   (char_set, scan_indic, width, ib){
     /*<<scanf.ml:1103:2>>*/ function scan_chars(i, stp){
     var i$0 = i;
      /*<<scanf.ml:1104:4>>*/ for(;;){
       /*<<scanf.ml:1104:12>>*/ var
        /*<<scanf.ml:1104:12>>*/ c = peek_char(ib),
        /*<<scanf.ml:1104:12>>*/ _Z_ = 0 < i$0 ? 1 : 0;
       /*<<scanf.ml:1104:12>>*/ if(_Z_){
        /*<<scanf.ml:1105:20>>*/  /*<<scanf.ml:1105:20>>*/ var
        ___ = 1 - ib[1];
        /*<<scanf.ml:1105:20>>*/ if(___)
         /*<<scanf.ml:1106:7>>*/ var
          /*<<scanf.ml:1106:7>>*/ _$_ =
            /*<<scanf.ml:1106:7>>*/ caml_call2
            (CamlinternalFormat[1], char_set, c),
          /*<<scanf.ml:1106:7>>*/ _aa_ = _$_ ? c !== stp ? 1 : 0 : _$_;
       else
        var _aa_ = ___;
      }
      else
       var _aa_ = _Z_;
       /*<<scanf.ml:1108:6>>*/ if(! _aa_) return _aa_;
       /*<<scanf.ml:1108:14>>*/ store_char(Stdlib[19], ib, c);
       /*<<scanf.ml:1108:14>>*/ var
        /*<<scanf.ml:1108:14>>*/ i$1 = i$0 - 1 | 0,
       i$0 = i$1;
     }
     /*<<scanf.ml:1109:28>>*/ }
     /*<<scanf.ml:1103:2>>*/ if(! scan_indic)
      /*<<scanf.ml:1111:12>>*/ return scan_chars(width, -1);
     /*<<scanf.ml:1113:4>>*/  /*<<scanf.ml:1113:4>>*/ var c = scan_indic[1];
     /*<<scanf.ml:1113:4>>*/ scan_chars(width, c);
     /*<<scanf.ml:1114:11>>*/  /*<<scanf.ml:1114:11>>*/ var _Y_ = 1 - ib[1];
     /*<<scanf.ml:1114:11>>*/ if(! _Y_)  /*<<scanf.ml:1111:12>>*/ return _Y_;
     /*<<scanf.ml:1115:15>>*/  /*<<scanf.ml:1115:15>>*/ var
     ci = peek_char(ib);
     /*<<scanf.ml:1115:15>>*/ return c === ci
            ? invalidate_current_char(ib)
            : character_mismatch(c, ci);
    /*<<scanf.ml:1118:34>>*/ }
    /*<<scanf.ml:1002:33>>*/ function scanf_bad_input(ib, x){
     /*<<?>>*/ if(x[1] === Scan_failure)
     var s = x[2];
    else{
     if(x[1] !== Stdlib[7])
       /*<<scanf.ml:1126:9>>*/ throw  /*<<scanf.ml:1126:9>>*/ caml_maybe_attach_backtrace
             (x, 1);
     var s = x[2];
    }
     /*<<scanf.ml:1124:12>>*/  /*<<scanf.ml:1124:12>>*/ var
     i = char_count(ib);
     /*<<scanf.ml:1125:14>>*/ return bad_input
            ( /*<<scanf.ml:1125:14>>*/ caml_call3(Stdlib_Printf[4], _o_, i, s));
   }
    /*<<scanf.ml:1002:33>>*/ function width_of_pad_opt(pad_opt){
     /*<<scanf.ml:1138:31>>*/ if(! pad_opt)
      /*<<scanf.ml:1139:12>>*/ return Stdlib[19];
     /*<<scanf.ml:1140:18>>*/  /*<<scanf.ml:1140:18>>*/ var
     width = pad_opt[1];
     /*<<scanf.ml:1140:18>>*/ return width;
    /*<<scanf.ml:1140:23>>*/ }
    /*<<scanf.ml:1002:33>>*/ function stopper_of_formatting_lit(fmting){
     /*<<scanf.ml:1144:2>>*/ if(6 === fmting)
      /*<<scanf.ml:1144:35>>*/ return _p_;
     /*<<scanf.ml:1145:14>>*/ var
      /*<<scanf.ml:1145:14>>*/ str =
        /*<<scanf.ml:1145:14>>*/ caml_call1(CamlinternalFormat[17], fmting),
      /*<<scanf.ml:1146:14>>*/ stp =
        /*<<scanf.ml:1146:14>>*/ caml_string_get(str, 1),
      /*<<scanf.ml:1147:18>>*/ sub_str =
        /*<<scanf.ml:1147:18>>*/ caml_call3
        (Stdlib_String[15],
         str,
         2,
          /*<<scanf.ml:1146:14>>*/ caml_ml_string_length(str) - 2 | 0);
     /*<<scanf.ml:1147:18>>*/ return [0, stp, sub_str];
    /*<<scanf.ml:1148:16>>*/ }
    /*<<scanf.ml:1002:33>>*/ function take_format_readers$0(counter, k, fmt){
    var fmt$0 = fmt;
     /*<<scanf.ml:1161:13>>*/ for(;;){
      /*<<scanf.ml:1161:13>>*/ if(typeof fmt$0 === "number")
       /*<<scanf.ml:1198:40>>*/ return  /*<<scanf.ml:1198:40>>*/ caml_call1
              (k, 0);
      /*<<scanf.ml:1161:13>>*/ switch(fmt$0[0]){
       case 0:
         /*<<scanf.ml:1166:40>>*/ var
          /*<<scanf.ml:1166:40>>*/ rest = fmt$0[1],
         fmt$0 = rest;
        continue;
       case 1:
         /*<<scanf.ml:1167:40>>*/ var
          /*<<scanf.ml:1167:40>>*/ rest$0 = fmt$0[1],
         fmt$0 = rest$0;
        continue;
       case 2:
         /*<<scanf.ml:1168:40>>*/ var
          /*<<scanf.ml:1168:40>>*/ rest$1 = fmt$0[2],
         fmt$0 = rest$1;
        continue;
       case 3:
         /*<<scanf.ml:1169:40>>*/ var
          /*<<scanf.ml:1169:40>>*/ rest$2 = fmt$0[2],
         fmt$0 = rest$2;
        continue;
       case 4:
         /*<<scanf.ml:1170:40>>*/ var
          /*<<scanf.ml:1170:40>>*/ rest$3 = fmt$0[4],
         fmt$0 = rest$3;
        continue;
       case 5:
         /*<<scanf.ml:1171:40>>*/ var
          /*<<scanf.ml:1171:40>>*/ rest$4 = fmt$0[4],
         fmt$0 = rest$4;
        continue;
       case 6:
         /*<<scanf.ml:1172:40>>*/ var
          /*<<scanf.ml:1172:40>>*/ rest$5 = fmt$0[4],
         fmt$0 = rest$5;
        continue;
       case 7:
         /*<<scanf.ml:1173:40>>*/ var
          /*<<scanf.ml:1173:40>>*/ rest$6 = fmt$0[4],
         fmt$0 = rest$6;
        continue;
       case 8:
         /*<<scanf.ml:1174:40>>*/ var
          /*<<scanf.ml:1174:40>>*/ rest$7 = fmt$0[4],
         fmt$0 = rest$7;
        continue;
       case 9:
         /*<<scanf.ml:1175:40>>*/ var
          /*<<scanf.ml:1175:40>>*/ rest$8 = fmt$0[2],
         fmt$0 = rest$8;
        continue;
       case 10:
         /*<<scanf.ml:1178:40>>*/ var
          /*<<scanf.ml:1178:40>>*/ rest$9 = fmt$0[1],
         fmt$0 = rest$9;
        continue;
       case 11:
         /*<<scanf.ml:1179:40>>*/ var
          /*<<scanf.ml:1179:40>>*/ rest$10 = fmt$0[2],
         fmt$0 = rest$10;
        continue;
       case 12:
         /*<<scanf.ml:1180:40>>*/ var
          /*<<scanf.ml:1180:40>>*/ rest$11 = fmt$0[2],
         fmt$0 = rest$11;
        continue;
       case 13:
         /*<<scanf.ml:1193:40>>*/ var
          /*<<scanf.ml:1193:40>>*/ rest$12 = fmt$0[3],
         fmt$0 = rest$12;
        continue;
       case 14:
         /*<<scanf.ml:1195:44>>*/ var
         rest$13 = fmt$0[3],
         fmtty = fmt$0[2],
          /*<<scanf.ml:1195:44>>*/ _V_ =
            /*<<scanf.ml:1195:44>>*/ caml_call1(CamlinternalFormat[21], fmtty),
          /*<<scanf.ml:1195:33>>*/ _W_ =
            /*<<scanf.ml:1195:33>>*/ caml_call1
            (CamlinternalFormatBasics[2], _V_);
         /*<<scanf.ml:1195:33>>*/ if(counter >= 50)
         return caml_trampoline_return
                 (take_fmtty_format_readers$0, [0, k, _W_, rest$13]);
        var counter$0 = counter + 1 | 0;
        return take_fmtty_format_readers$0(counter$0, k, _W_, rest$13);
       case 15:
         /*<<scanf.ml:1176:40>>*/ var
          /*<<scanf.ml:1176:40>>*/ rest$14 = fmt$0[1],
         fmt$0 = rest$14;
        continue;
       case 16:
         /*<<scanf.ml:1177:40>>*/ var
          /*<<scanf.ml:1177:40>>*/ rest$15 = fmt$0[1],
         fmt$0 = rest$15;
        continue;
       case 17:
         /*<<scanf.ml:1187:40>>*/ var
          /*<<scanf.ml:1187:40>>*/ rest$16 = fmt$0[2],
         fmt$0 = rest$16;
        continue;
       case 18:
        var _X_ = fmt$0[1];
        if(0 === _X_[0]){
          /*<<scanf.ml:1189:28>>*/ var
          rest$17 = fmt$0[2],
          fmt$1 = _X_[1][1],
           /*<<scanf.ml:1189:28>>*/ fmt$2 =
             /*<<scanf.ml:1189:28>>*/ caml_call2
             (CamlinternalFormatBasics[3], fmt$1, rest$17),
          fmt$0 = fmt$2;
         continue;
        }
         /*<<scanf.ml:1191:28>>*/ var
         rest$18 = fmt$0[2],
         fmt$3 = _X_[1][1],
          /*<<scanf.ml:1191:28>>*/ fmt$4 =
            /*<<scanf.ml:1191:28>>*/ caml_call2
            (CamlinternalFormatBasics[3], fmt$3, rest$18),
         fmt$0 = fmt$4;
        continue;
       case 19:
         /*<<scanf.ml:1163:4>>*/  /*<<scanf.ml:1163:4>>*/ var
         fmt_rest = fmt$0[1];
         /*<<scanf.ml:1163:4>>*/ return function(reader){
          /*<<scanf.ml:1164:6>>*/ function new_k(readers_rest){
           /*<<scanf.ml:1164:31>>*/ return  /*<<scanf.ml:1164:31>>*/ caml_call1
                  (k, [0, reader, readers_rest]);
          /*<<scanf.ml:1164:62>>*/ }
          /*<<scanf.ml:1164:6>>*/ return take_format_readers(new_k, fmt_rest); /*<<scanf.ml:1165:40>>*/ };
       case 20:
         /*<<scanf.ml:1183:40>>*/ var
          /*<<scanf.ml:1183:40>>*/ rest$19 = fmt$0[3],
         fmt$0 = rest$19;
        continue;
       case 21:
         /*<<scanf.ml:1184:40>>*/ var
          /*<<scanf.ml:1184:40>>*/ rest$20 = fmt$0[2],
         fmt$0 = rest$20;
        continue;
       case 22:
         /*<<scanf.ml:1185:40>>*/ var
          /*<<scanf.ml:1185:40>>*/ rest$21 = fmt$0[1],
         fmt$0 = rest$21;
        continue;
       case 23:
        var rest$22 = fmt$0[2], ign = fmt$0[1];
         /*<<scanf.ml:1234:17>>*/ if(typeof ign === "number")
          /*<<scanf.ml:1234:17>>*/ switch(ign){
           case 0:
            var fmt$0 = rest$22; continue;
           case 1:
            var fmt$0 = rest$22; continue;
           case 2:
             /*<<scanf.ml:1236:4>>*/ return function(reader){
              /*<<scanf.ml:1237:6>>*/ function new_k(readers_rest){
               /*<<scanf.ml:1237:31>>*/ return  /*<<scanf.ml:1237:31>>*/ caml_call1
                      (k, [0, reader, readers_rest]);
              /*<<scanf.ml:1237:62>>*/ }
              /*<<scanf.ml:1237:6>>*/ return take_format_readers
                     (new_k, rest$22); /*<<scanf.ml:1238:35>>*/ };
           default: var fmt$0 = rest$22; continue;
         }
         /*<<scanf.ml:1234:17>>*/ switch(ign[0]){
          case 0:
           var fmt$0 = rest$22; continue;
          case 1:
           var fmt$0 = rest$22; continue;
          case 2:
           var fmt$0 = rest$22; continue;
          case 3:
           var fmt$0 = rest$22; continue;
          case 4:
           var fmt$0 = rest$22; continue;
          case 5:
           var fmt$0 = rest$22; continue;
          case 6:
           var fmt$0 = rest$22; continue;
          case 7:
           var fmt$0 = rest$22; continue;
          case 8:
           var fmt$0 = rest$22; continue;
          case 9:
            /*<<scanf.ml:1250:39>>*/  /*<<scanf.ml:1250:39>>*/ var
            fmtty$0 = ign[2];
            /*<<scanf.ml:1250:39>>*/ if(counter >= 50)
            return caml_trampoline_return
                    (take_fmtty_format_readers$0, [0, k, fmtty$0, rest$22]);
           var counter$1 = counter + 1 | 0;
           return take_fmtty_format_readers$0(counter$1, k, fmtty$0, rest$22);
          case 10:
           var fmt$0 = rest$22; continue;
          default: var fmt$0 = rest$22; continue;
        }
       default:
         /*<<scanf.ml:1181:40>>*/ var
          /*<<scanf.ml:1181:40>>*/ rest$23 = fmt$0[3],
         fmt$0 = rest$23;
        continue;
     }
    }
    /*<<scanf.ml:1198:45>>*/ }
    /*<<scanf.ml:1002:33>>*/ function take_fmtty_format_readers$0
   (counter, k, fmtty, fmt){
    var fmtty$0 = fmtty;
     /*<<scanf.ml:1204:19>>*/ for(;;){
      /*<<scanf.ml:1204:19>>*/ if(typeof fmtty$0 !== "number")
       /*<<scanf.ml:1204:19>>*/ switch(fmtty$0[0]){
        case 0:
          /*<<scanf.ml:1213:35>>*/ var
           /*<<scanf.ml:1213:35>>*/ fmtty$1 = fmtty$0[1],
          fmtty$0 = fmtty$1;
         continue;
        case 1:
          /*<<scanf.ml:1214:35>>*/ var
           /*<<scanf.ml:1214:35>>*/ fmtty$2 = fmtty$0[1],
          fmtty$0 = fmtty$2;
         continue;
        case 2:
          /*<<scanf.ml:1215:35>>*/ var
           /*<<scanf.ml:1215:35>>*/ fmtty$3 = fmtty$0[1],
          fmtty$0 = fmtty$3;
         continue;
        case 3:
          /*<<scanf.ml:1216:35>>*/ var
           /*<<scanf.ml:1216:35>>*/ fmtty$4 = fmtty$0[1],
          fmtty$0 = fmtty$4;
         continue;
        case 4:
          /*<<scanf.ml:1217:35>>*/ var
           /*<<scanf.ml:1217:35>>*/ fmtty$5 = fmtty$0[1],
          fmtty$0 = fmtty$5;
         continue;
        case 5:
          /*<<scanf.ml:1218:35>>*/ var
           /*<<scanf.ml:1218:35>>*/ fmtty$6 = fmtty$0[1],
          fmtty$0 = fmtty$6;
         continue;
        case 6:
          /*<<scanf.ml:1219:35>>*/ var
           /*<<scanf.ml:1219:35>>*/ fmtty$7 = fmtty$0[1],
          fmtty$0 = fmtty$7;
         continue;
        case 7:
          /*<<scanf.ml:1220:35>>*/ var
           /*<<scanf.ml:1220:35>>*/ fmtty$8 = fmtty$0[1],
          fmtty$0 = fmtty$8;
         continue;
        case 8:
          /*<<scanf.ml:1224:35>>*/ var
           /*<<scanf.ml:1224:35>>*/ fmtty$9 = fmtty$0[2],
          fmtty$0 = fmtty$9;
         continue;
        case 9:
          /*<<scanf.ml:1227:19>>*/ var
          rest = fmtty$0[3],
          ty2 = fmtty$0[2],
          ty1 = fmtty$0[1],
           /*<<scanf.ml:1227:19>>*/ _U_ =
             /*<<scanf.ml:1227:19>>*/ caml_call1(CamlinternalFormat[21], ty1),
           /*<<scanf.ml:1227:13>>*/ ty =
             /*<<scanf.ml:1227:13>>*/ caml_call2
             (CamlinternalFormat[22], _U_, ty2),
           /*<<scanf.ml:1228:32>>*/ fmtty$10 =
             /*<<scanf.ml:1228:32>>*/ caml_call2
             (CamlinternalFormatBasics[1], ty, rest),
          fmtty$0 = fmtty$10;
         continue;
        case 10:
          /*<<scanf.ml:1221:35>>*/ var
           /*<<scanf.ml:1221:35>>*/ fmtty$11 = fmtty$0[1],
          fmtty$0 = fmtty$11;
         continue;
        case 11:
          /*<<scanf.ml:1222:35>>*/ var
           /*<<scanf.ml:1222:35>>*/ fmtty$12 = fmtty$0[1],
          fmtty$0 = fmtty$12;
         continue;
        case 12:
          /*<<scanf.ml:1223:35>>*/ var
           /*<<scanf.ml:1223:35>>*/ fmtty$13 = fmtty$0[1],
          fmtty$0 = fmtty$13;
         continue;
        case 13:
          /*<<scanf.ml:1206:4>>*/  /*<<scanf.ml:1206:4>>*/ var
          fmt_rest = fmtty$0[1];
          /*<<scanf.ml:1206:4>>*/ return function(reader){
           /*<<scanf.ml:1207:6>>*/ function new_k(readers_rest){
            /*<<scanf.ml:1207:31>>*/ return  /*<<scanf.ml:1207:31>>*/ caml_call1
                   (k, [0, reader, readers_rest]);
           /*<<scanf.ml:1207:62>>*/ }
           /*<<scanf.ml:1207:6>>*/ return take_fmtty_format_readers
                  (new_k, fmt_rest, fmt); /*<<scanf.ml:1208:50>>*/ };
        default:
          /*<<scanf.ml:1210:4>>*/  /*<<scanf.ml:1210:4>>*/ var
          fmt_rest$0 = fmtty$0[1];
          /*<<scanf.ml:1210:4>>*/ return function(reader){
           /*<<scanf.ml:1211:6>>*/ function new_k(readers_rest){
            /*<<scanf.ml:1211:31>>*/ return  /*<<scanf.ml:1211:31>>*/ caml_call1
                   (k, [0, reader, readers_rest]);
           /*<<scanf.ml:1211:62>>*/ }
           /*<<scanf.ml:1211:6>>*/ return take_fmtty_format_readers
                  (new_k, fmt_rest$0, fmt); /*<<scanf.ml:1212:50>>*/ };
      }
      /*<<scanf.ml:1225:35>>*/ if(counter >= 50)
      return caml_trampoline_return(take_format_readers$0, [0, k, fmt]);
     var counter$0 = counter + 1 | 0;
     return take_format_readers$0(counter$0, k, fmt);
    }
    /*<<scanf.ml:1228:58>>*/ }
    /*<<scanf.ml:1002:33>>*/ function take_format_readers(k, fmt){
     /*<<?>>*/ return caml_trampoline(take_format_readers$0(0, k, fmt));
   }
    /*<<scanf.ml:1002:33>>*/ function take_fmtty_format_readers(k, fmtty, fmt){
     /*<<?>>*/ return caml_trampoline
            (take_fmtty_format_readers$0(0, k, fmtty, fmt));
   }
    /*<<scanf.ml:1002:33>>*/ function pad_prec_scanf
   (ib, fmt, readers, pad, prec, scan, token){
     /*<<scanf.ml:1429:42>>*/ if(typeof pad === "number"){
     if(typeof prec !== "number"){
       /*<<scanf.ml:1435:4>>*/  /*<<scanf.ml:1435:4>>*/ var p = prec[1];
       /*<<scanf.ml:1435:12>>*/  /*<<scanf.ml:1435:12>>*/ caml_call3
       (scan, Stdlib[19], p, ib);
       /*<<scanf.ml:1436:12>>*/  /*<<scanf.ml:1436:12>>*/ var
       x$0 =  /*<<scanf.ml:1436:12>>*/ caml_call1(token, ib);
       /*<<scanf.ml:1437:13>>*/ return [0, x$0, make_scanf(ib, fmt, readers)];
     }
      /*<<scanf.ml:1453:4>>*/ if(prec)
       /*<<scanf.ml:1453:4>>*/ return  /*<<scanf.ml:1453:4>>*/ caml_call1
              (Stdlib[1], cst_scanf_bad_conversion);
      /*<<scanf.ml:1431:12>>*/  /*<<scanf.ml:1431:12>>*/ caml_call3
      (scan, Stdlib[19], Stdlib[19], ib);
      /*<<scanf.ml:1432:12>>*/  /*<<scanf.ml:1432:12>>*/ var
      x =  /*<<scanf.ml:1432:12>>*/ caml_call1(token, ib);
      /*<<scanf.ml:1433:13>>*/ return [0, x, make_scanf(ib, fmt, readers)];
    }
     /*<<scanf.ml:1429:42>>*/ if(0 !== pad[0])
      /*<<scanf.ml:1451:4>>*/ return  /*<<scanf.ml:1451:4>>*/ caml_call1
             (Stdlib[1], cst_scanf_bad_conversion$2);
    if(! pad[1])
      /*<<scanf.ml:1447:4>>*/ return  /*<<scanf.ml:1447:4>>*/ caml_call1
             (Stdlib[1], cst_scanf_bad_conversion$1);
    var w = pad[2];
    if(typeof prec !== "number"){
     var p$0 = prec[1];
      /*<<scanf.ml:1443:12>>*/  /*<<scanf.ml:1443:12>>*/ caml_call3
      (scan, w, p$0, ib);
      /*<<scanf.ml:1444:12>>*/  /*<<scanf.ml:1444:12>>*/ var
      x$2 =  /*<<scanf.ml:1444:12>>*/ caml_call1(token, ib);
      /*<<scanf.ml:1445:13>>*/ return [0, x$2, make_scanf(ib, fmt, readers)];
    }
     /*<<scanf.ml:1449:4>>*/ if(prec)
      /*<<scanf.ml:1449:4>>*/ return  /*<<scanf.ml:1449:4>>*/ caml_call1
             (Stdlib[1], cst_scanf_bad_conversion$0);
     /*<<scanf.ml:1439:12>>*/  /*<<scanf.ml:1439:12>>*/ caml_call3
     (scan, w, Stdlib[19], ib);
     /*<<scanf.ml:1440:12>>*/  /*<<scanf.ml:1440:12>>*/ var
     x$1 =  /*<<scanf.ml:1440:12>>*/ caml_call1(token, ib);
     /*<<scanf.ml:1441:13>>*/ return [0, x$1, make_scanf(ib, fmt, readers)];
    /*<<scanf.ml:1453:46>>*/ }
    /*<<scanf.ml:1002:33>>*/ function make_scanf(ib, fmt, readers){
    var fmt$0 = fmt;
     /*<<scanf.ml:1266:22>>*/ for(;;){
      /*<<scanf.ml:1266:22>>*/ if(typeof fmt$0 === "number")
       /*<<scanf.ml:1418:4>>*/ return 0;
      /*<<scanf.ml:1266:22>>*/ switch(fmt$0[0]){
       case 0:
         /*<<scanf.ml:1268:4>>*/  /*<<scanf.ml:1268:4>>*/ var rest = fmt$0[1];
         /*<<scanf.ml:939:31>>*/ store_char(0, ib, checked_peek_char(ib));
         /*<<scanf.ml:1269:12>>*/  /*<<scanf.ml:1269:12>>*/ var
         c$1 = token_char(ib);
         /*<<scanf.ml:1270:13>>*/ return [0,
                c$1,
                make_scanf(ib, rest, readers)];
       case 1:
         /*<<scanf.ml:1272:4>>*/ var
          /*<<scanf.ml:1272:4>>*/ rest$0 = fmt$0[1],
          /*<<scanf.ml:1272:4>>*/ width$0 = 0,
          /*<<scanf.ml:1034:2>>*/ find_stop =
           function(width){
             /*<<scanf.ml:1047:10>>*/  /*<<scanf.ml:1047:10>>*/ var
             c = check_next_char_for_char(width, ib);
             /*<<scanf.ml:1047:10>>*/ return 39 === c
                    ? ignore_char(width, ib)
                    : character_mismatch(39, c);
            /*<<scanf.ml:1049:36>>*/ },
          /*<<scanf.ml:1035:10>>*/ c = checked_peek_char(ib);
         /*<<scanf.ml:1035:10>>*/ if(39 === c){
          /*<<scanf.ml:1036:24>>*/ var
           /*<<scanf.ml:1036:24>>*/ width = ignore_char(width$0, ib),
           /*<<scanf.ml:1040:10>>*/ c$0 = check_next_char_for_char(width, ib);
          /*<<scanf.ml:1040:10>>*/ if(92 === c$0)
           /*<<scanf.ml:1042:16>>*/ find_stop
           (scan_backslash_char(ignore_char(width, ib), ib));
         else
           /*<<scanf.ml:1044:16>>*/ find_stop(store_char(width, ib, c$0));
        }
        else
          /*<<scanf.ml:1037:11>>*/ character_mismatch(39, c);
         /*<<scanf.ml:1273:12>>*/  /*<<scanf.ml:1273:12>>*/ var
         c$2 = token_char(ib);
         /*<<scanf.ml:1274:13>>*/ return [0,
                c$2,
                make_scanf(ib, rest$0, readers)];
       case 2:
        var pad = fmt$0[1], match = fmt$0[2];
        if(typeof match !== "number")
         switch(match[0]){
           case 17:
             /*<<scanf.ml:1277:19>>*/ var
             rest$2 = match[2],
             fmting_lit = match[1],
              /*<<scanf.ml:1277:19>>*/ match$0 =
               stopper_of_formatting_lit(fmting_lit),
              /*<<scanf.ml:1277:19>>*/ str = match$0[2],
              /*<<scanf.ml:1277:19>>*/ stp = match$0[1],
              /*<<scanf.ml:1277:19>>*/ scan$0 =
               function(width, param, ib){
                 /*<<scanf.ml:1278:26>>*/ return scan_string
                        ([0, stp], width, ib);
                /*<<scanf.ml:1278:57>>*/ },
              /*<<scanf.ml:1277:19>>*/ str_rest = [11, str, rest$2];
             /*<<scanf.ml:1277:19>>*/ return pad_prec_scanf
                    (ib, str_rest, readers, pad, 0, scan$0, token_string);
           case 18:
            var _G_ = match[1];
            if(0 === _G_[0]){
             var
              rest$3 = match[2],
              fmt$1 = _G_[1][1],
              scan$1 =
                function(width, param, ib){
                  /*<<scanf.ml:1282:26>>*/ return scan_string(_q_, width, ib);
                 /*<<scanf.ml:1282:57>>*/ };
              /*<<scanf.ml:1283:22>>*/ return pad_prec_scanf
                     (ib,
                       /*<<scanf.ml:1283:22>>*/ caml_call2
                       (CamlinternalFormatBasics[3], fmt$1, rest$3),
                      readers,
                      pad,
                      0,
                      scan$1,
                      token_string);
            }
            var
             rest$4 = match[2],
             fmt$2 = _G_[1][1],
             scan$2 =
               function(width, param, ib){
                 /*<<scanf.ml:1286:26>>*/ return scan_string(_r_, width, ib);
                /*<<scanf.ml:1286:57>>*/ };
             /*<<scanf.ml:1287:22>>*/ return pad_prec_scanf
                    (ib,
                      /*<<scanf.ml:1287:22>>*/ caml_call2
                      (CamlinternalFormatBasics[3], fmt$2, rest$4),
                     readers,
                     pad,
                     0,
                     scan$2,
                     token_string);
         }
        var
         rest$1 = fmt$0[2],
         scan =
           function(width, param, ib){
             /*<<scanf.ml:1290:26>>*/ return scan_string(0, width, ib);
            /*<<scanf.ml:1290:51>>*/ };
        return pad_prec_scanf(ib, rest$1, readers, pad, 0, scan, token_string);
       case 3:
        var
         rest$5 = fmt$0[2],
         pad$0 = fmt$0[1],
         scan$3 =
           function(width, param, ib){
             /*<<scanf.ml:1294:26>>*/ return scan_caml_string(width, ib);
            /*<<scanf.ml:1294:51>>*/ };
        return pad_prec_scanf
                (ib, rest$5, readers, pad$0, 0, scan$3, token_string);
       case 4:
         /*<<scanf.ml:1297:12>>*/ var
         rest$6 = fmt$0[4],
         prec = fmt$0[3],
         pad$1 = fmt$0[2],
         iconv = fmt$0[1],
          /*<<scanf.ml:1297:12>>*/ conv =
           integer_conversion_of_char
            ( /*<<scanf.ml:1297:39>>*/ caml_call1
              (CamlinternalFormat[16], iconv)),
          /*<<scanf.ml:1297:12>>*/ scan$4 =
           function(width, param, ib){
             /*<<scanf.ml:1298:26>>*/ return scan_int_conversion
                    (conv, width, ib);
            /*<<scanf.ml:1298:56>>*/ };
         /*<<scanf.ml:1299:49>>*/ return pad_prec_scanf
                (ib,
                 rest$6,
                 readers,
                 pad$1,
                 prec,
                 scan$4,
                 function(ib){
                   /*<<scanf.ml:537:65>>*/ return  /*<<scanf.ml:537:65>>*/ caml_int_of_string
                          (token_int_literal(conv, ib));
                 });
       case 5:
         /*<<scanf.ml:1301:12>>*/ var
         rest$7 = fmt$0[4],
         prec$0 = fmt$0[3],
         pad$2 = fmt$0[2],
         iconv$0 = fmt$0[1],
          /*<<scanf.ml:1301:12>>*/ conv$0 =
           integer_conversion_of_char
            ( /*<<scanf.ml:1301:39>>*/ caml_call1
              (CamlinternalFormat[16], iconv$0)),
          /*<<scanf.ml:1301:12>>*/ scan$5 =
           function(width, param, ib){
             /*<<scanf.ml:1302:26>>*/ return scan_int_conversion
                    (conv$0, width, ib);
            /*<<scanf.ml:1302:56>>*/ };
         /*<<scanf.ml:1303:49>>*/ return pad_prec_scanf
                (ib,
                 rest$7,
                 readers,
                 pad$2,
                 prec$0,
                 scan$5,
                 function(ib){
                   /*<<scanf.ml:558:69>>*/ return  /*<<scanf.ml:558:69>>*/ caml_int_of_string
                          (token_int_literal(conv$0, ib));
                 });
       case 6:
         /*<<scanf.ml:1305:12>>*/ var
         rest$8 = fmt$0[4],
         prec$1 = fmt$0[3],
         pad$3 = fmt$0[2],
         iconv$1 = fmt$0[1],
          /*<<scanf.ml:1305:12>>*/ conv$1 =
           integer_conversion_of_char
            ( /*<<scanf.ml:1305:39>>*/ caml_call1
              (CamlinternalFormat[16], iconv$1)),
          /*<<scanf.ml:1305:12>>*/ scan$6 =
           function(width, param, ib){
             /*<<scanf.ml:1306:26>>*/ return scan_int_conversion
                    (conv$1, width, ib);
            /*<<scanf.ml:1306:56>>*/ };
         /*<<scanf.ml:1307:49>>*/ return pad_prec_scanf
                (ib,
                 rest$8,
                 readers,
                 pad$3,
                 prec$1,
                 scan$6,
                 function(ib){
                   /*<<scanf.ml:557:77>>*/ return  /*<<scanf.ml:557:77>>*/ caml_int_of_string
                          (token_int_literal(conv$1, ib));
                 });
       case 7:
         /*<<scanf.ml:1309:12>>*/ var
         rest$9 = fmt$0[4],
         prec$2 = fmt$0[3],
         pad$4 = fmt$0[2],
         iconv$2 = fmt$0[1],
          /*<<scanf.ml:1309:12>>*/ conv$2 =
           integer_conversion_of_char
            ( /*<<scanf.ml:1309:39>>*/ caml_call1
              (CamlinternalFormat[16], iconv$2)),
          /*<<scanf.ml:1309:12>>*/ scan$7 =
           function(width, param, ib){
             /*<<scanf.ml:1310:26>>*/ return scan_int_conversion
                    (conv$2, width, ib);
            /*<<scanf.ml:1310:56>>*/ };
         /*<<scanf.ml:1311:49>>*/ return pad_prec_scanf
                (ib,
                 rest$9,
                 readers,
                 pad$4,
                 prec$2,
                 scan$7,
                 function(ib){
                   /*<<scanf.ml:559:69>>*/ return  /*<<scanf.ml:559:69>>*/ runtime.caml_int64_of_string
                          (token_int_literal(conv$2, ib));
                 });
       case 8:
        switch(fmt$0[1][2]){
          case 5:
          case 8:
           var rest$11 = fmt$0[4], prec$4 = fmt$0[3], pad$6 = fmt$0[2];
           return pad_prec_scanf
                   (ib,
                    rest$11,
                    readers,
                    pad$6,
                    prec$4,
                    scan_caml_float,
                    token_float);
          case 6:
          case 7:
           var rest$12 = fmt$0[4], prec$5 = fmt$0[3], pad$7 = fmt$0[2];
           return pad_prec_scanf
                   (ib,
                    rest$12,
                    readers,
                    pad$7,
                    prec$5,
                    scan_hex_float,
                    token_float);
          default:
           var rest$10 = fmt$0[4], prec$3 = fmt$0[3], pad$5 = fmt$0[2];
           return pad_prec_scanf
                   (ib,
                    rest$10,
                    readers,
                    pad$5,
                    prec$3,
                    scan_float,
                    token_float);
        }
       case 9:
        var
         rest$13 = fmt$0[2],
         pad$8 = fmt$0[1],
         scan$8 =
           function(param, _T_, ib){
             /*<<scanf.ml:1089:10>>*/ var
              /*<<scanf.ml:1089:10>>*/ c = checked_peek_char(ib),
              /*<<scanf.ml:1089:10>>*/ m =
               102 === c
                ? 5
                : 116
                  === c
                  ? 4
                  : bad_input
                    ( /*<<scanf.ml:1096:8>>*/ caml_call2
                      (Stdlib_Printf[4], _n_, c));
             /*<<scanf.ml:1097:2>>*/ return scan_string(0, m, ib);
            /*<<scanf.ml:1320:34>>*/ };
        return pad_prec_scanf
                (ib, rest$13, readers, pad$8, 0, scan$8, token_bool);
       case 10:
         /*<<scanf.ml:1337:4>>*/  /*<<scanf.ml:1337:4>>*/ var
         rest$14 = fmt$0[1];
         /*<<scanf.ml:1337:7>>*/ if(! end_of_input(ib))
          /*<<scanf.ml:1338:9>>*/ return bad_input(cst_end_of_input_not_found);
        var fmt$0 = rest$14;
        continue;
       case 11:
         /*<<scanf.ml:1341:16>>*/ var
         rest$15 = fmt$0[2],
         str$0 = fmt$0[1],
          /*<<scanf.ml:1341:16>>*/ _H_ =
           function(_S_){ /*<<?>>*/ return check_char(ib, _S_);};
         /*<<scanf.ml:1341:4>>*/  /*<<scanf.ml:1341:4>>*/ caml_call2
         (Stdlib_String[29], _H_, str$0);
        var fmt$0 = rest$15;
        continue;
       case 12:
        var rest$16 = fmt$0[2], chr = fmt$0[1];
         /*<<scanf.ml:1344:4>>*/ check_char(ib, chr);
        var fmt$0 = rest$16;
        continue;
       case 13:
        var rest$17 = fmt$0[3], fmtty = fmt$0[2], pad_opt = fmt$0[1];
         /*<<scanf.ml:1348:12>>*/ scan_caml_string
         (width_of_pad_opt(pad_opt), ib);
         /*<<scanf.ml:1349:12>>*/  /*<<scanf.ml:1349:12>>*/ var
         s = token_string(ib);
        try{
          /*<<scanf.ml:1351:10>>*/ var
           /*<<scanf.ml:1351:10>>*/ _I_ =
             /*<<scanf.ml:1351:10>>*/ caml_call2
             (CamlinternalFormat[14], s, fmtty),
          fmt$3 = _I_;
        }
        catch(exn$0){
         var exn = caml_wrap_exception(exn$0);
         if(exn[1] !== Stdlib[7]) throw caml_maybe_attach_backtrace(exn, 0);
          /*<<scanf.ml:1352:26>>*/ var
           /*<<scanf.ml:1352:26>>*/ msg = exn[2],
          fmt$3 = bad_input(msg);
        }
         /*<<scanf.ml:1354:15>>*/ return [0,
                fmt$3,
                make_scanf(ib, rest$17, readers)];
       case 14:
        var rest$18 = fmt$0[3], fmtty$0 = fmt$0[2], pad_opt$0 = fmt$0[1];
         /*<<scanf.ml:1356:12>>*/ scan_caml_string
         (width_of_pad_opt(pad_opt$0), ib);
         /*<<scanf.ml:1357:12>>*/  /*<<scanf.ml:1357:12>>*/ var
         s$0 = token_string(ib);
        try{
          /*<<scanf.ml:1360:26>>*/ var
           /*<<scanf.ml:1360:26>>*/ fmt$6 =
             /*<<scanf.ml:1360:26>>*/ caml_call2
              (CamlinternalFormat[13], 0, s$0)
             [1],
           /*<<scanf.ml:1361:27>>*/ fmt$7 =
             /*<<scanf.ml:1361:27>>*/ caml_call2
              (CamlinternalFormat[13], 0, s$0)
             [1],
           /*<<scanf.ml:1375:36>>*/ _K_ =
             /*<<scanf.ml:1375:36>>*/ caml_call1
             (CamlinternalFormat[21], fmtty$0),
           /*<<scanf.ml:1375:25>>*/ _L_ =
             /*<<scanf.ml:1375:25>>*/ caml_call1
             (CamlinternalFormatBasics[2], _K_),
           /*<<scanf.ml:1375:8>>*/ fmt$8 =
             /*<<scanf.ml:1375:8>>*/ caml_call2
             (CamlinternalFormat[12], fmt$7, _L_),
           /*<<scanf.ml:1374:24>>*/ _M_ =
             /*<<scanf.ml:1374:24>>*/ caml_call1
             (CamlinternalFormatBasics[2], fmtty$0),
           /*<<scanf.ml:1374:8>>*/ _N_ =
             /*<<scanf.ml:1374:8>>*/ caml_call2
             (CamlinternalFormat[12], fmt$6, _M_),
          fmt$5 = fmt$8,
          fmt$4 = _N_;
        }
        catch(exn){
         var exn$0 = caml_wrap_exception(exn);
         if(exn$0[1] !== Stdlib[7])
           /*<<scanf.ml:1378:4>>*/ throw  /*<<scanf.ml:1378:4>>*/ caml_maybe_attach_backtrace
                 (exn$0, 0);
          /*<<scanf.ml:1376:26>>*/ var
           /*<<scanf.ml:1376:26>>*/ msg$0 = exn$0[2],
           /*<<scanf.ml:1376:26>>*/ _J_ = bad_input(msg$0),
          fmt$5 = _J_[2],
          fmt$4 = _J_[1];
        }
         /*<<scanf.ml:1379:10>>*/ return [0,
                [0, fmt$4, s$0],
                make_scanf
                 (ib,
                   /*<<scanf.ml:1379:24>>*/ caml_call2
                   (CamlinternalFormatBasics[3], fmt$5, rest$18),
                  readers)];
       case 15:
         /*<<scanf.ml:1323:4>>*/ return  /*<<scanf.ml:1323:4>>*/ caml_call1
                (Stdlib[1], cst_scanf_bad_conversion_a);
       case 16:
         /*<<scanf.ml:1325:4>>*/ return  /*<<scanf.ml:1325:4>>*/ caml_call1
                (Stdlib[1], cst_scanf_bad_conversion_t);
       case 17:
         /*<<scanf.ml:1401:32>>*/ var
         rest$19 = fmt$0[2],
         formatting_lit = fmt$0[1],
          /*<<scanf.ml:1401:32>>*/ _O_ =
            /*<<scanf.ml:1401:32>>*/ caml_call1
            (CamlinternalFormat[17], formatting_lit),
          /*<<scanf.ml:1401:16>>*/ _P_ =
           function(_R_){ /*<<?>>*/ return check_char(ib, _R_);};
         /*<<scanf.ml:1401:4>>*/  /*<<scanf.ml:1401:4>>*/ caml_call2
         (Stdlib_String[29], _P_, _O_);
        var fmt$0 = rest$19;
        continue;
       case 18:
        var _Q_ = fmt$0[1];
        if(0 === _Q_[0]){
         var rest$20 = fmt$0[2], fmt$9 = _Q_[1][1];
          /*<<scanf.ml:1404:4>>*/ check_char(ib, 64);
          /*<<scanf.ml:1404:23>>*/ check_char(ib, 123);
          /*<<scanf.ml:1405:18>>*/ var
           /*<<scanf.ml:1405:18>>*/ fmt$10 =
             /*<<scanf.ml:1405:18>>*/ caml_call2
             (CamlinternalFormatBasics[3], fmt$9, rest$20),
          fmt$0 = fmt$10;
         continue;
        }
        var rest$21 = fmt$0[2], fmt$11 = _Q_[1][1];
         /*<<scanf.ml:1407:4>>*/ check_char(ib, 64);
         /*<<scanf.ml:1407:23>>*/ check_char(ib, 91);
         /*<<scanf.ml:1408:18>>*/ var
          /*<<scanf.ml:1408:18>>*/ fmt$12 =
            /*<<scanf.ml:1408:18>>*/ caml_call2
            (CamlinternalFormatBasics[3], fmt$11, rest$21),
         fmt$0 = fmt$12;
        continue;
       case 19:
         /*<<scanf.ml:1329:4>>*/  /*<<scanf.ml:1329:4>>*/ var
         fmt_rest = fmt$0[1];
         /*<<scanf.ml:1329:4>>*/ if(! readers)
          /*<<scanf.ml:1334:8>>*/ return  /*<<scanf.ml:1334:8>>*/ caml_call1
                 (Stdlib[1], cst_scanf_missing_reader);
         /*<<scanf.ml:1331:16>>*/ var
         readers_rest = readers[2],
         reader = readers[1],
          /*<<scanf.ml:1331:16>>*/ x =
            /*<<scanf.ml:1331:16>>*/ caml_call1(reader, ib);
         /*<<scanf.ml:1332:17>>*/ return [0,
                x,
                make_scanf(ib, fmt_rest, readers_rest)];
       case 20:
        var width_opt = fmt$0[1], match$1 = fmt$0[3];
        if(typeof match$1 !== "number" && 17 === match$1[0]){
          /*<<scanf.ml:1382:19>>*/ var
          rest$23 = match$1[2],
          fmting_lit$0 = match$1[1],
          char_set$0 = fmt$0[2],
           /*<<scanf.ml:1382:19>>*/ match$2 =
            stopper_of_formatting_lit(fmting_lit$0),
           /*<<scanf.ml:1382:19>>*/ str$1 = match$2[2],
           /*<<scanf.ml:1382:19>>*/ stp$0 = match$2[1],
           /*<<scanf.ml:1383:16>>*/ width$2 = width_of_pad_opt(width_opt);
          /*<<scanf.ml:1384:4>>*/ scan_chars_in_char_set
          (char_set$0, [0, stp$0], width$2, ib);
          /*<<scanf.ml:1385:12>>*/ var
           /*<<scanf.ml:1385:12>>*/ s$2 = token_string(ib),
           /*<<scanf.ml:1385:12>>*/ str_rest$0 = [11, str$1, rest$23];
          /*<<scanf.ml:1387:13>>*/ return [0,
                 s$2,
                 make_scanf(ib, str_rest$0, readers)];
        }
         /*<<scanf.ml:1389:16>>*/ var
         rest$22 = fmt$0[3],
         char_set = fmt$0[2],
          /*<<scanf.ml:1389:16>>*/ width$1 = width_of_pad_opt(width_opt);
         /*<<scanf.ml:1390:4>>*/ scan_chars_in_char_set
         (char_set, 0, width$1, ib);
         /*<<scanf.ml:1391:12>>*/  /*<<scanf.ml:1391:12>>*/ var
         s$1 = token_string(ib);
         /*<<scanf.ml:1392:13>>*/ return [0,
                s$1,
                make_scanf(ib, rest$22, readers)];
       case 21:
        var rest$24 = fmt$0[2], counter = fmt$0[1];
         /*<<scanf.ml:1131:2>>*/ switch(counter){
          case 0:
           var count = ib[5]; break;
          case 1:
           var count = char_count(ib); break;
          default: var count = ib[6];
        }
         /*<<scanf.ml:1395:17>>*/ return [0,
                count,
                make_scanf(ib, rest$24, readers)];
       case 22:
         /*<<scanf.ml:1397:4>>*/ var
          /*<<scanf.ml:1397:4>>*/ rest$25 = fmt$0[1],
          /*<<scanf.ml:1397:12>>*/ c$3 = checked_peek_char(ib);
         /*<<scanf.ml:1398:13>>*/ return [0,
                c$3,
                make_scanf(ib, rest$25, readers)];
       case 23:
         /*<<scanf.ml:1411:32>>*/ var
         rest$26 = fmt$0[2],
         ign = fmt$0[1],
          /*<<scanf.ml:1411:32>>*/ fmt$13 =
            /*<<scanf.ml:1411:32>>*/ caml_call2
             (CamlinternalFormat[6], ign, rest$26)
            [1],
          /*<<scanf.ml:1412:16>>*/ match$3 = make_scanf(ib, fmt$13, readers);
         /*<<scanf.ml:1412:16>>*/ if(! match$3)
          /*<<scanf.ml:1414:13>>*/ throw  /*<<scanf.ml:1414:13>>*/ caml_maybe_attach_backtrace
                ([0, Assert_failure, _s_], 1);
         /*<<scanf.ml:1413:28>>*/  /*<<scanf.ml:1413:28>>*/ var
         arg_rest = match$3[2];
         /*<<scanf.ml:1413:28>>*/ return arg_rest;
       default:
         /*<<scanf.ml:1327:4>>*/ return  /*<<scanf.ml:1327:4>>*/ caml_call1
                (Stdlib[1], cst_scanf_bad_conversion_custo);
     }
    }
    /*<<scanf.ml:1418:7>>*/ }
    /*<<scanf.ml:1002:33>>*/ function kscanf_gen(ib, ef, af, param){
    var str = param[2], fmt = param[1];
    function k(readers, f$1){
      /*<<scanf.ml:222:23>>*/  /*<<scanf.ml:222:23>>*/ caml_call1
      (Stdlib_Buffer[9], ib[8]);
     try{
       /*<<scanf.ml:1466:10>>*/  /*<<scanf.ml:1466:10>>*/ var
       args$1 = make_scanf(ib, fmt, readers);
     }
     catch(exc$0){
      var exc = caml_wrap_exception(exc$0);
      if
       (exc[1] !== Scan_failure && exc[1] !== Stdlib[7] && exc !== Stdlib[12]){
       if(exc[1] !== Stdlib[6])
         /*<<scanf.ml:1468:8>>*/ throw  /*<<scanf.ml:1468:8>>*/ caml_maybe_attach_backtrace
               (exc, 0);
        /*<<scanf.ml:1470:45>>*/ var
        msg = exc[2],
         /*<<scanf.ml:1470:45>>*/ _C_ =
           /*<<scanf.ml:1470:45>>*/ caml_call1(Stdlib_String[24], str),
         /*<<scanf.ml:1470:45>>*/ _D_ =
           /*<<scanf.ml:1470:45>>*/ caml_call2(Stdlib[28], _C_, cst$0),
         /*<<scanf.ml:1470:27>>*/ _E_ =
           /*<<scanf.ml:1470:27>>*/ caml_call2(Stdlib[28], cst_in_format, _D_),
         /*<<scanf.ml:1470:20>>*/ _F_ =
           /*<<scanf.ml:1470:20>>*/ caml_call2(Stdlib[28], msg, _E_);
        /*<<scanf.ml:1470:20>>*/ return  /*<<scanf.ml:1470:20>>*/ caml_call1
               (Stdlib[1], _F_);
      }
       /*<<scanf.ml:1468:8>>*/ return  /*<<scanf.ml:1468:8>>*/ caml_call2
              (ef, ib, exc);
     }
     var f = f$1, args = args$1;
      /*<<scanf.ml:1460:18>>*/ for(;;){
       /*<<scanf.ml:1460:18>>*/ if(! args) return caml_call1(af, f);
       /*<<scanf.ml:1461:27>>*/ var
       args$0 = args[2],
       x = args[1],
        /*<<scanf.ml:1461:27>>*/ f$0 =
          /*<<scanf.ml:1461:27>>*/ caml_call1(f, x),
       f = f$0,
       args = args$0;
     }
     /*<<scanf.ml:1472:25>>*/ }
    return take_format_readers(k, fmt);
   }
    /*<<scanf.ml:1002:33>>*/ function kscanf(ib, ef, fmt){
     /*<<scanf.ml:1477:2>>*/ return kscanf_gen
            (ib,
             ef,
             function(x){
               /*<<scanf.ml:1477:29>>*/ return x;
              /*<<scanf.ml:1477:30>>*/ },
             fmt);
    /*<<scanf.ml:1477:35>>*/ }
    /*<<scanf.ml:1002:33>>*/ function kscanf_opt(ib, fmt){
     /*<<scanf.ml:1480:2>>*/ function _A_(x){
      /*<<scanf.ml:1480:44>>*/ return [0, x];
     /*<<scanf.ml:1480:50>>*/ }
     /*<<scanf.ml:1480:2>>*/ return kscanf_gen
            (ib,
             function(param, _B_){
               /*<<scanf.ml:1480:28>>*/ return 0;
              /*<<scanf.ml:1480:32>>*/ },
             _A_,
             fmt);
    /*<<scanf.ml:1480:55>>*/ }
    /*<<scanf.ml:1002:33>>*/ function bscanf(ib, fmt){
     /*<<scanf.ml:1485:20>>*/ return kscanf(ib, scanf_bad_input, fmt);
    /*<<scanf.ml:1485:50>>*/ }
    /*<<scanf.ml:1002:33>>*/ function bscanf_opt(ib, fmt){
     /*<<scanf.ml:1486:24>>*/ return kscanf_opt(ib, fmt);
    /*<<scanf.ml:1486:41>>*/ }
    /*<<scanf.ml:1002:33>>*/ function ksscanf(s, ef, fmt){
     /*<<scanf.ml:1488:31>>*/ return kscanf(from_string(s), ef, fmt);
    /*<<scanf.ml:1488:62>>*/ }
    /*<<scanf.ml:1002:33>>*/ function sscanf(s, fmt){
     /*<<scanf.ml:1489:27>>*/ return kscanf
            (from_string(s), scanf_bad_input, fmt);
    /*<<scanf.ml:1489:71>>*/ }
    /*<<scanf.ml:1002:33>>*/ function sscanf_opt(s, fmt){
     /*<<scanf.ml:1490:34>>*/ return kscanf_opt(from_string(s), fmt);
    /*<<scanf.ml:1490:62>>*/ }
    /*<<scanf.ml:1002:33>>*/ function scanf(fmt){
     /*<<scanf.ml:1492:16>>*/ return kscanf(stdin, scanf_bad_input, fmt);
    /*<<scanf.ml:1492:57>>*/ }
    /*<<scanf.ml:1002:33>>*/ function scanf_opt(fmt){
     /*<<scanf.ml:1493:20>>*/ return kscanf_opt(stdin, fmt);
    /*<<scanf.ml:1493:49>>*/ }
    /*<<scanf.ml:1002:33>>*/ function bscanf_format(ib, format, f){
     /*<<scanf.ml:1502:12>>*/ scan_caml_string(Stdlib[19], ib);
     /*<<scanf.ml:1503:14>>*/  /*<<scanf.ml:1503:14>>*/ var
     str = token_string(ib);
    try{
      /*<<scanf.ml:1505:10>>*/ var
       /*<<scanf.ml:1505:10>>*/ _z_ =
         /*<<scanf.ml:1505:10>>*/ caml_call2
         (CamlinternalFormat[15], str, format),
      fmt = _z_;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== Stdlib[7]) throw caml_maybe_attach_backtrace(exn, 0);
      /*<<scanf.ml:1506:26>>*/ var
       /*<<scanf.ml:1506:26>>*/ msg = exn[2],
      fmt = bad_input(msg);
    }
     /*<<scanf.ml:1507:4>>*/ return  /*<<scanf.ml:1507:4>>*/ caml_call1
            (f, fmt);
    /*<<scanf.ml:1507:10>>*/ }
    /*<<scanf.ml:1002:33>>*/ function sscanf_format(s, format, f){
     /*<<scanf.ml:1513:34>>*/ return bscanf_format(from_string(s), format, f);
    /*<<scanf.ml:1513:67>>*/ }
    /*<<scanf.ml:1002:33>>*/ function format_from_string(s, fmt){
     /*<<scanf.ml:1517:2>>*/ function _w_(x){
      /*<<scanf.ml:1517:63>>*/ return x;
     /*<<scanf.ml:1517:64>>*/ }
     /*<<scanf.ml:1517:24>>*/ var
      /*<<scanf.ml:1517:24>>*/ _x_ =
        /*<<scanf.ml:1517:24>>*/ caml_call1(Stdlib_String[24], s),
      /*<<scanf.ml:1517:24>>*/ _y_ =
        /*<<scanf.ml:1517:24>>*/ caml_call2(Stdlib[28], _x_, cst$1);
     /*<<scanf.ml:1517:16>>*/ return sscanf_format
            ( /*<<scanf.ml:1517:16>>*/ caml_call2(Stdlib[28], cst$2, _y_),
             fmt,
             _w_);
    /*<<scanf.ml:1517:65>>*/ }
    /*<<scanf.ml:1002:33>>*/ function unescaped(s){
     /*<<scanf.ml:1521:2>>*/ function _u_(x){
      /*<<scanf.ml:1521:44>>*/ return x;
     /*<<scanf.ml:1521:45>>*/ }
     /*<<scanf.ml:1521:17>>*/  /*<<scanf.ml:1521:17>>*/ var
     _v_ =  /*<<scanf.ml:1521:17>>*/ caml_call2(Stdlib[28], s, cst$3);
     /*<<scanf.ml:1521:9>>*/ return  /*<<scanf.ml:1521:9>>*/ caml_call1
            (sscanf
              ( /*<<scanf.ml:1521:9>>*/ caml_call2(Stdlib[28], cst$4, _v_),
               _t_),
             _u_);
    /*<<scanf.ml:1521:46>>*/ }
    /*<<scanf.ml:1002:33>>*/  /*<<scanf.ml:1002:33>>*/ var
    Stdlib_Scanf =
      [0,
       [0,
        stdin,
        open_in,
        open_in_bin,
        close_in,
        open_in,
        open_in_bin,
        from_string,
        from_function,
        from_channel,
        end_of_input,
        beginning_of_input,
        name_of_input],
       Scan_failure,
       bscanf,
       bscanf_opt,
       sscanf,
       sscanf_opt,
       scanf,
       scanf_opt,
       kscanf,
       ksscanf,
       bscanf_format,
       sscanf_format,
       format_from_string,
       unescaped];
    /*<<scanf.ml:1002:33>>*/  /*<<scanf.ml:1002:33>>*/ runtime.caml_register_global
    (64, Stdlib_Scanf, "Stdlib__Scanf");
    /*<<scanf.ml:1002:33>>*/ return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Callback
//# unitInfo: Requires: Stdlib, Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_register_named_value = runtime.caml_register_named_value,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Obj = global_data.Stdlib__Obj;
   function register(name, v){
     /*<<callback.ml:22:2>>*/ return  /*<<callback.ml:22:2>>*/ caml_register_named_value
            (name, v);
    /*<<callback.ml:22:40>>*/ }
   function register_exception(name, exn){
     /*<<callback.ml:25:2>>*/ var
      /*<<callback.ml:25:2>>*/ _a_ = Stdlib_Obj[10],
      /*<<callback.ml:26:16>>*/ slot =
        /*<<callback.ml:26:16>>*/ runtime.caml_obj_tag(exn) === _a_
        ? exn
        : exn[1];
     /*<<callback.ml:27:2>>*/ return  /*<<callback.ml:27:2>>*/ caml_register_named_value
            (name, slot);
    /*<<callback.ml:27:32>>*/ }
   var Stdlib_Callback = [0, register, register_exception];
   runtime.caml_register_global(1, Stdlib_Callback, "Stdlib__Callback");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: CamlinternalOO
//# unitInfo: Requires: Assert_failure, Stdlib, Stdlib__Array, Stdlib__List, Stdlib__Map, Stdlib__Obj, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_camlinternalOO_ml = "camlinternalOO.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_div = runtime.caml_div,
    caml_get_public_method = runtime.caml_get_public_method,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_block = runtime.caml_obj_block,
    caml_set_oo_id = runtime.caml_set_oo_id,
    caml_string_compare = runtime.caml_string_compare,
    caml_wrap_exception = runtime.caml_wrap_exception;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<?>>*/ function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
    /*<<camlinternalOO.ml:126:2>>*/ var
     /*<<camlinternalOO.ml:126:2>>*/ global_data =
       /*<<camlinternalOO.ml:126:2>>*/ runtime.caml_get_global_data(),
     /*<<camlinternalOO.ml:126:2>>*/ Assert_failure =
      global_data.Assert_failure,
     /*<<camlinternalOO.ml:126:2>>*/ Stdlib_Sys = global_data.Stdlib__Sys,
     /*<<camlinternalOO.ml:126:2>>*/ Stdlib_Obj = global_data.Stdlib__Obj,
     /*<<camlinternalOO.ml:126:2>>*/ Stdlib = global_data.Stdlib,
     /*<<camlinternalOO.ml:126:2>>*/ Stdlib_Array = global_data.Stdlib__Array,
     /*<<camlinternalOO.ml:126:2>>*/ Stdlib_List = global_data.Stdlib__List,
     /*<<camlinternalOO.ml:126:2>>*/ Stdlib_Map = global_data.Stdlib__Map,
     /*<<camlinternalOO.ml:126:2>>*/ _g_ = [0, cst_camlinternalOO_ml, 439, 17],
     /*<<camlinternalOO.ml:126:2>>*/ _f_ = [0, cst_camlinternalOO_ml, 421, 13],
     /*<<camlinternalOO.ml:126:2>>*/ _e_ = [0, cst_camlinternalOO_ml, 418, 13],
     /*<<camlinternalOO.ml:126:2>>*/ _d_ = [0, cst_camlinternalOO_ml, 415, 13],
     /*<<camlinternalOO.ml:126:2>>*/ _c_ = [0, cst_camlinternalOO_ml, 412, 13],
     /*<<camlinternalOO.ml:126:2>>*/ _b_ = [0, cst_camlinternalOO_ml, 409, 13],
     /*<<camlinternalOO.ml:126:2>>*/ _a_ = [0, cst_camlinternalOO_ml, 281, 50];
   function copy(o){
     /*<<camlinternalOO.ml:25:19>>*/  /*<<camlinternalOO.ml:25:19>>*/ var
     o$0 =  /*<<camlinternalOO.ml:25:19>>*/ o.slice();
     /*<<camlinternalOO.ml:26:2>>*/ return  /*<<camlinternalOO.ml:26:2>>*/ caml_set_oo_id
            (o$0);
    /*<<camlinternalOO.ml:26:10>>*/ }
   var params = [0, 1, 1, 1, 3, 16], initial_object_size = 2, dummy_item = 0;
   function public_method_label(s){
     /*<<camlinternalOO.ml:71:2>>*/ var
      /*<<camlinternalOO.ml:71:2>>*/ accu = [0, 0],
      /*<<camlinternalOO.ml:71:2>>*/ _aE_ =
        /*<<camlinternalOO.ml:71:2>>*/ runtime.caml_ml_string_length(s) - 1
       | 0,
      /*<<camlinternalOO.ml:71:2>>*/ _aD_ = 0;
     /*<<camlinternalOO.ml:71:2>>*/ if(_aE_ >= 0){
     var i = _aD_;
      /*<<camlinternalOO.ml:73:4>>*/ for(;;){
       /*<<camlinternalOO.ml:73:36>>*/  /*<<camlinternalOO.ml:73:36>>*/ var
       _aF_ =  /*<<camlinternalOO.ml:73:36>>*/ runtime.caml_string_get(s, i);
       /*<<camlinternalOO.ml:73:36>>*/ accu[1] =
       (223 * accu[1] | 0) + _aF_ | 0;
       /*<<camlinternalOO.ml:73:36>>*/  /*<<camlinternalOO.ml:73:36>>*/ var
       _aG_ = i + 1 | 0;
       /*<<camlinternalOO.ml:73:36>>*/ if(_aE_ !== i){var i = _aG_; continue;}
      break;
     }
    }
     /*<<camlinternalOO.ml:76:2>>*/ accu[1] = accu[1] & 2147483647;
     /*<<camlinternalOO.ml:76:2>>*/  /*<<camlinternalOO.ml:76:2>>*/ var
     tag = 1073741823 < accu[1] ? accu[1] + 2147483648 | 0 : accu[1];
     /*<<camlinternalOO.ml:80:2>>*/ return tag;
    /*<<camlinternalOO.ml:80:11>>*/ }
   function compare(x, y){
     /*<<camlinternalOO.ml:85:56>>*/ return  /*<<camlinternalOO.ml:85:56>>*/ caml_string_compare
            (x, y);
    /*<<camlinternalOO.ml:85:67>>*/ }
   var Vars = caml_call1(Stdlib_Map[1], [0, compare]);
   function compare$0(x, y){
     /*<<camlinternalOO.ml:89:56>>*/ return  /*<<camlinternalOO.ml:89:56>>*/ caml_string_compare
            (x, y);
    /*<<camlinternalOO.ml:89:67>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ var
    Meths = caml_call1(Stdlib_Map[1], [0, compare$0]),
    compare$1 = runtime.caml_int_compare,
    Labs = caml_call1(Stdlib_Map[1], [0, compare$1]),
    dummy_table = [0, 0, [0, dummy_item], Meths[1], Labs[1], 0, 0, Vars[1], 0],
    table_count = [0, 0],
     /*<<camlinternalOO.ml:121:27>>*/ dummy_met =
       /*<<camlinternalOO.ml:121:27>>*/ caml_obj_block(0, 0);
    /*<<camlinternalOO.ml:121:27>>*/ function fit_size(n){
     /*<<camlinternalOO.ml:126:2>>*/ return 2 < n
            ? fit_size((n + 1 | 0) / 2 | 0) * 2 | 0
            : n;
    /*<<camlinternalOO.ml:127:24>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function new_table(pub_labels){
     /*<<camlinternalOO.ml:130:2>>*/ table_count[1]++;
     /*<<camlinternalOO.ml:130:2>>*/ var
      /*<<camlinternalOO.ml:130:2>>*/ len = pub_labels.length - 1,
      /*<<camlinternalOO.ml:132:16>>*/ methods =
        /*<<camlinternalOO.ml:132:16>>*/ caml_make_vect
        ((len * 2 | 0) + 2 | 0, dummy_met);
     /*<<camlinternalOO.ml:133:2>>*/  /*<<camlinternalOO.ml:133:2>>*/ caml_check_bound
      (methods, 0)
     [1]
    = len;
     /*<<camlinternalOO.ml:133:2>>*/ var
      /*<<camlinternalOO.ml:133:2>>*/ _aw_ = Stdlib_Sys[9],
      /*<<camlinternalOO.ml:134:24>>*/ _ax_ =
       ( /*<<camlinternalOO.ml:134:24>>*/ runtime.caml_mul
        (fit_size(len), _aw_)
       / 8
       | 0)
       - 1
       | 0;
     /*<<camlinternalOO.ml:134:2>>*/  /*<<camlinternalOO.ml:134:2>>*/ caml_check_bound
      (methods, 1)
     [2]
    = _ax_;
     /*<<camlinternalOO.ml:134:2>>*/ var
      /*<<camlinternalOO.ml:134:2>>*/ _az_ = len - 1 | 0,
      /*<<camlinternalOO.ml:134:2>>*/ _ay_ = 0;
     /*<<camlinternalOO.ml:134:2>>*/ if(_az_ >= 0){
     var i = _ay_;
      /*<<camlinternalOO.ml:135:26>>*/ for(;;){
       /*<<camlinternalOO.ml:135:51>>*/ var
        /*<<camlinternalOO.ml:135:51>>*/ _aB_ = (i * 2 | 0) + 3 | 0,
        /*<<camlinternalOO.ml:135:51>>*/ _aA_ =
          /*<<camlinternalOO.ml:135:51>>*/ caml_check_bound(pub_labels, i)
          [1 + i];
       /*<<camlinternalOO.ml:135:26>>*/  /*<<camlinternalOO.ml:135:26>>*/ caml_check_bound
        (methods, _aB_)
       [1 + _aB_]
      = _aA_;
       /*<<camlinternalOO.ml:135:26>>*/  /*<<camlinternalOO.ml:135:26>>*/ var
       _aC_ = i + 1 | 0;
       /*<<camlinternalOO.ml:135:26>>*/ if(_az_ !== i){
       var i = _aC_;
       continue;
      }
      break;
     }
    }
     /*<<camlinternalOO.ml:136:2>>*/ return [0,
            initial_object_size,
            methods,
            Meths[1],
            Labs[1],
            0,
            0,
            Vars[1],
            0];
    /*<<camlinternalOO.ml:143:32>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function resize(array, new_size){
     /*<<camlinternalOO.ml:146:2>>*/ var
      /*<<camlinternalOO.ml:146:2>>*/ old_size = array[2].length - 1,
      /*<<camlinternalOO.ml:146:2>>*/ _au_ = old_size < new_size ? 1 : 0;
     /*<<camlinternalOO.ml:146:2>>*/ if(_au_){
      /*<<camlinternalOO.ml:148:19>>*/  /*<<camlinternalOO.ml:148:19>>*/ var
      new_buck =
         /*<<camlinternalOO.ml:148:19>>*/ caml_make_vect(new_size, dummy_met);
      /*<<camlinternalOO.ml:149:4>>*/  /*<<camlinternalOO.ml:149:4>>*/ caml_call5
      (Stdlib_Array[8], array[2], 0, new_buck, 0, old_size);
      /*<<camlinternalOO.ml:149:4>>*/ array[2] = new_buck;
     var _av_ = 0;
    }
    else
     var _av_ = _au_;
     /*<<camlinternalOO.ml:130:2>>*/ return _av_;
    /*<<camlinternalOO.ml:151:4>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ var
     /*<<camlinternalOO.ml:121:27>>*/ method_count = [0, 0],
     /*<<camlinternalOO.ml:121:27>>*/ inst_var_count = [0, 0];
    /*<<camlinternalOO.ml:121:27>>*/ function new_method(table){
     /*<<camlinternalOO.ml:166:2>>*/  /*<<camlinternalOO.ml:166:2>>*/ var
     index = table[2].length - 1;
     /*<<camlinternalOO.ml:167:2>>*/ resize(table, index + 1 | 0);
     /*<<camlinternalOO.ml:167:2>>*/ return index;
    /*<<camlinternalOO.ml:168:7>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function get_method_label(table, name){
     /*<<?>>*/ try{
      /*<<camlinternalOO.ml:172:4>>*/  /*<<camlinternalOO.ml:172:4>>*/ var
      _as_ =
         /*<<camlinternalOO.ml:172:4>>*/ caml_call2(Meths[28], name, table[3]);
     return _as_;
    }
    catch(_at_){
     var _ar_ = caml_wrap_exception(_at_);
     if(_ar_ !== Stdlib[8])
       /*<<camlinternalOO.ml:166:2>>*/ throw  /*<<camlinternalOO.ml:166:2>>*/ caml_maybe_attach_backtrace
             (_ar_, 0);
      /*<<camlinternalOO.ml:174:16>>*/  /*<<camlinternalOO.ml:174:16>>*/ var
      label = new_method(table);
      /*<<camlinternalOO.ml:175:29>>*/ table[3] =
       /*<<camlinternalOO.ml:175:29>>*/ caml_call3
       (Meths[4], name, label, table[3]);
      /*<<camlinternalOO.ml:176:30>>*/ table[4] =
       /*<<camlinternalOO.ml:176:30>>*/ caml_call3
       (Labs[4], label, 1, table[4]);
      /*<<camlinternalOO.ml:176:30>>*/ return label;
    }
    /*<<camlinternalOO.ml:177:9>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function get_method_labels(table, names){
     /*<<camlinternalOO.ml:180:12>>*/ function _ap_(_aq_){
      /*<<?>>*/ return get_method_label(table, _aq_);
    }
     /*<<camlinternalOO.ml:180:12>>*/ return  /*<<camlinternalOO.ml:180:12>>*/ caml_call2
            (Stdlib_Array[13], _ap_, names);
    /*<<camlinternalOO.ml:180:42>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function set_method
   (table, label, element){
     /*<<camlinternalOO.ml:183:2>>*/ method_count[1]++;
     /*<<camlinternalOO.ml:184:5>>*/ return  /*<<camlinternalOO.ml:184:5>>*/ caml_call2
             (Labs[28], label, table[4])
            ? (resize
               (table, label + 1 | 0),
               /*<<camlinternalOO.ml:155:2>>*/ caml_check_bound
                (table[2], label)
               [1 + label]
              = element,
              0)
            : (table[6] = [0, [0, label, element], table[6]], 0);
    /*<<camlinternalOO.ml:187:64>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function get_method(table, label){
     /*<<?>>*/ try{
      /*<<camlinternalOO.ml:190:6>>*/  /*<<camlinternalOO.ml:190:6>>*/ var
      _an_ =
         /*<<camlinternalOO.ml:190:6>>*/ caml_call2
         (Stdlib_List[46], label, table[6]);
     return _an_;
    }
    catch(_ao_){
     var _am_ = caml_wrap_exception(_ao_);
     if(_am_ === Stdlib[8])
       /*<<camlinternalOO.ml:191:20>>*/ return  /*<<camlinternalOO.ml:191:20>>*/ caml_check_bound
               (table[2], label)
              [1 + label];
     throw caml_maybe_attach_backtrace(_am_, 0);
    }
    /*<<camlinternalOO.ml:191:41>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function to_list(arr){
     /*<<camlinternalOO.ml:194:2>>*/ return 0 === arr
            ? 0
            :  /*<<camlinternalOO.ml:194:33>>*/ caml_call1
              (Stdlib_Array[9], arr);
    /*<<camlinternalOO.ml:194:50>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function narrow
   (table, vars, virt_meths, concr_meths){
     /*<<camlinternalOO.ml:197:13>>*/ var
      /*<<camlinternalOO.ml:197:13>>*/ vars$0 = to_list(vars),
      /*<<camlinternalOO.ml:198:19>>*/ virt_meths$0 = to_list(virt_meths),
      /*<<camlinternalOO.ml:199:20>>*/ concr_meths$0 = to_list(concr_meths);
     /*<<camlinternalOO.ml:200:32>>*/ function _X_(_al_){
      /*<<?>>*/ return get_method_label(table, _al_);
    }
     /*<<camlinternalOO.ml:200:23>>*/  /*<<camlinternalOO.ml:200:23>>*/ var
     virt_meth_labs =
        /*<<camlinternalOO.ml:200:23>>*/ caml_call2
        (Stdlib_List[19], _X_, virt_meths$0);
     /*<<camlinternalOO.ml:201:33>>*/ function _Y_(_ak_){
      /*<<?>>*/ return get_method_label(table, _ak_);
    }
     /*<<camlinternalOO.ml:201:24>>*/  /*<<camlinternalOO.ml:201:24>>*/ var
     concr_meth_labs =
        /*<<camlinternalOO.ml:201:24>>*/ caml_call2
        (Stdlib_List[19], _Y_, concr_meths$0);
     /*<<camlinternalOO.ml:201:24>>*/ table[5] =
     [0,
      [0, table[3], table[4], table[6], table[7], virt_meth_labs, vars$0],
      table[5]];
     /*<<camlinternalOO.ml:201:24>>*/ var
      /*<<camlinternalOO.ml:201:24>>*/ _Z_ = Vars[1],
      /*<<camlinternalOO.ml:201:24>>*/ ___ = table[7];
     /*<<camlinternalOO.ml:201:24>>*/ function _$_(lab, info, tvars){
      /*<<camlinternalOO.ml:209:11>>*/ return  /*<<camlinternalOO.ml:209:11>>*/ caml_call2
              (Stdlib_List[36], lab, vars$0)
             ?  /*<<camlinternalOO.ml:209:34>>*/ caml_call3
               (Vars[4], lab, info, tvars)
             : tvars;
     /*<<camlinternalOO.ml:209:68>>*/ }
     /*<<camlinternalOO.ml:207:4>>*/ table[7] =
      /*<<camlinternalOO.ml:207:4>>*/ caml_call3(Vars[13], _$_, ___, _Z_);
     /*<<camlinternalOO.ml:207:4>>*/ var
      /*<<camlinternalOO.ml:207:4>>*/ by_name = [0, Meths[1]],
      /*<<camlinternalOO.ml:207:4>>*/ by_label = [0, Labs[1]];
     /*<<camlinternalOO.ml:207:4>>*/ function _aa_(met, label){
      /*<<camlinternalOO.ml:215:18>>*/ by_name[1] =
       /*<<camlinternalOO.ml:215:18>>*/ caml_call3
       (Meths[4], met, label, by_name[1]);
      /*<<camlinternalOO.ml:215:18>>*/  /*<<camlinternalOO.ml:215:18>>*/ var
      _af_ = by_label[1];
     try{
       /*<<camlinternalOO.ml:218:17>>*/ var
        /*<<camlinternalOO.ml:218:17>>*/ _ai_ =
          /*<<camlinternalOO.ml:218:17>>*/ caml_call2
          (Labs[28], label, table[4]),
       _ah_ = _ai_;
     }
     catch(_aj_){
      var _ag_ = caml_wrap_exception(_aj_);
      if(_ag_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_ag_, 0);
      var _ah_ = 1;
     }
      /*<<camlinternalOO.ml:217:10>>*/ by_label[1] =
       /*<<camlinternalOO.ml:217:10>>*/ caml_call3(Labs[4], label, _ah_, _af_);
      /*<<camlinternalOO.ml:217:10>>*/ return 0;
     /*<<camlinternalOO.ml:219:21>>*/ }
     /*<<camlinternalOO.ml:213:2>>*/  /*<<camlinternalOO.ml:213:2>>*/ caml_call3
     (Stdlib_List[27], _aa_, concr_meths$0, concr_meth_labs);
     /*<<camlinternalOO.ml:213:2>>*/ function _ab_(met, label){
      /*<<camlinternalOO.ml:223:18>>*/ by_name[1] =
       /*<<camlinternalOO.ml:223:18>>*/ caml_call3
       (Meths[4], met, label, by_name[1]);
      /*<<camlinternalOO.ml:224:19>>*/ by_label[1] =
       /*<<camlinternalOO.ml:224:19>>*/ caml_call3
       (Labs[4], label, 0, by_label[1]);
      /*<<camlinternalOO.ml:224:19>>*/ return 0;
     /*<<camlinternalOO.ml:224:49>>*/ }
     /*<<camlinternalOO.ml:221:2>>*/  /*<<camlinternalOO.ml:221:2>>*/ caml_call3
     (Stdlib_List[27], _ab_, virt_meths$0, virt_meth_labs);
     /*<<camlinternalOO.ml:221:2>>*/ table[3] = by_name[1];
     /*<<camlinternalOO.ml:221:2>>*/ table[4] = by_label[1];
     /*<<camlinternalOO.ml:221:2>>*/ var
      /*<<camlinternalOO.ml:221:2>>*/ _ac_ = 0,
      /*<<camlinternalOO.ml:221:2>>*/ _ad_ = table[6];
     /*<<camlinternalOO.ml:221:2>>*/ function _ae_(met, hm){
      /*<<camlinternalOO.ml:230:7>>*/  /*<<camlinternalOO.ml:230:7>>*/ var
      lab = met[1];
      /*<<camlinternalOO.ml:231:13>>*/ return  /*<<camlinternalOO.ml:231:13>>*/ caml_call2
              (Stdlib_List[36], lab, virt_meth_labs)
             ? hm
             : [0, met, hm];
     /*<<camlinternalOO.ml:231:62>>*/ }
     /*<<camlinternalOO.ml:229:5>>*/ table[6] =
      /*<<camlinternalOO.ml:229:5>>*/ caml_call3
      (Stdlib_List[26], _ae_, _ad_, _ac_);
     /*<<camlinternalOO.ml:229:5>>*/ return 0;
    /*<<camlinternalOO.ml:233:9>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function widen(table){
     /*<<camlinternalOO.ml:237:4>>*/ var
      /*<<camlinternalOO.ml:237:4>>*/ match =
        /*<<camlinternalOO.ml:237:4>>*/ caml_call1(Stdlib_List[5], table[5]),
      /*<<camlinternalOO.ml:237:4>>*/ vars = match[6],
      /*<<camlinternalOO.ml:237:4>>*/ virt_meths = match[5],
      /*<<camlinternalOO.ml:237:4>>*/ saved_vars = match[4],
      /*<<camlinternalOO.ml:237:4>>*/ saved_hidden_meths = match[3],
      /*<<camlinternalOO.ml:237:4>>*/ by_label = match[2],
      /*<<camlinternalOO.ml:237:4>>*/ by_name = match[1];
     /*<<camlinternalOO.ml:239:27>>*/ table[5] =
      /*<<camlinternalOO.ml:239:27>>*/ caml_call1(Stdlib_List[6], table[5]);
     /*<<camlinternalOO.ml:239:27>>*/ function _T_(s, v){
      /*<<camlinternalOO.ml:242:30>>*/  /*<<camlinternalOO.ml:242:30>>*/ var
      _W_ =
         /*<<camlinternalOO.ml:242:30>>*/ caml_call2(Vars[28], v, table[7]);
      /*<<camlinternalOO.ml:242:30>>*/ return  /*<<camlinternalOO.ml:242:30>>*/ caml_call3
             (Vars[4], v, _W_, s);
     /*<<camlinternalOO.ml:242:56>>*/ }
     /*<<camlinternalOO.ml:241:5>>*/ table[7] =
      /*<<camlinternalOO.ml:241:5>>*/ caml_call3
      (Stdlib_List[25], _T_, saved_vars, vars);
     /*<<camlinternalOO.ml:241:5>>*/ table[3] = by_name;
     /*<<camlinternalOO.ml:241:5>>*/ table[4] = by_label;
     /*<<camlinternalOO.ml:241:5>>*/  /*<<camlinternalOO.ml:241:5>>*/ var
     _U_ = table[6];
     /*<<camlinternalOO.ml:241:5>>*/ function _V_(met, hm){
      /*<<camlinternalOO.ml:248:7>>*/  /*<<camlinternalOO.ml:248:7>>*/ var
      lab = met[1];
      /*<<camlinternalOO.ml:249:13>>*/ return  /*<<camlinternalOO.ml:249:13>>*/ caml_call2
              (Stdlib_List[36], lab, virt_meths)
             ? hm
             : [0, met, hm];
     /*<<camlinternalOO.ml:249:58>>*/ }
     /*<<camlinternalOO.ml:247:5>>*/ table[6] =
      /*<<camlinternalOO.ml:247:5>>*/ caml_call3
      (Stdlib_List[26], _V_, _U_, saved_hidden_meths);
     /*<<camlinternalOO.ml:247:5>>*/ return 0;
    /*<<camlinternalOO.ml:251:25>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function new_variable(table, name){
     /*<<?>>*/ try{
      /*<<camlinternalOO.ml:259:6>>*/  /*<<camlinternalOO.ml:259:6>>*/ var
      _R_ =
         /*<<camlinternalOO.ml:259:6>>*/ caml_call2(Vars[28], name, table[7]);
     return _R_;
    }
    catch(_S_){
     var _Q_ = caml_wrap_exception(_S_);
     if(_Q_ !== Stdlib[8])
       /*<<camlinternalOO.ml:254:2>>*/ throw  /*<<camlinternalOO.ml:254:2>>*/ caml_maybe_attach_backtrace
             (_Q_, 0);
      /*<<camlinternalOO.ml:254:2>>*/  /*<<camlinternalOO.ml:254:2>>*/ var
      index = table[1];
      /*<<camlinternalOO.ml:254:2>>*/ table[1] = index + 1 | 0;
      /*<<camlinternalOO.ml:262:7>>*/ if
      ( /*<<camlinternalOO.ml:262:7>>*/ runtime.caml_string_notequal(name, ""))
       /*<<camlinternalOO.ml:262:37>>*/ table[7] =
        /*<<camlinternalOO.ml:262:37>>*/ caml_call3
        (Vars[4], name, index, table[7]);
      /*<<camlinternalOO.ml:263:4>>*/ return index;
    }
    /*<<camlinternalOO.ml:263:9>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function to_array(arr){
     /*<<camlinternalOO.ml:266:5>>*/ return  /*<<camlinternalOO.ml:266:5>>*/ runtime.caml_equal
             (arr, 0)
            ? [0]
            : arr;
    /*<<camlinternalOO.ml:266:41>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function new_methods_variables
   (table, meths, vals){
     /*<<camlinternalOO.ml:269:14>>*/ var
      /*<<camlinternalOO.ml:269:14>>*/ meths$0 = to_array(meths),
      /*<<camlinternalOO.ml:269:14>>*/ nmeths = meths$0.length - 1,
      /*<<camlinternalOO.ml:269:14>>*/ nvals = vals.length - 1,
      /*<<camlinternalOO.ml:271:12>>*/ res =
        /*<<camlinternalOO.ml:271:12>>*/ caml_make_vect(nmeths + nvals | 0, 0),
      /*<<camlinternalOO.ml:271:12>>*/ _I_ = nmeths - 1 | 0,
      /*<<camlinternalOO.ml:271:12>>*/ _H_ = 0;
     /*<<camlinternalOO.ml:271:12>>*/ if(_I_ >= 0){
     var i$0 = _H_;
      /*<<camlinternalOO.ml:273:4>>*/ for(;;){
       /*<<camlinternalOO.ml:273:15>>*/  /*<<camlinternalOO.ml:273:15>>*/ var
       _O_ =
         get_method_label
          (table,
            /*<<camlinternalOO.ml:273:38>>*/ caml_check_bound(meths$0, i$0)
            [1 + i$0]);
       /*<<camlinternalOO.ml:273:4>>*/  /*<<camlinternalOO.ml:273:4>>*/ caml_check_bound
        (res, i$0)
       [1 + i$0]
      = _O_;
       /*<<camlinternalOO.ml:273:4>>*/  /*<<camlinternalOO.ml:273:4>>*/ var
       _P_ = i$0 + 1 | 0;
       /*<<camlinternalOO.ml:273:4>>*/ if(_I_ !== i$0){
       var i$0 = _P_;
       continue;
      }
      break;
     }
    }
     /*<<camlinternalOO.ml:275:2>>*/ var
      /*<<camlinternalOO.ml:275:2>>*/ _K_ = nvals - 1 | 0,
      /*<<camlinternalOO.ml:275:2>>*/ _J_ = 0;
     /*<<camlinternalOO.ml:275:2>>*/ if(_K_ >= 0){
     var i = _J_;
      /*<<camlinternalOO.ml:276:4>>*/ for(;;){
       /*<<camlinternalOO.ml:276:22>>*/ var
        /*<<camlinternalOO.ml:276:22>>*/ _M_ = i + nmeths | 0,
        /*<<camlinternalOO.ml:276:22>>*/ _L_ =
         new_variable
          (table,
            /*<<camlinternalOO.ml:276:41>>*/ caml_check_bound(vals, i)[1 + i]);
       /*<<camlinternalOO.ml:276:4>>*/  /*<<camlinternalOO.ml:276:4>>*/ caml_check_bound
        (res, _M_)
       [1 + _M_]
      = _L_;
       /*<<camlinternalOO.ml:276:4>>*/  /*<<camlinternalOO.ml:276:4>>*/ var
       _N_ = i + 1 | 0;
       /*<<camlinternalOO.ml:276:4>>*/ if(_K_ !== i){var i = _N_; continue;}
      break;
     }
    }
     /*<<camlinternalOO.ml:278:2>>*/ return res;
    /*<<camlinternalOO.ml:278:5>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function get_variable(table, name){
     /*<<?>>*/ try{
      /*<<camlinternalOO.ml:281:6>>*/  /*<<camlinternalOO.ml:281:6>>*/ var
      _F_ =
         /*<<camlinternalOO.ml:281:6>>*/ caml_call2(Vars[28], name, table[7]);
     return _F_;
    }
    catch(_G_){
     var _E_ = caml_wrap_exception(_G_);
     if(_E_ === Stdlib[8])
       /*<<camlinternalOO.ml:281:50>>*/ throw  /*<<camlinternalOO.ml:281:50>>*/ caml_maybe_attach_backtrace
             ([0, Assert_failure, _a_], 1);
     throw caml_maybe_attach_backtrace(_E_, 0);
    }
    /*<<camlinternalOO.ml:281:62>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function get_variables(table, names){
     /*<<camlinternalOO.ml:284:12>>*/ function _C_(_D_){
      /*<<?>>*/ return get_variable(table, _D_);
    }
     /*<<camlinternalOO.ml:284:12>>*/ return  /*<<camlinternalOO.ml:284:12>>*/ caml_call2
            (Stdlib_Array[13], _C_, names);
    /*<<camlinternalOO.ml:284:38>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function add_initializer(table, f){
     /*<<camlinternalOO.ml:287:2>>*/ table[8] = [0, f, table[8]];
     /*<<camlinternalOO.ml:287:2>>*/ return 0;
    /*<<camlinternalOO.ml:287:45>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function create_table(public_methods){
     /*<<camlinternalOO.ml:301:2>>*/ if(0 === public_methods)
      /*<<camlinternalOO.ml:301:36>>*/ return new_table([0]);
     /*<<camlinternalOO.ml:303:13>>*/ var
      /*<<camlinternalOO.ml:303:13>>*/ tags =
        /*<<camlinternalOO.ml:303:13>>*/ caml_call2
        (Stdlib_Array[13], public_method_label, public_methods),
      /*<<camlinternalOO.ml:304:14>>*/ table = new_table(tags);
     /*<<camlinternalOO.ml:304:14>>*/ function _B_(i, met){
      /*<<camlinternalOO.ml:307:6>>*/  /*<<camlinternalOO.ml:307:6>>*/ var
      lab = (i * 2 | 0) + 2 | 0;
      /*<<camlinternalOO.ml:308:32>>*/ table[3] =
       /*<<camlinternalOO.ml:308:32>>*/ caml_call3
       (Meths[4], met, lab, table[3]);
      /*<<camlinternalOO.ml:309:32>>*/ table[4] =
       /*<<camlinternalOO.ml:309:32>>*/ caml_call3(Labs[4], lab, 1, table[4]);
      /*<<camlinternalOO.ml:309:32>>*/ return 0;
     /*<<camlinternalOO.ml:309:72>>*/ }
     /*<<camlinternalOO.ml:305:2>>*/  /*<<camlinternalOO.ml:305:2>>*/ caml_call2
     (Stdlib_Array[12], _B_, public_methods);
     /*<<camlinternalOO.ml:305:2>>*/ return table;
    /*<<camlinternalOO.ml:311:7>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function init_class(table){
     /*<<camlinternalOO.ml:314:2>>*/ inst_var_count[1] =
     (inst_var_count[1] + table[1] | 0) - 1 | 0;
     /*<<camlinternalOO.ml:315:24>>*/ table[8] =
      /*<<camlinternalOO.ml:315:24>>*/ caml_call1(Stdlib_List[9], table[8]);
     /*<<camlinternalOO.ml:315:24>>*/  /*<<camlinternalOO.ml:315:24>>*/ var
     _A_ = Stdlib_Sys[9];
     /*<<camlinternalOO.ml:316:26>>*/ return resize
            (table,
             3
             +
               /*<<camlinternalOO.ml:316:26>>*/ caml_div
               ( /*<<camlinternalOO.ml:316:26>>*/ caml_check_bound
                  (table[2], 1)
                 [2]
                * 16
                | 0,
                _A_)
             | 0);
    /*<<camlinternalOO.ml:316:65>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function inherits
   (cla, vals, virt_meths, concr_meths, param, top){
    var env = param[4], super$0 = param[2];
     /*<<camlinternalOO.ml:319:2>>*/ narrow
     (cla, vals, virt_meths, concr_meths);
     /*<<camlinternalOO.ml:319:2>>*/  /*<<camlinternalOO.ml:319:2>>*/ var
     init =
       top
        ?  /*<<camlinternalOO.ml:321:16>>*/ caml_call2(super$0, cla, env)
        :  /*<<camlinternalOO.ml:321:44>>*/ caml_call1(super$0, cla);
     /*<<camlinternalOO.ml:322:2>>*/ widen(cla);
     /*<<camlinternalOO.ml:322:2>>*/ var
      /*<<camlinternalOO.ml:322:2>>*/ _s_ = 0,
      /*<<camlinternalOO.ml:328:7>>*/ _t_ = to_array(concr_meths);
     /*<<camlinternalOO.ml:328:7>>*/ function _u_(nm){
      /*<<camlinternalOO.ml:327:39>>*/ return get_method
             (cla, get_method_label(cla, nm));
     /*<<camlinternalOO.ml:327:75>>*/ }
     /*<<camlinternalOO.ml:326:5>>*/ var
      /*<<camlinternalOO.ml:326:5>>*/ _v_ =
       [0,
         /*<<camlinternalOO.ml:326:5>>*/ caml_call2
         (Stdlib_Array[13], _u_, _t_),
        _s_],
      /*<<camlinternalOO.ml:325:41>>*/ _w_ = to_array(vals);
     /*<<camlinternalOO.ml:325:22>>*/ function _x_(_z_){
      /*<<?>>*/ return get_variable(cla, _z_);
    }
     /*<<camlinternalOO.ml:324:5>>*/  /*<<camlinternalOO.ml:324:5>>*/ var
     _y_ =
       [0,
        [0, init],
        [0,
          /*<<camlinternalOO.ml:325:12>>*/ caml_call2
          (Stdlib_Array[13], _x_, _w_),
         _v_]];
     /*<<camlinternalOO.ml:324:5>>*/ return  /*<<camlinternalOO.ml:324:5>>*/ caml_call1
            (Stdlib_Array[4], _y_);
   }
    /*<<camlinternalOO.ml:121:27>>*/ function make_class
   (pub_meths, class_init){
     /*<<camlinternalOO.ml:331:14>>*/ var
      /*<<camlinternalOO.ml:331:14>>*/ table = create_table(pub_meths),
      /*<<camlinternalOO.ml:332:17>>*/ env_init =
        /*<<camlinternalOO.ml:332:17>>*/ caml_call1(class_init, table);
     /*<<camlinternalOO.ml:333:2>>*/ init_class(table);
     /*<<camlinternalOO.ml:334:3>>*/ return [0,
             /*<<camlinternalOO.ml:334:3>>*/ caml_call1(env_init, 0),
            class_init,
            env_init,
            0];
    /*<<camlinternalOO.ml:334:59>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function make_class_store
   (pub_meths, class_init, init_table){
     /*<<camlinternalOO.ml:340:14>>*/ var
      /*<<camlinternalOO.ml:340:14>>*/ table = create_table(pub_meths),
      /*<<camlinternalOO.ml:341:17>>*/ env_init =
        /*<<camlinternalOO.ml:341:17>>*/ caml_call1(class_init, table);
     /*<<camlinternalOO.ml:342:2>>*/ init_class(table);
     /*<<camlinternalOO.ml:342:2>>*/ init_table[2] = class_init;
     /*<<camlinternalOO.ml:342:2>>*/ init_table[1] = env_init;
     /*<<camlinternalOO.ml:342:2>>*/ return 0;
    /*<<camlinternalOO.ml:344:33>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function dummy_class(loc){
     /*<<camlinternalOO.ml:347:2>>*/ function undef(param){
      /*<<camlinternalOO.ml:347:23>>*/ throw  /*<<camlinternalOO.ml:347:23>>*/ caml_maybe_attach_backtrace
            ([0, Stdlib[15], loc], 1);
     /*<<camlinternalOO.ml:347:61>>*/ }
     /*<<camlinternalOO.ml:347:2>>*/ return [0, undef, undef, undef, 0];
    /*<<camlinternalOO.ml:348:45>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function create_object(table){
     /*<<camlinternalOO.ml:354:12>>*/  /*<<camlinternalOO.ml:354:12>>*/ var
     obj =
        /*<<camlinternalOO.ml:354:12>>*/ caml_obj_block
        (Stdlib_Obj[10], table[1]);
     /*<<camlinternalOO.ml:356:2>>*/ obj[1] = table[2];
     /*<<camlinternalOO.ml:357:10>>*/ return  /*<<camlinternalOO.ml:357:10>>*/ caml_set_oo_id
            (obj);
    /*<<camlinternalOO.ml:357:22>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function create_object_opt(obj_0, table){
     /*<<camlinternalOO.ml:360:2>>*/ if(obj_0)
      /*<<camlinternalOO.ml:360:35>>*/ return obj_0;
     /*<<camlinternalOO.ml:362:14>>*/  /*<<camlinternalOO.ml:362:14>>*/ var
     obj =
        /*<<camlinternalOO.ml:362:14>>*/ caml_obj_block
        (Stdlib_Obj[10], table[1]);
     /*<<camlinternalOO.ml:364:4>>*/ obj[1] = table[2];
     /*<<camlinternalOO.ml:365:12>>*/ return  /*<<camlinternalOO.ml:365:12>>*/ caml_set_oo_id
            (obj);
    /*<<camlinternalOO.ml:366:5>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function iter_f(obj, param){
    var param$0 = param;
    for(;;){
     if(! param$0)  /*<<camlinternalOO.ml:370:12>>*/ return 0;
     var l = param$0[2], f = param$0[1];
      /*<<camlinternalOO.ml:371:12>>*/  /*<<camlinternalOO.ml:371:12>>*/ caml_call1
      (f, obj);
     var param$0 = l;
    }
   }
    /*<<camlinternalOO.ml:121:27>>*/ function run_initializers(obj, table){
     /*<<camlinternalOO.ml:374:2>>*/ var
      /*<<camlinternalOO.ml:374:2>>*/ inits = table[8],
      /*<<camlinternalOO.ml:374:2>>*/ _r_ = 0 !== inits ? 1 : 0;
     /*<<camlinternalOO.ml:374:2>>*/ return _r_ ? iter_f(obj, inits) : _r_;
    /*<<camlinternalOO.ml:376:20>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function run_initializers_opt
   (obj_0, obj, table){
     /*<<camlinternalOO.ml:379:2>>*/ if(obj_0)
      /*<<camlinternalOO.ml:379:35>>*/ return obj;
     /*<<camlinternalOO.ml:379:44>>*/  /*<<camlinternalOO.ml:379:44>>*/ var
     inits = table[8];
     /*<<camlinternalOO.ml:379:44>>*/ if(0 !== inits)
      /*<<camlinternalOO.ml:381:24>>*/ iter_f(obj, inits);
     /*<<camlinternalOO.ml:381:40>>*/ return obj;
    /*<<camlinternalOO.ml:383:5>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function create_object_and_run_initiali
   (obj_0, table){
     /*<<camlinternalOO.ml:386:2>>*/ if(obj_0)
      /*<<camlinternalOO.ml:386:35>>*/ return obj_0;
     /*<<camlinternalOO.ml:387:14>>*/  /*<<camlinternalOO.ml:387:14>>*/ var
     obj = create_object(table);
     /*<<camlinternalOO.ml:388:4>>*/ run_initializers(obj, table);
     /*<<camlinternalOO.ml:388:4>>*/ return obj;
    /*<<camlinternalOO.ml:390:5>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function get_data(param){
     /*<<camlinternalOO.ml:417:15>>*/ if(param)
      /*<<camlinternalOO.ml:419:19>>*/ return param[2];
     /*<<camlinternalOO.ml:418:13>>*/ throw  /*<<camlinternalOO.ml:418:13>>*/ caml_maybe_attach_backtrace
           ([0, Assert_failure, _e_], 1);
    /*<<camlinternalOO.ml:419:30>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function build_path(n, keys, tables){
     /*<<camlinternalOO.ml:425:2>>*/ var
      /*<<camlinternalOO.ml:425:2>>*/ res = [0, 0, 0, 0],
      /*<<camlinternalOO.ml:425:2>>*/ r = [0, res],
      /*<<camlinternalOO.ml:425:2>>*/ _o_ = 0;
     /*<<camlinternalOO.ml:425:2>>*/ if(n >= 0){
     var i = _o_;
      /*<<camlinternalOO.ml:428:4>>*/ for(;;){
       /*<<camlinternalOO.ml:428:4>>*/  /*<<camlinternalOO.ml:428:4>>*/ var
       _p_ = r[1];
       /*<<camlinternalOO.ml:428:21>>*/ r[1] =
       [0,
         /*<<camlinternalOO.ml:428:21>>*/ caml_check_bound(keys, i)[1 + i],
        _p_,
        0];
       /*<<camlinternalOO.ml:428:21>>*/  /*<<camlinternalOO.ml:428:21>>*/ var
       _q_ = i + 1 | 0;
       /*<<camlinternalOO.ml:428:21>>*/ if(n !== i){var i = _q_; continue;}
      break;
     }
    }
     /*<<camlinternalOO.ml:430:2>>*/  /*<<camlinternalOO.ml:430:2>>*/ var
     v = r[1];
     /*<<camlinternalOO.ml:408:24>>*/ if(! tables)
      /*<<camlinternalOO.ml:409:13>>*/ throw  /*<<camlinternalOO.ml:409:13>>*/ caml_maybe_attach_backtrace
            ([0, Assert_failure, _b_], 1);
     /*<<camlinternalOO.ml:410:19>>*/ tables[2] = v;
    return res;
    /*<<camlinternalOO.ml:431:5>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function lookup_tables(root, keys){
     /*<<camlinternalOO.ml:453:8>>*/  /*<<camlinternalOO.ml:453:8>>*/ var
     root_data = get_data(root);
     /*<<camlinternalOO.ml:453:8>>*/ if(! root_data)
      /*<<camlinternalOO.ml:457:4>>*/ return build_path
             (keys.length - 1 - 1 | 0, keys, root);
     /*<<camlinternalOO.ml:455:4>>*/ var
      /*<<camlinternalOO.ml:455:4>>*/ i$1 = keys.length - 1 - 1 | 0,
     i = i$1,
     tables$0 = root_data;
    a:
     /*<<camlinternalOO.ml:434:2>>*/ for(;;){
      /*<<camlinternalOO.ml:434:2>>*/ if(0 > i)
       /*<<camlinternalOO.ml:434:16>>*/ return tables$0;
      /*<<camlinternalOO.ml:435:12>>*/ var
       /*<<camlinternalOO.ml:435:12>>*/ key =
         /*<<camlinternalOO.ml:435:12>>*/ caml_check_bound(keys, i)[1 + i],
      tables$1 = tables$0;
      /*<<camlinternalOO.ml:437:4>>*/ for(;;){
       /*<<camlinternalOO.ml:414:14>>*/ if(! tables$1)
        /*<<camlinternalOO.ml:415:13>>*/ throw  /*<<camlinternalOO.ml:415:13>>*/ caml_maybe_attach_backtrace
              ([0, Assert_failure, _d_], 1);
      if(tables$1[1] === key){
        /*<<camlinternalOO.ml:438:12>>*/  /*<<camlinternalOO.ml:438:12>>*/ var
        tables_data = get_data(tables$1);
        /*<<camlinternalOO.ml:438:12>>*/ if(! tables_data)
         /*<<camlinternalOO.ml:439:17>>*/ throw  /*<<camlinternalOO.ml:439:17>>*/ caml_maybe_attach_backtrace
               ([0, Assert_failure, _g_], 1);
        /*<<camlinternalOO.ml:441:10>>*/ var
         /*<<camlinternalOO.ml:441:10>>*/ i$0 = i - 1 | 0,
        i = i$0,
        tables$0 = tables_data;
       continue a;
      }
       /*<<camlinternalOO.ml:420:15>>*/ if(! tables$1)
        /*<<camlinternalOO.ml:421:13>>*/ throw  /*<<camlinternalOO.ml:421:13>>*/ caml_maybe_attach_backtrace
              ([0, Assert_failure, _f_], 1);
       /*<<camlinternalOO.ml:422:19>>*/  /*<<camlinternalOO.ml:422:19>>*/ var
       tables = tables$1[3];
      if(tables){var tables$1 = tables; continue;}
       /*<<camlinternalOO.ml:446:10>>*/  /*<<camlinternalOO.ml:446:10>>*/ var
       next = [0, key, 0, 0];
       /*<<camlinternalOO.ml:411:24>>*/ if(! tables$1)
        /*<<camlinternalOO.ml:412:13>>*/ throw  /*<<camlinternalOO.ml:412:13>>*/ caml_maybe_attach_backtrace
              ([0, Assert_failure, _c_], 1);
       /*<<camlinternalOO.ml:413:19>>*/ tables$1[3] = next;
      return build_path(i - 1 | 0, keys, next);
     }
    }
    /*<<camlinternalOO.ml:457:48>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function new_cache(table){
     /*<<camlinternalOO.ml:509:10>>*/ var
      /*<<camlinternalOO.ml:509:10>>*/ n = new_method(table),
     switch$0 = 0;
     /*<<camlinternalOO.ml:509:10>>*/ if(0 !== (n % 2 | 0)){
     var _n_ = Stdlib_Sys[9];
      /*<<camlinternalOO.ml:511:36>>*/ if
      ((2
       +
         /*<<camlinternalOO.ml:511:36>>*/ caml_div
         ( /*<<camlinternalOO.ml:511:36>>*/ caml_check_bound(table[2], 1)[2]
          * 16
          | 0,
          _n_)
       | 0)
       >= n){
      var n$0 = new_method(table);
      switch$0 = 1;
     }
    }
    if(! switch$0) var n$0 = n;
     /*<<camlinternalOO.ml:514:2>>*/  /*<<camlinternalOO.ml:514:2>>*/ caml_check_bound
      (table[2], n$0)
     [1 + n$0]
    = 0;
     /*<<camlinternalOO.ml:514:2>>*/ return n$0;
    /*<<camlinternalOO.ml:515:3>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function set_methods(table, methods){
     /*<<camlinternalOO.ml:600:2>>*/ var
      /*<<camlinternalOO.ml:600:2>>*/ len = methods.length - 1,
      /*<<camlinternalOO.ml:600:2>>*/ i = [0, 0];
    for(;;){
     if(i[1] >= len)  /*<<camlinternalOO.ml:545:16>>*/ return 0;
      /*<<camlinternalOO.ml:602:4>>*/ var
       /*<<camlinternalOO.ml:602:4>>*/ _h_ = i[1],
       /*<<camlinternalOO.ml:602:16>>*/ label =
         /*<<camlinternalOO.ml:602:16>>*/ caml_check_bound(methods, _h_)
         [1 + _h_],
       /*<<camlinternalOO.ml:545:2>>*/ next =
        function(param){
          /*<<camlinternalOO.ml:545:16>>*/ i[1]++;
          /*<<camlinternalOO.ml:545:16>>*/  /*<<camlinternalOO.ml:545:16>>*/ var
          _m_ = i[1];
          /*<<camlinternalOO.ml:545:30>>*/ return  /*<<camlinternalOO.ml:545:30>>*/ caml_check_bound
                  (methods, _m_)
                 [1 + _m_];
         /*<<camlinternalOO.ml:545:38>>*/ },
       /*<<camlinternalOO.ml:546:8>>*/ clo = next(0);
      /*<<camlinternalOO.ml:546:8>>*/ if(typeof clo === "number")
      switch(clo){
        case 0:
          /*<<camlinternalOO.ml:547:28>>*/ var
           /*<<camlinternalOO.ml:547:28>>*/ x = next(0),
          clo$0 =
            function(x){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:461:35>>*/ return x; /*<<camlinternalOO.ml:461:36>>*/ };
             }
             (x);
         break;
        case 1:
          /*<<camlinternalOO.ml:548:24>>*/ var
           /*<<camlinternalOO.ml:548:24>>*/ n = next(0),
          clo$0 =
            function(n){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:462:34>>*/ return obj[1 + n]; /*<<camlinternalOO.ml:462:56>>*/ };
             }
             (n);
         break;
        case 2:
          /*<<camlinternalOO.ml:549:24>>*/ var
           /*<<camlinternalOO.ml:549:24>>*/ e = next(0),
           /*<<camlinternalOO.ml:549:42>>*/ n$0 = next(0),
          clo$0 =
            function(e, n){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:465:4>>*/ return obj[1 + e][1 + n]; /*<<camlinternalOO.ml:465:65>>*/ };
             }
             (e, n$0);
         break;
        case 3:
          /*<<camlinternalOO.ml:550:24>>*/ var
           /*<<camlinternalOO.ml:550:24>>*/ n$1 = next(0),
          clo$0 =
            function(n){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:466:34>>*/ return  /*<<camlinternalOO.ml:466:34>>*/ caml_call1
                       (obj[1][1 + n], obj); /*<<camlinternalOO.ml:466:48>>*/ };
             }
             (n$1);
         break;
        case 4:
          /*<<camlinternalOO.ml:551:24>>*/ var
           /*<<camlinternalOO.ml:551:24>>*/ n$2 = next(0),
          clo$0 =
            function(n){
               /*<<?>>*/ return function(obj, x){
                /*<<camlinternalOO.ml:467:36>>*/ obj[1 + n] = x;
                /*<<camlinternalOO.ml:467:36>>*/ return 0; /*<<camlinternalOO.ml:467:60>>*/ };
             }
             (n$2);
         break;
        case 5:
          /*<<camlinternalOO.ml:552:24>>*/ var
           /*<<camlinternalOO.ml:552:24>>*/ f = next(0),
           /*<<camlinternalOO.ml:552:42>>*/ x$0 = next(0),
          clo$0 =
            function(f, x){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:468:37>>*/ return  /*<<camlinternalOO.ml:468:37>>*/ caml_call1
                       (f, x); /*<<camlinternalOO.ml:468:40>>*/ };
             }
             (f, x$0);
         break;
        case 6:
          /*<<camlinternalOO.ml:553:24>>*/ var
           /*<<camlinternalOO.ml:553:24>>*/ f$0 = next(0),
           /*<<camlinternalOO.ml:553:42>>*/ n$3 = next(0),
          clo$0 =
            function(f, n){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:469:36>>*/ return  /*<<camlinternalOO.ml:469:36>>*/ caml_call1
                       (f, obj[1 + n]); /*<<camlinternalOO.ml:469:62>>*/ };
             }
             (f$0, n$3);
         break;
        case 7:
          /*<<camlinternalOO.ml:555:14>>*/ var
           /*<<camlinternalOO.ml:555:14>>*/ f$1 = next(0),
           /*<<camlinternalOO.ml:555:33>>*/ e$0 = next(0),
           /*<<camlinternalOO.ml:555:51>>*/ n$4 = next(0),
          clo$0 =
            function(f, e, n){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:472:4>>*/ return  /*<<camlinternalOO.ml:472:4>>*/ caml_call1
                       (f, obj[1 + e][1 + n]); /*<<camlinternalOO.ml:472:69>>*/ };
             }
             (f$1, e$0, n$4);
         break;
        case 8:
          /*<<camlinternalOO.ml:557:24>>*/ var
           /*<<camlinternalOO.ml:557:24>>*/ f$2 = next(0),
           /*<<camlinternalOO.ml:557:42>>*/ n$5 = next(0),
          clo$0 =
            function(f, n){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:473:38>>*/ return  /*<<camlinternalOO.ml:473:38>>*/ caml_call1
                       (f,
                         /*<<camlinternalOO.ml:473:38>>*/ caml_call1
                         (obj[1][1 + n], obj)); /*<<camlinternalOO.ml:473:54>>*/ };
             }
             (f$2, n$5);
         break;
        case 9:
          /*<<camlinternalOO.ml:559:14>>*/ var
           /*<<camlinternalOO.ml:559:14>>*/ f$3 = next(0),
           /*<<camlinternalOO.ml:559:32>>*/ x$1 = next(0),
           /*<<camlinternalOO.ml:559:50>>*/ y = next(0),
          clo$0 =
            function(f, x, y){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:474:45>>*/ return  /*<<camlinternalOO.ml:474:45>>*/ caml_call2
                       (f, x, y); /*<<camlinternalOO.ml:474:50>>*/ };
             }
             (f$3, x$1, y);
         break;
        case 10:
          /*<<camlinternalOO.ml:562:14>>*/ var
           /*<<camlinternalOO.ml:562:14>>*/ f$4 = next(0),
           /*<<camlinternalOO.ml:562:32>>*/ x$2 = next(0),
           /*<<camlinternalOO.ml:562:50>>*/ n$6 = next(0),
          clo$0 =
            function(f, x, n){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:475:44>>*/ return  /*<<camlinternalOO.ml:475:44>>*/ caml_call2
                       (f, x, obj[1 + n]); /*<<camlinternalOO.ml:475:72>>*/ };
             }
             (f$4, x$2, n$6);
         break;
        case 11:
          /*<<camlinternalOO.ml:565:14>>*/ var
           /*<<camlinternalOO.ml:565:14>>*/ f$5 = next(0),
           /*<<camlinternalOO.ml:565:32>>*/ x$3 = next(0),
           /*<<camlinternalOO.ml:565:50>>*/ e$1 = next(0),
           /*<<camlinternalOO.ml:565:69>>*/ n$7 = next(0),
          clo$0 =
            function(f, x, e, n){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:481:4>>*/ return  /*<<camlinternalOO.ml:481:4>>*/ caml_call2
                       (f, x, obj[1 + e][1 + n]); /*<<camlinternalOO.ml:481:71>>*/ };
             }
             (f$5, x$3, e$1, n$7);
         break;
        case 12:
          /*<<camlinternalOO.ml:568:14>>*/ var
           /*<<camlinternalOO.ml:568:14>>*/ f$6 = next(0),
           /*<<camlinternalOO.ml:568:32>>*/ x$4 = next(0),
           /*<<camlinternalOO.ml:568:50>>*/ n$8 = next(0),
          clo$0 =
            function(f, x, n){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:476:47>>*/ return  /*<<camlinternalOO.ml:476:47>>*/ caml_call2
                       (f,
                        x,
                         /*<<camlinternalOO.ml:476:47>>*/ caml_call1
                         (obj[1][1 + n], obj)); /*<<camlinternalOO.ml:476:63>>*/ };
             }
             (f$6, x$4, n$8);
         break;
        case 13:
          /*<<camlinternalOO.ml:571:14>>*/ var
           /*<<camlinternalOO.ml:571:14>>*/ f$7 = next(0),
           /*<<camlinternalOO.ml:571:32>>*/ n$9 = next(0),
           /*<<camlinternalOO.ml:571:50>>*/ x$5 = next(0),
          clo$0 =
            function(f, n, x){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:477:42>>*/ return  /*<<camlinternalOO.ml:477:42>>*/ caml_call2
                       (f, obj[1 + n], x); /*<<camlinternalOO.ml:477:70>>*/ };
             }
             (f$7, n$9, x$5);
         break;
        case 14:
          /*<<camlinternalOO.ml:574:14>>*/ var
           /*<<camlinternalOO.ml:574:14>>*/ f$8 = next(0),
           /*<<camlinternalOO.ml:574:32>>*/ e$2 = next(0),
           /*<<camlinternalOO.ml:574:51>>*/ n$10 = next(0),
           /*<<camlinternalOO.ml:574:69>>*/ x$6 = next(0),
          clo$0 =
            function(f, e, n, x){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:484:4>>*/ return  /*<<camlinternalOO.ml:484:4>>*/ caml_call2
                       (f, obj[1 + e][1 + n], x); /*<<camlinternalOO.ml:484:71>>*/ };
             }
             (f$8, e$2, n$10, x$6);
         break;
        case 15:
          /*<<camlinternalOO.ml:577:14>>*/ var
           /*<<camlinternalOO.ml:577:14>>*/ f$9 = next(0),
           /*<<camlinternalOO.ml:577:32>>*/ n$11 = next(0),
           /*<<camlinternalOO.ml:577:50>>*/ x$7 = next(0),
          clo$0 =
            function(f, n, x){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:478:45>>*/ return  /*<<camlinternalOO.ml:478:45>>*/ caml_call2
                       (f,
                         /*<<camlinternalOO.ml:478:45>>*/ caml_call1
                         (obj[1][1 + n], obj),
                        x); /*<<camlinternalOO.ml:478:63>>*/ };
             }
             (f$9, n$11, x$7);
         break;
        case 16:
          /*<<camlinternalOO.ml:580:14>>*/ var
           /*<<camlinternalOO.ml:580:14>>*/ n$12 = next(0),
           /*<<camlinternalOO.ml:580:32>>*/ x$8 = next(0),
          clo$0 =
            function(n, x){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:485:41>>*/ return  /*<<camlinternalOO.ml:485:41>>*/ caml_call2
                       (obj[1][1 + n], obj, x); /*<<camlinternalOO.ml:485:68>>*/ };
             }
             (n$12, x$8);
         break;
        case 17:
          /*<<camlinternalOO.ml:582:14>>*/ var
           /*<<camlinternalOO.ml:582:14>>*/ n$13 = next(0),
           /*<<camlinternalOO.ml:582:32>>*/ m = next(0),
          clo$0 =
            function(n, m){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:487:18>>*/ return  /*<<camlinternalOO.ml:487:18>>*/ caml_call2
                       (obj[1][1 + n], obj, obj[1 + m]); /*<<camlinternalOO.ml:487:68>>*/ };
             }
             (n$13, m);
         break;
        case 18:
          /*<<camlinternalOO.ml:584:14>>*/ var
           /*<<camlinternalOO.ml:584:14>>*/ n$14 = next(0),
           /*<<camlinternalOO.ml:584:32>>*/ e$3 = next(0),
           /*<<camlinternalOO.ml:584:50>>*/ m$0 = next(0),
          clo$0 =
            function(n, e, m){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:489:18>>*/ return  /*<<camlinternalOO.ml:489:18>>*/ caml_call2
                       (obj[1][1 + n], obj, obj[1 + e][1 + m]); /*<<camlinternalOO.ml:490:69>>*/ };
             }
             (n$14, e$3, m$0);
         break;
        case 19:
          /*<<camlinternalOO.ml:587:14>>*/ var
           /*<<camlinternalOO.ml:587:14>>*/ n$15 = next(0),
           /*<<camlinternalOO.ml:587:32>>*/ m$1 = next(0),
          clo$0 =
            function(n, m){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:492:44>>*/  /*<<camlinternalOO.ml:492:44>>*/ var
                _k_ =
                   /*<<camlinternalOO.ml:492:44>>*/ caml_call1
                   (obj[1][1 + m], obj);
                /*<<camlinternalOO.ml:492:44>>*/ return  /*<<camlinternalOO.ml:492:44>>*/ caml_call2
                       (obj[1][1 + n], obj, _k_); /*<<camlinternalOO.ml:492:60>>*/ };
             }
             (n$15, m$1);
         break;
        case 20:
          /*<<camlinternalOO.ml:589:14>>*/ var
           /*<<camlinternalOO.ml:589:14>>*/ m$2 = next(0),
           /*<<camlinternalOO.ml:589:32>>*/ x$9 = next(0);
          /*<<camlinternalOO.ml:589:57>>*/ new_cache(table);
         var
          clo$0 =
            function(m, x){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:494:18>>*/ return  /*<<camlinternalOO.ml:494:18>>*/ caml_call1
                       ( /*<<camlinternalOO.ml:494:18>>*/ caml_get_public_method
                         (x, m, 0),
                        x); /*<<camlinternalOO.ml:494:58>>*/ };
             }
             (m$2, x$9);
         break;
        case 21:
          /*<<camlinternalOO.ml:591:14>>*/ var
           /*<<camlinternalOO.ml:591:14>>*/ m$3 = next(0),
           /*<<camlinternalOO.ml:591:32>>*/ n$16 = next(0);
          /*<<camlinternalOO.ml:591:56>>*/ new_cache(table);
         var
          clo$0 =
            function(m, n){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:497:4>>*/  /*<<camlinternalOO.ml:497:4>>*/ var
                _j_ = obj[1 + n];
                /*<<camlinternalOO.ml:497:4>>*/ return  /*<<camlinternalOO.ml:497:4>>*/ caml_call1
                       ( /*<<camlinternalOO.ml:497:4>>*/ caml_get_public_method
                         (_j_, m, 0),
                        _j_); /*<<camlinternalOO.ml:498:32>>*/ };
             }
             (m$3, n$16);
         break;
        case 22:
          /*<<camlinternalOO.ml:593:14>>*/ var
           /*<<camlinternalOO.ml:593:14>>*/ m$4 = next(0),
           /*<<camlinternalOO.ml:593:32>>*/ e$4 = next(0),
           /*<<camlinternalOO.ml:593:50>>*/ n$17 = next(0);
          /*<<camlinternalOO.ml:594:21>>*/ new_cache(table);
         var
          clo$0 =
            function(m, e, n){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:501:4>>*/  /*<<camlinternalOO.ml:501:4>>*/ var
                _i_ = obj[1 + e][1 + n];
                /*<<camlinternalOO.ml:501:4>>*/ return  /*<<camlinternalOO.ml:501:4>>*/ caml_call1
                       ( /*<<camlinternalOO.ml:501:4>>*/ caml_get_public_method
                         (_i_, m, 0),
                        _i_); /*<<camlinternalOO.ml:504:34>>*/ };
             }
             (m$4, e$4, n$17);
         break;
        default:
          /*<<camlinternalOO.ml:596:14>>*/ var
           /*<<camlinternalOO.ml:596:14>>*/ m$5 = next(0),
           /*<<camlinternalOO.ml:596:32>>*/ n$18 = next(0);
          /*<<camlinternalOO.ml:596:57>>*/ new_cache(table);
         var
          clo$0 =
            function(m, n){
               /*<<?>>*/ return function(obj){
                /*<<camlinternalOO.ml:507:14>>*/  /*<<camlinternalOO.ml:507:14>>*/ var
                _l_ =
                   /*<<camlinternalOO.ml:507:14>>*/ caml_call1
                   (obj[1][1 + n], obj);
                /*<<camlinternalOO.ml:507:14>>*/ return  /*<<camlinternalOO.ml:507:14>>*/ caml_call1
                       ( /*<<camlinternalOO.ml:507:14>>*/ caml_get_public_method
                         (_l_, m, 0),
                        _l_); /*<<camlinternalOO.ml:507:59>>*/ };
             }
             (m$5, n$18);
      }
     else
      var clo$0 = clo;
      /*<<camlinternalOO.ml:603:4>>*/ set_method(table, label, clo$0);
      /*<<camlinternalOO.ml:603:4>>*/ i[1]++;
    }
    /*<<camlinternalOO.ml:605:6>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/ function stats(param){
     /*<<camlinternalOO.ml:613:2>>*/ return [0,
            table_count[1],
            method_count[1],
            inst_var_count[1]];
    /*<<camlinternalOO.ml:614:59>>*/ }
    /*<<camlinternalOO.ml:121:27>>*/  /*<<camlinternalOO.ml:121:27>>*/ var
    CamlinternalOO =
      [0,
       public_method_label,
       new_method,
       new_variable,
       new_methods_variables,
       get_variable,
       get_variables,
       get_method_label,
       get_method_labels,
       get_method,
       set_method,
       set_methods,
       narrow,
       widen,
       add_initializer,
       dummy_table,
       create_table,
       init_class,
       inherits,
       make_class,
       make_class_store,
       dummy_class,
       copy,
       create_object,
       create_object_opt,
       run_initializers,
       run_initializers_opt,
       create_object_and_run_initiali,
       lookup_tables,
       params,
       stats];
    /*<<camlinternalOO.ml:121:27>>*/  /*<<camlinternalOO.ml:121:27>>*/ runtime.caml_register_global
    (17, CamlinternalOO, "CamlinternalOO");
    /*<<camlinternalOO.ml:121:27>>*/ return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Oo
//# unitInfo: Requires: CamlinternalOO
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    CamlinternalOO = global_data.CamlinternalOO,
    copy = CamlinternalOO[22],
    new_method = CamlinternalOO[1],
    public_method_label = CamlinternalOO[1],
    Stdlib_Oo = [0, copy, new_method, public_method_label];
   runtime.caml_register_global(1, Stdlib_Oo, "Stdlib__Oo");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: CamlinternalMod
//# unitInfo: Requires: Assert_failure, CamlinternalLazy, CamlinternalOO, Stdlib, Stdlib__Obj
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst_camlinternalMod_ml = "camlinternalMod.ml",
    caml_check_bound = runtime.caml_check_bound,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_obj_tag = runtime.caml_obj_tag;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    CamlinternalLazy = global_data.CamlinternalLazy,
    CamlinternalOO = global_data.CamlinternalOO,
    Assert_failure = global_data.Assert_failure,
    _a_ = [0, cst_camlinternalMod_ml, 72, 5],
    _b_ = [0, cst_camlinternalMod_ml, 81, 2],
    cst_CamlinternalMod_update_mod =
      "CamlinternalMod.update_mod: not a module",
    cst_CamlinternalMod_init_mod_n = "CamlinternalMod.init_mod: not a module";
   function init_mod_block(loc, comps$0){
     /*<<camlinternalMod.ml:52:2>>*/ var
      /*<<camlinternalMod.ml:52:2>>*/ length = comps$0.length - 1,
      /*<<camlinternalMod.ml:53:13>>*/ modu =
        /*<<camlinternalMod.ml:53:13>>*/ runtime.caml_obj_block(0, length),
      /*<<camlinternalMod.ml:53:13>>*/ _h_ = length - 1 | 0,
      /*<<camlinternalMod.ml:53:13>>*/ _g_ = 0;
     /*<<camlinternalMod.ml:53:13>>*/ if(_h_ >= 0){
     var i = _g_;
      /*<<camlinternalMod.ml:55:4>>*/ for(;;){
       /*<<camlinternalMod.ml:55:30>>*/  /*<<camlinternalMod.ml:55:30>>*/ var
       shape =
          /*<<camlinternalMod.ml:55:30>>*/ caml_check_bound(comps$0, i)[1 + i];
       /*<<camlinternalMod.ml:24:2>>*/ if(typeof shape === "number")
        /*<<camlinternalMod.ml:24:2>>*/ switch(shape){
         case 0:
           /*<<camlinternalMod.ml:27:7>>*/ var
            /*<<camlinternalMod.ml:27:7>>*/ fn$0 =
             function(i){
              function fn(x){
                /*<<camlinternalMod.ml:28:38>>*/  /*<<camlinternalMod.ml:28:38>>*/ var
                fn$0 = modu[1 + i];
                /*<<camlinternalMod.ml:28:38>>*/ if(fn === fn$0)
                 /*<<camlinternalMod.ml:30:11>>*/ throw  /*<<camlinternalMod.ml:30:11>>*/ caml_maybe_attach_backtrace
                       ([0, Stdlib[15], loc], 1);
                /*<<camlinternalMod.ml:32:11>>*/ return  /*<<camlinternalMod.ml:32:11>>*/ caml_call1
                       (fn$0, x);
               /*<<camlinternalMod.ml:32:16>>*/ }
              return fn;
             },
            /*<<camlinternalMod.ml:27:7>>*/ fn = fn$0(i),
           init = fn;
          break;
         case 1:
           /*<<camlinternalMod.ml:35:7>>*/  /*<<camlinternalMod.ml:35:7>>*/ var
           l = [];
           /*<<camlinternalMod.ml:42:7>>*/  /*<<camlinternalMod.ml:42:7>>*/ runtime.caml_update_dummy
           (l,
            [246,
             function(l, i){
                /*<<?>>*/ return function(_j_){
                 /*<<camlinternalMod.ml:37:28>>*/  /*<<camlinternalMod.ml:37:28>>*/ var
                 l$0 = modu[1 + i];
                 /*<<camlinternalMod.ml:37:28>>*/ if(l === l$0)
                  /*<<camlinternalMod.ml:39:13>>*/ throw  /*<<camlinternalMod.ml:39:13>>*/ caml_maybe_attach_backtrace
                        ([0, Stdlib[15], loc], 1);
                 /*<<camlinternalMod.ml:41:13>>*/  /*<<camlinternalMod.ml:41:13>>*/ var
                 _k_ =  /*<<camlinternalMod.ml:41:13>>*/ caml_obj_tag(l$0);
                 /*<<camlinternalMod.ml:41:13>>*/ if(250 === _k_)
                 return l$0[1];
                if(246 !== _k_ && 244 !== _k_)
                  /*<<camlinternalMod.ml:28:9>>*/ return l$0;
                return caml_call1(CamlinternalLazy[2], l$0);};
              }
              (l, i)]);
          var init = l;
          break;
         default:
          var
           init =
              /*<<camlinternalMod.ml:44:16>>*/ caml_call1
              (CamlinternalOO[21], loc);
       }
      else if(0 === shape[0])
        /*<<camlinternalMod.ml:46:7>>*/ var
         /*<<camlinternalMod.ml:46:7>>*/ comps = shape[1],
        init = init_mod_block(loc, comps);
      else
        /*<<camlinternalMod.ml:47:17>>*/ var
         /*<<camlinternalMod.ml:47:17>>*/ v = shape[1],
        init = v;
       /*<<camlinternalMod.ml:49:2>>*/ modu[1 + i] = init;
      var _i_ = i + 1 | 0;
      if(_h_ !== i){var i = _i_; continue;}
      break;
     }
    }
     /*<<camlinternalMod.ml:57:2>>*/ return modu;
    /*<<camlinternalMod.ml:57:6>>*/ }
   function init_mod(loc, shape){
     /*<<camlinternalMod.ml:60:2>>*/ if
     (typeof shape !== "number" && 0 === shape[0]){
      /*<<camlinternalMod.ml:62:5>>*/  /*<<camlinternalMod.ml:62:5>>*/ var
      comps = shape[1];
      /*<<camlinternalMod.ml:62:5>>*/ return init_mod_block(loc, comps);
    }
     /*<<camlinternalMod.ml:63:9>>*/ return  /*<<camlinternalMod.ml:63:9>>*/ caml_call1
            (Stdlib[2], cst_CamlinternalMod_init_mod_n);
    /*<<camlinternalMod.ml:63:58>>*/ }
   function update_mod_block(comps$0, modu, n){
     /*<<?>>*/ if
     (0 ===  /*<<camlinternalMod.ml:81:10>>*/ caml_obj_tag(n)
      && comps$0.length - 1 <= n.length - 1){
      /*<<camlinternalMod.ml:82:2>>*/ var
       /*<<camlinternalMod.ml:82:2>>*/ _e_ = comps$0.length - 1 - 1 | 0,
       /*<<camlinternalMod.ml:82:2>>*/ _d_ = 0;
      /*<<camlinternalMod.ml:82:2>>*/ if(_e_ >= 0){
      var i = _d_;
       /*<<camlinternalMod.ml:83:4>>*/ for(;;){
        /*<<camlinternalMod.ml:83:35>>*/ var
         /*<<camlinternalMod.ml:83:35>>*/ n$0 = n[1 + i],
         /*<<camlinternalMod.ml:83:25>>*/ shape =
           /*<<camlinternalMod.ml:83:25>>*/ caml_check_bound(comps$0, i)
           [1 + i];
        /*<<camlinternalMod.ml:66:2>>*/ if(typeof shape === "number")
         /*<<camlinternalMod.ml:66:2>>*/ if(2 === shape){
         var switch$0 = 0;
         if
          (0 ===  /*<<camlinternalMod.ml:72:13>>*/ caml_obj_tag(n$0)
           && 4 === n$0.length - 1){
           /*<<camlinternalMod.ml:73:14>>*/ var
            /*<<camlinternalMod.ml:73:14>>*/ cl = modu[1 + i],
           j = 0;
           /*<<camlinternalMod.ml:75:7>>*/ for(;;){
            /*<<camlinternalMod.ml:75:7>>*/ cl[1 + j] = n$0[1 + j];
            /*<<camlinternalMod.ml:75:7>>*/  /*<<camlinternalMod.ml:75:7>>*/ var
            _c_ = j + 1 | 0;
            /*<<camlinternalMod.ml:75:7>>*/ if(3 !== j){
            var j = _c_;
            continue;
           }
           break;
          }
         }
         else
          switch$0 = 1;
         if(switch$0)
          throw caml_maybe_attach_backtrace([0, Assert_failure, _a_], 1);
        }
        else
          /*<<camlinternalMod.ml:68:5>>*/ modu[1 + i] = n$0;
       else if(0 === shape[0]){
         /*<<camlinternalMod.ml:78:5>>*/  /*<<camlinternalMod.ml:78:5>>*/ var
         comps = shape[1];
         /*<<camlinternalMod.ml:78:28>>*/ update_mod_block
         (comps, modu[1 + i], n$0);
       }
       var _f_ = i + 1 | 0;
       if(_e_ !== i){var i = _f_; continue;}
       break;
      }
     }
     return 0;
    }
    throw caml_maybe_attach_backtrace([0, Assert_failure, _b_], 1);
    /*<<camlinternalMod.ml:84:6>>*/ }
   function update_mod(shape, o, n){
     /*<<camlinternalMod.ml:87:2>>*/ if
     (typeof shape !== "number" && 0 === shape[0]){
      /*<<camlinternalMod.ml:89:5>>*/  /*<<camlinternalMod.ml:89:5>>*/ var
      comps = shape[1];
      /*<<camlinternalMod.ml:89:5>>*/ return update_mod_block(comps, o, n);
    }
     /*<<camlinternalMod.ml:90:9>>*/ return  /*<<camlinternalMod.ml:90:9>>*/ caml_call1
            (Stdlib[2], cst_CamlinternalMod_update_mod);
    /*<<camlinternalMod.ml:90:60>>*/ }
   var CamlinternalMod = [0, init_mod, update_mod];
   runtime.caml_register_global(8, CamlinternalMod, "CamlinternalMod");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Ephemeron
//# unitInfo: Requires: CamlinternalLazy, Stdlib, Stdlib__Array, Stdlib__Hashtbl, Stdlib__Int, Stdlib__List, Stdlib__Obj, Stdlib__Random, Stdlib__Seq, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_check_bound = runtime.caml_check_bound,
    caml_make_vect = runtime.caml_make_vect,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<ephemeron.ml:736:18>>*/ var
     /*<<ephemeron.ml:736:18>>*/ global_data =
       /*<<ephemeron.ml:736:18>>*/ runtime.caml_get_global_data(),
     /*<<ephemeron.ml:736:18>>*/ Stdlib_List = global_data.Stdlib__List,
     /*<<ephemeron.ml:736:18>>*/ Stdlib = global_data.Stdlib,
     /*<<ephemeron.ml:736:18>>*/ Stdlib_Obj = global_data.Stdlib__Obj,
     /*<<ephemeron.ml:736:18>>*/ Stdlib_Sys = global_data.Stdlib__Sys,
     /*<<ephemeron.ml:736:18>>*/ Stdlib_Seq = global_data.Stdlib__Seq,
     /*<<ephemeron.ml:736:18>>*/ Stdlib_Int = global_data.Stdlib__Int,
     /*<<ephemeron.ml:736:18>>*/ Stdlib_Array = global_data.Stdlib__Array,
     /*<<ephemeron.ml:736:18>>*/ Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
     /*<<ephemeron.ml:736:18>>*/ CamlinternalLazy =
      global_data.CamlinternalLazy,
     /*<<ephemeron.ml:736:18>>*/ Stdlib_Random = global_data.Stdlib__Random,
     /*<<ephemeron.ml:736:18>>*/ _c_ = [0, 0],
     /*<<ephemeron.ml:736:18>>*/ _b_ = [0, 0],
     /*<<ephemeron.ml:736:18>>*/ _a_ = [0, 0];
   function MakeSeeded(H){
    var
     prng =
       [246,
        function(_aQ_){ /*<<?>>*/ return caml_call1(Stdlib_Random[15][2], 0);}];
    function create(opt, initial_size){
      /*<<ephemeron.ml:108:6>>*/ if(opt)
       /*<<ephemeron.ml:107:26>>*/ var
        /*<<ephemeron.ml:107:26>>*/ sth = opt[1],
       random = sth;
     else
      var
       random =  /*<<ephemeron.ml:107:26>>*/ caml_call1(Stdlib_Hashtbl[17], 0);
     var x = 16;
      /*<<ephemeron.ml:101:6>>*/ for(;;){
       /*<<ephemeron.ml:102:11>>*/ if
       (initial_size > x && Stdlib_Sys[13] >= (x * 2 | 0)){
        /*<<ephemeron.ml:103:11>>*/ var
         /*<<ephemeron.ml:103:11>>*/ x$0 = x * 2 | 0,
        x = x$0;
       continue;
      }
      if(random){
        /*<<ephemeron.ml:109:32>>*/  /*<<ephemeron.ml:109:32>>*/ var
        _aO_ =  /*<<ephemeron.ml:109:32>>*/ runtime.caml_obj_tag(prng);
        /*<<ephemeron.ml:109:32>>*/ if(250 === _aO_)
        var _aP_ = prng[1];
       else{
        var switch$0 = 0;
        if(246 !== _aO_ && 244 !== _aO_){var _aP_ = prng; switch$0 = 1;}
        if(! switch$0) var _aP_ = caml_call1(CamlinternalLazy[2], prng);
       }
       var
        seed =
           /*<<ephemeron.ml:109:32>>*/ caml_call1(Stdlib_Random[15][4], _aP_);
      }
      else
       var seed = 0;
       /*<<ephemeron.ml:110:56>>*/ return [0,
              0,
               /*<<ephemeron.ml:110:56>>*/ caml_make_vect(x, 0),
              seed,
              x];
     }
     /*<<ephemeron.ml:110:76>>*/ }
    function clear(h){
      /*<<ephemeron.ml:113:6>>*/ h[1] = 0;
      /*<<ephemeron.ml:113:6>>*/ var
       /*<<ephemeron.ml:113:6>>*/ len = h[2].length - 1,
       /*<<ephemeron.ml:113:6>>*/ _aM_ = len - 1 | 0,
       /*<<ephemeron.ml:113:6>>*/ _aL_ = 0;
      /*<<ephemeron.ml:113:6>>*/ if(_aM_ >= 0){
      var i = _aL_;
       /*<<ephemeron.ml:116:8>>*/ for(;;){
        /*<<ephemeron.ml:116:8>>*/  /*<<ephemeron.ml:116:8>>*/ caml_check_bound
         (h[2], i)
        [1 + i]
       = 0;
        /*<<ephemeron.ml:116:8>>*/  /*<<ephemeron.ml:116:8>>*/ var
        _aN_ = i + 1 | 0;
        /*<<ephemeron.ml:116:8>>*/ if(_aM_ !== i){var i = _aN_; continue;}
       break;
      }
     }
     return 0;
     /*<<ephemeron.ml:117:10>>*/ }
    function reset(h){
      /*<<ephemeron.ml:120:6>>*/  /*<<ephemeron.ml:120:6>>*/ var
      len = h[2].length - 1;
      /*<<ephemeron.ml:120:6>>*/ return len === h[4]
             ? clear(h)
             : (h
                [1]
               = 0,
               h[2] =  /*<<ephemeron.ml:125:18>>*/ caml_make_vect(h[4], 0),
               0);
     /*<<ephemeron.ml:126:9>>*/ }
    function copy(init){
      /*<<ephemeron.ml:128:17>>*/ var
       /*<<ephemeron.ml:128:17>>*/ _aI_ = init[4],
       /*<<ephemeron.ml:128:17>>*/ _aJ_ = init[3],
       /*<<ephemeron.ml:128:33>>*/ _aK_ =
         /*<<ephemeron.ml:128:33>>*/ caml_call1(Stdlib_Array[6], init[2]);
      /*<<ephemeron.ml:128:33>>*/ return [0, init[1], _aK_, _aJ_, _aI_];
     /*<<ephemeron.ml:128:52>>*/ }
    function key_index(h, hkey){
      /*<<ephemeron.ml:131:6>>*/ return hkey & (h[2].length - 1 - 1 | 0);
     /*<<ephemeron.ml:131:41>>*/ }
    function clean(h){
      /*<<ephemeron.ml:134:6>>*/ function do_bucket(param){
      var param$0 = param;
       /*<<ephemeron.ml:134:26>>*/ for(;;){
        /*<<ephemeron.ml:134:26>>*/ if(! param$0)
         /*<<ephemeron.ml:136:12>>*/ return 0;
       var hkey = param$0[1], rest = param$0[3], c = param$0[2];
        /*<<ephemeron.ml:137:36>>*/ if
        ( /*<<ephemeron.ml:137:36>>*/ caml_call1(H[6], c)){
        var rest$0 = param$0[3], c$0 = param$0[2];
         /*<<ephemeron.ml:141:26>>*/ return [0, hkey, c$0, do_bucket(rest$0)];
       }
        /*<<ephemeron.ml:138:12>>*/ h[1] = h[1] - 1 | 0;
       var param$0 = rest;
      }
      /*<<ephemeron.ml:141:41>>*/ }
      /*<<ephemeron.ml:134:6>>*/ var
       /*<<ephemeron.ml:134:6>>*/ d = h[2],
       /*<<ephemeron.ml:134:6>>*/ _aF_ = d.length - 1 - 1 | 0,
       /*<<ephemeron.ml:134:6>>*/ _aE_ = 0;
      /*<<ephemeron.ml:134:6>>*/ if(_aF_ >= 0){
      var i = _aE_;
       /*<<ephemeron.ml:145:8>>*/ for(;;){
        /*<<ephemeron.ml:145:17>>*/  /*<<ephemeron.ml:145:17>>*/ var
        _aG_ =
          do_bucket
           ( /*<<ephemeron.ml:145:27>>*/ caml_check_bound(d, i)[1 + i]);
        /*<<ephemeron.ml:145:8>>*/  /*<<ephemeron.ml:145:8>>*/ caml_check_bound
         (d, i)
        [1 + i]
       = _aG_;
        /*<<ephemeron.ml:145:8>>*/  /*<<ephemeron.ml:145:8>>*/ var
        _aH_ = i + 1 | 0;
        /*<<ephemeron.ml:145:8>>*/ if(_aF_ !== i){var i = _aH_; continue;}
       break;
      }
     }
     return 0;
     /*<<ephemeron.ml:146:10>>*/ }
    function resize(h){
      /*<<ephemeron.ml:169:6>>*/ var
       /*<<ephemeron.ml:169:6>>*/ odata = h[2],
       /*<<ephemeron.ml:169:6>>*/ osize = odata.length - 1,
       /*<<ephemeron.ml:169:6>>*/ nsize = osize * 2 | 0;
      /*<<ephemeron.ml:172:6>>*/ clean(h);
      /*<<ephemeron.ml:172:6>>*/ var
       /*<<ephemeron.ml:172:6>>*/ _ax_ = nsize < Stdlib_Sys[13] ? 1 : 0,
       /*<<ephemeron.ml:172:6>>*/ _ay_ =
        _ax_ ? (osize >>> 1 | 0) <= h[1] ? 1 : 0 : _ax_;
      /*<<ephemeron.ml:173:68>>*/ if(_ay_){
       /*<<ephemeron.ml:174:20>>*/  /*<<ephemeron.ml:174:20>>*/ var
       ndata =  /*<<ephemeron.ml:174:20>>*/ caml_make_vect(nsize, 0);
       /*<<ephemeron.ml:174:20>>*/ h[2] = ndata;
       /*<<ephemeron.ml:174:20>>*/ var
        /*<<ephemeron.ml:174:20>>*/ insert_bucket =
         function(param){
           /*<<ephemeron.ml:176:32>>*/ if(! param)
            /*<<ephemeron.ml:177:21>>*/ return 0;
          var rest = param[3], data = param[2], hkey = param[1];
           /*<<ephemeron.ml:179:14>>*/ insert_bucket(rest);
           /*<<ephemeron.ml:180:25>>*/ var
            /*<<ephemeron.ml:180:25>>*/ nidx = key_index(h, hkey),
            /*<<ephemeron.ml:181:47>>*/ _aD_ =
             [0,
              hkey,
              data,
               /*<<ephemeron.ml:181:47>>*/ caml_check_bound(ndata, nidx)
               [1 + nidx]];
           /*<<ephemeron.ml:181:14>>*/  /*<<ephemeron.ml:181:14>>*/ caml_check_bound
            (ndata, nidx)
           [1 + nidx]
          = _aD_;
           /*<<ephemeron.ml:181:14>>*/ return 0;
          /*<<ephemeron.ml:181:60>>*/ },
        /*<<ephemeron.ml:174:20>>*/ _aA_ = osize - 1 | 0,
        /*<<ephemeron.ml:174:20>>*/ _az_ = 0;
       /*<<ephemeron.ml:174:20>>*/ if(_aA_ >= 0){
       var i = _az_;
        /*<<ephemeron.ml:183:10>>*/ for(;;){
         /*<<ephemeron.ml:183:10>>*/ insert_bucket
         ( /*<<ephemeron.ml:183:24>>*/ caml_check_bound(odata, i)[1 + i]);
         /*<<ephemeron.ml:183:10>>*/  /*<<ephemeron.ml:183:10>>*/ var
         _aC_ = i + 1 | 0;
         /*<<ephemeron.ml:183:10>>*/ if(_aA_ !== i){var i = _aC_; continue;}
        break;
       }
      }
      var _aB_ = 0;
     }
     else
      var _aB_ = _ay_;
      /*<<ephemeron.ml:134:26>>*/ return _aB_;
     /*<<ephemeron.ml:185:9>>*/ }
    function add(h, key, info){
      /*<<ephemeron.ml:188:17>>*/ var
       /*<<ephemeron.ml:188:17>>*/ hkey =
         /*<<ephemeron.ml:188:17>>*/ caml_call2(H[2], h[3], key),
       /*<<ephemeron.ml:189:14>>*/ i = key_index(h, hkey),
       /*<<ephemeron.ml:190:22>>*/ container =
         /*<<ephemeron.ml:190:22>>*/ caml_call2(H[1], key, info),
       /*<<ephemeron.ml:191:41>>*/ bucket =
        [0,
         hkey,
         container,
          /*<<ephemeron.ml:191:41>>*/ caml_check_bound(h[2], i)[1 + i]];
      /*<<ephemeron.ml:192:6>>*/  /*<<ephemeron.ml:192:6>>*/ caml_check_bound
       (h[2], i)
      [1 + i]
     = bucket;
      /*<<ephemeron.ml:192:6>>*/ h[1] = h[1] + 1 | 0;
      /*<<ephemeron.ml:192:6>>*/  /*<<ephemeron.ml:192:6>>*/ var
      _aw_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
      /*<<ephemeron.ml:192:6>>*/ return _aw_ ? resize(h) : _aw_;
     /*<<ephemeron.ml:194:57>>*/ }
    function remove(h, key){
      /*<<ephemeron.ml:197:17>>*/  /*<<ephemeron.ml:197:17>>*/ var
      hkey =  /*<<ephemeron.ml:197:17>>*/ caml_call2(H[2], h[3], key);
      /*<<ephemeron.ml:197:17>>*/ function remove_bucket(param){
      var param$0 = param;
       /*<<ephemeron.ml:198:30>>*/ for(;;){
        /*<<ephemeron.ml:198:30>>*/ if(! param$0)
         /*<<ephemeron.ml:199:19>>*/ return 0;
       var hk = param$0[1], next = param$0[3], c = param$0[2];
       if(hkey === hk)
         /*<<ephemeron.ml:201:24>>*/ switch
         ( /*<<ephemeron.ml:201:24>>*/ caml_call2(H[3], c, key)){
          case 0:
            /*<<ephemeron.ml:202:23>>*/ h[1] = h[1] - 1 | 0;
            /*<<ephemeron.ml:202:23>>*/ return next;
          case 1:
            /*<<ephemeron.ml:203:36>>*/ return [0, hk, c, remove_bucket(next)];
          default:
            /*<<ephemeron.ml:207:16>>*/ h[1] = h[1] - 1 | 0;
           var param$0 = next;
           continue;
        }
       var next$0 = param$0[3], c$0 = param$0[2];
        /*<<ephemeron.ml:210:41>>*/ return [0, hk, c$0, remove_bucket(next$0)];
      }
      /*<<ephemeron.ml:210:60>>*/ }
      /*<<ephemeron.ml:211:14>>*/ var
       /*<<ephemeron.ml:211:14>>*/ i = key_index(h, hkey),
       /*<<ephemeron.ml:212:20>>*/ _av_ =
        remove_bucket
         ( /*<<ephemeron.ml:212:34>>*/ caml_check_bound(h[2], i)[1 + i]);
      /*<<ephemeron.ml:212:6>>*/  /*<<ephemeron.ml:212:6>>*/ caml_check_bound
       (h[2], i)
      [1 + i]
     = _av_;
      /*<<ephemeron.ml:212:6>>*/ return 0;
     /*<<ephemeron.ml:212:44>>*/ }
    function find(h, key){
      /*<<ephemeron.ml:239:17>>*/ var
       /*<<ephemeron.ml:239:17>>*/ hkey =
         /*<<ephemeron.ml:239:17>>*/ caml_call2(H[2], h[3], key),
       /*<<ephemeron.ml:241:33>>*/ _au_ = key_index(h, hkey),
      param =
         /*<<ephemeron.ml:241:24>>*/ caml_check_bound(h[2], _au_)[1 + _au_];
     for(;;){
      if(! param)
        /*<<ephemeron.ml:220:10>>*/ throw  /*<<ephemeron.ml:220:10>>*/ caml_maybe_attach_backtrace
              (Stdlib[8], 1);
      var hk = param[1], rest = param[3], c = param[2];
      if(hkey !== hk){
        /*<<ephemeron.ml:236:10>>*/ var
         /*<<ephemeron.ml:236:10>>*/ rest$0 = param[3],
        param = rest$0;
       continue;
      }
       /*<<ephemeron.ml:222:22>>*/ switch
       ( /*<<ephemeron.ml:222:22>>*/ caml_call2(H[3], c, key)){
        case 0:
          /*<<ephemeron.ml:224:26>>*/  /*<<ephemeron.ml:224:26>>*/ var
          match =  /*<<ephemeron.ml:224:26>>*/ caml_call1(H[4], c);
          /*<<ephemeron.ml:224:26>>*/ if(match){
           /*<<ephemeron.ml:229:26>>*/  /*<<ephemeron.ml:229:26>>*/ var
           d = match[1];
           /*<<ephemeron.ml:229:26>>*/ return d;
         }
         var param = rest;
         continue;
        case 1:
         var param = rest; continue;
        default: var param = rest; continue;
      }
     }
     /*<<ephemeron.ml:241:51>>*/ }
    function find_opt(h, key){
      /*<<ephemeron.ml:264:17>>*/ var
       /*<<ephemeron.ml:264:17>>*/ hkey =
         /*<<ephemeron.ml:264:17>>*/ caml_call2(H[2], h[3], key),
       /*<<ephemeron.ml:266:37>>*/ _at_ = key_index(h, hkey),
      param =
         /*<<ephemeron.ml:266:28>>*/ caml_check_bound(h[2], _at_)[1 + _at_];
     for(;;){
      if(! param)  /*<<ephemeron.ml:245:10>>*/ return 0;
      var hk = param[1], rest = param[3], c = param[2];
      if(hkey === hk)
        /*<<ephemeron.ml:247:22>>*/ switch
        ( /*<<ephemeron.ml:247:22>>*/ caml_call2(H[3], c, key)){
         case 0:
           /*<<ephemeron.ml:249:26>>*/  /*<<ephemeron.ml:249:26>>*/ var
           d =  /*<<ephemeron.ml:249:26>>*/ caml_call1(H[4], c);
           /*<<ephemeron.ml:249:26>>*/ if(d)
            /*<<ephemeron.ml:254:31>>*/ return d;
          var param = rest;
          continue;
         case 1:
          var param = rest; continue;
         default: var param = rest; continue;
       }
       /*<<ephemeron.ml:261:10>>*/ var
        /*<<ephemeron.ml:261:10>>*/ rest$0 = param[3],
       param = rest$0;
     }
     /*<<ephemeron.ml:266:55>>*/ }
    function find_all(h, key){
      /*<<ephemeron.ml:269:17>>*/  /*<<ephemeron.ml:269:17>>*/ var
      hkey =  /*<<ephemeron.ml:269:17>>*/ caml_call2(H[2], h[3], key);
      /*<<ephemeron.ml:269:17>>*/ function find_in_bucket(param){
      var param$0 = param;
       /*<<ephemeron.ml:270:31>>*/ for(;;){
        /*<<ephemeron.ml:270:31>>*/ if(! param$0)
         /*<<ephemeron.ml:271:17>>*/ return 0;
       var hk = param$0[1], rest = param$0[3], c = param$0[2];
       if(hkey !== hk){
         /*<<ephemeron.ml:284:10>>*/ var
          /*<<ephemeron.ml:284:10>>*/ rest$0 = param$0[3],
         param$0 = rest$0;
        continue;
       }
        /*<<ephemeron.ml:273:22>>*/ switch
        ( /*<<ephemeron.ml:273:22>>*/ caml_call2(H[3], c, key)){
         case 0:
           /*<<ephemeron.ml:274:33>>*/  /*<<ephemeron.ml:274:33>>*/ var
           match =  /*<<ephemeron.ml:274:33>>*/ caml_call1(H[4], c);
           /*<<ephemeron.ml:274:33>>*/ if(match){
            /*<<ephemeron.ml:277:26>>*/  /*<<ephemeron.ml:277:26>>*/ var
            d = match[1];
            /*<<ephemeron.ml:277:29>>*/ return [0, d, find_in_bucket(rest)];
          }
          var param$0 = rest;
          continue;
         case 1:
          var param$0 = rest; continue;
         default: var param$0 = rest; continue;
       }
      }
      /*<<ephemeron.ml:284:29>>*/ }
      /*<<ephemeron.ml:285:29>>*/  /*<<ephemeron.ml:285:29>>*/ var
      _as_ = key_index(h, hkey);
      /*<<ephemeron.ml:285:21>>*/ return find_in_bucket
             ( /*<<ephemeron.ml:285:21>>*/ caml_check_bound(h[2], _as_)
               [1 + _as_]);
     /*<<ephemeron.ml:285:46>>*/ }
    function replace(h, key, info){
      /*<<ephemeron.ml:289:17>>*/ var
       /*<<ephemeron.ml:289:17>>*/ hkey =
         /*<<ephemeron.ml:289:17>>*/ caml_call2(H[2], h[3], key),
       /*<<ephemeron.ml:299:14>>*/ i = key_index(h, hkey),
       /*<<ephemeron.ml:300:14>>*/ l =
         /*<<ephemeron.ml:300:14>>*/ caml_check_bound(h[2], i)[1 + i];
     try{
      var param = l;
       /*<<ephemeron.ml:290:31>>*/ for(;;){
        /*<<ephemeron.ml:290:31>>*/ if(! param)
         /*<<ephemeron.ml:291:19>>*/ throw  /*<<ephemeron.ml:291:19>>*/ caml_maybe_attach_backtrace
               (Stdlib[8], 1);
       var hk = param[1], next = param[3], c = param[2];
       if(hkey !== hk){
         /*<<ephemeron.ml:297:28>>*/ var
          /*<<ephemeron.ml:297:28>>*/ next$0 = param[3],
         param = next$0;
        continue;
       }
        /*<<ephemeron.ml:293:24>>*/ if
        ( /*<<ephemeron.ml:293:24>>*/ caml_call2(H[3], c, key)){var param = next; continue;}
        /*<<ephemeron.ml:294:23>>*/  /*<<ephemeron.ml:294:23>>*/ var
        _ao_ =  /*<<ephemeron.ml:294:23>>*/ caml_call3(H[5], c, key, info);
       return _ao_;
      }
     }
     catch(_ar_){
      var _ap_ = caml_wrap_exception(_ar_);
      if(_ap_ !== Stdlib[8])
        /*<<ephemeron.ml:270:31>>*/ throw  /*<<ephemeron.ml:270:31>>*/ caml_maybe_attach_backtrace
              (_ap_, 0);
       /*<<ephemeron.ml:304:24>>*/  /*<<ephemeron.ml:304:24>>*/ var
       container =  /*<<ephemeron.ml:304:24>>*/ caml_call2(H[1], key, info);
       /*<<ephemeron.ml:305:8>>*/  /*<<ephemeron.ml:305:8>>*/ caml_check_bound
        (h[2], i)
       [1 + i]
      = [0, hkey, container, l];
       /*<<ephemeron.ml:305:8>>*/ h[1] = h[1] + 1 | 0;
       /*<<ephemeron.ml:305:8>>*/  /*<<ephemeron.ml:305:8>>*/ var
       _aq_ = h[2].length - 1 << 1 < h[1] ? 1 : 0;
       /*<<ephemeron.ml:305:8>>*/ return _aq_ ? resize(h) : _aq_;
     }
     /*<<ephemeron.ml:307:59>>*/ }
    function mem(h, key){
      /*<<ephemeron.ml:310:17>>*/ var
       /*<<ephemeron.ml:310:17>>*/ hkey =
         /*<<ephemeron.ml:310:17>>*/ caml_call2(H[2], h[3], key),
       /*<<ephemeron.ml:320:28>>*/ _an_ = key_index(h, hkey),
      param =
         /*<<ephemeron.ml:320:20>>*/ caml_check_bound(h[2], _an_)[1 + _an_];
      /*<<ephemeron.ml:311:30>>*/ for(;;){
       /*<<ephemeron.ml:311:30>>*/ if(! param)
        /*<<ephemeron.ml:313:10>>*/ return 0;
      var hk = param[1], rest = param[3], c = param[2];
      if(hk !== hkey){
        /*<<ephemeron.ml:319:31>>*/ var
         /*<<ephemeron.ml:319:31>>*/ rest$0 = param[3],
        param = rest$0;
       continue;
      }
       /*<<ephemeron.ml:315:22>>*/ if
       (!  /*<<ephemeron.ml:315:22>>*/ caml_call2(H[3], c, key))
        /*<<ephemeron.ml:316:21>>*/ return 1;
      var param = rest;
     }
     /*<<ephemeron.ml:320:45>>*/ }
    function length(h){
      /*<<ephemeron.ml:322:19>>*/ return h[1];
     /*<<ephemeron.ml:322:25>>*/ }
    function bucket_length(accu, param){
     var accu$0 = accu, param$0 = param;
     for(;;){
      if(! param$0)  /*<<ephemeron.ml:325:17>>*/ return accu$0;
       /*<<ephemeron.ml:326:28>>*/ var
        /*<<ephemeron.ml:326:28>>*/ rest = param$0[3],
        /*<<ephemeron.ml:326:28>>*/ accu$1 = accu$0 + 1 | 0,
       accu$0 = accu$1,
       param$0 = rest;
     }
    }
    function stats(h){
      /*<<ephemeron.ml:329:6>>*/ var
       /*<<ephemeron.ml:329:6>>*/ _ag_ = h[2],
       /*<<ephemeron.ml:329:6>>*/ _ah_ = 0;
      /*<<ephemeron.ml:329:6>>*/ function _ai_(m, b){
       /*<<ephemeron.ml:330:46>>*/  /*<<ephemeron.ml:330:46>>*/ var
       _am_ = bucket_length(0, b);
       /*<<ephemeron.ml:330:46>>*/ return  /*<<ephemeron.ml:330:46>>*/ caml_call2
              (Stdlib_Int[11], m, _am_);
      /*<<ephemeron.ml:330:65>>*/ }
      /*<<ephemeron.ml:330:8>>*/ var
       /*<<ephemeron.ml:330:8>>*/ mbl =
         /*<<ephemeron.ml:330:8>>*/ caml_call3
         (Stdlib_Array[15], _ai_, _ah_, _ag_),
       /*<<ephemeron.ml:331:18>>*/ histo =
         /*<<ephemeron.ml:331:18>>*/ caml_make_vect(mbl + 1 | 0, 0),
       /*<<ephemeron.ml:331:18>>*/ _aj_ = h[2];
      /*<<ephemeron.ml:331:18>>*/ function _ak_(b){
       /*<<ephemeron.ml:334:19>>*/ var
        /*<<ephemeron.ml:334:19>>*/ l = bucket_length(0, b),
        /*<<ephemeron.ml:335:24>>*/ _al_ =
          /*<<ephemeron.ml:335:24>>*/ caml_check_bound(histo, l)[1 + l] + 1
         | 0;
       /*<<ephemeron.ml:335:11>>*/  /*<<ephemeron.ml:335:11>>*/ caml_check_bound
        (histo, l)
       [1 + l]
      = _al_;
       /*<<ephemeron.ml:335:11>>*/ return 0;
      /*<<ephemeron.ml:335:37>>*/ }
      /*<<ephemeron.ml:332:6>>*/  /*<<ephemeron.ml:332:6>>*/ caml_call2
      (Stdlib_Array[11], _ak_, _aj_);
      /*<<ephemeron.ml:332:6>>*/ return [0, h[1], h[2].length - 1, mbl, histo];
     /*<<ephemeron.ml:340:34>>*/ }
    function bucket_length_alive(accu, param){
     var accu$0 = accu, param$0 = param;
     for(;;){
      if(! param$0)  /*<<ephemeron.ml:343:17>>*/ return accu$0;
      var rest = param$0[3], c = param$0[2];
       /*<<ephemeron.ml:344:30>>*/ if
       ( /*<<ephemeron.ml:344:30>>*/ caml_call1(H[6], c)){
        /*<<ephemeron.ml:345:10>>*/ var
         /*<<ephemeron.ml:345:10>>*/ accu$1 = accu$0 + 1 | 0,
        accu$0 = accu$1,
        param$0 = rest;
       continue;
      }
       /*<<ephemeron.ml:346:28>>*/ var
        /*<<ephemeron.ml:346:28>>*/ rest$0 = param$0[3],
       param$0 = rest$0;
     }
    }
    function stats_alive(h){
      /*<<ephemeron.ml:349:6>>*/ var
       /*<<ephemeron.ml:349:6>>*/ size = [0, 0],
       /*<<ephemeron.ml:349:6>>*/ _$_ = h[2],
       /*<<ephemeron.ml:349:6>>*/ _aa_ = 0;
      /*<<ephemeron.ml:349:6>>*/ function _ab_(m, b){
       /*<<ephemeron.ml:352:32>>*/  /*<<ephemeron.ml:352:32>>*/ var
       _af_ = bucket_length_alive(0, b);
       /*<<ephemeron.ml:352:32>>*/ return  /*<<ephemeron.ml:352:32>>*/ caml_call2
              (Stdlib_Int[11], m, _af_);
      /*<<ephemeron.ml:352:57>>*/ }
      /*<<ephemeron.ml:351:8>>*/ var
       /*<<ephemeron.ml:351:8>>*/ mbl =
         /*<<ephemeron.ml:351:8>>*/ caml_call3
         (Stdlib_Array[15], _ab_, _aa_, _$_),
       /*<<ephemeron.ml:354:18>>*/ histo =
         /*<<ephemeron.ml:354:18>>*/ caml_make_vect(mbl + 1 | 0, 0),
       /*<<ephemeron.ml:354:18>>*/ _ac_ = h[2];
      /*<<ephemeron.ml:354:18>>*/ function _ad_(b){
       /*<<ephemeron.ml:357:19>>*/  /*<<ephemeron.ml:357:19>>*/ var
       l = bucket_length_alive(0, b);
       /*<<ephemeron.ml:357:19>>*/ size[1] = size[1] + l | 0;
       /*<<ephemeron.ml:359:24>>*/  /*<<ephemeron.ml:359:24>>*/ var
       _ae_ =
          /*<<ephemeron.ml:359:24>>*/ caml_check_bound(histo, l)[1 + l] + 1
         | 0;
       /*<<ephemeron.ml:359:11>>*/  /*<<ephemeron.ml:359:11>>*/ caml_check_bound
        (histo, l)
       [1 + l]
      = _ae_;
       /*<<ephemeron.ml:359:11>>*/ return 0;
      /*<<ephemeron.ml:359:37>>*/ }
      /*<<ephemeron.ml:355:6>>*/  /*<<ephemeron.ml:355:6>>*/ caml_call2
      (Stdlib_Array[11], _ad_, _ac_);
      /*<<ephemeron.ml:355:6>>*/ return [0,
             size[1],
             h[2].length - 1,
             mbl,
             histo];
     /*<<ephemeron.ml:364:34>>*/ }
    function add_seq(tbl, i){
      /*<<ephemeron.ml:367:6>>*/ function ___(param){
       /*<<ephemeron.ml:367:15>>*/ var
        /*<<ephemeron.ml:367:15>>*/ v = param[2],
        /*<<ephemeron.ml:367:15>>*/ k = param[1];
       /*<<ephemeron.ml:367:15>>*/ return add(tbl, k, v);
      /*<<ephemeron.ml:367:41>>*/ }
      /*<<ephemeron.ml:367:6>>*/ return  /*<<ephemeron.ml:367:6>>*/ caml_call2
             (Stdlib_Seq[4], ___, i);
     /*<<ephemeron.ml:367:43>>*/ }
    function replace_seq(tbl, i){
      /*<<ephemeron.ml:370:6>>*/ function _Z_(param){
       /*<<ephemeron.ml:370:15>>*/ var
        /*<<ephemeron.ml:370:15>>*/ v = param[2],
        /*<<ephemeron.ml:370:15>>*/ k = param[1];
       /*<<ephemeron.ml:370:15>>*/ return replace(tbl, k, v);
      /*<<ephemeron.ml:370:45>>*/ }
      /*<<ephemeron.ml:370:6>>*/ return  /*<<ephemeron.ml:370:6>>*/ caml_call2
             (Stdlib_Seq[4], _Z_, i);
     /*<<ephemeron.ml:370:47>>*/ }
    function of_seq(i){
      /*<<ephemeron.ml:373:16>>*/  /*<<ephemeron.ml:373:16>>*/ var
      tbl = create(0, 16);
      /*<<ephemeron.ml:374:6>>*/ replace_seq(tbl, i);
      /*<<ephemeron.ml:374:6>>*/ return tbl;
     /*<<ephemeron.ml:375:9>>*/ }
    return [0,
            create,
            clear,
            reset,
            copy,
            add,
            remove,
            find,
            find_opt,
            find_all,
            replace,
            mem,
            length,
            stats,
            add_seq,
            replace_seq,
            of_seq,
            clean,
            stats_alive];
   }
   function create(param){
     /*<<ephemeron.ml:394:30>>*/ return  /*<<ephemeron.ml:394:30>>*/ caml_call1
            (Stdlib_Obj[24][1], 1);
    /*<<ephemeron.ml:394:45>>*/ }
   function get_key(t){
     /*<<ephemeron.ml:396:50>>*/ return  /*<<ephemeron.ml:396:50>>*/ caml_call2
            (Stdlib_Obj[24][3], t, 0);
    /*<<ephemeron.ml:396:70>>*/ }
   function set_key(t, k){
     /*<<ephemeron.ml:397:44>>*/ return  /*<<ephemeron.ml:397:44>>*/ caml_call3
            (Stdlib_Obj[24][5], t, 0, k);
    /*<<ephemeron.ml:397:75>>*/ }
   function check_key(t){
     /*<<ephemeron.ml:398:39>>*/ return  /*<<ephemeron.ml:398:39>>*/ caml_call2
            (Stdlib_Obj[24][7], t, 0);
    /*<<ephemeron.ml:398:59>>*/ }
   function get_data(t){
     /*<<ephemeron.ml:400:51>>*/ return  /*<<ephemeron.ml:400:51>>*/ caml_call1
            (Stdlib_Obj[24][9], t);
    /*<<ephemeron.ml:400:70>>*/ }
   function set_data(t, d){
     /*<<ephemeron.ml:401:45>>*/ return  /*<<ephemeron.ml:401:45>>*/ caml_call2
            (Stdlib_Obj[24][11], t, d);
    /*<<ephemeron.ml:401:75>>*/ }
   function make(key, data){
     /*<<ephemeron.ml:405:14>>*/  /*<<ephemeron.ml:405:14>>*/ var
     eph = create(0);
     /*<<ephemeron.ml:406:4>>*/ set_data(eph, data);
     /*<<ephemeron.ml:407:4>>*/ set_key(eph, key);
     /*<<ephemeron.ml:407:4>>*/ return eph;
    /*<<ephemeron.ml:408:7>>*/ }
   function query(eph, key){
     /*<<ephemeron.ml:411:10>>*/  /*<<ephemeron.ml:411:10>>*/ var
     match = get_key(eph);
     /*<<ephemeron.ml:411:10>>*/ if(! match)
      /*<<ephemeron.ml:412:14>>*/ return 0;
     /*<<ephemeron.ml:413:18>>*/  /*<<ephemeron.ml:413:18>>*/ var
     k = match[1];
     /*<<ephemeron.ml:413:18>>*/ return k === key ? get_data(eph) : 0;
    /*<<ephemeron.ml:414:20>>*/ }
   function MakeSeeded$0(H){
    function create$0(k, d){
      /*<<ephemeron.ml:421:16>>*/  /*<<ephemeron.ml:421:16>>*/ var
      c = create(0);
      /*<<ephemeron.ml:422:8>>*/ set_data(c, d);
      /*<<ephemeron.ml:423:8>>*/ set_key(c, k);
      /*<<ephemeron.ml:423:8>>*/ return c;
     /*<<ephemeron.ml:424:9>>*/ }
    var seeded_hash = H[2];
    function equal(c, k){
      /*<<ephemeron.ml:429:14>>*/  /*<<ephemeron.ml:429:14>>*/ var
      match = get_key(c);
      /*<<ephemeron.ml:429:14>>*/ if(! match)
       /*<<ephemeron.ml:430:18>>*/ return 2;
      /*<<ephemeron.ml:432:12>>*/  /*<<ephemeron.ml:432:12>>*/ var
      k$0 = match[1];
      /*<<ephemeron.ml:432:15>>*/ return  /*<<ephemeron.ml:432:15>>*/ caml_call2
              (H[1], k, k$0)
             ? 0
             : 1;
     /*<<ephemeron.ml:432:76>>*/ }
    function set_key_data(c, k, d){
      /*<<ephemeron.ml:402:40>>*/  /*<<ephemeron.ml:402:40>>*/ caml_call1
      (Stdlib_Obj[24][12], c);
      /*<<ephemeron.ml:436:8>>*/ set_key(c, k);
      /*<<ephemeron.ml:436:8>>*/ return set_data(c, d);
     /*<<ephemeron.ml:437:20>>*/ }
    return MakeSeeded
            ([0,
              create$0,
              seeded_hash,
              equal,
              get_data,
              set_key_data,
              check_key]);
   }
   function Make(H){
    var equal = H[1];
    function seeded_hash(seed, x){
      /*<<ephemeron.ml:446:41>>*/ return  /*<<ephemeron.ml:446:41>>*/ caml_call1
             (H[2], x);
     /*<<ephemeron.ml:446:49>>*/ }
    var
     include = MakeSeeded$0([0, equal, seeded_hash]),
     clear = include[2],
     reset = include[3],
     copy = include[4],
     add = include[5],
     remove = include[6],
     find = include[7],
     find_opt = include[8],
     find_all = include[9],
     replace = include[10],
     mem = include[11],
     length = include[12],
     stats = include[13],
     add_seq = include[14],
     replace_seq = include[15],
     clean = include[17],
     stats_alive = include[18],
     _Y_ = include[1];
    function create(sz){
      /*<<ephemeron.ml:448:20>>*/ return  /*<<ephemeron.ml:448:20>>*/ caml_call2
             (_Y_, _a_, sz);
     /*<<ephemeron.ml:448:43>>*/ }
    function of_seq(i){
      /*<<ephemeron.ml:450:16>>*/  /*<<ephemeron.ml:450:16>>*/ var
      tbl = create(16);
      /*<<ephemeron.ml:451:6>>*/  /*<<ephemeron.ml:451:6>>*/ caml_call2
      (replace_seq, tbl, i);
      /*<<ephemeron.ml:451:6>>*/ return tbl;
     /*<<ephemeron.ml:452:9>>*/ }
    return [0,
            create,
            clear,
            reset,
            copy,
            add,
            remove,
            find,
            find_opt,
            find_all,
            replace,
            mem,
            length,
            stats,
            add_seq,
            replace_seq,
            of_seq,
            clean,
            stats_alive];
   }
   function make$0(param){
     /*<<ephemeron.ml:459:18>>*/ return [0, 0];
    /*<<ephemeron.ml:459:24>>*/ }
   function add(b, k, d){
     /*<<ephemeron.ml:460:20>>*/  /*<<ephemeron.ml:460:20>>*/ var _X_ = b[1];
     /*<<ephemeron.ml:460:25>>*/ b[1] = [0, make(k, d), _X_];
     /*<<ephemeron.ml:460:25>>*/ return 0;
    /*<<ephemeron.ml:460:42>>*/ }
   function test_key(k, e){
     /*<<ephemeron.ml:463:12>>*/  /*<<ephemeron.ml:463:12>>*/ var
     match = get_key(e);
     /*<<ephemeron.ml:463:12>>*/ if(match){
      /*<<ephemeron.ml:464:20>>*/  /*<<ephemeron.ml:464:20>>*/ var
      x = match[1];
      /*<<ephemeron.ml:464:20>>*/ if(x === k)
       /*<<ephemeron.ml:464:30>>*/ return 1;
    }
     /*<<ephemeron.ml:465:13>>*/ return 0;
    /*<<ephemeron.ml:465:18>>*/ }
   function remove(b, k){
     /*<<ephemeron.ml:468:6>>*/ var
      /*<<ephemeron.ml:468:6>>*/ l$0 = b[1],
     l = l$0,
     acc = 0;
     /*<<ephemeron.ml:469:8>>*/ for(;;){
      /*<<ephemeron.ml:469:8>>*/ if(! l)
       /*<<ephemeron.ml:470:16>>*/ return 0;
     var h = l[1], t = l[2];
      /*<<ephemeron.ml:471:22>>*/ if(test_key(k, h)){
       /*<<ephemeron.ml:471:43>>*/ b[1] =
        /*<<ephemeron.ml:471:43>>*/ caml_call2(Stdlib_List[12], acc, t);
       /*<<ephemeron.ml:471:43>>*/ return 0;
     }
     var t$0 = l[2], acc$0 = [0, h, acc], l = t$0, acc = acc$0;
    }
    /*<<ephemeron.ml:474:16>>*/ }
   function find(b, k){
     /*<<ephemeron.ml:477:6>>*/  /*<<ephemeron.ml:477:6>>*/ var _U_ = b[1];
     /*<<ephemeron.ml:477:26>>*/ function _V_(_W_){
      /*<<?>>*/ return test_key(k, _W_);
    }
     /*<<ephemeron.ml:477:12>>*/  /*<<ephemeron.ml:477:12>>*/ var
     match =
        /*<<ephemeron.ml:477:12>>*/ caml_call2(Stdlib_List[39], _V_, _U_);
     /*<<ephemeron.ml:477:12>>*/ if(! match)
      /*<<ephemeron.ml:479:16>>*/ return 0;
     /*<<ephemeron.ml:478:18>>*/  /*<<ephemeron.ml:478:18>>*/ var
     e = match[1];
     /*<<ephemeron.ml:478:18>>*/ return get_data(e);
    /*<<ephemeron.ml:479:20>>*/ }
   function length(b){
     /*<<ephemeron.ml:481:19>>*/ return  /*<<ephemeron.ml:481:19>>*/ caml_call1
            (Stdlib_List[1], b[1]);
    /*<<ephemeron.ml:481:33>>*/ }
   function clear(b){
     /*<<ephemeron.ml:482:18>>*/ b[1] = 0;
     /*<<ephemeron.ml:482:18>>*/ return 0;
    /*<<ephemeron.ml:482:25>>*/ }
   function create$0(param){
     /*<<ephemeron.ml:491:35>>*/ return  /*<<ephemeron.ml:491:35>>*/ caml_call1
            (Stdlib_Obj[24][1], 2);
    /*<<ephemeron.ml:491:50>>*/ }
   function get_key1(t){
     /*<<ephemeron.ml:493:57>>*/ return  /*<<ephemeron.ml:493:57>>*/ caml_call2
            (Stdlib_Obj[24][3], t, 0);
    /*<<ephemeron.ml:493:77>>*/ }
   function set_key1(t, k){
     /*<<ephemeron.ml:495:4>>*/ return  /*<<ephemeron.ml:495:4>>*/ caml_call3
            (Stdlib_Obj[24][5], t, 0, k);
    /*<<ephemeron.ml:495:35>>*/ }
   function get_key2(t){
     /*<<ephemeron.ml:498:57>>*/ return  /*<<ephemeron.ml:498:57>>*/ caml_call2
            (Stdlib_Obj[24][3], t, 1);
    /*<<ephemeron.ml:498:77>>*/ }
   function set_key2(t, k){
     /*<<ephemeron.ml:500:4>>*/ return  /*<<ephemeron.ml:500:4>>*/ caml_call3
            (Stdlib_Obj[24][5], t, 1, k);
    /*<<ephemeron.ml:500:35>>*/ }
   function get_data$0(t){
     /*<<ephemeron.ml:503:56>>*/ return  /*<<ephemeron.ml:503:56>>*/ caml_call1
            (Stdlib_Obj[24][9], t);
    /*<<ephemeron.ml:503:75>>*/ }
   function set_data$0(t, d){
     /*<<ephemeron.ml:505:4>>*/ return  /*<<ephemeron.ml:505:4>>*/ caml_call2
            (Stdlib_Obj[24][11], t, d);
    /*<<ephemeron.ml:505:34>>*/ }
   function make$1(key1, key2, data){
     /*<<ephemeron.ml:509:14>>*/  /*<<ephemeron.ml:509:14>>*/ var
     eph = create$0(0);
     /*<<ephemeron.ml:510:4>>*/ set_data$0(eph, data);
     /*<<ephemeron.ml:511:4>>*/ set_key1(eph, key1);
     /*<<ephemeron.ml:512:4>>*/ set_key2(eph, key2);
     /*<<ephemeron.ml:512:4>>*/ return eph;
    /*<<ephemeron.ml:514:7>>*/ }
   function query$0(eph, key1, key2){
     /*<<ephemeron.ml:517:10>>*/  /*<<ephemeron.ml:517:10>>*/ var
     match = get_key1(eph);
     /*<<ephemeron.ml:517:10>>*/ if(! match)
      /*<<ephemeron.ml:518:14>>*/ return 0;
     /*<<ephemeron.ml:519:18>>*/  /*<<ephemeron.ml:519:18>>*/ var
     k = match[1];
     /*<<ephemeron.ml:519:18>>*/ if(k !== key1)
      /*<<ephemeron.ml:525:16>>*/ return 0;
     /*<<ephemeron.ml:520:20>>*/  /*<<ephemeron.ml:520:20>>*/ var
     match$0 = get_key2(eph);
     /*<<ephemeron.ml:520:20>>*/ if(! match$0)
      /*<<ephemeron.ml:521:18>>*/ return 0;
     /*<<ephemeron.ml:522:22>>*/  /*<<ephemeron.ml:522:22>>*/ var
     k$0 = match$0[1];
     /*<<ephemeron.ml:522:22>>*/ return k$0 === key2 ? get_data$0(eph) : 0;
    /*<<ephemeron.ml:525:20>>*/ }
   function MakeSeeded$1(H1, H2){
    function create(param, d){
      /*<<ephemeron.ml:534:16>>*/ var
      k2 = param[2],
      k1 = param[1],
       /*<<ephemeron.ml:534:16>>*/ c = create$0(0);
      /*<<ephemeron.ml:535:8>>*/ set_data$0(c, d);
      /*<<ephemeron.ml:536:8>>*/ set_key1(c, k1);
      /*<<ephemeron.ml:536:23>>*/ set_key2(c, k2);
      /*<<ephemeron.ml:536:23>>*/ return c;
    }
    function seeded_hash(seed, param){
      /*<<ephemeron.ml:539:33>>*/ var
      k2 = param[2],
      k1 = param[1],
       /*<<ephemeron.ml:539:33>>*/ _T_ =
         /*<<ephemeron.ml:539:33>>*/ caml_call2(H2[2], seed, k2) * 65599 | 0;
      /*<<ephemeron.ml:539:8>>*/ return  /*<<ephemeron.ml:539:8>>*/ caml_call2
             (H1[2], seed, k1)
            + _T_
            | 0;
    }
    function equal(c, param){
      /*<<ephemeron.ml:541:14>>*/ var
      k2 = param[2],
      k1 = param[1],
       /*<<ephemeron.ml:541:14>>*/ match = get_key1(c),
       /*<<ephemeron.ml:541:26>>*/ match$0 = get_key2(c);
     if(match && match$0){
      var k2$0 = match$0[1], k1$0 = match[1];
       /*<<ephemeron.ml:544:34>>*/ if
       ( /*<<ephemeron.ml:544:15>>*/ caml_call2(H1[1], k1, k1$0)
        &&  /*<<ephemeron.ml:544:34>>*/ caml_call2(H2[1], k2, k2$0))
        /*<<ephemeron.ml:545:17>>*/ return 0;
       /*<<ephemeron.ml:545:41>>*/ return 1;
     }
      /*<<ephemeron.ml:542:32>>*/ return 2;
    }
    function set_key_data(c, param, d){
     var k2 = param[2], k1 = param[1];
      /*<<ephemeron.ml:506:45>>*/  /*<<ephemeron.ml:506:45>>*/ caml_call1
      (Stdlib_Obj[24][12], c);
      /*<<ephemeron.ml:549:8>>*/ set_key1(c, k1);
      /*<<ephemeron.ml:549:23>>*/ set_key2(c, k2);
      /*<<ephemeron.ml:549:23>>*/ return set_data$0(c, d);
    }
    function check_key(c){
      /*<<ephemeron.ml:496:45>>*/  /*<<ephemeron.ml:496:45>>*/ var
      _S_ =  /*<<ephemeron.ml:496:45>>*/ caml_call2(Stdlib_Obj[24][7], c, 0);
     return _S_
             ?  /*<<ephemeron.ml:501:45>>*/ caml_call2
               (Stdlib_Obj[24][7], c, 1)
             : _S_;
     /*<<ephemeron.ml:551:52>>*/ }
    return MakeSeeded
            ([0,
              create,
              seeded_hash,
              equal,
              get_data$0,
              set_key_data,
              check_key]);
   }
   function Make$0(H1, H2){
    var equal = H2[1];
    function seeded_hash(seed, x){
      /*<<ephemeron.ml:566:43>>*/ return  /*<<ephemeron.ml:566:43>>*/ caml_call1
             (H2[2], x);
     /*<<ephemeron.ml:566:52>>*/ }
    var equal$0 = H1[1], _Q_ = [0, equal, seeded_hash];
    function seeded_hash$0(seed, x){
      /*<<ephemeron.ml:561:43>>*/ return  /*<<ephemeron.ml:561:43>>*/ caml_call1
             (H1[2], x);
     /*<<ephemeron.ml:561:52>>*/ }
    var
     include = MakeSeeded$1([0, equal$0, seeded_hash$0], _Q_),
     clear = include[2],
     reset = include[3],
     copy = include[4],
     add = include[5],
     remove = include[6],
     find = include[7],
     find_opt = include[8],
     find_all = include[9],
     replace = include[10],
     mem = include[11],
     length = include[12],
     stats = include[13],
     add_seq = include[14],
     replace_seq = include[15],
     clean = include[17],
     stats_alive = include[18],
     _R_ = include[1];
    function create(sz){
      /*<<ephemeron.ml:568:20>>*/ return  /*<<ephemeron.ml:568:20>>*/ caml_call2
             (_R_, _b_, sz);
     /*<<ephemeron.ml:568:43>>*/ }
    function of_seq(i){
      /*<<ephemeron.ml:570:16>>*/  /*<<ephemeron.ml:570:16>>*/ var
      tbl = create(16);
      /*<<ephemeron.ml:571:6>>*/  /*<<ephemeron.ml:571:6>>*/ caml_call2
      (replace_seq, tbl, i);
      /*<<ephemeron.ml:571:6>>*/ return tbl;
     /*<<ephemeron.ml:572:9>>*/ }
    return [0,
            create,
            clear,
            reset,
            copy,
            add,
            remove,
            find,
            find_opt,
            find_all,
            replace,
            mem,
            length,
            stats,
            add_seq,
            replace_seq,
            of_seq,
            clean,
            stats_alive];
   }
   function make$2(param){
     /*<<ephemeron.ml:579:18>>*/ return [0, 0];
    /*<<ephemeron.ml:579:24>>*/ }
   function add$0(b, k1, k2, d){
     /*<<ephemeron.ml:580:24>>*/  /*<<ephemeron.ml:580:24>>*/ var _P_ = b[1];
     /*<<ephemeron.ml:580:29>>*/ b[1] = [0, make$1(k1, k2, d), _P_];
     /*<<ephemeron.ml:580:29>>*/ return 0;
    /*<<ephemeron.ml:580:50>>*/ }
   function test_keys(k1, k2, e){
     /*<<ephemeron.ml:583:12>>*/ var
      /*<<ephemeron.ml:583:12>>*/ match = get_key1(e),
      /*<<ephemeron.ml:583:24>>*/ match$0 = get_key2(e);
    if(match && match$0){
     var x2 = match$0[1], x1 = match[1];
     if(x1 === k1 && x2 === k2)  /*<<ephemeron.ml:584:54>>*/ return 1;
    }
     /*<<ephemeron.ml:585:13>>*/ return 0;
    /*<<ephemeron.ml:585:18>>*/ }
   function remove$0(b, k1, k2){
     /*<<ephemeron.ml:588:6>>*/ var
      /*<<ephemeron.ml:588:6>>*/ l$0 = b[1],
     l = l$0,
     acc = 0;
     /*<<ephemeron.ml:589:8>>*/ for(;;){
      /*<<ephemeron.ml:589:8>>*/ if(! l)
       /*<<ephemeron.ml:590:16>>*/ return 0;
     var h = l[1], t = l[2];
      /*<<ephemeron.ml:591:22>>*/ if(test_keys(k1, k2, h)){
       /*<<ephemeron.ml:591:48>>*/ b[1] =
        /*<<ephemeron.ml:591:48>>*/ caml_call2(Stdlib_List[12], acc, t);
       /*<<ephemeron.ml:591:48>>*/ return 0;
     }
     var t$0 = l[2], acc$0 = [0, h, acc], l = t$0, acc = acc$0;
    }
    /*<<ephemeron.ml:594:16>>*/ }
   function find$0(b, k1, k2){
     /*<<ephemeron.ml:597:6>>*/  /*<<ephemeron.ml:597:6>>*/ var _M_ = b[1];
     /*<<ephemeron.ml:597:26>>*/ function _N_(_O_){
      /*<<?>>*/ return test_keys(k1, k2, _O_);
    }
     /*<<ephemeron.ml:597:12>>*/  /*<<ephemeron.ml:597:12>>*/ var
     match =
        /*<<ephemeron.ml:597:12>>*/ caml_call2(Stdlib_List[39], _N_, _M_);
     /*<<ephemeron.ml:597:12>>*/ if(! match)
      /*<<ephemeron.ml:599:16>>*/ return 0;
     /*<<ephemeron.ml:598:18>>*/  /*<<ephemeron.ml:598:18>>*/ var
     e = match[1];
     /*<<ephemeron.ml:598:18>>*/ return get_data$0(e);
    /*<<ephemeron.ml:599:20>>*/ }
   function length$0(b){
     /*<<ephemeron.ml:601:19>>*/ return  /*<<ephemeron.ml:601:19>>*/ caml_call1
            (Stdlib_List[1], b[1]);
    /*<<ephemeron.ml:601:33>>*/ }
   function clear$0(b){
     /*<<ephemeron.ml:602:18>>*/ b[1] = 0;
     /*<<ephemeron.ml:602:18>>*/ return 0;
    /*<<ephemeron.ml:602:25>>*/ }
   function create$1(n){
     /*<<ephemeron.ml:611:29>>*/ return  /*<<ephemeron.ml:611:29>>*/ caml_call1
            (Stdlib_Obj[24][1], n);
    /*<<ephemeron.ml:611:44>>*/ }
   function length$1(k){
     /*<<ephemeron.ml:612:35>>*/ return  /*<<ephemeron.ml:612:35>>*/ caml_call1
            (Stdlib_Obj[24][2], k);
    /*<<ephemeron.ml:612:50>>*/ }
   function get_key$0(t, n){
     /*<<ephemeron.ml:614:58>>*/ return  /*<<ephemeron.ml:614:58>>*/ caml_call2
            (Stdlib_Obj[24][3], t, n);
    /*<<ephemeron.ml:614:78>>*/ }
   function set_key$0(t, n, k){
     /*<<ephemeron.ml:616:4>>*/ return  /*<<ephemeron.ml:616:4>>*/ caml_call3
            (Stdlib_Obj[24][5], t, n, k);
    /*<<ephemeron.ml:616:35>>*/ }
   function get_data$1(t){
     /*<<ephemeron.ml:619:51>>*/ return  /*<<ephemeron.ml:619:51>>*/ caml_call1
            (Stdlib_Obj[24][9], t);
    /*<<ephemeron.ml:619:70>>*/ }
   function set_data$1(t, d){
     /*<<ephemeron.ml:620:45>>*/ return  /*<<ephemeron.ml:620:45>>*/ caml_call2
            (Stdlib_Obj[24][11], t, d);
    /*<<ephemeron.ml:620:75>>*/ }
   function make$3(keys, data){
     /*<<ephemeron.ml:624:4>>*/ var
      /*<<ephemeron.ml:624:4>>*/ l = keys.length - 1,
      /*<<ephemeron.ml:625:14>>*/ eph = create$1(l);
     /*<<ephemeron.ml:626:4>>*/ set_data$1(eph, data);
     /*<<ephemeron.ml:626:4>>*/ var
      /*<<ephemeron.ml:626:4>>*/ _K_ = l - 1 | 0,
      /*<<ephemeron.ml:626:4>>*/ _J_ = 0;
     /*<<ephemeron.ml:626:4>>*/ if(_K_ >= 0){
     var i = _J_;
      /*<<ephemeron.ml:627:26>>*/ for(;;){
       /*<<ephemeron.ml:627:26>>*/ set_key$0
       (eph, i,  /*<<ephemeron.ml:627:40>>*/ caml_check_bound(keys, i)[1 + i]);
       /*<<ephemeron.ml:627:26>>*/  /*<<ephemeron.ml:627:26>>*/ var
       _L_ = i + 1 | 0;
       /*<<ephemeron.ml:627:26>>*/ if(_K_ !== i){var i = _L_; continue;}
      break;
     }
    }
     /*<<ephemeron.ml:628:4>>*/ return eph;
    /*<<ephemeron.ml:628:7>>*/ }
   function query$1(eph, keys){
     /*<<ephemeron.ml:631:12>>*/  /*<<ephemeron.ml:631:12>>*/ var
     l = length$1(eph);
    try{
     if(l !== keys.length - 1)
       /*<<ephemeron.ml:633:37>>*/ throw  /*<<ephemeron.ml:633:37>>*/ caml_maybe_attach_backtrace
             (Stdlib[3], 1);
      /*<<ephemeron.ml:634:6>>*/ var
       /*<<ephemeron.ml:634:6>>*/ _F_ = l - 1 | 0,
       /*<<ephemeron.ml:634:6>>*/ _E_ = 0;
      /*<<ephemeron.ml:634:6>>*/ if(_F_ >= 0){
      var i = _E_;
       /*<<ephemeron.ml:635:8>>*/ for(;;){
        /*<<ephemeron.ml:635:14>>*/  /*<<ephemeron.ml:635:14>>*/ var
        match = get_key$0(eph, i);
        /*<<ephemeron.ml:635:14>>*/ if(! match)
         /*<<ephemeron.ml:636:18>>*/ throw  /*<<ephemeron.ml:636:18>>*/ caml_maybe_attach_backtrace
               (Stdlib[3], 1);
        /*<<ephemeron.ml:637:22>>*/  /*<<ephemeron.ml:637:22>>*/ var
        k = match[1];
        /*<<ephemeron.ml:637:27>>*/ if
        (k !==  /*<<ephemeron.ml:637:27>>*/ caml_check_bound(keys, i)[1 + i])
         /*<<ephemeron.ml:638:20>>*/ throw  /*<<ephemeron.ml:638:20>>*/ caml_maybe_attach_backtrace
               (Stdlib[3], 1);
       var _H_ = i + 1 | 0;
       if(_F_ !== i){var i = _H_; continue;}
       break;
      }
     }
      /*<<ephemeron.ml:640:6>>*/  /*<<ephemeron.ml:640:6>>*/ var
      _G_ = get_data$1(eph);
     return _G_;
    }
    catch(_I_){
     var _D_ = caml_wrap_exception(_I_);
     if(_D_ === Stdlib[3])  /*<<ephemeron.ml:641:17>>*/ return 0;
     throw caml_maybe_attach_backtrace(_D_, 0);
    }
    /*<<ephemeron.ml:641:21>>*/ }
   function MakeSeeded$2(H){
    function create(k, d){
      /*<<ephemeron.ml:648:16>>*/  /*<<ephemeron.ml:648:16>>*/ var
      c = create$1(k.length - 1);
      /*<<ephemeron.ml:649:8>>*/ set_data$1(c, d);
      /*<<ephemeron.ml:649:8>>*/ var
       /*<<ephemeron.ml:649:8>>*/ _B_ = k.length - 1 - 1 | 0,
       /*<<ephemeron.ml:649:8>>*/ _A_ = 0;
      /*<<ephemeron.ml:649:8>>*/ if(_B_ >= 0){
      var i = _A_;
       /*<<ephemeron.ml:651:10>>*/ for(;;){
        /*<<ephemeron.ml:651:10>>*/ set_key$0
        (c, i,  /*<<ephemeron.ml:651:22>>*/ caml_check_bound(k, i)[1 + i]);
        /*<<ephemeron.ml:651:10>>*/  /*<<ephemeron.ml:651:10>>*/ var
        _C_ = i + 1 | 0;
        /*<<ephemeron.ml:651:10>>*/ if(_B_ !== i){var i = _C_; continue;}
       break;
      }
     }
      /*<<ephemeron.ml:653:8>>*/ return c;
     /*<<ephemeron.ml:653:9>>*/ }
    function seeded_hash(seed, k){
      /*<<ephemeron.ml:655:8>>*/ var
       /*<<ephemeron.ml:655:8>>*/ h = [0, 0],
       /*<<ephemeron.ml:655:8>>*/ _w_ = k.length - 1 - 1 | 0,
       /*<<ephemeron.ml:655:8>>*/ _v_ = 0;
      /*<<ephemeron.ml:655:8>>*/ if(_w_ >= 0){
      var i = _v_;
       /*<<ephemeron.ml:657:10>>*/ for(;;){
        /*<<ephemeron.ml:657:10>>*/ var
         /*<<ephemeron.ml:657:10>>*/ _x_ = h[1],
         /*<<ephemeron.ml:657:34>>*/ _y_ =
           /*<<ephemeron.ml:657:34>>*/ caml_check_bound(k, i)[1 + i];
        /*<<ephemeron.ml:657:15>>*/ h[1] =
        ( /*<<ephemeron.ml:657:15>>*/ caml_call2(H[2], seed, _y_) * 65599 | 0)
        + _x_
        | 0;
        /*<<ephemeron.ml:657:15>>*/  /*<<ephemeron.ml:657:15>>*/ var
        _z_ = i + 1 | 0;
        /*<<ephemeron.ml:657:15>>*/ if(_w_ !== i){var i = _z_; continue;}
       break;
      }
     }
      /*<<ephemeron.ml:659:8>>*/ return h[1];
     /*<<ephemeron.ml:659:10>>*/ }
    function equal(c, k){
      /*<<ephemeron.ml:661:8>>*/ var
       /*<<ephemeron.ml:661:8>>*/ len = k.length - 1,
       /*<<ephemeron.ml:662:19>>*/ len$0 = length$1(c);
      /*<<ephemeron.ml:662:19>>*/ if(len !== len$0)
       /*<<ephemeron.ml:663:28>>*/ return 1;
      /*<<ephemeron.ml:665:10>>*/ var
       /*<<ephemeron.ml:665:10>>*/ i$1 = len - 1 | 0,
      i = i$1;
      /*<<ephemeron.ml:666:12>>*/ for(;;){
       /*<<ephemeron.ml:666:12>>*/ if(0 > i)
        /*<<ephemeron.ml:666:26>>*/ return 0;
       /*<<ephemeron.ml:668:20>>*/  /*<<ephemeron.ml:668:20>>*/ var
       match = get_key$0(c, i);
       /*<<ephemeron.ml:668:20>>*/ if(! match)
        /*<<ephemeron.ml:669:24>>*/ return 2;
       /*<<ephemeron.ml:671:18>>*/ var
        /*<<ephemeron.ml:671:18>>*/ ki = match[1],
        /*<<ephemeron.ml:671:29>>*/ _u_ =
          /*<<ephemeron.ml:671:29>>*/ caml_check_bound(k, i)[1 + i];
       /*<<ephemeron.ml:671:21>>*/ if
       (!  /*<<ephemeron.ml:671:21>>*/ caml_call2(H[1], _u_, ki))
        /*<<ephemeron.ml:673:23>>*/ return 1;
       /*<<ephemeron.ml:672:23>>*/ var
        /*<<ephemeron.ml:672:23>>*/ i$0 = i - 1 | 0,
       i = i$0;
     }
     /*<<ephemeron.ml:675:33>>*/ }
    function set_key_data(c, k, d){
      /*<<ephemeron.ml:621:40>>*/  /*<<ephemeron.ml:621:40>>*/ caml_call1
      (Stdlib_Obj[24][12], c);
     var _s_ = k.length - 1 - 1 | 0, _r_ = 0;
     if(_s_ >= 0){
      var i = _r_;
       /*<<ephemeron.ml:680:10>>*/ for(;;){
        /*<<ephemeron.ml:680:10>>*/ set_key$0
        (c, i,  /*<<ephemeron.ml:680:22>>*/ caml_check_bound(k, i)[1 + i]);
        /*<<ephemeron.ml:680:10>>*/  /*<<ephemeron.ml:680:10>>*/ var
        _t_ = i + 1 | 0;
        /*<<ephemeron.ml:680:10>>*/ if(_s_ !== i){var i = _t_; continue;}
       break;
      }
     }
      /*<<ephemeron.ml:682:8>>*/ return set_data$1(c, d);
     /*<<ephemeron.ml:682:20>>*/ }
    function check_key(c){
      /*<<ephemeron.ml:686:17>>*/ var
       /*<<ephemeron.ml:686:17>>*/ i$1 = length$1(c) - 1 | 0,
      i = i$1;
      /*<<ephemeron.ml:685:10>>*/ for(;;){
       /*<<ephemeron.ml:685:10>>*/  /*<<ephemeron.ml:685:10>>*/ var
       _p_ = i < 0 ? 1 : 0;
       /*<<ephemeron.ml:685:10>>*/ if(_p_)
       var _q_ = _p_;
      else{
        /*<<ephemeron.ml:617:47>>*/  /*<<ephemeron.ml:617:47>>*/ var
        _o_ =  /*<<ephemeron.ml:617:47>>*/ caml_call2(Stdlib_Obj[24][7], c, i);
       if(_o_){var i$0 = i - 1 | 0, i = i$0; continue;}
       var _q_ = _o_;
      }
       /*<<ephemeron.ml:684:8>>*/ return _q_;
     }
     /*<<ephemeron.ml:686:30>>*/ }
    return MakeSeeded
            ([0,
              create,
              seeded_hash,
              equal,
              get_data$1,
              set_key_data,
              check_key]);
   }
   function Make$1(H){
    var equal = H[1];
    function seeded_hash(seed, x){
      /*<<ephemeron.ml:694:41>>*/ return  /*<<ephemeron.ml:694:41>>*/ caml_call1
             (H[2], x);
     /*<<ephemeron.ml:694:49>>*/ }
    var
     include = MakeSeeded$2([0, equal, seeded_hash]),
     clear = include[2],
     reset = include[3],
     copy = include[4],
     add = include[5],
     remove = include[6],
     find = include[7],
     find_opt = include[8],
     find_all = include[9],
     replace = include[10],
     mem = include[11],
     length = include[12],
     stats = include[13],
     add_seq = include[14],
     replace_seq = include[15],
     clean = include[17],
     stats_alive = include[18],
     _n_ = include[1];
    function create(sz){
      /*<<ephemeron.ml:696:20>>*/ return  /*<<ephemeron.ml:696:20>>*/ caml_call2
             (_n_, _c_, sz);
     /*<<ephemeron.ml:696:43>>*/ }
    function of_seq(i){
      /*<<ephemeron.ml:698:16>>*/  /*<<ephemeron.ml:698:16>>*/ var
      tbl = create(16);
      /*<<ephemeron.ml:699:6>>*/  /*<<ephemeron.ml:699:6>>*/ caml_call2
      (replace_seq, tbl, i);
      /*<<ephemeron.ml:699:6>>*/ return tbl;
     /*<<ephemeron.ml:700:9>>*/ }
    return [0,
            create,
            clear,
            reset,
            copy,
            add,
            remove,
            find,
            find_opt,
            find_all,
            replace,
            mem,
            length,
            stats,
            add_seq,
            replace_seq,
            of_seq,
            clean,
            stats_alive];
   }
   function make$4(param){
     /*<<ephemeron.ml:707:18>>*/ return [0, 0];
    /*<<ephemeron.ml:707:24>>*/ }
   function add$1(b, k, d){
     /*<<ephemeron.ml:708:20>>*/  /*<<ephemeron.ml:708:20>>*/ var _m_ = b[1];
     /*<<ephemeron.ml:708:25>>*/ b[1] = [0, make$3(k, d), _m_];
     /*<<ephemeron.ml:708:25>>*/ return 0;
    /*<<ephemeron.ml:708:42>>*/ }
   function test_keys$0(k, e){
     /*<<?>>*/ try{
      /*<<ephemeron.ml:712:11>>*/ if(length$1(e) !== k.length - 1)
       /*<<ephemeron.ml:712:43>>*/ throw  /*<<ephemeron.ml:712:43>>*/ caml_maybe_attach_backtrace
             (Stdlib[3], 1);
      /*<<ephemeron.ml:713:8>>*/ var
       /*<<ephemeron.ml:713:8>>*/ _i_ = k.length - 1 - 1 | 0,
       /*<<ephemeron.ml:713:8>>*/ _h_ = 0;
      /*<<ephemeron.ml:713:8>>*/ if(_i_ >= 0){
      var i = _h_;
       /*<<ephemeron.ml:714:10>>*/ for(;;){
        /*<<ephemeron.ml:714:16>>*/ var
         /*<<ephemeron.ml:714:16>>*/ match = get_key$0(e, i),
        switch$0 = 0;
        /*<<ephemeron.ml:714:16>>*/ if(match){
         /*<<ephemeron.ml:715:24>>*/  /*<<ephemeron.ml:715:24>>*/ var
         x = match[1];
         /*<<ephemeron.ml:715:29>>*/ if
         (x ===  /*<<ephemeron.ml:715:29>>*/ caml_check_bound(k, i)[1 + i]){
         var _k_ = i + 1 | 0;
         if(_i_ !== i){var i = _k_; continue;}
         switch$0 = 1;
        }
       }
       if(! switch$0)
         /*<<ephemeron.ml:716:17>>*/ throw  /*<<ephemeron.ml:716:17>>*/ caml_maybe_attach_backtrace
               (Stdlib[3], 1);
       break;
      }
     }
      /*<<ephemeron.ml:718:8>>*/  /*<<ephemeron.ml:718:8>>*/ var _j_ = 1;
     return _j_;
    }
    catch(_l_){
     var _g_ = caml_wrap_exception(_l_);
     if(_g_ === Stdlib[3])  /*<<ephemeron.ml:719:19>>*/ return 0;
     throw caml_maybe_attach_backtrace(_g_, 0);
    }
    /*<<ephemeron.ml:719:24>>*/ }
   function remove$1(b, k){
     /*<<ephemeron.ml:722:6>>*/ var
      /*<<ephemeron.ml:722:6>>*/ l$0 = b[1],
     l = l$0,
     acc = 0;
     /*<<ephemeron.ml:723:8>>*/ for(;;){
      /*<<ephemeron.ml:723:8>>*/ if(! l)
       /*<<ephemeron.ml:724:16>>*/ return 0;
     var h = l[1], t = l[2];
      /*<<ephemeron.ml:725:22>>*/ if(test_keys$0(k, h)){
       /*<<ephemeron.ml:725:44>>*/ b[1] =
        /*<<ephemeron.ml:725:44>>*/ caml_call2(Stdlib_List[12], acc, t);
       /*<<ephemeron.ml:725:44>>*/ return 0;
     }
     var t$0 = l[2], acc$0 = [0, h, acc], l = t$0, acc = acc$0;
    }
    /*<<ephemeron.ml:728:16>>*/ }
   function find$1(b, k){
     /*<<ephemeron.ml:731:6>>*/  /*<<ephemeron.ml:731:6>>*/ var _d_ = b[1];
     /*<<ephemeron.ml:731:26>>*/ function _e_(_f_){
      /*<<?>>*/ return test_keys$0(k, _f_);
    }
     /*<<ephemeron.ml:731:12>>*/  /*<<ephemeron.ml:731:12>>*/ var
     match =
        /*<<ephemeron.ml:731:12>>*/ caml_call2(Stdlib_List[39], _e_, _d_);
     /*<<ephemeron.ml:731:12>>*/ if(! match)
      /*<<ephemeron.ml:733:16>>*/ return 0;
     /*<<ephemeron.ml:732:18>>*/  /*<<ephemeron.ml:732:18>>*/ var
     e = match[1];
     /*<<ephemeron.ml:732:18>>*/ return get_data$1(e);
    /*<<ephemeron.ml:733:20>>*/ }
   function length$2(b){
     /*<<ephemeron.ml:735:19>>*/ return  /*<<ephemeron.ml:735:19>>*/ caml_call1
            (Stdlib_List[1], b[1]);
    /*<<ephemeron.ml:735:33>>*/ }
   function clear$1(b){
     /*<<ephemeron.ml:736:18>>*/ b[1] = 0;
     /*<<ephemeron.ml:736:18>>*/ return 0;
    /*<<ephemeron.ml:736:25>>*/ }
   var
    Stdlib_Ephemeron =
      [0,
       [0,
        make,
        query,
        Make,
        MakeSeeded$0,
        [0, make$0, add, remove, find, length, clear]],
       [0,
        make$1,
        query$0,
        Make$0,
        MakeSeeded$1,
        [0, make$2, add$0, remove$0, find$0, length$0, clear$0]],
       [0,
        make$3,
        query$1,
        Make$1,
        MakeSeeded$2,
        [0, make$4, add$1, remove$1, find$1, length$2, clear$1]]];
   runtime.caml_register_global(13, Stdlib_Ephemeron, "Stdlib__Ephemeron");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Filename
//# unitInfo: Requires: Stdlib, Stdlib__Buffer, Stdlib__Domain, Stdlib__List, Stdlib__Printf, Stdlib__Random, Stdlib__String, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    cst$19 = "",
    cst$23 = " ",
    cst_2$1 = " 2>",
    cst_2_1$1 = " 2>&1",
    cst$22 = " <",
    cst$21 = " >",
    cst$20 = '"',
    cst$24 = ".",
    cst$25 = "..",
    cst$28 = "../",
    cst$27 = "./",
    cst$26 = "/",
    cst_dev_null = "/dev/null",
    caml_equal = runtime.caml_equal,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_string_length = runtime.caml_ml_string_length,
    caml_string_equal = runtime.caml_string_equal,
    caml_string_get = runtime.caml_string_get,
    caml_string_notequal = runtime.caml_string_notequal,
    caml_sys_getenv = runtime.caml_sys_getenv,
    caml_trampoline = runtime.caml_trampoline,
    caml_trampoline_return = runtime.caml_trampoline_return,
    caml_wrap_exception = runtime.caml_wrap_exception;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<?>>*/ function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
    /*<<filename.ml:357:4>>*/ var
     /*<<filename.ml:357:4>>*/ global_data =
       /*<<filename.ml:357:4>>*/ runtime.caml_get_global_data(),
     /*<<filename.ml:357:4>>*/ cst$18 = cst$19,
     /*<<filename.ml:357:4>>*/ cst$17 = cst$19,
     /*<<filename.ml:357:4>>*/ cst$16 = cst$19,
     /*<<filename.ml:357:4>>*/ cst$8 = cst$21,
     /*<<filename.ml:357:4>>*/ cst$15 = cst$19,
     /*<<filename.ml:357:4>>*/ cst$9 = cst$22,
     /*<<filename.ml:357:4>>*/ cst$14 = cst$19,
     /*<<filename.ml:357:4>>*/ cst$10 = cst$23,
     /*<<filename.ml:357:4>>*/ cst$11 = cst$23,
     /*<<filename.ml:357:4>>*/ cst$12 = cst$20,
     /*<<filename.ml:357:4>>*/ cst$13 = cst$19,
     /*<<filename.ml:357:4>>*/ cst$6 = cst$20,
     /*<<filename.ml:357:4>>*/ cst$7 = cst$20,
     /*<<filename.ml:357:4>>*/ cst$4 = cst$19,
     /*<<filename.ml:357:4>>*/ cst = cst$21,
     /*<<filename.ml:357:4>>*/ cst$3 = cst$19,
     /*<<filename.ml:357:4>>*/ cst$0 = cst$22,
     /*<<filename.ml:357:4>>*/ cst$2 = cst$19,
     /*<<filename.ml:357:4>>*/ cst$1 = cst$23,
     /*<<filename.ml:357:4>>*/ null$0 = cst_dev_null,
     /*<<filename.ml:357:4>>*/ current_dir_name = cst$24,
     /*<<filename.ml:357:4>>*/ parent_dir_name = cst$25,
     /*<<filename.ml:357:4>>*/ dir_sep = cst$26,
     /*<<filename.ml:357:4>>*/ quotequote = "'\\''",
     /*<<filename.ml:357:4>>*/ null$1 = "NUL",
     /*<<filename.ml:357:4>>*/ current_dir_name$0 = cst$24,
     /*<<filename.ml:357:4>>*/ parent_dir_name$0 = cst$25,
     /*<<filename.ml:357:4>>*/ dir_sep$0 = "\\",
     /*<<filename.ml:357:4>>*/ cst$5 = cst$24,
     /*<<filename.ml:357:4>>*/ null$2 = cst_dev_null,
     /*<<filename.ml:357:4>>*/ current_dir_name$1 = cst$24,
     /*<<filename.ml:357:4>>*/ parent_dir_name$1 = cst$25,
     /*<<filename.ml:357:4>>*/ dir_sep$1 = cst$26,
     /*<<filename.ml:357:4>>*/ Stdlib = global_data.Stdlib,
     /*<<filename.ml:357:4>>*/ Stdlib_Domain = global_data.Stdlib__Domain,
     /*<<filename.ml:357:4>>*/ Stdlib_Random = global_data.Stdlib__Random,
     /*<<filename.ml:357:4>>*/ Stdlib_Printf = global_data.Stdlib__Printf,
     /*<<filename.ml:357:4>>*/ Stdlib_String = global_data.Stdlib__String,
     /*<<filename.ml:357:4>>*/ Stdlib_List = global_data.Stdlib__List,
     /*<<filename.ml:357:4>>*/ Stdlib_Buffer = global_data.Stdlib__Buffer,
     /*<<filename.ml:357:4>>*/ Stdlib_Sys = global_data.Stdlib__Sys,
     /*<<filename.ml:357:4>>*/ _j_ = [0, 7, 0],
     /*<<filename.ml:357:4>>*/ _i_ = [0, 1, [0, 3, [0, 5, 0]]],
     /*<<filename.ml:357:4>>*/ _f_ =
      [0, [2, 0, [4, 6, [0, 2, 6], 0, [2, 0, 0]]], "%s%06x%s"],
     /*<<filename.ml:357:4>>*/ cst_Filename_chop_extension = "Filename.chop_extension",
     /*<<filename.ml:357:4>>*/ cst_Filename_chop_suffix = "Filename.chop_suffix",
     /*<<filename.ml:357:4>>*/ _c_ = [0, cst$20, 0],
     /*<<filename.ml:357:4>>*/ cst_2_1$0 = cst_2_1$1,
     /*<<filename.ml:357:4>>*/ cst_2$0 = cst_2$1,
     /*<<filename.ml:357:4>>*/ cst_Filename_quote_command_bad =
      "Filename.quote_command: bad file name ",
     /*<<filename.ml:357:4>>*/ cst_2_1 = cst_2_1$1,
     /*<<filename.ml:357:4>>*/ cst_2 = cst_2$1,
     /*<<filename.ml:357:4>>*/ cst_tmp = "/tmp";
   function generic_basename(is_dir_sep, current_dir_name, name){
     /*<<filename.ml:46:5>>*/ if
     ( /*<<filename.ml:46:5>>*/ caml_string_equal(name, cst$19))
      /*<<filename.ml:47:7>>*/ return current_dir_name;
     /*<<filename.ml:48:7>>*/ var
      /*<<filename.ml:48:7>>*/ n$3 =
        /*<<filename.ml:48:7>>*/ caml_ml_string_length(name) - 1 | 0,
     n = n$3;
     /*<<filename.ml:38:4>>*/ for(;;){
      /*<<filename.ml:38:4>>*/ if(0 > n)
       /*<<filename.ml:38:18>>*/ return  /*<<filename.ml:38:18>>*/ caml_call3
              (Stdlib_String[15], name, 0, 1);
      /*<<filename.ml:39:12>>*/ if
      ( /*<<filename.ml:39:12>>*/ caml_call2(is_dir_sep, name, n)){
       /*<<filename.ml:39:35>>*/ var
        /*<<filename.ml:39:35>>*/ n$0 = n - 1 | 0,
       n = n$0;
      continue;
     }
      /*<<filename.ml:40:9>>*/ var
       /*<<filename.ml:40:9>>*/ p = n + 1 | 0,
      n$1 = n;
      /*<<filename.ml:42:4>>*/ for(;;){
       /*<<filename.ml:42:4>>*/ if(0 > n$1)
        /*<<filename.ml:42:18>>*/ return  /*<<filename.ml:42:18>>*/ caml_call3
               (Stdlib_String[15], name, 0, p);
       /*<<filename.ml:43:12>>*/ if
       ( /*<<filename.ml:43:12>>*/ caml_call2(is_dir_sep, name, n$1))
        /*<<filename.ml:43:35>>*/ return  /*<<filename.ml:43:35>>*/ caml_call3
               (Stdlib_String[15], name, n$1 + 1 | 0, (p - n$1 | 0) - 1 | 0);
       /*<<filename.ml:44:9>>*/ var
        /*<<filename.ml:44:9>>*/ n$2 = n$1 - 1 | 0,
       n$1 = n$2;
     }
    }
    /*<<filename.ml:48:40>>*/ }
   function generic_dirname(is_dir_sep, current_dir_name, name){
     /*<<filename.ml:68:5>>*/ if
     ( /*<<filename.ml:68:5>>*/ caml_string_equal(name, cst$19))
      /*<<filename.ml:69:7>>*/ return current_dir_name;
     /*<<filename.ml:70:7>>*/ var
      /*<<filename.ml:70:7>>*/ n$5 =
        /*<<filename.ml:70:7>>*/ caml_ml_string_length(name) - 1 | 0,
     n = n$5;
     /*<<filename.ml:56:4>>*/ for(;;){
      /*<<filename.ml:56:4>>*/ if(0 > n)
       /*<<filename.ml:56:18>>*/ return  /*<<filename.ml:56:18>>*/ caml_call3
              (Stdlib_String[15], name, 0, 1);
      /*<<filename.ml:57:12>>*/ if
      ( /*<<filename.ml:57:12>>*/ caml_call2(is_dir_sep, name, n)){
       /*<<filename.ml:57:35>>*/ var
        /*<<filename.ml:57:35>>*/ n$0 = n - 1 | 0,
       n = n$0;
      continue;
     }
     var n$1 = n;
      /*<<filename.ml:60:4>>*/ for(;;){
       /*<<filename.ml:60:4>>*/ if(0 > n$1)
        /*<<filename.ml:60:18>>*/ return current_dir_name;
       /*<<filename.ml:61:12>>*/ if
       (!  /*<<filename.ml:61:12>>*/ caml_call2(is_dir_sep, name, n$1)){
        /*<<filename.ml:62:9>>*/ var
         /*<<filename.ml:62:9>>*/ n$2 = n$1 - 1 | 0,
        n$1 = n$2;
       continue;
      }
      var n$3 = n$1;
       /*<<filename.ml:64:4>>*/ for(;;){
        /*<<filename.ml:64:4>>*/ if(0 > n$3)
         /*<<filename.ml:64:18>>*/ return  /*<<filename.ml:64:18>>*/ caml_call3
                (Stdlib_String[15], name, 0, 1);
        /*<<filename.ml:65:12>>*/ if
        (!  /*<<filename.ml:65:12>>*/ caml_call2(is_dir_sep, name, n$3))
         /*<<filename.ml:66:9>>*/ return  /*<<filename.ml:66:9>>*/ caml_call3
                (Stdlib_String[15], name, 0, n$3 + 1 | 0);
        /*<<filename.ml:65:35>>*/ var
         /*<<filename.ml:65:35>>*/ n$4 = n$3 - 1 | 0,
        n$3 = n$4;
      }
     }
    }
    /*<<filename.ml:70:44>>*/ }
   function is_dir_sep(s, i){
     /*<<filename.ml:96:23>>*/ return 47
            ===  /*<<filename.ml:96:23>>*/ caml_string_get(s, i)
            ? 1
            : 0;
    /*<<filename.ml:96:34>>*/ }
   function is_relative(n){
     /*<<filename.ml:97:22>>*/ var
      /*<<filename.ml:97:22>>*/ _aL_ =
        /*<<filename.ml:97:22>>*/ caml_ml_string_length(n) < 1 ? 1 : 0,
      /*<<filename.ml:97:22>>*/ _aM_ =
       _aL_
       || (47 !==  /*<<filename.ml:97:45>>*/ caml_string_get(n, 0) ? 1 : 0);
    return _aM_;
    /*<<filename.ml:97:57>>*/ }
   function is_implicit(n){
     /*<<filename.ml:99:4>>*/  /*<<filename.ml:99:4>>*/ var
     _aG_ = is_relative(n);
     /*<<filename.ml:99:4>>*/ if(_aG_){
     var
      _aH_ = caml_ml_string_length(n) < 2 ? 1 : 0,
      _aI_ =
        _aH_
        ||
          /*<<filename.ml:100:47>>*/ caml_string_notequal
          ( /*<<filename.ml:100:31>>*/ caml_call3(Stdlib_String[15], n, 0, 2),
           cst$27);
      /*<<filename.ml:100:55>>*/ if(_aI_)
      var
       _aJ_ = caml_ml_string_length(n) < 3 ? 1 : 0,
       _aK_ =
         _aJ_
         ||
           /*<<filename.ml:101:47>>*/ caml_string_notequal
           ( /*<<filename.ml:101:31>>*/ caml_call3(Stdlib_String[15], n, 0, 3),
            cst$28);
     else
      var _aK_ = _aI_;
    }
    else
     var _aK_ = _aG_;
     /*<<filename.ml:101:56>>*/ return _aK_;
    /*<<filename.ml:101:57>>*/ }
   function check_suffix(name, suff){
     /*<<filename.ml:103:4>>*/ return  /*<<filename.ml:103:4>>*/ caml_call2
            (Stdlib_String[11], suff, name);
    /*<<filename.ml:103:38>>*/ }
   function chop_suffix_opt(suffix, filename){
     /*<<filename.ml:106:4>>*/ var
      /*<<filename.ml:106:4>>*/ len_s =
        /*<<filename.ml:106:4>>*/ caml_ml_string_length(suffix),
      /*<<filename.ml:106:4>>*/ len_f =
        /*<<filename.ml:106:4>>*/ caml_ml_string_length(filename);
     /*<<filename.ml:106:4>>*/ if(len_s > len_f)
      /*<<filename.ml:114:6>>*/ return 0;
     /*<<filename.ml:108:14>>*/  /*<<filename.ml:108:14>>*/ var
     r =
        /*<<filename.ml:108:14>>*/ caml_call3
        (Stdlib_String[15], filename, len_f - len_s | 0, len_s);
     /*<<filename.ml:109:9>>*/ return  /*<<filename.ml:109:9>>*/ caml_string_equal
             (r, suffix)
            ? [0,
               /*<<filename.ml:110:13>>*/ caml_call3
               (Stdlib_String[15], filename, 0, len_f - len_s | 0)]
            : 0;
    /*<<filename.ml:114:10>>*/ }
   try{
     /*<<filename.ml:117:8>>*/ var
      /*<<filename.ml:117:8>>*/ _l_ =
        /*<<filename.ml:117:8>>*/ caml_sys_getenv("TMPDIR"),
     temp_dir_name = _l_;
   }
   catch(_aF_){
    var _a_ = caml_wrap_exception(_aF_);
    if(_a_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_a_, 0);
    var temp_dir_name = cst_tmp;
   }
    /*<<filename.ml:118:14>>*/ function quote(s){
     /*<<filename.ml:17:2>>*/ var
      /*<<filename.ml:17:2>>*/ l =
        /*<<filename.ml:17:2>>*/ caml_ml_string_length(s),
      /*<<filename.ml:18:10>>*/ b =
        /*<<filename.ml:18:10>>*/ caml_call1(Stdlib_Buffer[1], l + 20 | 0);
     /*<<filename.ml:19:2>>*/  /*<<filename.ml:19:2>>*/ caml_call2
     (Stdlib_Buffer[12], b, 39);
     /*<<filename.ml:19:2>>*/ var
      /*<<filename.ml:19:2>>*/ _aC_ = l - 1 | 0,
      /*<<filename.ml:19:2>>*/ _aB_ = 0;
     /*<<filename.ml:19:2>>*/ if(_aC_ >= 0){
     var i = _aB_;
      /*<<filename.ml:21:4>>*/ for(;;){
       /*<<filename.ml:21:7>>*/ if
       (39 ===  /*<<filename.ml:21:7>>*/ caml_string_get(s, i))
        /*<<filename.ml:22:9>>*/  /*<<filename.ml:22:9>>*/ caml_call2
        (Stdlib_Buffer[16], b, quotequote);
      else{
        /*<<filename.ml:23:28>>*/  /*<<filename.ml:23:28>>*/ var
        _aE_ =  /*<<filename.ml:23:28>>*/ caml_string_get(s, i);
        /*<<filename.ml:23:9>>*/  /*<<filename.ml:23:9>>*/ caml_call2
        (Stdlib_Buffer[12], b, _aE_);
      }
       /*<<filename.ml:23:33>>*/  /*<<filename.ml:23:33>>*/ var
       _aD_ = i + 1 | 0;
       /*<<filename.ml:23:33>>*/ if(_aC_ !== i){var i = _aD_; continue;}
      break;
     }
    }
     /*<<filename.ml:25:2>>*/  /*<<filename.ml:25:2>>*/ caml_call2
     (Stdlib_Buffer[12], b, 39);
     /*<<filename.ml:25:2>>*/ return  /*<<filename.ml:25:2>>*/ caml_call1
            (Stdlib_Buffer[2], b);
   }
    /*<<filename.ml:118:14>>*/ function quote_command
   (cmd, stdin, stdout, stderr, args){
     /*<<filename.ml:120:4>>*/ if(stderr){
      /*<<filename.ml:123:48>>*/  /*<<filename.ml:123:48>>*/ var
      f = stderr[1];
      /*<<filename.ml:123:51>>*/ if
      ( /*<<filename.ml:123:51>>*/ caml_equal(stderr, stdout))
      var _aq_ = cst_2_1;
     else
       /*<<filename.ml:125:61>>*/ var
        /*<<filename.ml:125:61>>*/ _aA_ = quote(f),
       _aq_ =  /*<<filename.ml:125:53>>*/ caml_call2(Stdlib[28], cst_2, _aA_);
     var _ar_ = _aq_;
    }
    else
     var _ar_ = cst$4;
    if(stdout)
      /*<<filename.ml:122:48>>*/ var
       /*<<filename.ml:122:48>>*/ f$0 = stdout[1],
       /*<<filename.ml:122:55>>*/ _as_ = quote(f$0),
      _at_ =  /*<<filename.ml:122:48>>*/ caml_call2(Stdlib[28], cst, _as_);
    else
     var _at_ = cst$3;
     /*<<filename.ml:122:6>>*/  /*<<filename.ml:122:6>>*/ var
     _au_ =  /*<<filename.ml:122:6>>*/ caml_call2(Stdlib[28], _at_, _ar_);
     /*<<filename.ml:122:6>>*/ if(stdin)
      /*<<filename.ml:121:48>>*/ var
       /*<<filename.ml:121:48>>*/ f$1 = stdin[1],
       /*<<filename.ml:121:55>>*/ _av_ = quote(f$1),
      _aw_ =  /*<<filename.ml:121:48>>*/ caml_call2(Stdlib[28], cst$0, _av_);
    else
     var _aw_ = cst$2;
     /*<<filename.ml:121:6>>*/ var
      /*<<filename.ml:121:6>>*/ _ax_ =
        /*<<filename.ml:121:6>>*/ caml_call2(Stdlib[28], _aw_, _au_),
      /*<<filename.ml:120:22>>*/ _ay_ =
        /*<<filename.ml:120:22>>*/ caml_call2
        (Stdlib_List[19], quote, [0, cmd, args]),
      /*<<filename.ml:120:4>>*/ _az_ =
        /*<<filename.ml:120:4>>*/ caml_call2(Stdlib_String[6], cst$1, _ay_);
     /*<<filename.ml:120:4>>*/ return  /*<<filename.ml:120:4>>*/ caml_call2
            (Stdlib[28], _az_, _ax_);
    /*<<filename.ml:125:69>>*/ }
    /*<<filename.ml:126:17>>*/ function basename(_ap_){
     /*<<?>>*/ return generic_basename(is_dir_sep, current_dir_name, _ap_);
   }
    /*<<filename.ml:127:16>>*/ function dirname(_ao_){
     /*<<?>>*/ return generic_dirname(is_dir_sep, current_dir_name, _ao_);
   }
    /*<<filename.ml:127:16>>*/  /*<<filename.ml:127:16>>*/ var
    Unix =
      [0,
       null$0,
       current_dir_name,
       parent_dir_name,
       dir_sep,
       is_dir_sep,
       is_relative,
       is_implicit,
       check_suffix,
       chop_suffix_opt,
       temp_dir_name,
       quote,
       quote_command,
       basename,
       dirname];
    /*<<filename.ml:127:16>>*/ function is_dir_sep$0(s, i){
     /*<<filename.ml:135:31>>*/ var
      /*<<filename.ml:135:31>>*/ c =
        /*<<filename.ml:135:31>>*/ caml_string_get(s, i),
      /*<<filename.ml:135:31>>*/ _al_ = 47 === c ? 1 : 0;
     /*<<filename.ml:135:31>>*/ if(_al_)
     var _am_ = _al_;
    else
     var _an_ = 92 === c ? 1 : 0, _am_ = _an_ || (58 === c ? 1 : 0);
    return _am_;
    /*<<filename.ml:135:70>>*/ }
    /*<<filename.ml:127:16>>*/ function is_relative$0(n){
     /*<<filename.ml:137:4>>*/ var
      /*<<filename.ml:137:4>>*/ _af_ =
        /*<<filename.ml:137:4>>*/ caml_ml_string_length(n) < 1 ? 1 : 0,
      /*<<filename.ml:137:4>>*/ _ag_ =
       _af_
       || (47 !==  /*<<filename.ml:137:28>>*/ caml_string_get(n, 0) ? 1 : 0);
    if(_ag_){
     var
      _ah_ = caml_ml_string_length(n) < 1 ? 1 : 0,
      _ai_ =
        _ah_
        || (92 !==  /*<<filename.ml:138:31>>*/ caml_string_get(n, 0) ? 1 : 0);
     if(_ai_)
      var
       _aj_ = caml_ml_string_length(n) < 2 ? 1 : 0,
       _ak_ =
         _aj_
         || (58 !==  /*<<filename.ml:139:31>>*/ caml_string_get(n, 1) ? 1 : 0);
     else
      var _ak_ = _ai_;
    }
    else
     var _ak_ = _ag_;
    return _ak_;
    /*<<filename.ml:139:44>>*/ }
    /*<<filename.ml:127:16>>*/ function is_implicit$0(n){
     /*<<filename.ml:141:4>>*/  /*<<filename.ml:141:4>>*/ var
     _Y_ = is_relative$0(n);
     /*<<filename.ml:141:4>>*/ if(_Y_){
     var
      _Z_ = caml_ml_string_length(n) < 2 ? 1 : 0,
      ___ =
        _Z_
        ||
          /*<<filename.ml:142:47>>*/ caml_string_notequal
          ( /*<<filename.ml:142:31>>*/ caml_call3(Stdlib_String[15], n, 0, 2),
           cst$27);
      /*<<filename.ml:142:55>>*/ if(___){
      var
       _$_ = caml_ml_string_length(n) < 2 ? 1 : 0,
       _aa_ =
         _$_
         ||
           /*<<filename.ml:143:47>>*/ caml_string_notequal
           ( /*<<filename.ml:143:31>>*/ caml_call3(Stdlib_String[15], n, 0, 2),
            ".\\");
       /*<<filename.ml:143:56>>*/ if(_aa_){
       var
        _ab_ = caml_ml_string_length(n) < 3 ? 1 : 0,
        _ac_ =
          _ab_
          ||
            /*<<filename.ml:144:47>>*/ caml_string_notequal
            ( /*<<filename.ml:144:31>>*/ caml_call3
              (Stdlib_String[15], n, 0, 3),
             cst$28);
        /*<<filename.ml:144:56>>*/ if(_ac_)
        var
         _ad_ = caml_ml_string_length(n) < 3 ? 1 : 0,
         _ae_ =
           _ad_
           ||
             /*<<filename.ml:145:47>>*/ caml_string_notequal
             ( /*<<filename.ml:145:31>>*/ caml_call3
               (Stdlib_String[15], n, 0, 3),
              "..\\");
       else
        var _ae_ = _ac_;
      }
      else
       var _ae_ = _aa_;
     }
     else
      var _ae_ = ___;
    }
    else
     var _ae_ = _Y_;
     /*<<filename.ml:145:57>>*/ return _ae_;
    /*<<filename.ml:145:58>>*/ }
    /*<<filename.ml:127:16>>*/ function check_suffix$0(name, suff){
     /*<<filename.ml:147:3>>*/  /*<<filename.ml:147:3>>*/ var
     _V_ =
        /*<<filename.ml:147:3>>*/ caml_ml_string_length(suff)
        <=  /*<<filename.ml:147:3>>*/ caml_ml_string_length(name)
        ? 1
        : 0;
     /*<<filename.ml:147:3>>*/ if(_V_)
      /*<<filename.ml:148:12>>*/ var
       /*<<filename.ml:148:12>>*/ s =
         /*<<filename.ml:148:12>>*/ caml_call3
         (Stdlib_String[15],
          name,
          caml_ml_string_length(name) - caml_ml_string_length(suff) | 0,
          caml_ml_string_length(suff)),
       /*<<filename.ml:150:31>>*/ _W_ =
         /*<<filename.ml:150:31>>*/ caml_call1(Stdlib_String[26], suff),
      _X_ =
         /*<<filename.ml:150:28>>*/ caml_string_equal
         ( /*<<filename.ml:150:4>>*/ caml_call1(Stdlib_String[26], s), _W_);
    else
     var _X_ = _V_;
     /*<<filename.ml:141:4>>*/ return _X_;
    /*<<filename.ml:150:59>>*/ }
    /*<<filename.ml:127:16>>*/ function chop_suffix_opt$0(suffix, filename){
     /*<<filename.ml:153:4>>*/ var
      /*<<filename.ml:153:4>>*/ len_s =
        /*<<filename.ml:153:4>>*/ caml_ml_string_length(suffix),
      /*<<filename.ml:153:4>>*/ len_f =
        /*<<filename.ml:153:4>>*/ caml_ml_string_length(filename);
     /*<<filename.ml:153:4>>*/ if(len_s > len_f)
      /*<<filename.ml:161:6>>*/ return 0;
     /*<<filename.ml:155:14>>*/ var
      /*<<filename.ml:155:14>>*/ r =
        /*<<filename.ml:155:14>>*/ caml_call3
        (Stdlib_String[15], filename, len_f - len_s | 0, len_s),
      /*<<filename.ml:156:36>>*/ _U_ =
        /*<<filename.ml:156:36>>*/ caml_call1(Stdlib_String[26], suffix);
     /*<<filename.ml:156:33>>*/ return  /*<<filename.ml:156:33>>*/ caml_string_equal
             ( /*<<filename.ml:156:9>>*/ caml_call1(Stdlib_String[26], r),
              _U_)
            ? [0,
               /*<<filename.ml:157:13>>*/ caml_call3
               (Stdlib_String[15], filename, 0, len_f - len_s | 0)]
            : 0;
    /*<<filename.ml:161:10>>*/ }
   try{
     /*<<filename.ml:165:8>>*/ var
      /*<<filename.ml:165:8>>*/ _k_ =
        /*<<filename.ml:165:8>>*/ caml_sys_getenv("TEMP"),
     temp_dir_name$0 = _k_;
   }
   catch(_T_){
    var _b_ = caml_wrap_exception(_T_);
    if(_b_ !== Stdlib[8]) throw caml_maybe_attach_backtrace(_b_, 0);
    var temp_dir_name$0 = cst$5;
   }
   function quote$0(s){
     /*<<filename.ml:167:4>>*/ var
      /*<<filename.ml:167:4>>*/ l =
        /*<<filename.ml:167:4>>*/ caml_ml_string_length(s),
      /*<<filename.ml:168:12>>*/ b =
        /*<<filename.ml:168:12>>*/ caml_call1(Stdlib_Buffer[1], l + 20 | 0);
     /*<<filename.ml:169:4>>*/  /*<<filename.ml:169:4>>*/ caml_call2
     (Stdlib_Buffer[12], b, 34);
     /*<<filename.ml:169:4>>*/ function add_bs(n){
      /*<<filename.ml:186:19>>*/  /*<<filename.ml:186:19>>*/ var _R_ = 1;
      /*<<filename.ml:186:19>>*/ if(n >= 1){
      var j = _R_;
       /*<<filename.ml:186:38>>*/ for(;;){
        /*<<filename.ml:186:38>>*/  /*<<filename.ml:186:38>>*/ caml_call2
        (Stdlib_Buffer[12], b, 92);
        /*<<filename.ml:186:38>>*/  /*<<filename.ml:186:38>>*/ var
        _S_ = j + 1 | 0;
        /*<<filename.ml:186:38>>*/ if(n !== j){var j = _S_; continue;}
       break;
      }
     }
      /*<<filename.ml:167:4>>*/ return 0;
     /*<<filename.ml:186:66>>*/ }
     /*<<filename.ml:169:4>>*/ function loop$0(counter, i){
     var i$0 = i;
      /*<<filename.ml:171:6>>*/ for(;;){
       /*<<filename.ml:171:6>>*/ if(i$0 === l)
        /*<<filename.ml:171:20>>*/ return  /*<<filename.ml:171:20>>*/ caml_call2
               (Stdlib_Buffer[12], b, 34);
       /*<<filename.ml:172:12>>*/  /*<<filename.ml:172:12>>*/ var
       c =  /*<<filename.ml:172:12>>*/ caml_string_get(s, i$0);
       /*<<filename.ml:172:12>>*/ if(34 === c){
        /*<<filename.ml:173:16>>*/  /*<<filename.ml:173:16>>*/ var _P_ = 0;
        /*<<filename.ml:173:16>>*/ if(counter >= 50)
        return caml_trampoline_return(loop_bs, [0, _P_, i$0]);
       var counter$1 = counter + 1 | 0;
       return loop_bs(counter$1, _P_, i$0);
      }
      if(92 !== c){
        /*<<filename.ml:175:16>>*/  /*<<filename.ml:175:16>>*/ caml_call2
        (Stdlib_Buffer[12], b, c);
        /*<<filename.ml:175:16>>*/ var
         /*<<filename.ml:175:16>>*/ i$1 = i$0 + 1 | 0,
        i$0 = i$1;
       continue;
      }
       /*<<filename.ml:174:16>>*/  /*<<filename.ml:174:16>>*/ var _Q_ = 0;
       /*<<filename.ml:174:16>>*/ if(counter >= 50)
       return caml_trampoline_return(loop_bs, [0, _Q_, i$0]);
      var counter$0 = counter + 1 | 0;
      return loop_bs(counter$0, _Q_, i$0);
     }
     /*<<filename.ml:175:48>>*/ }
     /*<<filename.ml:169:4>>*/ function loop_bs(counter, n, i){
     var n$0 = n, i$0 = i;
      /*<<filename.ml:177:6>>*/ for(;;){
       /*<<filename.ml:177:6>>*/ if(i$0 === l){
        /*<<filename.ml:178:8>>*/  /*<<filename.ml:178:8>>*/ caml_call2
        (Stdlib_Buffer[12], b, 34);
        /*<<filename.ml:178:8>>*/ return add_bs(n$0);
      }
       /*<<filename.ml:181:14>>*/  /*<<filename.ml:181:14>>*/ var
       match =  /*<<filename.ml:181:14>>*/ caml_string_get(s, i$0);
       /*<<filename.ml:181:14>>*/ if(34 === match){
        /*<<filename.ml:182:18>>*/ add_bs((2 * n$0 | 0) + 1 | 0);
        /*<<filename.ml:182:34>>*/  /*<<filename.ml:182:34>>*/ caml_call2
        (Stdlib_Buffer[12], b, 34);
        /*<<filename.ml:182:34>>*/  /*<<filename.ml:182:34>>*/ var
        _O_ = i$0 + 1 | 0;
        /*<<filename.ml:182:34>>*/ if(counter >= 50)
        return caml_trampoline_return(loop$0, [0, _O_]);
       var counter$1 = counter + 1 | 0;
       return loop$0(counter$1, _O_);
      }
      if(92 === match){
        /*<<filename.ml:183:18>>*/ var
         /*<<filename.ml:183:18>>*/ i$1 = i$0 + 1 | 0,
         /*<<filename.ml:183:18>>*/ n$1 = n$0 + 1 | 0,
        n$0 = n$1,
        i$0 = i$1;
       continue;
      }
       /*<<filename.ml:184:18>>*/ add_bs(n$0);
       /*<<filename.ml:184:18>>*/ if(counter >= 50)
       return caml_trampoline_return(loop$0, [0, i$0]);
      var counter$0 = counter + 1 | 0;
      return loop$0(counter$0, i$0);
     }
     /*<<filename.ml:185:9>>*/ }
     /*<<filename.ml:169:4>>*/ function loop(i){
      /*<<?>>*/ return caml_trampoline(loop$0(0, i));
    }
     /*<<filename.ml:188:4>>*/ loop(0);
     /*<<filename.ml:188:4>>*/ return  /*<<filename.ml:188:4>>*/ caml_call1
            (Stdlib_Buffer[2], b);
    /*<<filename.ml:189:21>>*/ }
   function quote_cmd_filename(f){
     /*<<filename.ml:222:33>>*/ if
     (!
       /*<<filename.ml:222:7>>*/ caml_call2(Stdlib_String[14], f, 34)
      && !  /*<<filename.ml:222:33>>*/ caml_call2(Stdlib_String[14], f, 37)){
      /*<<filename.ml:224:12>>*/ if
      (!  /*<<filename.ml:224:12>>*/ caml_call2(Stdlib_String[14], f, 32))
       /*<<filename.ml:227:6>>*/ return f;
      /*<<filename.ml:225:13>>*/  /*<<filename.ml:225:13>>*/ var
      _N_ =  /*<<filename.ml:225:13>>*/ caml_call2(Stdlib[28], f, cst$6);
      /*<<filename.ml:225:13>>*/ return  /*<<filename.ml:225:13>>*/ caml_call2
             (Stdlib[28], cst$7, _N_);
    }
     /*<<filename.ml:223:15>>*/  /*<<filename.ml:223:15>>*/ var
     _M_ =
        /*<<filename.ml:223:15>>*/ caml_call2
        (Stdlib[28], cst_Filename_quote_command_bad, f);
     /*<<filename.ml:223:15>>*/ return  /*<<filename.ml:223:15>>*/ caml_call1
            (Stdlib[2], _M_);
    /*<<filename.ml:227:7>>*/ }
   function quote_command$0(cmd, stdin, stdout, stderr, args){
     /*<<filename.ml:232:4>>*/ if(stderr){
      /*<<filename.ml:240:40>>*/  /*<<filename.ml:240:40>>*/ var
      f = stderr[1];
      /*<<filename.ml:240:43>>*/ if
      ( /*<<filename.ml:240:43>>*/ caml_equal(stderr, stdout))
      var _y_ = cst_2_1$0;
     else
       /*<<filename.ml:242:53>>*/ var
        /*<<filename.ml:242:53>>*/ _K_ = quote_cmd_filename(f),
       _y_ =  /*<<filename.ml:242:45>>*/ caml_call2(Stdlib[28], cst_2$0, _K_);
     var _z_ = _y_;
    }
    else
     var _z_ = cst$16;
    var _A_ = [0, _z_, _c_];
    if(stdout)
      /*<<filename.ml:238:48>>*/ var
       /*<<filename.ml:238:48>>*/ f$0 = stdout[1],
       /*<<filename.ml:238:55>>*/ _B_ = quote_cmd_filename(f$0),
      _C_ =  /*<<filename.ml:238:48>>*/ caml_call2(Stdlib[28], cst$8, _B_);
    else
     var _C_ = cst$15;
    var _D_ = [0, _C_, _A_];
    if(stdin)
      /*<<filename.ml:237:48>>*/ var
       /*<<filename.ml:237:48>>*/ f$1 = stdin[1],
       /*<<filename.ml:237:55>>*/ _E_ = quote_cmd_filename(f$1),
      _F_ =  /*<<filename.ml:237:48>>*/ caml_call2(Stdlib[28], cst$9, _E_);
    else
     var _F_ = cst$14;
     /*<<filename.ml:236:35>>*/ var
      /*<<filename.ml:236:35>>*/ _H_ =
        /*<<filename.ml:236:35>>*/ caml_call2(Stdlib_List[19], quote$0, args),
      /*<<filename.ml:236:16>>*/ s =
        /*<<filename.ml:236:16>>*/ caml_call2(Stdlib_String[6], cst$10, _H_),
      /*<<filename.ml:211:12>>*/ b =
        /*<<filename.ml:211:12>>*/ caml_call1
        (Stdlib_Buffer[1],
          /*<<filename.ml:211:4>>*/ caml_ml_string_length(s) + 20 | 0),
     _G_ = [0, _F_, _D_];
     /*<<filename.ml:211:12>>*/ function _x_(c){
     var switch$0 = 0;
      /*<<filename.ml:214:8>>*/ if(62 <= c){
      var _L_ = c - 63 | 0;
      if(60 < _L_ >>> 0){
       if(62 > _L_) switch$0 = 1;
      }
      else if(31 === _L_) switch$0 = 1;
     }
     else
      if(42 <= c){
       if(60 === c) switch$0 = 1;
      }
      else if(33 <= c)
       switch(c - 33 | 0){case 2:case 3:case 6: break;default: switch$0 = 1;}
     return switch$0
             ? ( /*<<filename.ml:216:12>>*/ caml_call2
                (Stdlib_Buffer[12], b, 94),
                /*<<filename.ml:216:12>>*/ caml_call2(Stdlib_Buffer[12], b, c))
             :  /*<<filename.ml:218:12>>*/ caml_call2(Stdlib_Buffer[12], b, c);
     /*<<filename.ml:218:31>>*/ }
     /*<<filename.ml:212:4>>*/  /*<<filename.ml:212:4>>*/ caml_call2
     (Stdlib_String[29], _x_, s);
     /*<<filename.ml:234:6>>*/ var
     _I_ =
       [0,
        cst$11,
        [0,  /*<<filename.ml:212:4>>*/ caml_call1(Stdlib_Buffer[2], b), _G_]],
      /*<<filename.ml:234:6>>*/ _J_ =
       [0, cst$12, [0, quote_cmd_filename(cmd), _I_]];
     /*<<filename.ml:234:6>>*/ return  /*<<filename.ml:234:6>>*/ caml_call2
            (Stdlib_String[6], cst$13, _J_);
    /*<<filename.ml:244:5>>*/ }
   function drive_and_path(s){
     /*<<filename.ml:246:4>>*/  /*<<filename.ml:246:4>>*/ var
     _t_ = 2 <=  /*<<filename.ml:246:4>>*/ caml_ml_string_length(s) ? 1 : 0;
     /*<<filename.ml:246:4>>*/ if(_t_){
      /*<<filename.ml:250:38>>*/ var
       /*<<filename.ml:250:38>>*/ param =
         /*<<filename.ml:250:38>>*/ caml_string_get(s, 0),
      switch$0 = 0;
      /*<<filename.ml:246:20>>*/ if(91 <= param){
      if(25 >= param - 97 >>> 0) switch$0 = 1;
     }
     else if(65 <= param) switch$0 = 1;
     var
      _u_ = switch$0 ? 1 : 0,
      _v_ =
        _u_
         ? 58 ===  /*<<filename.ml:250:47>>*/ caml_string_get(s, 1) ? 1 : 0
         : _u_;
    }
    else
     var _v_ = _t_;
    if(! _v_)  /*<<filename.ml:254:9>>*/ return [0, cst$17, s];
     /*<<filename.ml:253:28>>*/  /*<<filename.ml:253:28>>*/ var
     _w_ =
        /*<<filename.ml:253:28>>*/ caml_call3
        (Stdlib_String[15],
         s,
         2,
          /*<<filename.ml:253:9>>*/ caml_ml_string_length(s) - 2 | 0);
     /*<<filename.ml:253:10>>*/ return [0,
             /*<<filename.ml:253:10>>*/ caml_call3(Stdlib_String[15], s, 0, 2),
            _w_];
    /*<<filename.ml:254:16>>*/ }
   function dirname$0(s){
     /*<<filename.ml:256:24>>*/ var
      /*<<filename.ml:256:24>>*/ match = drive_and_path(s),
      /*<<filename.ml:256:24>>*/ path = match[2],
      /*<<filename.ml:256:24>>*/ drive = match[1],
      /*<<filename.ml:257:14>>*/ dir =
       generic_dirname(is_dir_sep$0, current_dir_name$0, path);
     /*<<filename.ml:257:14>>*/ return  /*<<filename.ml:257:14>>*/ caml_call2
            (Stdlib[28], drive, dir);
    /*<<filename.ml:258:15>>*/ }
   function basename$0(s){
     /*<<filename.ml:260:25>>*/  /*<<filename.ml:260:25>>*/ var
     path = drive_and_path(s)[2];
     /*<<filename.ml:260:25>>*/ return generic_basename
            (is_dir_sep$0, current_dir_name$0, path);
    /*<<filename.ml:261:53>>*/ }
   var
    Win32 =
      [0,
       null$1,
       current_dir_name$0,
       parent_dir_name$0,
       dir_sep$0,
       is_dir_sep$0,
       is_relative$0,
       is_implicit$0,
       check_suffix$0,
       chop_suffix_opt$0,
       temp_dir_name$0,
       quote$0,
       quote_command$0,
       basename$0,
       dirname$0];
    /*<<filename.ml:277:17>>*/ function basename$1(_s_){
     /*<<?>>*/ return generic_basename(is_dir_sep$0, current_dir_name$1, _s_);
   }
    /*<<filename.ml:278:16>>*/ function dirname$1(_r_){
     /*<<?>>*/ return generic_dirname(is_dir_sep$0, current_dir_name$1, _r_);
   }
    /*<<filename.ml:278:16>>*/ var
     /*<<filename.ml:278:16>>*/ Cygwin =
      [0,
       null$2,
       current_dir_name$1,
       parent_dir_name$1,
       dir_sep$1,
       is_dir_sep$0,
       is_relative$0,
       is_implicit$0,
       check_suffix$0,
       chop_suffix_opt$0,
       temp_dir_name,
       quote,
       quote_command,
       basename$1,
       dirname$1],
     /*<<filename.ml:278:16>>*/ _d_ = Stdlib_Sys[4],
     /*<<filename.ml:278:16>>*/ Unix$0 =
       /*<<filename.ml:278:16>>*/ caml_string_notequal(_d_, "Cygwin")
       ? caml_string_notequal(_d_, "Win32") ? Unix : Win32
       : Cygwin,
    null$3 = Unix$0[1],
    current_dir_name$2 = Unix$0[2],
    parent_dir_name$2 = Unix$0[3],
    dir_sep$2 = Unix$0[4],
    _e_ = Unix$0[5],
    is_relative$1 = Unix$0[6],
    is_implicit$1 = Unix$0[7],
    check_suffix$1 = Unix$0[8],
    chop_suffix_opt$1 = Unix$0[9],
    temp_dir_name$1 = Unix$0[10],
    quote$1 = Unix$0[11],
    quote_command$1 = Unix$0[12],
    basename$2 = Unix$0[13],
    dirname$2 = Unix$0[14];
   function concat(dirname, filename){
     /*<<filename.ml:290:2>>*/  /*<<filename.ml:290:2>>*/ var
     l =  /*<<filename.ml:290:2>>*/ caml_ml_string_length(dirname);
     /*<<filename.ml:291:14>>*/ if(0 !== l && ! _e_(dirname, l - 1 | 0)){
      /*<<filename.ml:293:17>>*/  /*<<filename.ml:293:17>>*/ var
      _q_ =
         /*<<filename.ml:293:17>>*/ caml_call2
         (Stdlib[28], dir_sep$2, filename);
      /*<<filename.ml:293:17>>*/ return  /*<<filename.ml:293:17>>*/ caml_call2
             (Stdlib[28], dirname, _q_);
    }
     /*<<filename.ml:292:7>>*/ return  /*<<filename.ml:292:7>>*/ caml_call2
            (Stdlib[28], dirname, filename);
    /*<<filename.ml:293:35>>*/ }
   function chop_suffix(name, suff){
     /*<<filename.ml:296:5>>*/ return check_suffix$1(name, suff)
            ?  /*<<filename.ml:297:7>>*/ caml_call3
              (Stdlib_String[15],
               name,
               0,
                /*<<filename.ml:297:7>>*/ caml_ml_string_length(name)
               -  /*<<filename.ml:297:7>>*/ caml_ml_string_length(suff)
               | 0)
            :  /*<<filename.ml:298:7>>*/ caml_call1
              (Stdlib[1], cst_Filename_chop_suffix);
    /*<<filename.ml:298:41>>*/ }
   function extension_len(name){
     /*<<filename.ml:301:2>>*/ var
      /*<<filename.ml:301:2>>*/ i$3 =
        /*<<filename.ml:301:2>>*/ caml_ml_string_length(name) - 1 | 0,
     i0 = i$3;
     /*<<filename.ml:307:4>>*/ for(;;){
      /*<<filename.ml:307:16>>*/ if(0 <= i0 && ! _e_(name, i0)){
       /*<<filename.ml:308:12>>*/ if
       (46 !==  /*<<filename.ml:308:12>>*/ caml_string_get(name, i0)){
        /*<<filename.ml:309:9>>*/ var
         /*<<filename.ml:309:9>>*/ i$2 = i0 - 1 | 0,
        i0 = i$2;
       continue;
      }
       /*<<filename.ml:308:32>>*/ var
        /*<<filename.ml:308:32>>*/ i$1 = i0 - 1 | 0,
       i = i$1;
       /*<<filename.ml:302:4>>*/ for(;;){
        /*<<filename.ml:302:16>>*/ if(0 <= i && ! _e_(name, i)){
         /*<<filename.ml:303:12>>*/ if
         (46 !==  /*<<filename.ml:303:12>>*/ caml_string_get(name, i))
          /*<<filename.ml:304:9>>*/ return  /*<<filename.ml:304:9>>*/ caml_ml_string_length
                 (name)
                - i0
                | 0;
         /*<<filename.ml:303:32>>*/ var
          /*<<filename.ml:303:32>>*/ i$0 = i - 1 | 0,
         i = i$0;
        continue;
       }
        /*<<filename.ml:302:39>>*/ return 0;
      }
     }
      /*<<filename.ml:307:39>>*/ return 0;
    }
    /*<<filename.ml:311:37>>*/ }
   function extension(name){
     /*<<filename.ml:314:10>>*/  /*<<filename.ml:314:10>>*/ var
     l = extension_len(name);
     /*<<filename.ml:314:10>>*/ return 0 === l
            ? cst$18
            :  /*<<filename.ml:315:24>>*/ caml_call3
              (Stdlib_String[15],
               name,
                /*<<filename.ml:315:24>>*/ caml_ml_string_length(name) - l | 0,
               l);
    /*<<filename.ml:315:66>>*/ }
   function chop_extension(name){
     /*<<filename.ml:318:10>>*/  /*<<filename.ml:318:10>>*/ var
     l = extension_len(name);
     /*<<filename.ml:318:10>>*/ return 0 === l
            ?  /*<<filename.ml:319:16>>*/ caml_call1
              (Stdlib[1], cst_Filename_chop_extension)
            :  /*<<filename.ml:320:7>>*/ caml_call3
              (Stdlib_String[15],
               name,
               0,
                /*<<filename.ml:320:7>>*/ caml_ml_string_length(name) - l | 0);
    /*<<filename.ml:320:49>>*/ }
   function remove_extension(name){
     /*<<filename.ml:323:10>>*/  /*<<filename.ml:323:10>>*/ var
     l = extension_len(name);
     /*<<filename.ml:323:10>>*/ return 0 === l
            ? name
            :  /*<<filename.ml:324:26>>*/ caml_call3
              (Stdlib_String[15],
               name,
               0,
                /*<<filename.ml:324:26>>*/ caml_ml_string_length(name) - l | 0);
    /*<<filename.ml:324:68>>*/ }
    /*<<filename.ml:330:2>>*/  /*<<filename.ml:330:2>>*/ var
    prng_key =
       /*<<filename.ml:330:2>>*/ caml_call2
       (Stdlib_Domain[10][1], 0, Stdlib_Random[15][2]);
    /*<<filename.ml:330:2>>*/ function temp_file_name
   (temp_dir, prefix, suffix){
     /*<<filename.ml:333:21>>*/ var
      /*<<filename.ml:333:21>>*/ random_state =
        /*<<filename.ml:333:21>>*/ caml_call1(Stdlib_Domain[10][2], prng_key),
      /*<<filename.ml:334:12>>*/ rnd =
        /*<<filename.ml:334:12>>*/ caml_call1
        (Stdlib_Random[15][4], random_state)
       & 16777215;
     /*<<filename.ml:335:18>>*/ return concat
            (temp_dir,
              /*<<filename.ml:335:18>>*/ caml_call4
              (Stdlib_Printf[4], _f_, prefix, rnd, suffix));
    /*<<filename.ml:335:63>>*/ }
    /*<<filename.ml:330:2>>*/ function _g_(param){
     /*<<filename.ml:338:58>>*/ return temp_dir_name$1;
    /*<<filename.ml:338:71>>*/ }
    /*<<filename.ml:330:2>>*/ var
     /*<<filename.ml:330:2>>*/ _h_ =
      [0,
       function(_p_){
         /*<<filename.ml:338:58>>*/ return _p_;
        /*<<filename.ml:338:71>>*/ }],
     /*<<filename.ml:338:2>>*/ current_temp_dir_name =
       /*<<filename.ml:338:2>>*/ caml_call2(Stdlib_Domain[10][1], _h_, _g_);
    /*<<filename.ml:338:2>>*/ function set_temp_dir_name(s){
     /*<<filename.ml:340:26>>*/ return  /*<<filename.ml:340:26>>*/ caml_call2
            (Stdlib_Domain[10][3], current_temp_dir_name, s);
    /*<<filename.ml:340:64>>*/ }
    /*<<filename.ml:338:2>>*/ function get_temp_dir_name(param){
     /*<<filename.ml:341:27>>*/ return  /*<<filename.ml:341:27>>*/ caml_call1
            (Stdlib_Domain[10][2], current_temp_dir_name);
    /*<<filename.ml:341:63>>*/ }
    /*<<filename.ml:338:2>>*/ function temp_file(opt, prefix, suffix){
     /*<<filename.ml:344:2>>*/ if(opt)
      /*<<filename.ml:343:27>>*/ var
       /*<<filename.ml:343:27>>*/ sth = opt[1],
      temp_dir = sth;
    else
     var
      temp_dir =
         /*<<filename.ml:343:27>>*/ caml_call1
         (Stdlib_Domain[10][2], current_temp_dir_name);
    var counter = 0;
     /*<<filename.ml:345:4>>*/ for(;;){
      /*<<filename.ml:345:15>>*/  /*<<filename.ml:345:15>>*/ var
      name = temp_file_name(temp_dir, prefix, suffix);
     try{
       /*<<filename.ml:347:75>>*/  /*<<filename.ml:347:75>>*/ runtime.caml_sys_close
       ( /*<<filename.ml:347:16>>*/ runtime.caml_sys_open(name, _i_, 384));
      return name;
     }
     catch(e$0){
      var e = caml_wrap_exception(e$0);
      if(e[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(e, 0);
       /*<<filename.ml:350:6>>*/ if(1000 <= counter)
        /*<<filename.ml:350:30>>*/ throw  /*<<filename.ml:350:30>>*/ caml_maybe_attach_backtrace
              (e, 0);
       /*<<filename.ml:350:43>>*/ var
        /*<<filename.ml:350:43>>*/ counter$0 = counter + 1 | 0,
       counter = counter$0;
      continue;
     }
    }
    /*<<filename.ml:351:15>>*/ }
    /*<<filename.ml:338:2>>*/ function open_temp_file
   (opt, _n_, _m_, prefix, suffix){
     /*<<filename.ml:356:2>>*/ if(opt)
      /*<<filename.ml:353:28>>*/ var
       /*<<filename.ml:353:28>>*/ sth = opt[1],
      mode = sth;
    else
     var mode = _j_;
     /*<<filename.ml:356:2>>*/ if(_n_)
      /*<<filename.ml:353:51>>*/ var
       /*<<filename.ml:353:51>>*/ sth$0 = _n_[1],
      perms = sth$0;
    else
     var perms = 384;
     /*<<filename.ml:356:2>>*/ if(_m_)
      /*<<filename.ml:354:17>>*/ var
       /*<<filename.ml:354:17>>*/ sth$1 = _m_[1],
      temp_dir = sth$1;
    else
     var
      temp_dir =
         /*<<filename.ml:354:17>>*/ caml_call1
         (Stdlib_Domain[10][2], current_temp_dir_name);
    var counter = 0;
     /*<<filename.ml:357:4>>*/ for(;;){
      /*<<filename.ml:357:15>>*/  /*<<filename.ml:357:15>>*/ var
      name = temp_file_name(temp_dir, prefix, suffix);
     try{
       /*<<filename.ml:360:7>>*/  /*<<filename.ml:360:7>>*/ var
       _o_ =
         [0,
          name,
           /*<<filename.ml:360:7>>*/ caml_call3
           (Stdlib[62], [0, 1, [0, 3, [0, 5, mode]]], perms, name)];
      return _o_;
     }
     catch(e$0){
      var e = caml_wrap_exception(e$0);
      if(e[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(e, 0);
       /*<<filename.ml:362:6>>*/ if(1000 <= counter)
        /*<<filename.ml:362:30>>*/ throw  /*<<filename.ml:362:30>>*/ caml_maybe_attach_backtrace
              (e, 0);
       /*<<filename.ml:362:43>>*/ var
        /*<<filename.ml:362:43>>*/ counter$0 = counter + 1 | 0,
       counter = counter$0;
      continue;
     }
    }
    /*<<filename.ml:363:15>>*/ }
    /*<<filename.ml:338:2>>*/  /*<<filename.ml:338:2>>*/ var
    Stdlib_Filename =
      [0,
       current_dir_name$2,
       parent_dir_name$2,
       dir_sep$2,
       concat,
       is_relative$1,
       is_implicit$1,
       check_suffix$1,
       chop_suffix,
       chop_suffix_opt$1,
       extension,
       remove_extension,
       chop_extension,
       basename$2,
       dirname$2,
       null$3,
       temp_file,
       open_temp_file,
       get_temp_dir_name,
       set_temp_dir_name,
       quote$1,
       quote_command$1];
    /*<<filename.ml:338:2>>*/  /*<<filename.ml:338:2>>*/ runtime.caml_register_global
    (65, Stdlib_Filename, "Stdlib__Filename");
    /*<<filename.ml:338:2>>*/ return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Complex
//# unitInfo: Requires: Stdlib, Stdlib__Float
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    zero = [254, 0., 0.],
    one = [254, 1., 0.],
    i = [254, 0., 1.],
    _a_ = [254, 0., 0.];
   function add(x, y){
     /*<<complex.ml:24:21>>*/ return [254, x[1] + y[1], x[2] + y[2]];
    /*<<complex.ml:24:54>>*/ }
   function sub(x, y){
     /*<<complex.ml:26:21>>*/ return [254, x[1] - y[1], x[2] - y[2]];
    /*<<complex.ml:26:54>>*/ }
   function neg(x){
     /*<<complex.ml:28:22>>*/ return [254, - x[1], - x[2]];
    /*<<complex.ml:28:42>>*/ }
   function conj(x){
     /*<<complex.ml:30:34>>*/ return [254, x[1], - x[2]];
    /*<<complex.ml:30:40>>*/ }
   function mul(x, y){
     /*<<complex.ml:32:33>>*/ return [254,
            x[1] * y[1] - x[2] * y[2],
            x[1] * y[2] + x[2] * y[1]];
    /*<<complex.ml:33:51>>*/ }
   function div(x, y){
     /*<<complex.ml:36:15>>*/ if
     ( /*<<complex.ml:36:33>>*/ Math.abs(y[2])
      <=  /*<<complex.ml:36:15>>*/ Math.abs(y[1])){
      /*<<complex.ml:37:12>>*/ var
       /*<<complex.ml:37:12>>*/ r = y[2] / y[1],
       /*<<complex.ml:38:12>>*/ d = y[1] + r * y[2];
      /*<<complex.ml:39:30>>*/ return [254,
             (x[1] + r * x[2]) / d,
             (x[2] - r * x[1]) / d];
    }
     /*<<complex.ml:42:12>>*/ var
      /*<<complex.ml:42:12>>*/ r$0 = y[1] / y[2],
      /*<<complex.ml:43:12>>*/ d$0 = y[2] + r$0 * y[1];
     /*<<complex.ml:44:30>>*/ return [254,
            (r$0 * x[1] + x[2]) / d$0,
            (r$0 * x[2] - x[1]) / d$0];
    /*<<complex.ml:45:37>>*/ }
   function inv(x){
     /*<<complex.ml:47:12>>*/ return div(one, x);
    /*<<complex.ml:47:21>>*/ }
   function norm2(x){
     /*<<complex.ml:49:26>>*/ return x[1] * x[1] + x[2] * x[2];
    /*<<complex.ml:49:42>>*/ }
   function norm(x){
     /*<<complex.ml:51:25>>*/ return  /*<<complex.ml:51:25>>*/ runtime.caml_hypot_float
            (x[1], x[2]);
    /*<<complex.ml:51:34>>*/ }
   function arg(x){
     /*<<complex.ml:53:18>>*/ return  /*<<complex.ml:53:18>>*/ Math.atan2
            (x[2], x[1]);
    /*<<complex.ml:53:27>>*/ }
   function polar(n, a){
     /*<<complex.ml:55:28>>*/ return [254,
             /*<<complex.ml:55:23>>*/ Math.cos(a) * n,
             /*<<complex.ml:55:40>>*/ Math.sin(a) * n];
    /*<<complex.ml:55:52>>*/ }
   function sqrt(x){
     /*<<?>>*/ if(x[1] == 0. && x[2] == 0.)
      /*<<complex.ml:58:35>>*/ return _a_;
     /*<<complex.ml:60:22>>*/ var
      /*<<complex.ml:60:22>>*/ r =  /*<<complex.ml:60:22>>*/ Math.abs(x[1]),
      /*<<complex.ml:60:45>>*/ i =  /*<<complex.ml:60:45>>*/ Math.abs(x[2]);
     /*<<complex.ml:60:45>>*/ if(i <= r)
      /*<<complex.ml:63:16>>*/ var
       /*<<complex.ml:63:16>>*/ q = i / r,
      w =
         /*<<complex.ml:64:8>>*/ Math.sqrt(r)
        *
          /*<<complex.ml:64:60>>*/ Math.sqrt
          (0.5 * (1. +  /*<<complex.ml:64:58>>*/ Math.sqrt(1. + q * q)));
    else
      /*<<complex.ml:66:16>>*/ var
       /*<<complex.ml:66:16>>*/ q$0 = r / i,
      w =
         /*<<complex.ml:67:8>>*/ Math.sqrt(i)
        *
          /*<<complex.ml:67:58>>*/ Math.sqrt
          (0.5 * (q$0 +  /*<<complex.ml:67:56>>*/ Math.sqrt(1. + q$0 * q$0)));
     /*<<complex.ml:69:4>>*/ if(0. <= x[1])
      /*<<complex.ml:70:36>>*/ return [254, w, 0.5 * x[2] / w];
     /*<<complex.ml:71:9>>*/  /*<<complex.ml:71:9>>*/ var
     w$0 = 0. <= x[2] ? w : - w;
     /*<<complex.ml:71:24>>*/ return [254, 0.5 * i / w, w$0];
    /*<<complex.ml:72:5>>*/ }
   function exp(x){
     /*<<complex.ml:75:14>>*/  /*<<complex.ml:75:14>>*/ var
     e =  /*<<complex.ml:75:14>>*/ Math.exp(x[1]);
     /*<<complex.ml:75:29>>*/ return [254,
            e *  /*<<complex.ml:75:38>>*/ Math.cos(x[2]),
            e *  /*<<complex.ml:75:58>>*/ Math.sin(x[2])];
    /*<<complex.ml:75:64>>*/ }
   function log(x){
     /*<<complex.ml:77:44>>*/  /*<<complex.ml:77:44>>*/ var
     _b_ =  /*<<complex.ml:77:44>>*/ Math.atan2(x[2], x[1]);
     /*<<complex.ml:77:31>>*/ return [254,
             /*<<complex.ml:77:31>>*/ Math.log(norm(x)),
            _b_];
    /*<<complex.ml:77:55>>*/ }
   function pow(x, y){
     /*<<complex.ml:79:18>>*/ return exp(mul(y, log(x)));
    /*<<complex.ml:79:33>>*/ }
   var
    Stdlib_Complex =
      [0,
       zero,
       one,
       i,
       neg,
       conj,
       add,
       sub,
       mul,
       inv,
       div,
       sqrt,
       norm2,
       norm,
       arg,
       polar,
       exp,
       log,
       pow];
   runtime.caml_register_global(15, Stdlib_Complex, "Stdlib__Complex");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__ArrayLabels
//# unitInfo: Requires: Stdlib__Array
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Array = global_data.Stdlib__Array,
    init = Stdlib_Array[1],
    make_matrix = Stdlib_Array[2],
    append = Stdlib_Array[3],
    concat = Stdlib_Array[4],
    sub = Stdlib_Array[5],
    copy = Stdlib_Array[6],
    fill = Stdlib_Array[7],
    blit = Stdlib_Array[8],
    to_list = Stdlib_Array[9],
    of_list = Stdlib_Array[10],
    iter = Stdlib_Array[11],
    iteri = Stdlib_Array[12],
    map = Stdlib_Array[13],
    mapi = Stdlib_Array[14],
    fold_left = Stdlib_Array[15],
    fold_left_map = Stdlib_Array[16],
    fold_right = Stdlib_Array[17],
    iter2 = Stdlib_Array[18],
    map2 = Stdlib_Array[19],
    for_all = Stdlib_Array[20],
    exists = Stdlib_Array[21],
    for_all2 = Stdlib_Array[22],
    exists2 = Stdlib_Array[23],
    mem = Stdlib_Array[24],
    memq = Stdlib_Array[25],
    find_opt = Stdlib_Array[26],
    find_map = Stdlib_Array[27],
    split = Stdlib_Array[28],
    combine = Stdlib_Array[29],
    sort = Stdlib_Array[30],
    stable_sort = Stdlib_Array[31],
    fast_sort = Stdlib_Array[32],
    to_seq = Stdlib_Array[33],
    to_seqi = Stdlib_Array[34],
    of_seq = Stdlib_Array[35],
    Floatarray = Stdlib_Array[36],
    Stdlib_ArrayLabels =
      [0,
       init,
       make_matrix,
       append,
       concat,
       sub,
       copy,
       fill,
       blit,
       to_list,
       of_list,
       iter,
       iteri,
       map,
       mapi,
       fold_left,
       fold_left_map,
       fold_right,
       iter2,
       map2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find_opt,
       find_map,
       split,
       combine,
       sort,
       stable_sort,
       fast_sort,
       to_seq,
       to_seqi,
       of_seq,
       Floatarray];
   runtime.caml_register_global(1, Stdlib_ArrayLabels, "Stdlib__ArrayLabels");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__ListLabels
//# unitInfo: Requires: Stdlib__List
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_List = global_data.Stdlib__List,
    length = Stdlib_List[1],
    compare_lengths = Stdlib_List[2],
    compare_length_with = Stdlib_List[3],
    cons = Stdlib_List[4],
    hd = Stdlib_List[5],
    tl = Stdlib_List[6],
    nth = Stdlib_List[7],
    nth_opt = Stdlib_List[8],
    rev = Stdlib_List[9],
    init = Stdlib_List[10],
    append = Stdlib_List[11],
    rev_append = Stdlib_List[12],
    concat = Stdlib_List[13],
    flatten = Stdlib_List[14],
    equal = Stdlib_List[15],
    compare = Stdlib_List[16],
    iter = Stdlib_List[17],
    iteri = Stdlib_List[18],
    map = Stdlib_List[19],
    mapi = Stdlib_List[20],
    rev_map = Stdlib_List[21],
    filter_map = Stdlib_List[22],
    concat_map = Stdlib_List[23],
    fold_left_map = Stdlib_List[24],
    fold_left = Stdlib_List[25],
    fold_right = Stdlib_List[26],
    iter2 = Stdlib_List[27],
    map2 = Stdlib_List[28],
    rev_map2 = Stdlib_List[29],
    fold_left2 = Stdlib_List[30],
    fold_right2 = Stdlib_List[31],
    for_all = Stdlib_List[32],
    exists = Stdlib_List[33],
    for_all2 = Stdlib_List[34],
    exists2 = Stdlib_List[35],
    mem = Stdlib_List[36],
    memq = Stdlib_List[37],
    find = Stdlib_List[38],
    find_opt = Stdlib_List[39],
    find_map = Stdlib_List[40],
    filter = Stdlib_List[41],
    find_all = Stdlib_List[42],
    filteri = Stdlib_List[43],
    partition = Stdlib_List[44],
    partition_map = Stdlib_List[45],
    assoc = Stdlib_List[46],
    assoc_opt = Stdlib_List[47],
    assq = Stdlib_List[48],
    assq_opt = Stdlib_List[49],
    mem_assoc = Stdlib_List[50],
    mem_assq = Stdlib_List[51],
    remove_assoc = Stdlib_List[52],
    remove_assq = Stdlib_List[53],
    split = Stdlib_List[54],
    combine = Stdlib_List[55],
    sort = Stdlib_List[56],
    stable_sort = Stdlib_List[57],
    fast_sort = Stdlib_List[58],
    sort_uniq = Stdlib_List[59],
    merge = Stdlib_List[60],
    to_seq = Stdlib_List[61],
    of_seq = Stdlib_List[62],
    Stdlib_ListLabels =
      [0,
       length,
       compare_lengths,
       compare_length_with,
       cons,
       hd,
       tl,
       nth,
       nth_opt,
       rev,
       init,
       append,
       rev_append,
       concat,
       flatten,
       equal,
       compare,
       iter,
       iteri,
       map,
       mapi,
       rev_map,
       filter_map,
       concat_map,
       fold_left_map,
       fold_left,
       fold_right,
       iter2,
       map2,
       rev_map2,
       fold_left2,
       fold_right2,
       for_all,
       exists,
       for_all2,
       exists2,
       mem,
       memq,
       find,
       find_opt,
       find_map,
       filter,
       find_all,
       filteri,
       partition,
       partition_map,
       assoc,
       assoc_opt,
       assq,
       assq_opt,
       mem_assoc,
       mem_assq,
       remove_assoc,
       remove_assq,
       split,
       combine,
       sort,
       stable_sort,
       fast_sort,
       sort_uniq,
       merge,
       to_seq,
       of_seq];
   runtime.caml_register_global(1, Stdlib_ListLabels, "Stdlib__ListLabels");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__BytesLabels
//# unitInfo: Requires: Stdlib__Bytes
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    make = Stdlib_Bytes[1],
    init = Stdlib_Bytes[2],
    empty = Stdlib_Bytes[3],
    copy = Stdlib_Bytes[4],
    of_string = Stdlib_Bytes[5],
    to_string = Stdlib_Bytes[6],
    sub = Stdlib_Bytes[7],
    sub_string = Stdlib_Bytes[8],
    extend = Stdlib_Bytes[9],
    fill = Stdlib_Bytes[10],
    blit = Stdlib_Bytes[11],
    blit_string = Stdlib_Bytes[12],
    concat = Stdlib_Bytes[13],
    cat = Stdlib_Bytes[14],
    iter = Stdlib_Bytes[15],
    iteri = Stdlib_Bytes[16],
    map = Stdlib_Bytes[17],
    mapi = Stdlib_Bytes[18],
    fold_left = Stdlib_Bytes[19],
    fold_right = Stdlib_Bytes[20],
    for_all = Stdlib_Bytes[21],
    exists = Stdlib_Bytes[22],
    trim = Stdlib_Bytes[23],
    escaped = Stdlib_Bytes[24],
    index = Stdlib_Bytes[25],
    index_opt = Stdlib_Bytes[26],
    rindex = Stdlib_Bytes[27],
    rindex_opt = Stdlib_Bytes[28],
    index_from = Stdlib_Bytes[29],
    index_from_opt = Stdlib_Bytes[30],
    rindex_from = Stdlib_Bytes[31],
    rindex_from_opt = Stdlib_Bytes[32],
    contains = Stdlib_Bytes[33],
    contains_from = Stdlib_Bytes[34],
    rcontains_from = Stdlib_Bytes[35],
    uppercase_ascii = Stdlib_Bytes[36],
    lowercase_ascii = Stdlib_Bytes[37],
    capitalize_ascii = Stdlib_Bytes[38],
    uncapitalize_ascii = Stdlib_Bytes[39],
    compare = Stdlib_Bytes[40],
    equal = Stdlib_Bytes[41],
    starts_with = Stdlib_Bytes[42],
    ends_with = Stdlib_Bytes[43],
    unsafe_to_string = Stdlib_Bytes[44],
    unsafe_of_string = Stdlib_Bytes[45],
    split_on_char = Stdlib_Bytes[46],
    to_seq = Stdlib_Bytes[47],
    to_seqi = Stdlib_Bytes[48],
    of_seq = Stdlib_Bytes[49],
    get_utf_8_uchar = Stdlib_Bytes[50],
    set_utf_8_uchar = Stdlib_Bytes[51],
    is_valid_utf_8 = Stdlib_Bytes[52],
    get_utf_16be_uchar = Stdlib_Bytes[53],
    set_utf_16be_uchar = Stdlib_Bytes[54],
    is_valid_utf_16be = Stdlib_Bytes[55],
    get_utf_16le_uchar = Stdlib_Bytes[56],
    set_utf_16le_uchar = Stdlib_Bytes[57],
    is_valid_utf_16le = Stdlib_Bytes[58],
    get_uint8 = Stdlib_Bytes[59],
    get_int8 = Stdlib_Bytes[60],
    get_uint16_ne = Stdlib_Bytes[61],
    get_uint16_be = Stdlib_Bytes[62],
    get_uint16_le = Stdlib_Bytes[63],
    get_int16_ne = Stdlib_Bytes[64],
    get_int16_be = Stdlib_Bytes[65],
    get_int16_le = Stdlib_Bytes[66],
    get_int32_ne = Stdlib_Bytes[67],
    get_int32_be = Stdlib_Bytes[68],
    get_int32_le = Stdlib_Bytes[69],
    get_int64_ne = Stdlib_Bytes[70],
    get_int64_be = Stdlib_Bytes[71],
    get_int64_le = Stdlib_Bytes[72],
    set_uint8 = Stdlib_Bytes[73],
    set_int8 = Stdlib_Bytes[74],
    set_uint16_ne = Stdlib_Bytes[75],
    set_uint16_be = Stdlib_Bytes[76],
    set_uint16_le = Stdlib_Bytes[77],
    set_int16_ne = Stdlib_Bytes[78],
    set_int16_be = Stdlib_Bytes[79],
    set_int16_le = Stdlib_Bytes[80],
    set_int32_ne = Stdlib_Bytes[81],
    set_int32_be = Stdlib_Bytes[82],
    set_int32_le = Stdlib_Bytes[83],
    set_int64_ne = Stdlib_Bytes[84],
    set_int64_be = Stdlib_Bytes[85],
    set_int64_le = Stdlib_Bytes[86],
    unsafe_escape = Stdlib_Bytes[87],
    Stdlib_BytesLabels =
      [0,
       make,
       init,
       empty,
       copy,
       of_string,
       to_string,
       sub,
       sub_string,
       extend,
       fill,
       blit,
       blit_string,
       concat,
       cat,
       iter,
       iteri,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       index,
       index_opt,
       rindex,
       rindex_opt,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       contains,
       contains_from,
       rcontains_from,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       compare,
       equal,
       starts_with,
       ends_with,
       unsafe_to_string,
       unsafe_of_string,
       split_on_char,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       set_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       set_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       set_utf_16le_uchar,
       is_valid_utf_16le,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le,
       set_uint8,
       set_int8,
       set_uint16_ne,
       set_uint16_be,
       set_uint16_le,
       set_int16_ne,
       set_int16_be,
       set_int16_le,
       set_int32_ne,
       set_int32_be,
       set_int32_le,
       set_int64_ne,
       set_int64_be,
       set_int64_le,
       unsafe_escape];
   runtime.caml_register_global(1, Stdlib_BytesLabels, "Stdlib__BytesLabels");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__StringLabels
//# unitInfo: Requires: Stdlib__String
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_String = global_data.Stdlib__String,
    make = Stdlib_String[1],
    init = Stdlib_String[2],
    empty = Stdlib_String[3],
    of_bytes = Stdlib_String[4],
    to_bytes = Stdlib_String[5],
    concat = Stdlib_String[6],
    cat = Stdlib_String[7],
    equal = Stdlib_String[8],
    compare = Stdlib_String[9],
    starts_with = Stdlib_String[10],
    ends_with = Stdlib_String[11],
    contains_from = Stdlib_String[12],
    rcontains_from = Stdlib_String[13],
    contains = Stdlib_String[14],
    sub = Stdlib_String[15],
    split_on_char = Stdlib_String[16],
    map = Stdlib_String[17],
    mapi = Stdlib_String[18],
    fold_left = Stdlib_String[19],
    fold_right = Stdlib_String[20],
    for_all = Stdlib_String[21],
    exists = Stdlib_String[22],
    trim = Stdlib_String[23],
    escaped = Stdlib_String[24],
    uppercase_ascii = Stdlib_String[25],
    lowercase_ascii = Stdlib_String[26],
    capitalize_ascii = Stdlib_String[27],
    uncapitalize_ascii = Stdlib_String[28],
    iter = Stdlib_String[29],
    iteri = Stdlib_String[30],
    index_from = Stdlib_String[31],
    index_from_opt = Stdlib_String[32],
    rindex_from = Stdlib_String[33],
    rindex_from_opt = Stdlib_String[34],
    index = Stdlib_String[35],
    index_opt = Stdlib_String[36],
    rindex = Stdlib_String[37],
    rindex_opt = Stdlib_String[38],
    to_seq = Stdlib_String[39],
    to_seqi = Stdlib_String[40],
    of_seq = Stdlib_String[41],
    get_utf_8_uchar = Stdlib_String[42],
    is_valid_utf_8 = Stdlib_String[43],
    get_utf_16be_uchar = Stdlib_String[44],
    is_valid_utf_16be = Stdlib_String[45],
    get_utf_16le_uchar = Stdlib_String[46],
    is_valid_utf_16le = Stdlib_String[47],
    blit = Stdlib_String[48],
    get_uint8 = Stdlib_String[49],
    get_int8 = Stdlib_String[50],
    get_uint16_ne = Stdlib_String[51],
    get_uint16_be = Stdlib_String[52],
    get_uint16_le = Stdlib_String[53],
    get_int16_ne = Stdlib_String[54],
    get_int16_be = Stdlib_String[55],
    get_int16_le = Stdlib_String[56],
    get_int32_ne = Stdlib_String[57],
    hash = Stdlib_String[58],
    seeded_hash = Stdlib_String[59],
    get_int32_be = Stdlib_String[60],
    get_int32_le = Stdlib_String[61],
    get_int64_ne = Stdlib_String[62],
    get_int64_be = Stdlib_String[63],
    get_int64_le = Stdlib_String[64],
    Stdlib_StringLabels =
      [0,
       make,
       init,
       empty,
       of_bytes,
       to_bytes,
       concat,
       cat,
       equal,
       compare,
       starts_with,
       ends_with,
       contains_from,
       rcontains_from,
       contains,
       sub,
       split_on_char,
       map,
       mapi,
       fold_left,
       fold_right,
       for_all,
       exists,
       trim,
       escaped,
       uppercase_ascii,
       lowercase_ascii,
       capitalize_ascii,
       uncapitalize_ascii,
       iter,
       iteri,
       index_from,
       index_from_opt,
       rindex_from,
       rindex_from_opt,
       index,
       index_opt,
       rindex,
       rindex_opt,
       to_seq,
       to_seqi,
       of_seq,
       get_utf_8_uchar,
       is_valid_utf_8,
       get_utf_16be_uchar,
       is_valid_utf_16be,
       get_utf_16le_uchar,
       is_valid_utf_16le,
       blit,
       get_uint8,
       get_int8,
       get_uint16_ne,
       get_uint16_be,
       get_uint16_le,
       get_int16_ne,
       get_int16_be,
       get_int16_le,
       get_int32_ne,
       hash,
       seeded_hash,
       get_int32_be,
       get_int32_le,
       get_int64_ne,
       get_int64_be,
       get_int64_le];
   runtime.caml_register_global
    (1, Stdlib_StringLabels, "Stdlib__StringLabels");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__MoreLabels
//# unitInfo: Requires: Stdlib__Hashtbl, Stdlib__Map, Stdlib__Set
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    global_data = runtime.caml_get_global_data(),
    Stdlib_Set = global_data.Stdlib__Set,
    Stdlib_Map = global_data.Stdlib__Map,
    Stdlib_Hashtbl = global_data.Stdlib__Hashtbl,
    Stdlib_MoreLabels = [0, Stdlib_Hashtbl, Stdlib_Map, Stdlib_Set];
   runtime.caml_register_global(3, Stdlib_MoreLabels, "Stdlib__MoreLabels");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__StdLabels
(function(globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime, Stdlib_StdLabels = [0];
   runtime.caml_register_global(0, Stdlib_StdLabels, "Stdlib__StdLabels");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__In_channel
//# unitInfo: Requires: Stdlib, Stdlib__Bytes, Stdlib__Fun, Stdlib__Sys
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_create_bytes = runtime.caml_create_bytes,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_ml_bytes_length = runtime.caml_ml_bytes_length,
    caml_wrap_exception = runtime.caml_wrap_exception;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<?>>*/ function caml_call3(f, a0, a1, a2){
    return (f.l >= 0 ? f.l : f.l = f.length) == 3
            ? f(a0, a1, a2)
            : runtime.caml_call_gen(f, [a0, a1, a2]);
   }
    /*<<?>>*/ function caml_call4(f, a0, a1, a2, a3){
    return (f.l >= 0 ? f.l : f.l = f.length) == 4
            ? f(a0, a1, a2, a3)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3]);
   }
    /*<<?>>*/ function caml_call5(f, a0, a1, a2, a3, a4){
    return (f.l >= 0 ? f.l : f.l = f.length) == 5
            ? f(a0, a1, a2, a3, a4)
            : runtime.caml_call_gen(f, [a0, a1, a2, a3, a4]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib_Bytes = global_data.Stdlib__Bytes,
    Stdlib = global_data.Stdlib,
    Stdlib_Sys = global_data.Stdlib__Sys,
    Stdlib_Fun = global_data.Stdlib__Fun,
    stdin = Stdlib[38],
    open_bin = Stdlib[80],
    open_text = Stdlib[79],
    open_gen = Stdlib[81],
    cst_In_channel_input_all_chann =
      "In_channel.input_all: channel content is larger than maximum string length",
    _a_ = [0, 0];
   function with_open(openfun, s, f){
     /*<<in_channel.ml:35:11>>*/  /*<<in_channel.ml:35:11>>*/ var
     ic =  /*<<in_channel.ml:35:11>>*/ caml_call1(openfun, s);
     /*<<in_channel.ml:35:11>>*/ function _r_(param){
      /*<<in_channel.ml:37:15>>*/ return  /*<<in_channel.ml:37:15>>*/ caml_call1
             (f, ic);
     /*<<in_channel.ml:37:19>>*/ }
     /*<<in_channel.ml:35:11>>*/ function _s_(param){
      /*<<in_channel.ml:36:34>>*/ return  /*<<in_channel.ml:36:34>>*/ caml_call1
             (Stdlib[94], ic);
     /*<<in_channel.ml:36:58>>*/ }
     /*<<in_channel.ml:35:11>>*/ return  /*<<in_channel.ml:35:11>>*/ caml_call2
            (Stdlib_Fun[4], _s_, _r_);
    /*<<in_channel.ml:37:20>>*/ }
   function with_open_bin(s, f){
     /*<<in_channel.ml:40:2>>*/ return with_open(Stdlib[80], s, f);
    /*<<in_channel.ml:40:34>>*/ }
   function with_open_text(s, f){
     /*<<in_channel.ml:43:2>>*/ return with_open(Stdlib[79], s, f);
    /*<<in_channel.ml:43:30>>*/ }
   function with_open_gen(flags, perm, s, f){
     /*<<in_channel.ml:46:12>>*/ return with_open
            ( /*<<in_channel.ml:46:12>>*/ caml_call2(Stdlib[81], flags, perm),
             s,
             f);
    /*<<in_channel.ml:46:47>>*/ }
   var
    seek = Stdlib[96][4],
    pos = Stdlib[96][5],
    length = Stdlib[96][6],
    close = Stdlib[93],
    close_noerr = Stdlib[94];
   function input_char(ic){
     /*<<?>>*/ try{
      /*<<in_channel.ml:55:8>>*/  /*<<in_channel.ml:55:8>>*/ var
      c =  /*<<in_channel.ml:55:8>>*/ caml_call1(Stdlib[82], ic);
    }
    catch(_q_){
     var _p_ = caml_wrap_exception(_q_);
     if(_p_ === Stdlib[12])  /*<<in_channel.ml:57:29>>*/ return 0;
      /*<<in_channel.ml:56:9>>*/ throw  /*<<in_channel.ml:56:9>>*/ caml_maybe_attach_backtrace
            (_p_, 0);
    }
     /*<<in_channel.ml:56:9>>*/ return [0, c];
    /*<<in_channel.ml:57:33>>*/ }
   function input_byte(ic){
     /*<<?>>*/ try{
      /*<<in_channel.ml:60:8>>*/  /*<<in_channel.ml:60:8>>*/ var
      n =  /*<<in_channel.ml:60:8>>*/ caml_call1(Stdlib[87], ic);
    }
    catch(_o_){
     var _n_ = caml_wrap_exception(_o_);
     if(_n_ === Stdlib[12])  /*<<in_channel.ml:62:29>>*/ return 0;
      /*<<in_channel.ml:61:9>>*/ throw  /*<<in_channel.ml:61:9>>*/ caml_maybe_attach_backtrace
            (_n_, 0);
    }
     /*<<in_channel.ml:61:9>>*/ return [0, n];
    /*<<in_channel.ml:62:33>>*/ }
   function input_line(ic){
     /*<<?>>*/ try{
      /*<<in_channel.ml:65:8>>*/  /*<<in_channel.ml:65:8>>*/ var
      s =  /*<<in_channel.ml:65:8>>*/ caml_call1(Stdlib[83], ic);
    }
    catch(_m_){
     var _l_ = caml_wrap_exception(_m_);
     if(_l_ === Stdlib[12])  /*<<in_channel.ml:67:29>>*/ return 0;
      /*<<in_channel.ml:66:9>>*/ throw  /*<<in_channel.ml:66:9>>*/ caml_maybe_attach_backtrace
            (_l_, 0);
    }
     /*<<in_channel.ml:66:9>>*/ return [0, s];
    /*<<in_channel.ml:67:33>>*/ }
   var input = Stdlib[84];
   function really_input(ic, buf, pos, len){
     /*<<?>>*/ try{
      /*<<in_channel.ml:72:8>>*/  /*<<in_channel.ml:72:8>>*/ caml_call4
      (Stdlib[85], ic, buf, pos, len);
      /*<<in_channel.ml:73:10>>*/ return _a_;
    }
    catch(_k_){
     var _j_ = caml_wrap_exception(_k_);
     if(_j_ === Stdlib[12])  /*<<in_channel.ml:74:29>>*/ return 0;
     throw caml_maybe_attach_backtrace(_j_, 0);
    }
    /*<<in_channel.ml:74:33>>*/ }
   function really_input_string(ic, len){
     /*<<?>>*/ try{
      /*<<in_channel.ml:77:8>>*/  /*<<in_channel.ml:77:8>>*/ var
      s =  /*<<in_channel.ml:77:8>>*/ caml_call2(Stdlib[86], ic, len);
    }
    catch(_i_){
     var _h_ = caml_wrap_exception(_i_);
     if(_h_ === Stdlib[12])  /*<<in_channel.ml:79:29>>*/ return 0;
      /*<<in_channel.ml:78:9>>*/ throw  /*<<in_channel.ml:78:9>>*/ caml_maybe_attach_backtrace
            (_h_, 0);
    }
     /*<<in_channel.ml:78:9>>*/ return [0, s];
    /*<<in_channel.ml:79:33>>*/ }
   function read_upto(ic, buf, ofs, len){
    var ofs$0 = ofs, len$0 = len;
     /*<<in_channel.ml:85:4>>*/ for(;;){
      /*<<in_channel.ml:85:4>>*/ if(0 !== len$0){
       /*<<in_channel.ml:87:14>>*/  /*<<in_channel.ml:87:14>>*/ var
       r =
          /*<<in_channel.ml:87:14>>*/ caml_call4
          (Stdlib[84], ic, buf, ofs$0, len$0);
       /*<<in_channel.ml:87:14>>*/ if(0 !== r){
        /*<<in_channel.ml:91:8>>*/ var
         /*<<in_channel.ml:91:8>>*/ len$1 = len$0 - r | 0,
         /*<<in_channel.ml:91:8>>*/ ofs$1 = ofs$0 + r | 0,
        ofs$0 = ofs$1,
        len$0 = len$1;
       continue;
      }
     }
     return ofs$0 - ofs | 0;
    }
    /*<<in_channel.ml:94:20>>*/ }
   function ensure(buf, ofs, n){
     /*<<in_channel.ml:109:2>>*/  /*<<in_channel.ml:109:2>>*/ var
     len =  /*<<in_channel.ml:109:2>>*/ caml_ml_bytes_length(buf);
     /*<<in_channel.ml:109:2>>*/ if((ofs + n | 0) <= len)
      /*<<in_channel.ml:110:25>>*/ return buf;
     /*<<in_channel.ml:111:7>>*/  /*<<in_channel.ml:111:7>>*/ var
     new_len = [0, len];
    for(;;){
     if(new_len[1] < (ofs + n | 0)){
       /*<<in_channel.ml:114:6>>*/ new_len[1] = (2 * new_len[1] | 0) + 1 | 0;
      continue;
     }
      /*<<in_channel.ml:116:4>>*/ var
       /*<<in_channel.ml:116:4>>*/ new_len$0 = new_len[1],
       /*<<in_channel.ml:116:4>>*/ new_len$1 =
        new_len$0 <= Stdlib_Sys[12]
         ? new_len$0
         : ofs
           < Stdlib_Sys[12]
           ? Stdlib_Sys[12]
           :  /*<<in_channel.ml:123:8>>*/ caml_call1
             (Stdlib[2], cst_In_channel_input_all_chann),
       /*<<in_channel.ml:126:4>>*/ new_buf =
         /*<<in_channel.ml:126:4>>*/ caml_create_bytes(new_len$1);
      /*<<in_channel.ml:127:4>>*/  /*<<in_channel.ml:127:4>>*/ caml_call5
      (Stdlib_Bytes[11], buf, 0, new_buf, 0, ofs);
      /*<<in_channel.ml:127:4>>*/ return new_buf;
    }
    /*<<in_channel.ml:129:5>>*/ }
   function input_all(ic){
     /*<<in_channel.ml:132:2>>*/  /*<<in_channel.ml:132:2>>*/ var
     chunk_size = 65536;
    try{
      /*<<in_channel.ml:135:36>>*/ var
       /*<<in_channel.ml:135:36>>*/ _d_ =
         /*<<in_channel.ml:135:36>>*/ caml_call1(Stdlib[91], ic),
       /*<<in_channel.ml:135:6>>*/ _e_ =
         /*<<in_channel.ml:135:6>>*/ caml_call1(Stdlib[92], ic) - _d_ | 0,
      initial_size = _e_;
    }
    catch(_g_){
     var _b_ = caml_wrap_exception(_g_);
     if(_b_[1] !== Stdlib[11]) throw caml_maybe_attach_backtrace(_b_, 0);
     var initial_size = -1;
    }
     /*<<in_channel.ml:139:2>>*/ var
      /*<<in_channel.ml:139:2>>*/ initial_size$0 =
       0 <= initial_size ? initial_size : chunk_size,
      /*<<in_channel.ml:140:2>>*/ initial_size$1 =
       initial_size$0 <= Stdlib_Sys[12] ? initial_size$0 : Stdlib_Sys[12],
      /*<<in_channel.ml:146:2>>*/ buf =
        /*<<in_channel.ml:146:2>>*/ caml_create_bytes(initial_size$1),
      /*<<in_channel.ml:147:14>>*/ nread =
       read_upto(ic, buf, 0, initial_size$1);
     /*<<in_channel.ml:147:14>>*/ if(nread < initial_size$1)
      /*<<in_channel.ml:149:4>>*/ return  /*<<in_channel.ml:149:4>>*/ caml_call3
             (Stdlib_Bytes[8], buf, 0, nread);
    try{
      /*<<in_channel.ml:151:10>>*/  /*<<in_channel.ml:151:10>>*/ var
      c =  /*<<in_channel.ml:151:10>>*/ caml_call1(Stdlib[82], ic);
    }
    catch(_f_){
     var _c_ = caml_wrap_exception(_f_);
     if(_c_ === Stdlib[12])
       /*<<in_channel.ml:154:8>>*/ return  /*<<in_channel.ml:154:8>>*/ caml_call1
              (Stdlib_Bytes[44], buf);
      /*<<in_channel.ml:157:8>>*/ throw  /*<<in_channel.ml:157:8>>*/ caml_maybe_attach_backtrace
            (_c_, 0);
    }
     /*<<in_channel.ml:168:18>>*/  /*<<in_channel.ml:168:18>>*/ var
     buf$2 = ensure(buf, nread, 65537);
     /*<<in_channel.ml:169:8>>*/  /*<<in_channel.ml:169:8>>*/ runtime.caml_bytes_set
     (buf$2, nread, c);
     /*<<in_channel.ml:169:8>>*/ var
      /*<<in_channel.ml:169:8>>*/ ofs$1 = nread + 1 | 0,
     buf$0 = buf$2,
     ofs = ofs$1;
     /*<<in_channel.ml:158:10>>*/ for(;;){
      /*<<in_channel.ml:158:20>>*/ var
       /*<<in_channel.ml:158:20>>*/ buf$1 = ensure(buf$0, ofs, chunk_size),
       /*<<in_channel.ml:158:20>>*/ rem =
         /*<<in_channel.ml:158:20>>*/ caml_ml_bytes_length(buf$1) - ofs | 0,
       /*<<in_channel.ml:162:18>>*/ r = read_upto(ic, buf$1, ofs, rem);
      /*<<in_channel.ml:162:18>>*/ if(r < rem)
       /*<<in_channel.ml:164:12>>*/ return  /*<<in_channel.ml:164:12>>*/ caml_call3
              (Stdlib_Bytes[8], buf$1, 0, ofs + r | 0);
      /*<<in_channel.ml:166:12>>*/ var
       /*<<in_channel.ml:166:12>>*/ ofs$0 = ofs + rem | 0,
      buf$0 = buf$1,
      ofs = ofs$0;
    }
    /*<<in_channel.ml:171:5>>*/ }
   var
    set_binary_mode = Stdlib[95],
    Stdlib_In_channel =
      [0,
       stdin,
       open_bin,
       open_text,
       open_gen,
       with_open_bin,
       with_open_text,
       with_open_gen,
       seek,
       pos,
       length,
       close,
       close_noerr,
       input_char,
       input_byte,
       input_line,
       input,
       really_input,
       really_input_string,
       input_all,
       set_binary_mode];
   runtime.caml_register_global(6, Stdlib_In_channel, "Stdlib__In_channel");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Out_channel
//# unitInfo: Requires: Stdlib, Stdlib__Fun
(function
  (globalThis){
   "use strict";
   var runtime = globalThis.jsoo_runtime;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
   var
    global_data = runtime.caml_get_global_data(),
    Stdlib = global_data.Stdlib,
    Stdlib_Fun = global_data.Stdlib__Fun,
    stdout = Stdlib[39],
    stderr = Stdlib[40],
    open_bin = Stdlib[61],
    open_text = Stdlib[60],
    open_gen = Stdlib[62];
   function with_open(openfun, s, f){
     /*<<out_channel.ml:36:11>>*/  /*<<out_channel.ml:36:11>>*/ var
     oc =  /*<<out_channel.ml:36:11>>*/ caml_call1(openfun, s);
     /*<<out_channel.ml:36:11>>*/ function _a_(param){
      /*<<out_channel.ml:38:15>>*/ return  /*<<out_channel.ml:38:15>>*/ caml_call1
             (f, oc);
     /*<<out_channel.ml:38:19>>*/ }
     /*<<out_channel.ml:36:11>>*/ function _b_(param){
      /*<<out_channel.ml:37:34>>*/ return  /*<<out_channel.ml:37:34>>*/ caml_call1
             (Stdlib[77], oc);
     /*<<out_channel.ml:37:59>>*/ }
     /*<<out_channel.ml:36:11>>*/ return  /*<<out_channel.ml:36:11>>*/ caml_call2
            (Stdlib_Fun[4], _b_, _a_);
    /*<<out_channel.ml:38:20>>*/ }
   function with_open_bin(s, f){
     /*<<out_channel.ml:41:2>>*/ return with_open(Stdlib[61], s, f);
    /*<<out_channel.ml:41:35>>*/ }
   function with_open_text(s, f){
     /*<<out_channel.ml:44:2>>*/ return with_open(Stdlib[60], s, f);
    /*<<out_channel.ml:44:31>>*/ }
   function with_open_gen(flags, perm, s, f){
     /*<<out_channel.ml:47:12>>*/ return with_open
            ( /*<<out_channel.ml:47:12>>*/ caml_call2(Stdlib[62], flags, perm),
             s,
             f);
    /*<<out_channel.ml:47:48>>*/ }
   var
    seek = Stdlib[96][1],
    pos = Stdlib[96][2],
    length = Stdlib[96][3],
    close = Stdlib[76],
    close_noerr = Stdlib[77],
    flush = Stdlib[63],
    flush_all = Stdlib[64],
    output_char = Stdlib[65],
    output_byte = Stdlib[70],
    output_string = Stdlib[66],
    output_bytes = Stdlib[67],
    output = Stdlib[68],
    output_substring = Stdlib[69],
    set_binary_mode = Stdlib[78],
    Stdlib_Out_channel =
      [0,
       stdout,
       stderr,
       open_bin,
       open_text,
       open_gen,
       with_open_bin,
       with_open_text,
       with_open_gen,
       seek,
       pos,
       length,
       close,
       close_noerr,
       flush,
       flush_all,
       output_char,
       output_byte,
       output_string,
       output_bytes,
       output,
       output_substring,
       set_binary_mode,
       runtime.caml_ml_set_buffered,
       runtime.caml_ml_is_buffered];
   runtime.caml_register_global(2, Stdlib_Out_channel, "Stdlib__Out_channel");
   return;
   /*<<?>>*/ }
  (globalThis));

//# unitInfo: Provides: Stdlib__Effect
//# unitInfo: Requires: Stdlib, Stdlib__Callback, Stdlib__Printexc, Stdlib__Printf
//# unitInfo: Effects_without_cps: true
(function
  (globalThis){
   "use strict";
   var
    runtime = globalThis.jsoo_runtime,
    caml_alloc_stack = runtime.caml_alloc_stack,
    caml_continuation_use_noexc = runtime.caml_continuation_use_noexc,
    caml_fresh_oo_id = runtime.caml_fresh_oo_id,
    caml_maybe_attach_backtrace = runtime.caml_maybe_attach_backtrace,
    caml_restore_raw_backtrace = runtime.caml_restore_raw_backtrace,
    caml_wrap_exception = runtime.caml_wrap_exception,
    jsoo_effect_not_supported = runtime.jsoo_effect_not_supported;
    /*<<?>>*/ function caml_call1(f, a0){
    return (f.l >= 0 ? f.l : f.l = f.length) == 1
            ? f(a0)
            : runtime.caml_call_gen(f, [a0]);
   }
    /*<<?>>*/ function caml_call2(f, a0, a1){
    return (f.l >= 0 ? f.l : f.l = f.length) == 2
            ? f(a0, a1)
            : runtime.caml_call_gen(f, [a0, a1]);
   }
    /*<<effect.ml:156:29>>*/ var
     /*<<effect.ml:156:29>>*/ global_data =
       /*<<effect.ml:156:29>>*/ runtime.caml_get_global_data(),
     /*<<effect.ml:156:29>>*/ Stdlib = global_data.Stdlib,
     /*<<effect.ml:156:29>>*/ Stdlib_Printexc = global_data.Stdlib__Printexc,
     /*<<effect.ml:156:29>>*/ Stdlib_Printf = global_data.Stdlib__Printf,
     /*<<effect.ml:156:29>>*/ Stdlib_Callback = global_data.Stdlib__Callback,
    Unhandled = [248, "Stdlib.Effect.Unhandled", caml_fresh_oo_id(0)],
    Continuation_already_resumed =
      [248, "Stdlib.Effect.Continuation_already_resumed", caml_fresh_oo_id(0)],
     /*<<effect.ml:156:29>>*/ cst_impossible = "impossible",
     /*<<effect.ml:156:29>>*/ cst_Initial_setup = "Initial_setup__",
     /*<<effect.ml:156:29>>*/ cst_E = "E",
     /*<<effect.ml:156:29>>*/ _a_ =
      [0,
       [11, "Stdlib.Effect.Unhandled(", [2, 0, [12, 41, 0]]],
       "Stdlib.Effect.Unhandled(%s)"],
     /*<<effect.ml:156:29>>*/ cst_Stdlib_Effect_Should_not_s =
      "Stdlib.Effect.Should_not_see_this__",
     /*<<effect.ml:156:29>>*/ cst_Effect_Unhandled = "Effect.Unhandled",
     /*<<effect.ml:156:29>>*/ cst_Effect_Continuation_alread =
      "Effect.Continuation_already_resumed";
   function printer(param){
     /*<<effect.ml:22:16>>*/ if(param[1] !== Unhandled)
      /*<<effect.ml:28:11>>*/ return 0;
     /*<<effect.ml:24:8>>*/ var
      /*<<effect.ml:24:8>>*/ x = param[2],
      /*<<effect.ml:25:12>>*/ _j_ =
        /*<<effect.ml:25:12>>*/ caml_call1(Stdlib_Printexc[26], x),
      /*<<effect.ml:24:18>>*/ msg =
        /*<<effect.ml:24:18>>*/ caml_call2(Stdlib_Printf[4], _a_, _j_);
     /*<<effect.ml:24:18>>*/ return [0, msg];
    /*<<effect.ml:28:15>>*/ }
    /*<<effect.ml:30:2>>*/  /*<<effect.ml:30:2>>*/ caml_call1
    (Stdlib_Printexc[9], printer);
    /*<<effect.ml:30:2>>*/  /*<<effect.ml:30:2>>*/ var
    Should_not_see_this =
      [248,
       cst_Stdlib_Effect_Should_not_s,
        /*<<effect.ml:30:2>>*/ caml_fresh_oo_id(0)];
    /*<<effect.ml:34:8>>*/  /*<<effect.ml:34:8>>*/ caml_call2
    (Stdlib_Callback[2],
     cst_Effect_Unhandled,
     [0, Unhandled, Should_not_see_this]);
    /*<<effect.ml:36:8>>*/  /*<<effect.ml:36:8>>*/ caml_call2
    (Stdlib_Callback[2],
     cst_Effect_Continuation_alread,
     Continuation_already_resumed);
    /*<<effect.ml:36:8>>*/ function continue$0(k, v){
     /*<<effect.ml:57:21>>*/ function _h_(x){
      /*<<effect.ml:57:58>>*/ return x;
     /*<<effect.ml:57:59>>*/ }
     /*<<effect.ml:57:28>>*/  /*<<effect.ml:57:28>>*/ var
     _i_ =  /*<<effect.ml:57:28>>*/ caml_continuation_use_noexc(k);
     /*<<effect.ml:57:28>>*/ return  /*<<effect.ml:57:28>>*/ jsoo_effect_not_supported
            ();
    /*<<effect.ml:57:62>>*/ }
    /*<<effect.ml:36:8>>*/ function discontinue(k, e){
     /*<<effect.ml:59:24>>*/ function _f_(e){
      /*<<effect.ml:59:61>>*/ throw  /*<<effect.ml:59:61>>*/ caml_maybe_attach_backtrace
            (e, 1);
     /*<<effect.ml:59:68>>*/ }
     /*<<effect.ml:59:31>>*/  /*<<effect.ml:59:31>>*/ var
     _g_ =  /*<<effect.ml:59:31>>*/ caml_continuation_use_noexc(k);
     /*<<effect.ml:59:31>>*/ return  /*<<effect.ml:59:31>>*/ jsoo_effect_not_supported
            ();
    /*<<effect.ml:59:71>>*/ }
    /*<<effect.ml:36:8>>*/ function discontinue_with_backtrace(k, e, bt){
     /*<<effect.ml:61:42>>*/ function _d_(e){
      /*<<effect.ml:62:4>>*/  /*<<effect.ml:62:4>>*/ caml_restore_raw_backtrace
      (e, bt);
      /*<<effect.ml:62:4>>*/ throw  /*<<effect.ml:62:4>>*/ caml_maybe_attach_backtrace
            (e, 0);
     /*<<effect.ml:62:38>>*/ }
     /*<<effect.ml:61:49>>*/  /*<<effect.ml:61:49>>*/ var
     _e_ =  /*<<effect.ml:61:49>>*/ caml_continuation_use_noexc(k);
     /*<<effect.ml:61:49>>*/ return  /*<<effect.ml:61:49>>*/ jsoo_effect_not_supported
            ();
    /*<<effect.ml:62:41>>*/ }
    /*<<effect.ml:36:8>>*/ function match_with(comp, arg, handler){
     /*<<effect.ml:73:4>>*/ function effc(eff, k, last_fiber){
      /*<<effect.ml:74:12>>*/  /*<<effect.ml:74:12>>*/ var
      match =  /*<<effect.ml:74:12>>*/ caml_call1(handler[3], eff);
      /*<<effect.ml:74:12>>*/ if(! match)
       /*<<effect.ml:76:16>>*/ return  /*<<effect.ml:76:16>>*/ jsoo_effect_not_supported
              ();
      /*<<effect.ml:75:18>>*/  /*<<effect.ml:75:18>>*/ var f = match[1];
      /*<<effect.ml:75:18>>*/ return  /*<<effect.ml:75:18>>*/ caml_call1(f, k);
     /*<<effect.ml:76:42>>*/ }
     /*<<effect.ml:78:12>>*/  /*<<effect.ml:78:12>>*/ var
     s =
        /*<<effect.ml:78:12>>*/ caml_alloc_stack(handler[1], handler[2], effc);
     /*<<effect.ml:78:12>>*/ return  /*<<effect.ml:78:12>>*/ jsoo_effect_not_supported
            ();
    /*<<effect.ml:79:23>>*/ }
    /*<<effect.ml:36:8>>*/ function try_with(comp, arg, handler){
     /*<<effect.ml:85:4>>*/ function effc(eff, k, last_fiber){
      /*<<effect.ml:86:12>>*/  /*<<effect.ml:86:12>>*/ var
      match =  /*<<effect.ml:86:12>>*/ caml_call1(handler[1], eff);
      /*<<effect.ml:86:12>>*/ if(! match)
       /*<<effect.ml:88:16>>*/ return  /*<<effect.ml:88:16>>*/ jsoo_effect_not_supported
              ();
      /*<<effect.ml:87:18>>*/  /*<<effect.ml:87:18>>*/ var f = match[1];
      /*<<effect.ml:87:18>>*/ return  /*<<effect.ml:87:18>>*/ caml_call1(f, k);
     /*<<effect.ml:88:42>>*/ }
     /*<<effect.ml:85:4>>*/ function _c_(e){
      /*<<effect.ml:90:47>>*/ throw  /*<<effect.ml:90:47>>*/ caml_maybe_attach_backtrace
            (e, 1);
     /*<<effect.ml:90:54>>*/ }
     /*<<effect.ml:90:24>>*/  /*<<effect.ml:90:24>>*/ var
     s =
        /*<<effect.ml:90:24>>*/ caml_alloc_stack
        (function(x){
           /*<<effect.ml:90:34>>*/ return x;
          /*<<effect.ml:90:35>>*/ },
         _c_,
         effc);
     /*<<effect.ml:90:24>>*/ return  /*<<effect.ml:90:24>>*/ jsoo_effect_not_supported
            ();
    /*<<effect.ml:91:23>>*/ }
    /*<<effect.ml:36:8>>*/  /*<<effect.ml:36:8>>*/ var
    Deep =
      [0,
       continue$0,
       discontinue,
       discontinue_with_backtrace,
       match_with,
       try_with];
    /*<<effect.ml:36:8>>*/ function fiber(f){
     /*<<effect.ml:111:4>>*/ var
      /*<<effect.ml:111:4>>*/ Initial_setup =
       [248, cst_Initial_setup,  /*<<effect.ml:111:4>>*/ caml_fresh_oo_id(0)],
      /*<<effect.ml:111:4>>*/ E =
       [248, cst_E,  /*<<effect.ml:111:4>>*/ caml_fresh_oo_id(0)];
     /*<<effect.ml:111:4>>*/ function f$0(param){
      /*<<effect.ml:113:18>>*/ return  /*<<effect.ml:113:18>>*/ caml_call1
             (f,  /*<<effect.ml:113:18>>*/ jsoo_effect_not_supported());
     /*<<effect.ml:113:45>>*/ }
     /*<<effect.ml:111:4>>*/ function error(param){
      /*<<effect.ml:114:18>>*/ return  /*<<effect.ml:114:18>>*/ caml_call1
             (Stdlib[2], cst_impossible);
     /*<<effect.ml:114:39>>*/ }
     /*<<effect.ml:111:4>>*/ function effc(eff, k, last_fiber){
      /*<<effect.ml:116:6>>*/ if(eff === Initial_setup)
       /*<<effect.ml:117:29>>*/ throw [0, E, k];
      /*<<effect.ml:118:13>>*/ return error(0);
     /*<<effect.ml:118:21>>*/ }
     /*<<effect.ml:120:12>>*/  /*<<effect.ml:120:12>>*/ var
     s =  /*<<effect.ml:120:12>>*/ caml_alloc_stack(error, error, effc);
    try{
      /*<<effect.ml:121:10>>*/  /*<<effect.ml:121:10>>*/ jsoo_effect_not_supported
      ();
     var _b_ = 0;
    }
    catch(exn$0){
     var exn = caml_wrap_exception(exn$0);
     if(exn[1] !== E)
       /*<<effect.ml:123:11>>*/ throw  /*<<effect.ml:123:11>>*/ caml_maybe_attach_backtrace
             (exn, 0);
      /*<<effect.ml:122:23>>*/  /*<<effect.ml:122:23>>*/ var k = exn[2];
      /*<<effect.ml:122:23>>*/ return k;
    }
     /*<<effect.ml:123:11>>*/ return error(0);
    /*<<effect.ml:123:19>>*/ }
    /*<<effect.ml:36:8>>*/ function continue_gen(k, resume_fun, v, handler){
     /*<<effect.ml:141:4>>*/ function effc(eff, k, last_fiber){
      /*<<effect.ml:142:12>>*/  /*<<effect.ml:142:12>>*/ var
      match =  /*<<effect.ml:142:12>>*/ caml_call1(handler[3], eff);
      /*<<effect.ml:142:12>>*/ if(! match)
       /*<<effect.ml:144:16>>*/ return  /*<<effect.ml:144:16>>*/ jsoo_effect_not_supported
              ();
      /*<<effect.ml:143:18>>*/  /*<<effect.ml:143:18>>*/ var f = match[1];
      /*<<effect.ml:143:18>>*/ return  /*<<effect.ml:143:18>>*/ caml_call1
             (f, k);
     /*<<effect.ml:144:42>>*/ }
     /*<<effect.ml:146:16>>*/  /*<<effect.ml:146:16>>*/ var
     stack =
        /*<<effect.ml:146:16>>*/ runtime.caml_continuation_use_and_update_handler_noexc
        (k, handler[1], handler[2], effc);
     /*<<effect.ml:146:16>>*/ return  /*<<effect.ml:146:16>>*/ jsoo_effect_not_supported
            ();
    /*<<effect.ml:147:29>>*/ }
    /*<<effect.ml:36:8>>*/ function continue_with(k, v, handler){
     /*<<effect.ml:150:4>>*/ return continue_gen
            (k,
             function(x){
               /*<<effect.ml:150:29>>*/ return x;
              /*<<effect.ml:150:30>>*/ },
             v,
             handler);
    /*<<effect.ml:150:41>>*/ }
    /*<<effect.ml:36:8>>*/ function discontinue_with(k, v, handler){
     /*<<effect.ml:153:4>>*/ return continue_gen
            (k,
             function(e){
               /*<<effect.ml:153:29>>*/ throw  /*<<effect.ml:153:29>>*/ caml_maybe_attach_backtrace
                     (e, 1);
              /*<<effect.ml:153:36>>*/ },
             v,
             handler);
    /*<<effect.ml:153:47>>*/ }
    /*<<effect.ml:36:8>>*/ function discontinue_with_backtrace$0
   (k, v, bt, handler){
     /*<<effect.ml:156:4>>*/ return continue_gen
            (k,
             function(e){
               /*<<effect.ml:156:29>>*/  /*<<effect.ml:156:29>>*/ caml_restore_raw_backtrace
               (e, bt);
               /*<<effect.ml:156:29>>*/ throw  /*<<effect.ml:156:29>>*/ caml_maybe_attach_backtrace
                     (e, 0);
              /*<<effect.ml:156:63>>*/ },
             v,
             handler);
    /*<<effect.ml:156:74>>*/ }
    /*<<effect.ml:36:8>>*/  /*<<effect.ml:36:8>>*/ var
    Stdlib_Effect =
      [0,
       Unhandled,
       Continuation_already_resumed,
       Deep,
       [0,
        fiber,
        continue_with,
        discontinue_with,
        discontinue_with_backtrace$0]];
    /*<<effect.ml:36:8>>*/  /*<<effect.ml:36:8>>*/ runtime.caml_register_global
    (13, Stdlib_Effect, "Stdlib__Effect");
    /*<<effect.ml:36:8>>*/ return;
   /*<<?>>*/ }
  (globalThis));
