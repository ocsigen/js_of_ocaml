name: Install Binaryen

inputs:
  repository:
    description: 'Repository name with owner. For example, actions/checkout'
    default: WebAssembly/binaryen
  ref:
    description: >
      The branch, tag or SHA to checkout. When checking out the repository that
      triggered a workflow, this defaults to the reference or SHA for that
      event.  Otherwise, uses the default branch.
    default: latest
  build:
    description: Whether we should build from source
    default: false
runs:
  using: composite
  steps:
    - name: Restore cached binaryen
      if: ${{ inputs.build && inputs.build != 'false' }}
      id: cache-binaryen
      uses: actions/cache/restore@v4
      with:
        path: binaryen
        key: ${{ runner.os }}-binaryen-${{ inputs.ref }}

    - name: Checkout binaryen
      if: ${{ inputs.build  && inputs.build != 'false' && steps.cache-binaryen.outputs.cache-hit != 'true' }}
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        path: binaryen
        submodules: true
        ref: ${{ inputs.ref == 'latest' && 'main' || inputs.ref }}

    - name: Install ninja (Linux)
      if: ${{ inputs.build && inputs.build != 'false' && runner.os == 'Linux' && steps.cache-binaryen.outputs.cache-hit != 'true' }}
      shell: bash
      run: sudo apt-get install ninja-build

    - name: Install ninja (MacOS)
      if: ${{ inputs.build && inputs.build != 'false' && runner.os == 'macOS' && steps.cache-binaryen.outputs.cache-hit != 'true' }}
      shell: bash
      run: brew install ninja

    - name: Build binaryen
      if: ${{ inputs.build && inputs.build != 'false' && runner.os != 'Windows' && steps.cache-binaryen.outputs.cache-hit != 'true' }}
      working-directory: ./binaryen
      shell: bash
      run: |
        cmake -G Ninja .
        ninja

    - name: Install binaryen build dependencies (Windows)
      if: ${{ inputs.build && inputs.build != 'false' && runner.os == 'Windows' && steps.cache-binaryen.outputs.cache-hit != 'true' }}
      working-directory: ./binaryen
      shell: bash
      run: opam install conf-cmake conf-c++

    - name: Build binaryen (Windows)
      if: ${{ inputs.build && inputs.build != 'false' && runner.os == 'Windows' && steps.cache-binaryen.outputs.cache-hit != 'true' }}
      working-directory: ./binaryen
      shell: bash
      run: |
        opam exec -- cmake . -DBUILD_STATIC_LIB=ON -DBUILD_TESTS=off -DINSTALL_LIBS=off -DCMAKE_C_COMPILER=x86_64-w64-mingw32-gcc
        make -j 4

    - name: Cache binaryen
      if: ${{ inputs.build && inputs.build != 'false' && steps.cache-binaryen.outputs.cache-hit != 'true' }}
      uses: actions/cache/save@v4
      with:
        path: binaryen
        key: ${{ runner.os }}-binaryen-${{ inputs.ref }}

    - name: Set binaryen's path
      if: ${{ inputs.build && inputs.build != 'false' && runner.os != 'Windows' }}
      shell: bash
      run: echo "$GITHUB_WORKSPACE/binaryen/bin" >> $GITHUB_PATH

    - name: Copy binaryen's tools (Windows)
      if: ${{ inputs.build && inputs.build != 'false' && runner.os == 'Windows' }}
      shell: bash
      run: cp $GITHUB_WORKSPACE/binaryen/bin/wasm-{merge,opt}.exe _opam/bin

    - name: Download Binaryen
      if: ${{ ! inputs.build || inputs.build == 'false' }}
      uses: Aandreba/setup-binaryen@v1.0.0
      with:
          token: ${{ github.token }}
          version: ${{ inputs.ref }}
