description = "Js_of_ocaml library"
version = "dev"
archive(byte) = "js_of_ocaml.cma"
requires = "lwt,uchar"

linkopts(javascript,-jsoo_noruntime) = "+js_of_ocaml-compiler/runtime.js"
linkopts(javascript,jsoo_classlist) += "+js_of_ocaml-compiler/classlist.js"
linkopts(javascript,pkg_graphics) += "+js_of_ocaml-compiler/graphics.js"
linkopts(javascript,pkg_num) += "+js_of_ocaml-compiler/nat.js"

package "ppx" (
  description = "Js_of_ocaml ppx"
  version = "[distributed with js_of_ocaml]"
  ppx = "./ppx_js"
  requires = "js_of_ocaml"
  exists_if = "ppx_js"
  package "internal" (
    description = "Js_of_ocaml ppx mapper"
    version = "[distributed with js_of_ocaml]"
    archive(byte) = "ppx_js.cma"
    archive(byte, plugin) = "ppx_js.cma"
    archive(native) = "ppx_js.cmxa"
    archive(native, plugin) = "ppx_js.cmxs"
    requires = "ppx_tools"
  )
  package "driver" (
    description = "Js_of_ocaml ppx driver"
    version = "[distributed with js_of_ocaml]"
    requires = "ppx_driver ppx_tools js_of_ocaml.ppx.internal"
    requires(ppx_driver) = "ppx_driver ppx_tools js_of_ocaml.ppx.internal"
    archive(ppx_driver, byte          ) = "ppx_js_driver.cma"
    archive(ppx_driver, native        ) = "ppx_js_driver.cmxa"
    archive(ppx_driver, native, plugin) = "ppx_js_driver.cmxs"
    exists_if = "ppx_js_driver.cma"
  )
)

package "deriving" (

  exists_if = "deriving_json.cma deriving_json.cmxa"
  description = "Runtime library for the class Json."
  version = "[distributed with js_of_ocaml]"
  archive(byte) = "deriving_json.cma"
  archive(native) = "deriving_json.cmxa"
  requires = "bytes"

  package "ppx" (
    description = "[@@deriving json]"
    version = "[distributed with js_of_ocaml]"
    exists_if = "ppx_deriving_json.cma"
    requires(-ppx_driver) = "ppx_deriving"
    ppxopt(-ppx_driver) = "ppx_deriving,./ppx_deriving_json.cma"
    requires(ppx_driver) = "ppx_deriving.api"
    archive(ppx_driver, byte) = "ppx_deriving_json.cma"
    archive(ppx_driver, native) = "ppx_deriving_json.cmxa"
  )

  package "syntax" (
    archive(syntax, preprocessor) = "-ignore dummy"
    archive(syntax, toploop) = "-ignore dummy"
    requires(syntax) = "js_of_ocaml-camlp4.deriving"
  )
)

package "tyxml" (
  exists_if = "tyxml_js.cma"
  description = "Tyxml for js_of_ocaml."
  version = "[distributed with js_of_ocaml]"
  archive(byte) = "tyxml_js.cma"
  requires = "tyxml.functor,reactiveData,react,js_of_ocaml,js_of_ocaml.weak"
)

package "weak" (
  description = "weak emulation for js_of_ocaml."
  version = "[distributed with js_of_ocaml]"
  linkopts(javascript) = "+js_of_ocaml-compiler/weak.js"
)

package "async" (
  exists_if = "async_js.cma"
  description = "Async_kernel for js_of_ocaml."
  version = "[distributed with js_of_ocaml]"
  archive(byte) = "async_js.cma"
  requires = "async_kernel,js_of_ocaml"
)

package "graphics" (
  exists_if = "graphics.cma"
  description = "Graphics for js_of_ocaml."
  version = "[distributed with js_of_ocaml]"
  archive(byte) = "graphics.cma"
  requires = "lwt,graphics,js_of_ocaml"
)

package "log" (
  exists_if = "logger.cma"
  description = "Lwt logger for js_of_ocaml."
  version = "[distributed with js_of_ocaml]"
  archive(byte) = "logger.cma"
  requires = "lwt,lwt.log,js_of_ocaml,js_of_ocaml.weak"
)

package "ocamlbuild" (
  requires = "js_of_ocaml-ocamlbuild"
)

package "compiler" (
  requires = "js_of_ocaml-compiler"
)

package "syntax" (
  archive(syntax, preprocessor) = "-ignore dummy"
  archive(syntax, toploop) = "-ignore dummy"
  requires(syntax) = "js_of_ocaml-camlp4"
)

package "toplevel" (
  requires = "js_of_ocaml-toplevel"
)
