BIN := compiler/${COMPILER} compiler/${MINIFIER}

ifeq "${WITH_TOPLEVEL}" "YES"
BIN += jsoo_tools/${MKTOP} jsoo_tools/${MKCMIS}
endif

INTF := lib/*.cmi

IMPL := lib/$(LIBNAME).cma   \
        lib/syntax/pa_js.cmo \
        lib/dll$(LIBNAME)$(DLLEXT) \
        lib/lib$(LIBNAME)$(LIBEXT)

INTF += lib/log/*.cmi
IMPL += lib/log/logger.cma

ifeq "${BEST}" "opt"
ifeq "${NATDYNLINK}" "YES"
IMPL += lib/syntax/pa_js.cmx lib/syntax/pa_js.cmxs
endif
endif

ifeq "${WITH_GRAPHICS}" "YES"
IMPL += lib/graphics/graphics.cma
INTF += lib/graphics/*.cmi
endif

ifeq "${WITH_TYXML}${WITH_REACT}" "YESYES"
IMPL += lib/tyxml/tyxml_js.cma
INTF += lib/tyxml/*.cmi
endif

ifeq "${WITH_ASYNC}" "YES"
IMPL += lib/async/async_js.cma
INTF += lib/async/*.cmi
endif

ifeq "${WITH_PPX}" "YES"
OCAMLFIND_BIN += lib/ppx/${PPX}
IMPL += lib/ppx/ppx_js.cma
INTF += lib/ppx/*.cmi
ifeq "${BEST}" "opt"
ifeq "${NATDYNLINK}" "YES"
IMPL += lib/ppx/ppx_js.cmx lib/ppx/ppx_js.cmxa lib/ppx/ppx_js.cmxs
endif
endif
endif

ifeq "${WITH_PPX_DERIVING}" "YES"
IMPL += lib/ppx/ppx_deriving_json.a
IMPL += lib/ppx/ppx_deriving_json.cma
IMPL += lib/ppx/ppx_deriving_json.cmxa
IMPL += lib/ppx/ppx_deriving_json.cmxs
endif

ifeq "${WITH_TOPLEVEL}" "YES"
IMPL += lib/toplevel/jsooTopPpx.cmo lib/toplevel/jsooTop.cmo lib/toplevel/jsooTopError.cmo lib/toplevel/jsooTopWorker.cmo lib/toplevel/jsooTopAsynchronous.cmo
INTF += lib/toplevel/jsooTopPpx.cmi lib/toplevel/jsooTop.cmi lib/toplevel/jsooTopError.cmi lib/toplevel/jsooTopIntf.cmi lib/toplevel/jsooTopWorkerIntf.cmi lib/toplevel/jsooTopWorker.cmi lib/toplevel/jsooTopAsynchronous.cmi
ifeq ($(shell ocamlc -version | grep -q -E "4.0[^01]"; echo $$?),0)
IMPL += lib/toplevel/jsooTopCamlp4.cmo
endif
endif

JSOO_RUNTIME := mlString.js ieee_754.js int64.js md5.js marshal.js \
	lexing.js parsing.js bigarray.js unix.js \
	stdlib.js io.js fs.js jslib.js jslib_js_of_ocaml.js \
	internalMod.js gc.js polyfill/json2.js bigstring.js

JSOO_RUNTIME_EXTRA := weak.js \
	polyfill/classlist.js \
	polyfill/array.js \
	polyfill/string.js \
	toplevel.js \
	dynlink.js \
	graphics.js \
	nat.js \
	core_kernel.js \
	bin_prot.js \
	predefined_exceptions.js

OTHERS := runtime/runtime.js $(addprefix runtime/,$(JSOO_RUNTIME)) $(addprefix runtime/,$(JSOO_RUNTIME_EXTRA))

COMP_INTF := compiler/compiler.cmi
COMP_IMPL := compiler/compiler.cma
COMP_NAT_IMPL := compiler/compiler.cmxa compiler/compiler.a compiler/compiler.cmx
COMP_NATDYN_IMPL := compiler/compiler.cmxs

ifeq "${WITH_FINDLIB}" "YES"
COMP_INTF += compiler/jsoo_findlib_support.cmi
COMP_IMPL += compiler/jsoo_findlib_support.cma
COMP_NAT_IMPL += compiler/jsoo_findlib_support.cmxa \
                 compiler/jsoo_findlib_support.a \
                 compiler/jsoo_findlib_support.cmx
COMP_NATDYN_IMPL += compiler/jsoo_findlib_support.cmxs
endif

OCAMLBUILD_IMPL := ocamlbuild_js_of_ocaml.cma

INTF += ocamlbuild/_build/ocamlbuild_js_of_ocaml.cmi

ifeq "${BEST}" "opt"
OCAMLBUILD_IMPL += ocamlbuild_js_of_ocaml.cmxa ocamlbuild_js_of_ocaml.a
ifeq "${NATDYNLINK}" "YES"
OCAMLBUILD_IMPL += ocamlbuild_js_of_ocaml.cmxs
endif
endif

IMPL += $(addprefix ocamlbuild/_build/,$(OCAMLBUILD_IMPL))

ifeq "${WITH_DERIVING}" "YES"

JSON := lib/deriving_json/deriving_Json.cmi       \
        lib/deriving_json/deriving_Json_lexer.cmi

INTF += $(JSON)
INTF += lib/syntax/pa_deriving_Json.cmi

IMPL += lib/syntax/pa_deriving_Json.cmo \
        lib/syntax/pa_deriving_Json.cmi \
        lib/deriving_json.cma

NATIMPL := lib/deriving_json.cmxa     \
	   lib/deriving_json.cmxs     \
	   lib/deriving_json$(LIBEXT) \

NATIMPL += $(JSON:.cmi=.cmx)

ifeq "${NATDYNLINK}" "YES"
NATIMPL += lib/syntax/pa_deriving_Json.cmx \
           lib/syntax/pa_deriving_Json.cmxs
COMP_IMPL += $(COMP_NATDYN_IMPL)
endif

ifeq "${BEST}" "opt"
IMPL += $(NATIMPL)
COMP_IMPL += $(COMP_NAT_IMPL)
endif

endif

DOC := ${INTF:.cmi=.mli}
