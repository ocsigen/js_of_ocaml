#Compiler

COMPILER_BIN := compiler/${COMPILER} compiler/${MINIFIER} compiler/${LINKER}

COMPILER_INTF := js_of_ocaml_compiler.cmi
COMPILER_INSTALL := js_of_ocaml_compiler.cma \
                    js_of_ocaml_compiler.cmi
ifeq "$(NATIVE)" "YES"
COMPILER_INSTALL += js_of_ocaml_compiler.cmxa \
                    js_of_ocaml_compiler.a \
                    js_of_ocaml_compiler.cmx
endif
ifeq "$(NATIVE_DYN)" "YES"
COMPILER_INSTALL += js_of_ocaml_compiler.cmxs
endif

#Compiler and findlib

ifeq "${WITH_FINDLIB}" "YES"
FINDLIB_INTF :=
FINDLIB_INSTALL := jsoo_findlib_support.cma \
                   jsoo_findlib_support.cmi
ifeq "$(NATIVE)" "YES"
FINDLIB_INSTALL += jsoo_findlib_support.cmxa \
                   jsoo_findlib_support.a \
                   jsoo_findlib_support.cmx
endif
ifeq "$(NATIVE_DYN)" "YES"
FINDLIB_INSTALL += jsoo_findlib_support.cmxs
endif
endif

#Runtime

JSOO_RUNTIME := mlString.js ieee_754.js int64.js md5.js marshal.js \
	lexing.js parsing.js bigarray.js unix.js \
	stdlib.js io.js fs.js jslib.js jslib_js_of_ocaml.js \
	internalMod.js gc.js polyfill/json2.js bigstring.js

JSOO_RUNTIME_EXTRA := weak.js \
	polyfill/classlist.js \
	polyfill/array.js \
	polyfill/string.js \
	polyfill/object.js \
	toplevel.js \
	dynlink.js \
	graphics.js \
	nat.js \
	core_kernel.js \
	bin_prot.js \
	predefined_exceptions.js

RUNTIME := $(addprefix runtime/,runtime.js $(JSOO_RUNTIME) $(JSOO_RUNTIME_EXTRA))

#Toplevel

ifeq "${WITH_TOPLEVEL}" "YES"
TOPLEVEL_BIN := $(addprefix toplevel/bin/, ${MKTOP} ${MKCMIS} ${LISTUNITS})
TOPLEVEL_INTF := jsooTop.cmi \
                 jsooTopError.cmi \
                 jsooTopPpx.cmi \
                 jsooTopCamlp4.cmi
TOPLEVEL_INSTALL := $(TOPLEVEL_INTF) \
                    $(TOPLEVEL_INTF:.cmi=.cmo)

endif

#Lib

LIBRARY_BASE_INTF := \
js.cmi dom.cmi typed_array.cmi dom_html.cmi \
dom_svg.cmi file.cmi dom_events.cmi firebug.cmi lwt_js.cmi sys_js.cmi \
regexp.cmi cSS.cmi url.cmi form.cmi xmlHttpRequest.cmi \
lwt_js_events.cmi json.cmi jsonp.cmi webGL.cmi webSockets.cmi \
keycode.cmi eventSource.cmi geolocation.cmi jstable.cmi \
mutationObserver.cmi worker.cmi

LIBRARY_INTF := $(LIBRARY_BASE_INTF)

LIBRARY_INSTALL := $(LIBRARY).cma lib_version.cmi   \
                   dll$(LIBRARY)$(DLLEXT) \
                   lib$(LIBRARY)$(LIBEXT)

ifeq "${WITH_LWT}" "YES"
LIBRARY_INTF += log/lwt_log_js.cmi
LIBRARY_INSTALL += log/logger.cma
endif

ifeq "${WITH_GRAPHICS}" "YES"
LIBRARY_INTF += graphics/graphics_js.cmi
LIBRARY_INSTALL += graphics/graphics.cma
endif

ifeq "${WITH_TYXML}${WITH_REACT}" "YESYES"
LIBRARY_INTF += tyxml/tyxml_cast.cmi tyxml/tyxml_cast_sigs.cmi tyxml/tyxml_js.cmi
LIBRARY_INSTALL += tyxml/tyxml_js.cma
endif

ifeq "${WITH_ASYNC}" "YES"
LIBRARY_INTF += async/async_js.cmi
LIBRARY_INSTALL += async/async_js.cma
endif

LIBRARY_INTF += deriving_json/deriving_Json.cmi       \
                deriving_json/deriving_Json_lexer.cmi
LIBRARY_INSTALL  += deriving_json.cma

LIBRARY_INSTALL += $(LIBRARY_INTF)
#PPX

ifeq "${WITH_PPX}" "YES"
PPX_INTF := lib/ppx_js.cmi
PPX_INSTALL := bin/${PPX} lib/ppx_js.cma lib/ppx_js.cmi
ifeq "$(NATIVE)" "YES"
PPX_INSTALL += lib/ppx_js.cmxa \
               lib/ppx_js.a \
               lib/ppx_js.cmx
endif
ifeq "$(NATIVE_DYN)" "YES"
PPX_INSTALL += lib/ppx_js.cmxs
endif


ifeq "${WITH_PPX_DRIVER}" "YES"
PPX_DRIVER_INTF :=
PPX_DRIVER_INSTALL := driver/ppx_js_driver.cma
ifeq "$(NATIVE)" "YES"
PPX_DRIVER_INSTALL += driver/ppx_js_driver.cmxa \
                      driver/ppx_js_driver.a \
                      driver/ppx_js_driver.cmx
endif
ifeq "$(NATIVE_DYN)" "YES"
PPX_DRIVER_INSTALL += driver/ppx_js_driver.cmxs
endif

endif

ifeq "${WITH_PPX_DERIVING}" "YES"
PPX_DERIVING_INTF :=
PPX_DERIVING_INSTALL := lib/ppx_deriving_json.cma
ifeq "$(NATIVE)" "YES"
PPX_DERIVING_INSTALL += lib/ppx_deriving_json.cmxa \
                     lib/ppx_deriving_json.a \
                     lib/ppx_deriving_json.cmx
endif
ifeq "$(NATIVE_DYN)" "YES"
PPX_DERIVING_INSTALL += lib/ppx_deriving_json.cmxs
endif
endif

endif # WITH_PPX

#CamlP4

ifeq "${WITH_CAMLP4}" "YES"
CAMLP4_INTF :=
CAMLP4_INSTALL := lib/pa_js.cmi lib/pa_js.cmo
ifeq "$(NATIVE)" "YES"
CAMLP4_INSTALL += lib/pa_js.cmx
endif
ifeq "$(NATIVE_DYN)" "YES"
CAMLP4_INSTALL += lib/pa_js.cmxs
endif

ifeq "${WITH_DERIVING}" "YES"
CAMLP4_DERIVING_INTF := lib/pa_deriving_Json.cmi
CAMLP4_DERIVING_INSTALL := lib/pa_deriving_Json.cmi lib/pa_deriving_Json.cmo
ifeq "$(NATIVE)" "YES"
CAMLP4_DERIVING_INSTALL += lib/pa_deriving_Json.cmx
endif
ifeq "$(NATIVE_DYN)" "YES"
CAMLP4_DERIVING_INSTALL += lib/pa_deriving_Json.cmxs
endif
endif

endif # WITH CAMLP4

#OCamlbuild

OCAMLBUILD_INTF := ocamlbuild_js_of_ocaml.cmi
OCAMLBUILD_INSTALL := \
  ocamlbuild_js_of_ocaml.cma \
  ocamlbuild_js_of_ocaml.cmi \
  ocamlbuild_js_of_ocaml.ml \
  ocamlbuild_js_of_ocaml.mli
ifeq "$(NATIVE)" "YES"
OCAMLBUILD_INSTALL += \
  ocamlbuild_js_of_ocaml.cmxa \
  ocamlbuild_js_of_ocaml.a
endif
ifeq "$(NATIVE_DYN)" "YES"
OCAMLBUILD_INSTALL += \
  ocamlbuild_js_of_ocaml.cmxs
endif

#Misc

# TODO: add compiler-libs after we move to namespaces
#${addprefix compiler/lib/, ${COMPILER_INTF}}

INTF := ${addprefix lib/, ${LIBRARY_INTF}} \
        ${addprefix ppx/ppx_js/, ${PPX_INTF}} \
        ${addprefix ppx/ppx_js/, ${PPX_DRIVER_INTF}} \
        ${addprefix ppx/ppx_js/ppx_deriving_json/, ${PPX_DERIVING_INTF}} \
        ${addprefix toplevel/lib/, ${TOPLEVEL_INTF}} \
        ${addprefix camlp4/pa_js/, ${CAMLP4_INTF}} \
        ${addprefix camlp4/pa_deriving_json/, ${CAMLP4_DERIVING_INTF}} \
        ${addprefix ocamlbuild/, ${OCAMLBUILD_INTF}} \
        ${addprefix compiler/findlib_support/, ${FINDLIB_INTF}}
