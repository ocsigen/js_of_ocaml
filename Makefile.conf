
# Where binaries are installed:
BINDIR := `dirname  \`which ocamlc\``

####

EXEEXT := $(shell ocamlc -config  | (grep -q -E "system: (win|mingw)" && echo ".exe"))
OBJEXT := .o
LIBEXT := .a
DLLEXT := .so

####

LIBRARY  := js_of_ocaml
COMPILER := js_of_ocaml$(EXEEXT)
MINIFIER := jsoo_minify$(EXEEXT)
LINKER   := jsoo_link$(EXEEXT)
MKTOP    := jsoo_mktop$(EXEEXT)
MKCMIS   := jsoo_mkcmis$(EXEEXT)
LISTUNITS := jsoo_listunits$(EXEEXT)

PPX   := ppx_js$(EXEEXT)

NATIVE ?= YES
NATIVE_DYN ?= $(shell if [ -f `ocamlc -where`/dynlink.cmxa ]; then echo YES; else echo NO; fi)

# opt/byte
ifeq "$(NATIVE)" "YES"
BEST := opt
else
BEST := byte
endif

DOCOPT := -colorize-code -short-functors -charset utf-8

####


ifeq ($(shell ocamlc -config | grep -q "architecture: i386"; echo $$?),0)
ARCH_32BIT=YES
endif

ifeq ($(shell ocamlc -safe-string 2> /dev/null ; echo $$?),0)
SAFESTRING=-safe-string
else
SAFESTRING=-package bytes
endif

### Optional dependencies: deriving
WITH_DERIVING ?= $(shell if [ -f `ocamlfind query deriving 2> /dev/null`/deriving.cma ]; then echo YES; else echo NO; fi)

WITH_GRAPHICS ?= $(shell if [ -f `ocamlfind query graphics 2> /dev/null`/graphics.cmi ]; then echo YES; else echo NO; fi)

WITH_REACT ?= $(shell if [ -f `ocamlfind query reactiveData 2> /dev/null`/reactiveData.cma ]; then echo YES; else echo NO; fi)
WITH_TYXML ?= $(shell if [ -f `ocamlfind query tyxml 2> /dev/null`/tyxml_f.cma ]; then echo YES; else echo NO; fi)

WITH_ASYNC ?= $(shell if [ -f `ocamlfind query async_kernel 2> /dev/null`/async_kernel.cma ]; then echo YES; else echo NO; fi)

WITH_FINDLIB?=YES

WITH_LWT?=YES

WITH_PPX_TOOLS ?= $(shell if [ -f `ocamlfind query ppx_tools 2> /dev/null`/ppx_tools.cma ]; then echo YES; else echo NO; fi)

WITH_PPX_DERIVING ?= $(shell if [ -f `ocamlfind query ppx_deriving 2> /dev/null`/ppx_deriving.cma ]; then echo YES; else echo NO; fi)

WITH_PPX_DRIVER ?= $(shell if [ -f `ocamlfind query ppx_driver 2> /dev/null`/ppx_driver.cma ]; then echo YES; else echo NO; fi)

##disabled for ocaml < 4.02.2
ifeq "${WITH_PPX_TOOLS}" "YES"
ifneq ($(shell ocamlc -version | grep -q -E "4.02.[01]"; echo $$?),0)
WITH_PPX?=YES
WITH_TOPLEVEL=YES
endif
endif

WITH_CAMLP4 ?= $(shell if [ -f `ocamlfind query camlp4.extend 2> /dev/null`/Camlp4Parsers/Camlp4GrammarParser.cmo ]; then echo YES; else echo NO; fi)

METAOCAML ?= 0

VERSION_GIT := $(shell git log -n1 --pretty=format:%h 2> /dev/null)

%.ml: %.cppo.ml
	cppo $< -o $@ -V OCAML:`ocamlc -version`
